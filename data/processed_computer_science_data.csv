,paragraph,split_paragraph
0,"In object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state member variables and implementations of behavior member functions or methods.12 In many languages, the class name is used as the name for the class the template itself, the name for the default constructor of the class a subroutine that creates objects, and as the type of objects generated by instantiating the class; these distinct concepts are easily conflated.2 Although, to the point of conflation, one could argue that is a feature inherent in a language because of its polymorphic nature and why these languages are so powerful, dynamic and adaptable for use compared to languages without polymorphism present. Thus they can model dynamic systems i.e. the real world, machine learning, AI more easily.","['object', 'orient', 'programming', 'class', 'extensible', 'program', 'code', 'template', 'create', 'object', 'provide', 'initial', 'value', 'state', 'member', 'variable', 'implementation', 'behavior', 'member', 'function', 'methods', 'language', 'class', 'class', 'template', 'default', 'constructor', 'class', 'subroutine', 'create', 'object', 'type', 'object', 'generate', 'instantiate', 'class', 'distinct', 'concept', 'easily', 'conflated', 'point', 'conflation', 'argue', 'feature', 'inherent', 'language', 'polymorphic', 'nature', 'language', 'powerful', 'dynamic', 'adaptable', 'use', 'compare', 'language', 'polymorphism', 'present', 'model', 'dynamic', 'system', 'i.e.', 'real', 'world', 'machine', 'learning', 'easily']"
1,"When an object is created by a constructor of the class, the resulting object is called an instance of the class, and the member variables specific to the object are called instance variables, to contrast with the class variables shared across the class.","['object', 'create', 'constructor', 'class', 'result', 'object', 'call', 'instance', 'class', 'member', 'variable', 'specific', 'object', 'call', 'instance', 'variable', 'contrast', 'class', 'variable', 'share', 'class']"
2,"In certain languages, classes are, as a matter of fact, only a compile-time feature new classes cannot be declared at run-time, while in other languages classes are first-class citizens, and are generally themselves objects typically of type .mw-parser-output .monospacedfont-family:monospace,monospaceClass or similar. In these languages, a class that creates classes within itself is called a metaclass.","['certain', 'language', 'class', 'matter', 'fact', 'compile', 'time', 'feature', 'new', 'class', 'declare', 'run', 'time', 'language', 'class', 'class', 'citizen', 'generally', 'object', 'typically', 'type', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospaceclass', 'similar', 'language', 'class', 'create', 'class', 'call', 'metaclass']"
3,"In its most casual usage, people often refer to the ""class"" of an object, but narrowly speaking objects have type: the interface, namely the types of member variables, the signatures of member functions methods, and properties these satisfy. At the same time, a class has an implementation specifically the implementation of the methods, and can create objects of a given type, with a given implementation.3 In the terms of type theory, a class is an implementation‍—‌a concrete data structure and collection of subroutines‍—‌while a type is an interface. Different concrete classes can produce objects of the same abstract type depending on type system; for example, the type Stack might be implemented with two classes – SmallStack fast for small stacks, but scales poorly and ScalableStack scales well but high overhead for small stacks. Similarly, a given class may have several different constructors.","['casual', 'usage', 'people', 'refer', 'class', 'object', 'narrowly', 'speak', 'object', 'type', 'interface', 'type', 'member', 'variable', 'signature', 'member', 'function', 'method', 'property', 'satisfy', 'time', 'class', 'implementation', 'specifically', 'implementation', 'method', 'create', 'object', 'give', 'type', 'give', 'implementation', 'term', 'type', 'theory', 'class', 'implementation\u200d—\u200ca', 'concrete', 'data', 'structure', 'collection', 'subroutines\u200d—\u200cwhile', 'type', 'interface', 'different', 'concrete', 'class', 'produce', 'object', 'abstract', 'type', 'depend', 'type', 'system', 'example', 'type', 'stack', 'implement', 'class', 'smallstack', 'fast', 'small', 'stack', 'scale', 'poorly', 'scalablestack', 'scale', 'high', 'overhead', 'small', 'stack', 'similarly', 'give', 'class', 'different', 'constructor']"
4,"Class types generally represent nouns, such as a person, place or thing, or something nominalized, and a class represents an implementation of these. For example, a Banana type might represent the properties and functionality of bananas in general, while the ABCBanana and XYZBanana classes would represent ways of producing bananas say, banana suppliers or data structures and functions to represent and draw bananas in a video game. The ABCBanana class could then produce particular bananas: instances of the ABCBanana class would be objects of type Banana. Often only a single implementation of a type is given, in which case the class name is often identical with the type name.","['class', 'type', 'generally', 'represent', 'noun', 'person', 'place', 'thing', 'nominalize', 'class', 'represent', 'implementation', 'example', 'banana', 'type', 'represent', 'property', 'functionality', 'banana', 'general', 'abcbanana', 'xyzbanana', 'class', 'represent', 'way', 'produce', 'banana', 'banana', 'supplier', 'datum', 'structure', 'function', 'represent', 'draw', 'banana', 'video', 'game', 'abcbanana', 'class', 'produce', 'particular', 'banana', 'instance', 'abcbanana', 'class', 'object', 'type', 'banana', 'single', 'implementation', 'type', 'give', 'case', 'class', 'identical', 'type']"
5,"Classes are composed from structural and behavioral constituents.1 Programming languages that include classes as a programming construct offer support, for various class-related features, and the syntax required to use these features varies greatly from one programming language to another.","['class', 'compose', 'structural', 'behavioral', 'constituents', 'programming', 'language', 'include', 'class', 'programming', 'construct', 'offer', 'support', 'class', 'relate', 'feature', 'syntax', 'require', 'use', 'feature', 'vary', 'greatly', 'programming', 'language']"
6,"A class contains data field descriptions or properties, fields, data members, or attributes. These are usually field types and names that will be associated with state variables at program run time; these state variables either belong to the class or specific instances of the class. In most languages, the structure defined by the class determines the layout of the memory used by its instances. Other implementations are possible: for example, objects in Python use associative key-value containers.4","['class', 'contain', 'data', 'field', 'description', 'property', 'field', 'datum', 'member', 'attribute', 'usually', 'field', 'type', 'name', 'associate', 'state', 'variable', 'program', 'run', 'time', 'state', 'variable', 'belong', 'class', 'specific', 'instance', 'class', 'language', 'structure', 'define', 'class', 'determine', 'layout', 'memory', 'instance', 'implementation', 'possible', 'example', 'object', 'python', 'use', 'associative', 'key', 'value', 'containers']"
7,"Some programming languages such as Eiffel support specification of invariants as part of the definition of the class, and enforce them through the type system. Encapsulation of state is necessary for being able to enforce the invariants of the class.","['programming', 'language', 'eiffel', 'support', 'specification', 'invariant', 'definition', 'class', 'enforce', 'type', 'system', 'encapsulation', 'state', 'necessary', 'able', 'enforce', 'invariant', 'class']"
8,"The behavior of class or its instances is defined using methods. Methods are subroutines with the ability to operate on objects or classes. These operations may alter the state of an object or simply provide ways of accessing it.5 Many kinds of methods exist, but support for them varies across languages. Some types of methods are created and called by programmer code, while other special methods—such as constructors, destructors, and conversion operators—are created and called by compiler-generated code. A language may also allow the programmer to define and call these special methods.67","['behavior', 'class', 'instance', 'define', 'method', 'method', 'subroutine', 'ability', 'operate', 'object', 'class', 'operation', 'alter', 'state', 'object', 'simply', 'provide', 'way', 'access', 'it', 'kind', 'method', 'exist', 'support', 'vary', 'language', 'type', 'method', 'create', 'call', 'programmer', 'code', 'special', 'method', 'constructor', 'destructor', 'conversion', 'operator', 'create', 'call', 'compiler', 'generate', 'code', 'language', 'allow', 'programmer', 'define', 'special', 'methods']"
9,"Every class implements or realizes an interface by providing structure and behavior. Structure consists of data and state, and behavior consists of code that specifies how methods are implemented.8 There is a distinction between the definition of an interface and the implementation of that interface; however, this line is blurred in many programming languages because class declarations both define and implement an interface. Some languages, however, provide features that separate interface and implementation. For example, an abstract class can define an interface without providing implementation.","['class', 'implement', 'realize', 'interface', 'provide', 'structure', 'behavior', 'structure', 'consist', 'datum', 'state', 'behavior', 'consist', 'code', 'specify', 'method', 'implemented', 'distinction', 'definition', 'interface', 'implementation', 'interface', 'line', 'blur', 'programming', 'language', 'class', 'declaration', 'define', 'implement', 'interface', 'language', 'provide', 'feature', 'separate', 'interface', 'implementation', 'example', 'abstract', 'class', 'define', 'interface', 'provide', 'implementation']"
10,Languages that support class inheritance also allow classes to inherit interfaces from the classes that they are derived from.,"['language', 'support', 'class', 'inheritance', 'allow', 'class', 'inherit', 'interface', 'class', 'derive']"
11,"For example, if ""class A"" inherits from ""class B"" and if ""class B"" implements the interface ""interface B"" then ""class A"" also inherits the functionalityconstants and methods declaration provided by ""interface B"".","['example', 'class', 'inherit', 'class', 'class', 'implement', 'interface', 'interface', 'class', 'inherit', 'functionalityconstant', 'method', 'declaration', 'provide', 'interface']"
12,"In languages that support access specifiers, the interface of a class is considered to be the set of public members of the class, including both methods and attributes via implicit getter and setter methods; any private members or internal data structures are not intended to be depended on by external code and thus are not part of the interface.","['language', 'support', 'access', 'specifier', 'interface', 'class', 'consider', 'set', 'public', 'member', 'class', 'include', 'method', 'attribute', 'implicit', 'getter', 'setter', 'method', 'private', 'member', 'internal', 'datum', 'structure', 'intend', 'depend', 'external', 'code', 'interface']"
13,Object-oriented programming methodology dictates that the operations of any interface of a class are to be independent of each other. It results in a layered design where clients of an interface use the methods declared in the interface. An interface places no requirements for clients to invoke the operations of one interface in any particular order. This approach has the benefit that client code can assume that the operations of an interface are available for use whenever the client has access to the object.9citation needed,"['object', 'orient', 'programming', 'methodology', 'dictate', 'operation', 'interface', 'class', 'independent', 'result', 'layered', 'design', 'client', 'interface', 'use', 'method', 'declare', 'interface', 'interface', 'place', 'requirement', 'client', 'invoke', 'operation', 'interface', 'particular', 'order', 'approach', 'benefit', 'client', 'code', 'assume', 'operation', 'interface', 'available', 'use', 'client', 'access', 'objectcitation', 'need']"
14,"The buttons on the front of your television set are the interface between you and the electrical wiring on the other side of its plastic casing. You press the ""power"" button to toggle the television on and off. In this example, your particular television is the instance, each method is represented by a button, and all the buttons together compose the interface other television sets that are the same model as yours would have the same interface. In its most common form, an interface is a specification of a group of related methods without any associated implementation of the methods.","['button', 'television', 'set', 'interface', 'electrical', 'wiring', 'plastic', 'casing', 'press', 'power', 'button', 'toggle', 'television', 'example', 'particular', 'television', 'instance', 'method', 'represent', 'button', 'button', 'compose', 'interface', 'television', 'set', 'model', 'interface', 'common', 'form', 'interface', 'specification', 'group', 'related', 'method', 'associate', 'implementation', 'method']"
15,"A television set also has a myriad of attributes, such as size and whether it supports colour, which together comprise its structure. A class represents the full description of a television, including its attributes structure and buttons interface.","['television', 'set', 'myriad', 'attribute', 'size', 'support', 'colour', 'comprise', 'structure', 'class', 'represent', 'description', 'television', 'include', 'attribute', 'structure', 'button', 'interface']"
16,"Getting the total number of televisions manufactured could be a static method of the television class. This method is clearly associated with the class, yet is outside the domain of each individual instance of the class. A static method that finds a particular instance out of the set of all television objects is another example.","['get', 'total', 'number', 'television', 'manufacture', 'static', 'method', 'television', 'class', 'method', 'clearly', 'associate', 'class', 'outside', 'domain', 'individual', 'instance', 'class', 'static', 'method', 'find', 'particular', 'instance', 'set', 'television', 'object', 'example']"
17,The following is a common set of access specifiers:10,"['follow', 'common', 'set', 'access', 'specifiers']"
18,"Although many object-oriented languages support the above access specifiers, their semantics may differ.","['object', 'orient', 'language', 'support', 'access', 'specifier', 'semantic', 'differ']"
19,"Object-oriented design uses the access specifiers in conjunction with careful design of public method implementations to enforce class invariants—constraints on the state of the objects. A common usage of access specifiers is to separate the internal data of a class from its interface: the internal structure is made private, while public accessor methods can be used to inspect or alter such private data.","['object', 'orient', 'design', 'use', 'access', 'specifier', 'conjunction', 'careful', 'design', 'public', 'method', 'implementation', 'enforce', 'class', 'invariant', 'constraint', 'state', 'object', 'common', 'usage', 'access', 'specifier', 'separate', 'internal', 'datum', 'class', 'interface', 'internal', 'structure', 'private', 'public', 'accessor', 'method', 'inspect', 'alter', 'private', 'datum']"
20,"Access specifiers do not necessarily control visibility, in that even private members may be visible to client external code. In some languages, an inaccessible but visible member may be referred to at run-time for example, by a pointer returned from a member function, but an attempt to use it by referring to the name of the member from client code will be prevented by the type checker.11","['access', 'specifier', 'necessarily', 'control', 'visibility', 'private', 'member', 'visible', 'client', 'external', 'code', 'language', 'inaccessible', 'visible', 'member', 'refer', 'run', 'time', 'example', 'pointer', 'return', 'member', 'function', 'attempt', 'use', 'refer', 'member', 'client', 'code', 'prevent', 'type', 'checker']"
21,"The various object-oriented programming languages enforce member accessibility and visibility to various degrees, and depending on the language's type system and compilation policies, enforced at either compile-time or run-time. For example, the Java language does not allow client code that accesses the private data of a class to compile. 12 In the C++ language, private methods are visible, but not accessible in the interface; however, they may be made invisible by explicitly declaring fully abstract classes that represent the interfaces of the class.13","['object', 'orient', 'programming', 'language', 'enforce', 'member', 'accessibility', 'visibility', 'degree', 'depend', 'language', 'type', 'system', 'compilation', 'policy', 'enforce', 'compile', 'time', 'run', 'time', 'example', 'java', 'language', 'allow', 'client', 'code', 'access', 'private', 'datum', 'class', 'compile', 'c++', 'language', 'private', 'method', 'visible', 'accessible', 'interface', 'invisible', 'explicitly', 'declare', 'fully', 'abstract', 'class', 'represent', 'interface', 'class']"
22,Some languages feature other accessibility schemes:,"['language', 'feature', 'accessibility', 'scheme']"
23,"In addition to the design of standalone classes, programming languages may support more advanced class design based upon relationships between classes. The inter-class relationship design capabilities commonly provided are compositional and hierarchical.","['addition', 'design', 'standalone', 'class', 'programming', 'language', 'support', 'advanced', 'class', 'design', 'base', 'relationship', 'class', 'inter', 'class', 'relationship', 'design', 'capability', 'commonly', 'provide', 'compositional', 'hierarchical']"
24,"Classes can be composed of other classes, thereby establishing a compositional relationship between the enclosing class and its embedded classes. Compositional relationship between classes is also commonly known as a has-a relationship.16 For example, a class ""Car"" could be composed of and contain a class ""Engine"". Therefore, a Car has an Engine. One aspect of composition is containment, which is the enclosure of component instances by the instance that has them. If an enclosing object contains component instances by value, the components and their enclosing object have a similar lifetime. If the components are contained by reference, they may not have a similar lifetime.17 For example, in Objective-C 2.0:","['class', 'compose', 'class', 'establish', 'compositional', 'relationship', 'enclose', 'class', 'embed', 'class', 'compositional', 'relationship', 'class', 'commonly', 'know', 'relationship', 'example', 'class', 'car', 'compose', 'contain', 'class', 'engine', 'car', 'engine', 'aspect', 'composition', 'containment', 'enclosure', 'component', 'instance', 'instance', 'enclose', 'object', 'contain', 'component', 'instance', 'value', 'component', 'enclose', 'object', 'similar', 'lifetime', 'component', 'contain', 'reference', 'similar', 'lifetime', 'example', 'objective', '2']"
25,"This Car class has an instance of NSString a string object, Engine, and NSArray an array object.","['car', 'class', 'instance', 'nsstring', 'string', 'object', 'engine', 'nsarray', 'array', 'object']"
26,"Classes can be derived from one or more existing classes, thereby establishing a hierarchical relationship between the derived-from classes base classes, parent classes or .mw-parser-output .vanchor>:target~.vanchor-textbackground-color:#b1d2ffsuperclasses and the derived class child class or subclass . The relationship of the derived class to the derived-from classes is commonly known as an is-a relationship.18 For example, a class 'Button' could be derived from a class 'Control'. Therefore, a Button is a Control. Structural and behavioral members of the parent classes are inherited by the child class. Derived classes can define additional structural members data fields and behavioral members methods in addition to those that they inherit and are therefore specializations of their superclasses. Also, derived classes can override inherited methods if the language allows.","['class', 'derive', 'exist', 'class', 'establish', 'hierarchical', 'relationship', 'derive', 'class', 'base', 'class', 'parent', 'class', '.mw', 'parser', 'output', '.vanchor>:target~.vanchor', 'textbackground', 'color:#b1d2ffsuperclasse', 'derive', 'class', 'child', 'class', 'subclass', 'relationship', 'derive', 'class', 'derive', 'class', 'commonly', 'know', 'relationship', 'example', 'class', 'button', 'derive', 'class', 'control', 'button', 'control', 'structural', 'behavioral', 'member', 'parent', 'class', 'inherit', 'child', 'class', 'derive', 'class', 'define', 'additional', 'structural', 'member', 'datum', 'field', 'behavioral', 'member', 'method', 'addition', 'inherit', 'specialization', 'superclass', 'derive', 'class', 'override', 'inherit', 'method', 'language', 'allow']"
27,"Not all languages support multiple inheritance. For example, Java allows a class to implement multiple interfaces, but only inherit from one class.19 If multiple inheritance is allowed, the hierarchy is a directed acyclic graph or DAG for short, otherwise it is a tree. The hierarchy has classes as nodes and inheritance relationships as links. Classes in the same level are more likely to be associated than classes in different levels. The levels of this hierarchy are called layers or levels of abstraction.","['language', 'support', 'multiple', 'inheritance', 'example', 'java', 'allow', 'class', 'implement', 'multiple', 'interface', 'inherit', 'class', 'multiple', 'inheritance', 'allow', 'hierarchy', 'directed', 'acyclic', 'graph', 'dag', 'short', 'tree', 'hierarchy', 'class', 'node', 'inheritance', 'relationship', 'link', 'class', 'level', 'likely', 'associate', 'class', 'different', 'level', 'level', 'hierarchy', 'call', 'layer', 'level', 'abstraction']"
28,"Example Simplified Objective-C 2.0 code, from iPhone SDK:","['example', 'simplified', 'objective', '2', 'code', 'iphone', 'sdk']"
29,"In this example, a UITableView is a UIScrollView is a UIView is a UIResponder is an NSObject.","['example', 'uitableview', 'uiscrollview', 'uiview', 'uiresponder', 'nsobject']"
30,"Conceptually, a superclass is a superset of its subclasses. For example, a common class hierarchy would involve GraphicObject as a superclass of Rectangle and Ellipse, while Square would be a subclass of Rectangle. These are all subset relations in set theory as well, i.e., all squares are rectangles but not all rectangles are squares.","['conceptually', 'superclass', 'superset', 'subclass', 'example', 'common', 'class', 'hierarchy', 'involve', 'graphicobject', 'superclass', 'rectangle', 'ellipse', 'square', 'subclass', 'rectangle', 'subset', 'relation', 'set', 'theory', 'i.e.', 'square', 'rectangle', 'rectangle', 'square']"
31,"A common conceptual error is to mistake a part of relation with a subclass. For example, a car and truck are both kinds of vehicles and it would be appropriate to model them as subclasses of a vehicle class. However, it would be an error to model the component parts of the car as subclass relations. For example, a car is composed of an engine and body, but it would not be appropriate to model engine or body as a subclass of car.","['common', 'conceptual', 'error', 'mistake', 'relation', 'subclass', 'example', 'car', 'truck', 'kind', 'vehicle', 'appropriate', 'model', 'subclass', 'vehicle', 'class', 'error', 'model', 'component', 'part', 'car', 'subclass', 'relation', 'example', 'car', 'compose', 'engine', 'body', 'appropriate', 'model', 'engine', 'body', 'subclass', 'car']"
32,"In object-oriented modeling these kinds of relations are typically modeled as object properties. In this example, the Car class would have a property called parts. parts would be typed to hold a collection of objects, such as instances of Body, Engine, Tires, etc. Object modeling languages such as UML include capabilities to model various aspects of ""part of"" and other kinds of relations – data such as the cardinality of the objects, constraints on input and output values, etc. This information can be utilized by developer tools to generate additional code beside the basic data definitions for the objects, such as error checking on get and set methods.20","['object', 'orient', 'model', 'kind', 'relation', 'typically', 'model', 'object', 'property', 'example', 'car', 'class', 'property', 'call', 'part', 'part', 'type', 'hold', 'collection', 'object', 'instance', 'body', 'engine', 'tires', 'etc', 'object', 'modeling', 'language', 'uml', 'include', 'capability', 'model', 'aspect', 'kind', 'relation', 'datum', 'cardinality', 'object', 'constraint', 'input', 'output', 'value', 'etc', 'information', 'utilize', 'developer', 'tool', 'generate', 'additional', 'code', 'basic', 'datum', 'definition', 'object', 'error', 'checking', 'set', 'methods']"
33,"One important question when modeling and implementing a system of object classes is whether a class can have one or more superclasses. In the real world with actual sets it would be rare to find sets that didn't intersect with more than one other set. However, while some systems such as Flavors and CLOS provide a capability for more than one parent to do so at run time introduces complexity that many in the object-oriented community consider antithetical to the goals of using object classes in the first place. Understanding which class will be responsible for handling a message can get complex when dealing with more than one superclass. If used carelessly this feature can introduce some of the same system complexity and ambiguity classes were designed to avoid.21","['important', 'question', 'model', 'implement', 'system', 'object', 'class', 'class', 'superclass', 'real', 'world', 'actual', 'set', 'rare', 'find', 'set', 'intersect', 'set', 'system', 'flavors', 'clos', 'provide', 'capability', 'parent', 'run', 'time', 'introduce', 'complexity', 'object', 'orient', 'community', 'consider', 'antithetical', 'goal', 'object', 'class', 'place', 'understand', 'class', 'responsible', 'handle', 'message', 'complex', 'deal', 'superclass', 'carelessly', 'feature', 'introduce', 'system', 'complexity', 'ambiguity', 'class', 'design', 'avoid']"
34,"Most modern object-oriented languages such as Smalltalk and Java require single inheritance at run time. For these languages, multiple inheritance may be useful for modeling but not for an implementation.","['modern', 'object', 'orient', 'language', 'smalltalk', 'java', 'require', 'single', 'inheritance', 'run', 'time', 'language', 'multiple', 'inheritance', 'useful', 'modeling', 'implementation']"
35,"However, semantic web application objects do have multiple superclasses. The volatility of the Internet requires this level of flexibility and the technology standards such as the Web Ontology Language OWL are designed to support it.","['semantic', 'web', 'application', 'object', 'multiple', 'superclass', 'volatility', 'internet', 'require', 'level', 'flexibility', 'technology', 'standard', 'web', 'ontology', 'language', 'owl', 'design', 'support']"
36,"A similar issue is whether or not the class hierarchy can be modified at run time. Languages such as Flavors, CLOS, and Smalltalk all support this feature as part of their meta-object protocols. Since classes are themselves first-class objects, it is possible to have them dynamically alter their structure by sending them the appropriate messages. Other languages that focus more on strong typing such as Java and C++ do not allow the class hierarchy to be modified at run time. Semantic web objects have the capability for run time changes to classes. The rational is similar to the justification for allowing multiple superclasses, that the Internet is so dynamic and flexible that dynamic changes to the hierarchy are required to manage this volatility.22","['similar', 'issue', 'class', 'hierarchy', 'modify', 'run', 'time', 'language', 'flavors', 'clos', 'smalltalk', 'support', 'feature', 'meta', 'object', 'protocol', 'class', 'class', 'object', 'possible', 'dynamically', 'alter', 'structure', 'send', 'appropriate', 'message', 'language', 'focus', 'strong', 'typing', 'java', 'c++', 'allow', 'class', 'hierarchy', 'modify', 'run', 'time', 'semantic', 'web', 'object', 'capability', 'run', 'time', 'change', 'class', 'rational', 'similar', 'justification', 'allow', 'multiple', 'superclass', 'internet', 'dynamic', 'flexible', 'dynamic', 'change', 'hierarchy', 'require', 'manage', 'volatility']"
37,"Although class-based languages are commonly assumed to support inheritance, inheritance is not an intrinsic aspect of the concept of classes. Some languages, often referred to as ""object-based languages"", support classes yet do not support inheritance. Examples of object-based languages include earlier versions of Visual Basic.","['class', 'base', 'language', 'commonly', 'assume', 'support', 'inheritance', 'inheritance', 'intrinsic', 'aspect', 'concept', 'class', 'language', 'refer', 'object', 'base', 'language', 'support', 'class', 'support', 'inheritance', 'example', 'object', 'base', 'language', 'include', 'early', 'version', 'visual', 'basic']"
38,"In object-oriented analysis and in UML, an association between two classes represents a collaboration between the classes or their corresponding instances. Associations have direction; for example, a bi-directional association between two classes indicates that both of the classes are aware of their relationship.23 Associations may be labeled according to their name or purpose.24","['object', 'orient', 'analysis', 'uml', 'association', 'class', 'represent', 'collaboration', 'class', 'correspond', 'instance', 'association', 'direction', 'example', 'directional', 'association', 'class', 'indicate', 'class', 'aware', 'relationship', 'associations', 'label', 'accord', 'purpose']"
39,"An association role is given end of an association and describes the role of the corresponding class. For example, a ""subscriber"" role describes the way instances of the class ""Person"" participate in a ""subscribes-to"" association with the class ""Magazine"". Also, a ""Magazine"" has the ""subscribed magazine"" role in the same association. Association role multiplicity describes how many instances correspond to each instance of the other class of the association. Common multiplicities are ""0..1"", ""1..1"", ""1..*"" and ""0..*"", where the ""*"" specifies any number of instances.23","['association', 'role', 'give', 'end', 'association', 'describe', 'role', 'corresponding', 'class', 'example', 'subscriber', 'role', 'describe', 'way', 'instance', 'class', 'person', 'participate', 'subscribes', 'association', 'class', 'magazine', 'magazine', 'subscribe', 'magazine', 'role', 'association', 'association', 'role', 'multiplicity', 'describe', 'instance', 'correspond', 'instance', 'class', 'association', 'common', 'multiplicity', 'specify', 'number', 'instances']"
40,"There are many categories of classes, some of which overlap.","['category', 'class', 'overlap']"
41,"In a language that supports inheritance, an abstract class, or abstract base class ABC, is a class that cannot be instantiated because it is either labeled as abstract or it simply specifies abstract methods or virtual methods. An abstract class may provide implementations of some methods, and may also specify virtual methods via signatures that are to be implemented by direct or indirect descendants of the abstract class. Before a class derived from an abstract class can be instantiated, all abstract methods of its parent classes must be implemented by some class in the derivation chain.25","['language', 'support', 'inheritance', 'abstract', 'class', 'abstract', 'base', 'class', 'abc', 'class', 'instantiate', 'label', 'abstract', 'simply', 'specify', 'abstract', 'method', 'virtual', 'method', 'abstract', 'class', 'provide', 'implementation', 'method', 'specify', 'virtual', 'method', 'signature', 'implement', 'direct', 'indirect', 'descendant', 'abstract', 'class', 'class', 'derive', 'abstract', 'class', 'instantiate', 'abstract', 'method', 'parent', 'class', 'implement', 'class', 'derivation', 'chain']"
42,"Most object-oriented programming languages allow the programmer to specify which classes are considered abstract and will not allow these to be instantiated. For example, in Java, C# and PHP, the keyword abstract is used.2627 In C++, an abstract class is a class having at least one abstract method given by the appropriate syntax in that language a pure virtual function in C++ parlance.25","['object', 'orient', 'programming', 'language', 'allow', 'programmer', 'specify', 'class', 'consider', 'abstract', 'allow', 'instantiate', 'example', 'java', 'php', 'keyword', 'abstract', 'used', 'c++', 'abstract', 'class', 'class', 'have', 'abstract', 'method', 'give', 'appropriate', 'syntax', 'language', 'pure', 'virtual', 'function', 'c++', 'parlance']"
43,"A class consisting of only virtual methods is called a Pure Abstract Base Class or Pure ABC in C++ and is also known as an interface by users of the language.13 Other languages, notably Java and C#, support a variant of abstract classes called an interface via a keyword in the language. In these languages, multiple inheritance is not allowed, but a class can implement multiple interfaces. Such a class can only contain abstract publicly accessible methods.192829","['class', 'consist', 'virtual', 'method', 'call', 'pure', 'abstract', 'base', 'class', 'pure', 'abc', 'c++', 'know', 'interface', 'user', 'language', 'language', 'notably', 'java', 'support', 'variant', 'abstract', 'class', 'call', 'interface', 'keyword', 'language', 'language', 'multiple', 'inheritance', 'allow', 'class', 'implement', 'multiple', 'interface', 'class', 'contain', 'abstract', 'publicly', 'accessible', 'methods']"
44,"A concrete class is a class that can be instantiated, as opposed to abstract classes, which cannot.","['concrete', 'class', 'class', 'instantiate', 'oppose', 'abstract', 'class']"
45,"In some languages, classes can be declared in scopes other than the global scope. There are various types of such classes.","['language', 'class', 'declare', 'scope', 'global', 'scope', 'type', 'class']"
46,"An inner class is a class defined within another class. The relationship between an inner class and its containing class can also be treated as another type of class association. An inner class is typically neither associated with instances of the enclosing class nor instantiated along with its enclosing class. Depending on language, it may or may not be possible to refer to the class from outside the enclosing class. A related concept is inner types, also known as inner data type or nested type, which is a generalization of the concept of inner classes. C++ is an example of a language that supports both inner classes and inner types via typedef declarations.3031","['inner', 'class', 'class', 'define', 'class', 'relationship', 'inner', 'class', 'contain', 'class', 'treat', 'type', 'class', 'association', 'inner', 'class', 'typically', 'associate', 'instance', 'enclosing', 'class', 'instantiate', 'enclose', 'class', 'depend', 'language', 'possible', 'refer', 'class', 'outside', 'enclosing', 'class', 'related', 'concept', 'inner', 'type', 'know', 'inner', 'datum', 'type', 'nested', 'type', 'generalization', 'concept', 'inner', 'class', 'c++', 'example', 'language', 'support', 'inner', 'class', 'inner', 'type', 'typedef', 'declarations']"
47,"Another type is a local class, which is a class defined within a procedure or function. This limits references to the class name to within the scope where the class is declared. Depending on the semantic rules of the language, there may be additional restrictions on local classes compared to non-local ones. One common restriction is to disallow local class methods to access local variables of the enclosing function. For example, in C++, a local class may refer to static variables declared within its enclosing function, but may not access the function's automatic variables.32","['type', 'local', 'class', 'class', 'define', 'procedure', 'function', 'limit', 'reference', 'class', 'scope', 'class', 'declare', 'depend', 'semantic', 'rule', 'language', 'additional', 'restriction', 'local', 'class', 'compare', 'non', 'local', 'one', 'common', 'restriction', 'disallow', 'local', 'class', 'method', 'access', 'local', 'variable', 'enclosing', 'function', 'example', 'c++', 'local', 'class', 'refer', 'static', 'variable', 'declare', 'enclose', 'function', 'access', 'function', 'automatic', 'variables']"
48,Metaclasses are classes whose instances are classes.33 A metaclass describes a common structure of a collection of classes and can implement a design pattern or describe particular kinds of classes. Metaclasses are often used to describe frameworks.34,"['metaclasse', 'class', 'instance', 'classes', 'metaclass', 'describe', 'common', 'structure', 'collection', 'class', 'implement', 'design', 'pattern', 'describe', 'particular', 'kind', 'class', 'metaclasse', 'describe', 'frameworks']"
49,"In some languages, such as Python, Ruby or Smalltalk, a class is also an object; thus each class is an instance of a unique metaclass that is built into the language. 4 35 36 The Common Lisp Object System CLOS provides metaobject protocols MOPs to implement those classes and metaclasses. 37","['language', 'python', 'ruby', 'smalltalk', 'class', 'object', 'class', 'instance', 'unique', 'metaclass', 'build', 'language', 'common', 'lisp', 'object', 'system', 'clos', 'provide', 'metaobject', 'protocol', 'mop', 'implement', 'class', 'metaclasse']"
50,"Non-subclassable classes allow programmers to design classes and hierarchies of classes where at some level in the hierarchy, further derivation is prohibited a stand-alone class may be also designated as non-subclassable, preventing the formation of any hierarchy. Contrast this to abstract classes, which imply, encourage, and require derivation in order to be used at all. A non-subclassable class is implicitly concrete.","['non', 'subclassable', 'class', 'allow', 'programmer', 'design', 'class', 'hierarchy', 'class', 'level', 'hierarchy', 'derivation', 'prohibit', 'stand', 'class', 'designate', 'non', 'subclassable', 'prevent', 'formation', 'hierarchy', 'contrast', 'abstract', 'class', 'imply', 'encourage', 'require', 'derivation', 'order', 'non', 'subclassable', 'class', 'implicitly', 'concrete']"
51,"A non-subclassable class is created by declaring the class as sealed in C# or as final in Java or PHP.383940 For example, Java's String class is designated as final.41","['non', 'subclassable', 'class', 'create', 'declare', 'class', 'seal', 'final', 'java', 'php', 'example', 'java', 'string', 'class', 'designate', 'final']"
52,Non-subclassable classes may allow a compiler in compiled languages to perform optimizations that are not available for subclassable classes. 42,"['non', 'subclassable', 'class', 'allow', 'compiler', 'compile', 'language', 'perform', 'optimization', 'available', 'subclassable', 'class']"
53,"An open class is one that can be changed. Typically, an executable program cannot be changed by customers. Developers can often change some classes, but typically cannot change standard or built-in ones. In Ruby, all classes are open. In Python, classes can be created at runtime, and all can be modified afterwards.43 Objective-C categories permit the programmer to add methods to an existing class without the need to recompile that class or even have access to its source code.","['open', 'class', 'change', 'typically', 'executable', 'program', 'change', 'customer', 'developer', 'change', 'class', 'typically', 'change', 'standard', 'build', 'one', 'ruby', 'class', 'open', 'python', 'class', 'create', 'runtime', 'modify', 'afterwards', 'objective', 'category', 'permit', 'programmer', 'add', 'method', 'exist', 'class', 'need', 'recompile', 'class', 'access', 'source', 'code']"
54,"Some languages have special support for mixins, though in any language with multiple inheritance a mixin is simply a class that does not represent an is-a-type-of relationship. Mixins are typically used to add the same methods to multiple classes; for example, a class UnicodeConversionMixin might provide a method called unicode_to_ascii when included in classes FileReader and WebPageScraper that do not share a common parent.","['language', 'special', 'support', 'mixin', 'language', 'multiple', 'inheritance', 'mixin', 'simply', 'class', 'represent', 'type', 'relationship', 'mixin', 'typically', 'add', 'method', 'multiple', 'class', 'example', 'class', 'unicodeconversionmixin', 'provide', 'method', 'call', 'unicode_to_ascii', 'include', 'class', 'filereader', 'webpagescraper', 'share', 'common', 'parent']"
55,"In languages supporting the feature, a partial class is a class whose definition may be split into multiple pieces, within a single source-code file or across multiple files.44 The pieces are merged at compile-time, making compiler output the same as for a non-partial class.","['language', 'support', 'feature', 'partial', 'class', 'class', 'definition', 'split', 'multiple', 'piece', 'single', 'source', 'code', 'file', 'multiple', 'files', 'piece', 'merge', 'compile', 'time', 'make', 'compiler', 'output', 'non', 'partial', 'class']"
56,"The primary motivation for introduction of partial classes is to facilitate the implementation of code generators, such as visual designers.44 It is otherwise a challenge or compromise to develop code generators that can manage the generated code when it is interleaved within developer-written code. Using partial classes, a code generator can process a separate file or coarse-grained partial class within a file, and is thus alleviated from intricately interjecting generated code via extensive parsing, increasing compiler efficiency and eliminating the potential risk of corrupting developer code. In a simple implementation of partial classes, the compiler can perform a phase of precompilation where it ""unifies"" all the parts of a partial class. Then, compilation can proceed as usual.","['primary', 'motivation', 'introduction', 'partial', 'class', 'facilitate', 'implementation', 'code', 'generator', 'visual', 'designers', 'challenge', 'compromise', 'develop', 'code', 'generator', 'manage', 'generate', 'code', 'interleave', 'developer', 'write', 'code', 'partial', 'class', 'code', 'generator', 'process', 'separate', 'file', 'coarse', 'grain', 'partial', 'class', 'file', 'alleviate', 'intricately', 'interject', 'generate', 'code', 'extensive', 'parsing', 'increase', 'compiler', 'efficiency', 'eliminate', 'potential', 'risk', 'corrupt', 'developer', 'code', 'simple', 'implementation', 'partial', 'class', 'compiler', 'perform', 'phase', 'precompilation', 'unify', 'part', 'partial', 'class', 'compilation', 'proceed', 'usual']"
57,Other benefits and effects of the partial class feature include:,"['benefit', 'effect', 'partial', 'class', 'feature', 'include']"
58,"Partial classes have existed in Smalltalk under the name of Class Extensions for considerable time. With the arrival of the .NET framework 2, Microsoft introduced partial classes, supported in both C# 2.0 and Visual Basic 2005. WinRT also supports partial classes.","['partial', 'class', 'exist', 'smalltalk', 'class', 'extensions', 'considerable', 'time', 'arrival', '.net', 'framework', 'microsoft', 'introduce', 'partial', 'class', 'support', '2', 'visual', 'basic', '2005', 'winrt', 'support', 'partial', 'class']"
59,"This simple example, written in Visual Basic .NET, shows how parts of the same class are defined in two different files.","['simple', 'example', 'write', 'visual', 'basic', '.net', 'show', 'part', 'class', 'define', 'different', 'file']"
60,"When compiled, the result is the same as if the two files were written as one, like this:","['compile', 'result', 'file', 'write', 'like']"
61,"In Objective-C, partial classes, also known as categories, may even spread over multiple libraries and executables, like the following example. But a key difference is that Objective-C's categories can overwrite definitions in another interface declaration, and that categories aren't equal to original class definition the first requires the last.45 Instead, .NET partial class can't have conflicting definitions, and all partial definitions are equal to the others.44","['objective', 'partial', 'class', 'know', 'category', 'spread', 'multiple', 'library', 'executable', 'like', 'follow', 'example', 'key', 'difference', 'objective', 'category', 'overwrite', 'definition', 'interface', 'declaration', 'category', 'equal', 'original', 'class', 'definition', 'require', 'last', 'instead', '.net', 'partial', 'class', 'conflicting', 'definition', 'partial', 'definition', 'equal', 'others']"
62,"In user-supplied library, a separate binary from Foundation framework, header file NSData+base64.h:","['user', 'supply', 'library', 'separate', 'binary', 'foundation', 'framework', 'header', 'file', 'nsdata+base64.h']"
63,"And in an app, yet another separate binary file, source code file main.m:","['app', 'separate', 'binary', 'file', 'source', 'code', 'file', 'main.m']"
64,The dispatcher will find both methods called over the NSData instance and invoke both of them correctly.,"['dispatcher', 'find', 'method', 'call', 'nsdata', 'instance', 'invoke', 'correctly']"
65,"Uninstantiable classes allow programmers to group together per-class fields and methods that are accessible at runtime without an instance of the class. Indeed, instantiation is prohibited for this kind of class.","['uninstantiable', 'class', 'allow', 'programmer', 'group', 'class', 'field', 'method', 'accessible', 'runtime', 'instance', 'class', 'instantiation', 'prohibit', 'kind', 'class']"
66,"For example, in C#, a class marked ""static"" can not be instantiated, can only have static members fields, methods, other, may not have instance constructors, and is sealed. 46","['example', 'class', 'mark', 'static', 'instantiate', 'static', 'member', 'field', 'method', 'instance', 'constructor', 'seal']"
67,An unnamed class or anonymous class is a class that is not bound to a name or identifier upon definition.4748 This is analogous to named versus unnamed functions.,"['unnamed', 'class', 'anonymous', 'class', 'class', 'bind', 'identifi', 'definition', 'analogous', 'name', 'versus', 'unnamed', 'function']"
68,The benefits of organizing software into object classes fall into three categories:49,"['benefit', 'organize', 'software', 'object', 'class', 'fall', 'categories']"
69,"Object classes facilitate rapid development because they lessen the semantic gap between the code and the users. System analysts can talk to both developers and users using essentially the same vocabulary, talking about accounts, customers, bills, etc. Object classes often facilitate rapid development because most object-oriented environments come with powerful debugging and testing tools. Instances of classes can be inspected at run time to verify that the system is performing as expected. Also, rather than get dumps of core memory, most object-oriented environments have interpreted debugging capabilities so that the developer can analyze exactly where in the program the error occurred and can see which methods were called to which arguments and with what arguments.50","['object', 'class', 'facilitate', 'rapid', 'development', 'lessen', 'semantic', 'gap', 'code', 'user', 'system', 'analyst', 'talk', 'developer', 'user', 'essentially', 'vocabulary', 'talk', 'account', 'customer', 'bill', 'etc', 'object', 'class', 'facilitate', 'rapid', 'development', 'object', 'orient', 'environment', 'come', 'powerful', 'debug', 'testing', 'tool', 'instance', 'class', 'inspect', 'run', 'time', 'verify', 'system', 'perform', 'expect', 'dump', 'core', 'memory', 'object', 'orient', 'environment', 'interpret', 'debug', 'capability', 'developer', 'analyze', 'exactly', 'program', 'error', 'occur', 'method', 'call', 'argument', 'arguments']"
70,Object classes facilitate ease of maintenance via encapsulation. When developers need to change the behavior of an object they can localize the change to just that object and its component parts. This reduces the potential for unwanted side effects from maintenance enhancements.,"['object', 'class', 'facilitate', 'ease', 'maintenance', 'encapsulation', 'developer', 'need', 'change', 'behavior', 'object', 'localize', 'change', 'object', 'component', 'part', 'reduce', 'potential', 'unwanted', 'effect', 'maintenance', 'enhancement']"
71,Software re-use is also a major benefit of using Object classes. Classes facilitate re-use via inheritance and interfaces. When a new behavior is required it can often be achieved by creating a new class and having that class inherit the default behaviors and data of its superclass and then tailor some aspect of the behavior or data accordingly. Re-use via interfaces also known as methods occurs when another object wants to invoke rather than create a new kind of some object class. This method for re-use removes many of the common errors that can make their way into software when one program re-uses code from another.51,"['software', 'use', 'major', 'benefit', 'object', 'class', 'class', 'facilitate', 'use', 'inheritance', 'interface', 'new', 'behavior', 'require', 'achieve', 'create', 'new', 'class', 'have', 'class', 'inherit', 'default', 'behavior', 'datum', 'superclass', 'tailor', 'aspect', 'behavior', 'data', 'accordingly', 'use', 'interface', 'know', 'method', 'occur', 'object', 'want', 'invoke', 'create', 'new', 'kind', 'object', 'class', 'method', 'use', 'remove', 'common', 'error', 'way', 'software', 'program', 'use', 'code', 'another']"
72,"As a data type, a class is usually considered as a compile-time construct.52 A language or library may also support prototype or factory metaobjects that represent run-time information about classes, or even represent metadata that provides access to reflection facilities and ability to manipulate data structure formats at run-time. Many languages distinguish this kind of run-time type information about classes from a class on the basis that the information is not needed at run-time. Some dynamic languages do not make strict distinctions between run-time and compile-time constructs, and therefore may not distinguish between metaobjects and classes.","['data', 'type', 'class', 'usually', 'consider', 'compile', 'time', 'construct', 'language', 'library', 'support', 'prototype', 'factory', 'metaobject', 'represent', 'run', 'time', 'information', 'class', 'represent', 'metadata', 'provide', 'access', 'reflection', 'facility', 'ability', 'manipulate', 'data', 'structure', 'format', 'run', 'time', 'language', 'distinguish', 'kind', 'run', 'time', 'type', 'information', 'class', 'class', 'basis', 'information', 'need', 'run', 'time', 'dynamic', 'language', 'strict', 'distinction', 'run', 'time', 'compile', 'time', 'construct', 'distinguish', 'metaobject', 'class']"
73,"For example, if Human is a metaobject representing the class Person, then instances of class Person can be created by using the facilities of the Human metaobject.","['example', 'human', 'metaobject', 'represent', 'class', 'person', 'instance', 'class', 'person', 'create', 'facility', 'human', 'metaobject']"
74,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
75,"A method in object-oriented programming OOP is a procedure associated with a message and an object. An object consists of state data and behavior; these compose an interface, which specifies how the object may be utilized by any of its various consumers. A method is a behavior of an object parametrized by a consumer.","['method', 'object', 'orient', 'programming', 'oop', 'procedure', 'associate', 'message', 'object', 'object', 'consist', 'state', 'datum', 'behavior', 'compose', 'interface', 'specify', 'object', 'utilize', 'consumer', 'method', 'behavior', 'object', 'parametrize', 'consumer']"
76,"Data is represented as properties of the object, and behaviors are represented as methods. For example, a Window object could have methods such as open and close, while its state whether it is open or closed at any given point in time would be a property.","['datum', 'represent', 'property', 'object', 'behavior', 'represent', 'method', 'example', 'window', 'object', 'method', 'open', 'close', 'state', 'open', 'close', 'give', 'point', 'time', 'property']"
77,"In class-based programming, methods are defined within a class, and objects are instances of a given class. One of the most important capabilities that a method provides is method overriding - the same name e.g., area can be used for multiple different kinds of classes. This allows the sending objects to invoke behaviors and to delegate the implementation of those behaviors to the receiving object. A method in Java programming sets the behavior of a class object. For example, an object can send an area message to another object and the appropriate formula is invoked whether the receiving object is a rectangle, circle, triangle, etc.","['class', 'base', 'programming', 'method', 'define', 'class', 'object', 'instance', 'give', 'class', 'important', 'capability', 'method', 'provide', 'method', 'override', 'e.g.', 'area', 'multiple', 'different', 'kind', 'class', 'allow', 'send', 'object', 'invoke', 'behavior', 'delegate', 'implementation', 'behavior', 'receiving', 'object', 'method', 'java', 'programming', 'set', 'behavior', 'class', 'object', 'example', 'object', 'send', 'area', 'message', 'object', 'appropriate', 'formula', 'invoke', 'receiving', 'object', 'rectangle', 'circle', 'triangle', 'etc']"
78,Methods also provide the interface that other classes use to access and modify the properties of an object; this is known as encapsulation. Encapsulation and overriding are the two primary distinguishing features between methods and procedure calls.1,"['method', 'provide', 'interface', 'class', 'use', 'access', 'modify', 'property', 'object', 'know', 'encapsulation', 'encapsulation', 'override', 'primary', 'distinguish', 'feature', 'method', 'procedure', 'calls']"
79,"Method overriding and overloading are two of the most significant ways that a method differs from a conventional procedure or function call. Overriding refers to a subclass redefining the implementation of a method of its superclass. For example, findArea may be a method defined on a shape class,2 triangle, etc. would each define the appropriate formula to calculate their area. The idea is to look at objects as ""black boxes"" so that changes to the internals of the object can be made with minimal impact on the other objects that use it. This is known as encapsulation and is meant to make code easier to maintain and re-use.","['method', 'override', 'overloading', 'significant', 'way', 'method', 'differ', 'conventional', 'procedure', 'function', 'override', 'refer', 'subclass', 'redefine', 'implementation', 'method', 'superclass', 'example', 'findarea', 'method', 'define', 'shape', 'class', 'triangle', 'etc', 'define', 'appropriate', 'formula', 'calculate', 'area', 'idea', 'look', 'object', 'black', 'box', 'change', 'internal', 'object', 'minimal', 'impact', 'object', 'use', 'know', 'encapsulation', 'mean', 'code', 'easy', 'maintain', 'use']"
80,"Method overloading, on the other hand, refers to differentiating the code used to handle a message based on the parameters of the method. If one views the receiving object as the first parameter in any method then overriding is just a special case of overloading where the selection is based only on the first argument. The following simple Java example illustrates the difference:","['method', 'overloading', 'hand', 'refer', 'differentiate', 'code', 'handle', 'message', 'base', 'parameter', 'method', 'view', 'receiving', 'object', 'parameter', 'method', 'override', 'special', 'case', 'overload', 'selection', 'base', 'argument', 'follow', 'simple', 'java', 'example', 'illustrate', 'difference']"
81,"Accessor methods are used to read the data values of an object. Mutator methods are used to modify the data of an object. Manager methods are used to initialize and destroy objects of a class, e.g. constructors and destructors.","['accessor', 'method', 'read', 'datum', 'value', 'object', 'mutator', 'method', 'modify', 'datum', 'object', 'manager', 'method', 'initialize', 'destroy', 'object', 'class', 'e.g.', 'constructor', 'destructor']"
82,"These methods provide an abstraction layer that facilitates encapsulation and modularity. For example, if a bank-account class provides a getBalance accessor method to retrieve the current balance rather than directly accessing the balance data fields, then later revisions of the same code can implement a more complex mechanism for balance retrieval e.g., a database fetch, without the dependent code needing to be changed. The concepts of encapsulation and modularity are not unique to object-oriented programming. Indeed, in many ways the object-oriented approach is simply the logical extension of previous paradigms such as abstract data types and structured programming.3","['method', 'provide', 'abstraction', 'layer', 'facilitate', 'encapsulation', 'modularity', 'example', 'bank', 'account', 'class', 'provide', 'getbalance', 'accessor', 'method', 'retrieve', 'current', 'balance', 'directly', 'access', 'balance', 'datum', 'field', 'later', 'revision', 'code', 'implement', 'complex', 'mechanism', 'balance', 'retrieval', 'e.g.', 'database', 'fetch', 'dependent', 'code', 'need', 'change', 'concept', 'encapsulation', 'modularity', 'unique', 'object', 'orient', 'programming', 'way', 'object', 'orient', 'approach', 'simply', 'logical', 'extension', 'previous', 'paradigms', 'abstract', 'datum', 'type', 'structure', 'programming']"
83,"A constructor is a method that is called at the beginning of an object's lifetime to create and initialize the object, a process called construction or instantiation. Initialization may include an acquisition of resources. Constructors may have parameters but usually do not return values in most languages. See the following example in Java:","['constructor', 'method', 'call', 'beginning', 'object', 'lifetime', 'create', 'initialize', 'object', 'process', 'call', 'construction', 'instantiation', 'initialization', 'include', 'acquisition', 'resource', 'constructor', 'parameter', 'usually', 'return', 'value', 'language', 'follow', 'example', 'java']"
84,"A destructor is a method that is called automatically at the end of an object's lifetime, a process called destruction. Destruction in most languages does not allow destructor method arguments nor return values. Destruction can be implemented so as to perform cleanup chores and other tasks at object destruction.","['destructor', 'method', 'call', 'automatically', 'end', 'object', 'lifetime', 'process', 'call', 'destruction', 'destruction', 'language', 'allow', 'destructor', 'method', 'argument', 'return', 'value', 'destruction', 'implement', 'perform', 'cleanup', 'chore', 'task', 'object', 'destruction']"
85,"In garbage-collected languages, such as Java, C#, and Python, destructors are known as finalizers. They have a similar purpose and function to destructors, but because of the differences between languages that utilize garbage-collection and languages with manual memory management, the sequence in which they are called is different.","['garbage', 'collect', 'language', 'java', 'python', 'destructor', 'know', 'finalizer', 'similar', 'purpose', 'function', 'destructor', 'difference', 'language', 'utilize', 'garbage', 'collection', 'language', 'manual', 'memory', 'management', 'sequence', 'call', 'different']"
86,An abstract method is one with only a signature and no implementation body. It is often used to specify that a subclass must provide an implementation of the method. Abstract methods are used to specify interfaces in some programming languages.4,"['abstract', 'method', 'signature', 'implementation', 'body', 'specify', 'subclass', 'provide', 'implementation', 'method', 'abstract', 'method', 'specify', 'interface', 'programming', 'languages']"
87,The following Java code shows an abstract class that needs to be extended:,"['follow', 'java', 'code', 'show', 'abstract', 'class', 'need', 'extend']"
88,The following subclass extends the main class:,"['following', 'subclass', 'extend', 'main', 'class']"
89,"If a subclass provides an implementation for an abstract method, another subclass can make it abstract again. This is called reabstraction.","['subclass', 'provide', 'implementation', 'abstract', 'method', 'subclass', 'abstract', 'call', 'reabstraction']"
90,"In practice, this is rarely used.","['practice', 'rarely']"
91,"In C#, a virtual method can be overridden with an abstract method. This also applies to Java, where all non-private methods are virtual.","['virtual', 'method', 'overridden', 'abstract', 'method', 'apply', 'java', 'non', 'private', 'method', 'virtual']"
92,"Interfaces' default methods can also be reabstracted, requiring subclasses to implement them. This also applies to Java.","['interface', 'default', 'method', 'reabstracte', 'require', 'subclass', 'implement', 'apply', 'java']"
93,"Class methods are methods that are called on a class rather than an instance. They are typically used as part of an object meta-model. I.e, for each class, defined an instance of the class object in the meta-model is created. Meta-model protocols allow classes to be created and deleted. In this sense, they provide the same functionality as constructors and destructors described above. But in some languages such as the Common Lisp Object System CLOS the meta-model allows the developer to dynamically alter the object model at run time: e.g., to create new classes, redefine the class hierarchy, modify properties, etc.","['class', 'method', 'method', 'call', 'class', 'instance', 'typically', 'object', 'meta', 'model', 'i.e', 'class', 'define', 'instance', 'class', 'object', 'meta', 'model', 'create', 'meta', 'model', 'protocol', 'allow', 'class', 'create', 'delete', 'sense', 'provide', 'functionality', 'constructor', 'destructor', 'describe', 'language', 'common', 'lisp', 'object', 'system', 'clos', 'meta', 'model', 'allow', 'developer', 'dynamically', 'alter', 'object', 'model', 'run', 'time', 'e.g.', 'create', 'new', 'class', 'redefine', 'class', 'hierarchy', 'modify', 'property', 'etc']"
94,"Special methods are very language-specific and a language may support none, some, or all of the special methods defined here. A language's compiler may automatically generate default special methods or a programmer may be allowed to optionally define special methods. Most special methods cannot be directly called, but rather the compiler generates code to call them at appropriate times.","['special', 'method', 'language', 'specific', 'language', 'support', 'special', 'method', 'define', 'language', 'compiler', 'automatically', 'generate', 'default', 'special', 'method', 'programmer', 'allow', 'optionally', 'define', 'special', 'method', 'special', 'method', 'directly', 'call', 'compiler', 'generate', 'code', 'appropriate', 'time']"
95,"Static methods are meant to be relevant to all the instances of a class rather than to any specific instance. They are similar to static variables in that sense. An example would be a static method to sum the values of all the variables of every instance of a class. For example, if there were a Product class it might have a static method to compute the average price of all products.","['static', 'method', 'mean', 'relevant', 'instance', 'class', 'specific', 'instance', 'similar', 'static', 'variable', 'sense', 'example', 'static', 'method', 'sum', 'value', 'variable', 'instance', 'class', 'example', 'product', 'class', 'static', 'method', 'compute', 'average', 'price', 'product']"
96,"In Java, a commonly used static method is:","['java', 'commonly', 'static', 'method']"
97,This static method has no owning object and does not run on an instance. It receives all information from its arguments.2,"['static', 'method', 'own', 'object', 'run', 'instance', 'receive', 'information', 'arguments']"
98,"A static method can be invoked even if no instances of the class exist yet. Static methods are called ""static"" because they are resolved at compile time based on the class they are called on and not dynamically as in the case with instance methods, which are resolved polymorphically based on the runtime type of the object.","['static', 'method', 'invoke', 'instance', 'class', 'exist', 'static', 'method', 'call', 'static', 'resolve', 'compile', 'time', 'base', 'class', 'call', 'dynamically', 'case', 'instance', 'method', 'resolve', 'polymorphically', 'base', 'runtime', 'type', 'object']"
99,Copy-assignment operators define actions to be performed by the compiler when a class object is assigned to a class object of the same type.,"['copy', 'assignment', 'operator', 'define', 'action', 'perform', 'compiler', 'class', 'object', 'assign', 'class', 'object', 'type']"
100,Operator methods define or redefine operator symbols and define the operations to be performed with the symbol and the associated method parameters. C++ example:,"['operator', 'method', 'define', 'redefine', 'operator', 'symbol', 'define', 'operation', 'perform', 'symbol', 'associate', 'method', 'parameter', 'c++', 'example']"
101,"Some procedural languages were extended with object-oriented capabilities to leverage the large skill sets and legacy code for those languages but still provide the benefits of object-oriented development. Perhaps the most well-known example is C++, an object-oriented extension of the C programming language. Due to the design requirements to add the object-oriented paradigm on to an existing procedural language, message passing in C++ has some unique capabilities and terminologies. For example, in C++ a method is known as a member function. C++ also has the concept of virtual functions which are member functions that can be overridden in derived classes and allow for dynamic dispatch.","['procedural', 'language', 'extend', 'object', 'orient', 'capability', 'leverage', 'large', 'skill', 'set', 'legacy', 'code', 'language', 'provide', 'benefit', 'object', 'orient', 'development', 'know', 'example', 'c++', 'object', 'orient', 'extension', 'programming', 'language', 'design', 'requirement', 'add', 'object', 'orient', 'paradigm', 'exist', 'procedural', 'language', 'message', 'pass', 'c++', 'unique', 'capability', 'terminology', 'example', 'c++', 'method', 'know', 'member', 'function', 'c++', 'concept', 'virtual', 'function', 'member', 'function', 'overridden', 'derive', 'class', 'allow', 'dynamic', 'dispatch']"
102,"Virtual functions are the means by which a C++ class can achieve polymorphic behavior. Non-virtual member functions, or regular methods, are those that do not participate in polymorphism.","['virtual', 'function', 'mean', 'c++', 'class', 'achieve', 'polymorphic', 'behavior', 'non', 'virtual', 'member', 'function', 'regular', 'method', 'participate', 'polymorphism']"
103,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
104,"The essence of abstraction is preserving information that is relevant in a given context, and forgetting information that is irrelevant in that context.","['essence', 'abstraction', 'preserve', 'information', 'relevant', 'give', 'context', 'forget', 'information', 'irrelevant', 'context']"
105,"In software engineering and computer science, abstraction is:","['software', 'engineering', 'computer', 'science', 'abstraction']"
106,"Abstraction, in general, is a fundamental concept in computer science and software development.4 The process of abstraction can also be referred to as modeling and is closely related to the concepts of theory and design.5 Models can also be considered types of abstractions per their generalization of aspects of reality.","['abstraction', 'general', 'fundamental', 'concept', 'computer', 'science', 'software', 'development', 'process', 'abstraction', 'refer', 'modeling', 'closely', 'relate', 'concept', 'theory', 'design', 'models', 'consider', 'type', 'abstraction', 'generalization', 'aspect', 'reality']"
107,"Abstraction in computer science is closely related to abstraction in mathematics due to their common focus on building abstractions as objects,2 but is also related to other notions of abstraction used in other fields such as art.3","['abstraction', 'computer', 'science', 'closely', 'relate', 'abstraction', 'mathematic', 'common', 'focus', 'build', 'abstraction', 'objects', 'relate', 'notion', 'abstraction', 'field', 'art']"
108,"Abstractions may also refer to real-world objects and systems, rules of computational systems or rules of programming languages that carry or utilize features of abstraction itself, such as:","['abstraction', 'refer', 'real', 'world', 'object', 'system', 'rule', 'computational', 'system', 'rule', 'programming', 'language', 'carry', 'utilize', 'feature', 'abstraction']"
109,Computing mostly operates independently of the concrete world. The hardware implements a model of computation that is interchangeable with others.10 The software is structured in architectures to enable humans to create the enormous systems by concentrating on a few issues at a time. These architectures are made of specific choices of abstractions. Greenspun's Tenth Rule is an aphorism on how such an architecture is both inevitable and complex.,"['computing', 'operate', 'independently', 'concrete', 'world', 'hardware', 'implement', 'model', 'computation', 'interchangeable', 'others', 'software', 'structure', 'architecture', 'enable', 'human', 'create', 'enormous', 'system', 'concentrate', 'issue', 'time', 'architecture', 'specific', 'choice', 'abstraction', 'greenspun', 'tenth', 'rule', 'aphorism', 'architecture', 'inevitable', 'complex']"
110,A central form of abstraction in computing is language abstraction: new artificial languages are developed to express specific aspects of a system. Modeling languages help in planning. Computer languages can be processed with a computer. An example of this abstraction process is the generational development of programming languages from the machine language to the assembly language and the high-level language. Each stage can be used as a stepping stone for the next stage. The language abstraction continues for example in scripting languages and domain-specific programming languages.,"['central', 'form', 'abstraction', 'computing', 'language', 'abstraction', 'new', 'artificial', 'language', 'develop', 'express', 'specific', 'aspect', 'system', 'modeling', 'language', 'help', 'planning', 'computer', 'language', 'process', 'computer', 'example', 'abstraction', 'process', 'generational', 'development', 'programming', 'language', 'machine', 'language', 'assembly', 'language', 'high', 'level', 'language', 'stage', 'stepping', 'stone', 'stage', 'language', 'abstraction', 'continue', 'example', 'scripting', 'language', 'domain', 'specific', 'programming', 'language']"
111,"Within a programming language, some features let the programmer create new abstractions. These include subroutines, modules, polymorphism, and software components. Some other abstractions such as software design patterns and architectural styles remain invisible to a translator and operate only in the design of a system.","['programming', 'language', 'feature', 'let', 'programmer', 'create', 'new', 'abstraction', 'include', 'subroutine', 'module', 'polymorphism', 'software', 'component', 'abstraction', 'software', 'design', 'pattern', 'architectural', 'style', 'remain', 'invisible', 'translator', 'operate', 'design', 'system']"
112,"Some abstractions try to limit the range of concepts a programmer needs to be aware of, by completely hiding the abstractions that they in turn are built on. The software engineer and writer Joel Spolsky has criticised these efforts by claiming that all abstractions are leaky – that they can never completely hide the details below;11 however, this does not negate the usefulness of abstraction.","['abstraction', 'try', 'limit', 'range', 'concept', 'programmer', 'need', 'aware', 'completely', 'hide', 'abstraction', 'turn', 'build', 'software', 'engineer', 'writer', 'joel', 'spolsky', 'criticise', 'effort', 'claim', 'abstraction', 'leaky', 'completely', 'hide', 'detail', 'below', 'negate', 'usefulness', 'abstraction']"
113,"Some abstractions are designed to inter-operate with other abstractions – for example, a programming language may contain a foreign function interface for making calls to the lower-level language.","['abstraction', 'design', 'inter', 'operate', 'abstraction', 'example', 'programming', 'language', 'contain', 'foreign', 'function', 'interface', 'make', 'call', 'low', 'level', 'language']"
114,"Different programming languages provide different types of abstraction, depending on the intended applications for the language. For example:","['different', 'programming', 'language', 'provide', 'different', 'type', 'abstraction', 'depend', 'intend', 'application', 'language', 'example']"
115,Analysts have developed various methods to formally specify software systems. Some known methods include:,"['analyst', 'develop', 'method', 'formally', 'specify', 'software', 'system', 'know', 'method', 'include']"
116,"Specification languages generally rely on abstractions of one kind or another, since specifications are typically defined earlier in a project, and at a more abstract level than an eventual implementation. The UML specification language, for example, allows the definition of abstract classes, which in a waterfall project, remain abstract during the architecture and specification phase of the project.","['specification', 'language', 'generally', 'rely', 'abstraction', 'kind', 'specification', 'typically', 'define', 'early', 'project', 'abstract', 'level', 'eventual', 'implementation', 'uml', 'specification', 'language', 'example', 'allow', 'definition', 'abstract', 'class', 'waterfall', 'project', 'remain', 'abstract', 'architecture', 'specification', 'phase', 'project']"
117,"Programming languages offer control abstraction as one of the main purposes of their use. Computer machines understand operations at the very low level such as moving some bits from one location of the memory to another location and producing the sum of two sequences of bits. Programming languages allow this to be done in the higher level. For example, consider this statement written in a Pascal-like fashion:","['programming', 'language', 'offer', 'control', 'abstraction', 'main', 'purpose', 'use', 'computer', 'machine', 'understand', 'operation', 'low', 'level', 'move', 'bit', 'location', 'memory', 'location', 'produce', 'sum', 'sequence', 'bit', 'programming', 'language', 'allow', 'high', 'level', 'example', 'consider', 'statement', 'write', 'pascal', 'like', 'fashion']"
118,"To a human, this seems a fairly simple and obvious calculation ""one plus two is three, times five is fifteen"". However, the low-level steps necessary to carry out this evaluation, and return the value ""15"", and then assign that value to the variable ""a"", are actually quite subtle and complex. The values need to be converted to binary representation often a much more complicated task than one would think and the calculations decomposed by the compiler or interpreter into assembly instructions again, which are much less intuitive to the programmer: operations such as shifting a binary register left, or adding the binary complement of the contents of one register to another, are simply not how humans think about the abstract arithmetical operations of addition or multiplication. Finally, assigning the resulting value of ""15"" to the variable labeled ""a"", so that ""a"" can be used later, involves additional 'behind-the-scenes' steps of looking up a variable's label and the resultant location in physical or virtual memory, storing the binary representation of ""15"" to that memory location, etc.","['human', 'fairly', 'simple', 'obvious', 'calculation', 'plus', 'time', 'low', 'level', 'step', 'necessary', 'carry', 'evaluation', 'return', 'value', 'assign', 'value', 'variable', 'actually', 'subtle', 'complex', 'value', 'need', 'convert', 'binary', 'representation', 'complicated', 'task', 'think', 'calculation', 'decompose', 'compiler', 'interpreter', 'assembly', 'instruction', 'intuitive', 'programmer', 'operation', 'shift', 'binary', 'register', 'leave', 'add', 'binary', 'complement', 'content', 'register', 'simply', 'human', 'think', 'abstract', 'arithmetical', 'operation', 'addition', 'multiplication', 'finally', 'assign', 'result', 'value', 'variable', 'label', 'later', 'involve', 'additional', 'scene', 'step', 'look', 'variable', 'label', 'resultant', 'location', 'physical', 'virtual', 'memory', 'store', 'binary', 'representation', 'memory', 'location', 'etc']"
119,"Without control abstraction, a programmer would need to specify all the register/binary-level steps each time they simply wanted to add or multiply a couple of numbers and assign the result to a variable. Such duplication of effort has two serious negative consequences:","['control', 'abstraction', 'programmer', 'need', 'specify', 'register', 'binary', 'level', 'step', 'time', 'simply', 'want', 'add', 'multiply', 'couple', 'number', 'assign', 'result', 'variable', 'duplication', 'effort', 'negative', 'consequence']"
120,"Structured programming involves the splitting of complex program tasks into smaller pieces with clear flow-control and interfaces between components, with a reduction of the complexity potential for side-effects.","['structured', 'programming', 'involve', 'splitting', 'complex', 'program', 'task', 'small', 'piece', 'clear', 'flow', 'control', 'interface', 'component', 'reduction', 'complexity', 'potential', 'effect']"
121,"In a simple program, this may aim to ensure that loops have single or obvious exit points and where possible to have single exit points from functions and procedures.","['simple', 'program', 'aim', 'ensure', 'loop', 'single', 'obvious', 'exit', 'point', 'possible', 'single', 'exit', 'point', 'function', 'procedure']"
122,"In a larger system, it may involve breaking down complex tasks into many different modules. Consider a system which handles payroll on ships and at shore offices:","['large', 'system', 'involve', 'break', 'complex', 'task', 'different', 'module', 'consider', 'system', 'handle', 'payroll', 'ship', 'shore', 'office']"
123,These layers produce the effect of isolating the implementation details of one component and its assorted internal methods from the others. Object-oriented programming embraces and extends this concept.,"['layer', 'produce', 'effect', 'isolate', 'implementation', 'detail', 'component', 'assorted', 'internal', 'method', 'object', 'orient', 'programming', 'embrace', 'extend', 'concept']"
124,"Data abstraction enforces a clear separation between the abstract properties of a data type and the concrete details of its implementation. The abstract properties are those that are visible to client code that makes use of the data type—the interface to the data type—while the concrete implementation is kept entirely private, and indeed can change, for example to incorporate efficiency improvements over time. The idea is that such changes are not supposed to have any impact on client code, since they involve no difference in the abstract behaviour.","['datum', 'abstraction', 'enforce', 'clear', 'separation', 'abstract', 'property', 'data', 'type', 'concrete', 'detail', 'implementation', 'abstract', 'property', 'visible', 'client', 'code', 'make', 'use', 'data', 'type', 'interface', 'data', 'type', 'concrete', 'implementation', 'keep', 'entirely', 'private', 'change', 'example', 'incorporate', 'efficiency', 'improvement', 'time', 'idea', 'change', 'suppose', 'impact', 'client', 'code', 'involve', 'difference', 'abstract', 'behaviour']"
125,"For example, one could define an abstract data type called lookup table which uniquely associates keys with values, and in which values may be retrieved by specifying their corresponding keys. Such a lookup table may be implemented in various ways: as a hash table, a binary search tree, or even a simple linear list of key:value pairs. As far as client code is concerned, the abstract properties of the type are the same in each case.","['example', 'define', 'abstract', 'data', 'type', 'call', 'lookup', 'table', 'uniquely', 'associate', 'key', 'value', 'value', 'retrieve', 'specify', 'corresponding', 'key', 'lookup', 'table', 'implement', 'way', 'hash', 'table', 'binary', 'search', 'tree', 'simple', 'linear', 'list', 'key', 'value', 'pair', 'far', 'client', 'code', 'concern', 'abstract', 'property', 'type', 'case']"
126,"Of course, this all relies on getting the details of the interface right in the first place, since any changes there can have major impacts on client code. As one way to look at this: the interface forms a contract on agreed behaviour between the data type and client code; anything not spelled out in the contract is subject to change without notice.","['course', 'rely', 'get', 'detail', 'interface', 'right', 'place', 'change', 'major', 'impact', 'client', 'code', 'way', 'look', 'interface', 'form', 'contract', 'agree', 'behaviour', 'data', 'type', 'client', 'code', 'spell', 'contract', 'subject', 'change', 'notice']"
127,"While much of data abstraction occurs through computer science and automation, there are times when this process is done manually and without programming intervention. One way this can be understood is through data abstraction within the process of conducting a systematic review of the literature. In this methodology, data is abstracted by one or several abstractors when conducting a meta-analysis, with errors reduced through dual data abstraction followed by independent checking, known as adjudication.14","['data', 'abstraction', 'occur', 'computer', 'science', 'automation', 'time', 'process', 'manually', 'programming', 'intervention', 'way', 'understand', 'data', 'abstraction', 'process', 'conduct', 'systematic', 'review', 'literature', 'methodology', 'datum', 'abstract', 'abstractor', 'conduct', 'meta', 'analysis', 'error', 'reduce', 'dual', 'datum', 'abstraction', 'follow', 'independent', 'checking', 'know', 'adjudication']"
128,"In object-oriented programming theory, abstraction involves the facility to define objects that represent abstract ""actors"" that can perform work, report on and change their state, and ""communicate"" with other objects in the system. The term encapsulation refers to the hiding of state details, but extending the concept of data type from earlier programming languages to associate behavior most strongly with the data, and standardizing the way that different data types interact, is the beginning of abstraction. When abstraction proceeds into the operations defined, enabling objects of different types to be substituted, it is called polymorphism. When it proceeds in the opposite direction, inside the types or classes, structuring them to simplify a complex set of relationships, it is called delegation or inheritance.","['object', 'orient', 'programming', 'theory', 'abstraction', 'involve', 'facility', 'define', 'object', 'represent', 'abstract', 'actor', 'perform', 'work', 'report', 'change', 'state', 'communicate', 'object', 'system', 'term', 'encapsulation', 'refer', 'hiding', 'state', 'detail', 'extend', 'concept', 'datum', 'type', 'early', 'programming', 'language', 'associate', 'behavior', 'strongly', 'datum', 'standardize', 'way', 'different', 'datum', 'type', 'interact', 'beginning', 'abstraction', 'abstraction', 'proceed', 'operation', 'define', 'enable', 'object', 'different', 'type', 'substitute', 'call', 'polymorphism', 'proceed', 'opposite', 'direction', 'inside', 'type', 'class', 'structure', 'simplify', 'complex', 'set', 'relationship', 'call', 'delegation', 'inheritance']"
129,"Various object-oriented programming languages offer similar facilities for abstraction, all to support a general strategy of polymorphism in object-oriented programming, which includes the substitution of one type for another in the same or similar role. Although not as generally supported, a configuration or image or package may predetermine a great many of these bindings at compile-time, link-time, or loadtime. This would leave only a minimum of such bindings to change at run-time.","['object', 'orient', 'programming', 'language', 'offer', 'similar', 'facility', 'abstraction', 'support', 'general', 'strategy', 'polymorphism', 'object', 'orient', 'programming', 'include', 'substitution', 'type', 'similar', 'role', 'generally', 'support', 'configuration', 'image', 'package', 'predetermine', 'great', 'binding', 'compile', 'time', 'link', 'time', 'loadtime', 'leave', 'minimum', 'binding', 'change', 'run', 'time']"
130,"Common Lisp Object System or Self, for example, feature less of a class-instance distinction and more use of delegation for polymorphism. Individual objects and functions are abstracted more flexibly to better fit with a shared functional heritage from Lisp.","['common', 'lisp', 'object', 'system', 'self', 'example', 'feature', 'class', 'instance', 'distinction', 'use', 'delegation', 'polymorphism', 'individual', 'object', 'function', 'abstract', 'flexibly', 'well', 'fit', 'share', 'functional', 'heritage', 'lisp']"
131,"C++ exemplifies another extreme: it relies heavily on templates and overloading and other static bindings at compile-time, which in turn has certain flexibility problems.","['c++', 'exemplify', 'extreme', 'rely', 'heavily', 'template', 'overloading', 'static', 'binding', 'compile', 'time', 'turn', 'certain', 'flexibility', 'problem']"
132,"Although these examples offer alternate strategies for achieving the same abstraction, they do not fundamentally alter the need to support abstract nouns in code – all programming relies on an ability to abstract verbs as functions, nouns as data structures, and either as processes.","['example', 'offer', 'alternate', 'strategy', 'achieve', 'abstraction', 'fundamentally', 'alter', 'need', 'support', 'abstract', 'noun', 'code', 'programming', 'rely', 'ability', 'abstract', 'verb', 'function', 'noun', 'data', 'structure', 'process']"
133,"Consider for example a sample Java fragment to represent some common farm ""animals"" to a level of abstraction suitable to model simple aspects of their hunger and feeding. It defines an Animal class to represent both the state of the animal and its functions:","['consider', 'example', 'sample', 'java', 'fragment', 'represent', 'common', 'farm', 'animal', 'level', 'abstraction', 'suitable', 'model', 'simple', 'aspect', 'hunger', 'feeding', 'define', 'animal', 'class', 'represent', 'state', 'animal', 'function']"
134,"With the above definition, one could create objects of type Animal and call their methods like this:","['definition', 'create', 'object', 'type', 'animal', 'method', 'like']"
135,"In the above example, the class Animal is an abstraction used in place of an actual animal, LivingThing is a further abstraction in this case a generalisation of Animal.","['example', 'class', 'animal', 'abstraction', 'place', 'actual', 'animal', 'livingthing', 'abstraction', 'case', 'generalisation', 'animal']"
136,"If one requires a more differentiated hierarchy of animals – to differentiate, say, those who provide milk from those who provide nothing except meat at the end of their lives – that is an intermediary level of abstraction, probably DairyAnimal cows, goats who would eat foods suitable to giving good milk, and MeatAnimal pigs, steers who would eat foods to give the best meat-quality.","['require', 'differentiated', 'hierarchy', 'animal', 'differentiate', 'provide', 'milk', 'provide', 'meat', 'end', 'life', 'intermediary', 'level', 'abstraction', 'probably', 'dairyanimal', 'cow', 'goat', 'eat', 'food', 'suitable', 'give', 'good', 'milk', 'meatanimal', 'pig', 'steer', 'eat', 'food', 'good', 'meat', 'quality']"
137,"Such an abstraction could remove the need for the application coder to specify the type of food, so they could concentrate instead on the feeding schedule. The two classes could be related using inheritance or stand alone, and the programmer could define varying degrees of polymorphism between the two types. These facilities tend to vary drastically between languages, but in general each can achieve anything that is possible with any of the others. A great many operation overloads, data type by data type, can have the same effect at compile-time as any degree of inheritance or other means to achieve polymorphism. The class notation is simply a coder's convenience.","['abstraction', 'remove', 'need', 'application', 'coder', 'specify', 'type', 'food', 'concentrate', 'instead', 'feeding', 'schedule', 'class', 'relate', 'inheritance', 'stand', 'programmer', 'define', 'vary', 'degree', 'polymorphism', 'type', 'facility', 'tend', 'vary', 'drastically', 'language', 'general', 'achieve', 'possible', 'great', 'operation', 'overload', 'datum', 'type', 'datum', 'type', 'effect', 'compile', 'time', 'degree', 'inheritance', 'mean', 'achieve', 'polymorphism', 'class', 'notation', 'simply', 'coder', 'convenience']"
138,Decisions regarding what to abstract and what to keep under the control of the coder become the major concern of object-oriented design and domain analysis—actually determining the relevant relationships in the real world is the concern of object-oriented analysis or legacy analysis.,"['decision', 'abstract', 'control', 'coder', 'major', 'concern', 'object', 'orient', 'design', 'domain', 'analysis', 'actually', 'determine', 'relevant', 'relationship', 'real', 'world', 'concern', 'object', 'orient', 'analysis', 'legacy', 'analysis']"
139,"In general, to determine appropriate abstraction, one must make many small decisions about scope domain analysis, determine what other systems one must cooperate with legacy analysis, then perform a detailed object-oriented analysis which is expressed within project time and budget constraints as an object-oriented design. In our simple example, the domain is the barnyard, the live pigs and cows and their eating habits are the legacy constraints, the detailed analysis is that coders must have the flexibility to feed the animals what is available and thus there is no reason to code the type of food into the class itself, and the design is a single simple Animal class of which pigs and cows are instances with the same functions. A decision to differentiate DairyAnimal would change the detailed analysis but the domain and legacy analysis would be unchanged—thus it is entirely under the control of the programmer, and it is called an abstraction in object-oriented programming as distinct from abstraction in domain or legacy analysis.","['general', 'determine', 'appropriate', 'abstraction', 'small', 'decision', 'scope', 'domain', 'analysis', 'determine', 'system', 'cooperate', 'legacy', 'analysis', 'perform', 'detailed', 'object', 'orient', 'analysis', 'express', 'project', 'time', 'budget', 'constraint', 'object', 'orient', 'design', 'simple', 'example', 'domain', 'barnyard', 'live', 'pig', 'cow', 'eating', 'habit', 'legacy', 'constraint', 'detailed', 'analysis', 'coder', 'flexibility', 'feed', 'animal', 'available', 'reason', 'code', 'type', 'food', 'class', 'design', 'single', 'simple', 'animal', 'class', 'pig', 'cow', 'instance', 'function', 'decision', 'differentiate', 'dairyanimal', 'change', 'detailed', 'analysis', 'domain', 'legacy', 'analysis', 'unchanged', 'entirely', 'control', 'programmer', 'call', 'abstraction', 'object', 'orient', 'programming', 'distinct', 'abstraction', 'domain', 'legacy', 'analysis']"
140,"When discussing formal semantics of programming languages, formal methods or abstract interpretation, abstraction refers to the act of considering a less detailed, but safe, definition of the observed program behaviors. For instance, one may observe only the final result of program executions instead of considering all the intermediate steps of executions. Abstraction is defined to a concrete more precise model of execution.","['discuss', 'formal', 'semantic', 'programming', 'language', 'formal', 'method', 'abstract', 'interpretation', 'abstraction', 'refer', 'act', 'consider', 'detailed', 'safe', 'definition', 'observed', 'program', 'behavior', 'instance', 'observe', 'final', 'result', 'program', 'execution', 'instead', 'consider', 'intermediate', 'step', 'execution', 'abstraction', 'define', 'concrete', 'precise', 'model', 'execution']"
141,"Abstraction may be exact or faithful with respect to a property if one can answer a question about the property equally well on the concrete or abstract model. For instance, if one wishes to know what the result of the evaluation of a mathematical expression involving only integers +, -, ×, is worth modulo n, then one needs only perform all operations modulo n a familiar form of this abstraction is casting out nines.","['abstraction', 'exact', 'faithful', 'respect', 'property', 'answer', 'question', 'property', 'equally', 'concrete', 'abstract', 'model', 'instance', 'wish', 'know', 'result', 'evaluation', 'mathematical', 'expression', 'involve', 'integer', 'worth', 'modulo', 'need', 'perform', 'operation', 'modulo', 'familiar', 'form', 'abstraction', 'cast', 'nine']"
142,"Abstractions, however, though not necessarily exact, should be sound. That is, it should be possible to get sound answers from them—even though the abstraction may simply yield a result of undecidability. For instance, students in a class may be abstracted by their minimal and maximal ages; if one asks whether a certain person belongs to that class, one may simply compare that person's age with the minimal and maximal ages; if his age lies outside the range, one may safely answer that the person does not belong to the class; if it does not, one may only answer ""I don't know"".","['abstraction', 'necessarily', 'exact', 'sound', 'possible', 'sound', 'answer', 'abstraction', 'simply', 'yield', 'result', 'undecidability', 'instance', 'student', 'class', 'abstract', 'minimal', 'maximal', 'age', 'ask', 'certain', 'person', 'belong', 'class', 'simply', 'compare', 'person', 'age', 'minimal', 'maximal', 'age', 'age', 'lie', 'outside', 'range', 'safely', 'answer', 'person', 'belong', 'class', 'answer', 'know']"
143,"The level of abstraction included in a programming language can influence its overall usability. The Cognitive dimensions framework includes the concept of abstraction gradient in a formalism. This framework allows the designer of a programming language to study the trade-offs between abstraction and other characteristics of the design, and how changes in abstraction influence the language usability.","['level', 'abstraction', 'include', 'programming', 'language', 'influence', 'overall', 'usability', 'cognitive', 'dimension', 'framework', 'include', 'concept', 'abstraction', 'gradient', 'formalism', 'framework', 'allow', 'designer', 'programming', 'language', 'study', 'trade', 'off', 'abstraction', 'characteristic', 'design', 'change', 'abstraction', 'influence', 'language', 'usability']"
144,"Abstractions can prove useful when dealing with computer programs, because non-trivial properties of computer programs are essentially undecidable see Rice's theorem. As a consequence, automatic methods for deriving information on the behavior of computer programs either have to drop termination on some occasions, they may fail, crash or never yield out a result, soundness they may provide false information, or precision they may answer ""I don't know"" to some questions.","['abstraction', 'prove', 'useful', 'deal', 'computer', 'program', 'non', 'trivial', 'property', 'computer', 'program', 'essentially', 'undecidable', 'rice', 'theorem', 'consequence', 'automatic', 'method', 'derive', 'information', 'behavior', 'computer', 'program', 'drop', 'termination', 'occasion', 'fail', 'crash', 'yield', 'result', 'soundness', 'provide', 'false', 'information', 'precision', 'answer', 'know', 'question']"
145,Abstraction is the core concept of abstract interpretation. Model checking generally takes place on abstract versions of the studied systems.,"['abstraction', 'core', 'concept', 'abstract', 'interpretation', 'model', 'checking', 'generally', 'take', 'place', 'abstract', 'version', 'study', 'system']"
146,"Computer science commonly presents levels or, less commonly, layers of abstraction, wherein each level represents a different model of the same information and processes, but with varying amounts of detail. Each level uses a system of expression involving a unique set of objects and compositions that apply only to a particular domain. 15 Each relatively abstract, ""higher"" level builds on a relatively concrete, ""lower"" level, which tends to provide an increasingly ""granular"" representation. For example, gates build on electronic circuits, binary on gates, machine language on binary, programming language on machine language, applications and operating systems on programming languages. Each level is embodied, but not determined, by the level beneath it, making it a language of description that is somewhat self-contained.","['computer', 'science', 'commonly', 'present', 'level', 'commonly', 'layer', 'abstraction', 'level', 'represent', 'different', 'model', 'information', 'process', 'vary', 'amount', 'detail', 'level', 'use', 'system', 'expression', 'involve', 'unique', 'set', 'object', 'composition', 'apply', 'particular', 'domain', 'relatively', 'abstract', 'high', 'level', 'build', 'relatively', 'concrete', 'low', 'level', 'tend', 'provide', 'increasingly', 'granular', 'representation', 'example', 'gate', 'build', 'electronic', 'circuit', 'binary', 'gate', 'machine', 'language', 'binary', 'programming', 'language', 'machine', 'language', 'application', 'operating', 'system', 'programming', 'language', 'level', 'embody', 'determine', 'level', 'beneath', 'make', 'language', 'description', 'somewhat', 'self', 'contain']"
147,"Since many users of database systems lack in-depth familiarity with computer data-structures, database developers often hide complexity through the following levels:","['user', 'database', 'system', 'lack', 'depth', 'familiarity', 'computer', 'datum', 'structure', 'database', 'developer', 'hide', 'complexity', 'follow', 'level']"
148,Physical level: The lowest level of abstraction describes how a system actually stores data. The physical level describes complex low-level data structures in detail.,"['physical', 'level', 'low', 'level', 'abstraction', 'describe', 'system', 'actually', 'store', 'datum', 'physical', 'level', 'describe', 'complex', 'low', 'level', 'datum', 'structure', 'detail']"
149,"Logical level: The next higher level of abstraction describes what data the database stores, and what relationships exist among those data. The logical level thus describes an entire database in terms of a small number of relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical level structures, the user of the logical level does not need to be aware of this complexity. This is referred to as physical data independence. Database administrators, who must decide what information to keep in a database, use the logical level of abstraction.","['logical', 'level', 'high', 'level', 'abstraction', 'describe', 'datum', 'database', 'store', 'relationship', 'exist', 'datum', 'logical', 'level', 'describe', 'entire', 'database', 'term', 'small', 'number', 'relatively', 'simple', 'structure', 'implementation', 'simple', 'structure', 'logical', 'level', 'involve', 'complex', 'physical', 'level', 'structure', 'user', 'logical', 'level', 'need', 'aware', 'complexity', 'refer', 'physical', 'datum', 'independence', 'database', 'administrator', 'decide', 'information', 'database', 'use', 'logical', 'level', 'abstraction']"
150,"View level: The highest level of abstraction describes only part of the entire database. Even though the logical level uses simpler structures, complexity remains because of the variety of information stored in a large database. Many users of a database system do not need all this information; instead, they need to access only a part of the database. The view level of abstraction exists to simplify their interaction with the system. The system may provide many views for the same database.","['view', 'level', 'high', 'level', 'abstraction', 'describe', 'entire', 'database', 'logical', 'level', 'use', 'simple', 'structure', 'complexity', 'remain', 'variety', 'information', 'store', 'large', 'database', 'user', 'database', 'system', 'need', 'information', 'instead', 'need', 'access', 'database', 'view', 'level', 'abstraction', 'exist', 'simplify', 'interaction', 'system', 'system', 'provide', 'view', 'database']"
151,The ability to provide a design of different levels of abstraction can,"['ability', 'provide', 'design', 'different', 'level', 'abstraction']"
152,Systems design and business process design can both use this. Some design processes specifically generate designs that contain various levels of abstraction.,"['systems', 'design', 'business', 'process', 'design', 'use', 'design', 'process', 'specifically', 'generate', 'design', 'contain', 'level', 'abstraction']"
153,"Layered architecture partitions the concerns of the application into stacked groups layers. It is a technique used in designing computer software, hardware, and communications in which system or network components are isolated in layers so that changes can be made in one layer without affecting the others.","['layered', 'architecture', 'partition', 'concern', 'application', 'stack', 'group', 'layer', 'technique', 'design', 'computer', 'software', 'hardware', 'communication', 'system', 'network', 'component', 'isolate', 'layer', 'change', 'layer', 'affect']"
154,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
155,"In the fields of physical security and information security, access control AC is the selective restriction of access to a place or other resource, while access management describes the process. The act of accessing may mean consuming, entering, or using. Permission to access a resource is called authorization.","['field', 'physical', 'security', 'information', 'security', 'access', 'control', 'selective', 'restriction', 'access', 'place', 'resource', 'access', 'management', 'describe', 'process', 'act', 'access', 'mean', 'consume', 'enter', 'permission', 'access', 'resource', 'call', 'authorization']"
156,Locks and login credentials are two analogous mechanisms of access control.,"['lock', 'login', 'credential', 'analogous', 'mechanism', 'access', 'control']"
157,"Geographical access control may be enforced by personnel e.g. border guard, bouncer, ticket checker, or with a device such as a turnstile. There may be fences to avoid circumventing this access control. An alternative of access control in the strict sense physically controlling access itself is a system of checking authorized presence, see e.g. Ticket controller transportation. A variant is exit control, e.g. of a shop checkout or a country.1","['geographical', 'access', 'control', 'enforce', 'personnel', 'e.g.', 'border', 'guard', 'bouncer', 'ticket', 'checker', 'device', 'turnstile', 'fence', 'avoid', 'circumvent', 'access', 'control', 'alternative', 'access', 'control', 'strict', 'sense', 'physically', 'control', 'access', 'system', 'check', 'authorize', 'presence', 'e.g.', 'ticket', 'controller', 'transportation', 'variant', 'exit', 'control', 'e.g.', 'shop', 'checkout', 'country']"
158,"The term access control refers to the practice of restricting entrance to a property, a building, or a room to authorized persons. Physical access control can be achieved by a human a guard, bouncer, or receptionist, through mechanical means such as locks and keys, or through technological means such as access control systems like the mantrap. Within these environments, physical key management may also be employed as a means of further managing and monitoring access to mechanically keyed areas or access to certain small assets.1","['term', 'access', 'control', 'refer', 'practice', 'restrict', 'entrance', 'property', 'building', 'room', 'authorized', 'person', 'physical', 'access', 'control', 'achieve', 'human', 'guard', 'bouncer', 'receptionist', 'mechanical', 'mean', 'lock', 'key', 'technological', 'mean', 'access', 'control', 'system', 'like', 'mantrap', 'environment', 'physical', 'key', 'management', 'employ', 'mean', 'manage', 'monitor', 'access', 'mechanically', 'key', 'area', 'access', 'certain', 'small', 'assets']"
159,"Physical access control is a matter of who, where, and when. An access control system determines who is allowed to enter or exit, where they are allowed to exit or enter, and when they are allowed to enter or exit. Historically, this was partially accomplished through keys and locks. When a door is locked, only someone with a key can enter through the door, depending on how the lock is configured. Mechanical locks and keys do not allow restriction of the key holder to specific times or dates. Mechanical locks and keys do not provide records of the key used on any specific door, and the keys can be easily copied or transferred to an unauthorized person. When a mechanical key is lost or the key holder is no longer authorized to use the protected area, the locks must be re-keyed.2","['physical', 'access', 'control', 'matter', 'access', 'control', 'system', 'determine', 'allow', 'enter', 'exit', 'allow', 'exit', 'enter', 'allow', 'enter', 'exit', 'historically', 'partially', 'accomplish', 'key', 'lock', 'door', 'lock', 'key', 'enter', 'door', 'depend', 'lock', 'configure', 'mechanical', 'lock', 'key', 'allow', 'restriction', 'key', 'holder', 'specific', 'time', 'date', 'mechanical', 'lock', 'key', 'provide', 'record', 'key', 'specific', 'door', 'key', 'easily', 'copy', 'transfer', 'unauthorized', 'person', 'mechanical', 'key', 'lose', 'key', 'holder', 'long', 'authorize', 'use', 'protect', 'area', 'lock', 'keyed']"
160,"Electronic access control EAC uses computers to solve the limitations of mechanical locks and keys. A wide range of credentials can be used to replace mechanical keys. The electronic access control system grants access based on the credential presented. When access is granted, the door is unlocked for a predetermined time and the transaction is recorded. When access is refused, the door remains locked and the attempted access is recorded. The system will also monitor the door and alarm if the door is forced open or held open too long after being unlocked.1","['electronic', 'access', 'control', 'eac', 'use', 'computer', 'solve', 'limitation', 'mechanical', 'lock', 'key', 'wide', 'range', 'credential', 'replace', 'mechanical', 'key', 'electronic', 'access', 'control', 'system', 'grant', 'access', 'base', 'credential', 'present', 'access', 'grant', 'door', 'unlock', 'predetermined', 'time', 'transaction', 'record', 'access', 'refuse', 'door', 'remain', 'lock', 'attempt', 'access', 'record', 'system', 'monitor', 'door', 'alarm', 'door', 'force', 'open', 'hold', 'open', 'long', 'unlocked']"
161,"When a credential is presented to a reader, the reader sends the credential's information, usually a number, to a control panel, a highly reliable processor. The control panel compares the credential's number to an access control list, grants or denies the presented request, and sends a transaction log to a database. When access is denied based on the access control list, the door remains locked. If there is a match between the credential and the access control list, the control panel operates a relay that in turn unlocks the door. The control panel also ignores a door open signal to prevent an alarm. Often the reader provides feedback, such as a flashing red LED for an access denied and a flashing green LED for an access granted.3","['credential', 'present', 'reader', 'reader', 'send', 'credential', 'information', 'usually', 'number', 'control', 'panel', 'highly', 'reliable', 'processor', 'control', 'panel', 'compare', 'credential', 'number', 'access', 'control', 'list', 'grant', 'deny', 'present', 'request', 'send', 'transaction', 'log', 'database', 'access', 'deny', 'base', 'access', 'control', 'list', 'door', 'remain', 'lock', 'match', 'credential', 'access', 'control', 'list', 'control', 'panel', 'operate', 'relay', 'turn', 'unlock', 'door', 'control', 'panel', 'ignore', 'door', 'open', 'signal', 'prevent', 'alarm', 'reader', 'provide', 'feedback', 'flash', 'red', 'led', 'access', 'deny', 'flash', 'green', 'led', 'access', 'granted']"
162,"The above description illustrates a single factor transaction. Credentials can be passed around, thus subverting the access control list. For example, Alice has access rights to the server room, but Bob does not. Alice either gives Bob her credential, or Bob takes it; he now has access to the server room. To prevent this, two-factor authentication can be used. In a two factor transaction, the presented credential and a second factor are needed for access to be granted; another factor can be a PIN, a second credential, operator intervention, or a biometric input.3","['description', 'illustrate', 'single', 'factor', 'transaction', 'credential', 'pass', 'subvert', 'access', 'control', 'list', 'example', 'alice', 'access', 'right', 'server', 'room', 'bob', 'alice', 'give', 'bob', 'credential', 'bob', 'take', 'access', 'server', 'room', 'prevent', 'factor', 'authentication', 'factor', 'transaction', 'present', 'credential', 'second', 'factor', 'need', 'access', 'grant', 'factor', 'pin', 'second', 'credential', 'operator', 'intervention', 'biometric', 'input']"
163,There are three types factors of authenticating information:4,"['type', 'factor', 'authenticate', 'information']"
164,"Passwords are a common means of verifying a user's identity before access is given to information systems. In addition, a fourth factor of authentication is now recognized: someone you know, whereby another person who knows you can provide a human element of authentication in situations where systems have been set up to allow for such scenarios. For example, a user may have their password, but have forgotten their smart card. In such a scenario, if the user is known to designated cohorts, the cohorts may provide their smart card and password, in combination with the extant factor of the user in question, and thus provide two factors for the user with the missing credential, giving three factors overall to allow access.citation needed","['password', 'common', 'mean', 'verify', 'user', 'identity', 'access', 'give', 'information', 'system', 'addition', 'fourth', 'factor', 'authentication', 'recognize', 'know', 'person', 'know', 'provide', 'human', 'element', 'authentication', 'situation', 'system', 'set', 'allow', 'scenario', 'example', 'user', 'password', 'forget', 'smart', 'card', 'scenario', 'user', 'know', 'designate', 'cohort', 'cohort', 'provide', 'smart', 'card', 'password', 'combination', 'extant', 'factor', 'user', 'question', 'provide', 'factor', 'user', 'miss', 'credential', 'give', 'factor', 'overall', 'allow', 'access.citation', 'need']"
165,"A credential is a physical/tangible object, a piece of knowledge, or a facet of a person's physical being that enables an individual access to a given physical facility or computer-based information system. Typically, credentials can be something a person knows such as a number or PIN, something they have such as an access badge, something they are such as a biometric feature, something they do measurable behavioural patterns, or some combination of these items. This is known as multi-factor authentication. The typical credential is an access card or key-fob, and newer software can also turn users' smartphones into access devices.5","['credential', 'physical', 'tangible', 'object', 'piece', 'knowledge', 'facet', 'person', 'physical', 'enable', 'individual', 'access', 'give', 'physical', 'facility', 'computer', 'base', 'information', 'system', 'typically', 'credential', 'person', 'know', 'number', 'pin', 'access', 'badge', 'biometric', 'feature', 'measurable', 'behavioural', 'pattern', 'combination', 'item', 'know', 'multi', 'factor', 'authentication', 'typical', 'credential', 'access', 'card', 'key', 'fob', 'new', 'software', 'turn', 'user', 'smartphone', 'access', 'devices']"
166,"There are many card technologies including magnetic stripe, bar code, Wiegand, 125 kHz proximity, 26-bit card-swipe, contact smart cards, and contactless smart cards. Also available are key-fobs, which are more compact than ID cards, and attach to a key ring. Biometric technologies include fingerprint, facial recognition, iris recognition, retinal scan, voice, and hand geometry. The built-in biometric technologies found on newer smartphones can also be used as credentials in conjunction with access software running on mobile devices.6 In addition to older more traditional card access technologies, newer technologies such as Near field communication NFC, Bluetooth low energy or Ultra-wideband UWB can also communicate user credentials to readers for system or building access.789","['card', 'technology', 'include', 'magnetic', 'stripe', 'bar', 'code', 'wiegand', '125', 'khz', 'proximity', 'bit', 'card', 'swipe', 'contact', 'smart', 'card', 'contactless', 'smart', 'card', 'available', 'key', 'fobs', 'compact', 'card', 'attach', 'key', 'ring', 'biometric', 'technology', 'include', 'fingerprint', 'facial', 'recognition', 'iris', 'recognition', 'retinal', 'scan', 'voice', 'hand', 'geometry', 'build', 'biometric', 'technology', 'find', 'new', 'smartphone', 'credential', 'conjunction', 'access', 'software', 'run', 'mobile', 'devices', 'addition', 'old', 'traditional', 'card', 'access', 'technology', 'new', 'technology', 'near', 'field', 'communication', 'nfc', 'bluetooth', 'low', 'energy', 'ultra', 'wideband', 'uwb', 'communicate', 'user', 'credential', 'reader', 'system', 'build', 'access']"
167,Components of an access control system include:,"['component', 'access', 'control', 'system', 'include']"
168,"Access control decisions are made by comparing the credentials to an access control list. This look-up can be done by a host or server, by an access control panel, or by a reader. The development of access control systems has observed a steady push of the look-up out from a central host to the edge of the system, or the reader. The predominant topology circa 2009 is hub and spoke with a control panel as the hub, and the readers as the spokes. The look-up and control functions are by the control panel. The spokes communicate through a serial connection; usually RS-485. Some manufactures are pushing the decision making to the edge by placing a controller at the door. The controllers are IP enabled, and connect to a host and database using standard networks11","['access', 'control', 'decision', 'compare', 'credential', 'access', 'control', 'list', 'look', 'host', 'server', 'access', 'control', 'panel', 'reader', 'development', 'access', 'control', 'system', 'observe', 'steady', 'push', 'look', 'central', 'host', 'edge', 'system', 'reader', 'predominant', 'topology', 'circa', '2009', 'hub', 'speak', 'control', 'panel', 'hub', 'reader', 'spoke', 'look', 'control', 'function', 'control', 'panel', 'spoke', 'communicate', 'serial', 'connection', 'usually', 'rs-485', 'manufacture', 'push', 'decision', 'making', 'edge', 'place', 'controller', 'door', 'controller', 'enable', 'connect', 'host', 'database', 'standard', 'networks11']"
169,Access control readers may be classified by the functions they are able to perform:12,"['access', 'control', 'reader', 'classify', 'function', 'able', 'perform']"
170,"Some readers may have additional features such as an LCD and function buttons for data collection purposes i.e. clock-in/clock-out events for attendance reports, camera/speaker/microphone for intercom, and smart card read/write support.citation needed","['reader', 'additional', 'feature', 'lcd', 'function', 'button', 'data', 'collection', 'purpose', 'i.e.', 'clock', 'clock', 'event', 'attendance', 'report', 'camera', 'speaker', 'microphone', 'intercom', 'smart', 'card', 'read', 'write', 'support.citation', 'need']"
171,"1. Serial controllers. Controllers are connected to a host PC via a serial RS-485 communication line or via 20mA current loop in some older systems. External RS-232/485 converters or internal RS-485 cards have to be installed, as standard PCs do not have RS-485 communication ports.citation needed","['serial', 'controller', 'controller', 'connect', 'host', 'serial', 'rs-485', 'communication', 'line', '20ma', 'current', 'loop', 'old', 'system', 'external', 'converter', 'internal', 'rs-485', 'card', 'instal', 'standard', 'pc', 'rs-485', 'communication', 'ports.citation', 'need']"
172,"2. Serial main and sub-controllers. All door hardware is connected to sub-controllers a.k.a. door controllers or door interfaces. Sub-controllers usually do not make access decisions, and instead forward all requests to the main controllers. Main controllers usually support from 16 to 32 sub-controllers.","['serial', 'main', 'sub', 'controller', 'door', 'hardware', 'connect', 'sub', 'controllers', 'a.k.a', 'door', 'controller', 'door', 'interface', 'sub', 'controller', 'usually', 'access', 'decision', 'instead', 'forward', 'request', 'main', 'controller', 'main', 'controller', 'usually', 'support', 'sub', 'controller']"
173,"3. Serial main controllers & intelligent readers. All door hardware is connected directly to intelligent or semi-intelligent readers. Readers usually do not make access decisions, and forward all requests to the main controller. Only if the connection to the main controller is unavailable, will the readers use their internal database to make access decisions and record events. Semi-intelligent reader that have no database and cannot function without the main controller should be used only in areas that do not require high security. Main controllers usually support from 16 to 64 readers. All advantages and disadvantages are the same as the ones listed in the second paragraph.","['serial', 'main', 'controller', 'intelligent', 'reader', 'door', 'hardware', 'connect', 'directly', 'intelligent', 'semi', 'intelligent', 'reader', 'reader', 'usually', 'access', 'decision', 'forward', 'request', 'main', 'controller', 'connection', 'main', 'controller', 'unavailable', 'reader', 'use', 'internal', 'database', 'access', 'decision', 'record', 'event', 'semi', 'intelligent', 'reader', 'database', 'function', 'main', 'controller', 'area', 'require', 'high', 'security', 'main', 'controller', 'usually', 'support', 'reader', 'advantage', 'disadvantage', 'one', 'list', 'second', 'paragraph']"
174,"4. Serial controllers with terminal servers. In spite of the rapid development and increasing use of computer networks, access control manufacturers remained conservative, and did not rush to introduce network-enabled products. When pressed for solutions with network connectivity, many chose the option requiring less efforts: addition of a terminal server, a device that converts serial data for transmission via LAN or WAN.","['serial', 'controller', 'terminal', 'server', 'spite', 'rapid', 'development', 'increase', 'use', 'computer', 'network', 'access', 'control', 'manufacturer', 'remain', 'conservative', 'rush', 'introduce', 'network', 'enable', 'product', 'press', 'solution', 'network', 'connectivity', 'choose', 'option', 'require', 'effort', 'addition', 'terminal', 'server', 'device', 'convert', 'serial', 'datum', 'transmission', 'lan', 'wan']"
175,All the RS-485-related advantages and disadvantages also apply.,"['rs-485', 'relate', 'advantage', 'disadvantage', 'apply']"
176,"5. Network-enabled main controllers. The topology is nearly the same as described in the second and third paragraphs. The same advantages and disadvantages apply, but the on-board network interface offers a couple of valuable improvements. Transmission of configuration and user data to the main controllers is faster, and may be done in parallel. This makes the system more responsive, and does not interrupt normal operations. No special hardware is required in order to achieve redundant host PC setup: in the case that the primary host PC fails, the secondary host PC may start polling network controllers. The disadvantages introduced by terminal servers listed in the fourth paragraph are also eliminated.","['network', 'enable', 'main', 'controller', 'topology', 'nearly', 'describe', 'second', 'paragraph', 'advantage', 'disadvantage', 'apply', 'board', 'network', 'interface', 'offer', 'couple', 'valuable', 'improvement', 'transmission', 'configuration', 'user', 'datum', 'main', 'controller', 'fast', 'parallel', 'make', 'system', 'responsive', 'interrupt', 'normal', 'operation', 'special', 'hardware', 'require', 'order', 'achieve', 'redundant', 'host', 'setup', 'case', 'primary', 'host', 'fail', 'secondary', 'host', 'start', 'poll', 'network', 'controller', 'disadvantage', 'introduce', 'terminal', 'server', 'list', 'fourth', 'paragraph', 'eliminate']"
177,6. IP controllers. Controllers are connected to a host PC via Ethernet LAN or WAN.,"['controller', 'controller', 'connect', 'host', 'ethernet', 'lan', 'wan']"
178,7. IP readers. Readers are connected to a host PC via Ethernet LAN or WAN.,"['reader', 'reader', 'connect', 'host', 'ethernet', 'lan', 'wan']"
179,The advantages and disadvantages of IP controllers apply to the IP readers as well.,"['advantage', 'disadvantage', 'controller', 'apply', 'reader']"
180,"The most common security risk of intrusion through an access control system is by simply following a legitimate user through a door, and this is referred to as tailgating. Often the legitimate user will hold the door for the intruder. This risk can be minimized through security awareness training of the user population or more active means such as turnstiles. In very high-security applications this risk is minimized by using a sally port, sometimes called a security vestibule or mantrap, where operator intervention is required presumably to assure valid identification.13","['common', 'security', 'risk', 'intrusion', 'access', 'control', 'system', 'simply', 'follow', 'legitimate', 'user', 'door', 'refer', 'tailgating', 'legitimate', 'user', 'hold', 'door', 'intruder', 'risk', 'minimize', 'security', 'awareness', 'training', 'user', 'population', 'active', 'mean', 'turnstile', 'high', 'security', 'application', 'risk', 'minimize', 'sally', 'port', 'call', 'security', 'vestibule', 'mantrap', 'operator', 'intervention', 'require', 'presumably', 'assure', 'valid', 'identification']"
181,"The second most common risk is from levering a door open. This is relatively difficult on properly secured doors with strikes or high holding force magnetic locks. Fully implemented access control systems include forced door monitoring alarms. These vary in effectiveness, usually failing from high false positive alarms, poor database configuration, or lack of active intrusion monitoring. Most newer access control systems incorporate some type of door prop alarm to inform system administrators of a door left open longer than a specified length of time.citation needed","['second', 'common', 'risk', 'lever', 'door', 'open', 'relatively', 'difficult', 'properly', 'secure', 'door', 'strike', 'high', 'hold', 'force', 'magnetic', 'lock', 'fully', 'implement', 'access', 'control', 'system', 'include', 'force', 'door', 'monitor', 'alarm', 'vary', 'effectiveness', 'usually', 'fail', 'high', 'false', 'positive', 'alarm', 'poor', 'database', 'configuration', 'lack', 'active', 'intrusion', 'monitoring', 'new', 'access', 'control', 'system', 'incorporate', 'type', 'door', 'prop', 'alarm', 'inform', 'system', 'administrator', 'door', 'leave', 'open', 'long', 'specified', 'length', 'time.citation', 'need']"
182,"The third most common security risk is natural disasters. In order to mitigate risk from natural disasters, the structure of the building, down to the quality of the network and computer equipment vital. From an organizational perspective, the leadership will need to adopt and implement an All Hazards Plan, or Incident Response Plan. The highlights of any incident plan determined by the National Incident Management System must include Pre-incident planning, during incident actions, disaster recovery, and after-action review.14","['common', 'security', 'risk', 'natural', 'disaster', 'order', 'mitigate', 'risk', 'natural', 'disaster', 'structure', 'building', 'quality', 'network', 'computer', 'equipment', 'vital', 'organizational', 'perspective', 'leadership', 'need', 'adopt', 'implement', 'hazards', 'plan', 'incident', 'response', 'plan', 'highlight', 'incident', 'plan', 'determine', 'national', 'incident', 'management', 'system', 'include', 'pre', 'incident', 'planning', 'incident', 'action', 'disaster', 'recovery', 'action', 'review']"
183,"Similar to levering is crashing through cheap partition walls. In shared tenant spaces, the divisional wall is a vulnerability. A vulnerability along the same lines is the breaking of sidelights.citation needed","['similar', 'levering', 'crash', 'cheap', 'partition', 'wall', 'share', 'tenant', 'space', 'divisional', 'wall', 'vulnerability', 'vulnerability', 'line', 'breaking', 'sidelights.citation', 'need']"
184,"Spoofing locking hardware is fairly simple and more elegant than levering. A strong magnet can operate the solenoid controlling bolts in electric locking hardware. Motor locks, more prevalent in Europe than in the US, are also susceptible to this attack using a doughnut-shaped magnet. It is also possible to manipulate the power to the lock either by removing or adding current, although most Access Control systems incorporate battery back-up systems and the locks are almost always located on the secure side of the door.citation needed","['spoof', 'lock', 'hardware', 'fairly', 'simple', 'elegant', 'lever', 'strong', 'magnet', 'operate', 'solenoid', 'control', 'bolt', 'electric', 'locking', 'hardware', 'motor', 'lock', 'prevalent', 'europe', 'susceptible', 'attack', 'doughnut', 'shape', 'magnet', 'possible', 'manipulate', 'power', 'lock', 'remove', 'add', 'current', 'access', 'control', 'system', 'incorporate', 'battery', 'system', 'lock', 'locate', 'secure', 'door.citation', 'need']"
185,"Access cards themselves have proven vulnerable to sophisticated attacks. Enterprising hackers have built portable readers that capture the card number from a user's proximity card. The hacker simply walks by the user, reads the card, and then presents the number to a reader securing the door. This is possible because card numbers are sent in the clear, no encryption being used. To counter this, dual authentication methods, such as a card plus a PIN should always be used.","['access', 'card', 'prove', 'vulnerable', 'sophisticated', 'attack', 'enterprising', 'hacker', 'build', 'portable', 'reader', 'capture', 'card', 'number', 'user', 'proximity', 'card', 'hacker', 'simply', 'walk', 'user', 'read', 'card', 'present', 'number', 'reader', 'secure', 'door', 'possible', 'card', 'number', 'send', 'clear', 'encryption', 'counter', 'dual', 'authentication', 'method', 'card', 'plus', 'pin']"
186,"Many access control credentials unique serial numbers are programmed in sequential order during manufacturing. Known as a sequential attack, if an intruder has a credential once used in the system they can simply increment or decrement the serial number until they find a credential that is currently authorized in the system. Ordering credentials with random unique serial numbers is recommended to counter this threat.15","['access', 'control', 'credential', 'unique', 'serial', 'number', 'program', 'sequential', 'order', 'manufacturing', 'know', 'sequential', 'attack', 'intruder', 'credential', 'system', 'simply', 'increment', 'decrement', 'serial', 'number', 'find', 'credential', 'currently', 'authorize', 'system', 'order', 'credential', 'random', 'unique', 'serial', 'number', 'recommend', 'counter', 'threat']"
187,"Finally, most electric locking hardware still has mechanical keys as a fail-over. Mechanical key locks are vulnerable to bumping.16","['finally', 'electric', 'lock', 'hardware', 'mechanical', 'key', 'fail', 'mechanical', 'key', 'lock', 'vulnerable', 'bumping']"
188,The need to know principle can be enforced with user access controls and authorization procedures and its objective is to ensure that only authorized individuals gain access to information or systems necessary to undertake their duties.citation needed,"['need', 'know', 'principle', 'enforce', 'user', 'access', 'control', 'authorization', 'procedure', 'objective', 'ensure', 'authorize', 'individual', 'gain', 'access', 'information', 'system', 'necessary', 'undertake', 'duties.citation', 'need']"
189,"In computer security, general access control includes authentication, authorization, and audit. A more narrow definition of access control would cover only access approval, whereby the system makes a decision to grant or reject an access request from an already authenticated subject, based on what the subject is authorized to access. Authentication and access control are often combined into a single operation, so that access is approved based on successful authentication, or based on an anonymous access token. Authentication methods and tokens include passwords, biometric analysis, physical keys, electronic keys and devices, hidden paths, social barriers, and monitoring by humans and automated systems.","['computer', 'security', 'general', 'access', 'control', 'include', 'authentication', 'authorization', 'audit', 'narrow', 'definition', 'access', 'control', 'cover', 'access', 'approval', 'system', 'make', 'decision', 'grant', 'reject', 'access', 'request', 'authenticate', 'subject', 'base', 'subject', 'authorize', 'access', 'authentication', 'access', 'control', 'combine', 'single', 'operation', 'access', 'approve', 'base', 'successful', 'authentication', 'base', 'anonymous', 'access', 'token', 'authentication', 'method', 'token', 'include', 'password', 'biometric', 'analysis', 'physical', 'key', 'electronic', 'key', 'device', 'hide', 'path', 'social', 'barrier', 'monitoring', 'human', 'automate', 'system']"
190,"In any access-control model, the entities that can perform actions on the system are called subjects, and the entities representing resources to which access may need to be controlled are called objects see also Access Control Matrix. Subjects and objects should both be considered as software entities, rather than as human users: any human users can only have an effect on the system via the software entities that they control.citation needed","['access', 'control', 'model', 'entity', 'perform', 'action', 'system', 'call', 'subject', 'entity', 'represent', 'resource', 'access', 'need', 'control', 'call', 'object', 'access', 'control', 'matrix', 'subject', 'object', 'consider', 'software', 'entity', 'human', 'user', 'human', 'user', 'effect', 'system', 'software', 'entity', 'control.citation', 'need']"
191,"Although some systems equate subjects with user IDs, so that all processes started by a user by default have the same authority, this level of control is not fine-grained enough to satisfy the principle of least privilege, and arguably is responsible for the prevalence of malware in such systems see computer insecurity.citation needed","['system', 'equate', 'subject', 'user', 'id', 'process', 'start', 'user', 'default', 'authority', 'level', 'control', 'fine', 'grain', 'satisfy', 'principle', 'privilege', 'arguably', 'responsible', 'prevalence', 'malware', 'system', 'computer', 'insecurity.citation', 'need']"
192,"In some models, for example the object-capability model, any software entity can potentially act as both subject and object.citation needed","['model', 'example', 'object', 'capability', 'model', 'software', 'entity', 'potentially', 'act', 'subject', 'object.citation', 'need']"
193,"As of 2014update, access-control models tend to fall into one of two classes: those based on capabilities and those based on access control lists ACLs.","['2014update', 'access', 'control', 'model', 'tend', 'fall', 'class', 'base', 'capability', 'base', 'access', 'control', 'list', 'acls']"
194,Both capability-based and ACL-based models have mechanisms to allow access rights to be granted to all members of a group of subjects often the group is itself modeled as a subject.citation needed,"['capability', 'base', 'acl', 'base', 'model', 'mechanism', 'allow', 'access', 'right', 'grant', 'member', 'group', 'subject', 'group', 'model', 'subject.citation', 'need']"
195,"Access control systems provide the essential services of authorization, identification and authentication I&A, access approval, and accountability where:citation needed","['access', 'control', 'system', 'provide', 'essential', 'service', 'authorization', 'identification', 'authentication', 'i', 'access', 'approval', 'accountability', 'citation', 'need']"
196,Access to accounts can be enforced through many types of controls.17,"['access', 'account', 'enforce', 'type', 'controls']"
197,"In telecommunication, the term access control is defined in U.S. Federal Standard 1037C24 with the following meanings:","['telecommunication', 'term', 'access', 'control', 'define', 'u.s.', 'federal', 'standard', '1037c24', 'follow', 'meaning']"
198,This definition depends on several other technical terms from Federal Standard 1037C.,"['definition', 'depend', 'technical', 'term', 'federal', 'standard', '1037c.']"
199,Special public member methods – accessors aka getters and mutator methods often called setters are used to control changes to class variables in order to prevent unauthorized access and data corruption.,"['special', 'public', 'member', 'method', 'accessor', 'aka', 'getter', 'mutator', 'method', 'call', 'setter', 'control', 'change', 'class', 'variable', 'order', 'prevent', 'unauthorized', 'access', 'data', 'corruption']"
200,"In public policy, access control to restrict access to systems ""authorization"" or to track or monitor behavior within systems ""accountability"" is an implementation feature of using trusted systems for security or social control.","['public', 'policy', 'access', 'control', 'restrict', 'access', 'system', 'authorization', 'track', 'monitor', 'behavior', 'system', 'accountability', 'implementation', 'feature', 'trust', 'system', 'security', 'social', 'control']"
201,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
202,"Access modifiers or access specifiers are keywords in object-oriented languages that set the accessibility of classes, methods, and other members. Access modifiers are a specific part of programming language syntax used to facilitate the encapsulation of components.1","['access', 'modifier', 'access', 'specifier', 'keyword', 'object', 'orient', 'language', 'set', 'accessibility', 'class', 'method', 'member', 'access', 'modifier', 'specific', 'programming', 'language', 'syntax', 'facilitate', 'encapsulation', 'components']"
203,"In C++, there are only three access modifiers. C# extends the number of them to six,2 while Java has four access modifiers, but three keywords for this purpose. In Java, having no keyword before defaults to the package-private modifier.","['c++', 'access', 'modifier', 'extend', 'number', 'six', 'java', 'access', 'modifier', 'keyword', 'purpose', 'java', 'have', 'keyword', 'default', 'package', 'private', 'modifier']"
204,"When the class is declared as public, it is accessible to other classes defined in the same package as well as those defined in other packages. This is the most commonly used specifier for classes. However, a class itself cannot be declared as private. If no access specifier is stated, the default access restrictions will be applied. The class will be accessible to other classes in the same package but will be inaccessible to classes outside the package. When we say that a class is inaccessible, it simply means that we cannot create an object of that class or declare a variable of that class type. The protected access specifier too cannot be applied to a class.","['class', 'declare', 'public', 'accessible', 'class', 'define', 'package', 'define', 'package', 'commonly', 'specifi', 'class', 'class', 'declare', 'private', 'access', 'specifier', 'state', 'default', 'access', 'restriction', 'apply', 'class', 'accessible', 'class', 'package', 'inaccessible', 'class', 'outside', 'package', 'class', 'inaccessible', 'simply', 'mean', 'create', 'object', 'class', 'declare', 'variable', 'class', 'type', 'protect', 'access', 'specifier', 'apply', 'class']"
205,"C++ uses the three modifiers called public, protected, and private.3 C# has the modifiers public, protected ,internal, private, protected internal, and private protected. Java has public, package, protected, and private; package is the default, used if no other access modifier keyword is specified. The meaning of these modifiers may differ from one language to another. A comparison of the keywords, ordered from the most restrictive to the most open, and their meaning in these three languages follows. Their visibility ranges from the same class to the package where the class is defined to a general access permission. Below, the maximal access is written into the table.","['c++', 'use', 'modifier', 'call', 'public', 'protect', 'private', 'modifier', 'public', 'protect', 'internal', 'private', 'protect', 'internal', 'private', 'protect', 'java', 'public', 'package', 'protect', 'private', 'package', 'default', 'access', 'modifier', 'keyword', 'specify', 'meaning', 'modifier', 'differ', 'language', 'comparison', 'keyword', 'order', 'restrictive', 'open', 'meaning', 'language', 'follow', 'visibility', 'range', 'class', 'package', 'class', 'define', 'general', 'access', 'permission', 'maximal', 'access', 'write', 'table']"
206,"In Swift, there are five different access levels relative to both the source file in which the entity is defined and the module containing that source file.4","['swift', 'different', 'access', 'level', 'relative', 'source', 'file', 'entity', 'define', 'module', 'contain', 'source', 'file']"
207,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
208,"In computer science, a mutator method is a method used to control changes to a variable. They are also widely known as setter methods. Often a setter is accompanied by a getter together also known as accessors, which returns the value of the private member variable.","['computer', 'science', 'mutator', 'method', 'method', 'control', 'change', 'variable', 'widely', 'know', 'setter', 'method', 'setter', 'accompany', 'getter', 'know', 'accessor', 'return', 'value', 'private', 'member', 'variable']"
209,"The mutator method is most often used in object-oriented programming, in keeping with the principle of encapsulation. According to this principle, member variables of a class are made private to hide and protect them from other code, and can only be modified by a public member function the mutator method, which takes the desired new value as a parameter, optionally validates it, and modifies the private member variable. Mutator methods can be compared to assignment operator overloading but they typically appear at different levels of the object hierarchy.","['mutator', 'method', 'object', 'orient', 'programming', 'keep', 'principle', 'encapsulation', 'accord', 'principle', 'member', 'variable', 'class', 'private', 'hide', 'protect', 'code', 'modify', 'public', 'member', 'function', 'mutator', 'method', 'take', 'desire', 'new', 'value', 'parameter', 'optionally', 'validate', 'modify', 'private', 'member', 'variable', 'mutator', 'method', 'compare', 'assignment', 'operator', 'overloading', 'typically', 'appear', 'different', 'level', 'object', 'hierarchy']"
210,"Mutator methods may also be used in non-object-oriented environments. In this case, a reference to the variable to be modified is passed to the mutator, along with the new value. In this scenario, the compiler cannot restrict code from bypassing the mutator method and changing the variable directly. The responsibility falls to the developers to ensure the variable is only modified through the mutator method and not modified directly.","['mutator', 'method', 'non', 'object', 'orient', 'environment', 'case', 'reference', 'variable', 'modify', 'pass', 'mutator', 'new', 'value', 'scenario', 'compiler', 'restrict', 'code', 'bypass', 'mutator', 'method', 'change', 'variable', 'directly', 'responsibility', 'fall', 'developer', 'ensure', 'variable', 'modify', 'mutator', 'method', 'modify', 'directly']"
211,"In programming languages that support them, properties offer a convenient alternative without giving up the utility of encapsulation.","['programming', 'language', 'support', 'property', 'offer', 'convenient', 'alternative', 'give', 'utility', 'encapsulation']"
212,"In the examples below, a fully implemented mutator method can also validate the input data or take further action such as triggering an event.","['example', 'fully', 'implement', 'mutator', 'method', 'validate', 'input', 'datum', 'action', 'trigger', 'event']"
213,"The alternative to defining mutator and accessor methods, or property blocks, is to give the instance variable some visibility other than private and access it directly from outside the objects. Much finer control of access rights can be defined using mutators and accessors. For example, a parameter may be made read-only simply by defining an accessor but not a mutator. The visibility of the two methods may be different; it is often useful for the accessor to be public while the mutator remains protected, package-private or internal.","['alternative', 'define', 'mutator', 'accessor', 'method', 'property', 'block', 'instance', 'variable', 'visibility', 'private', 'access', 'directly', 'outside', 'object', 'finer', 'control', 'access', 'right', 'define', 'mutator', 'accessor', 'example', 'parameter', 'read', 'simply', 'define', 'accessor', 'mutator', 'visibility', 'method', 'different', 'useful', 'accessor', 'public', 'mutator', 'remains', 'protect', 'package', 'private', 'internal']"
214,"The block where the mutator is defined provides an opportunity for validation or preprocessing of incoming data. If all external access is guaranteed to come through the mutator, then these steps cannot be bypassed. For example, if a date is represented by separate private year, month and day variables, then incoming dates can be split by the setDate mutator while for consistency the same private instance variables are accessed by setYear and setMonth. In all cases month values outside of 1 - 12 can be rejected by the same code.","['block', 'mutator', 'define', 'provide', 'opportunity', 'validation', 'preprocessing', 'incoming', 'datum', 'external', 'access', 'guarantee', 'come', 'mutator', 'step', 'bypass', 'example', 'date', 'represent', 'separate', 'private', 'year', 'month', 'day', 'variable', 'incoming', 'date', 'split', 'setdate', 'mutator', 'consistency', 'private', 'instance', 'variable', 'access', 'setyear', 'setmonth', 'case', 'month', 'value', 'outside', 'reject', 'code']"
215,Accessors conversely allow for synthesis of useful data representations from internal variables while keeping their structure encapsulated and hidden from outside modules. A monetary getAmount accessor may build a string from a numeric variable with the number of decimal places defined by a hidden currency parameter.,"['accessor', 'conversely', 'allow', 'synthesis', 'useful', 'datum', 'representation', 'internal', 'variable', 'keep', 'structure', 'encapsulate', 'hide', 'outside', 'module', 'monetary', 'getamount', 'accessor', 'build', 'string', 'numeric', 'variable', 'number', 'decimal', 'place', 'define', 'hide', 'currency', 'parameter']"
216,"Modern programming languages often offer the ability to generate the boilerplate for mutators and accessors in a single line—as for example C#'s public string Name get; set; and Ruby's attr_accessor :name. In these cases, no code blocks are created for validation, preprocessing or synthesis. These simplified accessors still retain the advantage of encapsulation over simple public instance variables, but it is common that, as system designs progress, the software is maintained and requirements change, the demands on the data become more sophisticated. Many automatic mutators and accessors eventually get replaced by separate blocks of code. The benefit of automatically creating them in the early days of the implementation is that the public interface of the class remains identical whether or not greater sophistication is added, requiring no extensive refactoring if it is.1","['modern', 'programming', 'language', 'offer', 'ability', 'generate', 'boilerplate', 'mutator', 'accessor', 'single', 'line', 'example', 'public', 'string', 'set', 'ruby', 'attr_accessor', 'case', 'code', 'block', 'create', 'validation', 'preprocesse', 'synthesis', 'simplified', 'accessor', 'retain', 'advantage', 'encapsulation', 'simple', 'public', 'instance', 'variable', 'common', 'system', 'design', 'progress', 'software', 'maintain', 'requirement', 'change', 'demand', 'datum', 'sophisticated', 'automatic', 'mutator', 'accessor', 'eventually', 'replace', 'separate', 'block', 'code', 'benefit', 'automatically', 'create', 'early', 'day', 'implementation', 'public', 'interface', 'class', 'remain', 'identical', 'great', 'sophistication', 'add', 'require', 'extensive', 'refactoring', 'is']"
217,"Manipulation of parameters that have mutators and accessors from inside the class where they are defined often requires some additional thought. In the early days of an implementation, when there is little or no additional code in these blocks, it makes no difference if the private instance variable is accessed directly or not. As validation, cross-validation, data integrity checks, preprocessing or other sophistication is added, subtle bugs may appear where some internal access makes use of the newer code while in other places it is bypassed.","['manipulation', 'parameter', 'mutator', 'accessor', 'inside', 'class', 'define', 'require', 'additional', 'thought', 'early', 'day', 'implementation', 'little', 'additional', 'code', 'block', 'make', 'difference', 'private', 'instance', 'variable', 'access', 'directly', 'validation', 'cross', 'validation', 'datum', 'integrity', 'check', 'preprocesse', 'sophistication', 'add', 'subtle', 'bug', 'appear', 'internal', 'access', 'make', 'use', 'new', 'code', 'place', 'bypass']"
218,"Accessor functions can be less efficient than directly fetching or storing data fields due to the extra steps involved,2 however such functions are often inlined which eliminates the overhead of a function call.","['accessor', 'function', 'efficient', 'directly', 'fetch', 'store', 'datum', 'field', 'extra', 'step', 'involved', 'function', 'inline', 'eliminate', 'overhead', 'function']"
219,"This example illustrates the C# idea of properties, which are a special type of class member. Unlike Java, no explicit methods are defined; a public 'property' contains the logic to handle the actions. Note use of the built-in undeclared variable value.","['example', 'illustrate', 'idea', 'property', 'special', 'type', 'class', 'member', 'unlike', 'java', 'explicit', 'method', 'define', 'public', 'property', 'contain', 'logic', 'handle', 'action', 'note', 'use', 'build', 'undeclared', 'variable', 'value']"
220,"In later C# versions .NET Framework 3.5 and above, this example may be abbreviated as follows, without declaring the private variable name.","['later', 'version', '.net', 'framework', '3', 'example', 'abbreviate', 'follow', 'declare', 'private', 'variable']"
221,"Using the abbreviated syntax means that the underlying variable is no longer available from inside the class. As a result, the set portion of the property must be present for assignment. Access can be restricted with a set-specific access modifier.","['abbreviated', 'syntax', 'mean', 'underlie', 'variable', 'long', 'available', 'inside', 'class', 'result', 'set', 'portion', 'property', 'present', 'assignment', 'access', 'restrict', 'set', 'specific', 'access', 'modifier']"
222,"In Common Lisp Object System, slot specifications within class definitions may specify any of the :reader, :writer and :accessor options even multiple times to define reader methods, setter methods and accessor methods a reader method and the respective setf method.3 Slots are always directly accessible through their names with the use of with-slots and slot-value, and the slot accessor options define specialized methods that use slot-value.4","['common', 'lisp', 'object', 'system', 'slot', 'specification', 'class', 'definition', 'specify', 'reader', 'writer', 'accessor', 'option', 'multiple', 'time', 'define', 'reader', 'method', 'setter', 'method', 'accessor', 'method', 'reader', 'method', 'respective', 'setf', 'method', 'slots', 'directly', 'accessible', 'name', 'use', 'slot', 'slot', 'value', 'slot', 'accessor', 'option', 'define', 'specialized', 'method', 'use', 'slot', 'value']"
223,"CLOS itself has no notion of properties, although the MetaObject Protocol extension specifies means to access a slot's reader and writer function names, including the ones generated with the :accessor option.5","['clos', 'notion', 'property', 'metaobject', 'protocol', 'extension', 'specifie', 'mean', 'access', 'slot', 'reader', 'writer', 'function', 'name', 'include', 'one', 'generate', 'accessor', 'option']"
224,The following example shows a definition of a student class using these slot options and direct slot access:,"['follow', 'example', 'show', 'definition', 'student', 'class', 'slot', 'option', 'direct', 'slot', 'access']"
225,D supports a getter and setter function syntax. In version 2 of the language getter and setter class/struct methods should have the @property attribute.67,"['support', 'getter', 'setter', 'function', 'syntax', 'version', 'language', 'getter', 'setter', 'class', 'struct', 'method', '@property', 'attribute']"
226,A Student instance can be used like this:,"['student', 'instance', 'like']"
227,This is a simple class in Delphi language which illustrates the concept of public property for accessing a private field.,"['simple', 'class', 'delphi', 'language', 'illustrate', 'concept', 'public', 'property', 'access', 'private', 'field']"
228,"In this example of a simple class representing a student with only the name stored, one can see the variable name is private, i.e. only visible from the Student class, and the ""setter"" and ""getter"" are public, namely the ""getName"" and ""setNamename"" methods.","['example', 'simple', 'class', 'represent', 'student', 'store', 'variable', 'private', 'i.e.', 'visible', 'student', 'class', 'setter', 'getter', 'public', 'getname', 'setnamename', 'method']"
229,In this example constructor-function Student is used to create objects representing a student with only the name stored.,"['example', 'constructor', 'function', 'student', 'create', 'object', 'represent', 'student', 'store']"
230,Or using a deprecated way to define accessors in Web browsers:8,"['deprecate', 'way', 'define', 'accessor', 'web', 'browsers']"
231,Or using prototypes for inheritance and ES6 accessor syntax:,"['prototype', 'inheritance', 'es6', 'accessor', 'syntax']"
232,"Using traditional Objective-C 1.0 syntax, with manual reference counting as the one working on GNUstep on Ubuntu 12.04:","['traditional', 'objective', '1', 'syntax', 'manual', 'reference', 'counting', 'work', 'gnustep', 'ubuntu', '12']"
233,"Using newer Objective-C 2.0 syntax as used in Mac OS X 10.6, iOS 4 and Xcode 3.2, generating the same code as described above:","['new', 'objective', '2', 'syntax', 'mac', '10', 'ios', 'xcode', '3', 'generate', 'code', 'describe']"
234,"And starting with OS X 10.8 and iOS 6, while using Xcode 4.4 and up, syntax can be even simplified:","['start', '10', 'ios', 'xcode', '4', 'syntax', 'simplify']"
235,"Or, using the Moose Object System:","['moose', 'object', 'system']"
236,"PHP defines the ""magic methods"" __getand__set for properties of objects.9","['php', 'define', 'magic', 'method', 'getand__set', 'property', 'objects']"
237,"In this example of a simple class representing a student with only the name stored, one can see the variable name is private, i.e. only visible from the Student class, and the ""setter"" and ""getter"" is public, namely the getName and setName'name' methods.","['example', 'simple', 'class', 'represent', 'student', 'store', 'variable', 'private', 'i.e.', 'visible', 'student', 'class', 'setter', 'getter', 'public', 'getname', ""setname'name"", 'method']"
238,"This example uses a Python class with one variable, a getter, and a setter.","['example', 'use', 'python', 'class', 'variable', 'getter', 'setter']"
239,"In Racket, the object system is a way to organize code that comes in addition to modules and units. As in the rest of the language, the object system has first-class values and lexical scope is used to control access to objects and methods.","['racket', 'object', 'system', 'way', 'organize', 'code', 'come', 'addition', 'module', 'unit', 'rest', 'language', 'object', 'system', 'class', 'value', 'lexical', 'scope', 'control', 'access', 'object', 'method']"
240,"Struct definitions are an alternative way to define new types of values, with mutators being present when explicitly required:","['struct', 'definition', 'alternative', 'way', 'define', 'new', 'type', 'value', 'mutator', 'present', 'explicitly', 'require']"
241,"In Ruby, individual accessor and mutator methods may be defined, or the metaprogramming constructs attr_reader or attr_accessor may be used both to declare a private variable in a class and to provide either read-only or read-write public access to it respectively.","['ruby', 'individual', 'accessor', 'mutator', 'method', 'define', 'metaprogramming', 'construct', 'attr_reader', 'attr_accessor', 'declare', 'private', 'variable', 'class', 'provide', 'read', 'read', 'write', 'public', 'access', 'respectively']"
242,Defining individual accessor and mutator methods creates space for pre-processing or validation of the data,"['define', 'individual', 'accessor', 'mutator', 'method', 'create', 'space', 'pre', 'processing', 'validation', 'datum']"
243,Read-only simple public access to implied @name variable,"['read', 'simple', 'public', 'access', 'imply', '@name', 'variable']"
244,Read-write simple public access to implied @name variable,"['read', 'write', 'simple', 'public', 'access', 'imply', '@name', 'variable']"
245,"This example illustrates the VB.NET idea of properties, which are used in classes. Similar to C#, there is an explicit use of the Get and Set methods.","['example', 'illustrate', 'vb.net', 'idea', 'property', 'class', 'similar', 'explicit', 'use', 'set', 'method']"
246,"In VB.NET 2010, Auto Implemented properties can be utilized to create a property without having to use the Get and Set syntax. Note that a hidden variable is created by the compiler, called _name, to correspond with the Property name. Using another variable within the class named _name would result in an error. Privileged access to the underlying variable is available from within the class.","['vb.net', '2010', 'auto', 'implement', 'property', 'utilize', 'create', 'property', 'have', 'use', 'set', 'syntax', 'note', 'hide', 'variable', 'create', 'compiler', 'call', 'correspond', 'property', 'variable', 'class', 'name', 'result', 'error', 'privileged', 'access', 'underlie', 'variable', 'available', 'class']"
247,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
248,"In software engineering, the adapter pattern is a software design pattern also known as wrapper, an alternative naming shared with the decorator pattern that allows the interface of an existing class to be used as another interface.1 It is often used to make existing classes work with others without modifying their source code.","['software', 'engineering', 'adapter', 'pattern', 'software', 'design', 'pattern', 'know', 'wrapper', 'alternative', 'naming', 'share', 'decorator', 'pattern', 'allow', 'interface', 'exist', 'class', 'interface', 'existing', 'class', 'work', 'modify', 'source', 'code']"
249,An example is an adapter that converts the interface of a Document Object Model of an XML document into a tree structure that can be displayed.,"['example', 'adapter', 'convert', 'interface', 'document', 'object', 'model', 'xml', 'document', 'tree', 'structure', 'display']"
250,"The adapter2 design pattern is one of the twenty-three well-known Gang of Four design patterns that describe how to solve recurring design problems to design flexible and reusable object-oriented software, that is, objects that are easier to implement, change, test, and reuse.","['adapter2', 'design', 'pattern', 'know', 'gang', 'design', 'pattern', 'describe', 'solve', 'recur', 'design', 'problem', 'design', 'flexible', 'reusable', 'object', 'orient', 'software', 'object', 'easy', 'implement', 'change', 'test', 'reuse']"
251,The adapter design pattern solves problems like:3,"['adapter', 'design', 'pattern', 'solve', 'problem', 'like']"
252,Often an already existing class can't be reused only because its interface doesn't conform to the interface clients require.,"['exist', 'class', 'reuse', 'interface', 'conform', 'interface', 'client', 'require']"
253,The adapter design pattern describes how to solve such problems:,"['adapter', 'design', 'pattern', 'describe', 'solve', 'problem']"
254,The key idea in this pattern is to work through a separate adapter that adapts the interface of an already existing class without changing it.,"['key', 'idea', 'pattern', 'work', 'separate', 'adapter', 'adapt', 'interface', 'exist', 'class', 'change']"
255,Clients don't know whether they work with a target class directly or through an adapter with a class that does not have the target interface.,"['client', 'know', 'work', 'target', 'class', 'directly', 'adapter', 'class', 'target', 'interface']"
256,See also the UML class diagram below.,"['uml', 'class', 'diagram']"
257,"An adapter allows two incompatible interfaces to work together. This is the real-world definition for an adapter. Interfaces may be incompatible, but the inner functionality should suit the need. The adapter design pattern allows otherwise incompatible classes to work together by converting the interface of one class into an interface expected by the clients.","['adapter', 'allow', 'incompatible', 'interface', 'work', 'real', 'world', 'definition', 'adapter', 'interface', 'incompatible', 'inner', 'functionality', 'suit', 'need', 'adapter', 'design', 'pattern', 'allow', 'incompatible', 'class', 'work', 'convert', 'interface', 'class', 'interface', 'expect', 'client']"
258,"An adapter can be used when the wrapper must respect a particular interface and must support polymorphic behavior. Alternatively, a decorator makes it possible to add or alter behavior of an interface at run-time, and a facade is used when an easier or simpler interface to an underlying object is desired.4","['adapter', 'wrapper', 'respect', 'particular', 'interface', 'support', 'polymorphic', 'behavior', 'alternatively', 'decorator', 'make', 'possible', 'add', 'alter', 'behavior', 'interface', 'run', 'time', 'facade', 'easy', 'simple', 'interface', 'underlying', 'object', 'desired']"
259,"In the above UML class diagram, the client class that requires a target interface cannot reuse the adaptee class directly because its interface doesn't conform to the target interface. Instead, the client works through an adapter class that implements the target interface in terms of adaptee:","['uml', 'class', 'diagram', 'client', 'class', 'require', 'target', 'interface', 'reuse', 'adaptee', 'class', 'directly', 'interface', 'conform', 'target', 'interface', 'instead', 'client', 'work', 'adapter', 'class', 'implement', 'target', 'interface', 'term', 'adaptee']"
260,"In this adapter pattern, the adapter contains an instance of the class it wraps. In this situation, the adapter makes calls to the instance of the wrapped object.","['adapter', 'pattern', 'adapter', 'contain', 'instance', 'class', 'wrap', 'situation', 'adapter', 'make', 'call', 'instance', 'wrap', 'object']"
261,"This adapter pattern uses multiple polymorphic interfaces implementing or inheriting both the interface that is expected and the interface that is pre-existing. It is typical for the expected interface to be created as a pure interface class, especially in languages such as Java before JDK 1.8 that do not support multiple inheritance of classes.1","['adapter', 'pattern', 'use', 'multiple', 'polymorphic', 'interface', 'implement', 'inherit', 'interface', 'expect', 'interface', 'pre', 'exist', 'typical', 'expect', 'interface', 'create', 'pure', 'interface', 'class', 'especially', 'language', 'java', 'jdk', '1', 'support', 'multiple', 'inheritance', 'classes']"
262,"It is desired for classA to supply classB with some data, let us suppose some String data. A compile time solution is:","['desire', 'classa', 'supply', 'classb', 'datum', 'let', 'suppose', 'string', 'datum', 'compile', 'time', 'solution']"
263,"However, suppose that the format of the string data must be varied. A compile time solution is to use inheritance:","['suppose', 'format', 'string', 'datum', 'vary', 'compile', 'time', 'solution', 'use', 'inheritance']"
264,"and perhaps create the correctly ""formatting"" object at runtime by means of the factory pattern.","['create', 'correctly', 'format', 'object', 'runtime', 'mean', 'factory', 'pattern']"
265,"A solution using ""adapters"" proceeds as follows:","['solution', 'adapter', 'proceed', 'follow']"
266,"When implementing the adapter pattern, for clarity, one can apply the class name ClassNameToInterfaceAdapter to the provider implementation; for example, DAOToProviderAdapter. It should have a constructor method with an adaptee class variable as a parameter. This parameter will be passed to an instance member of ClassNameToInterfaceAdapter. When the clientMethod is called, it will have access to the adaptee instance that allows for accessing the required data of the adaptee and performing operations on that data that generates the desired output.","['implement', 'adapter', 'pattern', 'clarity', 'apply', 'class', 'classnametointerfaceadapter', 'provider', 'implementation', 'example', 'daotoprovideradapter', 'constructor', 'method', 'adaptee', 'class', 'variable', 'parameter', 'parameter', 'pass', 'instance', 'member', 'classnametointerfaceadapter', 'clientmethod', 'call', 'access', 'adaptee', 'instance', 'allow', 'access', 'require', 'datum', 'adaptee', 'perform', 'operation', 'datum', 'generate', 'desire', 'output']"
267,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
268,"In computing, aspect-oriented programming AOP is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. It does so by adding behavior to existing code an advice without modifying the code itself, instead separately specifying which code is modified via a ""pointcut"" specification, such as ""log all function calls when the function's name begins with 'set'"". This allows behaviors that are not central to the business logic such as logging to be added to a program without cluttering the code core to the functionality.","['computing', 'aspect', 'orient', 'programming', 'aop', 'programming', 'paradigm', 'aim', 'increase', 'modularity', 'allow', 'separation', 'cross', 'cutting', 'concern', 'add', 'behavior', 'exist', 'code', 'advice', 'modify', 'code', 'instead', 'separately', 'specify', 'code', 'modify', 'pointcut', 'specification', 'log', 'function', 'call', 'function', 'begin', 'set', 'allow', 'behavior', 'central', 'business', 'logic', 'log', 'add', 'program', 'clutter', 'code', 'core', 'functionality']"
269,"AOP includes programming methods and tools that support the modularization of concerns at the level of the source code, while aspect-oriented software development refers to a whole engineering discipline.","['aop', 'include', 'programming', 'method', 'tool', 'support', 'modularization', 'concern', 'level', 'source', 'code', 'aspect', 'orient', 'software', 'development', 'refer', 'engineering', 'discipline']"
270,"Aspect-oriented programming entails breaking down program logic into distinct parts so-called concerns, cohesive areas of functionality. Nearly all programming paradigms support some level of grouping and encapsulation of concerns into separate, independent entities by providing abstractions e.g., functions, procedures, modules, classes, methods that can be used for implementing, abstracting and composing these concerns. Some concerns ""cut across"" multiple abstractions in a program, and defy these forms of implementation. These concerns are called cross-cutting concerns or horizontal concerns.","['aspect', 'orient', 'programming', 'entail', 'break', 'program', 'logic', 'distinct', 'part', 'call', 'concern', 'cohesive', 'area', 'functionality', 'nearly', 'programming', 'paradigm', 'support', 'level', 'grouping', 'encapsulation', 'concern', 'separate', 'independent', 'entity', 'provide', 'abstraction', 'e.g.', 'function', 'procedure', 'module', 'class', 'method', 'implement', 'abstracting', 'compose', 'concern', 'concern', 'cut', 'multiple', 'abstraction', 'program', 'defy', 'form', 'implementation', 'concern', 'call', 'cross', 'cut', 'concern', 'horizontal', 'concern']"
271,Logging exemplifies a crosscutting concern because a logging strategy necessarily affects every logged part of the system. Logging thereby crosscuts all logged classes and methods.,"['logging', 'exemplify', 'crosscut', 'concern', 'log', 'strategy', 'necessarily', 'affect', 'log', 'system', 'log', 'crosscut', 'log', 'class', 'method']"
272,"All AOP implementations have some crosscutting expressions that encapsulate each concern in one place. The difference between implementations lies in the power, safety, and usability of the constructs provided. For example, interceptors that specify the methods to express a limited form of crosscutting, without much support for type-safety or debugging. AspectJ has a number of such expressions and encapsulates them in a special class, an aspect. For example, an aspect can alter the behavior of the base code the non-aspect part of a program by applying advice additional behavior at various join points points in a program specified in a quantification or query called a pointcut that detects whether a given join point matches. An aspect can also make binary-compatible structural changes to other classes, like adding members or parents.","['aop', 'implementation', 'crosscut', 'expression', 'encapsulate', 'concern', 'place', 'difference', 'implementation', 'lie', 'power', 'safety', 'usability', 'construct', 'provide', 'example', 'interceptor', 'specify', 'method', 'express', 'limited', 'form', 'crosscut', 'support', 'type', 'safety', 'debug', 'aspectj', 'number', 'expression', 'encapsulate', 'special', 'class', 'aspect', 'example', 'aspect', 'alter', 'behavior', 'base', 'code', 'non', 'aspect', 'program', 'apply', 'advice', 'additional', 'behavior', 'join', 'point', 'point', 'program', 'specify', 'quantification', 'query', 'call', 'pointcut', 'detect', 'give', 'join', 'point', 'match', 'aspect', 'binary', 'compatible', 'structural', 'change', 'class', 'like', 'add', 'member', 'parent']"
273,"AOP has several direct antecedents A1 and A2:1 reflection and metaobject protocols, subject-oriented programming, Composition Filters and Adaptive Programming.2","['aop', 'direct', 'antecedent', 'a2', 'reflection', 'metaobject', 'protocol', 'subject', 'orient', 'programming', 'composition', 'filters', 'adaptive', 'programming']"
274,"Gregor Kiczales and colleagues at Xerox PARC developed the explicit concept of AOP, and followed this with the AspectJ AOP extension to Java. IBM's research team pursued a tool approach over a language design approach and in 2001 proposed Hyper/J and the Concern Manipulation Environment, which have not seen wide usage.","['gregor', 'kiczales', 'colleague', 'xerox', 'parc', 'develop', 'explicit', 'concept', 'aop', 'follow', 'aspectj', 'aop', 'extension', 'java', 'ibm', 'research', 'team', 'pursue', 'tool', 'approach', 'language', 'design', 'approach', '2001', 'propose', 'hyper', 'concern', 'manipulation', 'environment', 'see', 'wide', 'usage']"
275,The examples in this article use AspectJ.,"['example', 'article', 'use', 'aspectj.']"
276,The Microsoft Transaction Server is considered to be the first major application of AOP followed by Enterprise JavaBeans.34,"['microsoft', 'transaction', 'server', 'consider', 'major', 'application', 'aop', 'follow', 'enterprise', 'javabeans']"
277,"Typically, an aspect is scattered or tangled as code, making it harder to understand and maintain. It is scattered by virtue of the function such as logging being spread over a number of unrelated functions that might use its function, possibly in entirely unrelated systems, different source languages, etc. That means to change logging can require modifying all affected modules. Aspects become tangled not only with the mainline function of the systems in which they are expressed but also with each other. That means changing one concern entails understanding all the tangled concerns or having some means by which the effect of changes can be inferred.","['typically', 'aspect', 'scatter', 'tangle', 'code', 'make', 'hard', 'understand', 'maintain', 'scatter', 'virtue', 'function', 'log', 'spread', 'number', 'unrelated', 'function', 'use', 'function', 'possibly', 'entirely', 'unrelated', 'system', 'different', 'source', 'language', 'etc', 'mean', 'change', 'logging', 'require', 'modifying', 'affect', 'module', 'aspect', 'tangle', 'mainline', 'function', 'system', 'express', 'mean', 'change', 'concern', 'entail', 'understand', 'tangle', 'concern', 'have', 'mean', 'effect', 'change', 'infer']"
278,"For example, consider a banking application with a conceptually very simple method for transferring an amount from one account to another:5","['example', 'consider', 'banking', 'application', 'conceptually', 'simple', 'method', 'transfer', 'account', 'another']"
279,"However, this transfer method overlooks certain considerations that a deployed application would require: it lacks security checks to verify that the current user has the authorization to perform this operation; a database transaction should encapsulate the operation in order to prevent accidental data loss; for diagnostics, the operation should be logged to the system log, etc.","['transfer', 'method', 'overlook', 'certain', 'consideration', 'deploy', 'application', 'require', 'lack', 'security', 'check', 'verify', 'current', 'user', 'authorization', 'perform', 'operation', 'database', 'transaction', 'encapsulate', 'operation', 'order', 'prevent', 'accidental', 'datum', 'loss', 'diagnostic', 'operation', 'log', 'system', 'log', 'etc']"
280,"A version with all those new concerns, for the sake of example, could look somewhat like this:","['version', 'new', 'concern', 'sake', 'example', 'look', 'somewhat', 'like']"
281,"In this example, other interests have become tangled with the basic functionality sometimes called the business logic concern. Transactions, security, and logging all exemplify cross-cutting concerns.","['example', 'interest', 'tangle', 'basic', 'functionality', 'call', 'business', 'logic', 'concern', 'transaction', 'security', 'log', 'exemplify', 'cross', 'cutting', 'concern']"
282,"Now consider what happens if we suddenly need to change for example the security considerations for the application. In the program's current version, security-related operations appear scattered across numerous methods, and such a change would require a major effort.","['consider', 'happen', 'suddenly', 'need', 'change', 'example', 'security', 'consideration', 'application', 'program', 'current', 'version', 'security', 'relate', 'operation', 'appear', 'scatter', 'numerous', 'method', 'change', 'require', 'major', 'effort']"
283,"AOP attempts to solve this problem by allowing the programmer to express cross-cutting concerns in stand-alone modules called aspects. Aspects can contain advice code joined to specified points in the program and inter-type declarations structural members added to other classes. For example, a security module can include advice that performs a security check before accessing a bank account. The pointcut defines the times join points when one can access a bank account, and the code in the advice body defines how the security check is implemented. That way, both the check and the places can be maintained in one place. Further, a good pointcut can anticipate later program changes, so if another developer creates a new method to access the bank account, the advice will apply to the new method when it executes.","['aop', 'attempt', 'solve', 'problem', 'allow', 'programmer', 'express', 'cross', 'cutting', 'concern', 'stand', 'module', 'call', 'aspect', 'aspect', 'contain', 'advice', 'code', 'join', 'specify', 'point', 'program', 'inter', 'type', 'declaration', 'structural', 'member', 'add', 'class', 'example', 'security', 'module', 'include', 'advice', 'perform', 'security', 'check', 'access', 'bank', 'account', 'pointcut', 'define', 'time', 'join', 'point', 'access', 'bank', 'account', 'code', 'advice', 'body', 'define', 'security', 'check', 'implement', 'way', 'check', 'place', 'maintain', 'place', 'good', 'pointcut', 'anticipate', 'late', 'program', 'change', 'developer', 'create', 'new', 'method', 'access', 'bank', 'account', 'advice', 'apply', 'new', 'method', 'execute']"
284,So for the example above implementing logging in an aspect:,"['example', 'implement', 'log', 'aspect']"
285,One can think of AOP as a debugging tool or as a user-level tool. Advice should be reserved for the cases where you cannot get the function changed user level6 or do not want to change the function in production code debugging.,"['think', 'aop', 'debug', 'tool', 'user', 'level', 'tool', 'advice', 'reserve', 'case', 'function', 'change', 'user', 'level6', 'want', 'change', 'function', 'production', 'code', 'debugging']"
286,The advice-related component of an aspect-oriented language defines a join point model JPM. A JPM defines three things:,"['advice', 'relate', 'component', 'aspect', 'orient', 'language', 'define', 'join', 'point', 'model', 'jpm', 'jpm', 'define', 'thing']"
287,"Join-point models can be compared based on the join points exposed, how join points are specified, the operations permitted at the join points, and the structural enhancements that can be expressed.","['join', 'point', 'model', 'compare', 'base', 'join', 'point', 'expose', 'join', 'point', 'specify', 'operation', 'permit', 'join', 'point', 'structural', 'enhancement', 'express']"
288,"""Kinded"" PCDs match a particular kind of join point e.g., method execution and tend to take as input a Java-like signature. One such pointcut looks like this:","['kinde', 'pcd', 'match', 'particular', 'kind', 'join', 'point', 'e.g.', 'method', 'execution', 'tend', 'input', 'java', 'like', 'signature', 'pointcut', 'look', 'like']"
289,"This pointcut matches a method-execution join point, if the method name starts with ""set"" and there is exactly one argument of any type.","['pointcut', 'match', 'method', 'execution', 'join', 'point', 'method', 'start', 'set', 'exactly', 'argument', 'type']"
290,"""Dynamic"" PCDs check runtime types and bind variables. For example,","['dynamic', 'pcd', 'check', 'runtime', 'type', 'bind', 'variable', 'example']"
291,This pointcut matches when the currently executing object is an instance of class Point. Note that the unqualified name of a class can be used via Java's normal type lookup.,"['pointcut', 'match', 'currently', 'execute', 'object', 'instance', 'class', 'point', 'note', 'unqualified', 'class', 'java', 'normal', 'type', 'lookup']"
292,"""Scope"" PCDs limit the lexical scope of the join point. For example:","['scope', 'pcd', 'limit', 'lexical', 'scope', 'join', 'point', 'example']"
293,This pointcut matches any join point in any type in the com.company package. The * is one form of the wildcards that can be used to match many things with one signature.,"['pointcut', 'match', 'join', 'point', 'type', 'com.company', 'package', 'form', 'wildcard', 'match', 'thing', 'signature']"
294,Pointcuts can be composed and named for reuse. For example:,"['pointcuts', 'compose', 'name', 'reuse', 'example']"
295,"There are other kinds of JPMs. All advice languages can be defined in terms of their JPM. For example, a hypothetical aspect language for UML may have the following JPM:","['kind', 'jpms', 'advice', 'language', 'define', 'term', 'jpm', 'example', 'hypothetical', 'aspect', 'language', 'uml', 'following', 'jpm']"
296,"Inter-type declarations provide a way to express crosscutting concerns affecting the structure of modules. Also known as open classes and extension methods, this enables programmers to declare in one place members or parents of another class, typically in order to combine all the code related to a concern in one aspect. For example, if a programmer implemented the crosscutting display-update concern using visitors instead, an inter-type declaration using the visitor pattern might look like this in AspectJ:","['inter', 'type', 'declaration', 'provide', 'way', 'express', 'crosscut', 'concern', 'affect', 'structure', 'module', 'know', 'open', 'class', 'extension', 'method', 'enable', 'programmer', 'declare', 'place', 'member', 'parent', 'class', 'typically', 'order', 'combine', 'code', 'relate', 'concern', 'aspect', 'example', 'programmer', 'implement', 'crosscut', 'display', 'update', 'concern', 'visitor', 'instead', 'inter', 'type', 'declaration', 'visitor', 'pattern', 'look', 'like', 'aspectj']"
297,This code snippet adds the acceptVisitor method to the Point class.,"['code', 'snippet', 'add', 'acceptvisitor', 'method', 'point', 'class']"
298,"It is a requirement that any structural additions be compatible with the original class, so that clients of the existing class continue to operate, unless the AOP implementation can expect to control all clients at all times.","['requirement', 'structural', 'addition', 'compatible', 'original', 'class', 'client', 'exist', 'class', 'continue', 'operate', 'aop', 'implementation', 'expect', 'control', 'client', 'time']"
299,"AOP programs can affect other programs in two different ways, depending on the underlying languages and environments:","['aop', 'program', 'affect', 'program', 'different', 'way', 'depend', 'underlie', 'language', 'environment']"
300,"The difficulty of changing environments means most implementations produce compatible combination programs through a type of program transformation known as weaving. An aspect weaver reads the aspect-oriented code and generates appropriate object-oriented code with the aspects integrated. The same AOP language can be implemented through a variety of weaving methods, so the semantics of a language should never be understood in terms of the weaving implementation. Only the speed of an implementation and its ease of deployment are affected by which method of combination is used.","['difficulty', 'change', 'environment', 'mean', 'implementation', 'produce', 'compatible', 'combination', 'program', 'type', 'program', 'transformation', 'know', 'weaving', 'aspect', 'weaver', 'read', 'aspect', 'orient', 'code', 'generate', 'appropriate', 'object', 'orient', 'code', 'aspect', 'integrate', 'aop', 'language', 'implement', 'variety', 'weaving', 'method', 'semantic', 'language', 'understand', 'term', 'weaving', 'implementation', 'speed', 'implementation', 'ease', 'deployment', 'affect', 'method', 'combination']"
301,"Systems can implement source-level weaving using preprocessors as C++ was implemented originally in CFront that require access to program source files. However, Java's well-defined binary form enables bytecode weavers to work with any Java program in .class-file form. Bytecode weavers can be deployed during the build process or, if the weave model is per-class, during class loading. AspectJ started with source-level weaving in 2001, delivered a per-class bytecode weaver in 2002, and offered advanced load-time support after the integration of AspectWerkz in 2005.","['system', 'implement', 'source', 'level', 'weaving', 'preprocessor', 'c++', 'implement', 'originally', 'cfront', 'require', 'access', 'program', 'source', 'file', 'java', 'define', 'binary', 'form', 'enable', 'bytecode', 'weaver', 'work', 'java', 'program', '.class', 'file', 'form', 'bytecode', 'weaver', 'deploy', 'build', 'process', 'weave', 'model', 'class', 'class', 'loading', 'aspectj', 'start', 'source', 'level', 'weaving', '2001', 'deliver', 'class', 'bytecode', 'weaver', '2002', 'offer', 'advanced', 'load', 'time', 'support', 'integration', 'aspectwerkz', '2005']"
302,"Any solution that combines programs at runtime has to provide views that segregate them properly to maintain the programmer's segregated model. Java's bytecode support for multiple source files enables any debugger to step through a properly woven .class file in a source editor. However, some third-party decompilers cannot process woven code because they expect code produced by Javac rather than all supported bytecode forms see also § Criticism, below.","['solution', 'combine', 'program', 'runtime', 'provide', 'view', 'segregate', 'properly', 'maintain', 'programmer', 'segregate', 'model', 'java', 'bytecode', 'support', 'multiple', 'source', 'file', 'enable', 'debugger', 'step', 'properly', 'weave', '.class', 'file', 'source', 'editor', 'party', 'decompiler', 'process', 'weave', 'code', 'expect', 'code', 'produce', 'javac', 'support', 'bytecode', 'form', 'criticism']"
303,"Deploy-time weaving offers another approach.7 This basically implies post-processing, but rather than patching the generated code, this weaving approach subclasses existing classes so that the modifications are introduced by method-overriding. The existing classes remain untouched, even at runtime, and all existing tools debuggers, profilers, etc. can be used during development. A similar approach has already proven itself in the implementation of many Java EE application servers, such as IBM's WebSphere.","['deploy', 'time', 'weaving', 'offer', 'approach', 'basically', 'imply', 'post', 'processing', 'patch', 'generate', 'code', 'weaving', 'approach', 'subclasse', 'exist', 'class', 'modification', 'introduce', 'method', 'overriding', 'exist', 'class', 'remain', 'untouched', 'runtime', 'exist', 'tool', 'debugger', 'profiler', 'etc', 'development', 'similar', 'approach', 'prove', 'implementation', 'java', 'application', 'server', 'ibm', 'websphere']"
304,Standard terminology used in Aspect-oriented programming may include:,"['standard', 'terminology', 'aspect', 'orient', 'programming', 'include']"
305,"Aspects emerged from object-oriented programming and computational reflection. AOP languages have functionality similar to, but more restricted than metaobject protocols. Aspects relate closely to programming concepts like subjects, mixins, and delegation. Other ways to use aspect-oriented programming paradigms include Composition Filters and the hyperslices approach. Since at least the 1970s, developers have been using forms of interception and dispatch-patching that resemble some of the implementation methods for AOP, but these never had the semantics that the crosscutting specifications provide written in one place.citation needed","['aspect', 'emerge', 'object', 'orient', 'programming', 'computational', 'reflection', 'aop', 'language', 'functionality', 'similar', 'restricted', 'metaobject', 'protocol', 'aspect', 'relate', 'closely', 'programming', 'concept', 'like', 'subject', 'mixin', 'delegation', 'way', 'use', 'aspect', 'orient', 'programming', 'paradigm', 'include', 'composition', 'filters', 'hyperslice', 'approach', '1970', 'developer', 'form', 'interception', 'dispatch', 'patching', 'resemble', 'implementation', 'method', 'aop', 'semantic', 'crosscut', 'specification', 'provide', 'write', 'place.citation', 'need']"
306,"Designers have considered alternative ways to achieve separation of code, such as C#'s partial types, but such approaches lack a quantification mechanism that allows reaching several join points of the code with one declarative statement.citation needed","['designer', 'consider', 'alternative', 'way', 'achieve', 'separation', 'code', 'partial', 'type', 'approach', 'lack', 'quantification', 'mechanism', 'allow', 'reach', 'join', 'point', 'code', 'declarative', 'statement.citation', 'need']"
307,"Though it may seem unrelated, in testing, the use of mocks or stubs requires the use of AOP techniques, like around advice, and so forth. Here the collaborating objects are for the purpose of the test, a cross cutting concern. Thus the various Mock Object frameworks provide these features. For example, a process invokes a service to get a balance amount. In the test of the process, where the amount comes from is unimportant, only that the process uses the balance according to the requirements.citation needed","['unrelated', 'testing', 'use', 'mock', 'stub', 'require', 'use', 'aop', 'technique', 'like', 'advice', 'forth', 'collaborate', 'object', 'purpose', 'test', 'cross', 'cutting', 'concern', 'mock', 'object', 'framework', 'provide', 'feature', 'example', 'process', 'invoke', 'service', 'balance', 'test', 'process', 'come', 'unimportant', 'process', 'use', 'balance', 'accord', 'requirements.citation', 'need']"
308,"Programmers need to be able to read code and understand what is happening in order to prevent errors.10 Even with proper education, understanding crosscutting concerns can be difficult without proper support for visualizing both static structure and the dynamic flow of a program.11 Beginning in 2002, AspectJ began to provide IDE plug-ins to support the visualizing of crosscutting concerns. Those features, as well as aspect code assist and refactoring are now common.","['programmer', 'need', 'able', 'read', 'code', 'understand', 'happen', 'order', 'prevent', 'errors', 'proper', 'education', 'understand', 'crosscut', 'concern', 'difficult', 'proper', 'support', 'visualize', 'static', 'structure', 'dynamic', 'flow', 'program', 'begin', '2002', 'aspectj', 'begin', 'provide', 'ide', 'plug', 'in', 'support', 'visualizing', 'crosscut', 'concern', 'feature', 'aspect', 'code', 'assist', 'refactoring', 'common']"
309,"Given the power of AOP, if a programmer makes a logical mistake in expressing crosscutting, it can lead to widespread program failure. Conversely, another programmer may change the join points in a program – e.g., by renaming or moving methods – in ways that the aspect writer did not anticipate, with unforeseen consequences. One advantage of modularizing crosscutting concerns is enabling one programmer to affect the entire system easily; as a result, such problems present as a conflict over responsibility between two or more developers for a given failure. However, the solution for these problems can be much easier in the presence of AOP, since only the aspect needs to be changed, whereas the corresponding problems without AOP can be much more spread out.citation needed","['give', 'power', 'aop', 'programmer', 'make', 'logical', 'mistake', 'express', 'crosscutting', 'lead', 'widespread', 'program', 'failure', 'conversely', 'programmer', 'change', 'join', 'point', 'program', 'e.g.', 'rename', 'move', 'method', 'way', 'aspect', 'writer', 'anticipate', 'unforeseen', 'consequence', 'advantage', 'modularize', 'crosscut', 'concern', 'enable', 'programmer', 'affect', 'entire', 'system', 'easily', 'result', 'problem', 'present', 'conflict', 'responsibility', 'developer', 'give', 'failure', 'solution', 'problem', 'easy', 'presence', 'aop', 'aspect', 'need', 'change', 'correspond', 'problem', 'aop', 'spread', 'out.citation', 'need']"
310,"The most basic criticism of the effect of AOP is that control flow is obscured, and that it is not only worse than the much-maligned GOTO, but is in fact closely analogous to the joke COME FROM statement.11 The obliviousness of application, which is fundamental to many definitions of AOP the code in question has no indication that an advice will be applied, which is specified instead in the pointcut, means that the advice is not visible, in contrast to an explicit method call.1112 For example, compare the COME FROM program:11","['basic', 'criticism', 'effect', 'aop', 'control', 'flow', 'obscure', 'bad', 'malign', 'goto', 'fact', 'closely', 'analogous', 'joke', 'come', 'statement', 'obliviousness', 'application', 'fundamental', 'definition', 'aop', 'code', 'question', 'indication', 'advice', 'apply', 'specify', 'instead', 'pointcut', 'mean', 'advice', 'visible', 'contrast', 'explicit', 'method', 'call', 'example', 'compare', 'come', 'program']"
311,with an AOP fragment with analogous semantics:,"['aop', 'fragment', 'analogous', 'semantic']"
312,"Indeed, the pointcut may depend on runtime condition and thus not be statically deterministic. This can be mitigated but not solved by static analysis and IDE support showing which advices potentially match.","['pointcut', 'depend', 'runtime', 'condition', 'statically', 'deterministic', 'mitigate', 'solve', 'static', 'analysis', 'ide', 'support', 'show', 'advice', 'potentially', 'match']"
313,"General criticisms are that AOP purports to improve ""both modularity and the structure of code"", but some counter that it instead undermines these goals and impedes ""independent development and understandability of programs"".13 Specifically, quantification by pointcuts breaks modularity: ""one must, in general, have whole-program knowledge to reason about the dynamic execution of an aspect-oriented program.""14 Further, while its goals modularizing cross-cutting concerns are well understood, its actual definition is unclear and not clearly distinguished from other well-established techniques.13 Cross-cutting concerns potentially cross-cut each other, requiring some resolution mechanism, such as ordering.13 Indeed, aspects can apply to themselves, leading to problems such as the liar paradox.15","['general', 'criticism', 'aop', 'purport', 'improve', 'modularity', 'structure', 'code', 'counter', 'instead', 'undermine', 'goal', 'impede', 'independent', 'development', 'understandability', 'programs', 'specifically', 'quantification', 'pointcut', 'break', 'modularity', 'general', 'program', 'knowledge', 'reason', 'dynamic', 'execution', 'aspect', 'orient', 'program', '14', 'goal', 'modularize', 'cross', 'cut', 'concern', 'understand', 'actual', 'definition', 'unclear', 'clearly', 'distinguish', 'establish', 'techniques', 'cross', 'cut', 'concern', 'potentially', 'cross', 'cut', 'require', 'resolution', 'mechanism', 'ordering', 'aspect', 'apply', 'lead', 'problem', 'liar', 'paradox']"
314,"Technical criticisms include that the quantification of pointcuts defining where advices are executed is ""extremely sensitive to changes in the program"", which is known as the fragile pointcut problem.13 The problems with pointcuts are deemed intractable: if one replaces the quantification of pointcuts with explicit annotations, one obtains attribute-oriented programming instead, which is simply an explicit subroutine call and suffers the identical problem of scattering that AOP was designed to solve.13","['technical', 'criticism', 'include', 'quantification', 'pointcut', 'define', 'advice', 'execute', 'extremely', 'sensitive', 'change', 'program', 'know', 'fragile', 'pointcut', 'problem', 'problem', 'pointcut', 'deem', 'intractable', 'replace', 'quantification', 'pointcut', 'explicit', 'annotation', 'obtain', 'attribute', 'orient', 'programming', 'instead', 'simply', 'explicit', 'subroutine', 'suffer', 'identical', 'problem', 'scatter', 'aop', 'design', 'solve']"
315,"The following programming languages have implemented AOP, within the language, or as an external library:","['following', 'programming', 'language', 'implement', 'aop', 'language', 'external', 'library']"
316,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
317,"The bridge pattern is a design pattern used in software engineering that is meant to ""decouple an abstraction from its implementation so that the two can vary independently"", introduced by the Gang of Four.1 The bridge uses encapsulation, aggregation, and can use inheritance to separate responsibilities into different classes.","['bridge', 'pattern', 'design', 'pattern', 'software', 'engineering', 'mean', 'decouple', 'abstraction', 'implementation', 'vary', 'independently', 'introduce', 'gang', 'four', 'bridge', 'use', 'encapsulation', 'aggregation', 'use', 'inheritance', 'separate', 'responsibility', 'different', 'class']"
318,"When a class varies often, the features of object-oriented programming become very useful because changes to a program's code can be made easily with minimal prior knowledge about the program. The bridge pattern is useful when both the class and what it does vary often. The class itself can be thought of as the abstraction and what the class can do as the implementation. The bridge pattern can also be thought of as two layers of abstraction.","['class', 'vary', 'feature', 'object', 'orient', 'programming', 'useful', 'change', 'program', 'code', 'easily', 'minimal', 'prior', 'knowledge', 'program', 'bridge', 'pattern', 'useful', 'class', 'vary', 'class', 'think', 'abstraction', 'class', 'implementation', 'bridge', 'pattern', 'think', 'layer', 'abstraction']"
319,"When there is only one fixed implementation, this pattern is known as the Pimpl idiom in the C++ world.","['fix', 'implementation', 'pattern', 'know', 'pimpl', 'idiom', 'c++', 'world']"
320,"The bridge pattern is often confused with the adapter pattern, and is often implemented using the object adapter pattern; e.g., in the Java code below.","['bridge', 'pattern', 'confuse', 'adapter', 'pattern', 'implement', 'object', 'adapter', 'pattern', 'e.g.', 'java', 'code']"
321,Variant: The implementation can be decoupled even more by deferring the presence of the implementation to the point where the abstraction is utilized.,"['variant', 'implementation', 'decouple', 'defer', 'presence', 'implementation', 'point', 'abstraction', 'utilize']"
322,"The Bridge design pattern is one of the twenty-three well-known GoF design patterns that describe how to solve recurring design problems to design flexible and reusable object-oriented software, that is, objects that are easier to implement, change, test, and reuse.1","['bridge', 'design', 'pattern', 'know', 'gof', 'design', 'pattern', 'describe', 'solve', 'recur', 'design', 'problem', 'design', 'flexible', 'reusable', 'object', 'orient', 'software', 'object', 'easy', 'implement', 'change', 'test', 'reuse']"
323,What problems can the Bridge design pattern solve?2,"['problem', 'bridge', 'design', 'pattern', 'solve?2']"
324,"When using subclassing, different subclasses implement an abstract class in different ways. But an implementation is bound to the abstraction at compile-time and cannot be changed at run-time.","['subclasse', 'different', 'subclass', 'implement', 'abstract', 'class', 'different', 'way', 'implementation', 'bind', 'abstraction', 'compile', 'time', 'change', 'run', 'time']"
325,What solution does the Bridge design pattern describe?,"['solution', 'bridge', 'design', 'pattern', 'describe']"
326,This enables to configure an Abstraction with an Implementor object at run-time. See also the Unified Modeling Language class and sequence diagram below.,"['enable', 'configure', 'abstraction', 'implementor', 'object', 'run', 'time', 'unified', 'modeling', 'language', 'class', 'sequence', 'diagram']"
327,"In the above Unified Modeling Language class diagram, an abstraction Abstraction is not implemented as usual in a single inheritance hierarchy. Instead, there is one hierarchy for an abstraction Abstraction and a separate hierarchy for its implementation Implementor, which makes the two independent from each other. The Abstraction interface operation is implemented in terms of by delegating to the Implementor interface imp.operationImp. The UML sequence diagram shows the run-time interactions: The Abstraction1 object delegates implementation to the Implementor1 object by calling operationImp on Implementor1, which performs the operation and returns to Abstraction1.","['unified', 'modeling', 'language', 'class', 'diagram', 'abstraction', 'abstraction', 'implement', 'usual', 'single', 'inheritance', 'hierarchy', 'instead', 'hierarchy', 'abstraction', 'abstraction', 'separate', 'hierarchy', 'implementation', 'implementor', 'make', 'independent', 'abstraction', 'interface', 'operation', 'implement', 'term', 'delegate', 'implementor', 'interface', 'imp.operationimp', 'uml', 'sequence', 'diagram', 'show', 'run', 'time', 'interaction', 'abstraction1', 'object', 'delegate', 'implementation', 'implementor1', 'object', 'call', 'operationimp', 'implementor1', 'perform', 'operation', 'return', 'abstraction1']"
328,Bridge pattern compose objects in tree structure. It decouples abstraction from implementation. Here abstraction represents the client from which the objects will be called. An example implemented in C# is given below,"['bridge', 'pattern', 'compose', 'object', 'tree', 'structure', 'decouple', 'abstraction', 'implementation', 'abstraction', 'represent', 'client', 'object', 'call', 'example', 'implement', 'give']"
329,"The Bridge classes are the Implementation that uses the same interface-oriented architecture to create objects. On the other hand, the abstraction takes an instance of the implementation class and runs its method. Thus, they are completely decoupled from one another.","['bridge', 'class', 'implementation', 'use', 'interface', 'orient', 'architecture', 'create', 'object', 'hand', 'abstraction', 'take', 'instance', 'implementation', 'class', 'run', 'method', 'completely', 'decouple']"
330,The following Java program defines a bank account that separates the account operations from the logging of these operations.,"['follow', 'java', 'program', 'define', 'bank', 'account', 'separate', 'account', 'operation', 'logging', 'operation']"
331,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
332,The builder pattern is a design pattern designed to provide a flexible solution to various object creation problems in object-oriented programming. The intent of the Builder design pattern is to separate the construction of a complex object from its representation. It is one of the Gang of Four design patterns.,"['builder', 'pattern', 'design', 'pattern', 'design', 'provide', 'flexible', 'solution', 'object', 'creation', 'problem', 'object', 'orient', 'programming', 'intent', 'builder', 'design', 'pattern', 'separate', 'construction', 'complex', 'object', 'representation', 'gang', 'design', 'pattern']"
333,The Builder design pattern is one of the Design Patterns1 that describe how to solve recurring design problems in object-oriented software.,"['builder', 'design', 'pattern', 'design', 'patterns1', 'describe', 'solve', 'recur', 'design', 'problem', 'object', 'orient', 'software']"
334,The Builder design pattern solves problems like:2,"['builder', 'design', 'pattern', 'solve', 'problem', 'like']"
335,Creating and assembling the parts of a complex object directly within a class is inflexible. It commits the class to creating a particular representation of the complex object and makes it impossible to change the representation later independently from without having to change the class.,"['create', 'assemble', 'part', 'complex', 'object', 'directly', 'class', 'inflexible', 'commit', 'class', 'create', 'particular', 'representation', 'complex', 'object', 'make', 'impossible', 'change', 'representation', 'later', 'independently', 'have', 'change', 'class']"
336,The Builder design pattern describes how to solve such problems:,"['builder', 'design', 'pattern', 'describe', 'solve', 'problem']"
337,A class the same construction process can delegate to different Builder objects to create different representations of a complex object.,"['class', 'construction', 'process', 'delegate', 'different', 'builder', 'object', 'create', 'different', 'representation', 'complex', 'object']"
338,"The intent of the Builder design pattern is to separate the construction of a complex object from its representation. By doing so, the same construction process can create different representations.1","['intent', 'builder', 'design', 'pattern', 'separate', 'construction', 'complex', 'object', 'representation', 'construction', 'process', 'create', 'different', 'representations']"
339,Advantages of the Builder pattern include:3,"['advantage', 'builder', 'pattern', 'include']"
340,Disadvantages of the Builder pattern include:3,"['disadvantage', 'builder', 'pattern', 'include']"
341,"In the above UML class diagram, the Director class doesn't create and assemble the ProductA1 and ProductB1 objects directly. Instead, the Director refers to the Builder interface for building creating and assembling the parts of a complex object, which makes the Director independent of which concrete classes are instantiated which representation is created. The Builder1 class implements the Builder interface by creating and assembling the ProductA1 and ProductB1 objects. The UML sequence diagram shows the run-time interactions: The Director object calls buildPartA on the Builder1 object, which creates and assembles the ProductA1 object. Thereafter, the Director calls buildPartB on Builder1, which creates and assembles the ProductB1 object.","['uml', 'class', 'diagram', 'director', 'class', 'create', 'assemble', 'producta1', 'productb1', 'object', 'directly', 'instead', 'director', 'refer', 'builder', 'interface', 'building', 'create', 'assemble', 'part', 'complex', 'object', 'make', 'director', 'independent', 'concrete', 'class', 'instantiate', 'representation', 'create', 'builder1', 'class', 'implement', 'builder', 'interface', 'create', 'assemble', 'producta1', 'productb1', 'object', 'uml', 'sequence', 'diagram', 'show', 'run', 'time', 'interaction', 'director', 'object', 'call', 'buildparta', 'builder1', 'object', 'create', 'assemble', 'producta1', 'object', 'director', 'call', 'buildpartb', 'builder1', 'create', 'assemble', 'productb1', 'object']"
342,"The Director assembles a bicycle instance in the example above, delegating the construction to a separate builder object that has been given to the Director by the Client.","['director', 'assemble', 'bicycle', 'instance', 'example', 'delegate', 'construction', 'separate', 'builder', 'object', 'give', 'director', 'client']"
343,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
344,"In object-oriented programming, inheritance is the mechanism of basing an object or class upon another object prototype-based inheritance or class class-based inheritance, retaining similar implementation. Also defined as deriving new classes sub classes from existing ones such as super class or base class and then forming them into a hierarchy of classes. In most class-based object-oriented languages, an object created through inheritance, a ""child object"", acquires all the properties and behaviors of the ""parent object"" , with the exception of: constructors, destructor, overloaded operators and friend functions of the base class. Inheritance allows programmers to create classes that are built upon existing classes,1 to specify a new implementation while maintaining the same behaviors realizing an interface, to reuse code and to independently extend original software via public classes and interfaces. The relationships of objects or classes through inheritance give rise to a directed acyclic graph.","['object', 'orient', 'programming', 'inheritance', 'mechanism', 'base', 'object', 'class', 'object', 'prototype', 'base', 'inheritance', 'class', 'class', 'base', 'inheritance', 'retain', 'similar', 'implementation', 'define', 'derive', 'new', 'class', 'sub', 'class', 'exist', 'one', 'super', 'class', 'base', 'class', 'form', 'hierarchy', 'class', 'class', 'base', 'object', 'orient', 'language', 'object', 'create', 'inheritance', 'child', 'object', 'acquire', 'property', 'behavior', 'parent', 'object', 'exception', 'constructor', 'destructor', 'overloaded', 'operator', 'friend', 'function', 'base', 'class', 'inheritance', 'allow', 'programmer', 'create', 'class', 'build', 'exist', 'classes', 'specify', 'new', 'implementation', 'maintain', 'behavior', 'realize', 'interface', 'reuse', 'code', 'independently', 'extend', 'original', 'software', 'public', 'class', 'interface', 'relationship', 'object', 'class', 'inheritance', 'rise', 'direct', 'acyclic', 'graph']"
345,"An inherited class is called a subclass of its parent class or super class. The term ""inheritance"" is loosely used for both class-based and prototype-based programming, but in narrow use the term is reserved for class-based programming one class inherits from another, with the corresponding technique in prototype-based programming being instead called delegation one object delegates to another. Class-modifying inheritance patterns can be pre-defined according to simple network interface parameters such that inter-language compatibility is preserved.23","['inherit', 'class', 'call', 'subclass', 'parent', 'class', 'super', 'class', 'term', 'inheritance', 'loosely', 'class', 'base', 'prototype', 'base', 'programming', 'narrow', 'use', 'term', 'reserve', 'class', 'base', 'programming', 'class', 'inherit', 'corresponding', 'technique', 'prototype', 'base', 'programming', 'instead', 'call', 'delegation', 'object', 'delegate', 'class', 'modifying', 'inheritance', 'pattern', 'pre', 'define', 'accord', 'simple', 'network', 'interface', 'parameter', 'inter', 'language', 'compatibility', 'preserved']"
346,"Inheritance should not be confused with subtyping.45 In some languages inheritance and subtyping agree,a whereas in others they differ; in general, subtyping establishes an is-a relationship, whereas inheritance only reuses implementation and establishes a syntactic relationship, not necessarily a semantic relationship inheritance does not ensure behavioral subtyping. To distinguish these concepts, subtyping is sometimes referred to as interface inheritance without acknowledging that the specialization of type variables also induces a subtyping relation, whereas inheritance as defined here is known as implementation inheritance or code inheritance.6 Still, inheritance is a commonly used mechanism for establishing subtype relationships.7","['inheritance', 'confuse', 'subtyping', 'language', 'inheritance', 'subtype', 'agree', 'differ', 'general', 'subtype', 'establishe', 'relationship', 'inheritance', 'reuse', 'implementation', 'establish', 'syntactic', 'relationship', 'necessarily', 'semantic', 'relationship', 'inheritance', 'ensure', 'behavioral', 'subtyping', 'distinguish', 'concept', 'subtype', 'refer', 'interface', 'inheritance', 'acknowledge', 'specialization', 'type', 'variable', 'induce', 'subtype', 'relation', 'inheritance', 'define', 'know', 'implementation', 'inheritance', 'code', 'inheritance', 'inheritance', 'commonly', 'mechanism', 'establish', 'subtype', 'relationships']"
347,"Inheritance is contrasted with object composition, where one object contains another object or objects of one class contain objects of another class; see composition over inheritance. Composition implements a has-a relationship, in contrast to the is-a relationship of subtyping.","['inheritance', 'contrast', 'object', 'composition', 'object', 'contain', 'object', 'object', 'class', 'contain', 'object', 'class', 'composition', 'inheritance', 'composition', 'implement', 'relationship', 'contrast', 'relationship', 'subtype']"
348,"In 1966, Tony Hoare presented some remarks on records, and in particular presented the idea of record subclasses, record types with common properties but discriminated by a variant tag and having fields private to the variant.8 Influenced by this, in 1967 Ole-Johan Dahl and Kristen Nygaard presented a design that allowed specifying objects that belonged to different classes but had common properties. The common properties were collected in a superclass, and each superclass could itself potentially have a superclass. The values of a subclass were thus compound objects, consisting of some number of prefix parts belonging to various superclasses, plus a main part belonging to the subclass. These parts were all concatenated together.9 The attributes of a compound object would be accessible by dot notation. This idea was first adopted in the Simula 67 programming language.10 The idea then spread to Smalltalk, C++, Java, Python, and many other languages.","['1966', 'tony', 'hoare', 'present', 'remark', 'record', 'particular', 'present', 'idea', 'record', 'subclass', 'record', 'type', 'common', 'property', 'discriminate', 'variant', 'tag', 'have', 'field', 'private', 'variant', 'influence', '1967', 'ole', 'johan', 'dahl', 'kristen', 'nygaard', 'present', 'design', 'allow', 'specify', 'object', 'belong', 'different', 'class', 'common', 'property', 'common', 'property', 'collect', 'superclass', 'superclass', 'potentially', 'superclass', 'value', 'subclass', 'compound', 'object', 'consist', 'number', 'prefix', 'part', 'belong', 'superclass', 'plus', 'main', 'belong', 'subclass', 'part', 'concatenate', 'together', 'attribute', 'compound', 'object', 'accessible', 'dot', 'notation', 'idea', 'adopt', 'simula', 'programming', 'language', 'idea', 'spread', 'smalltalk', 'c++', 'java', 'python', 'language']"
349,"There are various types of inheritance, based on paradigm and specific language.11","['type', 'inheritance', 'base', 'paradigm', 'specific', 'language']"
350,"""Multiple inheritance ... was widely supposed to be very difficult to implement efficiently. For example, in a summary of C++ in his book on Objective C, Brad Cox actually claimed that adding multiple inheritance to C++ was impossible. Thus, multiple inheritance seemed more of a challenge. Since I had considered multiple inheritance as early as 1982 and found a simple and efficient implementation technique in 1984, I couldn't resist the challenge. I suspect this to be the only case in which fashion affected the sequence of events.""12","['multiple', 'inheritance', 'widely', 'suppose', 'difficult', 'implement', 'efficiently', 'example', 'summary', 'c++', 'book', 'objective', 'brad', 'cox', 'actually', 'claim', 'add', 'multiple', 'inheritance', 'c++', 'impossible', 'multiple', 'inheritance', 'challenge', 'consider', 'multiple', 'inheritance', 'early', '1982', 'find', 'simple', 'efficient', 'implementation', 'technique', '1984', 'resist', 'challenge', 'suspect', 'case', 'fashion', 'affect', 'sequence', 'event', '12']"
351,"Subclasses, derived classes, heir classes, or child classes are modular derivative classes that inherits one or more language entities from one or more other classes called superclass, base classes, or parent classes. The semantics of class inheritance vary from language to language, but commonly the subclass automatically inherits the instance variables and member functions of its superclasses.","['subclass', 'derive', 'class', 'heir', 'class', 'child', 'class', 'modular', 'derivative', 'class', 'inherit', 'language', 'entity', 'class', 'call', 'superclass', 'base', 'class', 'parent', 'class', 'semantic', 'class', 'inheritance', 'vary', 'language', 'language', 'commonly', 'subclass', 'automatically', 'inherit', 'instance', 'variable', 'member', 'function', 'superclass']"
352,The general form of defining a derived class is:13,"['general', 'form', 'define', 'derive', 'class', 'is']"
353,"Some languages support also the inheritance of other constructs. For example, in Eiffel, contracts that define the specification of a class are also inherited by heirs. The superclass establishes a common interface and foundational functionality, which specialized subclasses can inherit, modify, and supplement. The software inherited by a subclass is considered reused in the subclass. A reference to an instance of a class may actually be referring to one of its subclasses. The actual class of the object being referenced is impossible to predict at compile-time. A uniform interface is used to invoke the member functions of objects of a number of different classes. Subclasses may replace superclass functions with entirely new functions that must share the same method signature.","['language', 'support', 'inheritance', 'construct', 'example', 'eiffel', 'contract', 'define', 'specification', 'class', 'inherit', 'heir', 'superclass', 'establish', 'common', 'interface', 'foundational', 'functionality', 'specialized', 'subclass', 'inherit', 'modify', 'supplement', 'software', 'inherit', 'subclass', 'consider', 'reuse', 'subclass', 'reference', 'instance', 'class', 'actually', 'refer', 'subclass', 'actual', 'class', 'object', 'reference', 'impossible', 'predict', 'compile', 'time', 'uniform', 'interface', 'invoke', 'member', 'function', 'object', 'number', 'different', 'class', 'subclass', 'replace', 'superclass', 'function', 'entirely', 'new', 'function', 'share', 'method', 'signature']"
354,"In some languages a class may be declared as non-subclassable by adding certain class modifiers to the class declaration. Examples include the final keyword in Java and C++11 onwards or the sealed keyword in C#. Such modifiers are added to the class declaration before the class keyword and the class identifier declaration. Such non-subclassable classes restrict reusability, particularly when developers only have access to precompiled binaries and not source code.","['language', 'class', 'declare', 'non', 'subclassable', 'add', 'certain', 'class', 'modifier', 'class', 'declaration', 'example', 'include', 'final', 'keyword', 'java', 'c++11', 'onwards', 'seal', 'keyword', 'modifier', 'add', 'class', 'declaration', 'class', 'keyword', 'class', 'identifi', 'declaration', 'non', 'subclassable', 'class', 'restrict', 'reusability', 'particularly', 'developer', 'access', 'precompile', 'binary', 'source', 'code']"
355,"A non-subclassable class has no subclasses, so it can be easily deduced at compile time that references or pointers to objects of that class are actually referencing instances of that class and not instances of subclasses they don't exist or instances of superclasses upcasting a reference type violates the type system. Because the exact type of the object being referenced is known before execution, early binding also called static dispatch can be used instead of late binding also called dynamic dispatch, which requires one or more virtual method table lookups depending on whether multiple inheritance or only single inheritance are supported in the programming language that is being used.","['non', 'subclassable', 'class', 'subclass', 'easily', 'deduce', 'compile', 'time', 'reference', 'pointer', 'object', 'class', 'actually', 'reference', 'instance', 'class', 'instance', 'subclass', 'exist', 'instance', 'superclass', 'upcaste', 'reference', 'type', 'violate', 'type', 'system', 'exact', 'type', 'object', 'reference', 'know', 'execution', 'early', 'bind', 'call', 'static', 'dispatch', 'instead', 'late', 'binding', 'call', 'dynamic', 'dispatch', 'require', 'virtual', 'method', 'table', 'lookup', 'depend', 'multiple', 'inheritance', 'single', 'inheritance', 'support', 'programming', 'language']"
356,"Just as classes may be non-subclassable, method declarations may contain method modifiers that prevent the method from being overridden i.e. replaced with a new function with the same name and type signature in a subclass. A private method is un-overridable simply because it is not accessible by classes other than the class it is a member function of this is not true for C++, though. A final method in Java, a sealed method in C# or a frozen feature in Eiffel cannot be overridden.","['class', 'non', 'subclassable', 'method', 'declaration', 'contain', 'method', 'modifier', 'prevent', 'method', 'overridden', 'i.e.', 'replace', 'new', 'function', 'type', 'signature', 'subclass', 'private', 'method', 'overridable', 'simply', 'accessible', 'class', 'class', 'member', 'function', 'true', 'c++', 'final', 'method', 'java', 'seal', 'method', 'frozen', 'feature', 'eiffel', 'overridden']"
357,"If the superclass method is a virtual method, then invocations of the superclass method will be dynamically dispatched. Some languages require that methods be specifically declared as virtual e.g. C++, and in others, all methods are virtual e.g. Java. An invocation of a non-virtual method will always be statically dispatched i.e. the address of the function call is determined at compile-time. Static dispatch is faster than dynamic dispatch and allows optimizations such as inline expansion.","['superclass', 'method', 'virtual', 'method', 'invocation', 'superclass', 'method', 'dynamically', 'dispatch', 'language', 'require', 'method', 'specifically', 'declare', 'virtual', 'e.g.', 'c++', 'method', 'virtual', 'e.g.', 'java', 'invocation', 'non', 'virtual', 'method', 'statically', 'dispatch', 'i.e.', 'address', 'function', 'determine', 'compile', 'time', 'static', 'dispatch', 'fast', 'dynamic', 'dispatch', 'allow', 'optimization', 'inline', 'expansion']"
358,"The following table shows which variables and functions get inherited dependent on the visibility given when deriving the class, using the terminology established by C++.14","['following', 'table', 'show', 'variable', 'function', 'inherit', 'dependent', 'visibility', 'give', 'derive', 'class', 'terminology', 'establish', 'c++']"
359,Inheritance is used to co-relate two or more classes to each other.,"['inheritance', 'relate', 'class']"
360,"Many object-oriented programming languages permit a class or object to replace the implementation of an aspect—typically a behavior—that it has inherited. This process is called overriding. Overriding introduces a complication: which version of the behavior does an instance of the inherited class use—the one that is part of its own class, or the one from the parent base class? The answer varies between programming languages, and some languages provide the ability to indicate that a particular behavior is not to be overridden and should behave as defined by the base class. For instance, in C#, the base method or property can only be overridden in a subclass if it is marked with the virtual, abstract, or override modifier, while in programming languages such as Java, different methods can be called to override other methods.15 An alternative to overriding is hiding the inherited code.","['object', 'orient', 'programming', 'language', 'permit', 'class', 'object', 'replace', 'implementation', 'aspect', 'typically', 'behavior', 'inherit', 'process', 'call', 'overriding', 'override', 'introduce', 'complication', 'version', 'behavior', 'instance', 'inherit', 'class', 'use', 'class', 'parent', 'base', 'class', 'answer', 'vary', 'programming', 'language', 'language', 'provide', 'ability', 'indicate', 'particular', 'behavior', 'overridden', 'behave', 'define', 'base', 'class', 'instance', 'base', 'method', 'property', 'overridden', 'subclass', 'mark', 'virtual', 'abstract', 'override', 'modifier', 'programming', 'language', 'java', 'different', 'method', 'call', 'override', 'methods', 'alternative', 'override', 'hide', 'inherit', 'code']"
361,"Implementation inheritance is the mechanism whereby a subclass re-uses code in a base class. By default the subclass retains all of the operations of the base class, but the subclass may override some or all operations, replacing the base-class implementation with its own.","['implementation', 'inheritance', 'mechanism', 'subclass', 'use', 'code', 'base', 'class', 'default', 'subclass', 'retain', 'operation', 'base', 'class', 'subclass', 'override', 'operation', 'replace', 'base', 'class', 'implementation']"
362,"In the following Python example, subclasses .mw-parser-output .monospacedfont-family:monospace,monospaceSquareSumComputer and CubeSumComputer override the transform method of the base class SumComputer. The base class comprises operations to compute the sum of the squares between two integers. The subclass re-uses all of the functionality of the base class with the exception of the operation that transforms a number into its square, replacing it with an operation that transforms a number into its square and cube respectively. The subclasses therefore compute the sum of the squares/cubes between two integers.","['follow', 'python', 'example', 'subclasse', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacesquaresumcomputer', 'cubesumcomputer', 'override', 'transform', 'method', 'base', 'class', 'sumcomputer', 'base', 'class', 'comprise', 'operation', 'compute', 'sum', 'square', 'integer', 'subclass', 'use', 'functionality', 'base', 'class', 'exception', 'operation', 'transform', 'number', 'square', 'replace', 'operation', 'transform', 'number', 'square', 'cube', 'respectively', 'subclass', 'compute', 'sum', 'square', 'cube', 'integer']"
363,Below is an example of Python.,"['example', 'python']"
364,"In most quarters, class inheritance for the sole purpose of code reuse has fallen out of favor.citation needed The primary concern is that implementation inheritance does not provide any assurance of polymorphic substitutability—an instance of the reusing class cannot necessarily be substituted for an instance of the inherited class. An alternative technique, explicit delegation, requires more programming effort, but avoids the substitutability issue.citation needed In C++ private inheritance can be used as a form of implementation inheritance without substitutability. Whereas public inheritance represents an ""is-a"" relationship and delegation represents a ""has-a"" relationship, private and protected inheritance can be thought of as an ""is implemented in terms of"" relationship.16","['quarter', 'class', 'inheritance', 'sole', 'purpose', 'code', 'reuse', 'fall', 'favor.citation', 'need', 'primary', 'concern', 'implementation', 'inheritance', 'provide', 'assurance', 'polymorphic', 'substitutability', 'instance', 'reuse', 'class', 'necessarily', 'substitute', 'instance', 'inherit', 'class', 'alternative', 'technique', 'explicit', 'delegation', 'require', 'programming', 'effort', 'avoid', 'substitutability', 'issue.citation', 'need', 'c++', 'private', 'inheritance', 'form', 'implementation', 'inheritance', 'substitutability', 'public', 'inheritance', 'represent', 'relationship', 'delegation', 'represent', 'relationship', 'private', 'protect', 'inheritance', 'think', 'implement', 'term', 'relationship']"
365,"Another frequent use of inheritance is to guarantee that classes maintain a certain common interface; that is, they implement the same methods. The parent class can be a combination of implemented operations and operations that are to be implemented in the child classes. Often, there is no interface change between the supertype and subtype- the child implements the behavior described instead of its parent class.17","['frequent', 'use', 'inheritance', 'guarantee', 'class', 'maintain', 'certain', 'common', 'interface', 'implement', 'method', 'parent', 'class', 'combination', 'implement', 'operation', 'operation', 'implement', 'child', 'class', 'interface', 'change', 'supertype', 'subtype-', 'child', 'implement', 'behavior', 'describe', 'instead', 'parent', 'class']"
366,"Inheritance is similar to but distinct from subtyping.4 Subtyping enables a given type to be substituted for another type or abstraction, and is said to establish an is-a relationship between the subtype and some existing abstraction, either implicitly or explicitly, depending on language support. The relationship can be expressed explicitly via inheritance in languages that support inheritance as a subtyping mechanism. For example, the following C++ code establishes an explicit inheritance relationship between classes B and A, where B is both a subclass and a subtype of A, and can be used as an A wherever a B is specified via a reference, a pointer or the object itself.","['inheritance', 'similar', 'distinct', 'subtyping', 'subtype', 'enable', 'give', 'type', 'substitute', 'type', 'abstraction', 'say', 'establish', 'relationship', 'subtype', 'exist', 'abstraction', 'implicitly', 'explicitly', 'depend', 'language', 'support', 'relationship', 'express', 'explicitly', 'inheritance', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'example', 'following', 'c++', 'code', 'establish', 'explicit', 'inheritance', 'relationship', 'class', 'subclass', 'subtype', 'specify', 'reference', 'pointer', 'object']"
367,"In programming languages that do not support inheritance as a subtyping mechanism, the relationship between a base class and a derived class is only a relationship between implementations a mechanism for code reuse, as compared to a relationship between types. Inheritance, even in programming languages that support inheritance as a subtyping mechanism, does not necessarily entail behavioral subtyping. It is entirely possible to derive a class whose object will behave incorrectly when used in a context where the parent class is expected; see the Liskov substitution principle. 18 Compare connotation/denotation. In some OOP languages, the notions of code reuse and subtyping coincide because the only way to declare a subtype is to define a new class that inherits the implementation of another.","['programming', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'relationship', 'base', 'class', 'derive', 'class', 'relationship', 'implementation', 'mechanism', 'code', 'reuse', 'compare', 'relationship', 'type', 'inheritance', 'programming', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'necessarily', 'entail', 'behavioral', 'subtyping', 'entirely', 'possible', 'derive', 'class', 'object', 'behave', 'incorrectly', 'context', 'parent', 'class', 'expect', 'liskov', 'substitution', 'principle', 'compare', 'connotation', 'denotation', 'oop', 'language', 'notion', 'code', 'reuse', 'subtype', 'coincide', 'way', 'declare', 'subtype', 'define', 'new', 'class', 'inherit', 'implementation']"
368,Using inheritance extensively in designing a program imposes certain constraints.,"['inheritance', 'extensively', 'design', 'program', 'impose', 'certain', 'constraint']"
369,"For example, consider a class Person that contains a person's name, date of birth, address and phone number. We can define a subclass of Person called Student that contains the person's grade point average and classes taken, and another subclass of Person called Employee that contains the person's job-title, employer, and salary.","['example', 'consider', 'class', 'person', 'contain', 'person', 'date', 'birth', 'address', 'phone', 'number', 'define', 'subclass', 'person', 'call', 'student', 'contain', 'person', 'grade', 'point', 'average', 'class', 'take', 'subclass', 'person', 'call', 'employee', 'contain', 'person', 'job', 'title', 'employer', 'salary']"
370,"In defining this inheritance hierarchy we have already defined certain restrictions, not all of which are desirable:","['define', 'inheritance', 'hierarchy', 'define', 'certain', 'restriction', 'desirable']"
371,"The composite reuse principle is an alternative to inheritance. This technique supports polymorphism and code reuse by separating behaviors from the primary class hierarchy and including specific behavior classes as required in any business domain class. This approach avoids the static nature of a class hierarchy by allowing behavior modifications at run time and allows one class to implement behaviors buffet-style, instead of being restricted to the behaviors of its ancestor classes.","['composite', 'reuse', 'principle', 'alternative', 'inheritance', 'technique', 'support', 'polymorphism', 'code', 'reuse', 'separate', 'behavior', 'primary', 'class', 'hierarchy', 'include', 'specific', 'behavior', 'class', 'require', 'business', 'domain', 'class', 'approach', 'avoid', 'static', 'nature', 'class', 'hierarchy', 'allow', 'behavior', 'modification', 'run', 'time', 'allow', 'class', 'implement', 'behavior', 'buffet', 'style', 'instead', 'restrict', 'behavior', 'ancestor', 'class']"
372,"Implementation inheritance is controversial among programmers and theoreticians of object-oriented programming since at least the 1990s. Among them are the authors of Design Patterns, who advocate interface inheritance instead, and favor composition over inheritance. For example, the decorator pattern as mentioned above has been proposed to overcome the static nature of inheritance between classes. As a more fundamental solution to the same problem, role-oriented programming introduces a distinct relationship, played-by, combining properties of inheritance and composition into a new concept.citation needed","['implementation', 'inheritance', 'controversial', 'programmer', 'theoretician', 'object', 'orient', 'programming', '1990s', 'author', 'design', 'patterns', 'advocate', 'interface', 'inheritance', 'instead', 'favor', 'composition', 'inheritance', 'example', 'decorator', 'pattern', 'mention', 'propose', 'overcome', 'static', 'nature', 'inheritance', 'class', 'fundamental', 'solution', 'problem', 'role', 'orient', 'programming', 'introduce', 'distinct', 'relationship', 'play', 'combine', 'property', 'inheritance', 'composition', 'new', 'concept.citation', 'need']"
373,"According to Allen Holub, the main problem with implementation inheritance is that it introduces unnecessary coupling in the form of the ""fragile base class problem"":6 modifications to the base class implementation can cause inadvertent behavioral changes in subclasses. Using interfaces avoids this problem because no implementation is shared, only the API.19 Another way of stating this is that ""inheritance breaks encapsulation"".20 The problem surfaces clearly in open object-oriented systems such as frameworks, where client code is expected to inherit from system-supplied classes and then substituted for the system's classes in its algorithms.6","['accord', 'allen', 'holub', 'main', 'problem', 'implementation', 'inheritance', 'introduce', 'unnecessary', 'coupling', 'form', 'fragile', 'base', 'class', 'problem', 'modification', 'base', 'class', 'implementation', 'cause', 'inadvertent', 'behavioral', 'change', 'subclass', 'interface', 'avoid', 'problem', 'implementation', 'share', 'api', 'way', 'state', 'inheritance', 'break', 'encapsulation', 'problem', 'surface', 'clearly', 'open', 'object', 'orient', 'system', 'framework', 'client', 'code', 'expect', 'inherit', 'system', 'supply', 'class', 'substitute', 'system', 'class', 'algorithms']"
374,"Reportedly, Java inventor James Gosling has spoken against implementation inheritance, stating that he would not include it if he were to redesign Java.19 Language designs that decouple inheritance from subtyping interface inheritance appeared as early as 1990;21 a modern example of this is the Go programming language.","['reportedly', 'java', 'inventor', 'james', 'gosling', 'speak', 'implementation', 'inheritance', 'state', 'include', 'redesign', 'java', 'language', 'design', 'decouple', 'inheritance', 'subtype', 'interface', 'inheritance', 'appear', 'early', '1990', 'modern', 'example', 'programming', 'language']"
375,"Complex inheritance, or inheritance used within an insufficiently mature design, may lead to the yo-yo problem. When inheritance was used as a primary approach to structure programs in the late 1990s, developers tended to break code into more layers of inheritance as the system functionality grew. If a development team combined multiple layers of inheritance with the single responsibility principle, this resulted in many very thin layers of code, with many layers consisting of only 1 or 2 lines of actual code.citation needed Too many layers make debugging a significant challenge, as it becomes hard to determine which layer needs to be debugged.","['complex', 'inheritance', 'inheritance', 'insufficiently', 'mature', 'design', 'lead', 'problem', 'inheritance', 'primary', 'approach', 'structure', 'program', 'late', '1990', 'developer', 'tend', 'break', 'code', 'layer', 'inheritance', 'system', 'functionality', 'grow', 'development', 'team', 'combine', 'multiple', 'layer', 'inheritance', 'single', 'responsibility', 'principle', 'result', 'thin', 'layer', 'code', 'layer', 'consist', 'line', 'actual', 'code.citation', 'need', 'layer', 'debug', 'significant', 'challenge', 'hard', 'determine', 'layer', 'need', 'debug']"
376,"Another issue with inheritance is that subclasses must be defined in code, which means that program users cannot add new subclasses at runtime. Other design patterns such as Entity–component–system allow program users to define variations of an entity at runtime.","['issue', 'inheritance', 'subclass', 'define', 'code', 'mean', 'program', 'user', 'add', 'new', 'subclass', 'runtime', 'design', 'pattern', 'entity', 'component', 'system', 'allow', 'program', 'user', 'define', 'variation', 'entity', 'runtime']"
377,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
378,"In computer science, type conversion,12 type casting,13 type coercion,3 and type juggling45 are different ways of changing an expression from one data type to another. An example would be the conversion of an integer value into a floating point value or its textual representation as a string, and vice versa. Type conversions can take advantage of certain features of type hierarchies or data representations. Two important aspects of a type conversion are whether it happens implicitly automatically or explicitly,16 and whether the underlying data representation is converted from one representation into another, or a given representation is merely reinterpreted as the representation of another data type.67 In general, both primitive and compound data types can be converted.","['computer', 'science', 'type', 'conversion', 'type', 'casting', 'type', 'coercion', 'type', 'juggling45', 'different', 'way', 'change', 'expression', 'datum', 'type', 'example', 'conversion', 'integer', 'value', 'float', 'point', 'value', 'textual', 'representation', 'string', 'vice', 'versa', 'type', 'conversion', 'advantage', 'certain', 'feature', 'type', 'hierarchy', 'datum', 'representation', 'important', 'aspect', 'type', 'conversion', 'happen', 'implicitly', 'automatically', 'explicitly', 'underlie', 'datum', 'representation', 'convert', 'representation', 'give', 'representation', 'merely', 'reinterpret', 'representation', 'datum', 'type', 'general', 'primitive', 'compound', 'datum', 'type', 'convert']"
379,"Each programming language has its own rules on how types can be converted. Languages with strong typing typically do little implicit conversion and discourage the reinterpretation of representations, while languages with weak typing perform many implicit conversions between data types. Weak typing language often allow forcing the compiler to arbitrarily interpret a data item as having different representations—this can be a non-obvious programming error, or a technical method to directly deal with underlying hardware.","['programming', 'language', 'rule', 'type', 'convert', 'language', 'strong', 'typing', 'typically', 'little', 'implicit', 'conversion', 'discourage', 'reinterpretation', 'representation', 'language', 'weak', 'typing', 'perform', 'implicit', 'conversion', 'datum', 'type', 'weak', 'typing', 'language', 'allow', 'force', 'compiler', 'arbitrarily', 'interpret', 'data', 'item', 'have', 'different', 'representation', 'non', 'obvious', 'programming', 'error', 'technical', 'method', 'directly', 'deal', 'underlie', 'hardware']"
380,"In most languages, the word coercion is used to denote an implicit conversion, either during compilation or during run time. For example, in an expression mixing integer and floating point numbers like 5 + 0.1, the compiler will automatically convert integer representation into floating point representation so fractions are not lost. Explicit type conversions are either indicated by writing additional code e.g. adding type identifiers or calling built-in routines or by coding conversion routines for the compiler to use when it otherwise would halt with a type mismatch.","['language', 'word', 'coercion', 'denote', 'implicit', 'conversion', 'compilation', 'run', 'time', 'example', 'expression', 'mix', 'integer', 'float', 'point', 'number', 'like', '0', 'compiler', 'automatically', 'convert', 'integer', 'representation', 'float', 'point', 'representation', 'fraction', 'lose', 'explicit', 'type', 'conversion', 'indicate', 'write', 'additional', 'code', 'e.g.', 'add', 'type', 'identifier', 'call', 'build', 'routine', 'code', 'conversion', 'routine', 'compiler', 'use', 'halt', 'type', 'mismatch']"
381,"In most ALGOL-like languages, such as Pascal, Modula-2, Ada and Delphi, conversion and casting are distinctly different concepts. In these languages, conversion refers to either implicitly or explicitly changing a value from one data type storage format to another, e.g. a 16-bit integer to a 32-bit integer. The storage needs may change as a result of the conversion, including a possible loss of precision or truncation. The word cast, on the other hand, refers to explicitly changing the interpretation of the bit pattern representing a value from one type to another. For example, 32 contiguous bits may be treated as an array of 32 booleans, a 4-byte string, an unsigned 32-bit integer or an IEEE single precision floating point value. Because the stored bits are never changed, the programmer must know low level details such as representation format, byte order, and alignment needs, to meaningfully cast.","['algol', 'like', 'language', 'pascal', 'modula-2', 'ada', 'delphi', 'conversion', 'casting', 'distinctly', 'different', 'concept', 'language', 'conversion', 'refer', 'implicitly', 'explicitly', 'change', 'value', 'data', 'type', 'storage', 'format', 'e.g.', 'bit', 'integer', 'bit', 'integer', 'storage', 'need', 'change', 'result', 'conversion', 'include', 'possible', 'loss', 'precision', 'truncation', 'word', 'cast', 'hand', 'refer', 'explicitly', 'change', 'interpretation', 'bit', 'pattern', 'represent', 'value', 'type', 'example', 'contiguous', 'bit', 'treat', 'array', 'boolean', 'byte', 'string', 'unsigned', 'bit', 'integer', 'ieee', 'single', 'precision', 'float', 'point', 'value', 'store', 'bit', 'change', 'programmer', 'know', 'low', 'level', 'detail', 'representation', 'format', 'byte', 'order', 'alignment', 'need', 'meaningfully', 'cast']"
382,"In the C family of languages and ALGOL 68, the word cast typically refers to an explicit type conversion as opposed to an implicit conversion, causing some ambiguity about whether this is a re-interpretation of a bit-pattern or a real data representation conversion. More important is the multitude of ways and rules that apply to what data type or class is located by a pointer and how a pointer may be adjusted by the compiler in cases like object class inheritance.","['family', 'language', 'algol', 'word', 'cast', 'typically', 'refer', 'explicit', 'type', 'conversion', 'oppose', 'implicit', 'conversion', 'cause', 'ambiguity', 'interpretation', 'bit', 'pattern', 'real', 'data', 'representation', 'conversion', 'important', 'multitude', 'way', 'rule', 'apply', 'data', 'type', 'class', 'locate', 'pointer', 'pointer', 'adjust', 'compiler', 'case', 'like', 'object', 'class', 'inheritance']"
383,"Implicit type conversion, also known as coercion or type juggling, is an automatic type conversion by the compiler. Some programming languages allow compilers to provide coercion; others require it.","['implicit', 'type', 'conversion', 'know', 'coercion', 'type', 'juggling', 'automatic', 'type', 'conversion', 'compiler', 'programming', 'language', 'allow', 'compiler', 'provide', 'coercion', 'require']"
384,"In a mixed-type expression, data of one or more subtypes can be converted to a supertype as needed at runtime so that the program will run correctly. For example, the following is legal C language code:","['mixed', 'type', 'expression', 'datum', 'subtype', 'convert', 'supertype', 'need', 'runtime', 'program', 'run', 'correctly', 'example', 'following', 'legal', 'language', 'code']"
385,"Although .mw-parser-output .monospacedfont-family:monospace,monospaced, l, and i belong to different data types, they will be automatically converted to equal data types each time a comparison or assignment is executed. This behavior should be used with caution, as unintended consequences can arise. Data can be lost when converting representations from floating-point to integer, as the fractional components of the floating-point values will be truncated rounded toward zero. Conversely, precision can be lost when converting representations from integer to floating-point, since a floating-point type may be unable to exactly represent all possible values of some integer type. For example, float might be an IEEE 754 single precision type, which cannot represent the integer 16777217 exactly, while a 32-bit integer type can. This can lead to unintuitive behavior, as demonstrated by the following code:","['.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospace', 'belong', 'different', 'datum', 'type', 'automatically', 'convert', 'equal', 'data', 'type', 'time', 'comparison', 'assignment', 'execute', 'behavior', 'caution', 'unintended', 'consequence', 'arise', 'datum', 'lose', 'convert', 'representation', 'float', 'point', 'integer', 'fractional', 'component', 'float', 'point', 'value', 'truncate', 'round', 'zero', 'conversely', 'precision', 'lose', 'convert', 'representation', 'integer', 'float', 'point', 'float', 'point', 'type', 'unable', 'exactly', 'represent', 'possible', 'value', 'integer', 'type', 'example', 'float', 'ieee', '754', 'single', 'precision', 'type', 'represent', 'integer', '16777217', 'exactly', 'bit', 'integer', 'type', 'lead', 'unintuitive', 'behavior', 'demonstrate', 'follow', 'code']"
386,"On compilers that implement floats as IEEE single precision, and ints as at least 32 bits, this code will give this peculiar print-out:","['compiler', 'implement', 'float', 'ieee', 'single', 'precision', 'int', 'bit', 'code', 'peculiar', 'print']"
387,"Note that 1 represents equality in the last line above. This odd behavior is caused by an implicit conversion of i_value to float when it is compared with f_value. The conversion causes loss of precision, which makes the values equal before the comparison.","['note', 'represent', 'equality', 'line', 'odd', 'behavior', 'cause', 'implicit', 'conversion', 'i_value', 'float', 'compare', 'f_value', 'conversion', 'cause', 'loss', 'precision', 'make', 'value', 'equal', 'comparison']"
388,"One special case of implicit type conversion is type promotion, where an object is automatically converted into another data type representing a superset of the original type. Promotions are commonly used with types smaller than the native type of the target platform's arithmetic logic unit ALU, before arithmetic and logical operations, to make such operations possible, or more efficient if the ALU can work with more than one type. C and C++ perform such promotion for objects of boolean, character, wide character, enumeration, and short integer types which are promoted to int, and for objects of type float, which are promoted to double. Unlike some other type conversions, promotions never lose precision or modify the value stored in the object.","['special', 'case', 'implicit', 'type', 'conversion', 'type', 'promotion', 'object', 'automatically', 'convert', 'data', 'type', 'represent', 'superset', 'original', 'type', 'promotion', 'commonly', 'type', 'small', 'native', 'type', 'target', 'platform', 'arithmetic', 'logic', 'unit', 'alu', 'arithmetic', 'logical', 'operation', 'operation', 'possible', 'efficient', 'alu', 'work', 'type', 'c++', 'perform', 'promotion', 'object', 'boolean', 'character', 'wide', 'character', 'enumeration', 'short', 'integer', 'type', 'promote', 'int', 'object', 'type', 'float', 'promote', 'double', 'unlike', 'type', 'conversion', 'promotion', 'lose', 'precision', 'modify', 'value', 'store', 'object']"
389,"Explicit type conversion, also called type casting, is a type conversion which is explicitly defined within a program instead of being done automatically according to the rules of the language for implicit type conversion. It is requested by the user in the program.","['explicit', 'type', 'conversion', 'call', 'type', 'casting', 'type', 'conversion', 'explicitly', 'define', 'program', 'instead', 'automatically', 'accord', 'rule', 'language', 'implicit', 'type', 'conversion', 'request', 'user', 'program']"
390,There are several kinds of explicit conversion.,"['kind', 'explicit', 'conversion']"
391,"In object-oriented programming languages, objects can also be downcast : a reference of a base class is cast to one of its derived classes.","['object', 'orient', 'programming', 'language', 'object', 'downcast', 'reference', 'base', 'class', 'cast', 'derive', 'class']"
392,"In C#, type conversion can be made in a safe or unsafe i.e., C-like manner, the former called checked type cast.8","['type', 'conversion', 'safe', 'unsafe', 'i.e.', 'like', 'manner', 'call', 'check', 'type', 'cast']"
393,In C++ a similar effect can be achieved using C++-style cast syntax.,"['c++', 'similar', 'effect', 'achieve', 'c++-style', 'cast', 'syntax']"
394,"In Eiffel the notion of type conversion is integrated into the rules of the type system. The Assignment Rule says that an assignment, such as:","['eiffel', 'notion', 'type', 'conversion', 'integrate', 'rule', 'type', 'system', 'assignment', 'rule', 'say', 'assignment']"
395,"is valid if and only if the type of its source expression, y in this case, is compatible with the type of its target entity, x in this case. In this rule, compatible with means that the type of the source expression either conforms to or converts to that of the target. Conformance of types is defined by the familiar rules for polymorphism in object-oriented programming. For example, in the assignment above, the type of y conforms to the type of x if the class upon which y is based is a descendant of that upon which x is based.","['valid', 'type', 'source', 'expression', 'case', 'compatible', 'type', 'target', 'entity', 'case', 'rule', 'compatible', 'mean', 'type', 'source', 'expression', 'conform', 'convert', 'target', 'conformance', 'type', 'define', 'familiar', 'rule', 'polymorphism', 'object', 'orient', 'programming', 'example', 'assignment', 'type', 'conform', 'type', 'class', 'base', 'descendant', 'base']"
396,"The actions of type conversion in Eiffel, specifically converts to and converts from are defined as:","['action', 'type', 'conversion', 'eiffel', 'specifically', 'convert', 'convert', 'define']"
397,A type based on a class CU converts to a type T based on a class CT and T converts from U if either,"['type', 'base', 'class', 'convert', 'type', 'base', 'class', 'convert']"
398,"Eiffel is a fully compliant language for Microsoft .NET Framework. Before development of .NET, Eiffel already had extensive class libraries. Using the .NET type libraries, particularly with commonly used types such as strings, poses a conversion problem. Existing Eiffel software uses the string classes such as STRING_8 from the Eiffel libraries, but Eiffel software written for .NET must use the .NET string class System.String in many cases, for example when calling .NET methods which expect items of the .NET type to be passed as arguments. So, the conversion of these types back and forth needs to be as seamless as possible.","['eiffel', 'fully', 'compliant', 'language', 'microsoft', '.net', 'framework', 'development', '.net', 'eiffel', 'extensive', 'class', 'library', '.net', 'type', 'library', 'particularly', 'commonly', 'type', 'string', 'pose', 'conversion', 'problem', 'exist', 'eiffel', 'software', 'use', 'string', 'class', 'string_8', 'eiffel', 'library', 'eiffel', 'software', 'write', '.net', 'use', '.net', 'string', 'class', 'system', 'string', 'case', 'example', 'call', '.net', 'method', 'expect', 'item', '.net', 'type', 'pass', 'argument', 'conversion', 'type', 'forth', 'need', 'seamless', 'possible']"
399,"In the code above, two strings are declared, one of each different type SYSTEM_STRING is the Eiffel compliant alias for System.String. Because System.String does not conform to STRING_8, then the assignment above is valid only if System.String converts to STRING_8.","['code', 'string', 'declare', 'different', 'type', 'system_stre', 'eiffel', 'compliant', 'alia', 'system', 'string', 'system', 'string', 'conform', 'string_8', 'assignment', 'valid', 'system', 'string', 'convert', 'string_8']"
400,The Eiffel class STRING_8 has a conversion procedure make_from_cil for objects of type System.String. Conversion procedures are also always designated as creation procedures similar to constructors. The following is an excerpt from the STRING_8 class:,"['eiffel', 'class', 'string_8', 'conversion', 'procedure', 'make_from_cil', 'object', 'type', 'system', 'string', 'conversion', 'procedure', 'designate', 'creation', 'procedure', 'similar', 'constructor', 'follow', 'excerpt', 'string_8', 'class']"
401,The presence of the conversion procedure makes the assignment:,"['presence', 'conversion', 'procedure', 'make', 'assignment']"
402,in which my_string is constructed as a new object of type STRING_8 with content equivalent to that of my_system_string.,"['my_string', 'construct', 'new', 'object', 'type', 'string_8', 'content', 'equivalent', 'my_system_string']"
403,To handle an assignment with original source and target reversed:,"['handle', 'assignment', 'original', 'source', 'target', 'reverse']"
404,the class STRING_8 also contains a conversion query to_cil which will produce a System.String from an instance of STRING_8.,"['class', 'string_8', 'contain', 'conversion', 'query', 'to_cil', 'produce', 'system', 'string', 'instance', 'string_8']"
405,"In Eiffel, the setup for type conversion is included in the class code, but then appears to happen as automatically as explicit type conversion in client code. The includes not just assignments but other types of attachments as well, such as argument parameter substitution.","['eiffel', 'setup', 'type', 'conversion', 'include', 'class', 'code', 'appear', 'happen', 'automatically', 'explicit', 'type', 'conversion', 'client', 'code', 'include', 'assignment', 'type', 'attachment', 'argument', 'parameter', 'substitution']"
406,"Rust provides no implicit type conversion coercion between primitive types. But, explicit type conversion casting can be performed using the as keyword.9","['rust', 'provide', 'implicit', 'type', 'conversion', 'coercion', 'primitive', 'type', 'explicit', 'type', 'conversion', 'casting', 'perform', 'keyword']"
407,"In hacking, typecasting is the misuse of type conversion to temporarily change a variable's data type from how it was originally defined.10 This provides opportunities for hackers since in type conversion after a variable is ""typecast"" to become a different data type, the compiler will treat that hacked variable as the new data type for that specific operation.11","['hack', 'typecasting', 'misuse', 'type', 'conversion', 'temporarily', 'change', 'variable', 'data', 'type', 'originally', 'defined', 'provide', 'opportunity', 'hacker', 'type', 'conversion', 'variable', 'typecast', 'different', 'datum', 'type', 'compiler', 'treat', 'hack', 'variable', 'new', 'data', 'type', 'specific', 'operation']"
408,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
409,"In object-oriented design, the chain-of-responsibility pattern is a behavioral design pattern consisting of a source of command objects and a series of processing objects.1 Each processing object contains logic that defines the types of command objects that it can handle; the rest are passed to the next processing object in the chain. A mechanism also exists for adding new processing objects to the end of this chain.","['object', 'orient', 'design', 'chain', 'responsibility', 'pattern', 'behavioral', 'design', 'pattern', 'consist', 'source', 'command', 'object', 'series', 'process', 'objects', 'processing', 'object', 'contain', 'logic', 'define', 'type', 'command', 'object', 'handle', 'rest', 'pass', 'processing', 'object', 'chain', 'mechanism', 'exist', 'add', 'new', 'processing', 'object', 'end', 'chain']"
410,"In a variation of the standard chain-of-responsibility model, some handlers may act as dispatchers, capable of sending commands out in a variety of directions, forming a tree of responsibility. In some cases, this can occur recursively, with processing objects calling higher-up processing objects with commands that attempt to solve some smaller part of the problem; in this case recursion continues until the command is processed, or the entire tree has been explored. An XML interpreter might work in this manner.","['variation', 'standard', 'chain', 'responsibility', 'model', 'handler', 'act', 'dispatcher', 'capable', 'send', 'command', 'variety', 'direction', 'form', 'tree', 'responsibility', 'case', 'occur', 'recursively', 'processing', 'object', 'call', 'high', 'processing', 'object', 'command', 'attempt', 'solve', 'small', 'problem', 'case', 'recursion', 'continue', 'command', 'process', 'entire', 'tree', 'explore', 'xml', 'interpreter', 'work', 'manner']"
411,This pattern promotes the idea of loose coupling.,"['pattern', 'promote', 'idea', 'loose', 'coupling']"
412,"The chain-of-responsibility pattern is structurally nearly identical to the decorator pattern, the difference being that for the decorator, all classes handle the request, while for the chain of responsibility, exactly one of the classes in the chain handles the request. This is a strict definition of the Responsibility concept in the GoF book. However, many implementations such as loggers below, or UI event handling, or servlet filters in Java, etc. allow several elements in the chain to take responsibility.","['chain', 'responsibility', 'pattern', 'structurally', 'nearly', 'identical', 'decorator', 'pattern', 'difference', 'decorator', 'class', 'handle', 'request', 'chain', 'responsibility', 'exactly', 'class', 'chain', 'handle', 'request', 'strict', 'definition', 'responsibility', 'concept', 'gof', 'book', 'implementation', 'logger', 'event', 'handling', 'servlet', 'filter', 'java', 'etc', 'allow', 'element', 'chain', 'responsibility']"
413,"The Chain of Responsibility 2 design pattern is one of the twenty-three well-known GoF design patterns that describe common solutions to recurring design problems when designing flexible and reusable object-oriented software, that is, objects that are easier to implement, change, test, and reuse.","['chain', 'responsibility', 'design', 'pattern', 'know', 'gof', 'design', 'pattern', 'describe', 'common', 'solution', 'recur', 'design', 'problem', 'design', 'flexible', 'reusable', 'object', 'orient', 'software', 'object', 'easy', 'implement', 'change', 'test', 'reuse']"
414,Implementing a request directly within the class that sends the request is inflexible because it couples the class to a particular receiver and makes it impossible to support multiple receivers.,"['implement', 'request', 'directly', 'class', 'send', 'request', 'inflexible', 'couple', 'class', 'particular', 'receiver', 'make', 'impossible', 'support', 'multiple', 'receiver']"
415,This enables us to send a request to a chain of receivers without having to know which one handles the request. The request gets passed along the chain until a receiver handles the request. The sender of a request is no longer coupled to a particular receiver.,"['enable', 'send', 'request', 'chain', 'receiver', 'have', 'know', 'handle', 'request', 'request', 'gets', 'pass', 'chain', 'receiver', 'handle', 'request', 'sender', 'request', 'long', 'couple', 'particular', 'receiver']"
416,See also the UML class and sequence diagram below.,"['uml', 'class', 'sequence', 'diagram']"
417,"In the above UML class diagram, the Sender class doesn't refer to a particular receiver class directly. Instead, Sender refers to the Handler interface for handling a request handler.handleRequest, which makes the Sender independent of which receiver handles the request. The Receiver1, Receiver2, and Receiver3 classes implement the Handler interface by either handling or forwarding a request depending on run-time conditions. The UML sequence diagram shows the run-time interactions: In this example, the Sender object calls handleRequest on the receiver1 object of type Handler. The receiver1 forwards the request to receiver2, which in turn forwards the request to receiver3, which handles performs the request.","['uml', 'class', 'diagram', 'sender', 'class', 'refer', 'particular', 'receiver', 'class', 'directly', 'instead', 'sender', 'refer', 'handler', 'interface', 'handle', 'request', 'handler.handlerequest', 'make', 'sender', 'independent', 'receiver', 'handle', 'request', 'receiver1', 'receiver2', 'receiver3', 'class', 'implement', 'handler', 'interface', 'handle', 'forward', 'request', 'depend', 'run', 'time', 'condition', 'uml', 'sequence', 'diagram', 'show', 'run', 'time', 'interaction', 'example', 'sender', 'object', 'call', 'handlerequ', 'receiver1', 'object', 'type', 'handler', 'receiver1', 'forward', 'request', 'receiver2', 'turn', 'forwards', 'request', 'receiver3', 'handle', 'perform', 'request']"
418,"Below is an example of this pattern in Java. A logger is created using a chain of loggers, each one configured with different log levels.","['example', 'pattern', 'java', 'logger', 'create', 'chain', 'logger', 'configure', 'different', 'log', 'level']"
419,This C# examples uses the logger application to select different sources based on the log level;,"['example', 'use', 'logg', 'application', 'select', 'different', 'source', 'base', 'log', 'level']"
420,"The Cocoa and Cocoa Touch frameworks, used for OS X and iOS applications respectively, actively use the chain-of-responsibility pattern for handling events. Objects that participate in the chain are called responder objects, inheriting from the NSResponder OS X/UIResponder iOS class. All view objects NSView/UIView, view controller objects NSViewController/UIViewController, window objects NSWindow/UIWindow, and the application object NSApplication/UIApplication are responder objects.","['cocoa', 'cocoa', 'touch', 'framework', 'ios', 'application', 'respectively', 'actively', 'use', 'chain', 'responsibility', 'pattern', 'handle', 'event', 'object', 'participate', 'chain', 'call', 'responder', 'object', 'inherit', 'nsresponder', 'uiresponder', 'ios', 'class', 'view', 'object', 'nsview', 'uiview', 'view', 'controller', 'object', 'nsviewcontroller', 'uiviewcontroller', 'window', 'object', 'nswindow', 'uiwindow', 'application', 'object', 'nsapplication', 'uiapplication', 'responder', 'object']"
421,"Typically, when a view receives an event which it can't handle, it dispatches it to its superview until it reaches the view controller or window object. If the window can't handle the event, the event is dispatched to the application object, which is the last object in the chain. For example:","['typically', 'view', 'receive', 'event', 'handle', 'dispatch', 'superview', 'reach', 'view', 'controller', 'window', 'object', 'window', 'handle', 'event', 'event', 'dispatch', 'application', 'object', 'object', 'chain', 'example']"
422,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
423,"In object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state member variables and implementations of behavior member functions or methods.12 In many languages, the class name is used as the name for the class the template itself, the name for the default constructor of the class a subroutine that creates objects, and as the type of objects generated by instantiating the class; these distinct concepts are easily conflated.2 Although, to the point of conflation, one could argue that is a feature inherent in a language because of its polymorphic nature and why these languages are so powerful, dynamic and adaptable for use compared to languages without polymorphism present. Thus they can model dynamic systems i.e. the real world, machine learning, AI more easily.","['object', 'orient', 'programming', 'class', 'extensible', 'program', 'code', 'template', 'create', 'object', 'provide', 'initial', 'value', 'state', 'member', 'variable', 'implementation', 'behavior', 'member', 'function', 'methods', 'language', 'class', 'class', 'template', 'default', 'constructor', 'class', 'subroutine', 'create', 'object', 'type', 'object', 'generate', 'instantiate', 'class', 'distinct', 'concept', 'easily', 'conflated', 'point', 'conflation', 'argue', 'feature', 'inherent', 'language', 'polymorphic', 'nature', 'language', 'powerful', 'dynamic', 'adaptable', 'use', 'compare', 'language', 'polymorphism', 'present', 'model', 'dynamic', 'system', 'i.e.', 'real', 'world', 'machine', 'learning', 'easily']"
424,"When an object is created by a constructor of the class, the resulting object is called an instance of the class, and the member variables specific to the object are called instance variables, to contrast with the class variables shared across the class.","['object', 'create', 'constructor', 'class', 'result', 'object', 'call', 'instance', 'class', 'member', 'variable', 'specific', 'object', 'call', 'instance', 'variable', 'contrast', 'class', 'variable', 'share', 'class']"
425,"In certain languages, classes are, as a matter of fact, only a compile-time feature new classes cannot be declared at run-time, while in other languages classes are first-class citizens, and are generally themselves objects typically of type .mw-parser-output .monospacedfont-family:monospace,monospaceClass or similar. In these languages, a class that creates classes within itself is called a metaclass.","['certain', 'language', 'class', 'matter', 'fact', 'compile', 'time', 'feature', 'new', 'class', 'declare', 'run', 'time', 'language', 'class', 'class', 'citizen', 'generally', 'object', 'typically', 'type', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospaceclass', 'similar', 'language', 'class', 'create', 'class', 'call', 'metaclass']"
426,"In its most casual usage, people often refer to the ""class"" of an object, but narrowly speaking objects have type: the interface, namely the types of member variables, the signatures of member functions methods, and properties these satisfy. At the same time, a class has an implementation specifically the implementation of the methods, and can create objects of a given type, with a given implementation.3 In the terms of type theory, a class is an implementation‍—‌a concrete data structure and collection of subroutines‍—‌while a type is an interface. Different concrete classes can produce objects of the same abstract type depending on type system; for example, the type Stack might be implemented with two classes – SmallStack fast for small stacks, but scales poorly and ScalableStack scales well but high overhead for small stacks. Similarly, a given class may have several different constructors.","['casual', 'usage', 'people', 'refer', 'class', 'object', 'narrowly', 'speak', 'object', 'type', 'interface', 'type', 'member', 'variable', 'signature', 'member', 'function', 'method', 'property', 'satisfy', 'time', 'class', 'implementation', 'specifically', 'implementation', 'method', 'create', 'object', 'give', 'type', 'give', 'implementation', 'term', 'type', 'theory', 'class', 'implementation\u200d—\u200ca', 'concrete', 'data', 'structure', 'collection', 'subroutines\u200d—\u200cwhile', 'type', 'interface', 'different', 'concrete', 'class', 'produce', 'object', 'abstract', 'type', 'depend', 'type', 'system', 'example', 'type', 'stack', 'implement', 'class', 'smallstack', 'fast', 'small', 'stack', 'scale', 'poorly', 'scalablestack', 'scale', 'high', 'overhead', 'small', 'stack', 'similarly', 'give', 'class', 'different', 'constructor']"
427,"Class types generally represent nouns, such as a person, place or thing, or something nominalized, and a class represents an implementation of these. For example, a Banana type might represent the properties and functionality of bananas in general, while the ABCBanana and XYZBanana classes would represent ways of producing bananas say, banana suppliers or data structures and functions to represent and draw bananas in a video game. The ABCBanana class could then produce particular bananas: instances of the ABCBanana class would be objects of type Banana. Often only a single implementation of a type is given, in which case the class name is often identical with the type name.","['class', 'type', 'generally', 'represent', 'noun', 'person', 'place', 'thing', 'nominalize', 'class', 'represent', 'implementation', 'example', 'banana', 'type', 'represent', 'property', 'functionality', 'banana', 'general', 'abcbanana', 'xyzbanana', 'class', 'represent', 'way', 'produce', 'banana', 'banana', 'supplier', 'datum', 'structure', 'function', 'represent', 'draw', 'banana', 'video', 'game', 'abcbanana', 'class', 'produce', 'particular', 'banana', 'instance', 'abcbanana', 'class', 'object', 'type', 'banana', 'single', 'implementation', 'type', 'give', 'case', 'class', 'identical', 'type']"
428,"Classes are composed from structural and behavioral constituents.1 Programming languages that include classes as a programming construct offer support, for various class-related features, and the syntax required to use these features varies greatly from one programming language to another.","['class', 'compose', 'structural', 'behavioral', 'constituents', 'programming', 'language', 'include', 'class', 'programming', 'construct', 'offer', 'support', 'class', 'relate', 'feature', 'syntax', 'require', 'use', 'feature', 'vary', 'greatly', 'programming', 'language']"
429,"A class contains data field descriptions or properties, fields, data members, or attributes. These are usually field types and names that will be associated with state variables at program run time; these state variables either belong to the class or specific instances of the class. In most languages, the structure defined by the class determines the layout of the memory used by its instances. Other implementations are possible: for example, objects in Python use associative key-value containers.4","['class', 'contain', 'data', 'field', 'description', 'property', 'field', 'datum', 'member', 'attribute', 'usually', 'field', 'type', 'name', 'associate', 'state', 'variable', 'program', 'run', 'time', 'state', 'variable', 'belong', 'class', 'specific', 'instance', 'class', 'language', 'structure', 'define', 'class', 'determine', 'layout', 'memory', 'instance', 'implementation', 'possible', 'example', 'object', 'python', 'use', 'associative', 'key', 'value', 'containers']"
430,"Some programming languages such as Eiffel support specification of invariants as part of the definition of the class, and enforce them through the type system. Encapsulation of state is necessary for being able to enforce the invariants of the class.","['programming', 'language', 'eiffel', 'support', 'specification', 'invariant', 'definition', 'class', 'enforce', 'type', 'system', 'encapsulation', 'state', 'necessary', 'able', 'enforce', 'invariant', 'class']"
431,"The behavior of class or its instances is defined using methods. Methods are subroutines with the ability to operate on objects or classes. These operations may alter the state of an object or simply provide ways of accessing it.5 Many kinds of methods exist, but support for them varies across languages. Some types of methods are created and called by programmer code, while other special methods—such as constructors, destructors, and conversion operators—are created and called by compiler-generated code. A language may also allow the programmer to define and call these special methods.67","['behavior', 'class', 'instance', 'define', 'method', 'method', 'subroutine', 'ability', 'operate', 'object', 'class', 'operation', 'alter', 'state', 'object', 'simply', 'provide', 'way', 'access', 'it', 'kind', 'method', 'exist', 'support', 'vary', 'language', 'type', 'method', 'create', 'call', 'programmer', 'code', 'special', 'method', 'constructor', 'destructor', 'conversion', 'operator', 'create', 'call', 'compiler', 'generate', 'code', 'language', 'allow', 'programmer', 'define', 'special', 'methods']"
432,"Every class implements or realizes an interface by providing structure and behavior. Structure consists of data and state, and behavior consists of code that specifies how methods are implemented.8 There is a distinction between the definition of an interface and the implementation of that interface; however, this line is blurred in many programming languages because class declarations both define and implement an interface. Some languages, however, provide features that separate interface and implementation. For example, an abstract class can define an interface without providing implementation.","['class', 'implement', 'realize', 'interface', 'provide', 'structure', 'behavior', 'structure', 'consist', 'datum', 'state', 'behavior', 'consist', 'code', 'specify', 'method', 'implemented', 'distinction', 'definition', 'interface', 'implementation', 'interface', 'line', 'blur', 'programming', 'language', 'class', 'declaration', 'define', 'implement', 'interface', 'language', 'provide', 'feature', 'separate', 'interface', 'implementation', 'example', 'abstract', 'class', 'define', 'interface', 'provide', 'implementation']"
433,Languages that support class inheritance also allow classes to inherit interfaces from the classes that they are derived from.,"['language', 'support', 'class', 'inheritance', 'allow', 'class', 'inherit', 'interface', 'class', 'derive']"
434,"For example, if ""class A"" inherits from ""class B"" and if ""class B"" implements the interface ""interface B"" then ""class A"" also inherits the functionalityconstants and methods declaration provided by ""interface B"".","['example', 'class', 'inherit', 'class', 'class', 'implement', 'interface', 'interface', 'class', 'inherit', 'functionalityconstant', 'method', 'declaration', 'provide', 'interface']"
435,"In languages that support access specifiers, the interface of a class is considered to be the set of public members of the class, including both methods and attributes via implicit getter and setter methods; any private members or internal data structures are not intended to be depended on by external code and thus are not part of the interface.","['language', 'support', 'access', 'specifier', 'interface', 'class', 'consider', 'set', 'public', 'member', 'class', 'include', 'method', 'attribute', 'implicit', 'getter', 'setter', 'method', 'private', 'member', 'internal', 'datum', 'structure', 'intend', 'depend', 'external', 'code', 'interface']"
436,Object-oriented programming methodology dictates that the operations of any interface of a class are to be independent of each other. It results in a layered design where clients of an interface use the methods declared in the interface. An interface places no requirements for clients to invoke the operations of one interface in any particular order. This approach has the benefit that client code can assume that the operations of an interface are available for use whenever the client has access to the object.9citation needed,"['object', 'orient', 'programming', 'methodology', 'dictate', 'operation', 'interface', 'class', 'independent', 'result', 'layered', 'design', 'client', 'interface', 'use', 'method', 'declare', 'interface', 'interface', 'place', 'requirement', 'client', 'invoke', 'operation', 'interface', 'particular', 'order', 'approach', 'benefit', 'client', 'code', 'assume', 'operation', 'interface', 'available', 'use', 'client', 'access', 'objectcitation', 'need']"
437,"The buttons on the front of your television set are the interface between you and the electrical wiring on the other side of its plastic casing. You press the ""power"" button to toggle the television on and off. In this example, your particular television is the instance, each method is represented by a button, and all the buttons together compose the interface other television sets that are the same model as yours would have the same interface. In its most common form, an interface is a specification of a group of related methods without any associated implementation of the methods.","['button', 'television', 'set', 'interface', 'electrical', 'wiring', 'plastic', 'casing', 'press', 'power', 'button', 'toggle', 'television', 'example', 'particular', 'television', 'instance', 'method', 'represent', 'button', 'button', 'compose', 'interface', 'television', 'set', 'model', 'interface', 'common', 'form', 'interface', 'specification', 'group', 'related', 'method', 'associate', 'implementation', 'method']"
438,"A television set also has a myriad of attributes, such as size and whether it supports colour, which together comprise its structure. A class represents the full description of a television, including its attributes structure and buttons interface.","['television', 'set', 'myriad', 'attribute', 'size', 'support', 'colour', 'comprise', 'structure', 'class', 'represent', 'description', 'television', 'include', 'attribute', 'structure', 'button', 'interface']"
439,"Getting the total number of televisions manufactured could be a static method of the television class. This method is clearly associated with the class, yet is outside the domain of each individual instance of the class. A static method that finds a particular instance out of the set of all television objects is another example.","['get', 'total', 'number', 'television', 'manufacture', 'static', 'method', 'television', 'class', 'method', 'clearly', 'associate', 'class', 'outside', 'domain', 'individual', 'instance', 'class', 'static', 'method', 'find', 'particular', 'instance', 'set', 'television', 'object', 'example']"
440,The following is a common set of access specifiers:10,"['follow', 'common', 'set', 'access', 'specifiers']"
441,"Although many object-oriented languages support the above access specifiers, their semantics may differ.","['object', 'orient', 'language', 'support', 'access', 'specifier', 'semantic', 'differ']"
442,"Object-oriented design uses the access specifiers in conjunction with careful design of public method implementations to enforce class invariants—constraints on the state of the objects. A common usage of access specifiers is to separate the internal data of a class from its interface: the internal structure is made private, while public accessor methods can be used to inspect or alter such private data.","['object', 'orient', 'design', 'use', 'access', 'specifier', 'conjunction', 'careful', 'design', 'public', 'method', 'implementation', 'enforce', 'class', 'invariant', 'constraint', 'state', 'object', 'common', 'usage', 'access', 'specifier', 'separate', 'internal', 'datum', 'class', 'interface', 'internal', 'structure', 'private', 'public', 'accessor', 'method', 'inspect', 'alter', 'private', 'datum']"
443,"Access specifiers do not necessarily control visibility, in that even private members may be visible to client external code. In some languages, an inaccessible but visible member may be referred to at run-time for example, by a pointer returned from a member function, but an attempt to use it by referring to the name of the member from client code will be prevented by the type checker.11","['access', 'specifier', 'necessarily', 'control', 'visibility', 'private', 'member', 'visible', 'client', 'external', 'code', 'language', 'inaccessible', 'visible', 'member', 'refer', 'run', 'time', 'example', 'pointer', 'return', 'member', 'function', 'attempt', 'use', 'refer', 'member', 'client', 'code', 'prevent', 'type', 'checker']"
444,"The various object-oriented programming languages enforce member accessibility and visibility to various degrees, and depending on the language's type system and compilation policies, enforced at either compile-time or run-time. For example, the Java language does not allow client code that accesses the private data of a class to compile. 12 In the C++ language, private methods are visible, but not accessible in the interface; however, they may be made invisible by explicitly declaring fully abstract classes that represent the interfaces of the class.13","['object', 'orient', 'programming', 'language', 'enforce', 'member', 'accessibility', 'visibility', 'degree', 'depend', 'language', 'type', 'system', 'compilation', 'policy', 'enforce', 'compile', 'time', 'run', 'time', 'example', 'java', 'language', 'allow', 'client', 'code', 'access', 'private', 'datum', 'class', 'compile', 'c++', 'language', 'private', 'method', 'visible', 'accessible', 'interface', 'invisible', 'explicitly', 'declare', 'fully', 'abstract', 'class', 'represent', 'interface', 'class']"
445,Some languages feature other accessibility schemes:,"['language', 'feature', 'accessibility', 'scheme']"
446,"In addition to the design of standalone classes, programming languages may support more advanced class design based upon relationships between classes. The inter-class relationship design capabilities commonly provided are compositional and hierarchical.","['addition', 'design', 'standalone', 'class', 'programming', 'language', 'support', 'advanced', 'class', 'design', 'base', 'relationship', 'class', 'inter', 'class', 'relationship', 'design', 'capability', 'commonly', 'provide', 'compositional', 'hierarchical']"
447,"Classes can be composed of other classes, thereby establishing a compositional relationship between the enclosing class and its embedded classes. Compositional relationship between classes is also commonly known as a has-a relationship.16 For example, a class ""Car"" could be composed of and contain a class ""Engine"". Therefore, a Car has an Engine. One aspect of composition is containment, which is the enclosure of component instances by the instance that has them. If an enclosing object contains component instances by value, the components and their enclosing object have a similar lifetime. If the components are contained by reference, they may not have a similar lifetime.17 For example, in Objective-C 2.0:","['class', 'compose', 'class', 'establish', 'compositional', 'relationship', 'enclose', 'class', 'embed', 'class', 'compositional', 'relationship', 'class', 'commonly', 'know', 'relationship', 'example', 'class', 'car', 'compose', 'contain', 'class', 'engine', 'car', 'engine', 'aspect', 'composition', 'containment', 'enclosure', 'component', 'instance', 'instance', 'enclose', 'object', 'contain', 'component', 'instance', 'value', 'component', 'enclose', 'object', 'similar', 'lifetime', 'component', 'contain', 'reference', 'similar', 'lifetime', 'example', 'objective', '2']"
448,"This Car class has an instance of NSString a string object, Engine, and NSArray an array object.","['car', 'class', 'instance', 'nsstring', 'string', 'object', 'engine', 'nsarray', 'array', 'object']"
449,"Classes can be derived from one or more existing classes, thereby establishing a hierarchical relationship between the derived-from classes base classes, parent classes or .mw-parser-output .vanchor>:target~.vanchor-textbackground-color:#b1d2ffsuperclasses and the derived class child class or subclass . The relationship of the derived class to the derived-from classes is commonly known as an is-a relationship.18 For example, a class 'Button' could be derived from a class 'Control'. Therefore, a Button is a Control. Structural and behavioral members of the parent classes are inherited by the child class. Derived classes can define additional structural members data fields and behavioral members methods in addition to those that they inherit and are therefore specializations of their superclasses. Also, derived classes can override inherited methods if the language allows.","['class', 'derive', 'exist', 'class', 'establish', 'hierarchical', 'relationship', 'derive', 'class', 'base', 'class', 'parent', 'class', '.mw', 'parser', 'output', '.vanchor>:target~.vanchor', 'textbackground', 'color:#b1d2ffsuperclasse', 'derive', 'class', 'child', 'class', 'subclass', 'relationship', 'derive', 'class', 'derive', 'class', 'commonly', 'know', 'relationship', 'example', 'class', 'button', 'derive', 'class', 'control', 'button', 'control', 'structural', 'behavioral', 'member', 'parent', 'class', 'inherit', 'child', 'class', 'derive', 'class', 'define', 'additional', 'structural', 'member', 'datum', 'field', 'behavioral', 'member', 'method', 'addition', 'inherit', 'specialization', 'superclass', 'derive', 'class', 'override', 'inherit', 'method', 'language', 'allow']"
450,"Not all languages support multiple inheritance. For example, Java allows a class to implement multiple interfaces, but only inherit from one class.19 If multiple inheritance is allowed, the hierarchy is a directed acyclic graph or DAG for short, otherwise it is a tree. The hierarchy has classes as nodes and inheritance relationships as links. Classes in the same level are more likely to be associated than classes in different levels. The levels of this hierarchy are called layers or levels of abstraction.","['language', 'support', 'multiple', 'inheritance', 'example', 'java', 'allow', 'class', 'implement', 'multiple', 'interface', 'inherit', 'class', 'multiple', 'inheritance', 'allow', 'hierarchy', 'directed', 'acyclic', 'graph', 'dag', 'short', 'tree', 'hierarchy', 'class', 'node', 'inheritance', 'relationship', 'link', 'class', 'level', 'likely', 'associate', 'class', 'different', 'level', 'level', 'hierarchy', 'call', 'layer', 'level', 'abstraction']"
451,"Example Simplified Objective-C 2.0 code, from iPhone SDK:","['example', 'simplified', 'objective', '2', 'code', 'iphone', 'sdk']"
452,"In this example, a UITableView is a UIScrollView is a UIView is a UIResponder is an NSObject.","['example', 'uitableview', 'uiscrollview', 'uiview', 'uiresponder', 'nsobject']"
453,"Conceptually, a superclass is a superset of its subclasses. For example, a common class hierarchy would involve GraphicObject as a superclass of Rectangle and Ellipse, while Square would be a subclass of Rectangle. These are all subset relations in set theory as well, i.e., all squares are rectangles but not all rectangles are squares.","['conceptually', 'superclass', 'superset', 'subclass', 'example', 'common', 'class', 'hierarchy', 'involve', 'graphicobject', 'superclass', 'rectangle', 'ellipse', 'square', 'subclass', 'rectangle', 'subset', 'relation', 'set', 'theory', 'i.e.', 'square', 'rectangle', 'rectangle', 'square']"
454,"A common conceptual error is to mistake a part of relation with a subclass. For example, a car and truck are both kinds of vehicles and it would be appropriate to model them as subclasses of a vehicle class. However, it would be an error to model the component parts of the car as subclass relations. For example, a car is composed of an engine and body, but it would not be appropriate to model engine or body as a subclass of car.","['common', 'conceptual', 'error', 'mistake', 'relation', 'subclass', 'example', 'car', 'truck', 'kind', 'vehicle', 'appropriate', 'model', 'subclass', 'vehicle', 'class', 'error', 'model', 'component', 'part', 'car', 'subclass', 'relation', 'example', 'car', 'compose', 'engine', 'body', 'appropriate', 'model', 'engine', 'body', 'subclass', 'car']"
455,"In object-oriented modeling these kinds of relations are typically modeled as object properties. In this example, the Car class would have a property called parts. parts would be typed to hold a collection of objects, such as instances of Body, Engine, Tires, etc. Object modeling languages such as UML include capabilities to model various aspects of ""part of"" and other kinds of relations – data such as the cardinality of the objects, constraints on input and output values, etc. This information can be utilized by developer tools to generate additional code beside the basic data definitions for the objects, such as error checking on get and set methods.20","['object', 'orient', 'model', 'kind', 'relation', 'typically', 'model', 'object', 'property', 'example', 'car', 'class', 'property', 'call', 'part', 'part', 'type', 'hold', 'collection', 'object', 'instance', 'body', 'engine', 'tires', 'etc', 'object', 'modeling', 'language', 'uml', 'include', 'capability', 'model', 'aspect', 'kind', 'relation', 'datum', 'cardinality', 'object', 'constraint', 'input', 'output', 'value', 'etc', 'information', 'utilize', 'developer', 'tool', 'generate', 'additional', 'code', 'basic', 'datum', 'definition', 'object', 'error', 'checking', 'set', 'methods']"
456,"One important question when modeling and implementing a system of object classes is whether a class can have one or more superclasses. In the real world with actual sets it would be rare to find sets that didn't intersect with more than one other set. However, while some systems such as Flavors and CLOS provide a capability for more than one parent to do so at run time introduces complexity that many in the object-oriented community consider antithetical to the goals of using object classes in the first place. Understanding which class will be responsible for handling a message can get complex when dealing with more than one superclass. If used carelessly this feature can introduce some of the same system complexity and ambiguity classes were designed to avoid.21","['important', 'question', 'model', 'implement', 'system', 'object', 'class', 'class', 'superclass', 'real', 'world', 'actual', 'set', 'rare', 'find', 'set', 'intersect', 'set', 'system', 'flavors', 'clos', 'provide', 'capability', 'parent', 'run', 'time', 'introduce', 'complexity', 'object', 'orient', 'community', 'consider', 'antithetical', 'goal', 'object', 'class', 'place', 'understand', 'class', 'responsible', 'handle', 'message', 'complex', 'deal', 'superclass', 'carelessly', 'feature', 'introduce', 'system', 'complexity', 'ambiguity', 'class', 'design', 'avoid']"
457,"Most modern object-oriented languages such as Smalltalk and Java require single inheritance at run time. For these languages, multiple inheritance may be useful for modeling but not for an implementation.","['modern', 'object', 'orient', 'language', 'smalltalk', 'java', 'require', 'single', 'inheritance', 'run', 'time', 'language', 'multiple', 'inheritance', 'useful', 'modeling', 'implementation']"
458,"However, semantic web application objects do have multiple superclasses. The volatility of the Internet requires this level of flexibility and the technology standards such as the Web Ontology Language OWL are designed to support it.","['semantic', 'web', 'application', 'object', 'multiple', 'superclass', 'volatility', 'internet', 'require', 'level', 'flexibility', 'technology', 'standard', 'web', 'ontology', 'language', 'owl', 'design', 'support']"
459,"A similar issue is whether or not the class hierarchy can be modified at run time. Languages such as Flavors, CLOS, and Smalltalk all support this feature as part of their meta-object protocols. Since classes are themselves first-class objects, it is possible to have them dynamically alter their structure by sending them the appropriate messages. Other languages that focus more on strong typing such as Java and C++ do not allow the class hierarchy to be modified at run time. Semantic web objects have the capability for run time changes to classes. The rational is similar to the justification for allowing multiple superclasses, that the Internet is so dynamic and flexible that dynamic changes to the hierarchy are required to manage this volatility.22","['similar', 'issue', 'class', 'hierarchy', 'modify', 'run', 'time', 'language', 'flavors', 'clos', 'smalltalk', 'support', 'feature', 'meta', 'object', 'protocol', 'class', 'class', 'object', 'possible', 'dynamically', 'alter', 'structure', 'send', 'appropriate', 'message', 'language', 'focus', 'strong', 'typing', 'java', 'c++', 'allow', 'class', 'hierarchy', 'modify', 'run', 'time', 'semantic', 'web', 'object', 'capability', 'run', 'time', 'change', 'class', 'rational', 'similar', 'justification', 'allow', 'multiple', 'superclass', 'internet', 'dynamic', 'flexible', 'dynamic', 'change', 'hierarchy', 'require', 'manage', 'volatility']"
460,"Although class-based languages are commonly assumed to support inheritance, inheritance is not an intrinsic aspect of the concept of classes. Some languages, often referred to as ""object-based languages"", support classes yet do not support inheritance. Examples of object-based languages include earlier versions of Visual Basic.","['class', 'base', 'language', 'commonly', 'assume', 'support', 'inheritance', 'inheritance', 'intrinsic', 'aspect', 'concept', 'class', 'language', 'refer', 'object', 'base', 'language', 'support', 'class', 'support', 'inheritance', 'example', 'object', 'base', 'language', 'include', 'early', 'version', 'visual', 'basic']"
461,"In object-oriented analysis and in UML, an association between two classes represents a collaboration between the classes or their corresponding instances. Associations have direction; for example, a bi-directional association between two classes indicates that both of the classes are aware of their relationship.23 Associations may be labeled according to their name or purpose.24","['object', 'orient', 'analysis', 'uml', 'association', 'class', 'represent', 'collaboration', 'class', 'correspond', 'instance', 'association', 'direction', 'example', 'directional', 'association', 'class', 'indicate', 'class', 'aware', 'relationship', 'associations', 'label', 'accord', 'purpose']"
462,"An association role is given end of an association and describes the role of the corresponding class. For example, a ""subscriber"" role describes the way instances of the class ""Person"" participate in a ""subscribes-to"" association with the class ""Magazine"". Also, a ""Magazine"" has the ""subscribed magazine"" role in the same association. Association role multiplicity describes how many instances correspond to each instance of the other class of the association. Common multiplicities are ""0..1"", ""1..1"", ""1..*"" and ""0..*"", where the ""*"" specifies any number of instances.23","['association', 'role', 'give', 'end', 'association', 'describe', 'role', 'corresponding', 'class', 'example', 'subscriber', 'role', 'describe', 'way', 'instance', 'class', 'person', 'participate', 'subscribes', 'association', 'class', 'magazine', 'magazine', 'subscribe', 'magazine', 'role', 'association', 'association', 'role', 'multiplicity', 'describe', 'instance', 'correspond', 'instance', 'class', 'association', 'common', 'multiplicity', 'specify', 'number', 'instances']"
463,"There are many categories of classes, some of which overlap.","['category', 'class', 'overlap']"
464,"In a language that supports inheritance, an abstract class, or abstract base class ABC, is a class that cannot be instantiated because it is either labeled as abstract or it simply specifies abstract methods or virtual methods. An abstract class may provide implementations of some methods, and may also specify virtual methods via signatures that are to be implemented by direct or indirect descendants of the abstract class. Before a class derived from an abstract class can be instantiated, all abstract methods of its parent classes must be implemented by some class in the derivation chain.25","['language', 'support', 'inheritance', 'abstract', 'class', 'abstract', 'base', 'class', 'abc', 'class', 'instantiate', 'label', 'abstract', 'simply', 'specify', 'abstract', 'method', 'virtual', 'method', 'abstract', 'class', 'provide', 'implementation', 'method', 'specify', 'virtual', 'method', 'signature', 'implement', 'direct', 'indirect', 'descendant', 'abstract', 'class', 'class', 'derive', 'abstract', 'class', 'instantiate', 'abstract', 'method', 'parent', 'class', 'implement', 'class', 'derivation', 'chain']"
465,"Most object-oriented programming languages allow the programmer to specify which classes are considered abstract and will not allow these to be instantiated. For example, in Java, C# and PHP, the keyword abstract is used.2627 In C++, an abstract class is a class having at least one abstract method given by the appropriate syntax in that language a pure virtual function in C++ parlance.25","['object', 'orient', 'programming', 'language', 'allow', 'programmer', 'specify', 'class', 'consider', 'abstract', 'allow', 'instantiate', 'example', 'java', 'php', 'keyword', 'abstract', 'used', 'c++', 'abstract', 'class', 'class', 'have', 'abstract', 'method', 'give', 'appropriate', 'syntax', 'language', 'pure', 'virtual', 'function', 'c++', 'parlance']"
466,"A class consisting of only virtual methods is called a Pure Abstract Base Class or Pure ABC in C++ and is also known as an interface by users of the language.13 Other languages, notably Java and C#, support a variant of abstract classes called an interface via a keyword in the language. In these languages, multiple inheritance is not allowed, but a class can implement multiple interfaces. Such a class can only contain abstract publicly accessible methods.192829","['class', 'consist', 'virtual', 'method', 'call', 'pure', 'abstract', 'base', 'class', 'pure', 'abc', 'c++', 'know', 'interface', 'user', 'language', 'language', 'notably', 'java', 'support', 'variant', 'abstract', 'class', 'call', 'interface', 'keyword', 'language', 'language', 'multiple', 'inheritance', 'allow', 'class', 'implement', 'multiple', 'interface', 'class', 'contain', 'abstract', 'publicly', 'accessible', 'methods']"
467,"A concrete class is a class that can be instantiated, as opposed to abstract classes, which cannot.","['concrete', 'class', 'class', 'instantiate', 'oppose', 'abstract', 'class']"
468,"In some languages, classes can be declared in scopes other than the global scope. There are various types of such classes.","['language', 'class', 'declare', 'scope', 'global', 'scope', 'type', 'class']"
469,"An inner class is a class defined within another class. The relationship between an inner class and its containing class can also be treated as another type of class association. An inner class is typically neither associated with instances of the enclosing class nor instantiated along with its enclosing class. Depending on language, it may or may not be possible to refer to the class from outside the enclosing class. A related concept is inner types, also known as inner data type or nested type, which is a generalization of the concept of inner classes. C++ is an example of a language that supports both inner classes and inner types via typedef declarations.3031","['inner', 'class', 'class', 'define', 'class', 'relationship', 'inner', 'class', 'contain', 'class', 'treat', 'type', 'class', 'association', 'inner', 'class', 'typically', 'associate', 'instance', 'enclosing', 'class', 'instantiate', 'enclose', 'class', 'depend', 'language', 'possible', 'refer', 'class', 'outside', 'enclosing', 'class', 'related', 'concept', 'inner', 'type', 'know', 'inner', 'datum', 'type', 'nested', 'type', 'generalization', 'concept', 'inner', 'class', 'c++', 'example', 'language', 'support', 'inner', 'class', 'inner', 'type', 'typedef', 'declarations']"
470,"Another type is a local class, which is a class defined within a procedure or function. This limits references to the class name to within the scope where the class is declared. Depending on the semantic rules of the language, there may be additional restrictions on local classes compared to non-local ones. One common restriction is to disallow local class methods to access local variables of the enclosing function. For example, in C++, a local class may refer to static variables declared within its enclosing function, but may not access the function's automatic variables.32","['type', 'local', 'class', 'class', 'define', 'procedure', 'function', 'limit', 'reference', 'class', 'scope', 'class', 'declare', 'depend', 'semantic', 'rule', 'language', 'additional', 'restriction', 'local', 'class', 'compare', 'non', 'local', 'one', 'common', 'restriction', 'disallow', 'local', 'class', 'method', 'access', 'local', 'variable', 'enclosing', 'function', 'example', 'c++', 'local', 'class', 'refer', 'static', 'variable', 'declare', 'enclose', 'function', 'access', 'function', 'automatic', 'variables']"
471,Metaclasses are classes whose instances are classes.33 A metaclass describes a common structure of a collection of classes and can implement a design pattern or describe particular kinds of classes. Metaclasses are often used to describe frameworks.34,"['metaclasse', 'class', 'instance', 'classes', 'metaclass', 'describe', 'common', 'structure', 'collection', 'class', 'implement', 'design', 'pattern', 'describe', 'particular', 'kind', 'class', 'metaclasse', 'describe', 'frameworks']"
472,"In some languages, such as Python, Ruby or Smalltalk, a class is also an object; thus each class is an instance of a unique metaclass that is built into the language. 4 35 36 The Common Lisp Object System CLOS provides metaobject protocols MOPs to implement those classes and metaclasses. 37","['language', 'python', 'ruby', 'smalltalk', 'class', 'object', 'class', 'instance', 'unique', 'metaclass', 'build', 'language', 'common', 'lisp', 'object', 'system', 'clos', 'provide', 'metaobject', 'protocol', 'mop', 'implement', 'class', 'metaclasse']"
473,"Non-subclassable classes allow programmers to design classes and hierarchies of classes where at some level in the hierarchy, further derivation is prohibited a stand-alone class may be also designated as non-subclassable, preventing the formation of any hierarchy. Contrast this to abstract classes, which imply, encourage, and require derivation in order to be used at all. A non-subclassable class is implicitly concrete.","['non', 'subclassable', 'class', 'allow', 'programmer', 'design', 'class', 'hierarchy', 'class', 'level', 'hierarchy', 'derivation', 'prohibit', 'stand', 'class', 'designate', 'non', 'subclassable', 'prevent', 'formation', 'hierarchy', 'contrast', 'abstract', 'class', 'imply', 'encourage', 'require', 'derivation', 'order', 'non', 'subclassable', 'class', 'implicitly', 'concrete']"
474,"A non-subclassable class is created by declaring the class as sealed in C# or as final in Java or PHP.383940 For example, Java's String class is designated as final.41","['non', 'subclassable', 'class', 'create', 'declare', 'class', 'seal', 'final', 'java', 'php', 'example', 'java', 'string', 'class', 'designate', 'final']"
475,Non-subclassable classes may allow a compiler in compiled languages to perform optimizations that are not available for subclassable classes. 42,"['non', 'subclassable', 'class', 'allow', 'compiler', 'compile', 'language', 'perform', 'optimization', 'available', 'subclassable', 'class']"
476,"An open class is one that can be changed. Typically, an executable program cannot be changed by customers. Developers can often change some classes, but typically cannot change standard or built-in ones. In Ruby, all classes are open. In Python, classes can be created at runtime, and all can be modified afterwards.43 Objective-C categories permit the programmer to add methods to an existing class without the need to recompile that class or even have access to its source code.","['open', 'class', 'change', 'typically', 'executable', 'program', 'change', 'customer', 'developer', 'change', 'class', 'typically', 'change', 'standard', 'build', 'one', 'ruby', 'class', 'open', 'python', 'class', 'create', 'runtime', 'modify', 'afterwards', 'objective', 'category', 'permit', 'programmer', 'add', 'method', 'exist', 'class', 'need', 'recompile', 'class', 'access', 'source', 'code']"
477,"Some languages have special support for mixins, though in any language with multiple inheritance a mixin is simply a class that does not represent an is-a-type-of relationship. Mixins are typically used to add the same methods to multiple classes; for example, a class UnicodeConversionMixin might provide a method called unicode_to_ascii when included in classes FileReader and WebPageScraper that do not share a common parent.","['language', 'special', 'support', 'mixin', 'language', 'multiple', 'inheritance', 'mixin', 'simply', 'class', 'represent', 'type', 'relationship', 'mixin', 'typically', 'add', 'method', 'multiple', 'class', 'example', 'class', 'unicodeconversionmixin', 'provide', 'method', 'call', 'unicode_to_ascii', 'include', 'class', 'filereader', 'webpagescraper', 'share', 'common', 'parent']"
478,"In languages supporting the feature, a partial class is a class whose definition may be split into multiple pieces, within a single source-code file or across multiple files.44 The pieces are merged at compile-time, making compiler output the same as for a non-partial class.","['language', 'support', 'feature', 'partial', 'class', 'class', 'definition', 'split', 'multiple', 'piece', 'single', 'source', 'code', 'file', 'multiple', 'files', 'piece', 'merge', 'compile', 'time', 'make', 'compiler', 'output', 'non', 'partial', 'class']"
479,"The primary motivation for introduction of partial classes is to facilitate the implementation of code generators, such as visual designers.44 It is otherwise a challenge or compromise to develop code generators that can manage the generated code when it is interleaved within developer-written code. Using partial classes, a code generator can process a separate file or coarse-grained partial class within a file, and is thus alleviated from intricately interjecting generated code via extensive parsing, increasing compiler efficiency and eliminating the potential risk of corrupting developer code. In a simple implementation of partial classes, the compiler can perform a phase of precompilation where it ""unifies"" all the parts of a partial class. Then, compilation can proceed as usual.","['primary', 'motivation', 'introduction', 'partial', 'class', 'facilitate', 'implementation', 'code', 'generator', 'visual', 'designers', 'challenge', 'compromise', 'develop', 'code', 'generator', 'manage', 'generate', 'code', 'interleave', 'developer', 'write', 'code', 'partial', 'class', 'code', 'generator', 'process', 'separate', 'file', 'coarse', 'grain', 'partial', 'class', 'file', 'alleviate', 'intricately', 'interject', 'generate', 'code', 'extensive', 'parsing', 'increase', 'compiler', 'efficiency', 'eliminate', 'potential', 'risk', 'corrupt', 'developer', 'code', 'simple', 'implementation', 'partial', 'class', 'compiler', 'perform', 'phase', 'precompilation', 'unify', 'part', 'partial', 'class', 'compilation', 'proceed', 'usual']"
480,Other benefits and effects of the partial class feature include:,"['benefit', 'effect', 'partial', 'class', 'feature', 'include']"
481,"Partial classes have existed in Smalltalk under the name of Class Extensions for considerable time. With the arrival of the .NET framework 2, Microsoft introduced partial classes, supported in both C# 2.0 and Visual Basic 2005. WinRT also supports partial classes.","['partial', 'class', 'exist', 'smalltalk', 'class', 'extensions', 'considerable', 'time', 'arrival', '.net', 'framework', 'microsoft', 'introduce', 'partial', 'class', 'support', '2', 'visual', 'basic', '2005', 'winrt', 'support', 'partial', 'class']"
482,"This simple example, written in Visual Basic .NET, shows how parts of the same class are defined in two different files.","['simple', 'example', 'write', 'visual', 'basic', '.net', 'show', 'part', 'class', 'define', 'different', 'file']"
483,"When compiled, the result is the same as if the two files were written as one, like this:","['compile', 'result', 'file', 'write', 'like']"
484,"In Objective-C, partial classes, also known as categories, may even spread over multiple libraries and executables, like the following example. But a key difference is that Objective-C's categories can overwrite definitions in another interface declaration, and that categories aren't equal to original class definition the first requires the last.45 Instead, .NET partial class can't have conflicting definitions, and all partial definitions are equal to the others.44","['objective', 'partial', 'class', 'know', 'category', 'spread', 'multiple', 'library', 'executable', 'like', 'follow', 'example', 'key', 'difference', 'objective', 'category', 'overwrite', 'definition', 'interface', 'declaration', 'category', 'equal', 'original', 'class', 'definition', 'require', 'last', 'instead', '.net', 'partial', 'class', 'conflicting', 'definition', 'partial', 'definition', 'equal', 'others']"
485,"In user-supplied library, a separate binary from Foundation framework, header file NSData+base64.h:","['user', 'supply', 'library', 'separate', 'binary', 'foundation', 'framework', 'header', 'file', 'nsdata+base64.h']"
486,"And in an app, yet another separate binary file, source code file main.m:","['app', 'separate', 'binary', 'file', 'source', 'code', 'file', 'main.m']"
487,The dispatcher will find both methods called over the NSData instance and invoke both of them correctly.,"['dispatcher', 'find', 'method', 'call', 'nsdata', 'instance', 'invoke', 'correctly']"
488,"Uninstantiable classes allow programmers to group together per-class fields and methods that are accessible at runtime without an instance of the class. Indeed, instantiation is prohibited for this kind of class.","['uninstantiable', 'class', 'allow', 'programmer', 'group', 'class', 'field', 'method', 'accessible', 'runtime', 'instance', 'class', 'instantiation', 'prohibit', 'kind', 'class']"
489,"For example, in C#, a class marked ""static"" can not be instantiated, can only have static members fields, methods, other, may not have instance constructors, and is sealed. 46","['example', 'class', 'mark', 'static', 'instantiate', 'static', 'member', 'field', 'method', 'instance', 'constructor', 'seal']"
490,An unnamed class or anonymous class is a class that is not bound to a name or identifier upon definition.4748 This is analogous to named versus unnamed functions.,"['unnamed', 'class', 'anonymous', 'class', 'class', 'bind', 'identifi', 'definition', 'analogous', 'name', 'versus', 'unnamed', 'function']"
491,The benefits of organizing software into object classes fall into three categories:49,"['benefit', 'organize', 'software', 'object', 'class', 'fall', 'categories']"
492,"Object classes facilitate rapid development because they lessen the semantic gap between the code and the users. System analysts can talk to both developers and users using essentially the same vocabulary, talking about accounts, customers, bills, etc. Object classes often facilitate rapid development because most object-oriented environments come with powerful debugging and testing tools. Instances of classes can be inspected at run time to verify that the system is performing as expected. Also, rather than get dumps of core memory, most object-oriented environments have interpreted debugging capabilities so that the developer can analyze exactly where in the program the error occurred and can see which methods were called to which arguments and with what arguments.50","['object', 'class', 'facilitate', 'rapid', 'development', 'lessen', 'semantic', 'gap', 'code', 'user', 'system', 'analyst', 'talk', 'developer', 'user', 'essentially', 'vocabulary', 'talk', 'account', 'customer', 'bill', 'etc', 'object', 'class', 'facilitate', 'rapid', 'development', 'object', 'orient', 'environment', 'come', 'powerful', 'debug', 'testing', 'tool', 'instance', 'class', 'inspect', 'run', 'time', 'verify', 'system', 'perform', 'expect', 'dump', 'core', 'memory', 'object', 'orient', 'environment', 'interpret', 'debug', 'capability', 'developer', 'analyze', 'exactly', 'program', 'error', 'occur', 'method', 'call', 'argument', 'arguments']"
493,Object classes facilitate ease of maintenance via encapsulation. When developers need to change the behavior of an object they can localize the change to just that object and its component parts. This reduces the potential for unwanted side effects from maintenance enhancements.,"['object', 'class', 'facilitate', 'ease', 'maintenance', 'encapsulation', 'developer', 'need', 'change', 'behavior', 'object', 'localize', 'change', 'object', 'component', 'part', 'reduce', 'potential', 'unwanted', 'effect', 'maintenance', 'enhancement']"
494,Software re-use is also a major benefit of using Object classes. Classes facilitate re-use via inheritance and interfaces. When a new behavior is required it can often be achieved by creating a new class and having that class inherit the default behaviors and data of its superclass and then tailor some aspect of the behavior or data accordingly. Re-use via interfaces also known as methods occurs when another object wants to invoke rather than create a new kind of some object class. This method for re-use removes many of the common errors that can make their way into software when one program re-uses code from another.51,"['software', 'use', 'major', 'benefit', 'object', 'class', 'class', 'facilitate', 'use', 'inheritance', 'interface', 'new', 'behavior', 'require', 'achieve', 'create', 'new', 'class', 'have', 'class', 'inherit', 'default', 'behavior', 'datum', 'superclass', 'tailor', 'aspect', 'behavior', 'data', 'accordingly', 'use', 'interface', 'know', 'method', 'occur', 'object', 'want', 'invoke', 'create', 'new', 'kind', 'object', 'class', 'method', 'use', 'remove', 'common', 'error', 'way', 'software', 'program', 'use', 'code', 'another']"
495,"As a data type, a class is usually considered as a compile-time construct.52 A language or library may also support prototype or factory metaobjects that represent run-time information about classes, or even represent metadata that provides access to reflection facilities and ability to manipulate data structure formats at run-time. Many languages distinguish this kind of run-time type information about classes from a class on the basis that the information is not needed at run-time. Some dynamic languages do not make strict distinctions between run-time and compile-time constructs, and therefore may not distinguish between metaobjects and classes.","['data', 'type', 'class', 'usually', 'consider', 'compile', 'time', 'construct', 'language', 'library', 'support', 'prototype', 'factory', 'metaobject', 'represent', 'run', 'time', 'information', 'class', 'represent', 'metadata', 'provide', 'access', 'reflection', 'facility', 'ability', 'manipulate', 'data', 'structure', 'format', 'run', 'time', 'language', 'distinguish', 'kind', 'run', 'time', 'type', 'information', 'class', 'class', 'basis', 'information', 'need', 'run', 'time', 'dynamic', 'language', 'strict', 'distinction', 'run', 'time', 'compile', 'time', 'construct', 'distinguish', 'metaobject', 'class']"
496,"For example, if Human is a metaobject representing the class Person, then instances of class Person can be created by using the facilities of the Human metaobject.","['example', 'human', 'metaobject', 'represent', 'class', 'person', 'instance', 'class', 'person', 'create', 'facility', 'human', 'metaobject']"
497,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
498,"In object-oriented programming, inheritance is the mechanism of basing an object or class upon another object prototype-based inheritance or class class-based inheritance, retaining similar implementation. Also defined as deriving new classes sub classes from existing ones such as super class or base class and then forming them into a hierarchy of classes. In most class-based object-oriented languages, an object created through inheritance, a ""child object"", acquires all the properties and behaviors of the ""parent object"" , with the exception of: constructors, destructor, overloaded operators and friend functions of the base class. Inheritance allows programmers to create classes that are built upon existing classes,1 to specify a new implementation while maintaining the same behaviors realizing an interface, to reuse code and to independently extend original software via public classes and interfaces. The relationships of objects or classes through inheritance give rise to a directed acyclic graph.","['object', 'orient', 'programming', 'inheritance', 'mechanism', 'base', 'object', 'class', 'object', 'prototype', 'base', 'inheritance', 'class', 'class', 'base', 'inheritance', 'retain', 'similar', 'implementation', 'define', 'derive', 'new', 'class', 'sub', 'class', 'exist', 'one', 'super', 'class', 'base', 'class', 'form', 'hierarchy', 'class', 'class', 'base', 'object', 'orient', 'language', 'object', 'create', 'inheritance', 'child', 'object', 'acquire', 'property', 'behavior', 'parent', 'object', 'exception', 'constructor', 'destructor', 'overloaded', 'operator', 'friend', 'function', 'base', 'class', 'inheritance', 'allow', 'programmer', 'create', 'class', 'build', 'exist', 'classes', 'specify', 'new', 'implementation', 'maintain', 'behavior', 'realize', 'interface', 'reuse', 'code', 'independently', 'extend', 'original', 'software', 'public', 'class', 'interface', 'relationship', 'object', 'class', 'inheritance', 'rise', 'direct', 'acyclic', 'graph']"
499,"An inherited class is called a subclass of its parent class or super class. The term ""inheritance"" is loosely used for both class-based and prototype-based programming, but in narrow use the term is reserved for class-based programming one class inherits from another, with the corresponding technique in prototype-based programming being instead called delegation one object delegates to another. Class-modifying inheritance patterns can be pre-defined according to simple network interface parameters such that inter-language compatibility is preserved.23","['inherit', 'class', 'call', 'subclass', 'parent', 'class', 'super', 'class', 'term', 'inheritance', 'loosely', 'class', 'base', 'prototype', 'base', 'programming', 'narrow', 'use', 'term', 'reserve', 'class', 'base', 'programming', 'class', 'inherit', 'corresponding', 'technique', 'prototype', 'base', 'programming', 'instead', 'call', 'delegation', 'object', 'delegate', 'class', 'modifying', 'inheritance', 'pattern', 'pre', 'define', 'accord', 'simple', 'network', 'interface', 'parameter', 'inter', 'language', 'compatibility', 'preserved']"
500,"Inheritance should not be confused with subtyping.45 In some languages inheritance and subtyping agree,a whereas in others they differ; in general, subtyping establishes an is-a relationship, whereas inheritance only reuses implementation and establishes a syntactic relationship, not necessarily a semantic relationship inheritance does not ensure behavioral subtyping. To distinguish these concepts, subtyping is sometimes referred to as interface inheritance without acknowledging that the specialization of type variables also induces a subtyping relation, whereas inheritance as defined here is known as implementation inheritance or code inheritance.6 Still, inheritance is a commonly used mechanism for establishing subtype relationships.7","['inheritance', 'confuse', 'subtyping', 'language', 'inheritance', 'subtype', 'agree', 'differ', 'general', 'subtype', 'establishe', 'relationship', 'inheritance', 'reuse', 'implementation', 'establish', 'syntactic', 'relationship', 'necessarily', 'semantic', 'relationship', 'inheritance', 'ensure', 'behavioral', 'subtyping', 'distinguish', 'concept', 'subtype', 'refer', 'interface', 'inheritance', 'acknowledge', 'specialization', 'type', 'variable', 'induce', 'subtype', 'relation', 'inheritance', 'define', 'know', 'implementation', 'inheritance', 'code', 'inheritance', 'inheritance', 'commonly', 'mechanism', 'establish', 'subtype', 'relationships']"
501,"Inheritance is contrasted with object composition, where one object contains another object or objects of one class contain objects of another class; see composition over inheritance. Composition implements a has-a relationship, in contrast to the is-a relationship of subtyping.","['inheritance', 'contrast', 'object', 'composition', 'object', 'contain', 'object', 'object', 'class', 'contain', 'object', 'class', 'composition', 'inheritance', 'composition', 'implement', 'relationship', 'contrast', 'relationship', 'subtype']"
502,"In 1966, Tony Hoare presented some remarks on records, and in particular presented the idea of record subclasses, record types with common properties but discriminated by a variant tag and having fields private to the variant.8 Influenced by this, in 1967 Ole-Johan Dahl and Kristen Nygaard presented a design that allowed specifying objects that belonged to different classes but had common properties. The common properties were collected in a superclass, and each superclass could itself potentially have a superclass. The values of a subclass were thus compound objects, consisting of some number of prefix parts belonging to various superclasses, plus a main part belonging to the subclass. These parts were all concatenated together.9 The attributes of a compound object would be accessible by dot notation. This idea was first adopted in the Simula 67 programming language.10 The idea then spread to Smalltalk, C++, Java, Python, and many other languages.","['1966', 'tony', 'hoare', 'present', 'remark', 'record', 'particular', 'present', 'idea', 'record', 'subclass', 'record', 'type', 'common', 'property', 'discriminate', 'variant', 'tag', 'have', 'field', 'private', 'variant', 'influence', '1967', 'ole', 'johan', 'dahl', 'kristen', 'nygaard', 'present', 'design', 'allow', 'specify', 'object', 'belong', 'different', 'class', 'common', 'property', 'common', 'property', 'collect', 'superclass', 'superclass', 'potentially', 'superclass', 'value', 'subclass', 'compound', 'object', 'consist', 'number', 'prefix', 'part', 'belong', 'superclass', 'plus', 'main', 'belong', 'subclass', 'part', 'concatenate', 'together', 'attribute', 'compound', 'object', 'accessible', 'dot', 'notation', 'idea', 'adopt', 'simula', 'programming', 'language', 'idea', 'spread', 'smalltalk', 'c++', 'java', 'python', 'language']"
503,"There are various types of inheritance, based on paradigm and specific language.11","['type', 'inheritance', 'base', 'paradigm', 'specific', 'language']"
504,"""Multiple inheritance ... was widely supposed to be very difficult to implement efficiently. For example, in a summary of C++ in his book on Objective C, Brad Cox actually claimed that adding multiple inheritance to C++ was impossible. Thus, multiple inheritance seemed more of a challenge. Since I had considered multiple inheritance as early as 1982 and found a simple and efficient implementation technique in 1984, I couldn't resist the challenge. I suspect this to be the only case in which fashion affected the sequence of events.""12","['multiple', 'inheritance', 'widely', 'suppose', 'difficult', 'implement', 'efficiently', 'example', 'summary', 'c++', 'book', 'objective', 'brad', 'cox', 'actually', 'claim', 'add', 'multiple', 'inheritance', 'c++', 'impossible', 'multiple', 'inheritance', 'challenge', 'consider', 'multiple', 'inheritance', 'early', '1982', 'find', 'simple', 'efficient', 'implementation', 'technique', '1984', 'resist', 'challenge', 'suspect', 'case', 'fashion', 'affect', 'sequence', 'event', '12']"
505,"Subclasses, derived classes, heir classes, or child classes are modular derivative classes that inherits one or more language entities from one or more other classes called superclass, base classes, or parent classes. The semantics of class inheritance vary from language to language, but commonly the subclass automatically inherits the instance variables and member functions of its superclasses.","['subclass', 'derive', 'class', 'heir', 'class', 'child', 'class', 'modular', 'derivative', 'class', 'inherit', 'language', 'entity', 'class', 'call', 'superclass', 'base', 'class', 'parent', 'class', 'semantic', 'class', 'inheritance', 'vary', 'language', 'language', 'commonly', 'subclass', 'automatically', 'inherit', 'instance', 'variable', 'member', 'function', 'superclass']"
506,The general form of defining a derived class is:13,"['general', 'form', 'define', 'derive', 'class', 'is']"
507,"Some languages support also the inheritance of other constructs. For example, in Eiffel, contracts that define the specification of a class are also inherited by heirs. The superclass establishes a common interface and foundational functionality, which specialized subclasses can inherit, modify, and supplement. The software inherited by a subclass is considered reused in the subclass. A reference to an instance of a class may actually be referring to one of its subclasses. The actual class of the object being referenced is impossible to predict at compile-time. A uniform interface is used to invoke the member functions of objects of a number of different classes. Subclasses may replace superclass functions with entirely new functions that must share the same method signature.","['language', 'support', 'inheritance', 'construct', 'example', 'eiffel', 'contract', 'define', 'specification', 'class', 'inherit', 'heir', 'superclass', 'establish', 'common', 'interface', 'foundational', 'functionality', 'specialized', 'subclass', 'inherit', 'modify', 'supplement', 'software', 'inherit', 'subclass', 'consider', 'reuse', 'subclass', 'reference', 'instance', 'class', 'actually', 'refer', 'subclass', 'actual', 'class', 'object', 'reference', 'impossible', 'predict', 'compile', 'time', 'uniform', 'interface', 'invoke', 'member', 'function', 'object', 'number', 'different', 'class', 'subclass', 'replace', 'superclass', 'function', 'entirely', 'new', 'function', 'share', 'method', 'signature']"
508,"In some languages a class may be declared as non-subclassable by adding certain class modifiers to the class declaration. Examples include the final keyword in Java and C++11 onwards or the sealed keyword in C#. Such modifiers are added to the class declaration before the class keyword and the class identifier declaration. Such non-subclassable classes restrict reusability, particularly when developers only have access to precompiled binaries and not source code.","['language', 'class', 'declare', 'non', 'subclassable', 'add', 'certain', 'class', 'modifier', 'class', 'declaration', 'example', 'include', 'final', 'keyword', 'java', 'c++11', 'onwards', 'seal', 'keyword', 'modifier', 'add', 'class', 'declaration', 'class', 'keyword', 'class', 'identifi', 'declaration', 'non', 'subclassable', 'class', 'restrict', 'reusability', 'particularly', 'developer', 'access', 'precompile', 'binary', 'source', 'code']"
509,"A non-subclassable class has no subclasses, so it can be easily deduced at compile time that references or pointers to objects of that class are actually referencing instances of that class and not instances of subclasses they don't exist or instances of superclasses upcasting a reference type violates the type system. Because the exact type of the object being referenced is known before execution, early binding also called static dispatch can be used instead of late binding also called dynamic dispatch, which requires one or more virtual method table lookups depending on whether multiple inheritance or only single inheritance are supported in the programming language that is being used.","['non', 'subclassable', 'class', 'subclass', 'easily', 'deduce', 'compile', 'time', 'reference', 'pointer', 'object', 'class', 'actually', 'reference', 'instance', 'class', 'instance', 'subclass', 'exist', 'instance', 'superclass', 'upcaste', 'reference', 'type', 'violate', 'type', 'system', 'exact', 'type', 'object', 'reference', 'know', 'execution', 'early', 'bind', 'call', 'static', 'dispatch', 'instead', 'late', 'binding', 'call', 'dynamic', 'dispatch', 'require', 'virtual', 'method', 'table', 'lookup', 'depend', 'multiple', 'inheritance', 'single', 'inheritance', 'support', 'programming', 'language']"
510,"Just as classes may be non-subclassable, method declarations may contain method modifiers that prevent the method from being overridden i.e. replaced with a new function with the same name and type signature in a subclass. A private method is un-overridable simply because it is not accessible by classes other than the class it is a member function of this is not true for C++, though. A final method in Java, a sealed method in C# or a frozen feature in Eiffel cannot be overridden.","['class', 'non', 'subclassable', 'method', 'declaration', 'contain', 'method', 'modifier', 'prevent', 'method', 'overridden', 'i.e.', 'replace', 'new', 'function', 'type', 'signature', 'subclass', 'private', 'method', 'overridable', 'simply', 'accessible', 'class', 'class', 'member', 'function', 'true', 'c++', 'final', 'method', 'java', 'seal', 'method', 'frozen', 'feature', 'eiffel', 'overridden']"
511,"If the superclass method is a virtual method, then invocations of the superclass method will be dynamically dispatched. Some languages require that methods be specifically declared as virtual e.g. C++, and in others, all methods are virtual e.g. Java. An invocation of a non-virtual method will always be statically dispatched i.e. the address of the function call is determined at compile-time. Static dispatch is faster than dynamic dispatch and allows optimizations such as inline expansion.","['superclass', 'method', 'virtual', 'method', 'invocation', 'superclass', 'method', 'dynamically', 'dispatch', 'language', 'require', 'method', 'specifically', 'declare', 'virtual', 'e.g.', 'c++', 'method', 'virtual', 'e.g.', 'java', 'invocation', 'non', 'virtual', 'method', 'statically', 'dispatch', 'i.e.', 'address', 'function', 'determine', 'compile', 'time', 'static', 'dispatch', 'fast', 'dynamic', 'dispatch', 'allow', 'optimization', 'inline', 'expansion']"
512,"The following table shows which variables and functions get inherited dependent on the visibility given when deriving the class, using the terminology established by C++.14","['following', 'table', 'show', 'variable', 'function', 'inherit', 'dependent', 'visibility', 'give', 'derive', 'class', 'terminology', 'establish', 'c++']"
513,Inheritance is used to co-relate two or more classes to each other.,"['inheritance', 'relate', 'class']"
514,"Many object-oriented programming languages permit a class or object to replace the implementation of an aspect—typically a behavior—that it has inherited. This process is called overriding. Overriding introduces a complication: which version of the behavior does an instance of the inherited class use—the one that is part of its own class, or the one from the parent base class? The answer varies between programming languages, and some languages provide the ability to indicate that a particular behavior is not to be overridden and should behave as defined by the base class. For instance, in C#, the base method or property can only be overridden in a subclass if it is marked with the virtual, abstract, or override modifier, while in programming languages such as Java, different methods can be called to override other methods.15 An alternative to overriding is hiding the inherited code.","['object', 'orient', 'programming', 'language', 'permit', 'class', 'object', 'replace', 'implementation', 'aspect', 'typically', 'behavior', 'inherit', 'process', 'call', 'overriding', 'override', 'introduce', 'complication', 'version', 'behavior', 'instance', 'inherit', 'class', 'use', 'class', 'parent', 'base', 'class', 'answer', 'vary', 'programming', 'language', 'language', 'provide', 'ability', 'indicate', 'particular', 'behavior', 'overridden', 'behave', 'define', 'base', 'class', 'instance', 'base', 'method', 'property', 'overridden', 'subclass', 'mark', 'virtual', 'abstract', 'override', 'modifier', 'programming', 'language', 'java', 'different', 'method', 'call', 'override', 'methods', 'alternative', 'override', 'hide', 'inherit', 'code']"
515,"Implementation inheritance is the mechanism whereby a subclass re-uses code in a base class. By default the subclass retains all of the operations of the base class, but the subclass may override some or all operations, replacing the base-class implementation with its own.","['implementation', 'inheritance', 'mechanism', 'subclass', 'use', 'code', 'base', 'class', 'default', 'subclass', 'retain', 'operation', 'base', 'class', 'subclass', 'override', 'operation', 'replace', 'base', 'class', 'implementation']"
516,"In the following Python example, subclasses .mw-parser-output .monospacedfont-family:monospace,monospaceSquareSumComputer and CubeSumComputer override the transform method of the base class SumComputer. The base class comprises operations to compute the sum of the squares between two integers. The subclass re-uses all of the functionality of the base class with the exception of the operation that transforms a number into its square, replacing it with an operation that transforms a number into its square and cube respectively. The subclasses therefore compute the sum of the squares/cubes between two integers.","['follow', 'python', 'example', 'subclasse', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacesquaresumcomputer', 'cubesumcomputer', 'override', 'transform', 'method', 'base', 'class', 'sumcomputer', 'base', 'class', 'comprise', 'operation', 'compute', 'sum', 'square', 'integer', 'subclass', 'use', 'functionality', 'base', 'class', 'exception', 'operation', 'transform', 'number', 'square', 'replace', 'operation', 'transform', 'number', 'square', 'cube', 'respectively', 'subclass', 'compute', 'sum', 'square', 'cube', 'integer']"
517,Below is an example of Python.,"['example', 'python']"
518,"In most quarters, class inheritance for the sole purpose of code reuse has fallen out of favor.citation needed The primary concern is that implementation inheritance does not provide any assurance of polymorphic substitutability—an instance of the reusing class cannot necessarily be substituted for an instance of the inherited class. An alternative technique, explicit delegation, requires more programming effort, but avoids the substitutability issue.citation needed In C++ private inheritance can be used as a form of implementation inheritance without substitutability. Whereas public inheritance represents an ""is-a"" relationship and delegation represents a ""has-a"" relationship, private and protected inheritance can be thought of as an ""is implemented in terms of"" relationship.16","['quarter', 'class', 'inheritance', 'sole', 'purpose', 'code', 'reuse', 'fall', 'favor.citation', 'need', 'primary', 'concern', 'implementation', 'inheritance', 'provide', 'assurance', 'polymorphic', 'substitutability', 'instance', 'reuse', 'class', 'necessarily', 'substitute', 'instance', 'inherit', 'class', 'alternative', 'technique', 'explicit', 'delegation', 'require', 'programming', 'effort', 'avoid', 'substitutability', 'issue.citation', 'need', 'c++', 'private', 'inheritance', 'form', 'implementation', 'inheritance', 'substitutability', 'public', 'inheritance', 'represent', 'relationship', 'delegation', 'represent', 'relationship', 'private', 'protect', 'inheritance', 'think', 'implement', 'term', 'relationship']"
519,"Another frequent use of inheritance is to guarantee that classes maintain a certain common interface; that is, they implement the same methods. The parent class can be a combination of implemented operations and operations that are to be implemented in the child classes. Often, there is no interface change between the supertype and subtype- the child implements the behavior described instead of its parent class.17","['frequent', 'use', 'inheritance', 'guarantee', 'class', 'maintain', 'certain', 'common', 'interface', 'implement', 'method', 'parent', 'class', 'combination', 'implement', 'operation', 'operation', 'implement', 'child', 'class', 'interface', 'change', 'supertype', 'subtype-', 'child', 'implement', 'behavior', 'describe', 'instead', 'parent', 'class']"
520,"Inheritance is similar to but distinct from subtyping.4 Subtyping enables a given type to be substituted for another type or abstraction, and is said to establish an is-a relationship between the subtype and some existing abstraction, either implicitly or explicitly, depending on language support. The relationship can be expressed explicitly via inheritance in languages that support inheritance as a subtyping mechanism. For example, the following C++ code establishes an explicit inheritance relationship between classes B and A, where B is both a subclass and a subtype of A, and can be used as an A wherever a B is specified via a reference, a pointer or the object itself.","['inheritance', 'similar', 'distinct', 'subtyping', 'subtype', 'enable', 'give', 'type', 'substitute', 'type', 'abstraction', 'say', 'establish', 'relationship', 'subtype', 'exist', 'abstraction', 'implicitly', 'explicitly', 'depend', 'language', 'support', 'relationship', 'express', 'explicitly', 'inheritance', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'example', 'following', 'c++', 'code', 'establish', 'explicit', 'inheritance', 'relationship', 'class', 'subclass', 'subtype', 'specify', 'reference', 'pointer', 'object']"
521,"In programming languages that do not support inheritance as a subtyping mechanism, the relationship between a base class and a derived class is only a relationship between implementations a mechanism for code reuse, as compared to a relationship between types. Inheritance, even in programming languages that support inheritance as a subtyping mechanism, does not necessarily entail behavioral subtyping. It is entirely possible to derive a class whose object will behave incorrectly when used in a context where the parent class is expected; see the Liskov substitution principle. 18 Compare connotation/denotation. In some OOP languages, the notions of code reuse and subtyping coincide because the only way to declare a subtype is to define a new class that inherits the implementation of another.","['programming', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'relationship', 'base', 'class', 'derive', 'class', 'relationship', 'implementation', 'mechanism', 'code', 'reuse', 'compare', 'relationship', 'type', 'inheritance', 'programming', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'necessarily', 'entail', 'behavioral', 'subtyping', 'entirely', 'possible', 'derive', 'class', 'object', 'behave', 'incorrectly', 'context', 'parent', 'class', 'expect', 'liskov', 'substitution', 'principle', 'compare', 'connotation', 'denotation', 'oop', 'language', 'notion', 'code', 'reuse', 'subtype', 'coincide', 'way', 'declare', 'subtype', 'define', 'new', 'class', 'inherit', 'implementation']"
522,Using inheritance extensively in designing a program imposes certain constraints.,"['inheritance', 'extensively', 'design', 'program', 'impose', 'certain', 'constraint']"
523,"For example, consider a class Person that contains a person's name, date of birth, address and phone number. We can define a subclass of Person called Student that contains the person's grade point average and classes taken, and another subclass of Person called Employee that contains the person's job-title, employer, and salary.","['example', 'consider', 'class', 'person', 'contain', 'person', 'date', 'birth', 'address', 'phone', 'number', 'define', 'subclass', 'person', 'call', 'student', 'contain', 'person', 'grade', 'point', 'average', 'class', 'take', 'subclass', 'person', 'call', 'employee', 'contain', 'person', 'job', 'title', 'employer', 'salary']"
524,"In defining this inheritance hierarchy we have already defined certain restrictions, not all of which are desirable:","['define', 'inheritance', 'hierarchy', 'define', 'certain', 'restriction', 'desirable']"
525,"The composite reuse principle is an alternative to inheritance. This technique supports polymorphism and code reuse by separating behaviors from the primary class hierarchy and including specific behavior classes as required in any business domain class. This approach avoids the static nature of a class hierarchy by allowing behavior modifications at run time and allows one class to implement behaviors buffet-style, instead of being restricted to the behaviors of its ancestor classes.","['composite', 'reuse', 'principle', 'alternative', 'inheritance', 'technique', 'support', 'polymorphism', 'code', 'reuse', 'separate', 'behavior', 'primary', 'class', 'hierarchy', 'include', 'specific', 'behavior', 'class', 'require', 'business', 'domain', 'class', 'approach', 'avoid', 'static', 'nature', 'class', 'hierarchy', 'allow', 'behavior', 'modification', 'run', 'time', 'allow', 'class', 'implement', 'behavior', 'buffet', 'style', 'instead', 'restrict', 'behavior', 'ancestor', 'class']"
526,"Implementation inheritance is controversial among programmers and theoreticians of object-oriented programming since at least the 1990s. Among them are the authors of Design Patterns, who advocate interface inheritance instead, and favor composition over inheritance. For example, the decorator pattern as mentioned above has been proposed to overcome the static nature of inheritance between classes. As a more fundamental solution to the same problem, role-oriented programming introduces a distinct relationship, played-by, combining properties of inheritance and composition into a new concept.citation needed","['implementation', 'inheritance', 'controversial', 'programmer', 'theoretician', 'object', 'orient', 'programming', '1990s', 'author', 'design', 'patterns', 'advocate', 'interface', 'inheritance', 'instead', 'favor', 'composition', 'inheritance', 'example', 'decorator', 'pattern', 'mention', 'propose', 'overcome', 'static', 'nature', 'inheritance', 'class', 'fundamental', 'solution', 'problem', 'role', 'orient', 'programming', 'introduce', 'distinct', 'relationship', 'play', 'combine', 'property', 'inheritance', 'composition', 'new', 'concept.citation', 'need']"
527,"According to Allen Holub, the main problem with implementation inheritance is that it introduces unnecessary coupling in the form of the ""fragile base class problem"":6 modifications to the base class implementation can cause inadvertent behavioral changes in subclasses. Using interfaces avoids this problem because no implementation is shared, only the API.19 Another way of stating this is that ""inheritance breaks encapsulation"".20 The problem surfaces clearly in open object-oriented systems such as frameworks, where client code is expected to inherit from system-supplied classes and then substituted for the system's classes in its algorithms.6","['accord', 'allen', 'holub', 'main', 'problem', 'implementation', 'inheritance', 'introduce', 'unnecessary', 'coupling', 'form', 'fragile', 'base', 'class', 'problem', 'modification', 'base', 'class', 'implementation', 'cause', 'inadvertent', 'behavioral', 'change', 'subclass', 'interface', 'avoid', 'problem', 'implementation', 'share', 'api', 'way', 'state', 'inheritance', 'break', 'encapsulation', 'problem', 'surface', 'clearly', 'open', 'object', 'orient', 'system', 'framework', 'client', 'code', 'expect', 'inherit', 'system', 'supply', 'class', 'substitute', 'system', 'class', 'algorithms']"
528,"Reportedly, Java inventor James Gosling has spoken against implementation inheritance, stating that he would not include it if he were to redesign Java.19 Language designs that decouple inheritance from subtyping interface inheritance appeared as early as 1990;21 a modern example of this is the Go programming language.","['reportedly', 'java', 'inventor', 'james', 'gosling', 'speak', 'implementation', 'inheritance', 'state', 'include', 'redesign', 'java', 'language', 'design', 'decouple', 'inheritance', 'subtype', 'interface', 'inheritance', 'appear', 'early', '1990', 'modern', 'example', 'programming', 'language']"
529,"Complex inheritance, or inheritance used within an insufficiently mature design, may lead to the yo-yo problem. When inheritance was used as a primary approach to structure programs in the late 1990s, developers tended to break code into more layers of inheritance as the system functionality grew. If a development team combined multiple layers of inheritance with the single responsibility principle, this resulted in many very thin layers of code, with many layers consisting of only 1 or 2 lines of actual code.citation needed Too many layers make debugging a significant challenge, as it becomes hard to determine which layer needs to be debugged.","['complex', 'inheritance', 'inheritance', 'insufficiently', 'mature', 'design', 'lead', 'problem', 'inheritance', 'primary', 'approach', 'structure', 'program', 'late', '1990', 'developer', 'tend', 'break', 'code', 'layer', 'inheritance', 'system', 'functionality', 'grow', 'development', 'team', 'combine', 'multiple', 'layer', 'inheritance', 'single', 'responsibility', 'principle', 'result', 'thin', 'layer', 'code', 'layer', 'consist', 'line', 'actual', 'code.citation', 'need', 'layer', 'debug', 'significant', 'challenge', 'hard', 'determine', 'layer', 'need', 'debug']"
530,"Another issue with inheritance is that subclasses must be defined in code, which means that program users cannot add new subclasses at runtime. Other design patterns such as Entity–component–system allow program users to define variations of an entity at runtime.","['issue', 'inheritance', 'subclass', 'define', 'code', 'mean', 'program', 'user', 'add', 'new', 'subclass', 'runtime', 'design', 'pattern', 'entity', 'component', 'system', 'allow', 'program', 'user', 'define', 'variation', 'entity', 'runtime']"
531,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
532,"A method in object-oriented programming OOP is a procedure associated with a message and an object. An object consists of state data and behavior; these compose an interface, which specifies how the object may be utilized by any of its various consumers. A method is a behavior of an object parametrized by a consumer.","['method', 'object', 'orient', 'programming', 'oop', 'procedure', 'associate', 'message', 'object', 'object', 'consist', 'state', 'datum', 'behavior', 'compose', 'interface', 'specify', 'object', 'utilize', 'consumer', 'method', 'behavior', 'object', 'parametrize', 'consumer']"
533,"Data is represented as properties of the object, and behaviors are represented as methods. For example, a Window object could have methods such as open and close, while its state whether it is open or closed at any given point in time would be a property.","['datum', 'represent', 'property', 'object', 'behavior', 'represent', 'method', 'example', 'window', 'object', 'method', 'open', 'close', 'state', 'open', 'close', 'give', 'point', 'time', 'property']"
534,"In class-based programming, methods are defined within a class, and objects are instances of a given class. One of the most important capabilities that a method provides is method overriding - the same name e.g., area can be used for multiple different kinds of classes. This allows the sending objects to invoke behaviors and to delegate the implementation of those behaviors to the receiving object. A method in Java programming sets the behavior of a class object. For example, an object can send an area message to another object and the appropriate formula is invoked whether the receiving object is a rectangle, circle, triangle, etc.","['class', 'base', 'programming', 'method', 'define', 'class', 'object', 'instance', 'give', 'class', 'important', 'capability', 'method', 'provide', 'method', 'override', 'e.g.', 'area', 'multiple', 'different', 'kind', 'class', 'allow', 'send', 'object', 'invoke', 'behavior', 'delegate', 'implementation', 'behavior', 'receiving', 'object', 'method', 'java', 'programming', 'set', 'behavior', 'class', 'object', 'example', 'object', 'send', 'area', 'message', 'object', 'appropriate', 'formula', 'invoke', 'receiving', 'object', 'rectangle', 'circle', 'triangle', 'etc']"
535,Methods also provide the interface that other classes use to access and modify the properties of an object; this is known as encapsulation. Encapsulation and overriding are the two primary distinguishing features between methods and procedure calls.1,"['method', 'provide', 'interface', 'class', 'use', 'access', 'modify', 'property', 'object', 'know', 'encapsulation', 'encapsulation', 'override', 'primary', 'distinguish', 'feature', 'method', 'procedure', 'calls']"
536,"Method overriding and overloading are two of the most significant ways that a method differs from a conventional procedure or function call. Overriding refers to a subclass redefining the implementation of a method of its superclass. For example, findArea may be a method defined on a shape class,2 triangle, etc. would each define the appropriate formula to calculate their area. The idea is to look at objects as ""black boxes"" so that changes to the internals of the object can be made with minimal impact on the other objects that use it. This is known as encapsulation and is meant to make code easier to maintain and re-use.","['method', 'override', 'overloading', 'significant', 'way', 'method', 'differ', 'conventional', 'procedure', 'function', 'override', 'refer', 'subclass', 'redefine', 'implementation', 'method', 'superclass', 'example', 'findarea', 'method', 'define', 'shape', 'class', 'triangle', 'etc', 'define', 'appropriate', 'formula', 'calculate', 'area', 'idea', 'look', 'object', 'black', 'box', 'change', 'internal', 'object', 'minimal', 'impact', 'object', 'use', 'know', 'encapsulation', 'mean', 'code', 'easy', 'maintain', 'use']"
537,"Method overloading, on the other hand, refers to differentiating the code used to handle a message based on the parameters of the method. If one views the receiving object as the first parameter in any method then overriding is just a special case of overloading where the selection is based only on the first argument. The following simple Java example illustrates the difference:","['method', 'overloading', 'hand', 'refer', 'differentiate', 'code', 'handle', 'message', 'base', 'parameter', 'method', 'view', 'receiving', 'object', 'parameter', 'method', 'override', 'special', 'case', 'overload', 'selection', 'base', 'argument', 'follow', 'simple', 'java', 'example', 'illustrate', 'difference']"
538,"Accessor methods are used to read the data values of an object. Mutator methods are used to modify the data of an object. Manager methods are used to initialize and destroy objects of a class, e.g. constructors and destructors.","['accessor', 'method', 'read', 'datum', 'value', 'object', 'mutator', 'method', 'modify', 'datum', 'object', 'manager', 'method', 'initialize', 'destroy', 'object', 'class', 'e.g.', 'constructor', 'destructor']"
539,"These methods provide an abstraction layer that facilitates encapsulation and modularity. For example, if a bank-account class provides a getBalance accessor method to retrieve the current balance rather than directly accessing the balance data fields, then later revisions of the same code can implement a more complex mechanism for balance retrieval e.g., a database fetch, without the dependent code needing to be changed. The concepts of encapsulation and modularity are not unique to object-oriented programming. Indeed, in many ways the object-oriented approach is simply the logical extension of previous paradigms such as abstract data types and structured programming.3","['method', 'provide', 'abstraction', 'layer', 'facilitate', 'encapsulation', 'modularity', 'example', 'bank', 'account', 'class', 'provide', 'getbalance', 'accessor', 'method', 'retrieve', 'current', 'balance', 'directly', 'access', 'balance', 'datum', 'field', 'later', 'revision', 'code', 'implement', 'complex', 'mechanism', 'balance', 'retrieval', 'e.g.', 'database', 'fetch', 'dependent', 'code', 'need', 'change', 'concept', 'encapsulation', 'modularity', 'unique', 'object', 'orient', 'programming', 'way', 'object', 'orient', 'approach', 'simply', 'logical', 'extension', 'previous', 'paradigms', 'abstract', 'datum', 'type', 'structure', 'programming']"
540,"A constructor is a method that is called at the beginning of an object's lifetime to create and initialize the object, a process called construction or instantiation. Initialization may include an acquisition of resources. Constructors may have parameters but usually do not return values in most languages. See the following example in Java:","['constructor', 'method', 'call', 'beginning', 'object', 'lifetime', 'create', 'initialize', 'object', 'process', 'call', 'construction', 'instantiation', 'initialization', 'include', 'acquisition', 'resource', 'constructor', 'parameter', 'usually', 'return', 'value', 'language', 'follow', 'example', 'java']"
541,"A destructor is a method that is called automatically at the end of an object's lifetime, a process called destruction. Destruction in most languages does not allow destructor method arguments nor return values. Destruction can be implemented so as to perform cleanup chores and other tasks at object destruction.","['destructor', 'method', 'call', 'automatically', 'end', 'object', 'lifetime', 'process', 'call', 'destruction', 'destruction', 'language', 'allow', 'destructor', 'method', 'argument', 'return', 'value', 'destruction', 'implement', 'perform', 'cleanup', 'chore', 'task', 'object', 'destruction']"
542,"In garbage-collected languages, such as Java, C#, and Python, destructors are known as finalizers. They have a similar purpose and function to destructors, but because of the differences between languages that utilize garbage-collection and languages with manual memory management, the sequence in which they are called is different.","['garbage', 'collect', 'language', 'java', 'python', 'destructor', 'know', 'finalizer', 'similar', 'purpose', 'function', 'destructor', 'difference', 'language', 'utilize', 'garbage', 'collection', 'language', 'manual', 'memory', 'management', 'sequence', 'call', 'different']"
543,An abstract method is one with only a signature and no implementation body. It is often used to specify that a subclass must provide an implementation of the method. Abstract methods are used to specify interfaces in some programming languages.4,"['abstract', 'method', 'signature', 'implementation', 'body', 'specify', 'subclass', 'provide', 'implementation', 'method', 'abstract', 'method', 'specify', 'interface', 'programming', 'languages']"
544,The following Java code shows an abstract class that needs to be extended:,"['follow', 'java', 'code', 'show', 'abstract', 'class', 'need', 'extend']"
545,The following subclass extends the main class:,"['following', 'subclass', 'extend', 'main', 'class']"
546,"If a subclass provides an implementation for an abstract method, another subclass can make it abstract again. This is called reabstraction.","['subclass', 'provide', 'implementation', 'abstract', 'method', 'subclass', 'abstract', 'call', 'reabstraction']"
547,"In practice, this is rarely used.","['practice', 'rarely']"
548,"In C#, a virtual method can be overridden with an abstract method. This also applies to Java, where all non-private methods are virtual.","['virtual', 'method', 'overridden', 'abstract', 'method', 'apply', 'java', 'non', 'private', 'method', 'virtual']"
549,"Interfaces' default methods can also be reabstracted, requiring subclasses to implement them. This also applies to Java.","['interface', 'default', 'method', 'reabstracte', 'require', 'subclass', 'implement', 'apply', 'java']"
550,"Class methods are methods that are called on a class rather than an instance. They are typically used as part of an object meta-model. I.e, for each class, defined an instance of the class object in the meta-model is created. Meta-model protocols allow classes to be created and deleted. In this sense, they provide the same functionality as constructors and destructors described above. But in some languages such as the Common Lisp Object System CLOS the meta-model allows the developer to dynamically alter the object model at run time: e.g., to create new classes, redefine the class hierarchy, modify properties, etc.","['class', 'method', 'method', 'call', 'class', 'instance', 'typically', 'object', 'meta', 'model', 'i.e', 'class', 'define', 'instance', 'class', 'object', 'meta', 'model', 'create', 'meta', 'model', 'protocol', 'allow', 'class', 'create', 'delete', 'sense', 'provide', 'functionality', 'constructor', 'destructor', 'describe', 'language', 'common', 'lisp', 'object', 'system', 'clos', 'meta', 'model', 'allow', 'developer', 'dynamically', 'alter', 'object', 'model', 'run', 'time', 'e.g.', 'create', 'new', 'class', 'redefine', 'class', 'hierarchy', 'modify', 'property', 'etc']"
551,"Special methods are very language-specific and a language may support none, some, or all of the special methods defined here. A language's compiler may automatically generate default special methods or a programmer may be allowed to optionally define special methods. Most special methods cannot be directly called, but rather the compiler generates code to call them at appropriate times.","['special', 'method', 'language', 'specific', 'language', 'support', 'special', 'method', 'define', 'language', 'compiler', 'automatically', 'generate', 'default', 'special', 'method', 'programmer', 'allow', 'optionally', 'define', 'special', 'method', 'special', 'method', 'directly', 'call', 'compiler', 'generate', 'code', 'appropriate', 'time']"
552,"Static methods are meant to be relevant to all the instances of a class rather than to any specific instance. They are similar to static variables in that sense. An example would be a static method to sum the values of all the variables of every instance of a class. For example, if there were a Product class it might have a static method to compute the average price of all products.","['static', 'method', 'mean', 'relevant', 'instance', 'class', 'specific', 'instance', 'similar', 'static', 'variable', 'sense', 'example', 'static', 'method', 'sum', 'value', 'variable', 'instance', 'class', 'example', 'product', 'class', 'static', 'method', 'compute', 'average', 'price', 'product']"
553,"In Java, a commonly used static method is:","['java', 'commonly', 'static', 'method']"
554,This static method has no owning object and does not run on an instance. It receives all information from its arguments.2,"['static', 'method', 'own', 'object', 'run', 'instance', 'receive', 'information', 'arguments']"
555,"A static method can be invoked even if no instances of the class exist yet. Static methods are called ""static"" because they are resolved at compile time based on the class they are called on and not dynamically as in the case with instance methods, which are resolved polymorphically based on the runtime type of the object.","['static', 'method', 'invoke', 'instance', 'class', 'exist', 'static', 'method', 'call', 'static', 'resolve', 'compile', 'time', 'base', 'class', 'call', 'dynamically', 'case', 'instance', 'method', 'resolve', 'polymorphically', 'base', 'runtime', 'type', 'object']"
556,Copy-assignment operators define actions to be performed by the compiler when a class object is assigned to a class object of the same type.,"['copy', 'assignment', 'operator', 'define', 'action', 'perform', 'compiler', 'class', 'object', 'assign', 'class', 'object', 'type']"
557,Operator methods define or redefine operator symbols and define the operations to be performed with the symbol and the associated method parameters. C++ example:,"['operator', 'method', 'define', 'redefine', 'operator', 'symbol', 'define', 'operation', 'perform', 'symbol', 'associate', 'method', 'parameter', 'c++', 'example']"
558,"Some procedural languages were extended with object-oriented capabilities to leverage the large skill sets and legacy code for those languages but still provide the benefits of object-oriented development. Perhaps the most well-known example is C++, an object-oriented extension of the C programming language. Due to the design requirements to add the object-oriented paradigm on to an existing procedural language, message passing in C++ has some unique capabilities and terminologies. For example, in C++ a method is known as a member function. C++ also has the concept of virtual functions which are member functions that can be overridden in derived classes and allow for dynamic dispatch.","['procedural', 'language', 'extend', 'object', 'orient', 'capability', 'leverage', 'large', 'skill', 'set', 'legacy', 'code', 'language', 'provide', 'benefit', 'object', 'orient', 'development', 'know', 'example', 'c++', 'object', 'orient', 'extension', 'programming', 'language', 'design', 'requirement', 'add', 'object', 'orient', 'paradigm', 'exist', 'procedural', 'language', 'message', 'pass', 'c++', 'unique', 'capability', 'terminology', 'example', 'c++', 'method', 'know', 'member', 'function', 'c++', 'concept', 'virtual', 'function', 'member', 'function', 'overridden', 'derive', 'class', 'allow', 'dynamic', 'dispatch']"
559,"Virtual functions are the means by which a C++ class can achieve polymorphic behavior. Non-virtual member functions, or regular methods, are those that do not participate in polymorphism.","['virtual', 'function', 'mean', 'c++', 'class', 'achieve', 'polymorphic', 'behavior', 'non', 'virtual', 'member', 'function', 'regular', 'method', 'participate', 'polymorphism']"
560,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
561,"In computer science, an object can be a variable, a data structure, a function, or a method. As regions of memory, they contain value and are referenced by identifiers.","['computer', 'science', 'object', 'variable', 'data', 'structure', 'function', 'method', 'region', 'memory', 'contain', 'value', 'reference', 'identifier']"
562,"In the object-oriented programming paradigm, object can be a combination of variables, functions, and data structures; in particular in class-based variations of the paradigm it refers to a particular instance of a class.","['object', 'orient', 'programming', 'paradigm', 'object', 'combination', 'variable', 'function', 'data', 'structure', 'particular', 'class', 'base', 'variation', 'paradigm', 'refer', 'particular', 'instance', 'class']"
563,"In the relational model of database management, an object can be a table or column, or an association between data and a database entity such as relating a person's age to a specific person.1","['relational', 'model', 'database', 'management', 'object', 'table', 'column', 'association', 'datum', 'database', 'entity', 'relate', 'person', 'age', 'specific', 'person']"
564,"An important distinction in programming languages is the difference between an object-oriented language and an object-based language. A language is usually considered object-based if it includes the basic capabilities for an object: identity, properties, and attributes. A language is considered object-oriented if it is object-based and also has the capability of polymorphism, inheritance, encapsulation, and, possibly, composition. Polymorphism refers to the ability to overload the name of a function with multiple behaviors based on which objects are passed to it. Conventional message passing discriminates only on the first object and considers that to be ""sending a message"" to that object. However, some object-oriented programming languages such as Flavors and the Common Lisp Object System CLOS enable discriminating on more than the first parameter of the function.2 Inheritance is the ability to subclass an object class, to create a new class that is a subclass of an existing one and inherits all the data constraints and behaviors of its parents but also adds new and/or changes one or more of them.34","['important', 'distinction', 'programming', 'language', 'difference', 'object', 'orient', 'language', 'object', 'base', 'language', 'language', 'usually', 'consider', 'object', 'base', 'include', 'basic', 'capability', 'object', 'identity', 'property', 'attribute', 'language', 'consider', 'object', 'orient', 'object', 'base', 'capability', 'polymorphism', 'inheritance', 'encapsulation', 'possibly', 'composition', 'polymorphism', 'refer', 'ability', 'overload', 'function', 'multiple', 'behavior', 'base', 'object', 'pass', 'conventional', 'message', 'pass', 'discriminate', 'object', 'consider', 'send', 'message', 'object', 'object', 'orient', 'programming', 'language', 'flavor', 'common', 'lisp', 'object', 'system', 'clos', 'enable', 'discriminate', 'parameter', 'function', 'inheritance', 'ability', 'subclass', 'object', 'class', 'create', 'new', 'class', 'subclass', 'exist', 'inherit', 'datum', 'constraint', 'behavior', 'parent', 'add', 'new', 'change', 'them']"
565,Object-oriented programming is an approach to designing modular reusable software systems. The object-oriented approach is an evolution of good design practices that go back to the very beginning of computer programming. Object-orientation is simply the logical extension of older techniques such as structured programming and abstract data types. An object is an abstract data type with the addition of polymorphism and inheritance.,"['object', 'orient', 'programming', 'approach', 'design', 'modular', 'reusable', 'software', 'system', 'object', 'orient', 'approach', 'evolution', 'good', 'design', 'practice', 'beginning', 'computer', 'programming', 'object', 'orientation', 'simply', 'logical', 'extension', 'old', 'technique', 'structured', 'programming', 'abstract', 'data', 'type', 'object', 'abstract', 'data', 'type', 'addition', 'polymorphism', 'inheritance']"
566,"Rather than structure programs as code and data, an object-oriented system integrates the two using the concept of an ""object"". An object has state data and behavior code. Objects can correspond to things found in the real world. So for example, a graphics program will have objects such as circle, square, menu. An online shopping system will have objects such as shopping cart, customer, product. The shopping system will support behaviors such as place order, make payment, and offer discount. The objects are designed as class hierarchies. So for example with the shopping system there might be high level classes such as electronics product, kitchen product, and book. There may be further refinements for example under electronic products: CD Player, DVD player, etc. These classes and subclasses correspond to sets and subsets in mathematical logic.56","['structure', 'program', 'code', 'datum', 'object', 'orient', 'system', 'integrate', 'concept', 'object', 'object', 'state', 'datum', 'behavior', 'code', 'object', 'correspond', 'thing', 'find', 'real', 'world', 'example', 'graphic', 'program', 'object', 'circle', 'square', 'menu', 'online', 'shopping', 'system', 'object', 'shopping', 'cart', 'customer', 'product', 'shopping', 'system', 'support', 'behavior', 'place', 'order', 'payment', 'offer', 'discount', 'object', 'design', 'class', 'hierarchy', 'example', 'shopping', 'system', 'high', 'level', 'class', 'electronic', 'product', 'kitchen', 'product', 'book', 'refinement', 'example', 'electronic', 'product', 'player', 'dvd', 'player', 'etc', 'class', 'subclass', 'correspond', 'set', 'subset', 'mathematical', 'logic']"
567,An important concept for objects is the design pattern. A design pattern provides a reusable template to address a common problem. The following object descriptions are examples of some of the most common design patterns for objects.7,"['important', 'concept', 'object', 'design', 'pattern', 'design', 'pattern', 'provide', 'reusable', 'template', 'address', 'common', 'problem', 'follow', 'object', 'description', 'example', 'common', 'design', 'pattern', 'objects']"
568,"The object-oriented approach is not just a programming model. It can be used equally well as an interface definition language for distributed systems. The objects in a distributed computing model tend to be larger grained, longer lasting, and more service-oriented than programming objects.","['object', 'orient', 'approach', 'programming', 'model', 'equally', 'interface', 'definition', 'language', 'distribute', 'system', 'object', 'distribute', 'computing', 'model', 'tend', 'large', 'grain', 'long', 'last', 'service', 'orient', 'programming', 'object']"
569,"A standard method to package distributed objects is via an Interface Definition Language IDL. An IDL shields the client of all of the details of the distributed server object. Details such as which computer the object resides on, what programming language it uses, what operating system, and other platform-specific issues. The IDL is also usually part of a distributed environment that provides services such as transactions and persistence to all objects in a uniform manner. Two of the most popular standards for distributed objects are the Object Management Group's CORBA standard and Microsoft's DCOM.8","['standard', 'method', 'package', 'distribute', 'object', 'interface', 'definition', 'language', 'idl', 'idl', 'shield', 'client', 'detail', 'distribute', 'server', 'object', 'detail', 'computer', 'object', 'reside', 'programming', 'language', 'use', 'operating', 'system', 'platform', 'specific', 'issue', 'idl', 'usually', 'distribute', 'environment', 'provide', 'service', 'transaction', 'persistence', 'object', 'uniform', 'manner', 'popular', 'standard', 'distribute', 'object', 'object', 'management', 'group', 'corba', 'standard', 'microsoft', 'dcom']"
570,"In addition to distributed objects, a number of other extensions to the basic concept of an object have been proposed to enable distributed computing:","['addition', 'distribute', 'object', 'number', 'extension', 'basic', 'concept', 'object', 'propose', 'enable', 'distribute', 'computing']"
571,"Some of these extensions, such as distributed objects and protocol objects, are domain-specific terms for special types of ""ordinary"" objects used in a certain context such as remote method invocation or protocol composition. Others, such as replicated objects and live distributed objects, are more non-standard, in that they abandon the usual case that an object resides in a single location at a time, and apply the concept to groups of entities replicas that might span across multiple locations, might have only weakly consistent state, and whose membership might dynamically change.","['extension', 'distribute', 'object', 'protocol', 'object', 'domain', 'specific', 'term', 'special', 'type', 'ordinary', 'object', 'certain', 'context', 'remote', 'method', 'invocation', 'protocol', 'composition', 'replicate', 'object', 'live', 'distribute', 'object', 'non', 'standard', 'abandon', 'usual', 'case', 'object', 'reside', 'single', 'location', 'time', 'apply', 'concept', 'group', 'entity', 'replica', 'span', 'multiple', 'location', 'weakly', 'consistent', 'state', 'membership', 'dynamically', 'change']"
572,"The Semantic Web is essentially a distributed-objects framework. Two key technologies in the Semantic Web are the Web Ontology Language OWL and the Resource Description Framework RDF. RDF provides the capability to define basic objects—names, properties, attributes, relations—that are accessible via the Internet. OWL adds a richer object model, based on set theory, that provides additional modeling capabilities such as multiple inheritance.","['semantic', 'web', 'essentially', 'distribute', 'object', 'framework', 'key', 'technology', 'semantic', 'web', 'web', 'ontology', 'language', 'owl', 'resource', 'description', 'framework', 'rdf', 'rdf', 'provide', 'capability', 'define', 'basic', 'object', 'name', 'property', 'attribute', 'relation', 'accessible', 'internet', 'owl', 'add', 'rich', 'object', 'model', 'base', 'set', 'theory', 'provide', 'additional', 'modeling', 'capability', 'multiple', 'inheritance']"
573,OWL objects are not like standard large-grained distributed objects accessed via an Interface Definition Language. Such an approach would not be appropriate for the Internet because the Internet is constantly evolving and standardization on one set of interfaces is difficult to achieve. OWL objects tend to be similar to the kinds of objects used to define application domain models in programming languages such as Java and C++.,"['owl', 'object', 'like', 'standard', 'large', 'grain', 'distribute', 'object', 'access', 'interface', 'definition', 'language', 'approach', 'appropriate', 'internet', 'internet', 'constantly', 'evolve', 'standardization', 'set', 'interface', 'difficult', 'achieve', 'owl', 'object', 'tend', 'similar', 'kind', 'object', 'define', 'application', 'domain', 'model', 'programming', 'language', 'java', 'c++']"
574,"However, there are important distinctions between OWL objects and traditional object-oriented programming objects. Traditional objects get compiled into static hierarchies usually with single inheritance, but OWL objects are dynamic. An OWL object can change its structure at run time and can become an instance of new or different classes.","['important', 'distinction', 'owl', 'object', 'traditional', 'object', 'orient', 'programming', 'object', 'traditional', 'object', 'compile', 'static', 'hierarchy', 'usually', 'single', 'inheritance', 'owl', 'object', 'dynamic', 'owl', 'object', 'change', 'structure', 'run', 'time', 'instance', 'new', 'different', 'class']"
575,"Another critical difference is the way the model treats information that is currently not in the system. Programming objects and most database systems use the ""closed-world assumption"". If a fact is not known to the system that fact is assumed to be false. Semantic Web objects use the open-world assumption, a statement is only considered false if there is actual relevant information that it is false, otherwise it is assumed to be unknown, neither true nor false.","['critical', 'difference', 'way', 'model', 'treat', 'information', 'currently', 'system', 'programming', 'object', 'database', 'system', 'use', 'closed', 'world', 'assumption', 'fact', 'know', 'system', 'fact', 'assume', 'false', 'semantic', 'web', 'object', 'use', 'open', 'world', 'assumption', 'statement', 'consider', 'false', 'actual', 'relevant', 'information', 'false', 'assume', 'unknown', 'true', 'false']"
576,OWL objects are actually most like objects in artificial intelligence frame languages such as KL-ONE and Loom.,"['owl', 'object', 'actually', 'like', 'object', 'artificial', 'intelligence', 'frame', 'language', 'loom']"
577,The following table contrasts traditional objects from Object-Oriented programming languages such as Java or C++ with Semantic Web Objects:1011,"['following', 'table', 'contrast', 'traditional', 'object', 'object', 'orient', 'programming', 'language', 'java', 'c++', 'semantic', 'web', 'objects']"
578,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
579,"In class-based, object-oriented programming, a class variable is a variable defined in a class of which a single copy exists, regardless of how many instances of the class exist.12345","['class', 'base', 'object', 'orient', 'programming', 'class', 'variable', 'variable', 'define', 'class', 'single', 'copy', 'exist', 'regardless', 'instance', 'class', 'exist']"
580,"A class variable is not an instance variable. It is a special type of class attribute or class property, field, or data member. The same dichotomy between instance and class members applies to methods ""member functions"" as well; a class may have both instance methods and class methods.","['class', 'variable', 'instance', 'variable', 'special', 'type', 'class', 'attribute', 'class', 'property', 'field', 'data', 'member', 'dichotomy', 'instance', 'class', 'member', 'apply', 'method', 'member', 'function', 'class', 'instance', 'method', 'class', 'method']"
581,"In some languages, class variables and class methods are either statically resolved, not via dynamic dispatch, or their memory statically allocated at compile time once for the entire class, as static variables, not dynamically allocated at run time at every instantiation of an object. In other cases, however, either or both of these are dynamic. For example, if classes can be dynamically defined at run time, class variables of these classes are allocated dynamically when the class is defined, and in some languages class methods are also dispatched dynamically.","['language', 'class', 'variable', 'class', 'method', 'statically', 'resolve', 'dynamic', 'dispatch', 'memory', 'statically', 'allocate', 'compile', 'time', 'entire', 'class', 'static', 'variable', 'dynamically', 'allocate', 'run', 'time', 'instantiation', 'object', 'case', 'dynamic', 'example', 'class', 'dynamically', 'define', 'run', 'time', 'class', 'variable', 'class', 'allocate', 'dynamically', 'class', 'define', 'language', 'class', 'method', 'dispatch', 'dynamically']"
582,"Thus in some languages, static member variable or static member function are used synonymously with or in place of ""class variable"" or ""class function"", but these are not synonymous across languages. These terms are commonly used in Java, C# 5 , and C++, where class variables and class methods are declared with the static keyword, and referred to as static member variables or static member functions.","['language', 'static', 'member', 'variable', 'static', 'member', 'function', 'synonymously', 'place', 'class', 'variable', 'class', 'function', 'synonymous', 'language', 'term', 'commonly', 'java', 'c++', 'class', 'variable', 'class', 'method', 'declare', 'static', 'keyword', 'refer', 'static', 'member', 'variable', 'static', 'member', 'function']"
583,"In this C++ example, the class variable Request::count is incremented on each call to the constructor, so that Request::count always holds the number of Requests that have been constructed, and each new Request object is given a number in sequential order. Since count is a class variable, there is only one object Request::count; in contrast, each Request object contains its own distinct number field.","['c++', 'example', 'class', 'variable', 'request::count', 'incremente', 'constructor', 'request::count', 'hold', 'number', 'requests', 'construct', 'new', 'request', 'object', 'give', 'number', 'sequential', 'order', 'count', 'class', 'variable', 'object', 'request::count', 'contrast', 'request', 'object', 'contain', 'distinct', 'number', 'field']"
584,Also note that the variable Request::count is initialized only once.,"['note', 'variable', 'request::count', 'initialize']"
585,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
586,"In computer programming, cohesion refers to the degree to which the elements inside a module belong together.1 In one sense, it is a measure of the strength of relationship between the methods and data of a class and some unifying purpose or concept served by that class. In another sense, it is a measure of the strength of relationship between the class's methods and data themselves.","['computer', 'programming', 'cohesion', 'refer', 'degree', 'element', 'inside', 'module', 'belong', 'together', 'sense', 'measure', 'strength', 'relationship', 'method', 'datum', 'class', 'unifying', 'purpose', 'concept', 'serve', 'class', 'sense', 'measure', 'strength', 'relationship', 'class', 'method', 'datum']"
587,"Cohesion is an ordinal type of measurement and is usually described as “high cohesion” or “low cohesion”. Modules with high cohesion tend to be preferable, because high cohesion is associated with several desirable traits of software including robustness, reliability, reusability, and understandability. In contrast, low cohesion is associated with undesirable traits such as being difficult to maintain, test, reuse, or even understand.","['cohesion', 'ordinal', 'type', 'measurement', 'usually', 'describe', 'high', 'cohesion', 'low', 'cohesion', 'module', 'high', 'cohesion', 'tend', 'preferable', 'high', 'cohesion', 'associate', 'desirable', 'trait', 'software', 'include', 'robustness', 'reliability', 'reusability', 'understandability', 'contrast', 'low', 'cohesion', 'associate', 'undesirable', 'trait', 'difficult', 'maintain', 'test', 'reuse', 'understand']"
588,"Cohesion is often contrasted with coupling, a different concept. High cohesion often correlates with loose coupling, and vice versa.2 The software metrics of coupling and cohesion were invented by Larry Constantine in the late 1960s as part of Structured Design, based on characteristics of “good” programming practices that reduced maintenance and modification costs. Structured Design, cohesion and coupling were published in the article Stevens, Myers & Constantine 19743 and the book Yourdon & Constantine 1979;1 the latter two subsequently became standard terms in software engineering.","['cohesion', 'contrast', 'coupling', 'different', 'concept', 'high', 'cohesion', 'correlate', 'loose', 'coupling', 'vice', 'versa', 'software', 'metric', 'coupling', 'cohesion', 'invent', 'larry', 'constantine', 'late', '1960', 'structured', 'design', 'base', 'characteristic', 'good', 'programming', 'practice', 'reduce', 'maintenance', 'modification', 'cost', 'structured', 'design', 'cohesion', 'coupling', 'publish', 'article', 'stevens', 'myers', 'constantine', '19743', 'book', 'yourdon', 'constantine', '1979', 'subsequently', 'standard', 'term', 'software', 'engineering']"
589,"In object-oriented programming, if the methods that serve a class tend to be similar in many aspects, then the class is said to have high cohesion.4 In a highly cohesive system, code readability and reusability is increased, while complexity is kept manageable.","['object', 'orient', 'programming', 'method', 'serve', 'class', 'tend', 'similar', 'aspect', 'class', 'say', 'high', 'cohesion', 'highly', 'cohesive', 'system', 'code', 'readability', 'reusability', 'increase', 'complexity', 'keep', 'manageable']"
590,"Advantages of high cohesion or ""strong cohesion"" are:","['advantage', 'high', 'cohesion', 'strong', 'cohesion']"
591,"While in principle a module can have perfect cohesion by only consisting of a single, atomic element – having a single function, for example – in practice complex tasks are not expressible by a single, simple element. Thus a single-element module has an element that either is too complicated, in order to accomplish a task, or is too narrow, and thus tightly coupled to other modules. Thus cohesion is balanced with both unit complexity and coupling.","['principle', 'module', 'perfect', 'cohesion', 'consist', 'single', 'atomic', 'element', 'have', 'single', 'function', 'example', 'practice', 'complex', 'task', 'expressible', 'single', 'simple', 'element', 'single', 'element', 'module', 'element', 'complicated', 'order', 'accomplish', 'task', 'narrow', 'tightly', 'couple', 'module', 'cohesion', 'balance', 'unit', 'complexity', 'coupling']"
592,"Cohesion is a qualitative measure, meaning that the source code to be measured is examined using a rubric to determine a classification. Cohesion types, from the worst to the best, are as follows:","['cohesion', 'qualitative', 'measure', 'mean', 'source', 'code', 'measure', 'examine', 'rubric', 'determine', 'classification', 'cohesion', 'type', 'bad', 'good', 'follow']"
593,"Although cohesion is a ranking type of scale, the ranks do not indicate a steady progression of improved cohesion. Studies by various people including Larry Constantine, Edward Yourdon, and Steve McConnell5 indicate that the first two types of cohesion are inferior; communicational and sequential cohesion are very good; and functional cohesion is superior.","['cohesion', 'ranking', 'type', 'scale', 'rank', 'indicate', 'steady', 'progression', 'improved', 'cohesion', 'study', 'people', 'include', 'larry', 'constantine', 'edward', 'yourdon', 'steve', 'mcconnell5', 'indicate', 'type', 'cohesion', 'inferior', 'communicational', 'sequential', 'cohesion', 'good', 'functional', 'cohesion', 'superior']"
594,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
595,"In computer science, a container is a class or a data structure12 whose instances are collections of other objects. In other words, they store objects in an organized way that follows specific access rules.","['computer', 'science', 'container', 'class', 'data', 'structure12', 'instance', 'collection', 'object', 'word', 'store', 'object', 'organized', 'way', 'follow', 'specific', 'access', 'rule']"
596,"The size of the container depends on the number of objects elements it contains. Underlying inherited implementations of various container types may vary in size, complexity and type of language, but in many cases they provide flexibility in choosing the right implementation for any given scenario.","['size', 'container', 'depend', 'number', 'object', 'element', 'contain', 'underlie', 'inherit', 'implementation', 'container', 'type', 'vary', 'size', 'complexity', 'type', 'language', 'case', 'provide', 'flexibility', 'choose', 'right', 'implementation', 'give', 'scenario']"
597,Container data structures are commonly used in many types of programming languages.,"['container', 'datum', 'structure', 'commonly', 'type', 'programming', 'language']"
598,Containers can be characterized by the following three properties:,"['container', 'characterize', 'follow', 'property']"
599,Container classes are expected to implement CRUD-like methods to do the following:,"['container', 'class', 'expect', 'implement', 'crud', 'like', 'method', 'following']"
600,Containers are sometimes implemented in conjunction with iterators.,"['container', 'implement', 'conjunction', 'iterator']"
601,Containers may be classified as either single-value containers or associative containers.,"['container', 'classify', 'single', 'value', 'container', 'associative', 'container']"
602,"Single-value containers store each object independently. Objects may be accessed directly, by a language loop construct e.g. for loop or with an iterator.","['single', 'value', 'container', 'store', 'object', 'independently', 'object', 'access', 'directly', 'language', 'loop', 'construct', 'e.g.', 'loop', 'iterator']"
603,"An associative container uses an associative array, map, or dictionary, composed of key-value pairs, such that each key appears at most once in the container. The key is used to find the value, the object, if it is stored in the container. Associative containers are used in programming languages as class templates.","['associative', 'container', 'use', 'associative', 'array', 'map', 'dictionary', 'compose', 'key', 'value', 'pair', 'key', 'appear', 'container', 'key', 'find', 'value', 'object', 'store', 'container', 'associative', 'container', 'programming', 'language', 'class', 'template']"
604,Common data structures used to implement these abstract types include:,"['common', 'data', 'structure', 'implement', 'abstract', 'type', 'include']"
605,"Widget toolkits also use containers, which are special widgets to group other widgets, such as windows, panels. Apart from their graphical properties, they have the same type of behavior as container classes, as they keep a list of their child widgets, and allow adding, removing, or retrieving widgets among their children.","['widget', 'toolkit', 'use', 'container', 'special', 'widget', 'group', 'widget', 'window', 'panel', 'apart', 'graphical', 'property', 'type', 'behavior', 'container', 'class', 'list', 'child', 'widget', 'allow', 'adding', 'remove', 'retrieve', 'widget', 'child']"
606,"Container abstractions can be written in virtually any programming language, regardless of its type system.3: 273 However, in strongly-typed object-oriented programming languages it may be somewhat complicated for a developer to write reusable homogeneous containers.","['container', 'abstraction', 'write', 'virtually', 'programming', 'language', 'regardless', 'type', 'system', '273', 'strongly', 'type', 'object', 'orient', 'programming', 'language', 'somewhat', 'complicated', 'developer', 'write', 'reusable', 'homogeneous', 'container']"
607,Because of differences in element types this results in a tedious process of writing and keeping a collection of containers for every elemental type.3: 274–276,"['difference', 'element', 'type', 'result', 'tedious', 'process', 'writing', 'keep', 'collection', 'container', 'elemental', 'type', '274–276']"
608,"Many elemental types e.g. integers or floating numbers are inherently incompatible with each other because of the memory size they occupy and their semantic meaning and therefore require different containers unless of course, they are mutually compatible or convertible.3: 274–276 Modern programming languages offer various approaches to help solving the problem:3: 274–281","['elemental', 'type', 'e.g.', 'integer', 'float', 'number', 'inherently', 'incompatible', 'memory', 'size', 'occupy', 'semantic', 'meaning', 'require', 'different', 'container', 'course', 'mutually', 'compatible', 'convertible', '274–276', 'modern', 'programming', 'language', 'offer', 'approach', 'help', 'solve', 'problem', '274–281']"
609,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
610,"In computer science, object composition and object aggregation are closely related ways to combine objects or data types into more complex ones. In conversation the distinction between composition and aggregation is often ignored.1 Common kinds of compositions are objects used in object-oriented programming, tagged unions, sets, sequences, and various graph structures. Object compositions relate to, but are not the same as, data structures.","['computer', 'science', 'object', 'composition', 'object', 'aggregation', 'closely', 'relate', 'way', 'combine', 'object', 'datum', 'type', 'complex', 'one', 'conversation', 'distinction', 'composition', 'aggregation', 'ignored', 'common', 'kind', 'composition', 'object', 'object', 'orient', 'programming', 'tag', 'union', 'set', 'sequence', 'graph', 'structure', 'object', 'composition', 'relate', 'data', 'structure']"
611,"Object composition refers to the logical or conceptual structure of the information, not the implementation or physical data structure used to represent itcitation needed. For example, a sequence differs from a set because among other things the order of the composed items matters for the former but not the latter. Data structures such as arrays, linked lists, hash tables, and many others can be used to implement either of them. Perhaps confusingly, some of the same terms are used for both data structures and composites. For example, ""binary tree"" can refer to either: as a data structure it is a means of accessing a linear sequence of items, and the actual positions of items in the tree are irrelevant the tree can be internally rearranged however one likes, without changing its meaning. However, as an object composition, the positions are relevant, and changing them would change the meaning as for example in cladogramscitation needed.","['object', 'composition', 'refer', 'logical', 'conceptual', 'structure', 'information', 'implementation', 'physical', 'datum', 'structure', 'represent', 'itcitation', 'need', 'example', 'sequence', 'differ', 'set', 'thing', 'order', 'compose', 'item', 'matter', 'datum', 'structure', 'array', 'link', 'list', 'hash', 'table', 'implement', 'confusingly', 'term', 'datum', 'structure', 'composite', 'example', 'binary', 'tree', 'refer', 'data', 'structure', 'means', 'access', 'linear', 'sequence', 'item', 'actual', 'position', 'item', 'tree', 'irrelevant', 'tree', 'internally', 'rearrange', 'like', 'change', 'meaning', 'object', 'composition', 'position', 'relevant', 'change', 'change', 'meaning', 'example', 'cladogramscitation', 'need']"
612,"Object-oriented programming is based on objects to encapsulate data and behavior. It uses two main techniques for assembling and composing functionality into more complex ones, sub-typing and object composition.2 Object composition is about combining objects within compound objects, and at the same time, ensuring the encapsulation of each object by using their well-defined interface without visibility of their internals. In this regard, object composition differs from data structures, which do not enforce encapsulation.","['object', 'orient', 'programming', 'base', 'object', 'encapsulate', 'datum', 'behavior', 'use', 'main', 'technique', 'assemble', 'compose', 'functionality', 'complex', 'one', 'sub', 'type', 'object', 'composition', 'object', 'composition', 'combine', 'object', 'compound', 'object', 'time', 'ensure', 'encapsulation', 'object', 'define', 'interface', 'visibility', 'internal', 'regard', 'object', 'composition', 'differ', 'datum', 'structure', 'enforce', 'encapsulation']"
613,"Object composition may also be about a group of multiple related objects, such as a set or a sequence of objects. Delegation may enrich composition by forwarding requests or calls made to the enclosing composite object to one of its internal components.3","['object', 'composition', 'group', 'multiple', 'relate', 'object', 'set', 'sequence', 'object', 'delegation', 'enrich', 'composition', 'forward', 'request', 'call', 'enclose', 'composite', 'object', 'internal', 'components']"
614,"In class-based and typed programming languages, types can be divided into composite and non-composite types, and composition can be regarded as a relationship between types: an object of a composite type e.g. car ""has"" objects of other types e.g. wheel. When a composite object contains several sub-objects of the same type, they may be assigned to particular roles, often distinguished by names or numbers. For example, a Point object might contain 3 numbers, each representing distance along a different axis, such as 'x', 'y', and 'z'. The study of part-whole relationships in general, is mereology.","['class', 'base', 'type', 'programming', 'language', 'type', 'divide', 'composite', 'non', 'composite', 'type', 'composition', 'regard', 'relationship', 'type', 'object', 'composite', 'type', 'e.g.', 'car', 'object', 'type', 'e.g.', 'wheel', 'composite', 'object', 'contain', 'sub', 'object', 'type', 'assign', 'particular', 'role', 'distinguish', 'name', 'number', 'example', 'point', 'object', 'contain', 'number', 'represent', 'distance', 'different', 'axis', 'study', 'relationship', 'general', 'mereology']"
615,"Composition must be distinguished from subtyping, which is the process of adding detail to a general data type to create a more specific data type. For instance, cars may be a specific type of vehicle: car is a vehicle. Subtyping doesn't describe a relationship between different objects, but instead, says that objects of a type are simultaneously objects of another type. The study of such relationships is ontology.","['composition', 'distinguish', 'subtype', 'process', 'add', 'detail', 'general', 'datum', 'type', 'create', 'specific', 'data', 'type', 'instance', 'car', 'specific', 'type', 'vehicle', 'car', 'vehicle', 'subtype', 'describe', 'relationship', 'different', 'object', 'instead', 'say', 'object', 'type', 'simultaneously', 'object', 'type', 'study', 'relationship', 'ontology']"
616,"In prototype-based programming languages such as JavaScript, objects can dynamically inherit the behaviors from a prototype object at the moment of their instantiation. Composition must be distinguished from prototyping: the newly instantiated object inherits the composition of its prototype, but it may itself be composed on its own.","['prototype', 'base', 'programming', 'language', 'javascript', 'object', 'dynamically', 'inherit', 'behavior', 'prototype', 'object', 'moment', 'instantiation', 'composition', 'distinguish', 'prototype', 'newly', 'instantiate', 'object', 'inherit', 'composition', 'prototype', 'compose']"
617,"Composite objects may be represented in storage by co-locating the composed objects, by co-locating references, or in many other ways. The items within a composite object may be referred to as attributes, fields, members, properties, or other names, and the resulting composition as composite type, storage record, structure, tuple, or a user-defined type UDT. For details, see the aggregation section below.","['composite', 'object', 'represent', 'storage', 'locate', 'compose', 'object', 'locating', 'reference', 'way', 'item', 'composite', 'object', 'refer', 'attribute', 'field', 'member', 'property', 'name', 'result', 'composition', 'composite', 'type', 'storage', 'record', 'structure', 'tuple', 'user', 'define', 'type', 'udt', 'detail', 'aggregation', 'section']"
618,"In UML modeling, objects can be conceptually composed, independently of the implementation with a programming language. There are four ways of composing objects in UML: property, association, aggregation and composition:4","['uml', 'modeling', 'object', 'conceptually', 'compose', 'independently', 'implementation', 'programming', 'language', 'way', 'compose', 'object', 'uml', 'property', 'association', 'aggregation', 'composition']"
619,"The relationship between the aggregate and its components is a weak ""has-a"" relationship: The components may be part of several aggregates, may be accessed through other objects without going through the aggregate, and may outlive the aggregate object.4 The state of the component object still forms part of the aggregate object.citation needed","['relationship', 'aggregate', 'component', 'weak', 'relationship', 'component', 'aggregate', 'access', 'object', 'go', 'aggregate', 'outlive', 'aggregate', 'object', 'state', 'component', 'object', 'form', 'aggregate', 'object.citation', 'need']"
620,"The relationship between the composite and its parts is a strong “has-a” relationship: The composite object has sole ""responsibility for the existence and storage of the composed objects"", the composed object can be part of at most one composite, and ""If a composite object is deleted, all of its part instances that are objects are deleted with it"". Thus in UML, composition has a more narrow meaning than the usual object composition.","['relationship', 'composite', 'part', 'strong', 'relationship', 'composite', 'object', 'sole', 'responsibility', 'existence', 'storage', 'compose', 'object', 'composed', 'object', 'composite', 'composite', 'object', 'delete', 'instance', 'object', 'delete', 'uml', 'composition', 'narrow', 'meaning', 'usual', 'object', 'composition']"
621,"Aggregation differs from ordinary composition in that it does not imply ownership. In composition, when the owning object is destroyed, so are the contained objects. In aggregation, this is not necessarily true. For example, a university owns various departments e.g., chemistry, and each department has a number of professors. If the university closes, the departments will no longer exist, but the professors in those departments will continue to exist. Therefore, a university can be seen as a composition of departments, whereas departments have an aggregation of professors. In addition, a professor could work in more than one department, but a department could not be part of more than one university.","['aggregation', 'differ', 'ordinary', 'composition', 'imply', 'ownership', 'composition', 'own', 'object', 'destroy', 'contain', 'object', 'aggregation', 'necessarily', 'true', 'example', 'university', 'own', 'department', 'e.g.', 'chemistry', 'department', 'number', 'professor', 'university', 'close', 'department', 'long', 'exist', 'professor', 'department', 'continue', 'exist', 'university', 'see', 'composition', 'department', 'department', 'aggregation', 'professor', 'addition', 'professor', 'work', 'department', 'department', 'university']"
622,"Composition is usually implemented such that an object contains another object. For example, in C++:","['composition', 'usually', 'implement', 'object', 'contain', 'object', 'example', 'c++']"
623,"In aggregation, the object may only contain a reference or pointer to the object and not have lifetime responsibility for it.","['aggregation', 'object', 'contain', 'reference', 'pointer', 'object', 'lifetime', 'responsibility']"
624,Sometimes aggregation is referred to as composition when the distinction between ordinary composition and aggregation is unimportant.,"['aggregation', 'refer', 'composition', 'distinction', 'ordinary', 'composition', 'aggregation', 'unimportant']"
625,The above code would transform into the following UML Class diagram:,"['code', 'transform', 'follow', 'uml', 'class', 'diagram']"
626,"In Microsoft's Component Object Model, aggregation means that an object exports, as if it were their owner, one or several interfaces of another object it owns. Formally, this is more similar to composition or encapsulation than aggregation. However, instead of implementing the exported interfaces by calling the interfaces of the owned object, the interfaces of the owned object themselves are exported. The owned object is responsible for assuring that methods of those interfaces inherited from .mw-parser-output .monospacedfont-family:monospace,monospaceIUnknown actually invoke the corresponding methods of the owner. This is to guarantee that the reference count of the owner is correct and all interfaces of the owner are accessible through the exported interface, while no other private interfaces of the owned object are accessible.5","['microsoft', 'component', 'object', 'model', 'aggregation', 'mean', 'object', 'export', 'owner', 'interface', 'object', 'own', 'formally', 'similar', 'composition', 'encapsulation', 'aggregation', 'instead', 'implement', 'export', 'interface', 'call', 'interface', 'own', 'object', 'interface', 'own', 'object', 'export', 'own', 'object', 'responsible', 'assure', 'method', 'interface', 'inherit', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospaceiunknown', 'actually', 'invoke', 'corresponding', 'method', 'owner', 'guarantee', 'reference', 'count', 'owner', 'correct', 'interface', 'owner', 'accessible', 'export', 'interface', 'private', 'interface', 'own', 'object', 'accessible']"
627,"Composition that is used to store several instances of the composited data type is referred to as containment. Examples of such containers are arrays, associative arrays, binary trees, and linked lists.","['composition', 'store', 'instance', 'composite', 'data', 'type', 'refer', 'containment', 'example', 'container', 'array', 'associative', 'array', 'binary', 'tree', 'link', 'list']"
628,"In UML, containment is depicted with a multiplicity of 0..* or 1..*, indicating that the composite object is composed of an unknown number of instances of the composed class.","['uml', 'containment', 'depict', 'multiplicity', 'indicate', 'composite', 'object', 'compose', 'unknown', 'number', 'instance', 'composed', 'class']"
629,"Objects can be composed recursively, and their type is then called recursive type. Examples includes various kinds of trees, DAGs, and graphs. Each node in a tree may be a branch or leaf; in other words, each node is a tree at the same time when it belongs to another tree.","['object', 'compose', 'recursively', 'type', 'call', 'recursive', 'type', 'example', 'include', 'kind', 'tree', 'dag', 'graph', 'node', 'tree', 'branch', 'leaf', 'word', 'node', 'tree', 'time', 'belong', 'tree']"
630,"In UML, recursive composition is depicted with an association, aggregation or composition of a class with itself.","['uml', 'recursive', 'composition', 'depict', 'association', 'aggregation', 'composition', 'class']"
631,"The composite design pattern is an object oriented design based on composite types, that combines recursive composition and containment to implement complex part-whole hierarchies.","['composite', 'design', 'pattern', 'object', 'orient', 'design', 'base', 'composite', 'type', 'combine', 'recursive', 'composition', 'containment', 'implement', 'complex', 'hierarchy']"
632,This is an example of composition in C.,"['example', 'composition']"
633,"In this example, the primitive noncomposite types int, enum job_seeking, professional, non_professional, retired, student and the composite array type char are combined to form the composite structure Person. Each Person structure then ""has an"" age, name, and an employment type.","['example', 'primitive', 'noncomposite', 'type', 'int', 'enum', 'job_seeking', 'professional', 'non_professional', 'retired', 'student', 'composite', 'array', 'type', 'char', 'combine', 'form', 'composite', 'structure', 'person', 'person', 'structure', 'age', 'employment', 'type']"
634,"C calls a record a struct or structure; object-oriented languages such as Java, Smalltalk, and C++ often keep their records hidden inside objects class instances; languages in the ML family simply call them records. COBOL was the first widespread programming language to support records directly;6 ALGOL 68 got it from COBOL and Pascal got it, more or less indirectly, from ALGOL 68. Common Lisp provides structures and classes the latter via the Common Lisp Object System.citation needed","['call', 'record', 'struct', 'structure', 'object', 'orient', 'language', 'java', 'smalltalk', 'c++', 'record', 'hide', 'inside', 'object', 'class', 'instance', 'language', 'family', 'simply', 'record', 'cobol', 'widespread', 'programming', 'language', 'support', 'record', 'directly', 'algol', 'get', 'cobol', 'pascal', 'get', 'indirectly', 'algol', 'common', 'lisp', 'provide', 'structure', 'class', 'common', 'lisp', 'object', 'system.citation', 'need']"
635,Arrays were the only composite data type in Algol 60.,"['array', 'composite', 'datum', 'type', 'algol']"
636,"For example, a linked list might be declared as:","['example', 'link', 'list', 'declare']"
637,"For ALGOL 68 only the type name appears to the left of the equality, and most notably the construction is made – and can be read – from left to right without regard to priorities.","['algol', 'type', 'appear', 'left', 'equality', 'notably', 'construction', 'read', 'leave', 'right', 'regard', 'priority']"
638,"Fortran 77 has arrays, but lacked any formal record/structure definitions. Typically compound structures were built up using EQUIVALENCE or COMMON statements:","['fortran', 'array', 'lack', 'formal', 'record', 'structure', 'definition', 'typically', 'compound', 'structure', 'build', 'equivalence', 'common', 'statement']"
639,"Ada 95 brought OOP concepts through tagged types the equivalent of a C++ class, Ada 2012 added support for substitution verification through class-wide contracts.","['ada', 'bring', 'oop', 'concept', 'tag', 'type', 'equivalent', 'c++', 'class', 'ada', '2012', 'add', 'support', 'substitution', 'verification', 'class', 'wide', 'contract']"
640,"Arrays and strings were inherited from FORTRAN 77, and a new reserved word was introduced: type","['array', 'string', 'inherit', 'fortran', 'new', 'reserved', 'word', 'introduce', 'type']"
641,FORTRAN 90 updated and included FORTRAN IV's concept called NAMELIST.,"['fortran', 'update', 'include', 'fortran', 'concept', 'call', 'namelist']"
642,Common Lisp provides structures and the ANSI Common Lisp standard added CLOS classes.,"['common', 'lisp', 'provide', 'structure', 'ansi', 'common', 'lisp', 'standard', 'add', 'clos', 'class']"
643,"For more details about composition in C/C++, see Composite type.","['detail', 'composition', 'c++', 'composite', 'type']"
644,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
645,"In class-based, object-oriented programming, a constructor abbreviation: ctor is a special type of subroutine called to create an object. It prepares the new object for use, often accepting arguments that the constructor uses to set required member variables.","['class', 'base', 'object', 'orient', 'programming', 'constructor', 'abbreviation', 'ctor', 'special', 'type', 'subroutine', 'call', 'create', 'object', 'prepare', 'new', 'object', 'use', 'accept', 'argument', 'constructor', 'use', 'set', 'require', 'member', 'variable']"
646,"A constructor resembles an instance method, but it differs from a method in that it has no explicit return type, it is not implicitly inherited and it usually has different rules for scope modifiers. Constructors often have the same name as the declaring class. They have the task of initializing the object's data members and of establishing the invariant of the class, failing if the invariant is invalid. A properly written constructor leaves the resulting object in a valid state. Immutable objects must be initialized in a constructor.","['constructor', 'resemble', 'instance', 'method', 'differ', 'method', 'explicit', 'return', 'type', 'implicitly', 'inherit', 'usually', 'different', 'rule', 'scope', 'modifier', 'constructor', 'declaring', 'class', 'task', 'initialize', 'object', 'datum', 'member', 'establish', 'invariant', 'class', 'fail', 'invariant', 'invalid', 'properly', 'write', 'constructor', 'leave', 'result', 'object', 'valid', 'state', 'immutable', 'object', 'initialize', 'constructor']"
647,"Most languages allow overloading the constructor in that there can be more than one constructor for a class, with differing parameters. Some languages take consideration of some special types of constructors. Constructors, which concretely use a single class to create objects and return a new instance of the class, are abstracted by factories, which also create objects but can do so in various ways, using multiple classes or different allocation schemes such as an object pool.","['language', 'allow', 'overload', 'constructor', 'constructor', 'class', 'differ', 'parameter', 'language', 'consideration', 'special', 'type', 'constructor', 'constructor', 'concretely', 'use', 'single', 'class', 'create', 'object', 'return', 'new', 'instance', 'class', 'abstract', 'factory', 'create', 'object', 'way', 'multiple', 'class', 'different', 'allocation', 'scheme', 'object', 'pool']"
648,"Constructors that can take at least one argument are termed as parameterized constructors. When an object is declared in a parameterized constructor, the initial values have to be passed as arguments to the constructor function. The normal way of object declaration may not work. The constructors can be called explicitly or implicitly. The method of calling the constructor implicitly is also called the shorthand method.","['constructor', 'argument', 'term', 'parameterized', 'constructor', 'object', 'declare', 'parameterized', 'constructor', 'initial', 'value', 'pass', 'argument', 'constructor', 'function', 'normal', 'way', 'object', 'declaration', 'work', 'constructor', 'call', 'explicitly', 'implicitly', 'method', 'call', 'constructor', 'implicitly', 'call', 'shorthand', 'method']"
649,"If the programmer does not supply a constructor for an instantiable class, Java compiler inserts a default constructor into your code on your behalf. This constructor is known as default constructor. You would not find it in your source code the java file as it would be inserted into the code during compilation and exists in .class file. The behavior of the default constructor is language dependent. It may initialize data members to zero or other same values, or it may do nothing at all. In Java, a ""default constructor"" refer to a nullary constructor that is automatically generated by the compiler if no constructors have been defined for the class or in the absence of any programmer-defined constructors e.g. in Java, the default constructor implicitly calls the superclass's nullary constructor, then executes an empty body. All fields are left at their initial value of 0 integer types, 0.0 floating-point types, false boolean type, or null reference types.","['programmer', 'supply', 'constructor', 'instantiable', 'class', 'java', 'compiler', 'insert', 'default', 'constructor', 'code', 'behalf', 'constructor', 'know', 'default', 'constructor', 'find', 'source', 'code', 'java', 'file', 'insert', 'code', 'compilation', 'exist', '.class', 'file', 'behavior', 'default', 'constructor', 'language', 'dependent', 'initialize', 'data', 'member', 'zero', 'value', 'java', 'default', 'constructor', 'refer', 'nullary', 'constructor', 'automatically', 'generate', 'compiler', 'constructor', 'define', 'class', 'absence', 'programmer', 'define', 'constructor', 'e.g.', 'java', 'default', 'constructor', 'implicitly', 'call', 'superclass', 'nullary', 'constructor', 'execute', 'body', 'field', 'leave', 'initial', 'value', 'integer', 'type', '0', 'float', 'point', 'type', 'false', 'boolean', 'type', 'null', 'reference', 'type']"
650,"Like C++, Java also supports ""Copy Constructor"". But, unlike C++, Java doesn't create a default copy constructor if you don't write your own. Copy constructors define the actions performed by the compiler when copying class objects. A Copy constructor has one formal parameter that is the type of the class the parameter may be a reference to an object. It is used to create a copy of an existing object of the same class. Even though both classes are the same, it counts as a conversion constructor. While copy constructors are usually abbreviated copy ctor or cctor, they have nothing to do with class constructors used in .NET using the same abbreviation.","['like', 'c++', 'java', 'support', 'copy', 'constructor', 'unlike', 'c++', 'java', 'create', 'default', 'copy', 'constructor', 'write', 'copy', 'constructor', 'define', 'action', 'perform', 'compiler', 'copy', 'class', 'object', 'copy', 'constructor', 'formal', 'parameter', 'type', 'class', 'parameter', 'reference', 'object', 'create', 'copy', 'exist', 'object', 'class', 'class', 'count', 'conversion', 'constructor', 'copy', 'constructor', 'usually', 'abbreviate', 'copy', 'ctor', 'cctor', 'class', 'constructor', '.net', 'abbreviation']"
651,"Conversion constructors provide a means for a compiler to implicitly create an object belonging to one class based on an object of a different type. These constructors are usually invoked implicitly to convert arguments or operands to an appropriate type, but they may also be called explicitly.","['conversion', 'constructor', 'provide', 'mean', 'compiler', 'implicitly', 'create', 'object', 'belong', 'class', 'base', 'object', 'different', 'type', 'constructor', 'usually', 'invoke', 'implicitly', 'convert', 'argument', 'operand', 'appropriate', 'type', 'call', 'explicitly']"
652,"In C++, move constructors take an Rvalue reference to an object of the class, and are used to implement ownership transfer of the parameter object's resources.","['c++', 'constructor', 'rvalue', 'reference', 'object', 'class', 'implement', 'ownership', 'transfer', 'parameter', 'object', 'resource']"
653,"In Java, C#, and VB .NET, the constructor creates reference type objects in a special memory structure called the ""heap"". Value types such as int, double, etc. are created in a sequential structure called the ""stack"". VB .NET and C# also allow the use of the new operator to create value type objects, but these value type objects are created on the stack regardless of whether the operator is used or not.","['java', '.net', 'constructor', 'create', 'reference', 'type', 'object', 'special', 'memory', 'structure', 'call', 'heap', 'value', 'type', 'int', 'double', 'etc', 'create', 'sequential', 'structure', 'call', 'stack', '.net', 'allow', 'use', 'new', 'operator', 'create', 'value', 'type', 'object', 'value', 'type', 'object', 'create', 'stack', 'regardless', 'operator']"
654,"In C++, objects are created on the stack when the constructor is invoked without the new operator, and created on the heap when the constructor is invoked with the new operator. Stack objects are deleted implicitly when they go out of scope, while heap objects must be deleted implicitly by a destructor or explicitly by using the delete operator.","['c++', 'object', 'create', 'stack', 'constructor', 'invoke', 'new', 'operator', 'create', 'heap', 'constructor', 'invoke', 'new', 'operator', 'stack', 'object', 'delete', 'implicitly', 'scope', 'heap', 'object', 'delete', 'implicitly', 'destructor', 'explicitly', 'delete', 'operator']"
655,"In C++, the name of the constructor is the name of the class. It returns nothing. It can have parameters like any member function. Constructor functions are usually declared in the public section, but can also be declared in the protected and private sections, if the user wants to restrict access to them.","['c++', 'constructor', 'class', 'return', 'parameter', 'like', 'member', 'function', 'constructor', 'function', 'usually', 'declare', 'public', 'section', 'declare', 'protected', 'private', 'section', 'user', 'want', 'restrict', 'access']"
656,"The constructor has two parts. First is the initializer list which follows the parameter list and before the method body. It starts with a colon and entries are comma-separated. The initializer list is not required, but offers the opportunity to provide values for data members and avoid separate assignment statements. The initializer list is required if you have const or reference type data members, or members that do not have parameterless constructor logic. Assignments occur according to the order in which data members are declared even if the order in the initializer list is different.3 The second part is the body, which is a normal method body enclosed in curly brackets.","['constructor', 'part', 'initializer', 'list', 'follow', 'parameter', 'list', 'method', 'body', 'start', 'colon', 'entry', 'comma', 'separate', 'initializer', 'list', 'require', 'offer', 'opportunity', 'provide', 'value', 'data', 'member', 'avoid', 'separate', 'assignment', 'statement', 'initializer', 'list', 'require', 'const', 'reference', 'type', 'datum', 'member', 'member', 'parameterless', 'constructor', 'logic', 'assignment', 'occur', 'accord', 'order', 'data', 'member', 'declare', 'order', 'initializer', 'list', 'different', 'second', 'body', 'normal', 'method', 'body', 'enclose', 'curly', 'bracket']"
657,"C++ allows more than one constructor. The other constructors must have different parameters. Additionally constructors which contain parameters which are given default values, must adhere to the restriction that not all parameters are given a default value. This is a situation which only matters if there is a default constructor. The constructor of a base class or base classes can also be called by a derived class. Constructor functions are not inherited and their addresses cannot be referenced. When memory allocation is required, the new and delete operators are called implicitly.","['c++', 'allow', 'constructor', 'constructor', 'different', 'parameter', 'additionally', 'constructor', 'contain', 'parameter', 'give', 'default', 'value', 'adhere', 'restriction', 'parameter', 'give', 'default', 'value', 'situation', 'matter', 'default', 'constructor', 'constructor', 'base', 'class', 'base', 'class', 'call', 'derive', 'class', 'constructor', 'function', 'inherit', 'address', 'reference', 'memory', 'allocation', 'require', 'new', 'delete', 'operator', 'call', 'implicitly']"
658,"A copy constructor has a parameter of the same type passed as const reference, for example Vectorconst Vector& rhs. If it is not provided explicitly, the compiler uses the copy constructor for each member variable or simply copies values in case of primitive types. The default implementation is not efficient if the class has dynamically allocated members or handles to other resources, because it can lead to double calls to delete or double release of resources upon destruction.","['copy', 'constructor', 'parameter', 'type', 'pass', 'const', 'reference', 'example', 'vectorconst', 'vector', 'rh', 'provide', 'explicitly', 'compiler', 'use', 'copy', 'constructor', 'member', 'variable', 'simply', 'copy', 'value', 'case', 'primitive', 'type', 'default', 'implementation', 'efficient', 'class', 'dynamically', 'allocate', 'member', 'handle', 'resource', 'lead', 'double', 'call', 'delete', 'double', 'release', 'resource', 'destruction']"
659,"On returning objects from functions or passing objects by value, the objects copy constructor will be called implicitly, unless return value optimization applies.","['return', 'object', 'function', 'pass', 'object', 'value', 'object', 'copy', 'constructor', 'call', 'implicitly', 'return', 'value', 'optimization', 'apply']"
660,"C++ implicitly generates a default copy constructor which will call the copy constructors for all base classes and all member variables unless the programmer provides one, explicitly deletes the copy constructor to prevent cloning or one of the base classes or member variables copy constructor is deleted or not accessible private. Most cases calling for a customized copy constructor e.g. reference counting, deep copy of pointers also require customizing the destructor and the copy assignment operator. This is commonly referred to as the Rule of three.","['c++', 'implicitly', 'generate', 'default', 'copy', 'constructor', 'copy', 'constructor', 'base', 'class', 'member', 'variable', 'programmer', 'provide', 'explicitly', 'delete', 'copy', 'constructor', 'prevent', 'cloning', 'base', 'class', 'member', 'variable', 'copy', 'constructor', 'delete', 'accessible', 'private', 'case', 'call', 'customize', 'copy', 'constructor', 'e.g.', 'reference', 'counting', 'deep', 'copy', 'pointer', 'require', 'customize', 'destructor', 'copy', 'assignment', 'operator', 'commonly', 'refer', 'rule']"
661,"In C#, a static constructor is a static data initializer. Static constructors are also called class constructors. Since the actual method generated has the name .cctor they are often also called ""cctors"".45","['static', 'constructor', 'static', 'datum', 'initializer', 'static', 'constructor', 'call', 'class', 'constructor', 'actual', 'method', 'generate', '.cctor', 'call', 'cctors']"
662,"Static constructors allow complex static variable initialization.6 Static constructors are called implicitly when the class is first accessed. Any call to a class static or constructor call, triggers the static constructor execution. Static constructors are thread safe and implement a singleton pattern. When used in a generic programming class, static constructors are called at every new generic instantiation one per type. Static variables are instantiated as well.","['static', 'constructor', 'allow', 'complex', 'static', 'variable', 'initialization', 'static', 'constructor', 'call', 'implicitly', 'class', 'access', 'class', 'static', 'constructor', 'trigger', 'static', 'constructor', 'execution', 'static', 'constructor', 'thread', 'safe', 'implement', 'singleton', 'pattern', 'generic', 'programming', 'class', 'static', 'constructor', 'call', 'new', 'generic', 'instantiation', 'type', 'static', 'variable', 'instantiate']"
663,CFML uses a method named 'init' as a constructor method.,"['cfml', 'use', 'method', 'name', 'init', 'constructor', 'method']"
664,"Since ColdFusion 10,7 CFML has also supported specifying the name of the constructor method:","['coldfusion', '10', 'cfml', 'support', 'specify', 'constructor', 'method']"
665,"In Eiffel, the routines which initialize new objects are called creation procedures. Creation procedures have the following traits:","['eiffel', 'routine', 'initialize', 'new', 'object', 'call', 'creation', 'procedure', 'creation', 'procedure', 'follow', 'trait']"
666,"Although object creation involves some subtleties,8 the creation of an attribute with a typical declaration x: T as expressed in a creation instruction create x.make consists of the following sequence of steps:","['object', 'creation', 'involve', 'subtleties', 'creation', 'attribute', 'typical', 'declaration', 'express', 'creation', 'instruction', 'create', 'x.make', 'consist', 'follow', 'sequence', 'step']"
667,"In the first snippet below, class POINT is defined. The procedure make is coded after the keyword feature.","['snippet', 'class', 'point', 'define', 'procedure', 'code', 'keyword', 'feature']"
668,"The keyword create introduces a list of procedures which can be used to initialize instances. In this case the list includes default_create, a procedure with an empty implementation inherited from class ANY, and the make procedure coded within the class.","['keyword', 'create', 'introduce', 'list', 'procedure', 'initialize', 'instance', 'case', 'list', 'include', 'default_create', 'procedure', 'implementation', 'inherit', 'class', 'procedure', 'code', 'class']"
669,"In the second snippet, a class which is a client to POINT has a declarations my_point_1 and my_point_2 of type POINT.","['second', 'snippet', 'class', 'client', 'point', 'declaration', 'my_point_1', 'my_point_2', 'type', 'point']"
670,"In procedural code, my_point_1 is created as the origin 0.0, 0.0. Because no creation procedure is specified, the procedure default_create inherited from class ANY is used. This line could have been coded create my_point_1.default_create . Only procedures named as creation procedures can be used in an instruction with the create keyword. Next is a creation instruction for my_point_2, providing initial values for the my_point_2's coordinates. The third instruction makes an ordinary instance call to the make procedure to reinitialize the instance attached to my_point_2 with different values.","['procedural', 'code', 'my_point_1', 'create', 'origin', '0', '0', 'creation', 'procedure', 'specify', 'procedure', 'default_create', 'inherit', 'class', 'line', 'code', 'create', 'my_point_1.default_create', 'procedure', 'name', 'creation', 'procedure', 'instruction', 'create', 'keyword', 'creation', 'instruction', 'my_point_2', 'provide', 'initial', 'value', 'my_point_2', 'coordinate', 'instruction', 'make', 'ordinary', 'instance', 'procedure', 'reinitialize', 'instance', 'attach', 'my_point_2', 'different', 'value']"
671,"In F#, a constructor can include any let or do statements defined in a class. let statements define private fields and do statements execute code. Additional constructors can be defined using the new keyword.","['constructor', 'include', 'let', 'statement', 'define', 'class', 'let', 'statement', 'define', 'private', 'field', 'statement', 'execute', 'code', 'additional', 'constructor', 'define', 'new', 'keyword']"
672,"In Java, constructors differ from other methods in that:","['java', 'constructor', 'differ', 'method']"
673,Java constructors perform the following tasks in the following order:,"['java', 'constructor', 'perform', 'follow', 'task', 'follow', 'order']"
674,Java permit users to call one constructor in another constructor using this keyword. But this must be first statement. 9,"['java', 'permit', 'user', 'constructor', 'constructor', 'keyword', 'statement']"
675,Java provides access to the superclass's constructor through the super keyword.,"['java', 'provide', 'access', 'superclass', 'constructor', 'super', 'keyword']"
676,"A constructor taking zero number of arguments is called a ""no-arguments"" or ""no-arg"" constructor.10","['constructor', 'take', 'zero', 'number', 'argument', 'call', 'argument', 'arg', 'constructor']"
677,"As of ES6, JavaScript has direct constructors like many other programming languages. They are written as such","['es6', 'javascript', 'direct', 'constructor', 'like', 'programming', 'language', 'write']"
678,This can be instantiated as such,['instantiate']
679,"The equivalent of this before ES6, was creating a function that instantiates an object as such","['equivalent', 'es6', 'create', 'function', 'instantiate', 'object']"
680,This is instantiated the same way as above.,"['instantiate', 'way']"
681,"In Object Pascal, the constructor is similar to a factory method. The only syntactic difference to regular methods is the keyword constructor in front of the name instead of procedure or function. It can have any name, though the convention is to have Create as prefix, such as in CreateWithFormatting. Creating an instance of a class works like calling a static method of a class: TPerson.Create'Peter'.","['object', 'pascal', 'constructor', 'similar', 'factory', 'method', 'syntactic', 'difference', 'regular', 'method', 'keyword', 'constructor', 'instead', 'procedure', 'function', 'convention', 'create', 'prefix', 'createwithformatting', 'create', 'instance', 'class', 'work', 'like', 'call', 'static', 'method', 'class', 'tperson', ""create'peter""]"
682,"In OCaml, there is one constructor. Parameters are defined right after the class name. They can be used to initialize instance variables and are accessible throughout the class. An anonymous hidden method called initializer allows to evaluate an expression immediately after the object has been built. 11","['ocaml', 'constructor', 'parameter', 'define', 'right', 'class', 'initialize', 'instance', 'variable', 'accessible', 'class', 'anonymous', 'hide', 'method', 'call', 'initializer', 'allow', 'evaluate', 'expression', 'immediately', 'object', 'build']"
683,"In PHP version 5 and above, the constructor is a method named __construct notice that it's a double underscore, which the keyword new automatically calls after creating the object. It is usually used to automatically perform initializations such as property initializations. Constructors can also accept arguments, in which case, when the new statement is written, you also need to send the constructor arguments for the parameters.1","['php', 'version', 'constructor', 'method', 'name', 'construct', 'notice', 'double', 'underscore', 'keyword', 'new', 'automatically', 'call', 'create', 'object', 'usually', 'automatically', 'perform', 'initialization', 'property', 'initialization', 'constructor', 'accept', 'argument', 'case', 'new', 'statement', 'write', 'need', 'send', 'constructor', 'argument', 'parameters']"
684,"In PHP, a class is only allowed to declare a maximum of one constructor method. Static methods, factory classes or optional constructor arguments are some ways to facilitate multiple ways to create objects of a PHP class.","['php', 'class', 'allow', 'declare', 'maximum', 'constructor', 'method', 'static', 'method', 'factory', 'class', 'optional', 'constructor', 'argument', 'way', 'facilitate', 'multiple', 'way', 'create', 'object', 'php', 'class']"
685,"In Perl programming language version 5, by default, constructors are factory methods, that is, methods that create and return the object, concretely meaning create and return a blessed reference. A typical object is a reference to a hash, though rarely references to other types are used too. By convention the only constructor is named new, though it is allowed to name it otherwise, or to have multiple constructors. For example, a Person class may have a constructor named new as well as a constructor new_from_file which reads a file for Person attributes, and new_from_person which uses another Person object as a template.","['perl', 'programming', 'language', 'version', 'default', 'constructor', 'factory', 'method', 'method', 'create', 'return', 'object', 'concretely', 'mean', 'create', 'return', 'bless', 'reference', 'typical', 'object', 'reference', 'hash', 'rarely', 'reference', 'type', 'convention', 'constructor', 'name', 'new', 'allow', 'multiple', 'constructor', 'example', 'person', 'class', 'constructor', 'name', 'new', 'constructor', 'new_from_file', 'read', 'file', 'person', 'attribute', 'new_from_person', 'use', 'person', 'object', 'template']"
686,"With the Moose object system for Perl, most of this boilerplate can be left out, a default new is created, attributes can be specified, as well as whether they can be set, reset, or are required. In addition, any extra constructor functionality can be included in a BUILD method which the Moose generated constructor will call, after it has checked the arguments. A BUILDARGS method can be specified to handle constructor arguments not in hashref / key => value form.","['moose', 'object', 'system', 'perl', 'boilerplate', 'leave', 'default', 'new', 'create', 'attribute', 'specify', 'set', 'reset', 'require', 'addition', 'extra', 'constructor', 'functionality', 'include', 'build', 'method', 'moose', 'generate', 'constructor', 'check', 'argument', 'buildargs', 'method', 'specify', 'handle', 'constructor', 'argument', 'hashref', 'key', 'value', 'form']"
687,In both cases the Person class is instiated like this:,"['case', 'person', 'class', 'instiate', 'like']"
688,"In Python, constructors are defined by one or both of __new__ and __init__ methods. A new instance is created by calling the class as if it were a function, which calls the __new__ and __init__ methods. If a constructor method is not defined in the class, the next one found in the class's Method Resolution Order will be called.12","['python', 'constructor', 'define', 'new', 'init', 'method', 'new', 'instance', 'create', 'call', 'class', 'function', 'call', 'new', 'init', 'method', 'constructor', 'method', 'define', 'class', 'find', 'class', 'method', 'resolution', 'order', 'called']"
689,"In the typical case, only the __init__ method need be defined. The most common exception is for immutable objects.","['typical', 'case', 'init', 'method', 'need', 'define', 'common', 'exception', 'immutable', 'object']"
690,"Classes normally act as factories for new instances of themselves, that is, a class is a callable object like a function, with the call being the constructor, and calling the class returns an instance of that class. However the __new__ method is permitted to return something other than an instance of the class for specialised purposes. In that case, the __init__ is not invoked.13","['class', 'normally', 'act', 'factory', 'new', 'instance', 'class', 'callable', 'object', 'like', 'function', 'constructor', 'call', 'class', 'return', 'instance', 'class', 'new', 'method', 'permit', 'return', 'instance', 'class', 'specialised', 'purpose', 'case', 'init', 'invoked']"
691,"With Raku, even more boilerplate can be left out, given that a default new method is inherited, attributes can be specified, as well as whether they can be set, reset, or are required. In addition, any extra constructor functionality can be included in a BUILD method which will get called to allow for custom initialization. A TWEAK method can be specified to post-process any attributes already implicitly initialized.","['raku', 'boilerplate', 'leave', 'give', 'default', 'new', 'method', 'inherit', 'attribute', 'specify', 'set', 'reset', 'require', 'addition', 'extra', 'constructor', 'functionality', 'include', 'build', 'method', 'call', 'allow', 'custom', 'initialization', 'tweak', 'method', 'specify', 'post', 'process', 'attribute', 'implicitly', 'initialize']"
692,The Person class is instantiated like this:,"['person', 'class', 'instantiate', 'like']"
693,"Alternatively, the named parameters can be specified using the colon-pair syntax in Perl 6:","['alternatively', 'name', 'parameter', 'specify', 'colon', 'pair', 'syntax', 'perl']"
694,"And should you have set up variables with names identical to the named parameters, you can use a shortcut that will use the name of the variable for the named parameter:","['set', 'variable', 'name', 'identical', 'name', 'parameter', 'use', 'shortcut', 'use', 'variable', 'name', 'parameter']"
695,"In Ruby, constructors are created by defining a method called initialize. This method is executed to initialize each new instance.","['ruby', 'constructor', 'create', 'define', 'method', 'call', 'initialize', 'method', 'execute', 'initialize', 'new', 'instance']"
696,"In Visual Basic .NET, constructors use a method declaration with the name ""New"".","['visual', 'basic', '.net', 'constructor', 'use', 'method', 'declaration', 'new']"
697,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
698,"In computer science, a container is a class or a data structure12 whose instances are collections of other objects. In other words, they store objects in an organized way that follows specific access rules.","['computer', 'science', 'container', 'class', 'data', 'structure12', 'instance', 'collection', 'object', 'word', 'store', 'object', 'organized', 'way', 'follow', 'specific', 'access', 'rule']"
699,"The size of the container depends on the number of objects elements it contains. Underlying inherited implementations of various container types may vary in size, complexity and type of language, but in many cases they provide flexibility in choosing the right implementation for any given scenario.","['size', 'container', 'depend', 'number', 'object', 'element', 'contain', 'underlie', 'inherit', 'implementation', 'container', 'type', 'vary', 'size', 'complexity', 'type', 'language', 'case', 'provide', 'flexibility', 'choose', 'right', 'implementation', 'give', 'scenario']"
700,Container data structures are commonly used in many types of programming languages.,"['container', 'datum', 'structure', 'commonly', 'type', 'programming', 'language']"
701,Containers can be characterized by the following three properties:,"['container', 'characterize', 'follow', 'property']"
702,Container classes are expected to implement CRUD-like methods to do the following:,"['container', 'class', 'expect', 'implement', 'crud', 'like', 'method', 'following']"
703,Containers are sometimes implemented in conjunction with iterators.,"['container', 'implement', 'conjunction', 'iterator']"
704,Containers may be classified as either single-value containers or associative containers.,"['container', 'classify', 'single', 'value', 'container', 'associative', 'container']"
705,"Single-value containers store each object independently. Objects may be accessed directly, by a language loop construct e.g. for loop or with an iterator.","['single', 'value', 'container', 'store', 'object', 'independently', 'object', 'access', 'directly', 'language', 'loop', 'construct', 'e.g.', 'loop', 'iterator']"
706,"An associative container uses an associative array, map, or dictionary, composed of key-value pairs, such that each key appears at most once in the container. The key is used to find the value, the object, if it is stored in the container. Associative containers are used in programming languages as class templates.","['associative', 'container', 'use', 'associative', 'array', 'map', 'dictionary', 'compose', 'key', 'value', 'pair', 'key', 'appear', 'container', 'key', 'find', 'value', 'object', 'store', 'container', 'associative', 'container', 'programming', 'language', 'class', 'template']"
707,Common data structures used to implement these abstract types include:,"['common', 'data', 'structure', 'implement', 'abstract', 'type', 'include']"
708,"Widget toolkits also use containers, which are special widgets to group other widgets, such as windows, panels. Apart from their graphical properties, they have the same type of behavior as container classes, as they keep a list of their child widgets, and allow adding, removing, or retrieving widgets among their children.","['widget', 'toolkit', 'use', 'container', 'special', 'widget', 'group', 'widget', 'window', 'panel', 'apart', 'graphical', 'property', 'type', 'behavior', 'container', 'class', 'list', 'child', 'widget', 'allow', 'adding', 'remove', 'retrieve', 'widget', 'child']"
709,"Container abstractions can be written in virtually any programming language, regardless of its type system.3: 273 However, in strongly-typed object-oriented programming languages it may be somewhat complicated for a developer to write reusable homogeneous containers.","['container', 'abstraction', 'write', 'virtually', 'programming', 'language', 'regardless', 'type', 'system', '273', 'strongly', 'type', 'object', 'orient', 'programming', 'language', 'somewhat', 'complicated', 'developer', 'write', 'reusable', 'homogeneous', 'container']"
710,Because of differences in element types this results in a tedious process of writing and keeping a collection of containers for every elemental type.3: 274–276,"['difference', 'element', 'type', 'result', 'tedious', 'process', 'writing', 'keep', 'collection', 'container', 'elemental', 'type', '274–276']"
711,"Many elemental types e.g. integers or floating numbers are inherently incompatible with each other because of the memory size they occupy and their semantic meaning and therefore require different containers unless of course, they are mutually compatible or convertible.3: 274–276 Modern programming languages offer various approaches to help solving the problem:3: 274–281","['elemental', 'type', 'e.g.', 'integer', 'float', 'number', 'inherently', 'incompatible', 'memory', 'size', 'occupy', 'semantic', 'meaning', 'require', 'different', 'container', 'course', 'mutually', 'compatible', 'convertible', '274–276', 'modern', 'programming', 'language', 'offer', 'approach', 'help', 'solve', 'problem', '274–281']"
712,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
713,"Many programming language type systems support subtyping. For instance, if the type Cat is a subtype of Animal, then an expression of type Cat should be substitutable wherever an expression of type Animal is used.","['programming', 'language', 'type', 'system', 'support', 'subtype', 'instance', 'type', 'cat', 'subtype', 'animal', 'expression', 'type', 'cat', 'substitutable', 'expression', 'type', 'animal']"
714,"Variance refers to how subtyping between more complex types relates to subtyping between their components. For example, how should a list of Cats relate to a list of Animals? Or how should a function that returns Cat relate to a function that returns Animal?","['variance', 'refer', 'subtype', 'complex', 'type', 'relate', 'subtype', 'component', 'example', 'list', 'cats', 'relate', 'list', 'animal', 'function', 'return', 'cat', 'relate', 'function', 'return', 'animal']"
715,"Depending on the variance of the type constructor, the subtyping relation of the simple types may be either preserved, reversed, or ignored for the respective complex types. In the OCaml programming language, for example, ""list of Cat"" is a subtype of ""list of Animal"" because the list type constructor is covariant. This means that the subtyping relation of the simple types are preserved for the complex types.","['depend', 'variance', 'type', 'constructor', 'subtype', 'relation', 'simple', 'type', 'preserve', 'reverse', 'ignore', 'respective', 'complex', 'type', 'ocaml', 'programming', 'language', 'example', 'list', 'cat', 'subtype', 'list', 'animal', 'list', 'type', 'constructor', 'covariant', 'mean', 'subtype', 'relation', 'simple', 'type', 'preserve', 'complex', 'type']"
716,"On the other hand, ""function from Animal to String"" is a subtype of ""function from Cat to String"" because the function type constructor is contravariant in the parameter type. Here, the subtyping relation of the simple types is reversed for the complex types.","['hand', 'function', 'animal', 'string', 'subtype', 'function', 'cat', 'string', 'function', 'type', 'constructor', 'contravariant', 'parameter', 'type', 'subtype', 'relation', 'simple', 'type', 'reverse', 'complex', 'type']"
717,"In other words, covariance is the quality of being different by being more specific Cat is covariant to Animal while contravariance is the quality of being different by being more general Animal is contravariant to Cat.","['word', 'covariance', 'quality', 'different', 'specific', 'cat', 'covariant', 'animal', 'contravariance', 'quality', 'different', 'general', 'animal', 'contravariant', 'cat']"
718,"A programming language designer will consider variance when devising typing rules for language features such as arrays, inheritance, and generic datatypes. By making type constructors covariant or contravariant instead of invariant, more programs will be accepted as well-typed. On the other hand, programmers often find contravariance unintuitive, and accurately tracking variance to avoid runtime type errors can lead to complex typing rules.","['programming', 'language', 'designer', 'consider', 'variance', 'devise', 'typing', 'rule', 'language', 'feature', 'array', 'inheritance', 'generic', 'datatype', 'make', 'type', 'constructor', 'covariant', 'contravariant', 'instead', 'invariant', 'program', 'accept', 'type', 'hand', 'programmer', 'find', 'contravariance', 'unintuitive', 'accurately', 'track', 'variance', 'avoid', 'runtime', 'type', 'error', 'lead', 'complex', 'typing', 'rule']"
719,"In order to keep the type system simple and allow useful programs, a language may treat a type constructor as invariant even if it would be safe to consider it variant, or treat it as covariant even though that could violate type safety.","['order', 'type', 'system', 'simple', 'allow', 'useful', 'program', 'language', 'treat', 'type', 'constructor', 'invariant', 'safe', 'consider', 'variant', 'treat', 'covariant', 'violate', 'type', 'safety']"
720,"Within the type system of a programming language, a typing rule or a type constructor is:","['type', 'system', 'programming', 'language', 'typing', 'rule', 'type', 'constructor']"
721,The article considers how this applies to some common type constructors.,"['article', 'consider', 'apply', 'common', 'type', 'constructor']"
722,"For example, in C#, if Cat is a subtype of Animal, then:","['example', 'cat', 'subtype', 'animal']"
723,"The variance of a C# generic interface is declared by placing the out covariant or in contravariant attribute on zero or more of its type parameters. For each so-marked type parameter, the compiler conclusively verifies, with any violation being fatal, that such use is globally consistent. The above interfaces are declared as IEnumerable<out T>, Action<in T>, and IList<T>. Types with more than one type parameter may specify different variances on each type parameter. For example, the delegate type Func<in T, out TResult> represents a function with a contravariant input parameter of type T and a covariant return value of type TResult.2","['variance', 'generic', 'interface', 'declare', 'place', 'covariant', 'contravariant', 'attribute', 'zero', 'type', 'parameter', 'mark', 'type', 'parameter', 'compiler', 'conclusively', 'verifie', 'violation', 'fatal', 'use', 'globally', 'consistent', 'interface', 'declare', 'ienumerable', 'action', 'ilist', 'type', 'type', 'parameter', 'specify', 'different', 'variance', 'type', 'parameter', 'example', 'delegate', 'type', 'func', 'tresult', 'represent', 'function', 'contravariant', 'input', 'parameter', 'type', 'covariant', 'return', 'value', 'type', 'tresult']"
724,"The typing rules for interface variance ensure type safety. For example, an Action<T> represents a first-class function expecting an argument of type T, and a function that can handle any type of animal can always be used instead of one that can only handle cats.","['typing', 'rule', 'interface', 'variance', 'ensure', 'type', 'safety', 'example', 'action', 'represent', 'class', 'function', 'expect', 'argument', 'type', 'function', 'handle', 'type', 'animal', 'instead', 'handle', 'cat']"
725,"Read-only data types sources can be covariant; write-only data types sinks can be contravariant. Mutable data types which act as both sources and sinks should be invariant. To illustrate this general phenomenon, consider the array type. For the type Animal we can make the type Animal, which is an ""array of animals"". For the purposes of this example, this array supports both reading and writing elements.","['read', 'datum', 'type', 'source', 'covariant', 'write', 'data', 'type', 'sink', 'contravariant', 'mutable', 'datum', 'type', 'act', 'source', 'sink', 'invariant', 'illustrate', 'general', 'phenomenon', 'consider', 'array', 'type', 'type', 'animal', 'type', 'animal', 'array', 'animal', 'purpose', 'example', 'array', 'support', 'read', 'write', 'element']"
726,We have the option to treat this as either:,"['option', 'treat']"
727,"If we wish to avoid type errors, then only the third choice is safe. Clearly, not every Animal can be treated as if it were a Cat, since a client reading from the array will expect a Cat, but an Animal may contain e.g. a Dog. So the contravariant rule is not safe.","['wish', 'avoid', 'type', 'error', 'choice', 'safe', 'clearly', 'animal', 'treat', 'cat', 'client', 'reading', 'array', 'expect', 'cat', 'animal', 'contain', 'e.g.', 'dog', 'contravariant', 'rule', 'safe']"
728,"Conversely, a Cat cannot be treated as an Animal. It should always be possible to put a Dog into an Animal. With covariant arrays this cannot be guaranteed to be safe, since the backing store might actually be an array of cats. So the covariant rule is also not safe—the array constructor should be invariant. Note that this is only an issue for mutable arrays; the covariant rule is safe for immutable read-only arrays. Likewise, the contravariant rule would be safe for write-only arrays.","['conversely', 'cat', 'treat', 'animal', 'possible', 'dog', 'animal', 'covariant', 'array', 'guarantee', 'safe', 'backing', 'store', 'actually', 'array', 'cat', 'covariant', 'rule', 'safe', 'array', 'constructor', 'invariant', 'note', 'issue', 'mutable', 'array', 'covariant', 'rule', 'safe', 'immutable', 'read', 'array', 'likewise', 'contravariant', 'rule', 'safe', 'write', 'array']"
729,"With C# you can play around this by using the dynamic keyword over array/collection/generics with duck typing, the intellisense is lost this way but it works.","['play', 'dynamic', 'keyword', 'array', 'collection', 'generic', 'duck', 'typing', 'intellisense', 'lose', 'way', 'work']"
730,"Early versions of Java and C# did not include generics, also termed parametric polymorphism. In such a setting, making arrays invariant rules out useful polymorphic programs.","['early', 'version', 'java', 'include', 'generic', 'term', 'parametric', 'polymorphism', 'setting', 'make', 'arrays', 'invariant', 'rule', 'useful', 'polymorphic', 'program']"
731,"For example, consider writing a function to shuffle an array, or a function that tests two arrays for equality using the Object.equals method on the elements. The implementation does not depend on the exact type of element stored in the array, so it should be possible to write a single function that works on all types of arrays. It is easy to implement functions of type:","['example', 'consider', 'write', 'function', 'shuffle', 'array', 'function', 'test', 'array', 'equality', 'object.equals', 'method', 'element', 'implementation', 'depend', 'exact', 'type', 'element', 'store', 'array', 'possible', 'write', 'single', 'function', 'work', 'type', 'array', 'easy', 'implement', 'function', 'type']"
732,"However, if array types were treated as invariant, it would only be possible to call these functions on an array of exactly the type Object. One could not, for example, shuffle an array of strings.","['array', 'type', 'treat', 'invariant', 'possible', 'function', 'array', 'exactly', 'type', 'object', 'example', 'shuffle', 'array', 'string']"
733,"Therefore, both Java and C# treat array types covariantly. For instance, in Java String is a subtype of Object, and in C# string is a subtype of object.","['java', 'treat', 'array', 'type', 'covariantly', 'instance', 'java', 'string', 'subtype', 'object', 'string', 'subtype', 'object']"
734,"As discussed above, covariant arrays lead to problems with writes into the array. Java and C# deal with this by marking each array object with a type when it is created. Each time a value is stored into an array, the execution environment will check that the run-time type of the value is equal to the run-time type of the array. If there is a mismatch, an ArrayStoreException Java or ArrayTypeMismatchException C# is thrown:","['discuss', 'covariant', 'array', 'lead', 'problem', 'write', 'array', 'java', 'deal', 'mark', 'array', 'object', 'type', 'create', 'time', 'value', 'store', 'array', 'execution', 'environment', 'check', 'run', 'time', 'type', 'value', 'equal', 'run', 'time', 'type', 'array', 'mismatch', 'arraystoreexception', 'java', 'arraytypemismatchexception', 'throw']"
735,"In the above example, one can read from the array b safely. It is only trying to write to the array that can lead to trouble.","['example', 'read', 'array', 'safely', 'try', 'write', 'array', 'lead', 'trouble']"
736,"One drawback to this approach is that it leaves the possibility of a run-time error that a stricter type system could have caught at compile-time. Also, it hurts performance because each write into an array requires an additional run-time check.","['drawback', 'approach', 'leave', 'possibility', 'run', 'time', 'error', 'strict', 'type', 'system', 'catch', 'compile', 'time', 'hurt', 'performance', 'write', 'array', 'require', 'additional', 'run', 'time', 'check']"
737,"With the addition of generics, Java and C# now offer ways to write this kind of polymorphic function without relying on covariance. The array comparison and shuffling functions can be given the parameterized types","['addition', 'generic', 'java', 'offer', 'way', 'write', 'kind', 'polymorphic', 'function', 'rely', 'covariance', 'array', 'comparison', 'shuffle', 'function', 'give', 'parameterized', 'type']"
738,"Alternatively, to enforce that a C# method accesses a collection in a read-only way, one can use the interface IEnumerable<object> instead of passing it an array object.","['alternatively', 'enforce', 'method', 'access', 'collection', 'read', 'way', 'use', 'interface', 'ienumerable', 'object', 'instead', 'pass', 'array', 'object']"
739,"Languages with first-class functions have function types like ""a function expecting a Cat and returning an Animal"" written Cat -> Animal in OCaml syntax or Func<Cat,Animal> in C# syntax.","['language', 'class', 'function', 'function', 'type', 'like', 'function', 'expect', 'cat', 'return', 'animal', 'write', 'cat', 'animal', 'ocaml', 'syntax', 'func', 'cat', 'animal', 'syntax']"
740,"Those languages also need to specify when one function type is a subtype of another—that is, when it is safe to use a function of one type in a context that expects a function of a different type. It is safe to substitute a function f for a function g if f accepts a more general type of argument and returns a more specific type than g. For example, functions of type Animal -> Cat, Cat -> Cat, and Animal -> Animal can be used wherever a Cat -> Animal was expected. One can compare this to the robustness principle of communication: ""be liberal in what you accept and conservative in what you produce."" The general rule is:","['language', 'need', 'specify', 'function', 'type', 'subtype', 'safe', 'use', 'function', 'type', 'context', 'expect', 'function', 'different', 'type', 'safe', 'substitute', 'function', 'function', 'accept', 'general', 'type', 'argument', 'return', 'specific', 'type', 'example', 'function', 'type', 'animal', 'cat', 'cat', 'cat', 'animal', 'animal', 'cat', 'animal', 'expect', 'compare', 'robustness', 'principle', 'communication', 'liberal', 'accept', 'conservative', 'produce', 'general', 'rule']"
741,Using inference rule notation the same rule can be written as:,"['inference', 'rule', 'notation', 'rule', 'write']"
742,"In other words, the → type constructor is contravariant in the parameter input type and covariant in the return output type. This rule was first stated formally by John C. Reynolds,3 and further popularized in a paper by Luca Cardelli.4","['word', 'type', 'constructor', 'contravariant', 'parameter', 'input', 'type', 'covariant', 'return', 'output', 'type', 'rule', 'state', 'formally', 'john', 'reynolds', 'popularize', 'paper', 'luca', 'cardelli']"
743,"When dealing with functions that take functions as arguments, this rule can be applied several times. For example, by applying the rule twice, we see that P 1 → R → R ≤ P 2 → R → R \displaystyle P_1\to R\to R\leq P_2\to R\to R if P 1 ≤ P 2 \displaystyle P_1\leq P_2 . In other words, the type A → B → C \displaystyle A\to B\to C is covariant in the position of A \displaystyle A . For complicated types it can be confusing to mentally trace why a given type specialization is or isn't type-safe, but it is easy to calculate which positions are co- and contravariant: a position is covariant if it is on the left side of an even number of arrows applying to it.","['deal', 'function', 'function', 'argument', 'rule', 'apply', 'time', 'example', 'apply', 'rule', 'twice', 'p_2', 'word', 'type', 'covariant', 'position', 'complicated', 'type', 'confusing', 'mentally', 'trace', 'give', 'type', 'specialization', 'type', 'safe', 'easy', 'calculate', 'position', 'co-', 'contravariant', 'position', 'covariant', 'left', 'number', 'arrow', 'apply']"
744,"When a subclass overrides a method in a superclass, the compiler must check that the overriding method has the right type. While some languages require that the type exactly matches the type in the superclass invariance, it is also type safe to allow the overriding method to have a ""better"" type. By the usual subtyping rule for function types, this means that the overriding method should return a more specific type return type covariance, and accept a more general argument parameter type contravariance. In UML notation, the possibilities are as follows where Class B is the subclass that extends Class A which is the superclass:","['subclass', 'override', 'method', 'superclass', 'compiler', 'check', 'override', 'method', 'right', 'type', 'language', 'require', 'type', 'exactly', 'match', 'type', 'superclass', 'invariance', 'type', 'safe', 'allow', 'override', 'method', 'well', 'type', 'usual', 'subtyping', 'rule', 'function', 'type', 'mean', 'override', 'method', 'return', 'specific', 'type', 'return', 'type', 'covariance', 'accept', 'general', 'argument', 'parameter', 'type', 'contravariance', 'uml', 'notation', 'possibility', 'follow', 'class', 'subclass', 'extend', 'class', 'superclass']"
745,Subtyping of the parameter/return type of the method.,"['subtype', 'parameter', 'return', 'type', 'method']"
746,Invariance. The signature of the overriding method is unchanged.,"['invariance', 'signature', 'override', 'method', 'unchanged']"
747,Covariant return type. The subtyping relation is in the same direction as the relation between ClassA and ClassB.,"['covariant', 'return', 'type', 'subtype', 'relation', 'direction', 'relation', 'classa', 'classb.']"
748,Contravariant parameter type. The subtyping relation is in the opposite direction to the relation between ClassA and ClassB.,"['contravariant', 'parameter', 'type', 'subtype', 'relation', 'opposite', 'direction', 'relation', 'classa', 'classb.']"
749,Covariant parameter type. Not type safe.,"['covariant', 'parameter', 'type', 'type', 'safe']"
750,"For a concrete example, suppose we are writing a class to model an animal shelter. We assume that Cat is a subclass of Animal, and that we have a base class using Java syntax","['concrete', 'example', 'suppose', 'write', 'class', 'model', 'animal', 'shelter', 'assume', 'cat', 'subclass', 'animal', 'base', 'class', 'java', 'syntax']"
751,"Now the question is: if we subclass AnimalShelter, what types are we allowed to give to getAnimalForAdoption and putAnimal?","['question', 'subclass', 'animalshelter', 'type', 'allow', 'getanimalforadoption', 'putanimal']"
752,"In a language which allows covariant return types, a derived class can override the getAnimalForAdoption method to return a more specific type:","['language', 'allow', 'covariant', 'return', 'type', 'derive', 'class', 'override', 'getanimalforadoption', 'method', 'return', 'specific', 'type']"
753,"Among mainstream OO languages, Java, C++ and C# as of version 9.0 5 support covariant return types. Adding the covariant return type was one of the first modifications of the C++ language approved by the standards committee in 1998.6 Scala and D also support covariant return types.","['mainstream', 'language', 'java', 'c++', 'version', '9', 'support', 'covariant', 'return', 'type', 'add', 'covariant', 'return', 'type', 'modification', 'c++', 'language', 'approve', 'standards', 'committee', '1998', 'scala', 'support', 'covariant', 'return', 'type']"
754,"Similarly, it is type safe to allow an overriding method to accept a more general argument than the method in the base class:","['similarly', 'type', 'safe', 'allow', 'override', 'method', 'accept', 'general', 'argument', 'method', 'base', 'class']"
755,"Only a few object-oriented languages actually allow this for example, Python when typechecked with mypy. C++, Java and most other languages that support overloading and/or shadowing would interpret this as a method with an overloaded or shadowed name.","['object', 'orient', 'language', 'actually', 'allow', 'example', 'python', 'typechecke', 'mypy', 'c++', 'java', 'language', 'support', 'overload', 'shadow', 'interpret', 'method', 'overloaded', 'shadow']"
756,"However, Sather supported both covariance and contravariance. Calling convention for overridden methods are covariant with out parameters and return values, and contravariant with normal parameters with the mode in.","['sather', 'support', 'covariance', 'contravariance', 'call', 'convention', 'overridden', 'method', 'covariant', 'parameter', 'return', 'value', 'contravariant', 'normal', 'parameter', 'mode']"
757,"A couple of mainstream languages, Eiffel and Dart7 allow the parameters of an overriding method to have a more specific type than the method in the superclass parameter type covariance. Thus, the following Dart code would type check, with putAnimal overriding the method in the base class:","['couple', 'mainstream', 'language', 'eiffel', 'dart7', 'allow', 'parameter', 'override', 'method', 'specific', 'type', 'method', 'superclass', 'parameter', 'type', 'covariance', 'follow', 'dart', 'code', 'type', 'check', 'putanimal', 'override', 'method', 'base', 'class']"
758,"This is not type safe. By up-casting a CatShelter to an AnimalShelter, one can try to place a dog in a cat shelter. That does not meet CatShelter parameter restrictions, and will result in a runtime error. The lack of type safety known as the ""catcall problem"" in the Eiffel community, where ""cat"" or ""CAT"" is a Changed Availability or Type has been a long-standing issue. Over the years, various combinations of global static analysis, local static analysis, and new language features have been proposed to remedy it,89 and these have been implemented in some Eiffel compilers.","['type', 'safe', 'cast', 'catshelter', 'animalshelter', 'try', 'place', 'dog', 'cat', 'shelter', 'meet', 'catshelter', 'parameter', 'restriction', 'result', 'runtime', 'error', 'lack', 'type', 'safety', 'know', 'catcall', 'problem', 'eiffel', 'community', 'cat', 'cat', 'changed', 'availability', 'type', 'long', 'stand', 'issue', 'year', 'combination', 'global', 'static', 'analysis', 'local', 'static', 'analysis', 'new', 'language', 'feature', 'propose', 'remedy', 'it', 'implement', 'eiffel', 'compiler']"
759,"Despite the type safety problem, the Eiffel designers consider covariant parameter types crucial for modeling real world requirements.9 The cat shelter illustrates a common phenomenon: it is a kind of animal shelter but has additional restrictions, and it seems reasonable to use inheritance and restricted parameter types to model this. In proposing this use of inheritance, the Eiffel designers reject the Liskov substitution principle, which states that objects of subclasses should always be less restricted than objects of their superclass.","['despite', 'type', 'safety', 'problem', 'eiffel', 'designer', 'consider', 'covariant', 'parameter', 'type', 'crucial', 'model', 'real', 'world', 'requirements', 'cat', 'shelter', 'illustrate', 'common', 'phenomenon', 'kind', 'animal', 'shelter', 'additional', 'restriction', 'reasonable', 'use', 'inheritance', 'restrict', 'parameter', 'type', 'model', 'propose', 'use', 'inheritance', 'eiffel', 'designer', 'reject', 'liskov', 'substitution', 'principle', 'state', 'object', 'subclass', 'restricted', 'object', 'superclass']"
760,"One other instance of a mainstream language allowing covariance in method parameters is PHP in regards to class constructors. In the following example, the __construct method is accepted, despite the method parameter being covariant to the parent's method parameter. Were this method anything other than __construct, an error would occur:","['instance', 'mainstream', 'language', 'allow', 'covariance', 'method', 'parameter', 'php', 'regard', 'class', 'constructor', 'follow', 'example', 'construct', 'method', 'accept', 'despite', 'method', 'parameter', 'covariant', 'parent', 'method', 'parameter', 'method', 'construct', 'error', 'occur']"
761,"Another example where covariant parameters seem helpful is so-called binary methods, i.e. methods where the parameter is expected to be of the same type as the object the method is called on. An example is the compareTo method: a.compareTob checks whether a comes before or after b in some ordering, but the way to compare, say, two rational numbers will be different from the way to compare two strings. Other common examples of binary methods include equality tests, arithmetic operations, and set operations like subset and union.","['example', 'covariant', 'parameter', 'helpful', 'call', 'binary', 'method', 'i.e.', 'method', 'parameter', 'expect', 'type', 'object', 'method', 'call', 'example', 'compareto', 'method', 'a.comparetob', 'check', 'come', 'ordering', 'way', 'compare', 'rational', 'number', 'different', 'way', 'compare', 'string', 'common', 'example', 'binary', 'method', 'include', 'equality', 'test', 'arithmetic', 'operation', 'set', 'operation', 'like', 'subset', 'union']"
762,"In older versions of Java, the comparison method was specified as an interface Comparable:","['old', 'version', 'java', 'comparison', 'method', 'specify', 'interface', 'comparable']"
763,The drawback of this is that the method is specified to take an argument of type Object. A typical implementation would first down-cast this argument throwing an error if it is not of the expected type:,"['drawback', 'method', 'specify', 'argument', 'type', 'object', 'typical', 'implementation', 'cast', 'argument', 'throw', 'error', 'expect', 'type']"
764,"In a language with covariant parameters, the argument to compareTo could be directly given the desired type RationalNumber, hiding the typecast. Of course, this would still give a runtime error if compareTo was then called on e.g. a String.","['language', 'covariant', 'parameter', 'argument', 'compareto', 'directly', 'give', 'desire', 'type', 'rationalnumber', 'hide', 'typecast', 'course', 'runtime', 'error', 'compareto', 'call', 'e.g.', 'string']"
765,Other language features can provide the apparent benefits of covariant parameters while preserving Liskov substitutability.,"['language', 'feature', 'provide', 'apparent', 'benefit', 'covariant', 'parameter', 'preserve', 'liskov', 'substitutability']"
766,"In a language with generics a.k.a. parametric polymorphism and bounded quantification, the previous examples can be written in a type-safe way.10 Instead of defining AnimalShelter, we define a parameterized class Shelter<T>. One drawback of this is that the implementer of the base class needs to foresee which types will need to be specialized in the subclasses.","['language', 'generic', 'a.k.a', 'parametric', 'polymorphism', 'bound', 'quantification', 'previous', 'example', 'write', 'type', 'safe', 'way', 'instead', 'define', 'animalshelter', 'define', 'parameterized', 'class', 'shelter', 'drawback', 'implementer', 'base', 'class', 'need', 'foresee', 'type', 'need', 'specialize', 'subclass']"
767,"Similarly, in recent versions of Java the Comparable interface has been parameterized, which allows the downcast to be omitted in a type-safe way:","['similarly', 'recent', 'version', 'java', 'comparable', 'interface', 'parameterize', 'allow', 'downcast', 'omit', 'type', 'safe', 'way']"
768,"Another language feature that can help is multiple dispatch. One reason that binary methods are awkward to write is that in a call like a.compareTob, selecting the correct implementation of compareTo really depends on the runtime type of both a and b, but in a conventional OO language only the runtime type of a is taken into account. In a language with Common Lisp Object System CLOS-style multiple dispatch, the comparison method could be written as a generic function where both arguments are used for method selection.","['language', 'feature', 'help', 'multiple', 'dispatch', 'reason', 'binary', 'method', 'awkward', 'write', 'like', 'a.comparetob', 'select', 'correct', 'implementation', 'compareto', 'depend', 'runtime', 'type', 'conventional', 'language', 'runtime', 'type', 'take', 'account', 'language', 'common', 'lisp', 'object', 'system', 'clos', 'style', 'multiple', 'dispatch', 'comparison', 'method', 'write', 'generic', 'function', 'argument', 'method', 'selection']"
769,"Giuseppe Castagna11 observed that in a typed language with multiple dispatch, a generic function can have some parameters which control dispatch and some ""left-over"" parameters which do not. Because the method selection rule chooses the most specific applicable method, if a method overrides another method, then the overriding method will have more specific types for the controlling parameters. On the other hand, to ensure type safety the language still must require the left-over parameters to be at least as general. Using the previous terminology, types used for runtime method selection are covariant while types not used for runtime method selection of the method are contravariant. Conventional single-dispatch languages like Java also obey this rule: only one argument is used for method selection the receiver object, passed along to a method as the hidden argument this, and indeed the type of this is more specialized inside overriding methods than in the superclass.","['giuseppe', 'castagna11', 'observe', 'type', 'language', 'multiple', 'dispatch', 'generic', 'function', 'parameter', 'control', 'dispatch', 'left', 'parameter', 'method', 'selection', 'rule', 'choose', 'specific', 'applicable', 'method', 'method', 'override', 'method', 'override', 'method', 'specific', 'type', 'control', 'parameter', 'hand', 'ensure', 'type', 'safety', 'language', 'require', 'left', 'parameter', 'general', 'previous', 'terminology', 'type', 'runtime', 'method', 'selection', 'covariant', 'type', 'runtime', 'method', 'selection', 'method', 'contravariant', 'conventional', 'single', 'dispatch', 'language', 'like', 'java', 'obey', 'rule', 'argument', 'method', 'selection', 'receiver', 'object', 'pass', 'method', 'hide', 'argument', 'type', 'specialized', 'inside', 'overriding', 'method', 'superclass']"
770,"Castagna suggests that examples where covariant parameter types are superior particularly, binary methods should be handled using multiple dispatch; which is naturally covariant. However, most programming languages do not support multiple dispatch.","['castagna', 'suggest', 'example', 'covariant', 'parameter', 'type', 'superior', 'particularly', 'binary', 'method', 'handle', 'multiple', 'dispatch', 'naturally', 'covariant', 'programming', 'language', 'support', 'multiple', 'dispatch']"
771,The following table summarizes the rules for overriding methods in the languages discussed above.,"['following', 'table', 'summarize', 'rule', 'override', 'method', 'language', 'discuss']"
772,"In programming languages that support generics a.k.a. parametric polymorphism, the programmer can extend the type system with new constructors. For example, a C# interface like IList<T> makes it possible to construct new types like IList<Animal> or IList<Cat>. The question then arises what the variance of these type constructors should be.","['programming', 'language', 'support', 'generic', 'a.k.a', 'parametric', 'polymorphism', 'programmer', 'extend', 'type', 'system', 'new', 'constructor', 'example', 'interface', 'like', 'ilist', 'make', 'possible', 'construct', 'new', 'type', 'like', 'ilist', 'animal', 'ilist', 'cat', 'question', 'arise', 'variance', 'type', 'constructor']"
773,"There are two main approaches. In languages with declaration-site variance annotations e.g., C#, the programmer annotates the definition of a generic type with the intended variance of its type parameters. With use-site variance annotations e.g., Java, the programmer instead annotates the places where a generic type is instantiated.","['main', 'approach', 'language', 'declaration', 'site', 'variance', 'annotation', 'e.g.', 'programmer', 'annotate', 'definition', 'generic', 'type', 'intend', 'variance', 'type', 'parameter', 'use', 'site', 'variance', 'annotation', 'e.g.', 'java', 'programmer', 'instead', 'annotate', 'place', 'generic', 'type', 'instantiate']"
774,"The most popular languages with declaration-site variance annotations are C# and Kotlin using the keywords out and in, and Scala and OCaml using the keywords + and -. C# only allows variance annotations for interface types, while Kotlin, Scala and OCaml allow them for both interface types and concrete data types.","['popular', 'language', 'declaration', 'site', 'variance', 'annotation', 'kotlin', 'keyword', 'scala', 'ocaml', 'keyword', 'allow', 'variance', 'annotation', 'interface', 'type', 'kotlin', 'scala', 'ocaml', 'allow', 'interface', 'type', 'concrete', 'datum', 'type']"
775,"In C#, each type parameter of a generic interface can be marked covariant out, contravariant in, or invariant no annotation. For example, we can define an interface IEnumerator<T> of read-only iterators, and declare it to be covariant out in its type parameter.","['type', 'parameter', 'generic', 'interface', 'mark', 'covariant', 'contravariant', 'invariant', 'annotation', 'example', 'define', 'interface', 'ienumerator', 'read', 'iterator', 'declare', 'covariant', 'type', 'parameter']"
776,"With this declaration, IEnumerator will be treated as covariant in its type parameter, e.g. IEnumerator<Cat> is a subtype of IEnumerator<Animal>.","['declaration', 'ienumerator', 'treat', 'covariant', 'type', 'parameter', 'e.g.', 'ienumerator', 'cat', 'subtype', 'ienumerator', 'animal']"
777,"The type checker enforces that each method declaration in an interface only mentions the type parameters in a way consistent with the in/out annotations. That is, a parameter that was declared covariant must not occur in any contravariant positions where a position is contravariant if it occurs under an odd number of contravariant type constructors. The precise rule1213 is that the return types of all methods in the interface must be valid covariantly and all the method parameter types must be valid contravariantly, where valid S-ly is defined as follows:","['type', 'checker', 'enforce', 'method', 'declaration', 'interface', 'mention', 'type', 'parameter', 'way', 'consistent', 'annotation', 'parameter', 'declare', 'covariant', 'occur', 'contravariant', 'position', 'position', 'contravariant', 'occur', 'odd', 'number', 'contravariant', 'type', 'constructor', 'precise', 'rule1213', 'return', 'type', 'method', 'interface', 'valid', 'covariantly', 'method', 'parameter', 'type', 'valid', 'contravariantly', 'valid', 'define', 'follow']"
778,"As an example of how these rules apply, consider the IList<T> interface.","['example', 'rule', 'apply', 'consider', 'ilist', 'interface']"
779,"The parameter type T of Insert must be valid contravariantly, i.e. the type parameter T must not be tagged out. Similarly, the result type IEnumerator<T> of GetEnumerator must be valid covariantly, i.e. since IEnumerator is a covariant interface the type T must be valid covariantly, i.e. the type parameter T must not be tagged in. This shows that the interface IList is not allowed to be marked either co- or contravariant.","['parameter', 'type', 'insert', 'valid', 'contravariantly', 'i.e.', 'type', 'parameter', 'tag', 'similarly', 'result', 'type', 'ienumerator', 'getenumerator', 'valid', 'covariantly', 'i.e.', 'ienumerator', 'covariant', 'interface', 'type', 'valid', 'covariantly', 'i.e.', 'type', 'parameter', 'tag', 'show', 'interface', 'ilist', 'allow', 'mark', 'co-', 'contravariant']"
780,"In the common case of a generic data structure such as IList, these restrictions mean that an out parameter can only be used for methods getting data out of the structure, and an in parameter can only be used for methods putting data into the structure, hence the choice of keywords.","['common', 'case', 'generic', 'data', 'structure', 'ilist', 'restriction', 'mean', 'parameter', 'method', 'get', 'datum', 'structure', 'parameter', 'method', 'put', 'datum', 'structure', 'choice', 'keyword']"
781,"C# allows variance annotations on the parameters of interfaces, but not the parameters of classes. Because fields in C# classes are always mutable, variantly parameterized classes in C# would not be very useful. But languages which emphasize immutable data can make good use of covariant data types. For example, in all of Scala, Kotlin and OCaml the immutable list type is covariant: ListCat is a subtype of ListAnimal.","['allow', 'variance', 'annotation', 'parameter', 'interface', 'parameter', 'class', 'field', 'class', 'mutable', 'variantly', 'parameterized', 'class', 'useful', 'language', 'emphasize', 'immutable', 'datum', 'good', 'use', 'covariant', 'datum', 'type', 'example', 'scala', 'kotlin', 'ocaml', 'immutable', 'list', 'type', 'covariant', 'listcat', 'subtype', 'listanimal']"
782,"Scala's rules for checking variance annotations are essentially the same as C#'s. However, there are some idioms that apply to immutable datastructures in particular. They are illustrated by the following excerpt from the definition of the ListA class.","['scala', 'rule', 'check', 'variance', 'annotation', 'essentially', 'idiom', 'apply', 'immutable', 'datastructure', 'particular', 'illustrate', 'follow', 'excerpt', 'definition', 'lista', 'class']"
783,"First, class members that have a variant type must be immutable. Here, head has the type A, which was declared covariant +, and indeed head was declared as a method def. Trying to declare it as a mutable field var would be rejected as type error.","['class', 'member', 'variant', 'type', 'immutable', 'head', 'type', 'declare', 'covariant', 'head', 'declare', 'method', 'def', 'try', 'declare', 'mutable', 'field', 'var', 'reject', 'type', 'error']"
784,"Second, even if a data structure is immutable, it will often have methods where the parameter type occurs contravariantly. For example, consider the method :: which adds an element to the front of a list. The implementation works by creating a new object of the similarly named class ::, the class of nonempty lists. The most obvious type to give it would be","['second', 'data', 'structure', 'immutable', 'method', 'parameter', 'type', 'occur', 'contravariantly', 'example', 'consider', 'method', 'add', 'element', 'list', 'implementation', 'work', 'create', 'new', 'object', 'similarly', 'name', 'class', 'class', 'nonempty', 'list', 'obvious', 'type']"
785,"However, this would be a type error, because the covariant parameter A appears in a contravariant position as a function parameter. But there is a trick to get around this problem. We give :: a more general type, which allows adding an element of any type B as long as B is a supertype of A. Note that this relies on List being covariant, since this has type ListA and we treat it as having type ListB. At first glance it may not be obvious that the generalized type is sound, but if the programmer starts out with the simpler type declaration, the type errors will point out the place that needs to be generalized.","['type', 'error', 'covariant', 'parameter', 'appear', 'contravariant', 'position', 'function', 'parameter', 'trick', 'problem', 'general', 'type', 'allow', 'add', 'element', 'type', 'long', 'supertype', 'note', 'rely', 'list', 'covariant', 'type', 'lista', 'treat', 'have', 'type', 'listb.', 'glance', 'obvious', 'generalize', 'type', 'sound', 'programmer', 'start', 'simple', 'type', 'declaration', 'type', 'error', 'point', 'place', 'need', 'generalize']"
786,"It is possible to design a type system where the compiler automatically infers the best possible variance annotations for all datatype parameters.14 However, the analysis can get complex for several reasons. First, the analysis is nonlocal since the variance of an interface I depends on the variance of all interfaces that I mentions. Second, in order to get unique best solutions the type system must allow bivariant parameters which are simultaneously co- and contravariant. And finally, the variance of type parameters should arguably be a deliberate choice by the designer of an interface, not something that just happens.","['possible', 'design', 'type', 'system', 'compiler', 'automatically', 'infer', 'well', 'possible', 'variance', 'annotation', 'datatype', 'parameters', 'analysis', 'complex', 'reason', 'analysis', 'nonlocal', 'variance', 'interface', 'depend', 'variance', 'interface', 'mention', 'second', 'order', 'unique', 'good', 'solution', 'type', 'system', 'allow', 'bivariant', 'parameter', 'simultaneously', 'co-', 'contravariant', 'finally', 'variance', 'type', 'parameter', 'arguably', 'deliberate', 'choice', 'designer', 'interface', 'happen']"
787,"For these reasons15 most languages do very little variance inference. C# and Scala do not infer any variance annotations at all. OCaml can infer the variance of parameterized concrete datatypes, but the programmer must explicitly specify the variance of abstract types interfaces.","['reasons15', 'language', 'little', 'variance', 'inference', 'scala', 'infer', 'variance', 'annotation', 'ocaml', 'infer', 'variance', 'parameterized', 'concrete', 'datatype', 'programmer', 'explicitly', 'specify', 'variance', 'abstract', 'type', 'interface']"
788,"For example, consider an OCaml datatype T which wraps a function","['example', 'consider', 'ocaml', 'datatype', 'wrap', 'function']"
789,"The compiler will automatically infer that T is contravariant in the first parameter, and covariant in the second. The programmer can also provide explicit annotations, which the compiler will check are satisfied. Thus the following declaration is equivalent to the previous one:","['compiler', 'automatically', 'infer', 'contravariant', 'parameter', 'covariant', 'second', 'programmer', 'provide', 'explicit', 'annotation', 'compiler', 'check', 'satisfied', 'follow', 'declaration', 'equivalent', 'previous']"
790,"Explicit annotations in OCaml become useful when specifying interfaces. For example, the standard library interface Map.S for association tables include an annotation saying that the map type constructor is covariant in the result type.","['explicit', 'annotation', 'ocaml', 'useful', 'specify', 'interface', 'example', 'standard', 'library', 'interface', 'map', 'association', 'table', 'include', 'annotation', 'say', 'map', 'type', 'constructor', 'covariant', 'result', 'type']"
791,This ensures that e.g. cat IntMap.t is a subtype of animal IntMap.t.,"['ensure', 'e.g.', 'cat', 'intmap.t', 'subtype', 'animal', 'intmap.t']"
792,"One drawback of the declaration-site approach is that many interface types must be made invariant. For example, we saw above that IList needed to be invariant, because it contained both Insert and GetEnumerator. In order to expose more variance, the API designer could provide additional interfaces which provide subsets of the available methods e.g. an ""insert-only list"" which only provides Insert. However this quickly becomes unwieldy.","['drawback', 'declaration', 'site', 'approach', 'interface', 'type', 'invariant', 'example', 'see', 'ilist', 'need', 'invariant', 'contain', 'insert', 'getenumerator', 'order', 'expose', 'variance', 'api', 'designer', 'provide', 'additional', 'interface', 'provide', 'subset', 'available', 'method', 'e.g.', 'insert', 'list', 'provide', 'insert', 'quickly', 'unwieldy']"
793,"Use-site variance means the desired variance is indicated with an annotation at the specific site in the code where the type will be used. This gives users of a class more opportunities for subtyping without requiring the designer of the class to define multiple interfaces with different variance. Instead, at the point a generic type is instantiated to an actual parameterized type, the programmer can indicate that only a subset of its methods will be used. In effect, each definition of a generic class also makes available interfaces for the covariant and contravariant parts of that class.","['use', 'site', 'variance', 'mean', 'desire', 'variance', 'indicate', 'annotation', 'specific', 'site', 'code', 'type', 'give', 'user', 'class', 'opportunity', 'subtype', 'require', 'designer', 'class', 'define', 'multiple', 'interface', 'different', 'variance', 'instead', 'point', 'generic', 'type', 'instantiate', 'actual', 'parameterized', 'type', 'programmer', 'indicate', 'subset', 'method', 'effect', 'definition', 'generic', 'class', 'make', 'available', 'interface', 'covariant', 'contravariant', 'part', 'class']"
794,"Java provides use-site variance annotations through wildcards, a restricted form of bounded existential types. A parameterized type can be instantiated by a wildcard ? together with an upper or lower bound, e.g. List<? extends Animal> or List<? super Animal>. An unbounded wildcard like List<?> is equivalent to List<? extends Object>. Such a type represents List<X> for some unknown type X which satisfies the bound. For example, if l has type List<? extends Animal>, then the type checker will accept","['java', 'provide', 'use', 'site', 'variance', 'annotation', 'wildcard', 'restricted', 'form', 'bound', 'existential', 'type', 'parameterized', 'type', 'instantiate', 'wildcard', 'upper', 'lower', 'bind', 'e.g.', 'list', 'extend', 'animal', 'list', 'super', 'animal', 'unbounded', 'wildcard', 'like', 'list', 'equivalent', 'list', 'extend', 'object', 'type', 'represent', 'list', 'unknown', 'type', 'satisfy', 'bound', 'example', 'type', 'list', 'extend', 'animal', 'type', 'checker', 'accept']"
795,"because the type X is known to be a subtype of Animal, but","['type', 'know', 'subtype', 'animal']"
796,"will be rejected as a type error since an Animal is not necessarily an X. In general, given some interface I<T>, a reference to an I<? extends T> forbids using methods from the interface where T occurs contravariantly in the type of the method. Conversely, if l had type List<? super Animal> one could call l.add but not l.get.","['reject', 'type', 'error', 'animal', 'necessarily', 'general', 'give', 'interface', 'reference', 'extend', 'forbid', 'method', 'interface', 'occur', 'contravariantly', 'type', 'method', 'conversely', 'type', 'list', 'super', 'animal', 'l.add', 'l.get']"
797,"While non-wildcard parameterized types in Java are invariant e.g. there is no subtyping relationship between List<Cat> and List<Animal>, wildcard types can be made more specific by specifying a tighter bound. For example, List<? extends Cat> is a subtype of List<? extends Animal>. This shows that wildcard types are covariant in their upper bounds and also contravariant in their lower bounds. In total, given a wildcard type like C<? extends T>, there are three ways to form a subtype: by specializing the class C, by specifying a tighter bound T, or by replacing the wildcard ? with a specific type see figure.","['non', 'wildcard', 'parameterized', 'type', 'java', 'invariant', 'e.g.', 'subtype', 'relationship', 'list', 'cat', 'list', 'animal', 'wildcard', 'type', 'specific', 'specify', 'tighter', 'bound', 'example', 'list', 'extend', 'cat', 'subtype', 'list', 'extend', 'animal', 'show', 'wildcard', 'type', 'covariant', 'upper', 'bound', 'contravariant', 'low', 'bound', 'total', 'give', 'wildcard', 'type', 'like', 'extend', 'way', 'form', 'subtype', 'specialize', 'class', 'specify', 'tighter', 'bind', 'replace', 'wildcard', 'specific', 'type', 'figure']"
798,"By applying two of the above three forms of subtyping, it becomes possible to, for example, pass an argument of type List<Cat> to a method expecting a List<? extends Animal>. This is the kind of expressiveness that results from covariant interface types. The type List<? extends Animal> acts as an interface type containing only the covariant methods of List<T>, but the implementer of List<T> did not have to define it ahead of time.","['apply', 'form', 'subtype', 'possible', 'example', 'pass', 'argument', 'type', 'list', 'cat', 'method', 'expect', 'list', 'extend', 'animal', 'kind', 'expressiveness', 'result', 'covariant', 'interface', 'type', 'type', 'list', 'extend', 'animal', 'act', 'interface', 'type', 'contain', 'covariant', 'method', 'list', 'implementer', 'list', 'define', 'ahead', 'time']"
799,"In the common case of a generic data structure IList, covariant parameters are used for methods getting data out of the structure, and contravariant parameters for methods putting data into the structure. The mnemonic for Producer Extends, Consumer Super PECS, from the book Effective Java by Joshua Bloch gives an easy way to remember when to use covariance and contravariance.","['common', 'case', 'generic', 'data', 'structure', 'ilist', 'covariant', 'parameter', 'method', 'get', 'datum', 'structure', 'contravariant', 'parameter', 'method', 'put', 'datum', 'structure', 'mnemonic', 'producer', 'extends', 'consumer', 'super', 'pecs', 'book', 'effective', 'java', 'joshua', 'bloch', 'give', 'easy', 'way', 'remember', 'use', 'covariance', 'contravariance']"
800,"Wildcards are flexible, but there is a drawback. While use-site variance means that API designers need not consider variance of type parameters to interfaces, they must often instead use more complicated method signatures. A common example involves the Comparable interface. Suppose we want to write a function that finds the biggest element in a collection. The elements need to implement the compareTo method, so a first try might be","['wildcards', 'flexible', 'drawback', 'use', 'site', 'variance', 'mean', 'api', 'designer', 'need', 'consider', 'variance', 'type', 'parameter', 'interface', 'instead', 'use', 'complicated', 'method', 'signature', 'common', 'example', 'involve', 'comparable', 'interface', 'suppose', 'want', 'write', 'function', 'find', 'big', 'element', 'collection', 'element', 'need', 'implement', 'compareto', 'method', 'try']"
801,"However, this type is not general enough—one can find the max of a Collection<Calendar>, but not a Collection<GregorianCalendar>. The problem is that GregorianCalendar does not implement Comparable<GregorianCalendar>, but instead the better interface Comparable<Calendar>. In Java, unlike in C#, Comparable<Calendar> is not considered a subtype of Comparable<GregorianCalendar>. Instead the type of max has to be modified:","['type', 'general', 'find', 'max', 'collection', 'calendar', 'collection', 'gregoriancalendar', 'problem', 'gregoriancalendar', 'implement', 'comparable', 'gregoriancalendar', 'instead', 'well', 'interface', 'comparable', 'calendar', 'java', 'unlike', 'comparable', 'calendar', 'consider', 'subtype', 'comparable', 'gregoriancalendar', 'instead', 'type', 'max', 'modify']"
802,"The bounded wildcard ? super T conveys the information that max calls only contravariant methods from the Comparable interface. This particular example is frustrating because all the methods in Comparable are contravariant, so that condition is trivially true. A declaration-site system could handle this example with less clutter by annotating only the definition of Comparable.","['bound', 'wildcard', 'super', 'convey', 'information', 'max', 'call', 'contravariant', 'method', 'comparable', 'interface', 'particular', 'example', 'frustrating', 'method', 'comparable', 'contravariant', 'condition', 'trivially', 'true', 'declaration', 'site', 'system', 'handle', 'example', 'clutter', 'annotate', 'definition', 'comparable']"
803,"Use-site variance annotations provide additional flexibility, allowing more programs to type check. However, they have been criticized for the complexity they add to the language, leading to complicated type signatures and error messages.","['use', 'site', 'variance', 'annotation', 'provide', 'additional', 'flexibility', 'allow', 'program', 'type', 'check', 'criticize', 'complexity', 'add', 'language', 'lead', 'complicated', 'type', 'signature', 'error', 'message']"
804,One way to assess whether the extra flexibility is useful is to see if it is used in existing programs. A survey of a large set of Java libraries14 found that 39% of wildcard annotations could have been directly replaced by declaration-site annotations. Thus the remaining 61% is an indication of places where Java benefits from having the use-site system available.,"['way', 'assess', 'extra', 'flexibility', 'useful', 'exist', 'program', 'survey', 'large', 'set', 'java', 'libraries14', 'find', 'wildcard', 'annotation', 'directly', 'replace', 'declaration', 'site', 'annotation', 'remain', 'indication', 'place', 'java', 'benefit', 'have', 'use', 'site', 'system', 'available']"
805,"In a declaration-site language, libraries must either expose less variance, or define more interfaces. For example, the Scala Collections library defines three separate interfaces for classes which employ covariance: a covariant base interface containing common methods, an invariant mutable version which adds side-effecting methods, and a covariant immutable version which may specialize the inherited implementations to exploit structural sharing.16 This design works well with declaration-site annotations, but the large number of interfaces carry a complexity cost for clients of the library. And modifying the library interface may not be an option—in particular, one goal when adding generics to Java was to maintain binary backwards compatibility.","['declaration', 'site', 'language', 'library', 'expose', 'variance', 'define', 'interface', 'example', 'scala', 'collections', 'library', 'define', 'separate', 'interface', 'class', 'employ', 'covariance', 'covariant', 'base', 'interface', 'contain', 'common', 'method', 'invariant', 'mutable', 'version', 'add', 'effect', 'method', 'covariant', 'immutable', 'version', 'specialize', 'inherit', 'implementation', 'exploit', 'structural', 'sharing', 'design', 'work', 'declaration', 'site', 'annotation', 'large', 'number', 'interface', 'carry', 'complexity', 'cost', 'client', 'library', 'modify', 'library', 'interface', 'option', 'particular', 'goal', 'add', 'generic', 'java', 'maintain', 'binary', 'backwards', 'compatibility']"
806,"On the other hand, Java wildcards are themselves complex. In a conference presentation17 Joshua Bloch criticized them as being too hard to understand and use, stating that when adding support for closures ""we simply cannot afford another wildcards"". Early versions of Scala used use-site variance annotations but programmers found them difficult to use in practice, while declaration-site annotations were found to be very helpful when designing classes.18 Later versions of Scala added Java-style existential types and wildcards; however, according to Martin Odersky, if there were no need for interoperability with Java then these would probably not have been included.19","['hand', 'java', 'wildcard', 'complex', 'conference', 'presentation17', 'joshua', 'bloch', 'criticize', 'hard', 'understand', 'use', 'state', 'add', 'support', 'closure', 'simply', 'afford', 'wildcard', 'early', 'version', 'scala', 'use', 'site', 'variance', 'annotation', 'programmer', 'find', 'difficult', 'use', 'practice', 'declaration', 'site', 'annotation', 'find', 'helpful', 'design', 'classes', 'late', 'version', 'scala', 'add', 'java', 'style', 'existential', 'type', 'wildcard', 'accord', 'martin', 'odersky', 'need', 'interoperability', 'java', 'probably', 'included']"
807,"Ross Tate argues20 that part of the complexity of Java wildcards is due to the decision to encode use-site variance using a form of existential types. The original proposals2122 used special-purpose syntax for variance annotations, writing List<+Animal> instead of Java's more verbose List<? extends Animal>.","['ross', 'tate', 'argues20', 'complexity', 'java', 'wildcard', 'decision', 'encode', 'use', 'site', 'variance', 'form', 'existential', 'type', 'original', 'proposals2122', 'special', 'purpose', 'syntax', 'variance', 'annotation', 'write', 'list<+animal', 'instead', 'java', 'verbose', 'list', 'extend', 'animal']"
808,"Since wildcards are a form of existential types they can be used for more things than just variance. A type like List<?> ""a list of unknown type""23 lets objects be passed to methods or stored in fields without exactly specifying their type parameters. This is particularly valuable for classes such as Class where most of the methods do not mention the type parameter.","['wildcard', 'form', 'existential', 'type', 'thing', 'variance', 'type', 'like', 'list', 'list', 'unknown', 'type', 'let', 'object', 'pass', 'method', 'store', 'field', 'exactly', 'specify', 'type', 'parameter', 'particularly', 'valuable', 'class', 'class', 'method', 'mention', 'type', 'parameter']"
809,"However, type inference for existential types is a difficult problem. For the compiler implementer, Java wildcards raise issues with type checker termination, type argument inference, and ambiguous programs.24 In general it is undecidable whether a Java program using generics is well-typed or not,25 so any type checker will have to go into an infinite loop or time out for some programs. For the programmer, it leads to complicated type error messages. Java type checks wildcard types by replacing the wildcards with fresh type variables so-called capture conversion. This can make error messages harder to read, because they refer to type variables that the programmer did not directly write. For example, trying to add a Cat to a List<? extends Animal> will give an error like","['type', 'inference', 'existential', 'type', 'difficult', 'problem', 'compiler', 'implementer', 'java', 'wildcard', 'raise', 'issue', 'type', 'checker', 'termination', 'type', 'argument', 'inference', 'ambiguous', 'programs', 'general', 'undecidable', 'java', 'program', 'generic', 'typed', 'not', 'type', 'checker', 'infinite', 'loop', 'time', 'program', 'programmer', 'lead', 'complicated', 'type', 'error', 'message', 'java', 'type', 'check', 'wildcard', 'type', 'replace', 'wildcard', 'fresh', 'type', 'variable', 'call', 'capture', 'conversion', 'error', 'message', 'hard', 'read', 'refer', 'type', 'variable', 'programmer', 'directly', 'write', 'example', 'try', 'add', 'cat', 'list', 'extend', 'animal', 'error', 'like']"
810,"Since both declaration-site and use-site annotations can be useful, some type systems provide both.1420","['declaration', 'site', 'use', 'site', 'annotation', 'useful', 'type', 'system', 'provide', 'both']"
811,"These terms come from the notion of covariant and contravariant functors in category theory. Consider the category C \displaystyle C whose objects are types and whose morphisms represent the subtype relationship ≤. This is an example of how any partially ordered set can be considered as a category. Then for example the function type constructor takes two types p and r and creates a new type p → r; so it takes objects in C 2 \displaystyle C^2 to objects in C \displaystyle C . By the subtyping rule for function types this operation reverses ≤ for the first parameter and preserves it for the second, so it is a contravariant functor in the first parameter and a covariant functor in the second.","['term', 'come', 'notion', 'covariant', 'contravariant', 'functor', 'category', 'theory', 'consider', 'category', 'object', 'type', 'morphism', 'represent', 'subtype', 'relationship', 'example', 'partially', 'order', 'set', 'consider', 'category', 'example', 'function', 'type', 'constructor', 'take', 'type', 'create', 'new', 'type', 'take', 'object', 'object', 'subtyping', 'rule', 'function', 'type', 'operation', 'reverse', 'parameter', 'preserve', 'second', 'contravariant', 'functor', 'parameter', 'covariant', 'functor', 'second']"
812,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
813,"In class-based, object-oriented programming, a constructor abbreviation: ctor is a special type of subroutine called to create an object. It prepares the new object for use, often accepting arguments that the constructor uses to set required member variables.","['class', 'base', 'object', 'orient', 'programming', 'constructor', 'abbreviation', 'ctor', 'special', 'type', 'subroutine', 'call', 'create', 'object', 'prepare', 'new', 'object', 'use', 'accept', 'argument', 'constructor', 'use', 'set', 'require', 'member', 'variable']"
814,"A constructor resembles an instance method, but it differs from a method in that it has no explicit return type, it is not implicitly inherited and it usually has different rules for scope modifiers. Constructors often have the same name as the declaring class. They have the task of initializing the object's data members and of establishing the invariant of the class, failing if the invariant is invalid. A properly written constructor leaves the resulting object in a valid state. Immutable objects must be initialized in a constructor.","['constructor', 'resemble', 'instance', 'method', 'differ', 'method', 'explicit', 'return', 'type', 'implicitly', 'inherit', 'usually', 'different', 'rule', 'scope', 'modifier', 'constructor', 'declaring', 'class', 'task', 'initialize', 'object', 'datum', 'member', 'establish', 'invariant', 'class', 'fail', 'invariant', 'invalid', 'properly', 'write', 'constructor', 'leave', 'result', 'object', 'valid', 'state', 'immutable', 'object', 'initialize', 'constructor']"
815,"Most languages allow overloading the constructor in that there can be more than one constructor for a class, with differing parameters. Some languages take consideration of some special types of constructors. Constructors, which concretely use a single class to create objects and return a new instance of the class, are abstracted by factories, which also create objects but can do so in various ways, using multiple classes or different allocation schemes such as an object pool.","['language', 'allow', 'overload', 'constructor', 'constructor', 'class', 'differ', 'parameter', 'language', 'consideration', 'special', 'type', 'constructor', 'constructor', 'concretely', 'use', 'single', 'class', 'create', 'object', 'return', 'new', 'instance', 'class', 'abstract', 'factory', 'create', 'object', 'way', 'multiple', 'class', 'different', 'allocation', 'scheme', 'object', 'pool']"
816,"Constructors that can take at least one argument are termed as parameterized constructors. When an object is declared in a parameterized constructor, the initial values have to be passed as arguments to the constructor function. The normal way of object declaration may not work. The constructors can be called explicitly or implicitly. The method of calling the constructor implicitly is also called the shorthand method.","['constructor', 'argument', 'term', 'parameterized', 'constructor', 'object', 'declare', 'parameterized', 'constructor', 'initial', 'value', 'pass', 'argument', 'constructor', 'function', 'normal', 'way', 'object', 'declaration', 'work', 'constructor', 'call', 'explicitly', 'implicitly', 'method', 'call', 'constructor', 'implicitly', 'call', 'shorthand', 'method']"
817,"If the programmer does not supply a constructor for an instantiable class, Java compiler inserts a default constructor into your code on your behalf. This constructor is known as default constructor. You would not find it in your source code the java file as it would be inserted into the code during compilation and exists in .class file. The behavior of the default constructor is language dependent. It may initialize data members to zero or other same values, or it may do nothing at all. In Java, a ""default constructor"" refer to a nullary constructor that is automatically generated by the compiler if no constructors have been defined for the class or in the absence of any programmer-defined constructors e.g. in Java, the default constructor implicitly calls the superclass's nullary constructor, then executes an empty body. All fields are left at their initial value of 0 integer types, 0.0 floating-point types, false boolean type, or null reference types.","['programmer', 'supply', 'constructor', 'instantiable', 'class', 'java', 'compiler', 'insert', 'default', 'constructor', 'code', 'behalf', 'constructor', 'know', 'default', 'constructor', 'find', 'source', 'code', 'java', 'file', 'insert', 'code', 'compilation', 'exist', '.class', 'file', 'behavior', 'default', 'constructor', 'language', 'dependent', 'initialize', 'data', 'member', 'zero', 'value', 'java', 'default', 'constructor', 'refer', 'nullary', 'constructor', 'automatically', 'generate', 'compiler', 'constructor', 'define', 'class', 'absence', 'programmer', 'define', 'constructor', 'e.g.', 'java', 'default', 'constructor', 'implicitly', 'call', 'superclass', 'nullary', 'constructor', 'execute', 'body', 'field', 'leave', 'initial', 'value', 'integer', 'type', '0', 'float', 'point', 'type', 'false', 'boolean', 'type', 'null', 'reference', 'type']"
818,"Like C++, Java also supports ""Copy Constructor"". But, unlike C++, Java doesn't create a default copy constructor if you don't write your own. Copy constructors define the actions performed by the compiler when copying class objects. A Copy constructor has one formal parameter that is the type of the class the parameter may be a reference to an object. It is used to create a copy of an existing object of the same class. Even though both classes are the same, it counts as a conversion constructor. While copy constructors are usually abbreviated copy ctor or cctor, they have nothing to do with class constructors used in .NET using the same abbreviation.","['like', 'c++', 'java', 'support', 'copy', 'constructor', 'unlike', 'c++', 'java', 'create', 'default', 'copy', 'constructor', 'write', 'copy', 'constructor', 'define', 'action', 'perform', 'compiler', 'copy', 'class', 'object', 'copy', 'constructor', 'formal', 'parameter', 'type', 'class', 'parameter', 'reference', 'object', 'create', 'copy', 'exist', 'object', 'class', 'class', 'count', 'conversion', 'constructor', 'copy', 'constructor', 'usually', 'abbreviate', 'copy', 'ctor', 'cctor', 'class', 'constructor', '.net', 'abbreviation']"
819,"Conversion constructors provide a means for a compiler to implicitly create an object belonging to one class based on an object of a different type. These constructors are usually invoked implicitly to convert arguments or operands to an appropriate type, but they may also be called explicitly.","['conversion', 'constructor', 'provide', 'mean', 'compiler', 'implicitly', 'create', 'object', 'belong', 'class', 'base', 'object', 'different', 'type', 'constructor', 'usually', 'invoke', 'implicitly', 'convert', 'argument', 'operand', 'appropriate', 'type', 'call', 'explicitly']"
820,"In C++, move constructors take an Rvalue reference to an object of the class, and are used to implement ownership transfer of the parameter object's resources.","['c++', 'constructor', 'rvalue', 'reference', 'object', 'class', 'implement', 'ownership', 'transfer', 'parameter', 'object', 'resource']"
821,"In Java, C#, and VB .NET, the constructor creates reference type objects in a special memory structure called the ""heap"". Value types such as int, double, etc. are created in a sequential structure called the ""stack"". VB .NET and C# also allow the use of the new operator to create value type objects, but these value type objects are created on the stack regardless of whether the operator is used or not.","['java', '.net', 'constructor', 'create', 'reference', 'type', 'object', 'special', 'memory', 'structure', 'call', 'heap', 'value', 'type', 'int', 'double', 'etc', 'create', 'sequential', 'structure', 'call', 'stack', '.net', 'allow', 'use', 'new', 'operator', 'create', 'value', 'type', 'object', 'value', 'type', 'object', 'create', 'stack', 'regardless', 'operator']"
822,"In C++, objects are created on the stack when the constructor is invoked without the new operator, and created on the heap when the constructor is invoked with the new operator. Stack objects are deleted implicitly when they go out of scope, while heap objects must be deleted implicitly by a destructor or explicitly by using the delete operator.","['c++', 'object', 'create', 'stack', 'constructor', 'invoke', 'new', 'operator', 'create', 'heap', 'constructor', 'invoke', 'new', 'operator', 'stack', 'object', 'delete', 'implicitly', 'scope', 'heap', 'object', 'delete', 'implicitly', 'destructor', 'explicitly', 'delete', 'operator']"
823,"In C++, the name of the constructor is the name of the class. It returns nothing. It can have parameters like any member function. Constructor functions are usually declared in the public section, but can also be declared in the protected and private sections, if the user wants to restrict access to them.","['c++', 'constructor', 'class', 'return', 'parameter', 'like', 'member', 'function', 'constructor', 'function', 'usually', 'declare', 'public', 'section', 'declare', 'protected', 'private', 'section', 'user', 'want', 'restrict', 'access']"
824,"The constructor has two parts. First is the initializer list which follows the parameter list and before the method body. It starts with a colon and entries are comma-separated. The initializer list is not required, but offers the opportunity to provide values for data members and avoid separate assignment statements. The initializer list is required if you have const or reference type data members, or members that do not have parameterless constructor logic. Assignments occur according to the order in which data members are declared even if the order in the initializer list is different.3 The second part is the body, which is a normal method body enclosed in curly brackets.","['constructor', 'part', 'initializer', 'list', 'follow', 'parameter', 'list', 'method', 'body', 'start', 'colon', 'entry', 'comma', 'separate', 'initializer', 'list', 'require', 'offer', 'opportunity', 'provide', 'value', 'data', 'member', 'avoid', 'separate', 'assignment', 'statement', 'initializer', 'list', 'require', 'const', 'reference', 'type', 'datum', 'member', 'member', 'parameterless', 'constructor', 'logic', 'assignment', 'occur', 'accord', 'order', 'data', 'member', 'declare', 'order', 'initializer', 'list', 'different', 'second', 'body', 'normal', 'method', 'body', 'enclose', 'curly', 'bracket']"
825,"C++ allows more than one constructor. The other constructors must have different parameters. Additionally constructors which contain parameters which are given default values, must adhere to the restriction that not all parameters are given a default value. This is a situation which only matters if there is a default constructor. The constructor of a base class or base classes can also be called by a derived class. Constructor functions are not inherited and their addresses cannot be referenced. When memory allocation is required, the new and delete operators are called implicitly.","['c++', 'allow', 'constructor', 'constructor', 'different', 'parameter', 'additionally', 'constructor', 'contain', 'parameter', 'give', 'default', 'value', 'adhere', 'restriction', 'parameter', 'give', 'default', 'value', 'situation', 'matter', 'default', 'constructor', 'constructor', 'base', 'class', 'base', 'class', 'call', 'derive', 'class', 'constructor', 'function', 'inherit', 'address', 'reference', 'memory', 'allocation', 'require', 'new', 'delete', 'operator', 'call', 'implicitly']"
826,"A copy constructor has a parameter of the same type passed as const reference, for example Vectorconst Vector& rhs. If it is not provided explicitly, the compiler uses the copy constructor for each member variable or simply copies values in case of primitive types. The default implementation is not efficient if the class has dynamically allocated members or handles to other resources, because it can lead to double calls to delete or double release of resources upon destruction.","['copy', 'constructor', 'parameter', 'type', 'pass', 'const', 'reference', 'example', 'vectorconst', 'vector', 'rh', 'provide', 'explicitly', 'compiler', 'use', 'copy', 'constructor', 'member', 'variable', 'simply', 'copy', 'value', 'case', 'primitive', 'type', 'default', 'implementation', 'efficient', 'class', 'dynamically', 'allocate', 'member', 'handle', 'resource', 'lead', 'double', 'call', 'delete', 'double', 'release', 'resource', 'destruction']"
827,"On returning objects from functions or passing objects by value, the objects copy constructor will be called implicitly, unless return value optimization applies.","['return', 'object', 'function', 'pass', 'object', 'value', 'object', 'copy', 'constructor', 'call', 'implicitly', 'return', 'value', 'optimization', 'apply']"
828,"C++ implicitly generates a default copy constructor which will call the copy constructors for all base classes and all member variables unless the programmer provides one, explicitly deletes the copy constructor to prevent cloning or one of the base classes or member variables copy constructor is deleted or not accessible private. Most cases calling for a customized copy constructor e.g. reference counting, deep copy of pointers also require customizing the destructor and the copy assignment operator. This is commonly referred to as the Rule of three.","['c++', 'implicitly', 'generate', 'default', 'copy', 'constructor', 'copy', 'constructor', 'base', 'class', 'member', 'variable', 'programmer', 'provide', 'explicitly', 'delete', 'copy', 'constructor', 'prevent', 'cloning', 'base', 'class', 'member', 'variable', 'copy', 'constructor', 'delete', 'accessible', 'private', 'case', 'call', 'customize', 'copy', 'constructor', 'e.g.', 'reference', 'counting', 'deep', 'copy', 'pointer', 'require', 'customize', 'destructor', 'copy', 'assignment', 'operator', 'commonly', 'refer', 'rule']"
829,"In C#, a static constructor is a static data initializer. Static constructors are also called class constructors. Since the actual method generated has the name .cctor they are often also called ""cctors"".45","['static', 'constructor', 'static', 'datum', 'initializer', 'static', 'constructor', 'call', 'class', 'constructor', 'actual', 'method', 'generate', '.cctor', 'call', 'cctors']"
830,"Static constructors allow complex static variable initialization.6 Static constructors are called implicitly when the class is first accessed. Any call to a class static or constructor call, triggers the static constructor execution. Static constructors are thread safe and implement a singleton pattern. When used in a generic programming class, static constructors are called at every new generic instantiation one per type. Static variables are instantiated as well.","['static', 'constructor', 'allow', 'complex', 'static', 'variable', 'initialization', 'static', 'constructor', 'call', 'implicitly', 'class', 'access', 'class', 'static', 'constructor', 'trigger', 'static', 'constructor', 'execution', 'static', 'constructor', 'thread', 'safe', 'implement', 'singleton', 'pattern', 'generic', 'programming', 'class', 'static', 'constructor', 'call', 'new', 'generic', 'instantiation', 'type', 'static', 'variable', 'instantiate']"
831,CFML uses a method named 'init' as a constructor method.,"['cfml', 'use', 'method', 'name', 'init', 'constructor', 'method']"
832,"Since ColdFusion 10,7 CFML has also supported specifying the name of the constructor method:","['coldfusion', '10', 'cfml', 'support', 'specify', 'constructor', 'method']"
833,"In Eiffel, the routines which initialize new objects are called creation procedures. Creation procedures have the following traits:","['eiffel', 'routine', 'initialize', 'new', 'object', 'call', 'creation', 'procedure', 'creation', 'procedure', 'follow', 'trait']"
834,"Although object creation involves some subtleties,8 the creation of an attribute with a typical declaration x: T as expressed in a creation instruction create x.make consists of the following sequence of steps:","['object', 'creation', 'involve', 'subtleties', 'creation', 'attribute', 'typical', 'declaration', 'express', 'creation', 'instruction', 'create', 'x.make', 'consist', 'follow', 'sequence', 'step']"
835,"In the first snippet below, class POINT is defined. The procedure make is coded after the keyword feature.","['snippet', 'class', 'point', 'define', 'procedure', 'code', 'keyword', 'feature']"
836,"The keyword create introduces a list of procedures which can be used to initialize instances. In this case the list includes default_create, a procedure with an empty implementation inherited from class ANY, and the make procedure coded within the class.","['keyword', 'create', 'introduce', 'list', 'procedure', 'initialize', 'instance', 'case', 'list', 'include', 'default_create', 'procedure', 'implementation', 'inherit', 'class', 'procedure', 'code', 'class']"
837,"In the second snippet, a class which is a client to POINT has a declarations my_point_1 and my_point_2 of type POINT.","['second', 'snippet', 'class', 'client', 'point', 'declaration', 'my_point_1', 'my_point_2', 'type', 'point']"
838,"In procedural code, my_point_1 is created as the origin 0.0, 0.0. Because no creation procedure is specified, the procedure default_create inherited from class ANY is used. This line could have been coded create my_point_1.default_create . Only procedures named as creation procedures can be used in an instruction with the create keyword. Next is a creation instruction for my_point_2, providing initial values for the my_point_2's coordinates. The third instruction makes an ordinary instance call to the make procedure to reinitialize the instance attached to my_point_2 with different values.","['procedural', 'code', 'my_point_1', 'create', 'origin', '0', '0', 'creation', 'procedure', 'specify', 'procedure', 'default_create', 'inherit', 'class', 'line', 'code', 'create', 'my_point_1.default_create', 'procedure', 'name', 'creation', 'procedure', 'instruction', 'create', 'keyword', 'creation', 'instruction', 'my_point_2', 'provide', 'initial', 'value', 'my_point_2', 'coordinate', 'instruction', 'make', 'ordinary', 'instance', 'procedure', 'reinitialize', 'instance', 'attach', 'my_point_2', 'different', 'value']"
839,"In F#, a constructor can include any let or do statements defined in a class. let statements define private fields and do statements execute code. Additional constructors can be defined using the new keyword.","['constructor', 'include', 'let', 'statement', 'define', 'class', 'let', 'statement', 'define', 'private', 'field', 'statement', 'execute', 'code', 'additional', 'constructor', 'define', 'new', 'keyword']"
840,"In Java, constructors differ from other methods in that:","['java', 'constructor', 'differ', 'method']"
841,Java constructors perform the following tasks in the following order:,"['java', 'constructor', 'perform', 'follow', 'task', 'follow', 'order']"
842,Java permit users to call one constructor in another constructor using this keyword. But this must be first statement. 9,"['java', 'permit', 'user', 'constructor', 'constructor', 'keyword', 'statement']"
843,Java provides access to the superclass's constructor through the super keyword.,"['java', 'provide', 'access', 'superclass', 'constructor', 'super', 'keyword']"
844,"A constructor taking zero number of arguments is called a ""no-arguments"" or ""no-arg"" constructor.10","['constructor', 'take', 'zero', 'number', 'argument', 'call', 'argument', 'arg', 'constructor']"
845,"As of ES6, JavaScript has direct constructors like many other programming languages. They are written as such","['es6', 'javascript', 'direct', 'constructor', 'like', 'programming', 'language', 'write']"
846,This can be instantiated as such,['instantiate']
847,"The equivalent of this before ES6, was creating a function that instantiates an object as such","['equivalent', 'es6', 'create', 'function', 'instantiate', 'object']"
848,This is instantiated the same way as above.,"['instantiate', 'way']"
849,"In Object Pascal, the constructor is similar to a factory method. The only syntactic difference to regular methods is the keyword constructor in front of the name instead of procedure or function. It can have any name, though the convention is to have Create as prefix, such as in CreateWithFormatting. Creating an instance of a class works like calling a static method of a class: TPerson.Create'Peter'.","['object', 'pascal', 'constructor', 'similar', 'factory', 'method', 'syntactic', 'difference', 'regular', 'method', 'keyword', 'constructor', 'instead', 'procedure', 'function', 'convention', 'create', 'prefix', 'createwithformatting', 'create', 'instance', 'class', 'work', 'like', 'call', 'static', 'method', 'class', 'tperson', ""create'peter""]"
850,"In OCaml, there is one constructor. Parameters are defined right after the class name. They can be used to initialize instance variables and are accessible throughout the class. An anonymous hidden method called initializer allows to evaluate an expression immediately after the object has been built. 11","['ocaml', 'constructor', 'parameter', 'define', 'right', 'class', 'initialize', 'instance', 'variable', 'accessible', 'class', 'anonymous', 'hide', 'method', 'call', 'initializer', 'allow', 'evaluate', 'expression', 'immediately', 'object', 'build']"
851,"In PHP version 5 and above, the constructor is a method named __construct notice that it's a double underscore, which the keyword new automatically calls after creating the object. It is usually used to automatically perform initializations such as property initializations. Constructors can also accept arguments, in which case, when the new statement is written, you also need to send the constructor arguments for the parameters.1","['php', 'version', 'constructor', 'method', 'name', 'construct', 'notice', 'double', 'underscore', 'keyword', 'new', 'automatically', 'call', 'create', 'object', 'usually', 'automatically', 'perform', 'initialization', 'property', 'initialization', 'constructor', 'accept', 'argument', 'case', 'new', 'statement', 'write', 'need', 'send', 'constructor', 'argument', 'parameters']"
852,"In PHP, a class is only allowed to declare a maximum of one constructor method. Static methods, factory classes or optional constructor arguments are some ways to facilitate multiple ways to create objects of a PHP class.","['php', 'class', 'allow', 'declare', 'maximum', 'constructor', 'method', 'static', 'method', 'factory', 'class', 'optional', 'constructor', 'argument', 'way', 'facilitate', 'multiple', 'way', 'create', 'object', 'php', 'class']"
853,"In Perl programming language version 5, by default, constructors are factory methods, that is, methods that create and return the object, concretely meaning create and return a blessed reference. A typical object is a reference to a hash, though rarely references to other types are used too. By convention the only constructor is named new, though it is allowed to name it otherwise, or to have multiple constructors. For example, a Person class may have a constructor named new as well as a constructor new_from_file which reads a file for Person attributes, and new_from_person which uses another Person object as a template.","['perl', 'programming', 'language', 'version', 'default', 'constructor', 'factory', 'method', 'method', 'create', 'return', 'object', 'concretely', 'mean', 'create', 'return', 'bless', 'reference', 'typical', 'object', 'reference', 'hash', 'rarely', 'reference', 'type', 'convention', 'constructor', 'name', 'new', 'allow', 'multiple', 'constructor', 'example', 'person', 'class', 'constructor', 'name', 'new', 'constructor', 'new_from_file', 'read', 'file', 'person', 'attribute', 'new_from_person', 'use', 'person', 'object', 'template']"
854,"With the Moose object system for Perl, most of this boilerplate can be left out, a default new is created, attributes can be specified, as well as whether they can be set, reset, or are required. In addition, any extra constructor functionality can be included in a BUILD method which the Moose generated constructor will call, after it has checked the arguments. A BUILDARGS method can be specified to handle constructor arguments not in hashref / key => value form.","['moose', 'object', 'system', 'perl', 'boilerplate', 'leave', 'default', 'new', 'create', 'attribute', 'specify', 'set', 'reset', 'require', 'addition', 'extra', 'constructor', 'functionality', 'include', 'build', 'method', 'moose', 'generate', 'constructor', 'check', 'argument', 'buildargs', 'method', 'specify', 'handle', 'constructor', 'argument', 'hashref', 'key', 'value', 'form']"
855,In both cases the Person class is instiated like this:,"['case', 'person', 'class', 'instiate', 'like']"
856,"In Python, constructors are defined by one or both of __new__ and __init__ methods. A new instance is created by calling the class as if it were a function, which calls the __new__ and __init__ methods. If a constructor method is not defined in the class, the next one found in the class's Method Resolution Order will be called.12","['python', 'constructor', 'define', 'new', 'init', 'method', 'new', 'instance', 'create', 'call', 'class', 'function', 'call', 'new', 'init', 'method', 'constructor', 'method', 'define', 'class', 'find', 'class', 'method', 'resolution', 'order', 'called']"
857,"In the typical case, only the __init__ method need be defined. The most common exception is for immutable objects.","['typical', 'case', 'init', 'method', 'need', 'define', 'common', 'exception', 'immutable', 'object']"
858,"Classes normally act as factories for new instances of themselves, that is, a class is a callable object like a function, with the call being the constructor, and calling the class returns an instance of that class. However the __new__ method is permitted to return something other than an instance of the class for specialised purposes. In that case, the __init__ is not invoked.13","['class', 'normally', 'act', 'factory', 'new', 'instance', 'class', 'callable', 'object', 'like', 'function', 'constructor', 'call', 'class', 'return', 'instance', 'class', 'new', 'method', 'permit', 'return', 'instance', 'class', 'specialised', 'purpose', 'case', 'init', 'invoked']"
859,"With Raku, even more boilerplate can be left out, given that a default new method is inherited, attributes can be specified, as well as whether they can be set, reset, or are required. In addition, any extra constructor functionality can be included in a BUILD method which will get called to allow for custom initialization. A TWEAK method can be specified to post-process any attributes already implicitly initialized.","['raku', 'boilerplate', 'leave', 'give', 'default', 'new', 'method', 'inherit', 'attribute', 'specify', 'set', 'reset', 'require', 'addition', 'extra', 'constructor', 'functionality', 'include', 'build', 'method', 'call', 'allow', 'custom', 'initialization', 'tweak', 'method', 'specify', 'post', 'process', 'attribute', 'implicitly', 'initialize']"
860,The Person class is instantiated like this:,"['person', 'class', 'instantiate', 'like']"
861,"Alternatively, the named parameters can be specified using the colon-pair syntax in Perl 6:","['alternatively', 'name', 'parameter', 'specify', 'colon', 'pair', 'syntax', 'perl']"
862,"And should you have set up variables with names identical to the named parameters, you can use a shortcut that will use the name of the variable for the named parameter:","['set', 'variable', 'name', 'identical', 'name', 'parameter', 'use', 'shortcut', 'use', 'variable', 'name', 'parameter']"
863,"In Ruby, constructors are created by defining a method called initialize. This method is executed to initialize each new instance.","['ruby', 'constructor', 'create', 'define', 'method', 'call', 'initialize', 'method', 'execute', 'initialize', 'new', 'instance']"
864,"In Visual Basic .NET, constructors use a method declaration with the name ""New"".","['visual', 'basic', '.net', 'constructor', 'use', 'method', 'declaration', 'new']"
865,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
866,"In software engineering, coupling is the degree of interdependence between software modules; a measure of how closely connected two routines or modules are;1 the strength of the relationships between modules.2","['software', 'engineering', 'coupling', 'degree', 'interdependence', 'software', 'module', 'measure', 'closely', 'connect', 'routine', 'module', 'are', 'strength', 'relationship', 'modules']"
867,"Coupling is usually contrasted with cohesion. Low coupling often correlates with high cohesion, and vice versa. Low coupling is often thought to be a sign of a well-structured computer system and a good design, and when combined with high cohesion, supports the general goals of high readability and maintainability.citation needed","['coupling', 'usually', 'contrast', 'cohesion', 'low', 'coupling', 'correlate', 'high', 'cohesion', 'vice', 'versa', 'low', 'coupling', 'think', 'sign', 'structure', 'computer', 'system', 'good', 'design', 'combine', 'high', 'cohesion', 'support', 'general', 'goal', 'high', 'readability', 'maintainability.citation', 'need']"
868,"The software quality metrics of coupling and cohesion were invented by Larry Constantine in the late 1960s as part of a structured design, based on characteristics of “good” programming practices that reduced maintenance and modification costs. Structured design, including cohesion and coupling, were published in the article Stevens, Myers & Constantine 19743 and the book Yourdon & Constantine 1979,4 and the latter subsequently became standard terms.","['software', 'quality', 'metric', 'coupling', 'cohesion', 'invent', 'larry', 'constantine', 'late', '1960', 'structured', 'design', 'base', 'characteristic', 'good', 'programming', 'practice', 'reduce', 'maintenance', 'modification', 'cost', 'structured', 'design', 'include', 'cohesion', 'coupling', 'publish', 'article', 'stevens', 'myers', 'constantine', '19743', 'book', 'yourdon', 'constantine', '1979', 'subsequently', 'standard', 'term']"
869,"Coupling can be ""low"" also ""loose"" and ""weak"" or ""high"" also ""tight"" and ""strong"". Some types of coupling, in order of highest to lowest coupling, are as follows:","['coupling', 'low', 'loose', 'weak', 'high', 'tight', 'strong', 'type', 'coupling', 'order', 'high', 'low', 'coupling', 'follow']"
870,"A module here refers to a subroutine of any kind, i.e. a set of one or more statements having a name and preferably its own set of variable names.","['module', 'refer', 'subroutine', 'kind', 'i.e.', 'set', 'statement', 'have', 'preferably', 'set', 'variable', 'name']"
871,In recent work various other coupling concepts have been investigated and used as indicators for different modularization principles used in practice.5,"['recent', 'work', 'coupling', 'concept', 'investigate', 'indicator', 'different', 'modularization', 'principle', 'practice']"
872,"The goal of this type of coupling is to provide a run-time evaluation of a software system. It has been argued that static coupling metrics lose precision when dealing with an intensive use of dynamic binding or inheritance.6 In the attempt to solve this issue, dynamic coupling measures have been taken into account.","['goal', 'type', 'coupling', 'provide', 'run', 'time', 'evaluation', 'software', 'system', 'argue', 'static', 'coupling', 'metric', 'lose', 'precision', 'deal', 'intensive', 'use', 'dynamic', 'binding', 'inheritance', 'attempt', 'solve', 'issue', 'dynamic', 'coupling', 'measure', 'take', 'account']"
873,"This kind of coupling considers the conceptual similarities between software entities using, for example, comments and identifiers and relying on techniques such as latent semantic indexing LSI.","['kind', 'coupling', 'consider', 'conceptual', 'similarity', 'software', 'entity', 'example', 'comment', 'identifier', 'rely', 'technique', 'latent', 'semantic', 'indexing', 'lsi']"
874,"Logical coupling or evolutionary coupling or change coupling exploits the release history of a software system to find change patterns among modules or classes: e.g., entities that are likely to be changed together or sequences of changes a change in a class A is always followed by a change in a class B.","['logical', 'coupling', 'evolutionary', 'coupling', 'change', 'couple', 'exploit', 'release', 'history', 'software', 'system', 'find', 'change', 'pattern', 'module', 'class', 'e.g.', 'entity', 'likely', 'change', 'sequence', 'change', 'change', 'class', 'follow', 'change', 'class']"
875,"Tightly coupled systems tend to exhibit the following developmental characteristics, which are often seen as disadvantages:","['tightly', 'couple', 'system', 'tend', 'exhibit', 'follow', 'developmental', 'characteristic', 'see', 'disadvantage']"
876,"Whether loosely or tightly coupled, a system's performance is often reduced by message and parameter creation, transmission, translation e.g. marshaling and message interpretation which might be a reference to a string, array or data structure, which require less overhead than creating a complicated message such as a SOAP message. Longer messages require more CPU and memory to produce. To optimize runtime performance, message length must be minimized and message meaning must be maximized.","['loosely', 'tightly', 'couple', 'system', 'performance', 'reduce', 'message', 'parameter', 'creation', 'transmission', 'translation', 'e.g.', 'marshaling', 'message', 'interpretation', 'reference', 'string', 'array', 'data', 'structure', 'require', 'overhead', 'create', 'complicated', 'message', 'soap', 'message', 'long', 'message', 'require', 'cpu', 'memory', 'produce', 'optimize', 'runtime', 'performance', 'message', 'length', 'minimize', 'message', 'meaning', 'maximize']"
877,"One approach to decreasing coupling is functional design, which seeks to limit the responsibilities of modules along functionality. Coupling increases between two classes A and B if:","['approach', 'decrease', 'coupling', 'functional', 'design', 'seek', 'limit', 'responsibility', 'module', 'functionality', 'couple', 'increase', 'class']"
878,Low coupling refers to a relationship in which one module interacts with another module through a simple and stable interface and does not need to be concerned with the other module's internal implementation see Information Hiding.,"['low', 'coupling', 'refer', 'relationship', 'module', 'interact', 'module', 'simple', 'stable', 'interface', 'need', 'concern', 'module', 'internal', 'implementation', 'information', 'hiding']"
879,Systems such as CORBA or COM allow objects to communicate with each other without having to know anything about the other object's implementation. Both of these systems even allow for objects to communicate with objects written in other languages.,"['system', 'corba', 'com', 'allow', 'object', 'communicate', 'have', 'know', 'object', 'implementation', 'system', 'allow', 'object', 'communicate', 'object', 'write', 'language']"
880,"Coupling and cohesion are terms which occur together very frequently. Coupling refers to the interdependencies between modules, while cohesion describes how related the functions within a single module are. Low cohesion implies that a given module performs tasks which are not very related to each other and hence can create problems as the module becomes large.","['coupling', 'cohesion', 'term', 'occur', 'frequently', 'coupling', 'refer', 'interdependency', 'module', 'cohesion', 'describe', 'relate', 'function', 'single', 'module', 'low', 'cohesion', 'imply', 'give', 'module', 'perform', 'task', 'related', 'create', 'problem', 'module', 'large']"
881,Coupling in Software Engineering7 describes a version of metrics associated with this concept.,"['couple', 'software', 'engineering7', 'describe', 'version', 'metric', 'associate', 'concept']"
882,For data and control flow coupling:,"['datum', 'control', 'flow', 'coupling']"
883,C o u p l i n g C = 1 − 1 d i + 2 × c i + d o + 2 × c o + g d + 2 × g c + w + r \displaystyle \mathrm Coupling C=1-\frac 1d_i+2\times c_i+d_o+2\times c_o+g_d+2\times g_c+w+r,"['coupling', 'g_c+w+r']"
884,CouplingC makes the value larger the more coupled the module is. This number ranges from approximately 0.67 low coupling to 1.0 highly coupled,"['couplingc', 'make', 'value', 'large', 'couple', 'module', 'number', 'range', 'approximately', '0', 'low', 'coupling', '1', 'highly', 'couple']"
885,"For example, if a module has only a single input and output data parameter","['example', 'module', 'single', 'input', 'output', 'datum', 'parameter']"
886,C = 1 − 1 1 + 0 + 1 + 0 + 0 + 0 + 1 + 0 = 1 − 1 3 = 0.67 \displaystyle C=1-\frac 11+0+1+0+0+0+1+0=1-\frac 13=0.67,"['0', '13=0']"
887,"If a module has 5 input and output data parameters, an equal number of control parameters, and accesses 10 items of global data, with a fan-in of 3 and a fan-out of 4,","['module', 'input', 'output', 'datum', 'parameter', 'equal', 'number', 'control', 'parameter', 'access', 'item', 'global', 'datum', 'fan', 'fan']"
888,C = 1 − 1 5 + 2 × 5 + 5 + 2 × 5 + 10 + 0 + 3 + 4 = 0.98 \displaystyle C=1-\frac 15+2\times 5+5+2\times 5+10+0+3+4=0.98,"['0', '4=0']"
889,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
890,"Many programming language type systems support subtyping. For instance, if the type Cat is a subtype of Animal, then an expression of type Cat should be substitutable wherever an expression of type Animal is used.","['programming', 'language', 'type', 'system', 'support', 'subtype', 'instance', 'type', 'cat', 'subtype', 'animal', 'expression', 'type', 'cat', 'substitutable', 'expression', 'type', 'animal']"
891,"Variance refers to how subtyping between more complex types relates to subtyping between their components. For example, how should a list of Cats relate to a list of Animals? Or how should a function that returns Cat relate to a function that returns Animal?","['variance', 'refer', 'subtype', 'complex', 'type', 'relate', 'subtype', 'component', 'example', 'list', 'cats', 'relate', 'list', 'animal', 'function', 'return', 'cat', 'relate', 'function', 'return', 'animal']"
892,"Depending on the variance of the type constructor, the subtyping relation of the simple types may be either preserved, reversed, or ignored for the respective complex types. In the OCaml programming language, for example, ""list of Cat"" is a subtype of ""list of Animal"" because the list type constructor is covariant. This means that the subtyping relation of the simple types are preserved for the complex types.","['depend', 'variance', 'type', 'constructor', 'subtype', 'relation', 'simple', 'type', 'preserve', 'reverse', 'ignore', 'respective', 'complex', 'type', 'ocaml', 'programming', 'language', 'example', 'list', 'cat', 'subtype', 'list', 'animal', 'list', 'type', 'constructor', 'covariant', 'mean', 'subtype', 'relation', 'simple', 'type', 'preserve', 'complex', 'type']"
893,"On the other hand, ""function from Animal to String"" is a subtype of ""function from Cat to String"" because the function type constructor is contravariant in the parameter type. Here, the subtyping relation of the simple types is reversed for the complex types.","['hand', 'function', 'animal', 'string', 'subtype', 'function', 'cat', 'string', 'function', 'type', 'constructor', 'contravariant', 'parameter', 'type', 'subtype', 'relation', 'simple', 'type', 'reverse', 'complex', 'type']"
894,"In other words, covariance is the quality of being different by being more specific Cat is covariant to Animal while contravariance is the quality of being different by being more general Animal is contravariant to Cat.","['word', 'covariance', 'quality', 'different', 'specific', 'cat', 'covariant', 'animal', 'contravariance', 'quality', 'different', 'general', 'animal', 'contravariant', 'cat']"
895,"A programming language designer will consider variance when devising typing rules for language features such as arrays, inheritance, and generic datatypes. By making type constructors covariant or contravariant instead of invariant, more programs will be accepted as well-typed. On the other hand, programmers often find contravariance unintuitive, and accurately tracking variance to avoid runtime type errors can lead to complex typing rules.","['programming', 'language', 'designer', 'consider', 'variance', 'devise', 'typing', 'rule', 'language', 'feature', 'array', 'inheritance', 'generic', 'datatype', 'make', 'type', 'constructor', 'covariant', 'contravariant', 'instead', 'invariant', 'program', 'accept', 'type', 'hand', 'programmer', 'find', 'contravariance', 'unintuitive', 'accurately', 'track', 'variance', 'avoid', 'runtime', 'type', 'error', 'lead', 'complex', 'typing', 'rule']"
896,"In order to keep the type system simple and allow useful programs, a language may treat a type constructor as invariant even if it would be safe to consider it variant, or treat it as covariant even though that could violate type safety.","['order', 'type', 'system', 'simple', 'allow', 'useful', 'program', 'language', 'treat', 'type', 'constructor', 'invariant', 'safe', 'consider', 'variant', 'treat', 'covariant', 'violate', 'type', 'safety']"
897,"Within the type system of a programming language, a typing rule or a type constructor is:","['type', 'system', 'programming', 'language', 'typing', 'rule', 'type', 'constructor']"
898,The article considers how this applies to some common type constructors.,"['article', 'consider', 'apply', 'common', 'type', 'constructor']"
899,"For example, in C#, if Cat is a subtype of Animal, then:","['example', 'cat', 'subtype', 'animal']"
900,"The variance of a C# generic interface is declared by placing the out covariant or in contravariant attribute on zero or more of its type parameters. For each so-marked type parameter, the compiler conclusively verifies, with any violation being fatal, that such use is globally consistent. The above interfaces are declared as IEnumerable<out T>, Action<in T>, and IList<T>. Types with more than one type parameter may specify different variances on each type parameter. For example, the delegate type Func<in T, out TResult> represents a function with a contravariant input parameter of type T and a covariant return value of type TResult.2","['variance', 'generic', 'interface', 'declare', 'place', 'covariant', 'contravariant', 'attribute', 'zero', 'type', 'parameter', 'mark', 'type', 'parameter', 'compiler', 'conclusively', 'verifie', 'violation', 'fatal', 'use', 'globally', 'consistent', 'interface', 'declare', 'ienumerable', 'action', 'ilist', 'type', 'type', 'parameter', 'specify', 'different', 'variance', 'type', 'parameter', 'example', 'delegate', 'type', 'func', 'tresult', 'represent', 'function', 'contravariant', 'input', 'parameter', 'type', 'covariant', 'return', 'value', 'type', 'tresult']"
901,"The typing rules for interface variance ensure type safety. For example, an Action<T> represents a first-class function expecting an argument of type T, and a function that can handle any type of animal can always be used instead of one that can only handle cats.","['typing', 'rule', 'interface', 'variance', 'ensure', 'type', 'safety', 'example', 'action', 'represent', 'class', 'function', 'expect', 'argument', 'type', 'function', 'handle', 'type', 'animal', 'instead', 'handle', 'cat']"
902,"Read-only data types sources can be covariant; write-only data types sinks can be contravariant. Mutable data types which act as both sources and sinks should be invariant. To illustrate this general phenomenon, consider the array type. For the type Animal we can make the type Animal, which is an ""array of animals"". For the purposes of this example, this array supports both reading and writing elements.","['read', 'datum', 'type', 'source', 'covariant', 'write', 'data', 'type', 'sink', 'contravariant', 'mutable', 'datum', 'type', 'act', 'source', 'sink', 'invariant', 'illustrate', 'general', 'phenomenon', 'consider', 'array', 'type', 'type', 'animal', 'type', 'animal', 'array', 'animal', 'purpose', 'example', 'array', 'support', 'read', 'write', 'element']"
903,We have the option to treat this as either:,"['option', 'treat']"
904,"If we wish to avoid type errors, then only the third choice is safe. Clearly, not every Animal can be treated as if it were a Cat, since a client reading from the array will expect a Cat, but an Animal may contain e.g. a Dog. So the contravariant rule is not safe.","['wish', 'avoid', 'type', 'error', 'choice', 'safe', 'clearly', 'animal', 'treat', 'cat', 'client', 'reading', 'array', 'expect', 'cat', 'animal', 'contain', 'e.g.', 'dog', 'contravariant', 'rule', 'safe']"
905,"Conversely, a Cat cannot be treated as an Animal. It should always be possible to put a Dog into an Animal. With covariant arrays this cannot be guaranteed to be safe, since the backing store might actually be an array of cats. So the covariant rule is also not safe—the array constructor should be invariant. Note that this is only an issue for mutable arrays; the covariant rule is safe for immutable read-only arrays. Likewise, the contravariant rule would be safe for write-only arrays.","['conversely', 'cat', 'treat', 'animal', 'possible', 'dog', 'animal', 'covariant', 'array', 'guarantee', 'safe', 'backing', 'store', 'actually', 'array', 'cat', 'covariant', 'rule', 'safe', 'array', 'constructor', 'invariant', 'note', 'issue', 'mutable', 'array', 'covariant', 'rule', 'safe', 'immutable', 'read', 'array', 'likewise', 'contravariant', 'rule', 'safe', 'write', 'array']"
906,"With C# you can play around this by using the dynamic keyword over array/collection/generics with duck typing, the intellisense is lost this way but it works.","['play', 'dynamic', 'keyword', 'array', 'collection', 'generic', 'duck', 'typing', 'intellisense', 'lose', 'way', 'work']"
907,"Early versions of Java and C# did not include generics, also termed parametric polymorphism. In such a setting, making arrays invariant rules out useful polymorphic programs.","['early', 'version', 'java', 'include', 'generic', 'term', 'parametric', 'polymorphism', 'setting', 'make', 'arrays', 'invariant', 'rule', 'useful', 'polymorphic', 'program']"
908,"For example, consider writing a function to shuffle an array, or a function that tests two arrays for equality using the Object.equals method on the elements. The implementation does not depend on the exact type of element stored in the array, so it should be possible to write a single function that works on all types of arrays. It is easy to implement functions of type:","['example', 'consider', 'write', 'function', 'shuffle', 'array', 'function', 'test', 'array', 'equality', 'object.equals', 'method', 'element', 'implementation', 'depend', 'exact', 'type', 'element', 'store', 'array', 'possible', 'write', 'single', 'function', 'work', 'type', 'array', 'easy', 'implement', 'function', 'type']"
909,"However, if array types were treated as invariant, it would only be possible to call these functions on an array of exactly the type Object. One could not, for example, shuffle an array of strings.","['array', 'type', 'treat', 'invariant', 'possible', 'function', 'array', 'exactly', 'type', 'object', 'example', 'shuffle', 'array', 'string']"
910,"Therefore, both Java and C# treat array types covariantly. For instance, in Java String is a subtype of Object, and in C# string is a subtype of object.","['java', 'treat', 'array', 'type', 'covariantly', 'instance', 'java', 'string', 'subtype', 'object', 'string', 'subtype', 'object']"
911,"As discussed above, covariant arrays lead to problems with writes into the array. Java and C# deal with this by marking each array object with a type when it is created. Each time a value is stored into an array, the execution environment will check that the run-time type of the value is equal to the run-time type of the array. If there is a mismatch, an ArrayStoreException Java or ArrayTypeMismatchException C# is thrown:","['discuss', 'covariant', 'array', 'lead', 'problem', 'write', 'array', 'java', 'deal', 'mark', 'array', 'object', 'type', 'create', 'time', 'value', 'store', 'array', 'execution', 'environment', 'check', 'run', 'time', 'type', 'value', 'equal', 'run', 'time', 'type', 'array', 'mismatch', 'arraystoreexception', 'java', 'arraytypemismatchexception', 'throw']"
912,"In the above example, one can read from the array b safely. It is only trying to write to the array that can lead to trouble.","['example', 'read', 'array', 'safely', 'try', 'write', 'array', 'lead', 'trouble']"
913,"One drawback to this approach is that it leaves the possibility of a run-time error that a stricter type system could have caught at compile-time. Also, it hurts performance because each write into an array requires an additional run-time check.","['drawback', 'approach', 'leave', 'possibility', 'run', 'time', 'error', 'strict', 'type', 'system', 'catch', 'compile', 'time', 'hurt', 'performance', 'write', 'array', 'require', 'additional', 'run', 'time', 'check']"
914,"With the addition of generics, Java and C# now offer ways to write this kind of polymorphic function without relying on covariance. The array comparison and shuffling functions can be given the parameterized types","['addition', 'generic', 'java', 'offer', 'way', 'write', 'kind', 'polymorphic', 'function', 'rely', 'covariance', 'array', 'comparison', 'shuffle', 'function', 'give', 'parameterized', 'type']"
915,"Alternatively, to enforce that a C# method accesses a collection in a read-only way, one can use the interface IEnumerable<object> instead of passing it an array object.","['alternatively', 'enforce', 'method', 'access', 'collection', 'read', 'way', 'use', 'interface', 'ienumerable', 'object', 'instead', 'pass', 'array', 'object']"
916,"Languages with first-class functions have function types like ""a function expecting a Cat and returning an Animal"" written Cat -> Animal in OCaml syntax or Func<Cat,Animal> in C# syntax.","['language', 'class', 'function', 'function', 'type', 'like', 'function', 'expect', 'cat', 'return', 'animal', 'write', 'cat', 'animal', 'ocaml', 'syntax', 'func', 'cat', 'animal', 'syntax']"
917,"Those languages also need to specify when one function type is a subtype of another—that is, when it is safe to use a function of one type in a context that expects a function of a different type. It is safe to substitute a function f for a function g if f accepts a more general type of argument and returns a more specific type than g. For example, functions of type Animal -> Cat, Cat -> Cat, and Animal -> Animal can be used wherever a Cat -> Animal was expected. One can compare this to the robustness principle of communication: ""be liberal in what you accept and conservative in what you produce."" The general rule is:","['language', 'need', 'specify', 'function', 'type', 'subtype', 'safe', 'use', 'function', 'type', 'context', 'expect', 'function', 'different', 'type', 'safe', 'substitute', 'function', 'function', 'accept', 'general', 'type', 'argument', 'return', 'specific', 'type', 'example', 'function', 'type', 'animal', 'cat', 'cat', 'cat', 'animal', 'animal', 'cat', 'animal', 'expect', 'compare', 'robustness', 'principle', 'communication', 'liberal', 'accept', 'conservative', 'produce', 'general', 'rule']"
918,Using inference rule notation the same rule can be written as:,"['inference', 'rule', 'notation', 'rule', 'write']"
919,"In other words, the → type constructor is contravariant in the parameter input type and covariant in the return output type. This rule was first stated formally by John C. Reynolds,3 and further popularized in a paper by Luca Cardelli.4","['word', 'type', 'constructor', 'contravariant', 'parameter', 'input', 'type', 'covariant', 'return', 'output', 'type', 'rule', 'state', 'formally', 'john', 'reynolds', 'popularize', 'paper', 'luca', 'cardelli']"
920,"When dealing with functions that take functions as arguments, this rule can be applied several times. For example, by applying the rule twice, we see that P 1 → R → R ≤ P 2 → R → R \displaystyle P_1\to R\to R\leq P_2\to R\to R if P 1 ≤ P 2 \displaystyle P_1\leq P_2 . In other words, the type A → B → C \displaystyle A\to B\to C is covariant in the position of A \displaystyle A . For complicated types it can be confusing to mentally trace why a given type specialization is or isn't type-safe, but it is easy to calculate which positions are co- and contravariant: a position is covariant if it is on the left side of an even number of arrows applying to it.","['deal', 'function', 'function', 'argument', 'rule', 'apply', 'time', 'example', 'apply', 'rule', 'twice', 'p_2', 'word', 'type', 'covariant', 'position', 'complicated', 'type', 'confusing', 'mentally', 'trace', 'give', 'type', 'specialization', 'type', 'safe', 'easy', 'calculate', 'position', 'co-', 'contravariant', 'position', 'covariant', 'left', 'number', 'arrow', 'apply']"
921,"When a subclass overrides a method in a superclass, the compiler must check that the overriding method has the right type. While some languages require that the type exactly matches the type in the superclass invariance, it is also type safe to allow the overriding method to have a ""better"" type. By the usual subtyping rule for function types, this means that the overriding method should return a more specific type return type covariance, and accept a more general argument parameter type contravariance. In UML notation, the possibilities are as follows where Class B is the subclass that extends Class A which is the superclass:","['subclass', 'override', 'method', 'superclass', 'compiler', 'check', 'override', 'method', 'right', 'type', 'language', 'require', 'type', 'exactly', 'match', 'type', 'superclass', 'invariance', 'type', 'safe', 'allow', 'override', 'method', 'well', 'type', 'usual', 'subtyping', 'rule', 'function', 'type', 'mean', 'override', 'method', 'return', 'specific', 'type', 'return', 'type', 'covariance', 'accept', 'general', 'argument', 'parameter', 'type', 'contravariance', 'uml', 'notation', 'possibility', 'follow', 'class', 'subclass', 'extend', 'class', 'superclass']"
922,Subtyping of the parameter/return type of the method.,"['subtype', 'parameter', 'return', 'type', 'method']"
923,Invariance. The signature of the overriding method is unchanged.,"['invariance', 'signature', 'override', 'method', 'unchanged']"
924,Covariant return type. The subtyping relation is in the same direction as the relation between ClassA and ClassB.,"['covariant', 'return', 'type', 'subtype', 'relation', 'direction', 'relation', 'classa', 'classb.']"
925,Contravariant parameter type. The subtyping relation is in the opposite direction to the relation between ClassA and ClassB.,"['contravariant', 'parameter', 'type', 'subtype', 'relation', 'opposite', 'direction', 'relation', 'classa', 'classb.']"
926,Covariant parameter type. Not type safe.,"['covariant', 'parameter', 'type', 'type', 'safe']"
927,"For a concrete example, suppose we are writing a class to model an animal shelter. We assume that Cat is a subclass of Animal, and that we have a base class using Java syntax","['concrete', 'example', 'suppose', 'write', 'class', 'model', 'animal', 'shelter', 'assume', 'cat', 'subclass', 'animal', 'base', 'class', 'java', 'syntax']"
928,"Now the question is: if we subclass AnimalShelter, what types are we allowed to give to getAnimalForAdoption and putAnimal?","['question', 'subclass', 'animalshelter', 'type', 'allow', 'getanimalforadoption', 'putanimal']"
929,"In a language which allows covariant return types, a derived class can override the getAnimalForAdoption method to return a more specific type:","['language', 'allow', 'covariant', 'return', 'type', 'derive', 'class', 'override', 'getanimalforadoption', 'method', 'return', 'specific', 'type']"
930,"Among mainstream OO languages, Java, C++ and C# as of version 9.0 5 support covariant return types. Adding the covariant return type was one of the first modifications of the C++ language approved by the standards committee in 1998.6 Scala and D also support covariant return types.","['mainstream', 'language', 'java', 'c++', 'version', '9', 'support', 'covariant', 'return', 'type', 'add', 'covariant', 'return', 'type', 'modification', 'c++', 'language', 'approve', 'standards', 'committee', '1998', 'scala', 'support', 'covariant', 'return', 'type']"
931,"Similarly, it is type safe to allow an overriding method to accept a more general argument than the method in the base class:","['similarly', 'type', 'safe', 'allow', 'override', 'method', 'accept', 'general', 'argument', 'method', 'base', 'class']"
932,"Only a few object-oriented languages actually allow this for example, Python when typechecked with mypy. C++, Java and most other languages that support overloading and/or shadowing would interpret this as a method with an overloaded or shadowed name.","['object', 'orient', 'language', 'actually', 'allow', 'example', 'python', 'typechecke', 'mypy', 'c++', 'java', 'language', 'support', 'overload', 'shadow', 'interpret', 'method', 'overloaded', 'shadow']"
933,"However, Sather supported both covariance and contravariance. Calling convention for overridden methods are covariant with out parameters and return values, and contravariant with normal parameters with the mode in.","['sather', 'support', 'covariance', 'contravariance', 'call', 'convention', 'overridden', 'method', 'covariant', 'parameter', 'return', 'value', 'contravariant', 'normal', 'parameter', 'mode']"
934,"A couple of mainstream languages, Eiffel and Dart7 allow the parameters of an overriding method to have a more specific type than the method in the superclass parameter type covariance. Thus, the following Dart code would type check, with putAnimal overriding the method in the base class:","['couple', 'mainstream', 'language', 'eiffel', 'dart7', 'allow', 'parameter', 'override', 'method', 'specific', 'type', 'method', 'superclass', 'parameter', 'type', 'covariance', 'follow', 'dart', 'code', 'type', 'check', 'putanimal', 'override', 'method', 'base', 'class']"
935,"This is not type safe. By up-casting a CatShelter to an AnimalShelter, one can try to place a dog in a cat shelter. That does not meet CatShelter parameter restrictions, and will result in a runtime error. The lack of type safety known as the ""catcall problem"" in the Eiffel community, where ""cat"" or ""CAT"" is a Changed Availability or Type has been a long-standing issue. Over the years, various combinations of global static analysis, local static analysis, and new language features have been proposed to remedy it,89 and these have been implemented in some Eiffel compilers.","['type', 'safe', 'cast', 'catshelter', 'animalshelter', 'try', 'place', 'dog', 'cat', 'shelter', 'meet', 'catshelter', 'parameter', 'restriction', 'result', 'runtime', 'error', 'lack', 'type', 'safety', 'know', 'catcall', 'problem', 'eiffel', 'community', 'cat', 'cat', 'changed', 'availability', 'type', 'long', 'stand', 'issue', 'year', 'combination', 'global', 'static', 'analysis', 'local', 'static', 'analysis', 'new', 'language', 'feature', 'propose', 'remedy', 'it', 'implement', 'eiffel', 'compiler']"
936,"Despite the type safety problem, the Eiffel designers consider covariant parameter types crucial for modeling real world requirements.9 The cat shelter illustrates a common phenomenon: it is a kind of animal shelter but has additional restrictions, and it seems reasonable to use inheritance and restricted parameter types to model this. In proposing this use of inheritance, the Eiffel designers reject the Liskov substitution principle, which states that objects of subclasses should always be less restricted than objects of their superclass.","['despite', 'type', 'safety', 'problem', 'eiffel', 'designer', 'consider', 'covariant', 'parameter', 'type', 'crucial', 'model', 'real', 'world', 'requirements', 'cat', 'shelter', 'illustrate', 'common', 'phenomenon', 'kind', 'animal', 'shelter', 'additional', 'restriction', 'reasonable', 'use', 'inheritance', 'restrict', 'parameter', 'type', 'model', 'propose', 'use', 'inheritance', 'eiffel', 'designer', 'reject', 'liskov', 'substitution', 'principle', 'state', 'object', 'subclass', 'restricted', 'object', 'superclass']"
937,"One other instance of a mainstream language allowing covariance in method parameters is PHP in regards to class constructors. In the following example, the __construct method is accepted, despite the method parameter being covariant to the parent's method parameter. Were this method anything other than __construct, an error would occur:","['instance', 'mainstream', 'language', 'allow', 'covariance', 'method', 'parameter', 'php', 'regard', 'class', 'constructor', 'follow', 'example', 'construct', 'method', 'accept', 'despite', 'method', 'parameter', 'covariant', 'parent', 'method', 'parameter', 'method', 'construct', 'error', 'occur']"
938,"Another example where covariant parameters seem helpful is so-called binary methods, i.e. methods where the parameter is expected to be of the same type as the object the method is called on. An example is the compareTo method: a.compareTob checks whether a comes before or after b in some ordering, but the way to compare, say, two rational numbers will be different from the way to compare two strings. Other common examples of binary methods include equality tests, arithmetic operations, and set operations like subset and union.","['example', 'covariant', 'parameter', 'helpful', 'call', 'binary', 'method', 'i.e.', 'method', 'parameter', 'expect', 'type', 'object', 'method', 'call', 'example', 'compareto', 'method', 'a.comparetob', 'check', 'come', 'ordering', 'way', 'compare', 'rational', 'number', 'different', 'way', 'compare', 'string', 'common', 'example', 'binary', 'method', 'include', 'equality', 'test', 'arithmetic', 'operation', 'set', 'operation', 'like', 'subset', 'union']"
939,"In older versions of Java, the comparison method was specified as an interface Comparable:","['old', 'version', 'java', 'comparison', 'method', 'specify', 'interface', 'comparable']"
940,The drawback of this is that the method is specified to take an argument of type Object. A typical implementation would first down-cast this argument throwing an error if it is not of the expected type:,"['drawback', 'method', 'specify', 'argument', 'type', 'object', 'typical', 'implementation', 'cast', 'argument', 'throw', 'error', 'expect', 'type']"
941,"In a language with covariant parameters, the argument to compareTo could be directly given the desired type RationalNumber, hiding the typecast. Of course, this would still give a runtime error if compareTo was then called on e.g. a String.","['language', 'covariant', 'parameter', 'argument', 'compareto', 'directly', 'give', 'desire', 'type', 'rationalnumber', 'hide', 'typecast', 'course', 'runtime', 'error', 'compareto', 'call', 'e.g.', 'string']"
942,Other language features can provide the apparent benefits of covariant parameters while preserving Liskov substitutability.,"['language', 'feature', 'provide', 'apparent', 'benefit', 'covariant', 'parameter', 'preserve', 'liskov', 'substitutability']"
943,"In a language with generics a.k.a. parametric polymorphism and bounded quantification, the previous examples can be written in a type-safe way.10 Instead of defining AnimalShelter, we define a parameterized class Shelter<T>. One drawback of this is that the implementer of the base class needs to foresee which types will need to be specialized in the subclasses.","['language', 'generic', 'a.k.a', 'parametric', 'polymorphism', 'bound', 'quantification', 'previous', 'example', 'write', 'type', 'safe', 'way', 'instead', 'define', 'animalshelter', 'define', 'parameterized', 'class', 'shelter', 'drawback', 'implementer', 'base', 'class', 'need', 'foresee', 'type', 'need', 'specialize', 'subclass']"
944,"Similarly, in recent versions of Java the Comparable interface has been parameterized, which allows the downcast to be omitted in a type-safe way:","['similarly', 'recent', 'version', 'java', 'comparable', 'interface', 'parameterize', 'allow', 'downcast', 'omit', 'type', 'safe', 'way']"
945,"Another language feature that can help is multiple dispatch. One reason that binary methods are awkward to write is that in a call like a.compareTob, selecting the correct implementation of compareTo really depends on the runtime type of both a and b, but in a conventional OO language only the runtime type of a is taken into account. In a language with Common Lisp Object System CLOS-style multiple dispatch, the comparison method could be written as a generic function where both arguments are used for method selection.","['language', 'feature', 'help', 'multiple', 'dispatch', 'reason', 'binary', 'method', 'awkward', 'write', 'like', 'a.comparetob', 'select', 'correct', 'implementation', 'compareto', 'depend', 'runtime', 'type', 'conventional', 'language', 'runtime', 'type', 'take', 'account', 'language', 'common', 'lisp', 'object', 'system', 'clos', 'style', 'multiple', 'dispatch', 'comparison', 'method', 'write', 'generic', 'function', 'argument', 'method', 'selection']"
946,"Giuseppe Castagna11 observed that in a typed language with multiple dispatch, a generic function can have some parameters which control dispatch and some ""left-over"" parameters which do not. Because the method selection rule chooses the most specific applicable method, if a method overrides another method, then the overriding method will have more specific types for the controlling parameters. On the other hand, to ensure type safety the language still must require the left-over parameters to be at least as general. Using the previous terminology, types used for runtime method selection are covariant while types not used for runtime method selection of the method are contravariant. Conventional single-dispatch languages like Java also obey this rule: only one argument is used for method selection the receiver object, passed along to a method as the hidden argument this, and indeed the type of this is more specialized inside overriding methods than in the superclass.","['giuseppe', 'castagna11', 'observe', 'type', 'language', 'multiple', 'dispatch', 'generic', 'function', 'parameter', 'control', 'dispatch', 'left', 'parameter', 'method', 'selection', 'rule', 'choose', 'specific', 'applicable', 'method', 'method', 'override', 'method', 'override', 'method', 'specific', 'type', 'control', 'parameter', 'hand', 'ensure', 'type', 'safety', 'language', 'require', 'left', 'parameter', 'general', 'previous', 'terminology', 'type', 'runtime', 'method', 'selection', 'covariant', 'type', 'runtime', 'method', 'selection', 'method', 'contravariant', 'conventional', 'single', 'dispatch', 'language', 'like', 'java', 'obey', 'rule', 'argument', 'method', 'selection', 'receiver', 'object', 'pass', 'method', 'hide', 'argument', 'type', 'specialized', 'inside', 'overriding', 'method', 'superclass']"
947,"Castagna suggests that examples where covariant parameter types are superior particularly, binary methods should be handled using multiple dispatch; which is naturally covariant. However, most programming languages do not support multiple dispatch.","['castagna', 'suggest', 'example', 'covariant', 'parameter', 'type', 'superior', 'particularly', 'binary', 'method', 'handle', 'multiple', 'dispatch', 'naturally', 'covariant', 'programming', 'language', 'support', 'multiple', 'dispatch']"
948,The following table summarizes the rules for overriding methods in the languages discussed above.,"['following', 'table', 'summarize', 'rule', 'override', 'method', 'language', 'discuss']"
949,"In programming languages that support generics a.k.a. parametric polymorphism, the programmer can extend the type system with new constructors. For example, a C# interface like IList<T> makes it possible to construct new types like IList<Animal> or IList<Cat>. The question then arises what the variance of these type constructors should be.","['programming', 'language', 'support', 'generic', 'a.k.a', 'parametric', 'polymorphism', 'programmer', 'extend', 'type', 'system', 'new', 'constructor', 'example', 'interface', 'like', 'ilist', 'make', 'possible', 'construct', 'new', 'type', 'like', 'ilist', 'animal', 'ilist', 'cat', 'question', 'arise', 'variance', 'type', 'constructor']"
950,"There are two main approaches. In languages with declaration-site variance annotations e.g., C#, the programmer annotates the definition of a generic type with the intended variance of its type parameters. With use-site variance annotations e.g., Java, the programmer instead annotates the places where a generic type is instantiated.","['main', 'approach', 'language', 'declaration', 'site', 'variance', 'annotation', 'e.g.', 'programmer', 'annotate', 'definition', 'generic', 'type', 'intend', 'variance', 'type', 'parameter', 'use', 'site', 'variance', 'annotation', 'e.g.', 'java', 'programmer', 'instead', 'annotate', 'place', 'generic', 'type', 'instantiate']"
951,"The most popular languages with declaration-site variance annotations are C# and Kotlin using the keywords out and in, and Scala and OCaml using the keywords + and -. C# only allows variance annotations for interface types, while Kotlin, Scala and OCaml allow them for both interface types and concrete data types.","['popular', 'language', 'declaration', 'site', 'variance', 'annotation', 'kotlin', 'keyword', 'scala', 'ocaml', 'keyword', 'allow', 'variance', 'annotation', 'interface', 'type', 'kotlin', 'scala', 'ocaml', 'allow', 'interface', 'type', 'concrete', 'datum', 'type']"
952,"In C#, each type parameter of a generic interface can be marked covariant out, contravariant in, or invariant no annotation. For example, we can define an interface IEnumerator<T> of read-only iterators, and declare it to be covariant out in its type parameter.","['type', 'parameter', 'generic', 'interface', 'mark', 'covariant', 'contravariant', 'invariant', 'annotation', 'example', 'define', 'interface', 'ienumerator', 'read', 'iterator', 'declare', 'covariant', 'type', 'parameter']"
953,"With this declaration, IEnumerator will be treated as covariant in its type parameter, e.g. IEnumerator<Cat> is a subtype of IEnumerator<Animal>.","['declaration', 'ienumerator', 'treat', 'covariant', 'type', 'parameter', 'e.g.', 'ienumerator', 'cat', 'subtype', 'ienumerator', 'animal']"
954,"The type checker enforces that each method declaration in an interface only mentions the type parameters in a way consistent with the in/out annotations. That is, a parameter that was declared covariant must not occur in any contravariant positions where a position is contravariant if it occurs under an odd number of contravariant type constructors. The precise rule1213 is that the return types of all methods in the interface must be valid covariantly and all the method parameter types must be valid contravariantly, where valid S-ly is defined as follows:","['type', 'checker', 'enforce', 'method', 'declaration', 'interface', 'mention', 'type', 'parameter', 'way', 'consistent', 'annotation', 'parameter', 'declare', 'covariant', 'occur', 'contravariant', 'position', 'position', 'contravariant', 'occur', 'odd', 'number', 'contravariant', 'type', 'constructor', 'precise', 'rule1213', 'return', 'type', 'method', 'interface', 'valid', 'covariantly', 'method', 'parameter', 'type', 'valid', 'contravariantly', 'valid', 'define', 'follow']"
955,"As an example of how these rules apply, consider the IList<T> interface.","['example', 'rule', 'apply', 'consider', 'ilist', 'interface']"
956,"The parameter type T of Insert must be valid contravariantly, i.e. the type parameter T must not be tagged out. Similarly, the result type IEnumerator<T> of GetEnumerator must be valid covariantly, i.e. since IEnumerator is a covariant interface the type T must be valid covariantly, i.e. the type parameter T must not be tagged in. This shows that the interface IList is not allowed to be marked either co- or contravariant.","['parameter', 'type', 'insert', 'valid', 'contravariantly', 'i.e.', 'type', 'parameter', 'tag', 'similarly', 'result', 'type', 'ienumerator', 'getenumerator', 'valid', 'covariantly', 'i.e.', 'ienumerator', 'covariant', 'interface', 'type', 'valid', 'covariantly', 'i.e.', 'type', 'parameter', 'tag', 'show', 'interface', 'ilist', 'allow', 'mark', 'co-', 'contravariant']"
957,"In the common case of a generic data structure such as IList, these restrictions mean that an out parameter can only be used for methods getting data out of the structure, and an in parameter can only be used for methods putting data into the structure, hence the choice of keywords.","['common', 'case', 'generic', 'data', 'structure', 'ilist', 'restriction', 'mean', 'parameter', 'method', 'get', 'datum', 'structure', 'parameter', 'method', 'put', 'datum', 'structure', 'choice', 'keyword']"
958,"C# allows variance annotations on the parameters of interfaces, but not the parameters of classes. Because fields in C# classes are always mutable, variantly parameterized classes in C# would not be very useful. But languages which emphasize immutable data can make good use of covariant data types. For example, in all of Scala, Kotlin and OCaml the immutable list type is covariant: ListCat is a subtype of ListAnimal.","['allow', 'variance', 'annotation', 'parameter', 'interface', 'parameter', 'class', 'field', 'class', 'mutable', 'variantly', 'parameterized', 'class', 'useful', 'language', 'emphasize', 'immutable', 'datum', 'good', 'use', 'covariant', 'datum', 'type', 'example', 'scala', 'kotlin', 'ocaml', 'immutable', 'list', 'type', 'covariant', 'listcat', 'subtype', 'listanimal']"
959,"Scala's rules for checking variance annotations are essentially the same as C#'s. However, there are some idioms that apply to immutable datastructures in particular. They are illustrated by the following excerpt from the definition of the ListA class.","['scala', 'rule', 'check', 'variance', 'annotation', 'essentially', 'idiom', 'apply', 'immutable', 'datastructure', 'particular', 'illustrate', 'follow', 'excerpt', 'definition', 'lista', 'class']"
960,"First, class members that have a variant type must be immutable. Here, head has the type A, which was declared covariant +, and indeed head was declared as a method def. Trying to declare it as a mutable field var would be rejected as type error.","['class', 'member', 'variant', 'type', 'immutable', 'head', 'type', 'declare', 'covariant', 'head', 'declare', 'method', 'def', 'try', 'declare', 'mutable', 'field', 'var', 'reject', 'type', 'error']"
961,"Second, even if a data structure is immutable, it will often have methods where the parameter type occurs contravariantly. For example, consider the method :: which adds an element to the front of a list. The implementation works by creating a new object of the similarly named class ::, the class of nonempty lists. The most obvious type to give it would be","['second', 'data', 'structure', 'immutable', 'method', 'parameter', 'type', 'occur', 'contravariantly', 'example', 'consider', 'method', 'add', 'element', 'list', 'implementation', 'work', 'create', 'new', 'object', 'similarly', 'name', 'class', 'class', 'nonempty', 'list', 'obvious', 'type']"
962,"However, this would be a type error, because the covariant parameter A appears in a contravariant position as a function parameter. But there is a trick to get around this problem. We give :: a more general type, which allows adding an element of any type B as long as B is a supertype of A. Note that this relies on List being covariant, since this has type ListA and we treat it as having type ListB. At first glance it may not be obvious that the generalized type is sound, but if the programmer starts out with the simpler type declaration, the type errors will point out the place that needs to be generalized.","['type', 'error', 'covariant', 'parameter', 'appear', 'contravariant', 'position', 'function', 'parameter', 'trick', 'problem', 'general', 'type', 'allow', 'add', 'element', 'type', 'long', 'supertype', 'note', 'rely', 'list', 'covariant', 'type', 'lista', 'treat', 'have', 'type', 'listb.', 'glance', 'obvious', 'generalize', 'type', 'sound', 'programmer', 'start', 'simple', 'type', 'declaration', 'type', 'error', 'point', 'place', 'need', 'generalize']"
963,"It is possible to design a type system where the compiler automatically infers the best possible variance annotations for all datatype parameters.14 However, the analysis can get complex for several reasons. First, the analysis is nonlocal since the variance of an interface I depends on the variance of all interfaces that I mentions. Second, in order to get unique best solutions the type system must allow bivariant parameters which are simultaneously co- and contravariant. And finally, the variance of type parameters should arguably be a deliberate choice by the designer of an interface, not something that just happens.","['possible', 'design', 'type', 'system', 'compiler', 'automatically', 'infer', 'well', 'possible', 'variance', 'annotation', 'datatype', 'parameters', 'analysis', 'complex', 'reason', 'analysis', 'nonlocal', 'variance', 'interface', 'depend', 'variance', 'interface', 'mention', 'second', 'order', 'unique', 'good', 'solution', 'type', 'system', 'allow', 'bivariant', 'parameter', 'simultaneously', 'co-', 'contravariant', 'finally', 'variance', 'type', 'parameter', 'arguably', 'deliberate', 'choice', 'designer', 'interface', 'happen']"
964,"For these reasons15 most languages do very little variance inference. C# and Scala do not infer any variance annotations at all. OCaml can infer the variance of parameterized concrete datatypes, but the programmer must explicitly specify the variance of abstract types interfaces.","['reasons15', 'language', 'little', 'variance', 'inference', 'scala', 'infer', 'variance', 'annotation', 'ocaml', 'infer', 'variance', 'parameterized', 'concrete', 'datatype', 'programmer', 'explicitly', 'specify', 'variance', 'abstract', 'type', 'interface']"
965,"For example, consider an OCaml datatype T which wraps a function","['example', 'consider', 'ocaml', 'datatype', 'wrap', 'function']"
966,"The compiler will automatically infer that T is contravariant in the first parameter, and covariant in the second. The programmer can also provide explicit annotations, which the compiler will check are satisfied. Thus the following declaration is equivalent to the previous one:","['compiler', 'automatically', 'infer', 'contravariant', 'parameter', 'covariant', 'second', 'programmer', 'provide', 'explicit', 'annotation', 'compiler', 'check', 'satisfied', 'follow', 'declaration', 'equivalent', 'previous']"
967,"Explicit annotations in OCaml become useful when specifying interfaces. For example, the standard library interface Map.S for association tables include an annotation saying that the map type constructor is covariant in the result type.","['explicit', 'annotation', 'ocaml', 'useful', 'specify', 'interface', 'example', 'standard', 'library', 'interface', 'map', 'association', 'table', 'include', 'annotation', 'say', 'map', 'type', 'constructor', 'covariant', 'result', 'type']"
968,This ensures that e.g. cat IntMap.t is a subtype of animal IntMap.t.,"['ensure', 'e.g.', 'cat', 'intmap.t', 'subtype', 'animal', 'intmap.t']"
969,"One drawback of the declaration-site approach is that many interface types must be made invariant. For example, we saw above that IList needed to be invariant, because it contained both Insert and GetEnumerator. In order to expose more variance, the API designer could provide additional interfaces which provide subsets of the available methods e.g. an ""insert-only list"" which only provides Insert. However this quickly becomes unwieldy.","['drawback', 'declaration', 'site', 'approach', 'interface', 'type', 'invariant', 'example', 'see', 'ilist', 'need', 'invariant', 'contain', 'insert', 'getenumerator', 'order', 'expose', 'variance', 'api', 'designer', 'provide', 'additional', 'interface', 'provide', 'subset', 'available', 'method', 'e.g.', 'insert', 'list', 'provide', 'insert', 'quickly', 'unwieldy']"
970,"Use-site variance means the desired variance is indicated with an annotation at the specific site in the code where the type will be used. This gives users of a class more opportunities for subtyping without requiring the designer of the class to define multiple interfaces with different variance. Instead, at the point a generic type is instantiated to an actual parameterized type, the programmer can indicate that only a subset of its methods will be used. In effect, each definition of a generic class also makes available interfaces for the covariant and contravariant parts of that class.","['use', 'site', 'variance', 'mean', 'desire', 'variance', 'indicate', 'annotation', 'specific', 'site', 'code', 'type', 'give', 'user', 'class', 'opportunity', 'subtype', 'require', 'designer', 'class', 'define', 'multiple', 'interface', 'different', 'variance', 'instead', 'point', 'generic', 'type', 'instantiate', 'actual', 'parameterized', 'type', 'programmer', 'indicate', 'subset', 'method', 'effect', 'definition', 'generic', 'class', 'make', 'available', 'interface', 'covariant', 'contravariant', 'part', 'class']"
971,"Java provides use-site variance annotations through wildcards, a restricted form of bounded existential types. A parameterized type can be instantiated by a wildcard ? together with an upper or lower bound, e.g. List<? extends Animal> or List<? super Animal>. An unbounded wildcard like List<?> is equivalent to List<? extends Object>. Such a type represents List<X> for some unknown type X which satisfies the bound. For example, if l has type List<? extends Animal>, then the type checker will accept","['java', 'provide', 'use', 'site', 'variance', 'annotation', 'wildcard', 'restricted', 'form', 'bound', 'existential', 'type', 'parameterized', 'type', 'instantiate', 'wildcard', 'upper', 'lower', 'bind', 'e.g.', 'list', 'extend', 'animal', 'list', 'super', 'animal', 'unbounded', 'wildcard', 'like', 'list', 'equivalent', 'list', 'extend', 'object', 'type', 'represent', 'list', 'unknown', 'type', 'satisfy', 'bound', 'example', 'type', 'list', 'extend', 'animal', 'type', 'checker', 'accept']"
972,"because the type X is known to be a subtype of Animal, but","['type', 'know', 'subtype', 'animal']"
973,"will be rejected as a type error since an Animal is not necessarily an X. In general, given some interface I<T>, a reference to an I<? extends T> forbids using methods from the interface where T occurs contravariantly in the type of the method. Conversely, if l had type List<? super Animal> one could call l.add but not l.get.","['reject', 'type', 'error', 'animal', 'necessarily', 'general', 'give', 'interface', 'reference', 'extend', 'forbid', 'method', 'interface', 'occur', 'contravariantly', 'type', 'method', 'conversely', 'type', 'list', 'super', 'animal', 'l.add', 'l.get']"
974,"While non-wildcard parameterized types in Java are invariant e.g. there is no subtyping relationship between List<Cat> and List<Animal>, wildcard types can be made more specific by specifying a tighter bound. For example, List<? extends Cat> is a subtype of List<? extends Animal>. This shows that wildcard types are covariant in their upper bounds and also contravariant in their lower bounds. In total, given a wildcard type like C<? extends T>, there are three ways to form a subtype: by specializing the class C, by specifying a tighter bound T, or by replacing the wildcard ? with a specific type see figure.","['non', 'wildcard', 'parameterized', 'type', 'java', 'invariant', 'e.g.', 'subtype', 'relationship', 'list', 'cat', 'list', 'animal', 'wildcard', 'type', 'specific', 'specify', 'tighter', 'bound', 'example', 'list', 'extend', 'cat', 'subtype', 'list', 'extend', 'animal', 'show', 'wildcard', 'type', 'covariant', 'upper', 'bound', 'contravariant', 'low', 'bound', 'total', 'give', 'wildcard', 'type', 'like', 'extend', 'way', 'form', 'subtype', 'specialize', 'class', 'specify', 'tighter', 'bind', 'replace', 'wildcard', 'specific', 'type', 'figure']"
975,"By applying two of the above three forms of subtyping, it becomes possible to, for example, pass an argument of type List<Cat> to a method expecting a List<? extends Animal>. This is the kind of expressiveness that results from covariant interface types. The type List<? extends Animal> acts as an interface type containing only the covariant methods of List<T>, but the implementer of List<T> did not have to define it ahead of time.","['apply', 'form', 'subtype', 'possible', 'example', 'pass', 'argument', 'type', 'list', 'cat', 'method', 'expect', 'list', 'extend', 'animal', 'kind', 'expressiveness', 'result', 'covariant', 'interface', 'type', 'type', 'list', 'extend', 'animal', 'act', 'interface', 'type', 'contain', 'covariant', 'method', 'list', 'implementer', 'list', 'define', 'ahead', 'time']"
976,"In the common case of a generic data structure IList, covariant parameters are used for methods getting data out of the structure, and contravariant parameters for methods putting data into the structure. The mnemonic for Producer Extends, Consumer Super PECS, from the book Effective Java by Joshua Bloch gives an easy way to remember when to use covariance and contravariance.","['common', 'case', 'generic', 'data', 'structure', 'ilist', 'covariant', 'parameter', 'method', 'get', 'datum', 'structure', 'contravariant', 'parameter', 'method', 'put', 'datum', 'structure', 'mnemonic', 'producer', 'extends', 'consumer', 'super', 'pecs', 'book', 'effective', 'java', 'joshua', 'bloch', 'give', 'easy', 'way', 'remember', 'use', 'covariance', 'contravariance']"
977,"Wildcards are flexible, but there is a drawback. While use-site variance means that API designers need not consider variance of type parameters to interfaces, they must often instead use more complicated method signatures. A common example involves the Comparable interface. Suppose we want to write a function that finds the biggest element in a collection. The elements need to implement the compareTo method, so a first try might be","['wildcards', 'flexible', 'drawback', 'use', 'site', 'variance', 'mean', 'api', 'designer', 'need', 'consider', 'variance', 'type', 'parameter', 'interface', 'instead', 'use', 'complicated', 'method', 'signature', 'common', 'example', 'involve', 'comparable', 'interface', 'suppose', 'want', 'write', 'function', 'find', 'big', 'element', 'collection', 'element', 'need', 'implement', 'compareto', 'method', 'try']"
978,"However, this type is not general enough—one can find the max of a Collection<Calendar>, but not a Collection<GregorianCalendar>. The problem is that GregorianCalendar does not implement Comparable<GregorianCalendar>, but instead the better interface Comparable<Calendar>. In Java, unlike in C#, Comparable<Calendar> is not considered a subtype of Comparable<GregorianCalendar>. Instead the type of max has to be modified:","['type', 'general', 'find', 'max', 'collection', 'calendar', 'collection', 'gregoriancalendar', 'problem', 'gregoriancalendar', 'implement', 'comparable', 'gregoriancalendar', 'instead', 'well', 'interface', 'comparable', 'calendar', 'java', 'unlike', 'comparable', 'calendar', 'consider', 'subtype', 'comparable', 'gregoriancalendar', 'instead', 'type', 'max', 'modify']"
979,"The bounded wildcard ? super T conveys the information that max calls only contravariant methods from the Comparable interface. This particular example is frustrating because all the methods in Comparable are contravariant, so that condition is trivially true. A declaration-site system could handle this example with less clutter by annotating only the definition of Comparable.","['bound', 'wildcard', 'super', 'convey', 'information', 'max', 'call', 'contravariant', 'method', 'comparable', 'interface', 'particular', 'example', 'frustrating', 'method', 'comparable', 'contravariant', 'condition', 'trivially', 'true', 'declaration', 'site', 'system', 'handle', 'example', 'clutter', 'annotate', 'definition', 'comparable']"
980,"Use-site variance annotations provide additional flexibility, allowing more programs to type check. However, they have been criticized for the complexity they add to the language, leading to complicated type signatures and error messages.","['use', 'site', 'variance', 'annotation', 'provide', 'additional', 'flexibility', 'allow', 'program', 'type', 'check', 'criticize', 'complexity', 'add', 'language', 'lead', 'complicated', 'type', 'signature', 'error', 'message']"
981,One way to assess whether the extra flexibility is useful is to see if it is used in existing programs. A survey of a large set of Java libraries14 found that 39% of wildcard annotations could have been directly replaced by declaration-site annotations. Thus the remaining 61% is an indication of places where Java benefits from having the use-site system available.,"['way', 'assess', 'extra', 'flexibility', 'useful', 'exist', 'program', 'survey', 'large', 'set', 'java', 'libraries14', 'find', 'wildcard', 'annotation', 'directly', 'replace', 'declaration', 'site', 'annotation', 'remain', 'indication', 'place', 'java', 'benefit', 'have', 'use', 'site', 'system', 'available']"
982,"In a declaration-site language, libraries must either expose less variance, or define more interfaces. For example, the Scala Collections library defines three separate interfaces for classes which employ covariance: a covariant base interface containing common methods, an invariant mutable version which adds side-effecting methods, and a covariant immutable version which may specialize the inherited implementations to exploit structural sharing.16 This design works well with declaration-site annotations, but the large number of interfaces carry a complexity cost for clients of the library. And modifying the library interface may not be an option—in particular, one goal when adding generics to Java was to maintain binary backwards compatibility.","['declaration', 'site', 'language', 'library', 'expose', 'variance', 'define', 'interface', 'example', 'scala', 'collections', 'library', 'define', 'separate', 'interface', 'class', 'employ', 'covariance', 'covariant', 'base', 'interface', 'contain', 'common', 'method', 'invariant', 'mutable', 'version', 'add', 'effect', 'method', 'covariant', 'immutable', 'version', 'specialize', 'inherit', 'implementation', 'exploit', 'structural', 'sharing', 'design', 'work', 'declaration', 'site', 'annotation', 'large', 'number', 'interface', 'carry', 'complexity', 'cost', 'client', 'library', 'modify', 'library', 'interface', 'option', 'particular', 'goal', 'add', 'generic', 'java', 'maintain', 'binary', 'backwards', 'compatibility']"
983,"On the other hand, Java wildcards are themselves complex. In a conference presentation17 Joshua Bloch criticized them as being too hard to understand and use, stating that when adding support for closures ""we simply cannot afford another wildcards"". Early versions of Scala used use-site variance annotations but programmers found them difficult to use in practice, while declaration-site annotations were found to be very helpful when designing classes.18 Later versions of Scala added Java-style existential types and wildcards; however, according to Martin Odersky, if there were no need for interoperability with Java then these would probably not have been included.19","['hand', 'java', 'wildcard', 'complex', 'conference', 'presentation17', 'joshua', 'bloch', 'criticize', 'hard', 'understand', 'use', 'state', 'add', 'support', 'closure', 'simply', 'afford', 'wildcard', 'early', 'version', 'scala', 'use', 'site', 'variance', 'annotation', 'programmer', 'find', 'difficult', 'use', 'practice', 'declaration', 'site', 'annotation', 'find', 'helpful', 'design', 'classes', 'late', 'version', 'scala', 'add', 'java', 'style', 'existential', 'type', 'wildcard', 'accord', 'martin', 'odersky', 'need', 'interoperability', 'java', 'probably', 'included']"
984,"Ross Tate argues20 that part of the complexity of Java wildcards is due to the decision to encode use-site variance using a form of existential types. The original proposals2122 used special-purpose syntax for variance annotations, writing List<+Animal> instead of Java's more verbose List<? extends Animal>.","['ross', 'tate', 'argues20', 'complexity', 'java', 'wildcard', 'decision', 'encode', 'use', 'site', 'variance', 'form', 'existential', 'type', 'original', 'proposals2122', 'special', 'purpose', 'syntax', 'variance', 'annotation', 'write', 'list<+animal', 'instead', 'java', 'verbose', 'list', 'extend', 'animal']"
985,"Since wildcards are a form of existential types they can be used for more things than just variance. A type like List<?> ""a list of unknown type""23 lets objects be passed to methods or stored in fields without exactly specifying their type parameters. This is particularly valuable for classes such as Class where most of the methods do not mention the type parameter.","['wildcard', 'form', 'existential', 'type', 'thing', 'variance', 'type', 'like', 'list', 'list', 'unknown', 'type', 'let', 'object', 'pass', 'method', 'store', 'field', 'exactly', 'specify', 'type', 'parameter', 'particularly', 'valuable', 'class', 'class', 'method', 'mention', 'type', 'parameter']"
986,"However, type inference for existential types is a difficult problem. For the compiler implementer, Java wildcards raise issues with type checker termination, type argument inference, and ambiguous programs.24 In general it is undecidable whether a Java program using generics is well-typed or not,25 so any type checker will have to go into an infinite loop or time out for some programs. For the programmer, it leads to complicated type error messages. Java type checks wildcard types by replacing the wildcards with fresh type variables so-called capture conversion. This can make error messages harder to read, because they refer to type variables that the programmer did not directly write. For example, trying to add a Cat to a List<? extends Animal> will give an error like","['type', 'inference', 'existential', 'type', 'difficult', 'problem', 'compiler', 'implementer', 'java', 'wildcard', 'raise', 'issue', 'type', 'checker', 'termination', 'type', 'argument', 'inference', 'ambiguous', 'programs', 'general', 'undecidable', 'java', 'program', 'generic', 'typed', 'not', 'type', 'checker', 'infinite', 'loop', 'time', 'program', 'programmer', 'lead', 'complicated', 'type', 'error', 'message', 'java', 'type', 'check', 'wildcard', 'type', 'replace', 'wildcard', 'fresh', 'type', 'variable', 'call', 'capture', 'conversion', 'error', 'message', 'hard', 'read', 'refer', 'type', 'variable', 'programmer', 'directly', 'write', 'example', 'try', 'add', 'cat', 'list', 'extend', 'animal', 'error', 'like']"
987,"Since both declaration-site and use-site annotations can be useful, some type systems provide both.1420","['declaration', 'site', 'use', 'site', 'annotation', 'useful', 'type', 'system', 'provide', 'both']"
988,"These terms come from the notion of covariant and contravariant functors in category theory. Consider the category C \displaystyle C whose objects are types and whose morphisms represent the subtype relationship ≤. This is an example of how any partially ordered set can be considered as a category. Then for example the function type constructor takes two types p and r and creates a new type p → r; so it takes objects in C 2 \displaystyle C^2 to objects in C \displaystyle C . By the subtyping rule for function types this operation reverses ≤ for the first parameter and preserves it for the second, so it is a contravariant functor in the first parameter and a covariant functor in the second.","['term', 'come', 'notion', 'covariant', 'contravariant', 'functor', 'category', 'theory', 'consider', 'category', 'object', 'type', 'morphism', 'represent', 'subtype', 'relationship', 'example', 'partially', 'order', 'set', 'consider', 'category', 'example', 'function', 'type', 'constructor', 'take', 'type', 'create', 'new', 'type', 'take', 'object', 'object', 'subtyping', 'rule', 'function', 'type', 'operation', 'reverse', 'parameter', 'preserve', 'second', 'contravariant', 'functor', 'parameter', 'covariant', 'functor', 'second']"
989,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
990,"Responsibility-driven design is a design technique in object-oriented programming, which improves encapsulation by using the client–server model. It focuses on the contract by considering the actions that the object is responsible for and the information that the object shares. It was proposed by Rebecca Wirfs-Brock and Brian Wilkerson.","['responsibility', 'drive', 'design', 'design', 'technique', 'object', 'orient', 'programming', 'improve', 'encapsulation', 'client', 'server', 'model', 'focus', 'contract', 'consider', 'action', 'object', 'responsible', 'information', 'object', 'share', 'propose', 'rebecca', 'wirfs', 'brock', 'brian', 'wilkerson']"
991,"Responsibility-driven design is in direct contrast with data-driven design, which promotes defining the behavior of a class along with the data that it holds. Data-driven design is not the same as data-driven programming, which is concerned with using data to determine the control flow, not class design.","['responsibility', 'drive', 'design', 'direct', 'contrast', 'data', 'drive', 'design', 'promote', 'define', 'behavior', 'class', 'datum', 'hold', 'data', 'drive', 'design', 'data', 'drive', 'programming', 'concern', 'datum', 'determine', 'control', 'flow', 'class', 'design']"
992,"In the client–server model they refer to, both the client and the server are classes or instances of classes. At any particular time, either the client or the server represents an object. Both the parties commit to a contract and exchange information by adhering to it. The client can only make the requests specified in the contract and the server must answer these requests.1 Thus, responsibility-driven design tries to avoid dealing with details, such as the way in which requests are carried out, by instead only specifying the intent of a certain request. The benefit is increased encapsulation, since the specification of the exact way in which a request is carried out is private to the server.","['client', 'server', 'model', 'refer', 'client', 'server', 'class', 'instance', 'class', 'particular', 'time', 'client', 'server', 'represent', 'object', 'party', 'commit', 'contract', 'exchange', 'information', 'adhere', 'client', 'request', 'specify', 'contract', 'server', 'answer', 'requests', 'responsibility', 'drive', 'design', 'try', 'avoid', 'deal', 'detail', 'way', 'request', 'carry', 'instead', 'specify', 'intent', 'certain', 'request', 'benefit', 'increase', 'encapsulation', 'specification', 'exact', 'way', 'request', 'carry', 'private', 'server']"
993,"To further the encapsulation of the server, Wirfs-Brock and Wilkerson call for language features that limit outside influence to the behavior of a class. They demand that the visibility of members and functions should be finely grained, such as in Eiffel programming language. Even finer control of the visibility of even classes is available in the Newspeak programming language.","['encapsulation', 'server', 'wirfs', 'brock', 'wilkerson', 'language', 'feature', 'limit', 'outside', 'influence', 'behavior', 'class', 'demand', 'visibility', 'member', 'function', 'finely', 'grain', 'eiffel', 'programming', 'language', 'finer', 'control', 'visibility', 'class', 'available', 'newspeak', 'programming', 'language']"
994,"Responsibility-driven design focuses on the objects as behavioral abstractions which are characterized by their responsibilities. The CRC-card modelling technique is used to generate these behavioral abstractions. The rest of the object structure including data attributes are assigned later, as and when required.2 This makes the design follow type hierarchy for inheritance which improves encapsulation and makes it easier to identify abstract classes. It can also group the classes together based on their clients which is considered a unique ability.","['responsibility', 'drive', 'design', 'focus', 'object', 'behavioral', 'abstraction', 'characterize', 'responsibility', 'crc', 'card', 'modelling', 'technique', 'generate', 'behavioral', 'abstraction', 'rest', 'object', 'structure', 'include', 'data', 'attribute', 'assign', 'later', 'required', 'make', 'design', 'follow', 'type', 'hierarchy', 'inheritance', 'improve', 'encapsulation', 'make', 'easy', 'identify', 'abstract', 'class', 'group', 'class', 'base', 'client', 'consider', 'unique', 'ability']"
995,"A good object-oriented design involves an early focus on behaviors to realize the capabilities meeting the stated requirements and a late binding of implementation details to the requirements. This approach especially helps to decentralize control and distribute system behavior which can help manage the complexities of high-functionality large or distributed systems. Similarly, it can help to design and maintain explanation facilities for cognitive models, intelligent agents, and other knowledge-based systems.3","['good', 'object', 'orient', 'design', 'involve', 'early', 'focus', 'behavior', 'realize', 'capability', 'meet', 'state', 'requirement', 'late', 'binding', 'implementation', 'detail', 'requirement', 'approach', 'especially', 'help', 'decentralize', 'control', 'distribute', 'system', 'behavior', 'help', 'manage', 'complexity', 'high', 'functionality', 'large', 'distribute', 'system', 'similarly', 'help', 'design', 'maintain', 'explanation', 'facility', 'cognitive', 'model', 'intelligent', 'agent', 'knowledge', 'base', 'systems']"
996,"In their book Object Design: Roles, Responsibilities and Collaborations,4 the authors describe the following building blocks that make up responsibility-driven design.","['book', 'object', 'design', 'role', 'responsibility', 'collaborations', 'author', 'describe', 'follow', 'building', 'block', 'responsibility', 'drive', 'design']"
997,Objects are described as things that have machine-like behaviors that can be plugged together to work in concert. These objects play well-defined roles and encapsulate scripted responses and information.5,"['object', 'describe', 'thing', 'machine', 'like', 'behavior', 'plug', 'work', 'concert', 'object', 'play', 'define', 'role', 'encapsulate', 'script', 'response', 'information']"
998,"Object role refers to an exterior view of what general service is offered by the object. It is a set of related responsibilities.5 It can be implemented as a class or an interface. Interface, however, is the preferred implementation as it increases flexibility by hiding the concrete class which ultimately does the work.12","['object', 'role', 'refer', 'exterior', 'view', 'general', 'service', 'offer', 'object', 'set', 'relate', 'responsibilities', 'implement', 'class', 'interface', 'interface', 'preferred', 'implementation', 'increase', 'flexibility', 'hide', 'concrete', 'class', 'ultimately', 'work']"
999,Role Stereotypes: Role stereotypes are simplified roles that come with predefined responsibilities.13 There are several categories.,"['role', 'stereotype', 'role', 'stereotype', 'simplify', 'role', 'come', 'predefined', 'responsibilities', 'category']"
1000,An important part in the responsibility-driven design process is the distribution of control responsibilities that results in developing a control style. A control style is concerned about the control flow between subsystems.,"['important', 'responsibility', 'drive', 'design', 'process', 'distribution', 'control', 'responsibility', 'result', 'develop', 'control', 'style', 'control', 'style', 'concern', 'control', 'flow', 'subsystem']"
1001,This control style inflicts a procedural paradigm on the structure of the application and places major-decision making responsibilities in only a few objects or a single object.,"['control', 'style', 'inflict', 'procedural', 'paradigm', 'structure', 'application', 'place', 'major', 'decision', 'make', 'responsibility', 'object', 'single', 'object']"
1002,"When decisions to be made are few, simple, and related to a single task.","['decision', 'simple', 'relate', 'single', 'task']"
1003,"A delegated control style lies in between a centralized and dispersed control style. It passes some of the decision making and much of the action to objects surrounding a control center. Each neighboring object has a significant role to play. It can also be called as event driven model, where the control is delegated to the object requesting it to process the event.","['delegate', 'control', 'style', 'lie', 'centralized', 'disperse', 'control', 'style', 'pass', 'decision', 'making', 'action', 'object', 'surround', 'control', 'center', 'neighboring', 'object', 'significant', 'role', 'play', 'call', 'event', 'drive', 'model', 'control', 'delegate', 'object', 'request', 'process', 'event']"
1004,When one wants to delegate work to objects that are more specialized.,"['want', 'delegate', 'work', 'object', 'specialized']"
1005,"This control style is a variation of the centralized control style wherein control is factored among a group of objects whose actions are coordinated.19 The main difference between a clustered and delegated control style is that in a clustered control style, the decision making objects are located within a control center whereas in a delegated control style they are mostly outside.20","['control', 'style', 'variation', 'centralized', 'control', 'style', 'control', 'factor', 'group', 'object', 'action', 'coordinated', 'main', 'difference', 'cluster', 'delegate', 'control', 'style', 'cluster', 'control', 'style', 'decision', 'make', 'object', 'locate', 'control', 'center', 'delegate', 'control', 'style', 'outside']"
1006,"A dispersed control style does not contain any control centers. The logic is spread across the entire population of objects, keeping each object small and building in as few dependencies among them as possible.21","['dispersed', 'control', 'style', 'contain', 'control', 'center', 'logic', 'spread', 'entire', 'population', 'object', 'keep', 'object', 'small', 'build', 'dependency', 'possible']"
1007,"After extensive results of experiments conducted, only the senior management has the necessary skills to make use of delegated control style and centralized control style benefits programmers. There is no context mentioned about the mid-level employees.17","['extensive', 'result', 'experiment', 'conduct', 'senior', 'management', 'necessary', 'skill', 'use', 'delegate', 'control', 'style', 'centralized', 'control', 'style', 'benefit', 'programmer', 'context', 'mention', 'mid', 'level', 'employees']"
1008,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1009,"In computer science, information hiding is the principle of segregation of the design decisions in a computer program that are most likely to change, thus protecting other parts of the program from extensive modification if the design decision is changed. The protection involves providing a stable interface which protects the remainder of the program from the implementation whose details are likely to change. Written in another way, information hiding is the ability to prevent certain aspects of a class or software component from being accessible to its clients, using either programming language features like private variables or an explicit exporting policy.","['computer', 'science', 'information', 'hiding', 'principle', 'segregation', 'design', 'decision', 'computer', 'program', 'likely', 'change', 'protect', 'part', 'program', 'extensive', 'modification', 'design', 'decision', 'change', 'protection', 'involve', 'provide', 'stable', 'interface', 'protect', 'remainder', 'program', 'implementation', 'detail', 'likely', 'change', 'write', 'way', 'information', 'hiding', 'ability', 'prevent', 'certain', 'aspect', 'class', 'software', 'component', 'accessible', 'client', 'programming', 'language', 'feature', 'like', 'private', 'variable', 'explicit', 'export', 'policy']"
1010,"The term encapsulation is often used interchangeably with information hiding. Not all agree on the distinctions between the two, though; one may think of information hiding as being the principle and encapsulation being the technique. A software module hides information by encapsulating the information into a module or other construct which presents an interface.1","['term', 'encapsulation', 'interchangeably', 'information', 'hiding', 'agree', 'distinction', 'think', 'information', 'hide', 'principle', 'encapsulation', 'technique', 'software', 'module', 'hide', 'information', 'encapsulate', 'information', 'module', 'construct', 'present', 'interface']"
1011,"A common use of information hiding is to hide the physical storage layout for data so that if it is changed, the change is restricted to a small subset of the total program. For example, if a three-dimensional point x, y, z is represented in a program with three floating-point scalar variables and later, the representation is changed to a single array variable of size three, a module designed with information hiding in mind would protect the remainder of the program from such a change.","['common', 'use', 'information', 'hiding', 'hide', 'physical', 'storage', 'layout', 'datum', 'change', 'change', 'restrict', 'small', 'subset', 'total', 'program', 'example', 'dimensional', 'point', 'represent', 'program', 'float', 'point', 'scalar', 'variable', 'later', 'representation', 'change', 'single', 'array', 'variable', 'size', 'module', 'design', 'information', 'hiding', 'mind', 'protect', 'remainder', 'program', 'change']"
1012,"In object-oriented programming, information hiding by way of nesting of types reduces software development risk by shifting the code's dependency on an uncertain implementation design decision onto a well-defined interface. Clients of the interface perform operations purely through the interface, so, if the implementation changes, the clients do not have to change.","['object', 'orient', 'programming', 'information', 'hiding', 'way', 'nesting', 'type', 'reduce', 'software', 'development', 'risk', 'shift', 'code', 'dependency', 'uncertain', 'implementation', 'design', 'decision', 'define', 'interface', 'client', 'interface', 'perform', 'operation', 'purely', 'interface', 'implementation', 'change', 'client', 'change']"
1013,"In his book on object-oriented design, Grady Booch defined encapsulation as ""the process of compartmentalizing the elements of an abstraction that constitute its structure and behavior; encapsulation serves to separate the contractual interface of an abstraction and its implementation.""2","['book', 'object', 'orient', 'design', 'grady', 'booch', 'define', 'encapsulation', 'process', 'compartmentalize', 'element', 'abstraction', 'constitute', 'structure', 'behavior', 'encapsulation', 'serve', 'separate', 'contractual', 'interface', 'abstraction', 'implementation']"
1014,"The purpose is to achieve the potential for change: the internal mechanisms of the component can be improved without impact on other components, or the component can be replaced with a different one that supports the same public interface. Encapsulation also protects the integrity of the component, by preventing users from setting the internal data of the component into an invalid or inconsistent state. Another benefit of encapsulation is that it reduces system complexity and thus increases robustness, by limiting the interdependencies between software components.2","['purpose', 'achieve', 'potential', 'change', 'internal', 'mechanism', 'component', 'improve', 'impact', 'component', 'component', 'replace', 'different', 'support', 'public', 'interface', 'encapsulation', 'protect', 'integrity', 'component', 'prevent', 'user', 'set', 'internal', 'datum', 'component', 'invalid', 'inconsistent', 'state', 'benefit', 'encapsulation', 'reduce', 'system', 'complexity', 'increase', 'robustness', 'limit', 'interdependency', 'software', 'components']"
1015,"In this sense, the idea of encapsulation is more general than how it is applied in object-oriented programming. For example, a relational database is encapsulated in the sense that its only public interface is a query language such as SQL, which hides all the internal machinery and data structures of the database management system. As such, encapsulation is a core principle of good software architecture, at every level of granularity.","['sense', 'idea', 'encapsulation', 'general', 'apply', 'object', 'orient', 'programming', 'example', 'relational', 'database', 'encapsulate', 'sense', 'public', 'interface', 'query', 'language', 'sql', 'hide', 'internal', 'machinery', 'datum', 'structure', 'database', 'management', 'system', 'encapsulation', 'core', 'principle', 'good', 'software', 'architecture', 'level', 'granularity']"
1016,"Encapsulating software behind an interface allows the construction of objects that mimic the behavior and interactions of objects in the real world. For example, a simple digital alarm clock is a real-world object that a layperson can use and understand. They can understand what the alarm clock does, and how to use it through the provided interface buttons and screen, without having to understand every part inside of the clock. Similarly, if the clock were replaced by a different model, the layperson could continue to use it in the same way, provided that the interface works the same.","['encapsulate', 'software', 'interface', 'allow', 'construction', 'object', 'mimic', 'behavior', 'interaction', 'object', 'real', 'world', 'example', 'simple', 'digital', 'alarm', 'clock', 'real', 'world', 'object', 'layperson', 'use', 'understand', 'understand', 'alarm', 'clock', 'use', 'provide', 'interface', 'button', 'screen', 'have', 'understand', 'inside', 'clock', 'similarly', 'clock', 'replace', 'different', 'model', 'layperson', 'continue', 'use', 'way', 'provide', 'interface', 'work']"
1017,"In the more concrete setting of an object-oriented programming language, the notion is used to mean either an information hiding mechanism, a bundling mechanism, or the combination of the two. See Encapsulation object-oriented programming for details.","['concrete', 'setting', 'object', 'orient', 'programming', 'language', 'notion', 'mean', 'information', 'hiding', 'mechanism', 'bundling', 'mechanism', 'combination', 'encapsulation', 'object', 'orient', 'programming', 'detail']"
1018,"The concept of information hiding was first described by David Parnas in 1972.34 Before then, modularity was discussed by Richard Gauthier and Stephen Pont in their 1970 book Designing Systems Programs although modular programming itself had been used at many commercial sites for many years previously – especially in I/O sub-systems and software libraries – without acquiring the 'information hiding' tag – but for similar reasons, as well as the more obvious code reuse reason.clarification needed","['concept', 'information', 'hiding', 'describe', 'david', 'parnas', '1972', 'modularity', 'discuss', 'richard', 'gauthier', 'stephen', 'pont', '1970', 'book', 'designing', 'systems', 'programs', 'modular', 'programming', 'commercial', 'site', 'year', 'previously', 'especially', 'sub', 'system', 'software', 'library', 'acquire', 'information', 'hiding', 'tag', 'similar', 'reason', 'obvious', 'code', 'reuse', 'reason.clarification', 'need']"
1019,"Information hiding serves as an effective criterion for dividing any piece of equipment, software, or hardware, into modules of functionality. For instance, a car is a complex piece of equipment. In order to make the design, manufacturing, and maintenance of a car reasonable, the complex piece of equipment is divided into modules with particular interfaces hiding design decisions. By designing a car in this fashion, a car manufacturer can also offer various options while still having a vehicle that is economical to manufacture.","['information', 'hiding', 'serve', 'effective', 'criterion', 'divide', 'piece', 'equipment', 'software', 'hardware', 'module', 'functionality', 'instance', 'car', 'complex', 'piece', 'equipment', 'order', 'design', 'manufacturing', 'maintenance', 'car', 'reasonable', 'complex', 'piece', 'equipment', 'divide', 'module', 'particular', 'interface', 'hide', 'design', 'decision', 'design', 'car', 'fashion', 'car', 'manufacturer', 'offer', 'option', 'have', 'vehicle', 'economical', 'manufacture']"
1020,"For instance, a car manufacturer may have a luxury version of the car as well as a standard version. The luxury version comes with a more powerful engine than the standard version. The engineers designing the two different car engines, one for the luxury version and one for the standard version, provide the same interface for both engines. Both engines fit into the engine bay of the car which is the same between both versions. Both engines fit the same transmission, the same engine mounts, and the same controls. The differences in the engines are that the more powerful luxury version has a larger displacement with a fuel injection system that is programmed to provide the fuel-air mixture that the larger displacement engine requires.","['instance', 'car', 'manufacturer', 'luxury', 'version', 'car', 'standard', 'version', 'luxury', 'version', 'come', 'powerful', 'engine', 'standard', 'version', 'engineer', 'design', 'different', 'car', 'engine', 'luxury', 'version', 'standard', 'version', 'provide', 'interface', 'engine', 'engine', 'fit', 'engine', 'bay', 'car', 'version', 'engine', 'fit', 'transmission', 'engine', 'mount', 'control', 'difference', 'engine', 'powerful', 'luxury', 'version', 'large', 'displacement', 'fuel', 'injection', 'system', 'program', 'provide', 'fuel', 'air', 'mixture', 'large', 'displacement', 'engine', 'require']"
1021,"In addition to the more powerful engine, the luxury version may also offer other options such as a better radio with CD player, more comfortable seats, a better suspension system with wider tires, and different paint colors. With all of these changes, most of the car is the same between the standard version and the luxury version. The radio with CD player is a module that replaces the standard radio, also a module, in the luxury model. The more comfortable seats are installed into the same seat mounts as the standard types of seats. Whether the seats are leather or plastic, or offer lumbar support or not, does not matter.","['addition', 'powerful', 'engine', 'luxury', 'version', 'offer', 'option', 'well', 'radio', 'player', 'comfortable', 'seat', 'well', 'suspension', 'system', 'wide', 'tire', 'different', 'paint', 'color', 'change', 'car', 'standard', 'version', 'luxury', 'version', 'radio', 'player', 'module', 'replace', 'standard', 'radio', 'module', 'luxury', 'model', 'comfortable', 'seat', 'instal', 'seat', 'mount', 'standard', 'type', 'seat', 'seat', 'leather', 'plastic', 'offer', 'lumbar', 'support', 'matter']"
1022,The engineers design the car by dividing the task up into pieces of work that are assigned to teams. Each team then designs their component to a particular standard or interface which allows the team flexibility in the design of the component while at the same time ensuring that all of the components will fit together.,"['engineer', 'design', 'car', 'divide', 'task', 'piece', 'work', 'assign', 'team', 'team', 'design', 'component', 'particular', 'standard', 'interface', 'allow', 'team', 'flexibility', 'design', 'component', 'time', 'ensure', 'component', 'fit']"
1023,"Motor vehicle manufacturers frequently use the same core structure for several different models, in part as a cost-control measure. Such a ""platform"" also provides an example of information hiding, since the floorplan can be built without knowing whether it is to be used in a sedan or a hatchback.","['motor', 'vehicle', 'manufacturer', 'frequently', 'use', 'core', 'structure', 'different', 'model', 'cost', 'control', 'measure', 'platform', 'provide', 'example', 'information', 'hiding', 'floorplan', 'build', 'know', 'sedan', 'hatchback']"
1024,"As can be seen by this example, information hiding provides flexibility. This flexibility allows a programmer to modify the functionality of a computer program during normal evolution as the computer program is changed to better fit the needs of users. When a computer program is well designed, decomposing the source code solution into modules using the principle of information hiding, evolutionary changes are much easier because the changes typically are local rather than global changes.","['see', 'example', 'information', 'hiding', 'provide', 'flexibility', 'flexibility', 'allow', 'programmer', 'modify', 'functionality', 'computer', 'program', 'normal', 'evolution', 'computer', 'program', 'change', 'well', 'fit', 'need', 'user', 'computer', 'program', 'design', 'decompose', 'source', 'code', 'solution', 'module', 'principle', 'information', 'hiding', 'evolutionary', 'change', 'easy', 'change', 'typically', 'local', 'global', 'change']"
1025,"Cars provide another example of this in how they interface with drivers. They present a standard interface pedals, wheel, shifter, signals, gauges, etc. on which people are trained and licensed. Thus, people only have to learn to drive a car; they don't need to learn a completely different way of driving every time they drive a new model. Granted, there are manual and automatic transmissions and other such differences, but on the whole, cars maintain a unified interface.","['car', 'provide', 'example', 'interface', 'driver', 'present', 'standard', 'interface', 'pedal', 'wheel', 'shifter', 'signal', 'gauge', 'etc', 'people', 'train', 'license', 'people', 'learn', 'drive', 'car', 'need', 'learn', 'completely', 'different', 'way', 'drive', 'time', 'drive', 'new', 'model', 'grant', 'manual', 'automatic', 'transmission', 'difference', 'car', 'maintain', 'unified', 'interface']"
1026,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1027,"In computer programming languages, the term default constructor can refer to a constructor that is automatically generated by the compiler in the absence of any programmer-defined constructors e.g. in Java, and is usually a nullary constructor. In other languages e.g. in C++ it is a constructor that can be called without having to provide any arguments, irrespective of whether the constructor is auto-generated or user-defined. Note that a constructor with formal parameters can still be called without arguments if default arguments were provided in the constructor's definition.","['computer', 'programming', 'language', 'term', 'default', 'constructor', 'refer', 'constructor', 'automatically', 'generate', 'compiler', 'absence', 'programmer', 'define', 'constructor', 'e.g.', 'java', 'usually', 'nullary', 'constructor', 'language', 'e.g.', 'c++', 'constructor', 'call', 'have', 'provide', 'argument', 'irrespective', 'constructor', 'auto', 'generate', 'user', 'define', 'note', 'constructor', 'formal', 'parameter', 'call', 'argument', 'default', 'argument', 'provide', 'constructor', 'definition']"
1028,"In C++, the standard describes the default constructor for a class as a constructor that can be called with no arguments this includes a constructor whose parameters all have default arguments.1 For example:","['c++', 'standard', 'describe', 'default', 'constructor', 'class', 'constructor', 'call', 'argument', 'include', 'constructor', 'parameter', 'default', 'arguments', 'example']"
1029,"When allocating memory dynamically, the constructor may be called by adding parenthesis after the class name. In a sense, this is an explicit call to the constructor:","['allocate', 'memory', 'dynamically', 'constructor', 'call', 'add', 'parenthesis', 'class', 'sense', 'explicit', 'constructor']"
1030,"If the constructor does have one or more parameters, but they all have default values, then it is still a default constructor. Remember that each class can have at most one default constructor, either one without parameters, or one whose all parameters have default values, such as in this case:","['constructor', 'parameter', 'default', 'value', 'default', 'constructor', 'remember', 'class', 'default', 'constructor', 'parameter', 'parameter', 'default', 'value', 'case']"
1031,"In C++, default constructors are significant because they are automatically invoked in certain circumstances; and therefore, in these circumstances, it is an error for a class to not have a default constructor:","['c++', 'default', 'constructor', 'significant', 'automatically', 'invoke', 'certain', 'circumstance', 'circumstance', 'error', 'class', 'default', 'constructor']"
1032,"If a class has no explicitly defined constructors, the compiler will implicitly declare and define a default constructor for it. This implicitly defined default constructor is equivalent to an explicitly defined one with an empty body. For example:2","['class', 'explicitly', 'define', 'constructor', 'compiler', 'implicitly', 'declare', 'define', 'default', 'constructor', 'implicitly', 'define', 'default', 'constructor', 'equivalent', 'explicitly', 'define', 'body', 'example']"
1033,"If constructors are explicitly defined for a class, but they are all non-default, the compiler will not implicitly define a default constructor, leading to a situation where the class does not have a default constructor. This is the reason for a typical error, demonstrated by the following example.","['constructor', 'explicitly', 'define', 'class', 'non', 'default', 'compiler', 'implicitly', 'define', 'default', 'constructor', 'lead', 'situation', 'class', 'default', 'constructor', 'reason', 'typical', 'error', 'demonstrate', 'follow', 'example']"
1034,"Since neither the programmer nor the compiler has defined a default constructor, the creation of the objected pointed to by p leads to an error.3","['programmer', 'compiler', 'define', 'default', 'constructor', 'creation', 'object', 'point', 'lead', 'error']"
1035,On the other hand in C++11 a default constructor can be explicitly created:,"['hand', 'c++11', 'default', 'constructor', 'explicitly', 'create']"
1036,"In both Java and C#, a ""default constructor"" refers to a nullary constructor that is automatically generated by the compiler if no constructors have been defined for the class. The default constructor implicitly calls the superclass's nullary constructor, then executes an empty body. All fields are left at their initial value of 0 integer types, 0.0 floating-point types, false boolean type, or null reference types. A programmer-defined constructor that takes no parameters is also called a default constructor in C#, but not in Java.45","['java', 'default', 'constructor', 'refer', 'nullary', 'constructor', 'automatically', 'generate', 'compiler', 'constructor', 'define', 'class', 'default', 'constructor', 'implicitly', 'call', 'superclass', 'nullary', 'constructor', 'execute', 'body', 'field', 'leave', 'initial', 'value', 'integer', 'type', '0', 'float', 'point', 'type', 'false', 'boolean', 'type', 'null', 'reference', 'type', 'programmer', 'define', 'constructor', 'take', 'parameter', 'call', 'default', 'constructor', 'java']"
1037,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1038,"In object-oriented programming, object copying is creating a copy of an existing object, a unit of data in object-oriented programming. The resulting object is called an object copy or simply copy of the original object. Copying is basic but has subtleties and can have significant overhead. There are several ways to copy an object, most commonly by a copy constructor or cloning. Copying is done mostly so the copy can be modified or moved, or the current value preserved. If either of these is unneeded, a reference to the original data is sufficient and more efficient, as no copying occurs.","['object', 'orient', 'programming', 'object', 'copying', 'create', 'copy', 'exist', 'object', 'unit', 'datum', 'object', 'orient', 'programming', 'result', 'object', 'call', 'object', 'copy', 'simply', 'copy', 'original', 'object', 'copying', 'basic', 'subtlety', 'significant', 'overhead', 'way', 'copy', 'object', 'commonly', 'copy', 'constructor', 'clone', 'copying', 'copy', 'modify', 'move', 'current', 'value', 'preserve', 'unneeded', 'reference', 'original', 'data', 'sufficient', 'efficient', 'copying', 'occur']"
1039,"Objects in general store composite data. While in simple cases copying can be done by allocating a new, uninitialized object and copying all fields attributes from the original object, in more complex cases this does not result in desired behavior.","['object', 'general', 'store', 'composite', 'datum', 'simple', 'case', 'copying', 'allocate', 'new', 'uninitialized', 'object', 'copy', 'field', 'attribute', 'original', 'object', 'complex', 'case', 'result', 'desire', 'behavior']"
1040,"The design goal of most objects is to give the resemblance of being made out of one monolithic block even though most are not. As objects are made up of several different parts, copying becomes nontrivial. Several strategies exist to treat this problem.","['design', 'goal', 'object', 'resemblance', 'monolithic', 'block', 'object', 'different', 'part', 'copying', 'nontrivial', 'strategy', 'exist', 'treat', 'problem']"
1041,"Consider an object A, which contains fields xi more concretely, consider if A is a string and xi is an array of its characters. There are different strategies for making a copy of A, referred to as shallow copy and deep copy. Many languages allow generic copying by one or either strategy, defining either one copy operation or separate shallow copy and deep copy operations.1 Note that even shallower is to use a reference to the existing object A, in which case there is no new object, only a new reference.","['consider', 'object', 'contain', 'field', 'concretely', 'consider', 'string', 'array', 'character', 'different', 'strategy', 'make', 'copy', 'refer', 'shallow', 'copy', 'deep', 'copy', 'language', 'allow', 'generic', 'copying', 'strategy', 'define', 'copy', 'operation', 'separate', 'shallow', 'copy', 'deep', 'copy', 'operations', 'note', 'shallow', 'use', 'reference', 'exist', 'object', 'case', 'new', 'object', 'new', 'reference']"
1042,"The terminology of shallow copy and deep copy dates to Smalltalk-80.2 The same distinction holds for comparing objects for equality: most basically there is a difference between identity same object and equality same value, corresponding to shallow equality and 1 level deep equality of two object references, but then further whether equality means comparing only the fields of the object in question or dereferencing some or all fields and comparing their values in turn e.g., are two linked lists equal if they have the same nodes, or if they have same values?.clarification needed","['terminology', 'shallow', 'copy', 'deep', 'copy', 'date', 'smalltalk-80', 'distinction', 'hold', 'compare', 'object', 'equality', 'basically', 'difference', 'identity', 'object', 'equality', 'value', 'correspond', 'shallow', 'equality', 'level', 'deep', 'equality', 'object', 'reference', 'equality', 'mean', 'compare', 'field', 'object', 'question', 'dereference', 'field', 'compare', 'value', 'turn', 'e.g.', 'link', 'list', 'equal', 'node', 'values?.clarification', 'need']"
1043,"One method of copying an object is the shallow copy. In that case a new object B is created, and the fields values of A are copied over to B.345 This is also known as a field-by-field copy,678 field-for-field copy, or field copy.9 If the field value is a reference to an object e.g., a memory address it copies the reference, hence referring to the same object as A does, and if the field value is a primitive type it copies the value of the primitive type. In languages without primitive types where everything is an object, all fields of the copy B are references to the same objects as the fields of original A. The referenced objects are thus shared, so if one of these objects is modified from A or B, the change is visible in the other. Shallow copies are simple and typically cheap, as they can usually be implemented by simply copying the bits exactly.","['method', 'copy', 'object', 'shallow', 'copy', 'case', 'new', 'object', 'create', 'field', 'value', 'copy', 'b', 'know', 'field', 'field', 'copy', 'field', 'field', 'copy', 'field', 'copy', 'field', 'value', 'reference', 'object', 'e.g.', 'memory', 'address', 'copy', 'reference', 'refer', 'object', 'field', 'value', 'primitive', 'type', 'copy', 'value', 'primitive', 'type', 'language', 'primitive', 'type', 'object', 'field', 'copy', 'reference', 'object', 'field', 'original', 'reference', 'object', 'share', 'object', 'modify', 'change', 'visible', 'shallow', 'copy', 'simple', 'typically', 'cheap', 'usually', 'implement', 'simply', 'copy', 'bit', 'exactly']"
1044,"An alternative is a deep copy, meaning that fields are dereferenced: rather than references to objects being copied, new copy objects are created for any referenced objects, and references to these placed in B. The result is different from the result a shallow copy gives in that the objects referenced by the copy B are distinct from those referenced by A, and independent. Deep copies are more expensive, due to needing to create additional objects, and can be substantially more complicated, due to references possibly forming a complicated graph.","['alternative', 'deep', 'copy', 'mean', 'field', 'dereference', 'reference', 'object', 'copy', 'new', 'copy', 'object', 'create', 'reference', 'object', 'reference', 'place', 'result', 'different', 'result', 'shallow', 'copy', 'give', 'object', 'reference', 'copy', 'distinct', 'reference', 'independent', 'deep', 'copy', 'expensive', 'need', 'create', 'additional', 'object', 'substantially', 'complicated', 'reference', 'possibly', 'form', 'complicated', 'graph']"
1045,"Deep copy is a process in which the copying process occurs recursively. It means first constructing a new collection object and then recursively populating it with copies of the child objects found in the original. In case of deep copy, a copy of object is copied in other object. It means that any changes made to a copy of object do not reflect in the original object. In python, this is implemented using “deep copy” function.","['deep', 'copy', 'process', 'copying', 'process', 'occur', 'recursively', 'mean', 'construct', 'new', 'collection', 'object', 'recursively', 'populate', 'copy', 'child', 'object', 'find', 'original', 'case', 'deep', 'copy', 'copy', 'object', 'copy', 'object', 'mean', 'change', 'copy', 'object', 'reflect', 'original', 'object', 'python', 'implement', 'deep', 'copy', 'function']"
1046,"In more complex cases, some fields in a copy should have shared values with the original object as in a shallow copy, corresponding to an ""association"" relationship; and some fields should have copies as in a deep copy, corresponding to an ""aggregation"" relationship. In these cases a custom implementation of copying is generally required; this issue and solution dates to Smalltalk-80.10 Alternatively, fields can be marked as requiring a shallow copy or deep copy, and copy operations automatically generated likewise for comparison operations.1 This is not implemented in most object-oriented languages, however, though there is partial support in Eiffel.1","['complex', 'case', 'field', 'copy', 'share', 'value', 'original', 'object', 'shallow', 'copy', 'correspond', 'association', 'relationship', 'field', 'copy', 'deep', 'copy', 'correspond', 'aggregation', 'relationship', 'case', 'custom', 'implementation', 'copying', 'generally', 'require', 'issue', 'solution', 'date', 'smalltalk-80', 'alternatively', 'field', 'mark', 'require', 'shallow', 'copy', 'deep', 'copy', 'copy', 'operation', 'automatically', 'generate', 'likewise', 'comparison', 'operations', 'implement', 'object', 'orient', 'language', 'partial', 'support', 'eiffel']"
1047,"Nearly all object-oriented programming languages provide some way to copy objects. As most languages do not provide most objects for programs, a programmer must define how an object should be copied, just as they must define if two objects are identical or even comparable in the first place. Many languages provide some default behavior.","['nearly', 'object', 'orient', 'programming', 'language', 'provide', 'way', 'copy', 'object', 'language', 'provide', 'object', 'program', 'programmer', 'define', 'object', 'copy', 'define', 'object', 'identical', 'comparable', 'place', 'language', 'provide', 'default', 'behavior']"
1048,"How copying is solved varies from language to language, and what concept of an object it has.","['copying', 'solve', 'varie', 'language', 'language', 'concept', 'object']"
1049,"A lazy copy is an implementation of a deep copy. When initially copying an object, a fast shallow copy is used. A counter is also used to track how many objects share the data. When the program wants to modify an object, it can determine if the data is shared by examining the counter and can do a deep copy if needed.","['lazy', 'copy', 'implementation', 'deep', 'copy', 'initially', 'copy', 'object', 'fast', 'shallow', 'copy', 'counter', 'track', 'object', 'share', 'datum', 'program', 'want', 'modify', 'object', 'determine', 'data', 'share', 'examine', 'counter', 'deep', 'copy', 'need']"
1050,"Lazy copy looks to the outside just as a deep copy, but takes advantage of the speed of a shallow copy whenever possible. The downside are rather high but constant base costs because of the counter. Also, in certain situations, circular references can cause problems.","['lazy', 'copy', 'look', 'outside', 'deep', 'copy', 'take', 'advantage', 'speed', 'shallow', 'copy', 'possible', 'downside', 'high', 'constant', 'base', 'cost', 'counter', 'certain', 'situation', 'circular', 'reference', 'cause', 'problem']"
1051,Lazy copy is related to copy-on-write.,"['lazy', 'copy', 'relate', 'copy', 'write']"
1052,"The following presents examples for one of the most widely used object-oriented languages, Java, which should cover nearly every way that an object-oriented language can treat this problem.","['follow', 'present', 'example', 'widely', 'object', 'orient', 'language', 'java', 'cover', 'nearly', 'way', 'object', 'orient', 'language', 'treat', 'problem']"
1053,"Unlike in C++, objects in Java are always accessed indirectly through references. Objects are never created implicitly but instead are always passed or assigned by a reference variable. Methods in Java are always pass by value, however, it is the value of the reference variable that is being passed.11 The Java Virtual Machine manages garbage collection so that objects are cleaned up after they are no longer reachable. There is no automatic way to copy any given object in Java.","['unlike', 'c++', 'object', 'java', 'access', 'indirectly', 'reference', 'object', 'create', 'implicitly', 'instead', 'pass', 'assign', 'reference', 'variable', 'method', 'java', 'pass', 'value', 'value', 'reference', 'variable', 'passed', 'java', 'virtual', 'machine', 'manage', 'garbage', 'collection', 'object', 'clean', 'long', 'reachable', 'automatic', 'way', 'copy', 'give', 'object', 'java']"
1054,"Copying is usually performed by a clone method of a class. This method usually, in turn, calls the clone method of its parent class to obtain a copy, and then does any custom copying procedures. Eventually this gets to the clone method of Object the uppermost class, which creates a new instance of the same class as the object and copies all the fields to the new instance a ""shallow copy"". If this method is used, the class must implement the Cloneable marker interface, or else it will throw a CloneNotSupportedException. After obtaining a copy from the parent class, a class' own clone method may then provide custom cloning capability, like deep copying i.e. duplicate some of the structures referred to by the object or giving the new instance a new unique ID.","['copying', 'usually', 'perform', 'clone', 'method', 'class', 'method', 'usually', 'turn', 'call', 'clone', 'method', 'parent', 'class', 'obtain', 'copy', 'custom', 'copying', 'procedure', 'eventually', 'get', 'clone', 'method', 'object', 'uppermost', 'class', 'create', 'new', 'instance', 'class', 'object', 'copy', 'field', 'new', 'instance', 'shallow', 'copy', 'method', 'class', 'implement', 'cloneable', 'marker', 'interface', 'throw', 'clonenotsupportedexception', 'obtain', 'copy', 'parent', 'class', 'class', 'clone', 'method', 'provide', 'custom', 'cloning', 'capability', 'like', 'deep', 'copying', 'i.e.', 'duplicate', 'structure', 'refer', 'object', 'give', 'new', 'instance', 'new', 'unique']"
1055,"The return type of clone is Object, but implementers of a clone method could write the type of the object being cloned instead due to Java's support for covariant return types. One advantage of using clone is that since it is an overridable method, we can call clone on any object, and it will use the clone method of its class, without the calling code needing to know what that class is which would be needed with a copy constructor.","['return', 'type', 'clone', 'object', 'implementer', 'clone', 'method', 'write', 'type', 'object', 'clone', 'instead', 'java', 'support', 'covariant', 'return', 'type', 'advantage', 'clone', 'overridable', 'method', 'clone', 'object', 'use', 'clone', 'method', 'class', 'call', 'code', 'need', 'know', 'class', 'need', 'copy', 'constructor']"
1056,"A disadvantage is that one often cannot access the clone method on an abstract type. Most interfaces and abstract classes in Java do not specify a public clone method. Thus, often the only way to use the clone method is if the class of an object is known, which is contrary to the abstraction principle of using the most generic type possible. For example, if one has a List reference in Java, one cannot invoke clone on that reference because List specifies no public clone method. Implementations of List like ArrayList and LinkedList all generally have clone methods, but it is inconvenient and bad abstraction to carry around the class type of an object.","['disadvantage', 'access', 'clone', 'method', 'abstract', 'type', 'interface', 'abstract', 'class', 'java', 'specify', 'public', 'clone', 'method', 'way', 'use', 'clone', 'method', 'class', 'object', 'know', 'contrary', 'abstraction', 'principle', 'generic', 'type', 'possible', 'example', 'list', 'reference', 'java', 'invoke', 'clone', 'reference', 'list', 'specify', 'public', 'clone', 'method', 'implementation', 'list', 'like', 'arraylist', 'linkedlist', 'generally', 'clone', 'method', 'inconvenient', 'bad', 'abstraction', 'carry', 'class', 'type', 'object']"
1057,"Another way to copy objects in Java is to serialize them through the Serializable interface. This is typically used for persistence and wire protocol purposes, but it does create copies of objects and, unlike clone, a deep copy that gracefully handles cycled graphs of objects is readily available with minimal effort from a programmer.","['way', 'copy', 'object', 'java', 'serialize', 'serializable', 'interface', 'typically', 'persistence', 'wire', 'protocol', 'purpose', 'create', 'copy', 'object', 'unlike', 'clone', 'deep', 'copy', 'gracefully', 'handle', 'cycle', 'graph', 'object', 'readily', 'available', 'minimal', 'effort', 'programmer']"
1058,"Both of these methods suffer from a notable problem: the constructor is not used for objects copied with clone or serialization. This can lead to bugs with improperly initialized data, prevents the use of final member fields, and makes maintenance challenging. Some utilities attempt to overcome these issues by using reflection to deep copy objects, such as the deep-cloning library.12","['method', 'suffer', 'notable', 'problem', 'constructor', 'object', 'copy', 'clone', 'serialization', 'lead', 'bug', 'improperly', 'initialized', 'datum', 'prevent', 'use', 'final', 'member', 'field', 'make', 'maintenance', 'challenging', 'utility', 'attempt', 'overcome', 'issue', 'reflection', 'deep', 'copy', 'object', 'deep', 'clone', 'library']"
1059,"Runtime objects in Eiffel are accessible either indirectly through references or as expanded objects which fields are embedded within the objects that use them. That is, fields of an object are stored either externally or internally.","['runtime', 'object', 'eiffel', 'accessible', 'indirectly', 'reference', 'expand', 'object', 'field', 'embed', 'object', 'use', 'field', 'object', 'store', 'externally', 'internally']"
1060,"The Eiffel class ANY contains features for shallow and deep copying and cloning of objects. All Eiffel classes inherit from ANY, so these features are available within all classes, and are applicable both to reference and expanded objects.","['eiffel', 'class', 'contain', 'feature', 'shallow', 'deep', 'copying', 'cloning', 'object', 'eiffel', 'class', 'inherit', 'feature', 'available', 'class', 'applicable', 'reference', 'expand', 'object']"
1061,"The copy feature effects a shallow, field-by-field copy from one object to another. In this case no new object is created. If y were copied to x, then the same objects referenced by y before the application of copy, will also be referenced by x after the copy feature completes.","['copy', 'feature', 'effect', 'shallow', 'field', 'field', 'copy', 'object', 'case', 'new', 'object', 'create', 'copy', 'object', 'reference', 'application', 'copy', 'reference', 'copy', 'feature', 'complete']"
1062,"To effect the creation of a new object which is a shallow duplicate of y, the feature twin is used. In this case, one new object is created with its fields identical to those of the source.","['effect', 'creation', 'new', 'object', 'shallow', 'duplicate', 'feature', 'twin', 'case', 'new', 'object', 'create', 'field', 'identical', 'source']"
1063,"The feature twin relies on the feature copy, which can be redefined in descendants of ANY, if needed. The result of twin is of the anchored type like Current.","['feature', 'twin', 'rely', 'feature', 'copy', 'redefine', 'descendant', 'need', 'result', 'twin', 'anchored', 'type', 'like', 'current']"
1064,"Deep copying and creating deep twins can be done using the features deep_copy and deep_twin, again inherited from class ANY. These features have the potential to create many new objects, because they duplicate all the objects in an entire object structure. Because new duplicate objects are created instead of simply copying references to existing objects, deep operations will become a source of performance issues more readily than shallow operations.","['deep', 'copying', 'create', 'deep', 'twin', 'feature', 'deep_copy', 'deep_twin', 'inherit', 'class', 'feature', 'potential', 'create', 'new', 'object', 'duplicate', 'object', 'entire', 'object', 'structure', 'new', 'duplicate', 'object', 'create', 'instead', 'simply', 'copy', 'reference', 'exist', 'object', 'deep', 'operation', 'source', 'performance', 'issue', 'readily', 'shallow', 'operation']"
1065,"In C#, rather than using the interface ICloneable, a generic extension method can be used to create a deep copy using reflection. This has two advantages: First, it provides the flexibility to copy every object without having to specify each property and variable to be copied manually. Second, because the type is generic, the compiler ensures that the destination object and the source object have the same type.","['interface', 'icloneable', 'generic', 'extension', 'method', 'create', 'deep', 'copy', 'reflection', 'advantage', 'provide', 'flexibility', 'copy', 'object', 'have', 'specify', 'property', 'variable', 'copy', 'manually', 'second', 'type', 'generic', 'compiler', 'ensure', 'destination', 'object', 'source', 'object', 'type']"
1066,"In Objective-C, the methods copy and mutableCopy are inherited by all objects and intended for performing copies; the latter is for creating a mutable type of the original object. These methods in turn call the copyWithZone and mutableCopyWithZone methods, respectively, to perform the copying. An object must implement the corresponding copyWithZone method to be copyable.","['objective', 'method', 'copy', 'mutablecopy', 'inherit', 'object', 'intend', 'perform', 'copy', 'create', 'mutable', 'type', 'original', 'object', 'method', 'turn', 'copywithzone', 'mutablecopywithzone', 'method', 'respectively', 'perform', 'copying', 'object', 'implement', 'corresponding', 'copywithzone', 'method', 'copyable']"
1067,"In OCaml, the library function Oo.copy performs shallow copying of an object.","['ocaml', 'library', 'function', 'oo.copy', 'perform', 'shallow', 'copying', 'object']"
1068,"In Python, the library's copy module provides shallow copy and deep copy of objects through the copy and deepcopy functions, respectively.13 Programmers may define special methods __copy__ and __deepcopy__ in an object to provide custom copying implementation.","['python', 'library', 'copy', 'module', 'provide', 'shallow', 'copy', 'deep', 'copy', 'object', 'copy', 'deepcopy', 'function', 'respectively', 'programmer', 'define', 'special', 'method', 'copy', 'deepcopy', 'object', 'provide', 'custom', 'copying', 'implementation']"
1069,"In Ruby, all objects inherit two methods for performing shallow copies, clone and dup. The two methods differ in that clone copies an object's tainted state, frozen state, and any singleton methods it may have, whereas dup copies only its tainted state. Deep copies may be achieved by dumping and loading an object's byte stream or YAML serialization.1 Alternatively, you can use the deep_dive gem to do a controlled deep copy of your object graphs. 2","['ruby', 'object', 'inherit', 'method', 'perform', 'shallow', 'copy', 'clone', 'dup', 'method', 'differ', 'clone', 'copy', 'object', 'tainted', 'state', 'frozen', 'state', 'singleton', 'method', 'dup', 'copy', 'tainted', 'state', 'deep', 'copy', 'achieve', 'dump', 'load', 'object', 'byte', 'stream', 'yaml', 'serialization', 'alternatively', 'use', 'deep_dive', 'gem', 'control', 'deep', 'copy', 'object', 'graph']"
1070,"In Perl, nested structures are stored by the use of references, thus a developer can either loop over the entire structure and re-reference the data or use the dclone function from the module Storable.","['perl', 'nest', 'structure', 'store', 'use', 'reference', 'developer', 'loop', 'entire', 'structure', 'reference', 'datum', 'use', 'dclone', 'function', 'module', 'storable']"
1071,"In VBA, an assignment of variables of type Object is a shallow copy, an assignment for all other types numeric types, String, user defined types, arrays is a deep copy. So the keyword Set for an assignment signals a shallow copy and the optional keyword Let signals a deep copy. There is no built-in method for deep copies of Objects in VBA.","['vba', 'assignment', 'variable', 'type', 'object', 'shallow', 'copy', 'assignment', 'type', 'numeric', 'type', 'string', 'user', 'define', 'type', 'array', 'deep', 'copy', 'keyword', 'set', 'assignment', 'signal', 'shallow', 'copy', 'optional', 'keyword', 'let', 'signal', 'deep', 'copy', 'build', 'method', 'deep', 'copy', 'objects', 'vba']"
1072,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1073,"In computing or computer programming, delegation refers generally to one entity passing something to another entity,1 and narrowly to various specific forms of relationships. These include:","['computing', 'computer', 'programming', 'delegation', 'refer', 'generally', 'entity', 'pass', 'entity', 'narrowly', 'specific', 'form', 'relationship', 'include']"
1074,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1075,"In software engineering, dependency injection is a design pattern in which an object or function receives other objects or functions that it depends on. A form of inversion of control, dependency injection aims to separate the concerns of constructing objects and using them, leading to loosely coupled programs.123 The pattern ensures that an object or function which wants to use a given service should not have to know how to construct those services. Instead, the receiving 'client' object or function is provided with its dependencies by external code an 'injector', which it is not aware of.4 Dependency injection helps by making implicit dependencies explicit and helps solve the following problems:5","['software', 'engineering', 'dependency', 'injection', 'design', 'pattern', 'object', 'function', 'receive', 'object', 'function', 'depend', 'form', 'inversion', 'control', 'dependency', 'injection', 'aim', 'separate', 'concern', 'construct', 'object', 'lead', 'loosely', 'couple', 'programs', 'pattern', 'ensure', 'object', 'function', 'want', 'use', 'give', 'service', 'know', 'construct', 'service', 'instead', 'receive', 'client', 'object', 'function', 'provide', 'dependency', 'external', 'code', 'injector', 'aware', 'of', 'dependency', 'injection', 'help', 'make', 'implicit', 'dependency', 'explicit', 'help', 'solve', 'follow', 'problems']"
1076,"In addition, dependency injection is used for keeping code in-line with the dependency inversion principle.67","['addition', 'dependency', 'injection', 'keep', 'code', 'line', 'dependency', 'inversion', 'principle']"
1077,"Fundamentally, dependency injection consists of passing parameters to a method.8","['fundamentally', 'dependency', 'injection', 'consist', 'pass', 'parameter', 'method']"
1078,"Because the client does not build or find the service itself, it typically only needs to declare the interfaces of the services it uses, rather than their concrete implementations. This makes it easier to change which services are actually used at runtime, especially in statically-typed languages where changing the underlying objects would otherwise require re-compiling the source code.","['client', 'build', 'find', 'service', 'typically', 'need', 'declare', 'interface', 'service', 'use', 'concrete', 'implementation', 'make', 'easy', 'change', 'service', 'actually', 'runtime', 'especially', 'statically', 'type', 'language', 'change', 'underlying', 'object', 'require', 'compile', 'source', 'code']"
1079,"An example of inversion of control without dependency injection is the template method pattern, where polymorphism is achieved through subclassing.9 In contrast, dependency injection implements inversion of control through composition, and is often similar to the strategy pattern. A difference is that the strategy pattern is intended for dependencies that are interchangeable throughout an object's lifetime, whereas with dependency injection typically only a single instance of a dependency is used.10","['example', 'inversion', 'control', 'dependency', 'injection', 'template', 'method', 'pattern', 'polymorphism', 'achieve', 'subclassing', 'contrast', 'dependency', 'injection', 'implement', 'inversion', 'control', 'composition', 'similar', 'strategy', 'pattern', 'difference', 'strategy', 'pattern', 'intend', 'dependency', 'interchangeable', 'object', 'lifetime', 'dependency', 'injection', 'typically', 'single', 'instance', 'dependency', 'used']"
1080,"When you go and get things out of the refrigerator for yourself, you can cause problems. You might leave the door open, you might get something Mommy or Daddy don't want you to have. You might even be looking for something we don't even have or which has expired.","['thing', 'refrigerator', 'cause', 'problem', 'leave', 'door', 'open', 'mommy', 'daddy', 'want', 'look', 'expire']"
1081,"What you should be doing is stating a need, ""I need something to drink with lunch,"" and then we will make sure you have something when you sit down to eat.","['state', 'need', 'need', 'drink', 'lunch', 'sure', 'sit', 'eat']"
1082,"Dependency injection involves four roles: services, clients, interfaces and injectors.","['dependency', 'injection', 'involve', 'role', 'service', 'client', 'interface', 'injector']"
1083,"A service is any class which contains useful functionality. In turn, a client is any class which uses services.","['service', 'class', 'contain', 'useful', 'functionality', 'turn', 'client', 'class', 'use', 'service']"
1084,"Any object can be a service or a client; the names relate only to the role the objects play in an injection. The same object may even be both a client it uses injected services and a service it is injected into other objects. Upon injection, the service is made part of the client's state, available for use.13","['object', 'service', 'client', 'name', 'relate', 'role', 'object', 'play', 'injection', 'object', 'client', 'use', 'inject', 'service', 'service', 'inject', 'object', 'injection', 'service', 'client', 'state', 'available', 'use']"
1085,"Clients should not know how their dependencies are implemented, only their names and API. A service which retrieves emails, for instance, may use the IMAP or POP3 protocols behind the scenes, but this detail is likely irrelevant to calling code that merely wants an email retrieved. By ignoring implementation details, clients do not need to change when their dependencies do.","['client', 'know', 'dependency', 'implement', 'name', 'api', 'service', 'retrieve', 'email', 'instance', 'use', 'imap', 'pop3', 'protocol', 'scene', 'detail', 'likely', 'irrelevant', 'call', 'code', 'merely', 'want', 'email', 'retrieve', 'ignore', 'implementation', 'detail', 'client', 'need', 'change', 'dependency']"
1086,"The injector, sometimes also called an assembler, container, provider or factory, introduces services to the client.","['injector', 'call', 'assembler', 'container', 'provider', 'factory', 'introduce', 'service', 'client']"
1087,"The role of injectors is to construct and connect complex object graphs, where objects may be both clients and services. The injector itself may be many objects working together, but must not be the client, as this would create a circular dependency.","['role', 'injector', 'construct', 'connect', 'complex', 'object', 'graph', 'object', 'client', 'service', 'injector', 'object', 'work', 'client', 'create', 'circular', 'dependency']"
1088,"Because dependency injection separates how objects are constructed from how they are used, it often diminishes the importance of the new keyword found in most object-oriented languages. Because the framework handles creating services, the programmer tends to only directly construct value objects which represents entities in the program's domain such as an Employee object in a business app or an Order object in a shopping app.14151617","['dependency', 'injection', 'separate', 'object', 'construct', 'diminish', 'importance', 'new', 'keyword', 'find', 'object', 'orient', 'language', 'framework', 'handle', 'create', 'service', 'programmer', 'tend', 'directly', 'construct', 'value', 'object', 'represent', 'entity', 'program', 'domain', 'employee', 'object', 'business', 'app', 'order', 'object', 'shopping', 'app']"
1089,"As an analogy, cars can be thought of as services which perform the useful work of transporting people from one place to another. Car engines can require gas, diesel or electricity, but this detail is unimportant to the client—a driver—who only cares if it can get them to their destination.","['analogy', 'car', 'think', 'service', 'perform', 'useful', 'work', 'transport', 'people', 'place', 'car', 'engine', 'require', 'gas', 'diesel', 'electricity', 'detail', 'unimportant', 'client', 'driver', 'care', 'destination']"
1090,"Cars present a uniform interface through their pedals, steering wheels and other controls. As such, which engine they were 'injected' with on the factory line ceases to matter and drivers can switch between any kind of car as needed.","['car', 'present', 'uniform', 'interface', 'pedal', 'steer', 'wheel', 'control', 'engine', 'inject', 'factory', 'line', 'cease', 'matter', 'driver', 'switch', 'kind', 'car', 'need']"
1091,A basic benefit of dependency injection is decreased coupling between classes and their dependencies.1819,"['basic', 'benefit', 'dependency', 'injection', 'decrease', 'coupling', 'class', 'dependencies']"
1092,"By removing a client's knowledge of how its dependencies are implemented, programs become more reusable, testable and maintainable.20","['remove', 'client', 'knowledge', 'dependency', 'implement', 'program', 'reusable', 'testable', 'maintainable']"
1093,This also results in increased flexibility: a client may act on anything that supports the intrinsic interface the client expects.21,"['result', 'increase', 'flexibility', 'client', 'act', 'support', 'intrinsic', 'interface', 'client', 'expects']"
1094,"More generally, dependency injection reduces boilerplate code, since all dependency creation is handled by a singular component.20","['generally', 'dependency', 'injection', 'reduce', 'boilerplate', 'code', 'dependency', 'creation', 'handle', 'singular', 'component']"
1095,"Finally, dependency injection allows concurrent development. Two developers can independently develop classes that use each other, while only needing to know the interface the classes will communicate through. Plugins are often developed by third-parties that never even talk to developers of the original product.22","['finally', 'dependency', 'injection', 'allow', 'concurrent', 'development', 'developer', 'independently', 'develop', 'class', 'use', 'need', 'know', 'interface', 'class', 'communicate', 'plugin', 'develop', 'party', 'talk', 'developer', 'original', 'product']"
1096,Many of dependency injection's benefits are particularly relevant to unit-testing.,"['dependency', 'injection', 'benefit', 'particularly', 'relevant', 'unit', 'testing']"
1097,"For example, dependency injection can be used to externalize a system's configuration details into configuration files, allowing the system to be reconfigured without recompilation. Separate configurations can be written for different situations that require different implementations of components.23","['example', 'dependency', 'injection', 'externalize', 'system', 'configuration', 'detail', 'configuration', 'file', 'allow', 'system', 'reconfigure', 'recompilation', 'separate', 'configuration', 'write', 'different', 'situation', 'require', 'different', 'implementation', 'components']"
1098,"Similarly, because dependency injection does not require any change in code behavior, it can be applied to legacy code as a refactoring. This makes clients more independent and are easier to unit test in isolation, using stubs or mock objects, that simulate other objects not under test.","['similarly', 'dependency', 'injection', 'require', 'change', 'code', 'behavior', 'apply', 'legacy', 'code', 'refactoring', 'make', 'client', 'independent', 'easy', 'unit', 'test', 'isolation', 'stub', 'mock', 'object', 'simulate', 'object', 'test']"
1099,This ease of testing is often the first benefit noticed when using dependency injection.24,"['ease', 'testing', 'benefit', 'notice', 'dependency', 'injection']"
1100,Critics of dependency injection argue that it:,"['critic', 'dependency', 'injection', 'argue']"
1101,There are three main ways in which a client can receive injected services:30,"['main', 'way', 'client', 'receive', 'inject', 'services']"
1102,"In some frameworks, clients do not need to actively accept dependency injection at all. In Java, for example, reflection can make private attributes public when testing and inject services directly.31","['framework', 'client', 'need', 'actively', 'accept', 'dependency', 'injection', 'java', 'example', 'reflection', 'private', 'attribute', 'public', 'testing', 'inject', 'service', 'directly']"
1103,"In the following Java example, the Client class contains a Service member variable initialized in the constructor. The client directly constructs and controls which service it uses, creating a hard-coded dependency.","['follow', 'java', 'example', 'client', 'class', 'contain', 'service', 'member', 'variable', 'initialize', 'constructor', 'client', 'directly', 'construct', 'control', 'service', 'use', 'create', 'hard', 'code', 'dependency']"
1104,"The most common form of dependency injection is for a class to request its dependencies through its constructor. This ensures the client is always in a valid state, since it cannot be instantiated without its necessary dependencies.","['common', 'form', 'dependency', 'injection', 'class', 'request', 'dependency', 'constructor', 'ensure', 'client', 'valid', 'state', 'instantiate', 'necessary', 'dependency']"
1105,"By accepting dependencies through a setter method, rather than a constructor, clients can allow injectors to manipulate their dependencies at any time. This offers flexibility, but makes it difficult to ensure that all dependencies are injected and valid before the client is used.","['accept', 'dependency', 'setter', 'method', 'constructor', 'client', 'allow', 'injector', 'manipulate', 'dependency', 'time', 'offer', 'flexibility', 'make', 'difficult', 'ensure', 'dependency', 'inject', 'valid', 'client']"
1106,"With interface injection, dependencies are completely ignorant of their clients, yet still send and receive references to new clients.","['interface', 'injection', 'dependency', 'completely', 'ignorant', 'client', 'send', 'receive', 'reference', 'new', 'client']"
1107,"In this way, the dependencies become injectors. The key is that the injecting method is provided through an interface.","['way', 'dependency', 'injector', 'key', 'inject', 'method', 'provide', 'interface']"
1108,"An assembler is still needed to introduce the client and its dependencies. The assembler takes a reference to the client, casts it to the setter interface that sets that dependency, and passes it to that dependency object which in turn passes a reference to itself back to the client.","['assembler', 'need', 'introduce', 'client', 'dependency', 'assembler', 'take', 'reference', 'client', 'cast', 'setter', 'interface', 'set', 'dependency', 'pass', 'dependency', 'object', 'turn', 'pass', 'reference', 'client']"
1109,"For interface injection to have value, the dependency must do something in addition to simply passing back a reference to itself. This could be acting as a factory or sub-assembler to resolve other dependencies, thus abstracting some details from the main assembler. It could be reference-counting so that the dependency knows how many clients are using it. If the dependency maintains a collection of clients, it could later inject them all with a different instance of itself.","['interface', 'injection', 'value', 'dependency', 'addition', 'simply', 'pass', 'reference', 'act', 'factory', 'sub', 'assembler', 'resolve', 'dependency', 'abstract', 'detail', 'main', 'assembler', 'reference', 'counting', 'dependency', 'know', 'client', 'dependency', 'maintain', 'collection', 'client', 'later', 'inject', 'different', 'instance']"
1110,"The simplest way of implementing dependency injection is to manually arrange services and clients, typically done at the program's root, where execution begins.","['simple', 'way', 'implement', 'dependency', 'injection', 'manually', 'arrange', 'service', 'client', 'typically', 'program', 'root', 'execution', 'begin']"
1111,"Manual construction may be more complex and involve builders, factories, or other construction patterns.","['manual', 'construction', 'complex', 'involve', 'builder', 'factory', 'construction', 'pattern']"
1112,"Manual dependency injection is often tedious and error-prone for larger projects, promoting the use of frameworks which automate the process. Manual dependency injection becomes a dependency injection framework once the constructing code is no longer custom to the application and is instead universal.32 While useful, these tools are not required to do dependency injection.3334","['manual', 'dependency', 'injection', 'tedious', 'error', 'prone', 'large', 'project', 'promote', 'use', 'framework', 'automate', 'process', 'manual', 'dependency', 'injection', 'dependency', 'injection', 'framework', 'construct', 'code', 'long', 'custom', 'application', 'instead', 'universal', 'useful', 'tool', 'require', 'dependency', 'injection']"
1113,"Some frameworks, like Spring, can use external configuration files to plan program composition:","['framework', 'like', 'spring', 'use', 'external', 'configuration', 'file', 'plan', 'program', 'composition']"
1114,"Even with a potentially long and complex object graph, the only class mentioned in code is the entry point, in this case Client.Client has not undergone any changes to work with Spring and remains a POJO.353637 By keeping Spring-specific annotations and calls from spreading out among many classes, the system stays only loosely dependent on Spring.28","['potentially', 'long', 'complex', 'object', 'graph', 'class', 'mention', 'code', 'entry', 'point', 'case', 'client', 'client', 'undergo', 'change', 'work', 'spring', 'remain', 'pojo', 'keep', 'spring', 'specific', 'annotation', 'call', 'spread', 'class', 'system', 'stay', 'loosely', 'dependent', 'spring']"
1115,The following example shows an AngularJS component receiving a greeting service through dependency injection.,"['follow', 'example', 'show', 'angularjs', 'component', 'receive', 'greeting', 'service', 'dependency', 'injection']"
1116,Each AngularJS application contains a service locator responsible for the construction and look-up of dependencies.,"['angularjs', 'application', 'contain', 'service', 'locator', 'responsible', 'construction', 'look', 'dependency']"
1117,"We can then create a new injector that provides components defined in the myModule module, including the greeter service.","['create', 'new', 'injector', 'provide', 'component', 'define', 'mymodule', 'module', 'include', 'greeter', 'service']"
1118,"To avoid the service locator antipattern, AngularJS allows declarative notation in HTML templates which delegates creating components to the injector.","['avoid', 'service', 'locator', 'antipattern', 'angularjs', 'allow', 'declarative', 'notation', 'html', 'template', 'delegate', 'create', 'component', 'injector']"
1119,The ng-controller directive triggers the injector to create an instance of the controller and its dependencies.,"['controller', 'directive', 'trigger', 'injector', 'create', 'instance', 'controller', 'dependency']"
1120,This sample provides an example of constructor injection in C#.,"['sample', 'provide', 'example', 'constructor', 'injection']"
1121,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1122,"In object-oriented programming, a destructor sometimes abbreviated dtor1 is a method which is invoked mechanically just before the memory of the object is released.2 It can happen when its lifetime is bound to scope and the execution leaves the scope, when it is embedded in another object whose lifetime ends, or when it was allocated dynamically and is released explicitly. Its main purpose is to free the resources memory allocations, open files or sockets, database connections, resource locks, etc. which were acquired by the object during its life and/or deregister from other entities which may keep references to it. Use of destructors is needed for the process of Resource Acquisition Is Initialization RAII.","['object', 'orient', 'programming', 'destructor', 'abbreviate', 'dtor1', 'method', 'invoke', 'mechanically', 'memory', 'object', 'released', 'happen', 'lifetime', 'bind', 'scope', 'execution', 'leave', 'scope', 'embed', 'object', 'lifetime', 'end', 'allocate', 'dynamically', 'release', 'explicitly', 'main', 'purpose', 'free', 'resource', 'memory', 'allocation', 'open', 'file', 'socket', 'database', 'connection', 'resource', 'lock', 'etc', 'acquire', 'object', 'life', 'deregister', 'entity', 'reference', 'use', 'destructor', 'need', 'process', 'resource', 'acquisition', 'initialization', 'raii']"
1123,"With most kinds of automatic garbage collection algorithms, the releasing of memory may happen a long time after the object becomes unreachable, making destructors called finalizers in this case unsuitable for most purposes. In such languages, the freeing of resources is done either through a lexical construct such as try..finally, Python's ""with"" or Java's ""try-with-resources"", which is the equivalent to RAII, or explicitly by calling a function equivalent to explicit deletion; in particular, many object-oriented languages use the Dispose pattern.","['kind', 'automatic', 'garbage', 'collection', 'algorithm', 'releasing', 'memory', 'happen', 'long', 'time', 'object', 'unreachable', 'make', 'destructor', 'call', 'finalizer', 'case', 'unsuitable', 'purpose', 'language', 'freeing', 'resource', 'lexical', 'construct', 'try', 'finally', 'python', 'java', 'try', 'resource', 'equivalent', 'raii', 'explicitly', 'call', 'function', 'equivalent', 'explicit', 'deletion', 'particular', 'object', 'orient', 'language', 'use', 'dispose', 'pattern']"
1124,"The destructor has the same name as the class, but with a tilde ~ before it.2 For example, a class called foo will have the destructor ~foo. Additionally, destructors have neither parameters nor return types.2 As stated above, a destructor for an object is called whenever the object's lifetime ends.2 If the object was created as an automatic variable, its lifetime ends and the destructor is called automatically when the object goes out of scope. Because C++ does not have garbage collection, if the object was created with a new statement dynamically on the heap, then its destructor is called when the delete operator is applied to a pointer to the object. Usually that operation occurs within another destructor, typically the destructor of a smart pointer object.","['destructor', 'class', 'tilde', 'it', 'example', 'class', 'call', 'foo', 'destructor', '~foo', 'additionally', 'destructor', 'parameter', 'return', 'types', 'state', 'destructor', 'object', 'call', 'object', 'lifetime', 'ends', 'object', 'create', 'automatic', 'variable', 'lifetime', 'end', 'destructor', 'call', 'automatically', 'object', 'go', 'scope', 'c++', 'garbage', 'collection', 'object', 'create', 'new', 'statement', 'dynamically', 'heap', 'destructor', 'call', 'delete', 'operator', 'apply', 'pointer', 'object', 'usually', 'operation', 'occur', 'destructor', 'typically', 'destructor', 'smart', 'pointer', 'object']"
1125,"In inheritance hierarchies, the declaration of a virtual destructor in the base class ensures that the destructors of derived classes are invoked properly when an object is deleted through a pointer-to-base-class. Objects that may be deleted in this way need to inherit a virtual destructor.","['inheritance', 'hierarchy', 'declaration', 'virtual', 'destructor', 'base', 'class', 'ensure', 'destructor', 'derive', 'class', 'invoke', 'properly', 'object', 'delete', 'pointer', 'base', 'class', 'object', 'delete', 'way', 'need', 'inherit', 'virtual', 'destructor']"
1126,A destructor should never throw an exception.7,"['destructor', 'throw', 'exception']"
1127,Non-class scalar types have what's called a .mw-parser-output .vanchor>:target~.vanchor-textbackground-color:#b1d2ffpseudo-destructor which can be accessed by using typedef or template arguments. This construct makes it possible to write code without having to know if a destructor exists for a given type.,"['non', 'class', 'scalar', 'type', 'call', '.mw', 'parser', 'output', '.vanchor>:target~.vanchor', 'textbackground', 'color:#b1d2ffpseudo', 'destructor', 'access', 'typedef', 'template', 'argument', 'construct', 'make', 'possible', 'write', 'code', 'have', 'know', 'destructor', 'exist', 'give', 'type']"
1128,"In older versions of the standard, pseudo-destructors were specified to have no effect, however that was changed in a defect report to make them end the lifetime of the object they are called on.8","['old', 'version', 'standard', 'pseudo', 'destructor', 'specify', 'effect', 'change', 'defect', 'report', 'end', 'lifetime', 'object', 'call', 'on']"
1129,"Objects which cannot be safely copied and/or assigned should be disabled from such semantics by declaring their corresponding functions as deleted within a public encapsulation level. A detailed description of this method can be found in Scott Meyers' popular book, Effective Modern C++ Item 11: ""Prefer deleted functions to private undefined ones.""9.","['object', 'safely', 'copy', 'assign', 'disable', 'semantic', 'declare', 'correspond', 'function', 'delete', 'public', 'encapsulation', 'level', 'detailed', 'description', 'method', 'find', 'scott', 'meyers', 'popular', 'book', 'effective', 'modern', 'c++', 'item', 'prefer', 'delete', 'function', 'private', 'undefined', 'one']"
1130,The GNU Compiler Collection's C compiler comes with 2 extensions that allow implementing destructors:,"['gnu', 'compiler', 'collection', 'compiler', 'come', 'extension', 'allow', 'implement', 'destructor']"
1131,Destructors in Xojo REALbasic can be in one of two forms. Each form uses a regular method declaration with a special name with no parameters and no return value. The older form uses the same name as the Class with a ~ tilde prefix. The newer form uses the name Destructor. The newer form is preferred because it makes refactoring the class easier.,"['destructor', 'xojo', 'realbasic', 'form', 'form', 'use', 'regular', 'method', 'declaration', 'special', 'parameter', 'return', 'value', 'old', 'form', 'use', 'class', 'tilde', 'prefix', 'new', 'form', 'use', 'destructor', 'new', 'form', 'preferred', 'make', 'refactore', 'class', 'easier']"
1132,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1133,"In computer science, a dispatch table is a table of pointers or memory addresses to functions or methods.1 Use of such a table is a common technique when implementing late binding in object-oriented programming.","['computer', 'science', 'dispatch', 'table', 'table', 'pointer', 'memory', 'address', 'function', 'methods', 'use', 'table', 'common', 'technique', 'implement', 'late', 'bind', 'object', 'orient', 'programming']"
1134,"The following shows one way to implement a dispatch table in Perl, using a hash to store references to code also known as function pointers.","['follow', 'show', 'way', 'implement', 'dispatch', 'table', 'perl', 'hash', 'store', 'reference', 'code', 'know', 'function', 'pointer']"
1135,"Running this Perl program as perl greet -h will produce ""hello"", and running it as perl greet -g will produce ""goodbye"".","['run', 'perl', 'program', 'perl', 'greet', 'produce', 'hello', 'run', 'perl', 'greet', 'produce', 'goodbye']"
1136,Following is a demo of implementing dispatch table in JavaScript:,"['follow', 'demo', 'implement', 'dispatch', 'table', 'javascript']"
1137,"In object-oriented programming languages that support virtual methods, the compiler will automatically create a dispatch table for each object of a class containing virtual methods. This table is called a virtual method table or vtable, and every call to a virtual method is dispatched through the vtable.","['object', 'orient', 'programming', 'language', 'support', 'virtual', 'method', 'compiler', 'automatically', 'create', 'dispatch', 'table', 'object', 'class', 'contain', 'virtual', 'method', 'table', 'call', 'virtual', 'method', 'table', 'vtable', 'virtual', 'method', 'dispatch', 'vtable']"
1138,"In computing, late binding or dynamic linkage1—though not an identical process to dynamically linking imported code libraries—is a computer programming mechanism in which the method being called upon an object, or the function being called with arguments, is looked up by name at runtime. In other words, a name is associated with a particular operation or object at runtime, rather than during compilation. The name dynamic binding is sometimes used,2 but is more commonly used to refer to dynamic scope.","['computing', 'late', 'binding', 'dynamic', 'linkage1', 'identical', 'process', 'dynamically', 'link', 'import', 'code', 'library', 'computer', 'programming', 'mechanism', 'method', 'call', 'object', 'function', 'call', 'argument', 'look', 'runtime', 'word', 'associate', 'particular', 'operation', 'object', 'runtime', 'compilation', 'dynamic', 'binding', 'used', 'commonly', 'refer', 'dynamic', 'scope']"
1139,"With early binding, or static binding, in an object-oriented language, the compilation phase fixes all types of variables and expressions. This is usually stored in the compiled program as an offset in a virtual method table ""v-table"".3 In contrast, with late binding, the compiler does not read enough information to verify the method exists or bind its slot on the v-table. Instead, the method is looked up by name at runtime.","['early', 'binding', 'static', 'binding', 'object', 'orient', 'language', 'compilation', 'phase', 'fix', 'type', 'variable', 'expression', 'usually', 'store', 'compile', 'program', 'offset', 'virtual', 'method', 'table', 'table', 'contrast', 'late', 'bind', 'compiler', 'read', 'information', 'verify', 'method', 'exist', 'bind', 'slot', 'table', 'instead', 'method', 'look', 'runtime']"
1140,"The primary advantage of using late binding in Component Object Model COM programming is that it does not require the compiler to reference the libraries that contain the object at compile time. This makes the compilation process more resistant to version conflicts, in which the class's v-table may be accidentally modified. This is not a concern in just-in-time compilation-compiled platforms such as .NET or Java, because the v-table is created at runtime by the virtual machine against the libraries as they are being loaded into the running application.4","['primary', 'advantage', 'late', 'binding', 'component', 'object', 'model', 'com', 'programming', 'require', 'compiler', 'reference', 'library', 'contain', 'object', 'compile', 'time', 'make', 'compilation', 'process', 'resistant', 'version', 'conflict', 'class', 'table', 'accidentally', 'modify', 'concern', 'time', 'compilation', 'compile', 'platform', '.net', 'java', 'table', 'create', 'runtime', 'virtual', 'machine', 'library', 'load', 'running', 'application']"
1141,"The term ""late binding"" dates back to at least the 1960s, where it can be found in Communications of the ACM. The term was widely used to describe calling conventions in languages like Lisp, though usually with negative connotations about performance.5","['term', 'late', 'bind', 'date', '1960', 'find', 'communication', 'acm', 'term', 'widely', 'describe', 'call', 'convention', 'language', 'like', 'lisp', 'usually', 'negative', 'connotation', 'performance']"
1142,"In the 1980s Smalltalk popularized object-oriented programming OOP and with it late binding. Alan Kay once said, ""OOP to me means only messaging, local retention, and protection and hiding of state-process, and extreme late-binding of all things. It can be done in Smalltalk and in LISP. There are possibly other systems in which this is possible, but I'm not aware of them.""6","['1980', 'smalltalk', 'popularize', 'object', 'orient', 'programming', 'oop', 'late', 'bind', 'alan', 'kay', 'say', 'oop', 'mean', 'message', 'local', 'retention', 'protection', 'hiding', 'state', 'process', 'extreme', 'late', 'binding', 'thing', 'smalltalk', 'lisp', 'possibly', 'system', 'possible', 'aware']"
1143,"In the early to mid-1990s, Microsoft heavily promoted its COM standard as a binary interface between different OOP programming languages. COM programming equally promoted early and late binding, with many languages supporting both at the syntax level.","['early', 'mid-1990', 'microsoft', 'heavily', 'promote', 'com', 'standard', 'binary', 'interface', 'different', 'oop', 'programming', 'language', 'com', 'programming', 'equally', 'promote', 'early', 'late', 'bind', 'language', 'support', 'syntax', 'level']"
1144,"In 2000, Alex Martelli coined the term ""duck typing"" to refer to a similar concept, but with a different emphasis. While late binding generally focuses on implementation details, duck typing focuses on the ability to ignore types and concentrate on the methods an object currently has.","['2000', 'alex', 'martelli', 'coin', 'term', 'duck', 'typing', 'refer', 'similar', 'concept', 'different', 'emphasis', 'late', 'bind', 'generally', 'focus', 'implementation', 'detail', 'duck', 'typing', 'focus', 'ability', 'ignore', 'type', 'concentrate', 'method', 'object', 'currently']"
1145,"In most dynamically-typed languages, the list of methods on an object can be altered at runtime. This requires late binding.","['dynamically', 'type', 'language', 'list', 'method', 'object', 'alter', 'runtime', 'require', 'late', 'bind']"
1146,"In Lisp, late bound global function calls are efficiently looked up at runtime via a symbol's function cell. These function bindings are mutable.","['lisp', 'late', 'bind', 'global', 'function', 'call', 'efficiently', 'look', 'runtime', 'symbol', 'function', 'cell', 'function', 'binding', 'mutable']"
1147,Example using an interactive Clozure Common Lisp session:,"['example', 'interactive', 'clozure', 'common', 'lisp', 'session']"
1148,"In C++, late binding also called ""dynamic binding"" refers to what normally happens when the virtual keyword is used in a method's declaration. C++ then creates a so-called virtual table, which is a look-up table for such functions that will always be consulted when they are called.7 Usually, the ""late binding"" term is used in favor of ""dynamic dispatch"".","['c++', 'late', 'binding', 'call', 'dynamic', 'binding', 'refer', 'normally', 'happen', 'virtual', 'keyword', 'method', 'declaration', 'c++', 'create', 'call', 'virtual', 'table', 'look', 'table', 'function', 'consult', 'called', 'usually', 'late', 'bind', 'term', 'favor', 'dynamic', 'dispatch']"
1149,In COM programming a late-bound method call is performed using the IDispatch interface. Some COM-based languages such as Visual Basic 6 have syntactical support for calling this interface.8 This is done by defining the variable's type as Object. Others such as C++ require that you explicitly call GetIDsOfNames to look up a method and Invoke to call it.,"['com', 'program', 'late', 'bind', 'method', 'perform', 'idispatch', 'interface', 'com', 'base', 'language', 'visual', 'basic', 'syntactical', 'support', 'call', 'interface', 'define', 'variable', 'type', 'object', 'c++', 'require', 'explicitly', 'getidsofname', 'look', 'method', 'invoke']"
1150,"In .NET, late binding refers to overriding a virtual method like C++ or implementing an interface. The compiler builds virtual tables for every virtual or interface method call which is used at run-time to determine the implementation to execute.","['.net', 'late', 'bind', 'refer', 'override', 'virtual', 'method', 'like', 'c++', 'implement', 'interface', 'compiler', 'build', 'virtual', 'table', 'virtual', 'interface', 'method', 'run', 'time', 'determine', 'implementation', 'execute']"
1151,"Also like COM and Java, the Common Language Runtime provides reflection APIs that can make late binding calls. The use of these calls varies by language.","['like', 'com', 'java', 'common', 'language', 'runtime', 'provide', 'reflection', 'api', 'late', 'bind', 'call', 'use', 'call', 'vary', 'language']"
1152,"With C# 4, the language also added the ""dynamic"" pseudo-type. This would be used in place of the Object type to indicate that late binding is desired. The specific late binding mechanism needed is determined at runtime using the Dynamic Language Runtime as a starting point.","['language', 'add', 'dynamic', 'pseudo', 'type', 'place', 'object', 'type', 'indicate', 'late', 'binding', 'desire', 'specific', 'late', 'binding', 'mechanism', 'need', 'determine', 'runtime', 'dynamic', 'language', 'runtime', 'starting', 'point']"
1153,"Visual Basic uses them whenever the variable is of type Object and the compiler directive ""Option Strict Off"" is in force. This is the default setting for a new VB project. Prior to version 9, only .NET and COM objects could be late bound. With VB 10, this has been extended to DLR-based objects.","['visual', 'basic', 'use', 'variable', 'type', 'object', 'compiler', 'directive', 'option', 'strict', 'force', 'default', 'setting', 'new', 'project', 'prior', 'version', '.net', 'com', 'object', 'late', 'bind', 'extend', 'dlr', 'base', 'object']"
1154,There are three definitions for late binding in Java.,"['definition', 'late', 'binding', 'java']"
1155,"Early documents on Java discussed how classes were not linked together at compile time. While types are statically checked at compile time, different implementations for classes could be swapped out just prior to runtime simply by overwriting the class file. As long as the new class definition had the same class and method names, the code would still work. In this sense it is similar to the traditional definition of late binding.","['early', 'document', 'java', 'discuss', 'class', 'link', 'compile', 'time', 'type', 'statically', 'check', 'compile', 'time', 'different', 'implementation', 'class', 'swap', 'prior', 'runtime', 'simply', 'overwrite', 'class', 'file', 'long', 'new', 'class', 'definition', 'class', 'method', 'name', 'code', 'work', 'sense', 'similar', 'traditional', 'definition', 'late', 'bind']"
1156,"Currently, it is popular to use the term late binding in Java programming as a synonym for dynamic dispatch. Specifically, this refers to Java's single dispatch mechanism used with virtual methods.","['currently', 'popular', 'use', 'term', 'late', 'bind', 'java', 'programming', 'synonym', 'dynamic', 'dispatch', 'specifically', 'refer', 'java', 'single', 'dispatch', 'mechanism', 'virtual', 'method']"
1157,"Finally, Java can use late binding using its reflection APIs and type introspection much in the same way it is done in COM and .NET programming. Generally speaking those who only program in Java do not call this late binding. Likewise the use of ""duck typing"" techniques is frowned upon in Java programming, with abstract interfaces used instead.","['finally', 'java', 'use', 'late', 'binding', 'reflection', 'api', 'type', 'introspection', 'way', 'com', '.net', 'programming', 'generally', 'speak', 'program', 'java', 'late', 'bind', 'likewise', 'use', 'duck', 'typing', 'technique', 'frown', 'java', 'programming', 'abstract', 'interface', 'instead']"
1158,"Oracle, the current owner of Java, has been known to use the term late binding in the ""duck typing"" sense when discussing both Java and other languages in the same documentation.9","['oracle', 'current', 'owner', 'java', 'know', 'use', 'term', 'late', 'bind', 'duck', 'typing', 'sense', 'discuss', 'java', 'language', 'documentation']"
1159,"When using early binding between Ada and a database-stored procedure, a timestamp is checked to verify that the stored procedure has not changed since the code was compiled. This allows for faster executions and prevents the application from running against the wrong version of a stored procedure.10","['early', 'binding', 'ada', 'database', 'store', 'procedure', 'timestamp', 'check', 'verify', 'store', 'procedure', 'change', 'code', 'compile', 'allow', 'fast', 'execution', 'prevent', 'application', 'run', 'wrong', 'version', 'store', 'procedure']"
1160,"When using late binding the timestamp check is not performed, and the stored procedure is executed via an anonymous PL/SQL block. While this can be slower, it removes the need to recompile all of the client applications when a stored procedure changes.","['late', 'bind', 'timestamp', 'check', 'perform', 'stored', 'procedure', 'execute', 'anonymous', 'sql', 'block', 'slow', 'remove', 'need', 'recompile', 'client', 'application', 'store', 'procedure', 'change']"
1161,"This distinction appears to be unique to PL/SQL and Ada. Other languages that can call PL/SQL procedures, as well as other database engines, only use late binding.","['distinction', 'appear', 'unique', 'sql', 'ada', 'language', 'sql', 'procedure', 'database', 'engine', 'use', 'late', 'bind']"
1162,"Late binding has poorer performance than an early bound method call. Under most implementations, the correct method address must be looked up by name with each call, requiring relatively expensive dictionary search and possibly overload resolution logic, yet it is generally negligible on modern computers.","['late', 'binding', 'poor', 'performance', 'early', 'bind', 'method', 'implementation', 'correct', 'method', 'address', 'look', 'require', 'relatively', 'expensive', 'dictionary', 'search', 'possibly', 'overload', 'resolution', 'logic', 'generally', 'negligible', 'modern', 'computer']"
1163,"For some compilers, late binding may prevent the use of static type checking. When making a late bound call, the compiler has to assume that the method exists. This means a simple spelling error can cause a run-time error to be thrown. The exact exception varies by language, but it is usually named something like ""Method Not Found"" or ""Method Missing"". Modern compilers avoid this by ensuring that every possible call must have an implementation during compilation.","['compiler', 'late', 'binding', 'prevent', 'use', 'static', 'type', 'checking', 'make', 'late', 'bind', 'compiler', 'assume', 'method', 'exist', 'mean', 'simple', 'spelling', 'error', 'cause', 'run', 'time', 'error', 'throw', 'exact', 'exception', 'vary', 'language', 'usually', 'name', 'like', 'method', 'find', 'method', 'missing', 'modern', 'compiler', 'avoid', 'ensure', 'possible', 'implementation', 'compilation']"
1164,"Late binding may prevent forms of static analysis needed by an integrated development environment IDE. For example, an IDE's ""go to definition"" feature may not function on a late-bound call, if the IDE has no way to know which class the call may refer to. A modern IDE easily solves this especially for object-oriented languages since a late-bound method always specifies an interface or base class, which is where ""go to definition"" leads, and ""find all references"" can be used to find all implementations or overrides.","['late', 'bind', 'prevent', 'form', 'static', 'analysis', 'need', 'integrate', 'development', 'environment', 'ide', 'example', 'ide', 'definition', 'feature', 'function', 'late', 'bind', 'ide', 'way', 'know', 'class', 'refer', 'modern', 'ide', 'easily', 'solve', 'especially', 'object', 'orient', 'language', 'late', 'bind', 'method', 'specify', 'interface', 'base', 'class', 'definition', 'lead', 'find', 'reference', 'find', 'implementation', 'override']"
1165,"A similar problem is that possible lack of typing information may prevent the creation of dependency graphs. However, other programming methods such as abstract interfaces can result in the same problems. A modern IDE can create such dependency graphs as easily as it handles ""find all references"".","['similar', 'problem', 'possible', 'lack', 'type', 'information', 'prevent', 'creation', 'dependency', 'graph', 'programming', 'method', 'abstract', 'interface', 'result', 'problem', 'modern', 'ide', 'create', 'dependency', 'graph', 'easily', 'handles', 'find', 'reference']"
1166,"In computer science, dynamic dispatch is the process of selecting which implementation of a polymorphic operation method or function to call at run time. It is commonly employed in, and considered a prime characteristic of, object-oriented programming OOP languages and systems.1","['computer', 'science', 'dynamic', 'dispatch', 'process', 'select', 'implementation', 'polymorphic', 'operation', 'method', 'function', 'run', 'time', 'commonly', 'employ', 'consider', 'prime', 'characteristic', 'object', 'orient', 'programming', 'oop', 'language', 'systems']"
1167,"Object-oriented systems model a problem as a set of interacting objects that enact operations referred to by name. Polymorphism is the phenomenon wherein somewhat interchangeable objects each expose an operation of the same name but possibly differing in behavior. As an example, a .mw-parser-output .monospacedfont-family:monospace,monospaceFile object and a Database object both have a StoreRecord method that can be used to write a personnel record to storage. Their implementations differ. A program holds a reference to an object which may be either a File object or a Database object. Which it is may have been determined by a run-time setting, and at this stage, the program may not know or care which. When the program calls StoreRecord on the object, something needs to choose which behavior gets enacted. If one thinks of OOP as sending messages to objects, then in this example the program sends a StoreRecord message to an object of unknown type, leaving it to the run-time support system to dispatch the message to the right object. The object enacts whichever behavior it implements.2","['object', 'orient', 'system', 'model', 'problem', 'set', 'interact', 'object', 'enact', 'operation', 'refer', 'polymorphism', 'phenomenon', 'somewhat', 'interchangeable', 'object', 'expose', 'operation', 'possibly', 'differ', 'behavior', 'example', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacefile', 'object', 'database', 'object', 'storerecord', 'method', 'write', 'personnel', 'record', 'storage', 'implementation', 'differ', 'program', 'hold', 'reference', 'object', 'file', 'object', 'database', 'object', 'determine', 'run', 'time', 'setting', 'stage', 'program', 'know', 'care', 'program', 'call', 'storerecord', 'object', 'need', 'choose', 'behavior', 'gets', 'enact', 'think', 'oop', 'send', 'message', 'object', 'example', 'program', 'send', 'storerecord', 'message', 'object', 'unknown', 'type', 'leave', 'run', 'time', 'support', 'system', 'dispatch', 'message', 'right', 'object', 'object', 'enact', 'whichever', 'behavior', 'implements']"
1168,"Dynamic dispatch contrasts with static dispatch, in which the implementation of a polymorphic operation is selected at compile time. The purpose of dynamic dispatch is to defer the selection of an appropriate implementation until the run time type of a parameter or multiple parameters is known.","['dynamic', 'dispatch', 'contrast', 'static', 'dispatch', 'implementation', 'polymorphic', 'operation', 'select', 'compile', 'time', 'purpose', 'dynamic', 'dispatch', 'defer', 'selection', 'appropriate', 'implementation', 'run', 'time', 'type', 'parameter', 'multiple', 'parameter', 'know']"
1169,"Dynamic dispatch is different from late binding also known as dynamic binding. Name binding associates a name with an operation. A polymorphic operation has several implementations, all associated with the same name. Bindings can be made at compile time or with late binding at run time. With dynamic dispatch, one particular implementation of an operation is chosen at run time. While dynamic dispatch does not imply late binding, late binding does imply dynamic dispatch, since the implementation of a late-bound operation is not known until run time.citation needed","['dynamic', 'dispatch', 'different', 'late', 'binding', 'know', 'dynamic', 'bind', 'bind', 'associate', 'operation', 'polymorphic', 'operation', 'implementation', 'associate', 'binding', 'compile', 'time', 'late', 'binding', 'run', 'time', 'dynamic', 'dispatch', 'particular', 'implementation', 'operation', 'choose', 'run', 'time', 'dynamic', 'dispatch', 'imply', 'late', 'bind', 'late', 'binding', 'imply', 'dynamic', 'dispatch', 'implementation', 'late', 'bind', 'operation', 'know', 'run', 'time.citation', 'need']"
1170,"The choice of which version of a method to call may be based either on a single object, or on a combination of objects. The former is called single dispatch and is directly supported by common object-oriented languages such as Smalltalk, C++, Java, C#, Objective-C, Swift, JavaScript, and Python. In these and similar languages, one may call a method for division with syntax that resembles","['choice', 'version', 'method', 'base', 'single', 'object', 'combination', 'object', 'call', 'single', 'dispatch', 'directly', 'support', 'common', 'object', 'orient', 'language', 'smalltalk', 'c++', 'java', 'objective', 'swift', 'javascript', 'python', 'similar', 'language', 'method', 'division', 'syntax', 'resemble']"
1171,"where the parameters are optional. This is thought of as sending a message named divide with parameter divisor to dividend. An implementation will be chosen based only on dividend's type perhaps rational, floating point, matrix, disregarding the type or value of divisor.","['parameter', 'optional', 'think', 'send', 'message', 'name', 'divide', 'parameter', 'divisor', 'dividend', 'implementation', 'choose', 'base', 'dividend', 'type', 'rational', 'float', 'point', 'matrix', 'disregard', 'type', 'value', 'divisor']"
1172,"By contrast, some languages dispatch methods or functions based on the combination of operands; in the division case, the types of the dividend and divisor together determine which divide operation will be performed. This is known as multiple dispatch. Examples of languages that support multiple dispatch are Common Lisp, Dylan, and Julia.","['contrast', 'language', 'dispatch', 'method', 'function', 'base', 'combination', 'operand', 'division', 'case', 'type', 'dividend', 'divisor', 'determine', 'divide', 'operation', 'perform', 'know', 'multiple', 'dispatch', 'example', 'language', 'support', 'multiple', 'dispatch', 'common', 'lisp', 'dylan', 'julia']"
1173,A language may be implemented with different dynamic dispatch mechanisms. The choices of the dynamic dispatch mechanism offered by a language to a large extent alter the programming paradigms that are available or are most natural to use within a given language.,"['language', 'implement', 'different', 'dynamic', 'dispatch', 'mechanism', 'choice', 'dynamic', 'dispatch', 'mechanism', 'offer', 'language', 'large', 'extent', 'alter', 'programming', 'paradigms', 'available', 'natural', 'use', 'give', 'language']"
1174,"Normally, in a typed language, the dispatch mechanism will be performed based on the type of the arguments most commonly based on the type of the receiver of a message. Languages with weak or no typing systems often carry a dispatch table as part of the object data for each object. This allows instance behaviour as each instance may map a given message to a separate method.","['normally', 'typed', 'language', 'dispatch', 'mechanism', 'perform', 'base', 'type', 'argument', 'commonly', 'base', 'type', 'receiver', 'message', 'language', 'weak', 'typing', 'system', 'carry', 'dispatch', 'table', 'object', 'datum', 'object', 'allow', 'instance', 'behaviour', 'instance', 'map', 'give', 'message', 'separate', 'method']"
1175,Some languages offer a hybrid approach.,"['language', 'offer', 'hybrid', 'approach']"
1176,Dynamic dispatch will always incur an overhead so some languages offer static dispatch for particular methods.,"['dynamic', 'dispatch', 'incur', 'overhead', 'language', 'offer', 'static', 'dispatch', 'particular', 'method']"
1177,C++ uses early binding and offers both dynamic and static dispatch. The default form of dispatch is static. To get dynamic dispatch the programmer must declare a method as virtual.,"['c++', 'use', 'early', 'bind', 'offer', 'dynamic', 'static', 'dispatch', 'default', 'form', 'dispatch', 'static', 'dynamic', 'dispatch', 'programmer', 'declare', 'method', 'virtual']"
1178,"C++ compilers typically implement dynamic dispatch with a data structure called a virtual function table vtable that defines the name-to-implementation mapping for a given class as a set of member function pointers. This is purely an implementation detail; the C++ specification does not mention vtables. Instances of that type will then store a pointer to this table as part of their instance data. This is complicated when multiple inheritance is used. Since C++ does not support late binding, the virtual table in a C++ object cannot be modified at run-time, which limits the potential set of dispatch targets to a finite set chosen at compile time.","['c++', 'compiler', 'typically', 'implement', 'dynamic', 'dispatch', 'data', 'structure', 'call', 'virtual', 'function', 'table', 'vtable', 'define', 'implementation', 'mapping', 'give', 'class', 'set', 'member', 'function', 'pointer', 'purely', 'implementation', 'detail', 'c++', 'specification', 'mention', 'vtable', 'instance', 'type', 'store', 'pointer', 'table', 'instance', 'datum', 'complicated', 'multiple', 'inheritance', 'c++', 'support', 'late', 'bind', 'virtual', 'table', 'c++', 'object', 'modify', 'run', 'time', 'limit', 'potential', 'set', 'dispatch', 'target', 'finite', 'set', 'choose', 'compile', 'time']"
1179,Type overloading does not produce dynamic dispatch in C++ as the language considers the types of the message parameters part of the formal message name. This means that the message name the programmer sees is not the formal name used for binding.,"['type', 'overloading', 'produce', 'dynamic', 'dispatch', 'c++', 'language', 'consider', 'type', 'message', 'parameter', 'formal', 'message', 'mean', 'message', 'programmer', 'see', 'formal', 'bind']"
1180,"In Go, Rust and Nim, a more versatile variation of early binding is used. Vtable pointers are carried with object references as 'fat pointers' 'interfaces' in Go, or 'trait objects' in Rust.citation needed","['rust', 'nim', 'versatile', 'variation', 'early', 'binding', 'vtable', 'pointer', 'carry', 'object', 'reference', 'fat', 'pointer', 'interface', 'trait', 'object', 'rust.citation', 'need']"
1181,"This decouples the supported interfaces from the underlying data structures. Each compiled library needn't know the full range of interfaces supported in order to correctly use a type, just the specific vtable layout that they require. Code can pass around different interfaces to the same piece of data to different functions. This versatility comes at the expense of extra data with each object reference, which is problematic if many such references are stored persistently.","['decouple', 'support', 'interface', 'underlying', 'data', 'structure', 'compile', 'library', 'need', 'know', 'range', 'interface', 'support', 'order', 'correctly', 'use', 'type', 'specific', 'vtable', 'layout', 'require', 'code', 'pass', 'different', 'interface', 'piece', 'datum', 'different', 'function', 'versatility', 'come', 'expense', 'extra', 'datum', 'object', 'reference', 'problematic', 'reference', 'store', 'persistently']"
1182,"The term fat pointer simply refers to a pointer with additional associated information. The additional information may be a vtable pointer for dynamic dispatch described above, but is more commonly the associated object's size to describe e.g. a slice.citation needed","['term', 'fat', 'pointer', 'simply', 'refer', 'pointer', 'additional', 'associated', 'information', 'additional', 'information', 'vtable', 'pointer', 'dynamic', 'dispatch', 'describe', 'commonly', 'associated', 'object', 'size', 'describe', 'e.g.', 'slice.citation', 'need']"
1183,"Smalltalk uses a type-based message dispatcher. Each instance has a single type whose definition contains the methods. When an instance receives a message, the dispatcher looks up the corresponding method in the message-to-method map for the type and then invokes the method.","['smalltalk', 'use', 'type', 'base', 'message', 'dispatcher', 'instance', 'single', 'type', 'definition', 'contain', 'method', 'instance', 'receive', 'message', 'dispatcher', 'look', 'corresponding', 'method', 'message', 'method', 'map', 'type', 'invoke', 'method']"
1184,"Because a type can have a chain of base types, this look-up can be expensive. A naive implementation of Smalltalk's mechanism would seem to have a significantly higher overhead than that of C++ and this overhead would be incurred for each and every message that an object receives.","['type', 'chain', 'base', 'type', 'look', 'expensive', 'naive', 'implementation', 'smalltalk', 'mechanism', 'significantly', 'high', 'overhead', 'c++', 'overhead', 'incur', 'message', 'object', 'receive']"
1185,"Real Smalltalk implementations often use a technique known as inline caching3 that makes method dispatch very fast. Inline caching basically stores the previous destination method address and object class of the call site or multiple pairs for multi-way caching. The cached method is initialized with the most common target method or just the cache miss handler, based on the method selector. When the method call site is reached during execution, it just calls the address in the cache. In a dynamic code generator, this call is a direct call as the direct address is back patched by cache miss logic. Prologue code in the called method then compares the cached class with the actual object class, and if they don't match, execution branches to a cache miss handler to find the correct method in the class. A fast implementation may have multiple cache entries and it often only takes a couple of instructions to get execution to the correct method on an initial cache miss. The common case will be a cached class match, and execution will just continue in the method.","['real', 'smalltalk', 'implementation', 'use', 'technique', 'know', 'inline', 'caching3', 'make', 'method', 'dispatch', 'fast', 'inline', 'cache', 'basically', 'store', 'previous', 'destination', 'method', 'address', 'object', 'class', 'site', 'multiple', 'pair', 'multi', 'way', 'cache', 'cached', 'method', 'initialize', 'common', 'target', 'method', 'cache', 'miss', 'handler', 'base', 'method', 'selector', 'method', 'site', 'reach', 'execution', 'call', 'address', 'cache', 'dynamic', 'code', 'generator', 'direct', 'direct', 'address', 'patch', 'cache', 'miss', 'logic', 'prologue', 'code', 'call', 'method', 'compare', 'cached', 'class', 'actual', 'object', 'class', 'match', 'execution', 'branch', 'cache', 'miss', 'handler', 'find', 'correct', 'method', 'class', 'fast', 'implementation', 'multiple', 'cache', 'entry', 'take', 'couple', 'instruction', 'execution', 'correct', 'method', 'initial', 'cache', 'miss', 'common', 'case', 'cached', 'class', 'match', 'execution', 'continue', 'method']"
1186,"Out-of-line caching can also be used in the method invocation logic, using the object class and method selector. In one design, the class and method selector are hashed, and used as an index into a method dispatch cache table.","['line', 'caching', 'method', 'invocation', 'logic', 'object', 'class', 'method', 'selector', 'design', 'class', 'method', 'selector', 'hash', 'index', 'method', 'dispatch', 'cache', 'table']"
1187,"As Smalltalk is a reflective language, many implementations allow mutating individual objects into objects with dynamically generated method lookup tables. This allows altering object behavior on a per object basis. A whole category of languages known as prototype-based languages has grown from this, the most famous of which are Self and JavaScript. Careful design of the method dispatch caching allows even prototype-based languages to have high-performance method dispatch.","['smalltalk', 'reflective', 'language', 'implementation', 'allow', 'mutate', 'individual', 'object', 'object', 'dynamically', 'generate', 'method', 'lookup', 'table', 'allow', 'alter', 'object', 'behavior', 'object', 'basis', 'category', 'language', 'know', 'prototype', 'base', 'language', 'grow', 'famous', 'self', 'javascript', 'careful', 'design', 'method', 'dispatch', 'caching', 'allow', 'prototype', 'base', 'language', 'high', 'performance', 'method', 'dispatch']"
1188,"Many other dynamically typed languages, including Python, Ruby, Objective-C and Groovy use similar approaches.","['dynamically', 'type', 'language', 'include', 'python', 'ruby', 'objective', 'groovy', 'use', 'similar', 'approach']"
1189,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1190,"In computer programming, a type system is a logical system comprising a set of rules that assigns a property called a type to every ""term"" a word, phrase, or other set of symbols. Usually the terms are various constructs of a computer program, such as variables, expressions, functions, or modules.1 A type system dictates the operations that can be performed on a term. For variables, the type system determines the allowed values of that term. Type systems formalize and enforce the otherwise implicit categories the programmer uses for algebraic data types, data structures, or other components e.g. ""string"", ""array of float"", ""function returning boolean"".","['computer', 'programming', 'type', 'system', 'logical', 'system', 'comprise', 'set', 'rule', 'assign', 'property', 'call', 'type', 'term', 'word', 'phrase', 'set', 'symbol', 'usually', 'term', 'construct', 'computer', 'program', 'variable', 'expression', 'function', 'modules', 'type', 'system', 'dictate', 'operation', 'perform', 'term', 'variable', 'type', 'system', 'determine', 'allow', 'value', 'term', 'type', 'system', 'formalize', 'enforce', 'implicit', 'category', 'programmer', 'use', 'algebraic', 'datum', 'type', 'datum', 'structure', 'component', 'e.g.', 'string', 'array', 'float', 'function', 'return', 'boolean']"
1191,"Type systems are often specified as part of programming languages and built into interpreters and compilers, although the type system of a language can be extended by optional tools that perform added checks using the language's original type syntax and grammar. The main purpose of a type system in a programming language is to reduce possibilities for bugs in computer programs due to type errors.2 The given type system in question determines what constitutes a type error, but in general, the aim is to prevent operations expecting a certain kind of value from being used with values for which that operation does not make sense validity errors. Type systems allow defining interfaces between different parts of a computer program, and then checking that the parts have been connected in a consistent way. This checking can happen statically at compile time, dynamically at run time, or as a combination of both. Type systems have other purposes as well, such as expressing business rules, enabling certain compiler optimizations, allowing for multiple dispatch, and providing a form of documentation.","['type', 'system', 'specify', 'programming', 'language', 'build', 'interpreter', 'compiler', 'type', 'system', 'language', 'extend', 'optional', 'tool', 'perform', 'add', 'check', 'language', 'original', 'type', 'syntax', 'grammar', 'main', 'purpose', 'type', 'system', 'programming', 'language', 'reduce', 'possibility', 'bug', 'computer', 'program', 'type', 'errors', 'give', 'type', 'system', 'question', 'determine', 'constitute', 'type', 'error', 'general', 'aim', 'prevent', 'operation', 'expect', 'certain', 'kind', 'value', 'value', 'operation', 'sense', 'validity', 'error', 'type', 'system', 'allow', 'define', 'interface', 'different', 'part', 'computer', 'program', 'check', 'part', 'connect', 'consistent', 'way', 'checking', 'happen', 'statically', 'compile', 'time', 'dynamically', 'run', 'time', 'combination', 'type', 'system', 'purpose', 'express', 'business', 'rule', 'enable', 'certain', 'compiler', 'optimization', 'allow', 'multiple', 'dispatch', 'provide', 'form', 'documentation']"
1192,"An example of a simple type system is that of the C language. The portions of a C program are the function definitions. One function is invoked by another function. The interface of a function states the name of the function and a list of parameters that are passed to the function's code. The code of an invoking function states the name of the invoked, along with the names of variables that hold values to pass to it. During execution, the values are placed into temporary storage, then execution jumps to the code of the invoked function. The invoked function's code accesses the values and makes use of them. If the instructions inside the function are written with the assumption of receiving an integer value, but the calling code passed a floating-point value, then the wrong result will be computed by the invoked function. The C compiler checks the types of the arguments passed to a function when it is called against the types of the parameters declared in the function's definition. If the types do not match, the compiler throws a compile-time error.","['example', 'simple', 'type', 'system', 'language', 'portion', 'program', 'function', 'definition', 'function', 'invoke', 'function', 'interface', 'function', 'state', 'function', 'list', 'parameter', 'pass', 'function', 'code', 'code', 'invoke', 'function', 'state', 'invoked', 'name', 'variable', 'hold', 'value', 'pass', 'execution', 'value', 'place', 'temporary', 'storage', 'execution', 'jump', 'code', 'invoke', 'function', 'invoked', 'function', 'code', 'access', 'value', 'make', 'use', 'instruction', 'inside', 'function', 'write', 'assumption', 'receive', 'integer', 'value', 'call', 'code', 'pass', 'float', 'point', 'value', 'wrong', 'result', 'compute', 'invoke', 'function', 'compiler', 'check', 'type', 'argument', 'pass', 'function', 'call', 'type', 'parameter', 'declare', 'function', 'definition', 'type', 'match', 'compiler', 'throw', 'compile', 'time', 'error']"
1193,"A compiler may also use the static type of a value to optimize the storage it needs and the choice of algorithms for operations on the value. In many C compilers the float data type, for example, is represented in 32 bits, in accord with the IEEE specification for single-precision floating point numbers. They will thus use floating-point-specific microprocessor operations on those values floating-point addition, multiplication, etc..","['compiler', 'use', 'static', 'type', 'value', 'optimize', 'storage', 'need', 'choice', 'algorithm', 'operation', 'value', 'compiler', 'float', 'datum', 'type', 'example', 'represent', 'bit', 'accord', 'ieee', 'specification', 'single', 'precision', 'float', 'point', 'number', 'use', 'float', 'point', 'specific', 'microprocessor', 'operation', 'value', 'float', 'point', 'addition', 'multiplication', 'etc']"
1194,"The depth of type constraints and the manner of their evaluation affect the typing of the language. A programming language may further associate an operation with various resolutions for each type, in the case of type polymorphism. Type theory is the study of type systems. The concrete types of some programming languages, such as integers and strings, depend on practical issues of computer architecture, compiler implementation, and language design.","['depth', 'type', 'constraint', 'manner', 'evaluation', 'affect', 'typing', 'language', 'programming', 'language', 'associate', 'operation', 'resolution', 'type', 'case', 'type', 'polymorphism', 'type', 'theory', 'study', 'type', 'system', 'concrete', 'type', 'programming', 'language', 'integer', 'string', 'depend', 'practical', 'issue', 'computer', 'architecture', 'compiler', 'implementation', 'language', 'design']"
1195,"Formally, type theory studies type systems. A programming language must have the opportunity to type check using the type system whether at compile time or runtime, manually annotated or automatically inferred. As Mark Manasse concisely put it:3","['formally', 'type', 'theory', 'study', 'type', 'system', 'programming', 'language', 'opportunity', 'type', 'check', 'type', 'system', 'compile', 'time', 'runtime', 'manually', 'annotate', 'automatically', 'infer', 'mark', 'manasse', 'concisely', 'it']"
1196,The fundamental problem addressed by a type theory is to ensure that programs have meaning. The fundamental problem caused by a type theory is that meaningful programs may not have meanings ascribed to them. The quest for richer type systems results from this tension.,"['fundamental', 'problem', 'address', 'type', 'theory', 'ensure', 'program', 'meaning', 'fundamental', 'problem', 'cause', 'type', 'theory', 'meaningful', 'program', 'meaning', 'ascribe', 'quest', 'rich', 'type', 'system', 'result', 'tension']"
1197,"Assigning a data type, termed typing, gives meaning to a sequence of bits such as a value in memory or some object such as a variable. The hardware of a general purpose computer is unable to discriminate between for example a memory address and an instruction code, or between a character, an integer, or a floating-point number, because it makes no intrinsic distinction between any of the possible values that a sequence of bits might mean.note 1 Associating a sequence of bits with a type conveys that meaning to the programmable hardware to form a symbolic system composed of that hardware and some program.","['assign', 'data', 'type', 'term', 'typing', 'give', 'meaning', 'sequence', 'bit', 'value', 'memory', 'object', 'variable', 'hardware', 'general', 'purpose', 'computer', 'unable', 'discriminate', 'example', 'memory', 'address', 'instruction', 'code', 'character', 'integer', 'float', 'point', 'number', 'make', 'intrinsic', 'distinction', 'possible', 'value', 'sequence', 'bit', 'mean.note', 'associate', 'sequence', 'bit', 'type', 'convey', 'mean', 'programmable', 'hardware', 'form', 'symbolic', 'system', 'compose', 'hardware', 'program']"
1198,"A program associates each value with at least one specific type, but it also can occur that one value is associated with many subtypes. Other entities, such as objects, modules, communication channels, and dependencies can become associated with a type. Even a type can become associated with a type. An implementation of a type system could in theory associate identifications called data type a type of a value, class a type of an object, and kind a type of a type, or metatype. These are the abstractions that typing can go through, on a hierarchy of levels contained in a system.","['program', 'associate', 'value', 'specific', 'type', 'occur', 'value', 'associate', 'subtype', 'entity', 'object', 'module', 'communication', 'channel', 'dependency', 'associate', 'type', 'type', 'associate', 'type', 'implementation', 'type', 'system', 'theory', 'associate', 'identification', 'call', 'datum', 'type', 'type', 'value', 'class', 'type', 'object', 'kind', 'type', 'type', 'metatype', 'abstraction', 'typing', 'hierarchy', 'level', 'contain', 'system']"
1199,"When a programming language evolves a more elaborate type system, it gains a more finely grained rule set than basic type checking, but this comes at a price when the type inferences and other properties become undecidable, and when more attention must be paid by the programmer to annotate code or to consider computer-related operations and functioning. It is challenging to find a sufficiently expressive type system that satisfies all programming practices in a type safe manner.","['programming', 'language', 'evolve', 'elaborate', 'type', 'system', 'gain', 'finely', 'grain', 'rule', 'set', 'basic', 'type', 'checking', 'come', 'price', 'type', 'inference', 'property', 'undecidable', 'attention', 'pay', 'programmer', 'annotate', 'code', 'consider', 'computer', 'relate', 'operation', 'functioning', 'challenge', 'find', 'sufficiently', 'expressive', 'type', 'system', 'satisfy', 'programming', 'practice', 'type', 'safe', 'manner']"
1200,"A programming language compiler can also implement a dependent type or an effect system, which enables even more program specifications to be verified by a type checker. Beyond simple value-type pairs, a virtual ""region"" of code is associated with an ""effect"" component describing what is being done with what, and enabling for example to ""throw"" an error report. Thus the symbolic system may be a type and effect system, which endows it with more safety checking than type checking alone.","['programming', 'language', 'compiler', 'implement', 'dependent', 'type', 'effect', 'system', 'enable', 'program', 'specification', 'verify', 'type', 'checker', 'simple', 'value', 'type', 'pair', 'virtual', 'region', 'code', 'associate', 'effect', 'component', 'describe', 'enable', 'example', 'throw', 'error', 'report', 'symbolic', 'system', 'type', 'effect', 'system', 'endow', 'safety', 'checking', 'type', 'checking']"
1201,"Whether automated by the compiler or specified by a programmer, a type system makes program behavior illegal if outside the type-system rules. Advantages provided by programmer-specified type systems include:","['automate', 'compiler', 'specify', 'programmer', 'type', 'system', 'make', 'program', 'behavior', 'illegal', 'outside', 'type', 'system', 'rule', 'advantage', 'provide', 'programmer', 'specify', 'type', 'system', 'include']"
1202,Advantages provided by compiler-specified type systems include:,"['advantage', 'provide', 'compiler', 'specify', 'type', 'system', 'include']"
1203,"A type error is an unintended conditiona which might manifest in multiple stages of a program's development. Thus a facility for detection of the error is needed in the type system. In some languages, such as Haskell, for which type inference is automated, lint might be available to its compiler to aid in the detection of error.","['type', 'error', 'unintended', 'conditiona', 'manifest', 'multiple', 'stage', 'program', 'development', 'facility', 'detection', 'error', 'need', 'type', 'system', 'language', 'haskell', 'type', 'inference', 'automate', 'lint', 'available', 'compiler', 'aid', 'detection', 'error']"
1204,"Type safety contributes to program correctness, but might only guarantee correctness at the cost of making the type checking itself an undecidable problem as in the Halting problem. In a type system with automated type checking a program may prove to run incorrectly yet produce no compiler errors. Division by zero is an unsafe and incorrect operation, but a type checker which only runs at compile time does not scan for division by zero in most languages; that division would surface as a runtime error. To prove the absence of these defects, other kinds of formal methods, collectively known as program analyses, are in common use. Alternatively, a sufficiently expressive type system, such as in dependently-typed languages, can prevent these kinds of errors for example, expressing the type of non-zero numbers. In addition software testing is an empirical method for finding errors that such a type checker would not detect.","['type', 'safety', 'contribute', 'program', 'correctness', 'guarantee', 'correctness', 'cost', 'make', 'type', 'check', 'undecidable', 'problem', 'halting', 'problem', 'type', 'system', 'automate', 'type', 'check', 'program', 'prove', 'run', 'incorrectly', 'produce', 'compiler', 'error', 'division', 'zero', 'unsafe', 'incorrect', 'operation', 'type', 'checker', 'run', 'compile', 'time', 'scan', 'division', 'zero', 'language', 'division', 'surface', 'runtime', 'error', 'prove', 'absence', 'defect', 'kind', 'formal', 'method', 'collectively', 'know', 'program', 'analysis', 'common', 'use', 'alternatively', 'sufficiently', 'expressive', 'type', 'system', 'dependently', 'type', 'language', 'prevent', 'kind', 'error', 'example', 'express', 'type', 'non', 'zero', 'number', 'addition', 'software', 'testing', 'empirical', 'method', 'find', 'error', 'type', 'checker', 'detect']"
1205,"The process of verifying and enforcing the constraints of types—type checking—may occur at compile time a static check or at run-time. If a language specification requires its typing rules strongly i.e., more or less allowing only those automatic type conversions that do not lose information, one can refer to the process as strongly typed, if not, as weakly typed. The terms are not usually used in a strict sense.","['process', 'verifying', 'enforce', 'constraint', 'type', 'type', 'checking', 'occur', 'compile', 'time', 'static', 'check', 'run', 'time', 'language', 'specification', 'require', 'typing', 'rule', 'strongly', 'i.e.', 'allow', 'automatic', 'type', 'conversion', 'lose', 'information', 'refer', 'process', 'strongly', 'type', 'weakly', 'typed', 'term', 'usually', 'strict', 'sense']"
1206,"Static type checking is the process of verifying the type safety of a program based on analysis of a program's text source code. If a program passes a static type checker, then the program is guaranteed to satisfy some set of type safety properties for all possible inputs.","['static', 'type', 'checking', 'process', 'verify', 'type', 'safety', 'program', 'base', 'analysis', 'program', 'text', 'source', 'code', 'program', 'pass', 'static', 'type', 'checker', 'program', 'guarantee', 'satisfy', 'set', 'type', 'safety', 'property', 'possible', 'input']"
1207,"Static type checking can be considered a limited form of program verification see type safety, and in a type-safe language, can be considered also an optimization. If a compiler can prove that a program is well-typed, then it does not need to emit dynamic safety checks, allowing the resulting compiled binary to run faster and to be smaller.","['static', 'type', 'checking', 'consider', 'limited', 'form', 'program', 'verification', 'type', 'safety', 'type', 'safe', 'language', 'consider', 'optimization', 'compiler', 'prove', 'program', 'type', 'need', 'emit', 'dynamic', 'safety', 'check', 'allow', 'result', 'compile', 'binary', 'run', 'fast', 'small']"
1208,"Static type checking for Turing-complete languages is inherently conservative. That is, if a type system is both sound meaning that it rejects all incorrect programs and decidable meaning that it is possible to write an algorithm that determines whether a program is well-typed, then it must be incomplete meaning there are correct programs, which are also rejected, even though they do not encounter runtime errors.6 For example, consider a program containing the code:","['static', 'type', 'checking', 'turing', 'complete', 'language', 'inherently', 'conservative', 'type', 'system', 'sound', 'mean', 'reject', 'incorrect', 'program', 'decidable', 'meaning', 'possible', 'write', 'algorithm', 'determine', 'program', 'type', 'incomplete', 'meaning', 'correct', 'program', 'reject', 'encounter', 'runtime', 'errors', 'example', 'consider', 'program', 'contain', 'code']"
1209,"Even if the expression <complex test> always evaluates to true at run-time, most type checkers will reject the program as ill-typed, because it is difficult if not impossible for a static analyzer to determine that the else branch will not be taken.7 Consequently, a static type checker will quickly detect type errors in rarely used code paths. Without static type checking, even code coverage tests with 100% coverage may be unable to find such type errors. The tests may fail to detect such type errors, because the combination of all places where values are created and all places where a certain value is used must be taken into account.","['expression', 'complex', 'test', 'evaluate', 'true', 'run', 'time', 'type', 'checker', 'reject', 'program', 'ill', 'typed', 'difficult', 'impossible', 'static', 'analyzer', 'determine', 'branch', 'taken', 'consequently', 'static', 'type', 'checker', 'quickly', 'detect', 'type', 'error', 'rarely', 'code', 'path', 'static', 'type', 'checking', 'code', 'coverage', 'test', '100', 'coverage', 'unable', 'find', 'type', 'error', 'test', 'fail', 'detect', 'type', 'error', 'combination', 'place', 'value', 'create', 'place', 'certain', 'value', 'take', 'account']"
1210,"A number of useful and common programming language features cannot be checked statically, such as downcasting. Thus, many languages will have both static and dynamic type checking; the static type checker verifies what it can, and dynamic checks verify the rest.","['number', 'useful', 'common', 'programming', 'language', 'feature', 'check', 'statically', 'downcaste', 'language', 'static', 'dynamic', 'type', 'checking', 'static', 'type', 'checker', 'verifie', 'dynamic', 'check', 'verify', 'rest']"
1211,"Many languages with static type checking provide a way to bypass the type checker. Some languages allow programmers to choose between static and dynamic type safety. For example, C# distinguishes between statically-typed and dynamically-typed variables. Uses of the former are checked statically, whereas uses of the latter are checked dynamically. Other languages allow writing code that is not type-safe; for example, in C, programmers can freely cast a value between any two types that have the same size, effectively subverting the type concept.","['language', 'static', 'type', 'checking', 'provide', 'way', 'bypass', 'type', 'checker', 'language', 'allow', 'programmer', 'choose', 'static', 'dynamic', 'type', 'safety', 'example', 'distinguishe', 'statically', 'typed', 'dynamically', 'type', 'variable', 'use', 'check', 'statically', 'use', 'check', 'dynamically', 'language', 'allow', 'write', 'code', 'type', 'safe', 'example', 'programmer', 'freely', 'cast', 'value', 'type', 'size', 'effectively', 'subvert', 'type', 'concept']"
1212,"For a list of languages with static type checking, see the category for statically-typed languages.","['list', 'language', 'static', 'type', 'checking', 'category', 'statically', 'typed', 'language']"
1213,"Dynamic type checking is the process of verifying the type safety of a program at runtime. Implementations of dynamically type-checked languages generally associate each runtime object with a type tag i.e., a reference to a type containing its type information. This runtime type information RTTI can also be used to implement dynamic dispatch, late binding, downcasting, reflection, and similar features.","['dynamic', 'type', 'checking', 'process', 'verify', 'type', 'safety', 'program', 'runtime', 'implementation', 'dynamically', 'type', 'check', 'language', 'generally', 'associate', 'runtime', 'object', 'type', 'tag', 'i.e.', 'reference', 'type', 'contain', 'type', 'information', 'runtime', 'type', 'information', 'rtti', 'implement', 'dynamic', 'dispatch', 'late', 'bind', 'downcaste', 'reflection', 'similar', 'feature']"
1214,"Most type-safe languages include some form of dynamic type checking, even if they also have a static type checker.citation needed 8 The reason for this is that many useful features or properties are difficult or impossible to verify statically. For example, suppose that a program defines two types, A and B, where B is a subtype of A. If the program tries to convert a value of type A to type B, which is known as downcasting, then the operation is legal only if the value being converted is actually a value of type B. Thus, a dynamic check is needed to verify that the operation is safe. This requirement is one of the criticisms of downcasting.","['type', 'safe', 'language', 'include', 'form', 'dynamic', 'type', 'checking', 'static', 'type', 'checker.citation', 'need', 'reason', 'useful', 'feature', 'property', 'difficult', 'impossible', 'verify', 'statically', 'example', 'suppose', 'program', 'define', 'type', 'subtype', 'program', 'try', 'convert', 'value', 'type', 'type', 'know', 'downcaste', 'operation', 'legal', 'value', 'convert', 'actually', 'value', 'type', 'dynamic', 'check', 'need', 'verify', 'operation', 'safe', 'requirement', 'criticism', 'downcaste']"
1215,"By definition, dynamic type checking may cause a program to fail at runtime. In some programming languages, it is possible to anticipate and recover from these failures. In others, type-checking errors are considered fatal.","['definition', 'dynamic', 'type', 'checking', 'cause', 'program', 'fail', 'runtime', 'programming', 'language', 'possible', 'anticipate', 'recover', 'failure', 'type', 'checking', 'error', 'consider', 'fatal']"
1216,"Programming languages that include dynamic type checking but not static type checking are often called ""dynamically-typed programming languages"". For a list of such languages, see the category for dynamically-typed programming languages.","['programming', 'language', 'include', 'dynamic', 'type', 'checking', 'static', 'type', 'checking', 'call', 'dynamically', 'type', 'programming', 'language', 'list', 'language', 'category', 'dynamically', 'type', 'programming', 'language']"
1217,"Some languages allow both static and dynamic typing. For example, Java and some other ostensibly statically-typed languages support downcasting types to their subtypes, querying an object to discover its dynamic type and other type operations that depend on runtime type information. Another example is C++ RTTI. More generally, most programming languages include mechanisms for dispatching over different 'kinds' of data, such as disjoint unions, runtime polymorphism, and variant types. Even when not interacting with type annotations or type checking, such mechanisms are materially similar to dynamic typing implementations. See programming language for more discussion of the interactions between static and dynamic typing.","['language', 'allow', 'static', 'dynamic', 'typing', 'example', 'java', 'ostensibly', 'statically', 'type', 'language', 'support', 'downcaste', 'type', 'subtype', 'query', 'object', 'discover', 'dynamic', 'type', 'type', 'operation', 'depend', 'runtime', 'type', 'information', 'example', 'c++', 'rtti', 'generally', 'programming', 'language', 'include', 'mechanism', 'dispatch', 'different', 'kind', 'datum', 'disjoint', 'union', 'runtime', 'polymorphism', 'variant', 'type', 'interact', 'type', 'annotation', 'type', 'checking', 'mechanism', 'materially', 'similar', 'dynamic', 'type', 'implementation', 'programming', 'language', 'discussion', 'interaction', 'static', 'dynamic', 'typing']"
1218,"Objects in object-oriented languages are usually accessed by a reference whose static target type or manifest type is equal to either the object's run-time type its latent type or a supertype thereof. This is conformant with the Liskov substitution principle, which states that all operations performed on an instance of a given type can also be performed on an instance of a subtype. This concept is also known as subsumption or subtype polymorphism. In some languages subtypes may also possess covariant or contravariant return types and argument types respectively.","['object', 'object', 'orient', 'language', 'usually', 'access', 'reference', 'static', 'target', 'type', 'manifest', 'type', 'equal', 'object', 'run', 'time', 'type', 'latent', 'type', 'supertype', 'thereof', 'conformant', 'liskov', 'substitution', 'principle', 'state', 'operation', 'perform', 'instance', 'give', 'type', 'perform', 'instance', 'subtype', 'concept', 'know', 'subsumption', 'subtype', 'polymorphism', 'language', 'subtype', 'possess', 'covariant', 'contravariant', 'return', 'type', 'argument', 'type', 'respectively']"
1219,"Certain languages, for example Clojure, Common Lisp, or Cython are dynamically type checked by default, but allow programs to opt into static type checking by providing optional annotations. One reason to use such hints would be to optimize the performance of critical sections of a program. This is formalized by gradual typing. The programming environment DrRacket, a pedagogic environment based on Lisp, and a precursor of the language Racket is also soft-typed.9","['certain', 'language', 'example', 'clojure', 'common', 'lisp', 'cython', 'dynamically', 'type', 'check', 'default', 'allow', 'program', 'opt', 'static', 'type', 'checking', 'provide', 'optional', 'annotation', 'reason', 'use', 'hint', 'optimize', 'performance', 'critical', 'section', 'program', 'formalize', 'gradual', 'typing', 'programming', 'environment', 'drracket', 'pedagogic', 'environment', 'base', 'lisp', 'precursor', 'language', 'racket', 'soft', 'typed']"
1220,"Conversely, as of version 4.0, the C# language provides a way to indicate that a variable should not be statically type checked. A variable whose type is dynamic will not be subject to static type checking. Instead, the program relies on runtime type information to determine how the variable may be used.10","['conversely', 'version', '4', 'language', 'provide', 'way', 'indicate', 'variable', 'statically', 'type', 'check', 'variable', 'type', 'dynamic', 'subject', 'static', 'type', 'checking', 'instead', 'program', 'rely', 'runtime', 'type', 'information', 'determine', 'variable', 'used']"
1221,"In Rust, the dyn std::any::Any type provides dynamic typing of 'static types.11","['rust', 'dyn', 'std::any::any', 'type', 'provide', 'dynamic', 'typing', 'static', 'types']"
1222,The choice between static and dynamic typing requires certain trade-offs.,"['choice', 'static', 'dynamic', 'typing', 'require', 'certain', 'trade', 'off']"
1223,"Static typing can find type errors reliably at compile time, which increases the reliability of the delivered program. However, programmers disagree over how commonly type errors occur, resulting in further disagreements over the proportion of those bugs that are coded that would be caught by appropriately representing the designed types in code.1213 Static typing advocateswho? believe programs are more reliable when they have been well type-checked, whereas dynamic-typing advocateswho? point to distributed code that has proven reliable and to small bug databases.citation needed The value of static typing increases as the strength of the type system is increased. Advocates of dependent typing,who? implemented in languages such as Dependent ML and Epigram, have suggested that almost all bugs can be considered type errors, if the types used in a program are properly declared by the programmer or correctly inferred by the compiler.14","['static', 'typing', 'find', 'type', 'error', 'reliably', 'compile', 'time', 'increase', 'reliability', 'deliver', 'program', 'programmer', 'disagree', 'commonly', 'type', 'error', 'occur', 'result', 'disagreement', 'proportion', 'bug', 'code', 'catch', 'appropriately', 'represent', 'design', 'type', 'code', 'static', 'typing', 'advocateswho', 'believe', 'program', 'reliable', 'type', 'check', 'dynamic', 'type', 'advocateswho', 'point', 'distribute', 'code', 'prove', 'reliable', 'small', 'bug', 'databases.citation', 'need', 'value', 'static', 'typing', 'increase', 'strength', 'type', 'system', 'increase', 'advocate', 'dependent', 'typing', 'implement', 'language', 'dependent', 'epigram', 'suggest', 'bug', 'consider', 'type', 'error', 'type', 'program', 'properly', 'declare', 'programmer', 'correctly', 'infer', 'compiler']"
1224,"Static typing usually results in compiled code that executes faster. When the compiler knows the exact data types that are in use which is necessary for static verification, either through declaration or inference it can produce optimized machine code. Some dynamically-typed languages such as Common Lisp allow optional type declarations for optimization for this reason.","['static', 'typing', 'usually', 'result', 'compile', 'code', 'execute', 'fast', 'compiler', 'know', 'exact', 'data', 'type', 'use', 'necessary', 'static', 'verification', 'declaration', 'inference', 'produce', 'optimize', 'machine', 'code', 'dynamically', 'type', 'language', 'common', 'lisp', 'allow', 'optional', 'type', 'declaration', 'optimization', 'reason']"
1225,"By contrast, dynamic typing may allow compilers to run faster and interpreters to dynamically load new code, because changes to source code in dynamically-typed languages may result in less checking to perform and less code to revisit.clarification needed This too may reduce the edit-compile-test-debug cycle.","['contrast', 'dynamic', 'typing', 'allow', 'compiler', 'run', 'fast', 'interpreter', 'dynamically', 'load', 'new', 'code', 'change', 'source', 'code', 'dynamically', 'type', 'language', 'result', 'checking', 'perform', 'code', 'revisit.clarification', 'need', 'reduce', 'edit', 'compile', 'test', 'debug', 'cycle']"
1226,"Statically-typed languages that lack type inference such as C and Java prior to version 10 require that programmers declare the types that a method or function must use. This can serve as added program documentation, that is active and dynamic, instead of static. This allows a compiler to prevent it from drifting out of synchrony, and from being ignored by programmers. However, a language can be statically typed without requiring type declarations examples include Haskell, Scala, OCaml, F#, and to a lesser extent C# and C++, so explicit type declaration is not a necessary requirement for static typing in all languages.","['statically', 'type', 'language', 'lack', 'type', 'inference', 'java', 'prior', 'version', 'require', 'programmer', 'declare', 'type', 'method', 'function', 'use', 'serve', 'add', 'program', 'documentation', 'active', 'dynamic', 'instead', 'static', 'allow', 'compiler', 'prevent', 'drift', 'synchrony', 'ignore', 'programmer', 'language', 'statically', 'type', 'require', 'type', 'declaration', 'example', 'include', 'haskell', 'scala', 'ocaml', 'less', 'extent', 'c++', 'explicit', 'type', 'declaration', 'necessary', 'requirement', 'static', 'typing', 'language']"
1227,"Dynamic typing allows constructs that some simple static type checking would reject as illegal. For example, eval functions, which execute arbitrary data as code, become possible. An eval function is possible with static typing, but requires advanced uses of algebraic data types. Further, dynamic typing better accommodates transitional code and prototyping, such as allowing a placeholder data structure mock object to be transparently used in place of a full data structure usually for the purposes of experimentation and testing.","['dynamic', 'typing', 'allow', 'construct', 'simple', 'static', 'type', 'checking', 'reject', 'illegal', 'example', 'eval', 'function', 'execute', 'arbitrary', 'datum', 'code', 'possible', 'eval', 'function', 'possible', 'static', 'typing', 'require', 'advanced', 'use', 'algebraic', 'datum', 'type', 'dynamic', 'typing', 'well', 'accommodate', 'transitional', 'code', 'prototyping', 'allow', 'placeholder', 'datum', 'structure', 'mock', 'object', 'transparently', 'place', 'data', 'structure', 'usually', 'purpose', 'experimentation', 'testing']"
1228,Dynamic typing typically allows duck typing which enables easier code reuse. Manyspecify languages with static typing also feature duck typing or other mechanisms like generic programming that also enable easier code reuse.,"['dynamic', 'typing', 'typically', 'allow', 'duck', 'typing', 'enable', 'easy', 'code', 'reuse', 'manyspecify', 'language', 'static', 'typing', 'feature', 'duck', 'typing', 'mechanism', 'like', 'generic', 'programming', 'enable', 'easy', 'code', 'reuse']"
1229,"Dynamic typing typically makes metaprogramming easier to use. For example, C++ templates are typically more cumbersome to write than the equivalent Ruby or Python code since C++ has stronger rules regarding type definitions for both functions and variables. This forces a developer to write more boilerplate code for a template than a Python developer would need to. More advanced run-time constructs such as metaclasses and introspection are often harder to use in statically-typed languages. In some languages, such features may also be used e.g. to generate new types and behaviors on the fly, based on run-time data. Such advanced constructs are often provided by dynamic programming languages; many of these are dynamically typed, although dynamic typing need not be related to dynamic programming languages.","['dynamic', 'typing', 'typically', 'make', 'metaprogramme', 'easy', 'use', 'example', 'c++', 'template', 'typically', 'cumbersome', 'write', 'equivalent', 'ruby', 'python', 'code', 'c++', 'strong', 'rule', 'type', 'definition', 'function', 'variable', 'force', 'developer', 'write', 'boilerplate', 'code', 'template', 'python', 'developer', 'need', 'advanced', 'run', 'time', 'construct', 'metaclasse', 'introspection', 'hard', 'use', 'statically', 'typed', 'language', 'language', 'feature', 'e.g.', 'generate', 'new', 'type', 'behavior', 'fly', 'base', 'run', 'time', 'datum', 'advanced', 'construct', 'provide', 'dynamic', 'programming', 'language', 'dynamically', 'type', 'dynamic', 'typing', 'need', 'relate', 'dynamic', 'programming', 'language']"
1230,"Languages are often colloquially referred to as strongly typed or weakly typed. In fact, there is no universally accepted definition of what these terms mean. In general, there are more precise terms to represent the differences between type systems that lead people to call them ""strong"" or ""weak"".","['language', 'colloquially', 'refer', 'strongly', 'type', 'weakly', 'type', 'fact', 'universally', 'accept', 'definition', 'term', 'mean', 'general', 'precise', 'term', 'represent', 'difference', 'type', 'system', 'lead', 'people', 'strong', 'weak']"
1231,A third way of categorizing the type system of a programming language is by the safety of typed operations and conversions. Computer scientists use the term type-safe language to describe languages that do not allow operations or conversions that violate the rules of the type system.,"['way', 'categorize', 'type', 'system', 'programming', 'language', 'safety', 'typed', 'operation', 'conversion', 'computer', 'scientist', 'use', 'term', 'type', 'safe', 'language', 'describe', 'language', 'allow', 'operation', 'conversion', 'violate', 'rule', 'type', 'system']"
1232,"Computer scientists use the term memory-safe language or just safe language to describe languages that do not allow programs to access memory that has not been assigned for their use. For example, a memory-safe language will check array bounds, or else statically guarantee i.e., at compile time before execution that array accesses out of the array boundaries will cause compile-time and perhaps runtime errors.","['computer', 'scientist', 'use', 'term', 'memory', 'safe', 'language', 'safe', 'language', 'describe', 'language', 'allow', 'program', 'access', 'memory', 'assign', 'use', 'example', 'memory', 'safe', 'language', 'check', 'array', 'bound', 'statically', 'guarantee', 'i.e.', 'compile', 'time', 'execution', 'array', 'access', 'array', 'boundary', 'cause', 'compile', 'time', 'runtime', 'error']"
1233,Consider the following program of a language that is both type-safe and memory-safe:15,"['consider', 'follow', 'program', 'language', 'type', 'safe', 'memory', 'safe']"
1234,"In this example, the variable z will have the value 42. Although this may not be what the programmer anticipated, it is a well-defined result. If y were a different string, one that could not be converted to a number e.g. ""Hello World"", the result would be well-defined as well. Note that a program can be type-safe or memory-safe and still crash on an invalid operation. This is for languages where the type system is not sufficiently advanced to precisely specify the validity of operations on all possible operands. But if a program encounters an operation that is not type-safe, terminating the program is often the only option.","['example', 'variable', 'value', 'programmer', 'anticipate', 'define', 'result', 'different', 'string', 'convert', 'number', 'e.g.', 'hello', 'world', 'result', 'define', 'note', 'program', 'type', 'safe', 'memory', 'safe', 'crash', 'invalid', 'operation', 'language', 'type', 'system', 'sufficiently', 'advanced', 'precisely', 'specify', 'validity', 'operation', 'possible', 'operand', 'program', 'encounter', 'operation', 'type', 'safe', 'terminate', 'program', 'option']"
1235,Now consider a similar example in C:,"['consider', 'similar', 'example']"
1236,"In this example z will point to a memory address five characters beyond y, equivalent to three characters after the terminating zero character of the string pointed to by y. This is memory that the program is not expected to access. In C terms this is simply undefined behaviour and the program may do anything; with a simple compiler it might actually print whatever byte is stored after the string ""37"". As this example shows, C is not memory-safe. As arbitrary data was assumed to be a character, it is also not a type-safe language.","['example', 'point', 'memory', 'address', 'character', 'equivalent', 'character', 'terminating', 'zero', 'character', 'string', 'point', 'memory', 'program', 'expect', 'access', 'term', 'simply', 'undefined', 'behaviour', 'program', 'simple', 'compiler', 'actually', 'print', 'byte', 'store', 'string', 'example', 'show', 'memory', 'safe', 'arbitrary', 'datum', 'assume', 'character', 'type', 'safe', 'language']"
1237,"In general, type-safety and memory-safety go hand in hand. For example, a language that supports pointer arithmetic and number-to-pointer conversions like C is neither memory-safe nor type-safe, because it allows arbitrary memory to be accessed as if it were valid memory of any type.","['general', 'type', 'safety', 'memory', 'safety', 'hand', 'hand', 'example', 'language', 'support', 'pointer', 'arithmetic', 'number', 'pointer', 'conversion', 'like', 'memory', 'safe', 'type', 'safe', 'allow', 'arbitrary', 'memory', 'access', 'valid', 'memory', 'type']"
1238,"For more information, see memory safety.","['information', 'memory', 'safety']"
1239,Some languages allow different levels of checking to apply to different regions of code. Examples include:,"['language', 'allow', 'different', 'level', 'check', 'apply', 'different', 'region', 'code', 'example', 'include']"
1240,Additional tools such as lint and IBM Rational Purify can also be used to achieve a higher level of strictness.,"['additional', 'tool', 'lint', 'ibm', 'rational', 'purify', 'achieve', 'high', 'level', 'strictness']"
1241,"It has been proposed, chiefly by Gilad Bracha, that the choice of type system be made independent of choice of language; that a type system should be a module that can be plugged into a language as needed. He believes this is advantageous, because what he calls mandatory type systems make languages less expressive and code more fragile.20 The requirement that the type system does not affect the semantics of the language is difficult to fulfill.","['propose', 'chiefly', 'gilad', 'bracha', 'choice', 'type', 'system', 'independent', 'choice', 'language', 'type', 'system', 'module', 'plug', 'language', 'need', 'believe', 'advantageous', 'call', 'mandatory', 'type', 'system', 'language', 'expressive', 'code', 'fragile', 'requirement', 'type', 'system', 'affect', 'semantic', 'language', 'difficult', 'fulfill']"
1242,"Optional typing is related to, but distinct from, gradual typing. While both typing disciplines can be used to perform static analysis of code static typing, optional type systems do not enforce type safety at runtime dynamic typing. 2021","['optional', 'typing', 'relate', 'distinct', 'gradual', 'typing', 'type', 'discipline', 'perform', 'static', 'analysis', 'code', 'static', 'typing', 'optional', 'type', 'system', 'enforce', 'type', 'safety', 'runtime', 'dynamic', 'typing', '2021']"
1243,"The term polymorphism refers to the ability of code especially, functions or classes to act on values of multiple types, or to the ability of different instances of the same data structure to contain elements of different types. Type systems that allow polymorphism generally do so in order to improve the potential for code re-use: in a language with polymorphism, programmers need only implement a data structure such as a list or an associative array once, rather than once for each type of element with which they plan to use it. For this reason computer scientists sometimes call the use of certain forms of polymorphism generic programming. The type-theoretic foundations of polymorphism are closely related to those of abstraction, modularity and in some cases subtyping.","['term', 'polymorphism', 'refer', 'ability', 'code', 'especially', 'function', 'class', 'act', 'value', 'multiple', 'type', 'ability', 'different', 'instance', 'datum', 'structure', 'contain', 'element', 'different', 'type', 'type', 'system', 'allow', 'polymorphism', 'generally', 'order', 'improve', 'potential', 'code', 'use', 'language', 'polymorphism', 'programmer', 'need', 'implement', 'data', 'structure', 'list', 'associative', 'array', 'type', 'element', 'plan', 'use', 'reason', 'computer', 'scientist', 'use', 'certain', 'form', 'polymorphism', 'generic', 'programming', 'type', 'theoretic', 'foundation', 'polymorphism', 'closely', 'relate', 'abstraction', 'modularity', 'case', 'subtype']"
1244,"Many type systems have been created that are specialized for use in certain environments with certain types of data, or for out-of-band static program analysis. Frequently, these are based on ideas from formal type theory and are only available as part of prototype research systems.","['type', 'system', 'create', 'specialize', 'use', 'certain', 'environment', 'certain', 'type', 'datum', 'band', 'static', 'program', 'analysis', 'frequently', 'base', 'idea', 'formal', 'type', 'theory', 'available', 'prototype', 'research', 'system']"
1245,"The following table gives an overview over type theoretic concepts that are used in specialized type systems. The names M, N, O range over terms and the names σ , τ \displaystyle \sigma ,\tau range over types. The following notation will be used:","['following', 'table', 'give', 'overview', 'type', 'theoretic', 'concept', 'specialized', 'type', 'system', 'name', 'range', 'term', 'name', 'range', 'type', 'follow', 'notation']"
1246,"Dependent types are based on the idea of using scalars or values to more precisely describe the type of some other value. For example, m a t r i x 3 , 3 \displaystyle \mathrm matrix 3,3 might be the type of a 3 × 3 \displaystyle 3\times 3 matrix. We can then define typing rules such as the following rule for matrix multiplication:","['dependent', 'type', 'base', 'idea', 'scalar', 'value', 'precisely', 'describe', 'type', 'value', 'example', 'matrix', '3', 'type', 'matrix', 'define', 'type', 'rule', 'follow', 'rule', 'matrix', 'multiplication']"
1247,"where k, m, n are arbitrary positive integer values. A variant of ML called Dependent ML has been created based on this type system, but because type checking for conventional dependent types is undecidable, not all programs using them can be type-checked without some kind of limits. Dependent ML limits the sort of equality it can decide to Presburger arithmetic.","['arbitrary', 'positive', 'integer', 'value', 'variant', 'call', 'dependent', 'create', 'base', 'type', 'system', 'type', 'checking', 'conventional', 'dependent', 'type', 'undecidable', 'program', 'type', 'check', 'kind', 'limit', 'dependent', 'limit', 'sort', 'equality', 'decide', 'presburger', 'arithmetic']"
1248,"Other languages such as Epigram make the value of all expressions in the language decidable so that type checking can be decidable. However, in general proof of decidability is undecidable, so many programs require hand-written annotations that may be very non-trivial. As this impedes the development process, many language implementations provide an easy way out in the form of an option to disable this condition. This, however, comes at the cost of making the type-checker run in an infinite loop when fed programs that do not type-check, causing the compilation to fail.","['language', 'epigram', 'value', 'expression', 'language', 'decidable', 'type', 'checking', 'decidable', 'general', 'proof', 'decidability', 'undecidable', 'program', 'require', 'hand', 'write', 'annotation', 'non', 'trivial', 'impede', 'development', 'process', 'language', 'implementation', 'provide', 'easy', 'way', 'form', 'option', 'disable', 'condition', 'come', 'cost', 'make', 'type', 'checker', 'run', 'infinite', 'loop', 'fed', 'program', 'type', 'check', 'cause', 'compilation', 'fail']"
1249,"Linear types, based on the theory of linear logic, and closely related to uniqueness types, are types assigned to values having the property that they have one and only one reference to them at all times. These are valuable for describing large immutable values such as files, strings, and so on, because any operation that simultaneously destroys a linear object and creates a similar object such as 'str= str + ""a""' can be optimized ""under the hood"" into an in-place mutation. Normally this is not possible, as such mutations could cause side effects on parts of the program holding other references to the object, violating referential transparency. They are also used in the prototype operating system Singularity for interprocess communication, statically ensuring that processes cannot share objects in shared memory in order to prevent race conditions. The Clean language a Haskell-like language uses this type system in order to gain a lot of speed compared to performing a deep copy while remaining safe.","['linear', 'type', 'base', 'theory', 'linear', 'logic', 'closely', 'relate', 'uniqueness', 'type', 'type', 'assign', 'value', 'have', 'property', 'reference', 'time', 'valuable', 'describe', 'large', 'immutable', 'value', 'file', 'string', 'operation', 'simultaneously', 'destroy', 'linear', 'object', 'create', 'similar', 'object', 'str=', 'str', 'optimize', 'hood', 'place', 'mutation', 'normally', 'possible', 'mutation', 'cause', 'effect', 'part', 'program', 'hold', 'reference', 'object', 'violate', 'referential', 'transparency', 'prototype', 'operating', 'system', 'singularity', 'interprocess', 'communication', 'statically', 'ensure', 'process', 'share', 'object', 'share', 'memory', 'order', 'prevent', 'race', 'condition', 'clean', 'language', 'haskell', 'like', 'language', 'use', 'type', 'system', 'order', 'gain', 'lot', 'speed', 'compare', 'perform', 'deep', 'copy', 'remain', 'safe']"
1250,"Intersection types are types describing values that belong to both of two other given types with overlapping value sets. For example, in most implementations of C the signed char has range -128 to 127 and the unsigned char has range 0 to 255, so the intersection type of these two types would have range 0 to 127. Such an intersection type could be safely passed into functions expecting either signed or unsigned chars, because it is compatible with both types.","['intersection', 'type', 'type', 'describe', 'value', 'belong', 'give', 'type', 'overlap', 'value', 'set', 'example', 'implementation', 'sign', 'char', 'range', '-128', '127', 'unsigned', 'char', 'range', '255', 'intersection', 'type', 'type', 'range', '127', 'intersection', 'type', 'safely', 'pass', 'function', 'expect', 'sign', 'unsigned', 'char', 'compatible', 'type']"
1251,"Intersection types are useful for describing overloaded function types: for example, if ""int → int"" is the type of functions taking an integer argument and returning an integer, and ""float → float"" is the type of functions taking a float argument and returning a float, then the intersection of these two types can be used to describe functions that do one or the other, based on what type of input they are given. Such a function could be passed into another function expecting an ""int → int"" function safely; it simply would not use the ""float → float"" functionality.","['intersection', 'type', 'useful', 'describe', 'overloaded', 'function', 'type', 'example', 'int', 'int', 'type', 'function', 'take', 'integer', 'argument', 'return', 'integer', 'float', 'float', 'type', 'function', 'take', 'float', 'argument', 'return', 'float', 'intersection', 'type', 'describe', 'function', 'base', 'type', 'input', 'give', 'function', 'pass', 'function', 'expect', 'int', 'int', 'function', 'safely', 'simply', 'use', 'float', 'float', 'functionality']"
1252,"In a subclassing hierarchy, the intersection of a type and an ancestor type such as its parent is the most derived type. The intersection of sibling types is empty.","['subclasse', 'hierarchy', 'intersection', 'type', 'ancestor', 'type', 'parent', 'derive', 'type', 'intersection', 'sible', 'type']"
1253,The Forsythe language includes a general implementation of intersection types. A restricted form is refinement types.,"['forsythe', 'language', 'include', 'general', 'implementation', 'intersection', 'type', 'restricted', 'form', 'refinement', 'type']"
1254,"Union types are types describing values that belong to either of two types. For example, in C, the signed char has a -128 to 127 range, and the unsigned char has a 0 to 255 range, so the union of these two types would have an overall ""virtual"" range of -128 to 255 that may be used partially depending on which union member is accessed. Any function handling this union type would have to deal with integers in this complete range. More generally, the only valid operations on a union type are operations that are valid on both types being unioned. C's ""union"" concept is similar to union types, but is not typesafe, as it permits operations that are valid on either type, rather than both. Union types are important in program analysis, where they are used to represent symbolic values whose exact nature e.g., value or type is not known.","['union', 'type', 'type', 'describe', 'value', 'belong', 'type', 'example', 'sign', 'char', '-128', '127', 'range', 'unsigned', 'char', '255', 'range', 'union', 'type', 'overall', 'virtual', 'range', '-128', '255', 'partially', 'depend', 'union', 'member', 'access', 'function', 'handle', 'union', 'type', 'deal', 'integer', 'complete', 'range', 'generally', 'valid', 'operation', 'union', 'type', 'operation', 'valid', 'type', 'unione', 'union', 'concept', 'similar', 'union', 'type', 'typesafe', 'permit', 'operation', 'valid', 'type', 'union', 'type', 'important', 'program', 'analysis', 'represent', 'symbolic', 'value', 'exact', 'nature', 'e.g.', 'value', 'type', 'know']"
1255,"In a subclassing hierarchy, the union of a type and an ancestor type such as its parent is the ancestor type. The union of sibling types is a subtype of their common ancestor that is, all operations permitted on their common ancestor are permitted on the union type, but they may also have other valid operations in common.","['subclasse', 'hierarchy', 'union', 'type', 'ancestor', 'type', 'parent', 'ancestor', 'type', 'union', 'sible', 'type', 'subtype', 'common', 'ancestor', 'operation', 'permit', 'common', 'ancestor', 'permit', 'union', 'type', 'valid', 'operation', 'common']"
1256,"Existential types are frequently used in connection with record types to represent modules and abstract data types, due to their ability to separate implementation from interface. For example, the type ""T = ∃X a: X; f: X → int; "" describes a module interface that has a data member named a of type X and a function named f that takes a parameter of the same type X and returns an integer. This could be implemented in different ways; for example:","['existential', 'type', 'frequently', 'connection', 'record', 'type', 'represent', 'module', 'abstract', 'datum', 'type', 'ability', 'separate', 'implementation', 'interface', 'example', 'type', 'int', 'describe', 'module', 'interface', 'data', 'member', 'name', 'type', 'function', 'name', 'take', 'parameter', 'type', 'return', 'integer', 'implement', 'different', 'way', 'example']"
1257,"These types are both subtypes of the more general existential type T and correspond to concrete implementation types, so any value of one of these types is a value of type T. Given a value ""t"" of type ""T"", we know that ""t.ft.a"" is well-typed, regardless of what the abstract type X is. This gives flexibility for choosing types suited to a particular implementation, while clients that use only values of the interface type—the existential type—are isolated from these choices.","['type', 'subtype', 'general', 'existential', 'type', 'correspond', 'concrete', 'implementation', 'type', 'value', 'type', 'value', 'type', 'give', 'value', 'type', 'know', 't.ft.a', 'type', 'regardless', 'abstract', 'type', 'give', 'flexibility', 'choose', 'type', 'suit', 'particular', 'implementation', 'client', 'use', 'value', 'interface', 'type', 'existential', 'type', 'isolate', 'choice']"
1258,"In general it's impossible for the typechecker to infer which existential type a given module belongs to. In the above example intT a: int; f: int → int; could also have the type ∃X a: X; f: int → int; . The simplest solution is to annotate every module with its intended type, e.g.:","['general', 'impossible', 'typechecker', 'infer', 'existential', 'type', 'give', 'module', 'belong', 'example', 'intt', 'int', 'int', 'int', 'type', 'int', 'int', 'simple', 'solution', 'annotate', 'module', 'intend', 'type', 'e.g.']"
1259,"Although abstract data types and modules had been implemented in programming languages for quite some time, it wasn't until 1988 that John C. Mitchell and Gordon Plotkin established the formal theory under the slogan: ""Abstract data types have existential type"".23 The theory is a second-order typed lambda calculus similar to System F, but with existential instead of universal quantification.","['abstract', 'datum', 'type', 'module', 'implement', 'programming', 'language', 'time', '1988', 'john', 'mitchell', 'gordon', 'plotkin', 'establish', 'formal', 'theory', 'slogan', 'abstract', 'data', 'type', 'existential', 'type', 'theory', 'second', 'order', 'type', 'lambda', 'calculus', 'similar', 'system', 'existential', 'instead', 'universal', 'quantification']"
1260,"In a type system with Gradual typing, variables may be assigned a type either at compile-time which is static typing. or at run-time which is dynamic typing.24 This allows software developers to choose either type paradigm as appropriate, from within a single language.24 Gradual typing uses a special type named dynamic to represent statically-unknown types; gradual typing replaces the notion of type equality with a new relation called consistency that relates the dynamic type to every other type. The consistency relation is symmetric but not transitive.25","['type', 'system', 'gradual', 'typing', 'variable', 'assign', 'type', 'compile', 'time', 'static', 'typing', 'run', 'time', 'dynamic', 'typing', 'allow', 'software', 'developer', 'choose', 'type', 'paradigm', 'appropriate', 'single', 'language', 'gradual', 'typing', 'use', 'special', 'type', 'name', 'dynamic', 'represent', 'statically', 'unknown', 'type', 'gradual', 'typing', 'replace', 'notion', 'type', 'equality', 'new', 'relation', 'call', 'consistency', 'relate', 'dynamic', 'type', 'type', 'consistency', 'relation', 'symmetric', 'transitive']"
1261,"Many static type systems, such as those of C and Java, require type declarations: the programmer must explicitly associate each variable with a specific type. Others, such as Haskell's, perform type inference: the compiler draws conclusions about the types of variables based on how programmers use those variables. For example, given a function fx, y that adds x and y together, the compiler can infer that x and y must be numbers—since addition is only defined for numbers. Thus, any call to f elsewhere in the program that specifies a non-numeric type such as a string or list as an argument would signal an error.","['static', 'type', 'system', 'java', 'require', 'type', 'declaration', 'programmer', 'explicitly', 'associate', 'variable', 'specific', 'type', 'haskell', 'perform', 'type', 'inference', 'compiler', 'draw', 'conclusion', 'type', 'variable', 'base', 'programmer', 'use', 'variable', 'example', 'give', 'function', 'add', 'compiler', 'infer', 'number', 'addition', 'define', 'number', 'program', 'specify', 'non', 'numeric', 'type', 'string', 'list', 'argument', 'signal', 'error']"
1262,"Numerical and string constants and expressions in code can and often do imply type in a particular context. For example, an expression 3.14 might imply a type of floating-point, while 1, 2, 3 might imply a list of integers—typically an array.","['numerical', 'string', 'constant', 'expression', 'code', 'imply', 'type', 'particular', 'context', 'example', 'expression', '3', 'imply', 'type', 'float', 'point', 'imply', 'list', 'integer', 'typically', 'array']"
1263,"Type inference is in general possible, if it is computable in the type system in question. Moreover, even if inference is not computable in general for a given type system, inference is often possible for a large subset of real-world programs. Haskell's type system, a version of Hindley–Milner, is a restriction of System Fω to so-called rank-1 polymorphic types, in which type inference is computable. Most Haskell compilers allow arbitrary-rank polymorphism as an extension, but this makes type inference not computable. Type checking is decidable, however, and rank-1 programs still have type inference; higher rank polymorphic programs are rejected unless given explicit type annotations.","['type', 'inference', 'general', 'possible', 'computable', 'type', 'system', 'question', 'inference', 'computable', 'general', 'give', 'type', 'system', 'inference', 'possible', 'large', 'subset', 'real', 'world', 'program', 'haskell', 'type', 'system', 'version', 'hindley', 'milner', 'restriction', 'system', 'call', 'rank-1', 'polymorphic', 'type', 'type', 'inference', 'computable', 'haskell', 'compiler', 'allow', 'arbitrary', 'rank', 'polymorphism', 'extension', 'make', 'type', 'inference', 'computable', 'type', 'checking', 'decidable', 'rank-1', 'program', 'type', 'inference', 'high', 'rank', 'polymorphic', 'program', 'reject', 'give', 'explicit', 'type', 'annotation']"
1264,"A type system that assigns types to terms in type environments using typing rules is naturally associated with the decision problems of type checking, typability, and type inhabitation.26","['type', 'system', 'assign', 'type', 'term', 'type', 'environment', 'typing', 'rule', 'naturally', 'associate', 'decision', 'problem', 'type', 'checking', 'typability', 'type', 'inhabitation']"
1265,"Some languages like C# or Scala have a unified type system.27 This means that all C# types including primitive types inherit from a single root object. Every type in C# inherits from the Object class. Some languages, like Java and Raku, have a root type but also have primitive types that are not objects.28 Java provides wrapper object types that exist together with the primitive types so developers can use either the wrapper object types or the simpler non-object primitive types. Raku automatically converts primitive types to objects when their methods are accessed.29","['language', 'like', 'scala', 'unified', 'type', 'system', 'mean', 'type', 'include', 'primitive', 'type', 'inherit', 'single', 'root', 'object', 'type', 'inherit', 'object', 'class', 'language', 'like', 'java', 'raku', 'root', 'type', 'primitive', 'type', 'objects', 'java', 'provide', 'wrapper', 'object', 'type', 'exist', 'primitive', 'type', 'developer', 'use', 'wrapper', 'object', 'type', 'simple', 'non', 'object', 'primitive', 'type', 'raku', 'automatically', 'convert', 'primitive', 'type', 'object', 'method', 'accessed']"
1266,"A type checker for a statically-typed language must verify that the type of any expression is consistent with the type expected by the context in which that expression appears. For example, in an assignment statement of the form x := e, the inferred type of the expression e must be consistent with the declared or inferred type of the variable x. This notion of consistency, called compatibility, is specific to each programming language.","['type', 'checker', 'statically', 'type', 'language', 'verify', 'type', 'expression', 'consistent', 'type', 'expect', 'context', 'expression', 'appear', 'example', 'assignment', 'statement', 'form', 'infer', 'type', 'expression', 'consistent', 'declared', 'infer', 'type', 'variable', 'notion', 'consistency', 'call', 'compatibility', 'specific', 'programming', 'language']"
1267,"If the type of e and the type of x are the same, and assignment is allowed for that type, then this is a valid expression. Thus, in the simplest type systems, the question of whether two types are compatible reduces to that of whether they are equal or equivalent. Different languages, however, have different criteria for when two type expressions are understood to denote the same type. These different equational theories of types vary widely, two extreme cases being structural type systems, in which any two types that describe values with the same structure are equivalent, and nominative type systems, in which no two syntactically distinct type expressions denote the same type i.e., types must have the same ""name"" in order to be equal.","['type', 'type', 'assignment', 'allow', 'type', 'valid', 'expression', 'simple', 'type', 'system', 'question', 'type', 'compatible', 'reduce', 'equal', 'equivalent', 'different', 'language', 'different', 'criterion', 'type', 'expression', 'understand', 'denote', 'type', 'different', 'equational', 'theory', 'type', 'vary', 'widely', 'extreme', 'case', 'structural', 'type', 'system', 'type', 'describe', 'value', 'structure', 'equivalent', 'nominative', 'type', 'system', 'syntactically', 'distinct', 'type', 'expression', 'denote', 'type', 'i.e.', 'type', 'order', 'equal']"
1268,"In languages with subtyping, the compatibility relation is more complex: If B is a subtype of A, then a value of type B can be used in a context where one of type A is expected covariant, even if the reverse is not true. Like equivalence, the subtype relation is defined differently for each programming language, with many variations possible. The presence of parametric or ad hoc polymorphism in a language may also have implications for type compatibility.","['language', 'subtype', 'compatibility', 'relation', 'complex', 'subtype', 'value', 'type', 'context', 'type', 'expect', 'covariant', 'reverse', 'true', 'like', 'equivalence', 'subtype', 'relation', 'define', 'differently', 'programming', 'language', 'variation', 'possible', 'presence', 'parametric', 'hoc', 'polymorphism', 'language', 'implication', 'type', 'compatibility']"
1269,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1270,"In programming languages, name binding is the association of entities data and/or code with identifiers.1 An identifier bound to an object is said to reference that object. Machine languages have no built-in notion of identifiers, but name-object bindings as a service and notation for the programmer is implemented by programming languages. Binding is intimately connected with scoping, as scope determines which names bind to which objects – at which locations in the program code lexically and in which one of the possible execution paths temporally.","['programming', 'language', 'bind', 'association', 'entities', 'data', 'code', 'identifiers', 'identifier', 'bind', 'object', 'say', 'reference', 'object', 'machine', 'language', 'build', 'notion', 'identifier', 'object', 'binding', 'service', 'notation', 'programmer', 'implement', 'programming', 'language', 'bind', 'intimately', 'connect', 'scoping', 'scope', 'determine', 'name', 'bind', 'object', 'location', 'program', 'code', 'lexically', 'possible', 'execution', 'path', 'temporally']"
1271,"Use of an identifier .mw-parser-output .monospacedfont-family:monospace,monospaceid in a context that establishes a binding for id is called a binding or defining occurrence. In all other occurrences e.g., in expressions, assignments, and subprogram calls, an identifier stands for what it is bound to; such occurrences are called applied occurrences.","['use', 'identifier', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospaceid', 'context', 'establish', 'binding', 'call', 'bind', 'define', 'occurrence', 'occurrence', 'e.g.', 'expression', 'assignment', 'subprogram', 'call', 'identifi', 'stand', 'bind', 'occurrence', 'call', 'applied', 'occurrence']"
1272,An example of a static binding is a direct C function call: the function referenced by the identifier cannot change at runtime.,"['example', 'static', 'binding', 'direct', 'function', 'function', 'reference', 'identifier', 'change', 'runtime']"
1273,"An example of dynamic binding is dynamic dispatch, as in a C++ virtual method call. Since the specific type of a polymorphic object is not known before runtime in general, the executed function is dynamically bound. Take, for example, the following Java code:","['example', 'dynamic', 'binding', 'dynamic', 'dispatch', 'c++', 'virtual', 'method', 'specific', 'type', 'polymorphic', 'object', 'know', 'runtime', 'general', 'execute', 'function', 'dynamically', 'bind', 'example', 'follow', 'java', 'code']"
1274,"List is an interface, so list must refer to a subtype of it. list may reference a LinkedList, an ArrayList, or some other subtype of List. The method referenced by add is not known until runtime. In C, such an instance of dynamic binding may be a call to a function pointed to by a variable or expression of a function pointer type whose value is unknown until it is evaluated at run-time.","['list', 'interface', 'list', 'refer', 'subtype', 'list', 'reference', 'linkedlist', 'arraylist', 'subtype', 'list', 'method', 'reference', 'add', 'know', 'runtime', 'instance', 'dynamic', 'binding', 'function', 'point', 'variable', 'expression', 'function', 'pointer', 'type', 'value', 'unknown', 'evaluate', 'run', 'time']"
1275,Rebinding should not be confused with mutation.,"['rebind', 'confuse', 'mutation']"
1276,"The identifier list initially references nothing it is uninitialized; it is then rebound to reference an object a linked list of strings. The linked list referenced by list is then mutated, adding a string to the list. Lastly, list is rebound to null.","['identifier', 'list', 'initially', 'reference', 'uninitialized', 'rebound', 'reference', 'object', 'link', 'list', 'string', 'link', 'list', 'reference', 'list', 'mutate', 'add', 'string', 'list', 'lastly', 'list', 'rebound', 'null']"
1277,Late static binding is a variant of binding somewhere between static and dynamic binding. Consider the following PHP example:,"['late', 'static', 'binding', 'variant', 'bind', 'static', 'dynamic', 'binding', 'consider', 'follow', 'php', 'example']"
1278,"In this example, the PHP interpreter binds the keyword self inside A::hello to class A, and so the call to B::hello produces the string ""hello"". If the semantics of self::$word had been based on late static binding, then the result would have been ""bye"".","['example', 'php', 'interpreter', 'bind', 'keyword', 'self', 'inside', 'a::hello', 'class', 'b::hello', 'produce', 'string', 'hello', 'semantic', 'self::$word', 'base', 'late', 'static', 'binding', 'result', 'bye']"
1279,"Beginning with PHP version 5.3, late static binding is supported.3 Specifically, if self::$word in the above were changed to static::$word as shown in the following block, where the keyword static would only be bound at runtime, then the result of the call to B::hello would be ""bye"":","['begin', 'php', 'version', '5', 'late', 'static', 'binding', 'supported', 'specifically', 'self::$word', 'change', 'static::$word', 'show', 'following', 'block', 'keyword', 'static', 'bind', 'runtime', 'result', 'b::hello', 'bye']"
1280,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1281,"Ruby is an interpreted, high-level, general-purpose programming language which supports multiple programming paradigms. It was designed with an emphasis on programming productivity and simplicity. In Ruby, everything is an object, including primitive data types. It was developed in the mid-1990s by Yukihiro ""Matz"" Matsumoto in Japan.","['ruby', 'interpret', 'high', 'level', 'general', 'purpose', 'programming', 'language', 'support', 'multiple', 'programming', 'paradigms', 'design', 'emphasis', 'programming', 'productivity', 'simplicity', 'ruby', 'object', 'include', 'primitive', 'datum', 'type', 'develop', 'mid-1990', 'yukihiro', 'matz', 'matsumoto', 'japan']"
1282,"Ruby is dynamically typed and uses garbage collection and just-in-time compilation. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. According to the creator, Ruby was influenced by Perl, Smalltalk, Eiffel, Ada, BASIC, Java and Lisp.113","['ruby', 'dynamically', 'type', 'use', 'garbage', 'collection', 'time', 'compilation', 'support', 'multiple', 'programming', 'paradigm', 'include', 'procedural', 'object', 'orient', 'functional', 'programming', 'accord', 'creator', 'ruby', 'influence', 'perl', 'smalltalk', 'eiffel', 'ada', 'basic', 'java', 'lisp']"
1283,"Matsumoto has said that Ruby was conceived in 1993. In a 1999 post to the ruby-talk mailing list, he describes some of his early ideas about the language:12","['matsumoto', 'say', 'ruby', 'conceive', '1993', '1999', 'post', 'ruby', 'talk', 'mailing', 'list', 'describe', 'early', 'idea', 'language']"
1284,"I was talking with my colleague about the possibility of an object-oriented scripting language. I knew Perl Perl4, not Perl5, but I didn't like it really, because it had the smell of a toy language it still has. The object-oriented language seemed very promising. I knew Python then. But I didn't like it, because I didn't think it was a true object-oriented language – OO features appeared to be add-on to the language. As a language maniac and OO fan for 15 years, I really wanted a genuine object-oriented, easy-to-use scripting language. I looked for but couldn't find one. So I decided to make it.","['talk', 'colleague', 'possibility', 'object', 'orient', 'scripting', 'language', 'know', 'perl', 'perl4', 'perl5', 'like', 'smell', 'toy', 'language', 'object', 'orient', 'language', 'promising', 'know', 'python', 'like', 'think', 'true', 'object', 'orient', 'language', 'feature', 'appear', 'add', 'language', 'language', 'maniac', 'fan', 'year', 'want', 'genuine', 'object', 'orient', 'easy', 'use', 'scripting', 'language', 'look', 'find', 'decide']"
1285,"Matsumoto describes the design of Ruby as being like a simple Lisp language at its core, with an object system like that of Smalltalk, blocks inspired by higher-order functions, and practical utility like that of Perl.13","['matsumoto', 'describe', 'design', 'ruby', 'like', 'simple', 'lisp', 'language', 'core', 'object', 'system', 'like', 'smalltalk', 'block', 'inspire', 'high', 'order', 'function', 'practical', 'utility', 'like', 'perl']"
1286,"The name ""Ruby"" originated during an online chat session between Matsumoto and Keiju Ishitsuka on February 24, 1993, before any code had been written for the language.14 Initially two names were proposed: ""Coral"" and ""Ruby"". Matsumoto chose the latter in a later e-mail to Ishitsuka.15 Matsumoto later noted a factor in choosing the name ""Ruby"" – it was the birthstone of one of his colleagues.1617","['ruby', 'originate', 'online', 'chat', 'session', 'matsumoto', 'keiju', 'ishitsuka', 'february', '1993', 'code', 'write', 'language', 'initially', 'name', 'propose', 'coral', 'ruby', 'matsumoto', 'choose', 'later', 'mail', 'ishitsuka', 'matsumoto', 'later', 'note', 'factor', 'choose', 'ruby', 'birthstone', 'colleagues']"
1287,"The first public release of Ruby 0.95 was announced on Japanese domestic newsgroups on December 21, 1995.1819 Subsequently, three more versions of Ruby were released in two days.14 The release coincided with the launch of the Japanese-language ruby-list mailing list, which was the first mailing list for the new language.","['public', 'release', 'ruby', '0', 'announce', 'japanese', 'domestic', 'newsgroup', 'december', '1995', 'subsequently', 'version', 'ruby', 'release', 'days', 'release', 'coincide', 'launch', 'japanese', 'language', 'ruby', 'list', 'mailing', 'list', 'mailing', 'list', 'new', 'language']"
1288,"Already present at this stage of development were many of the features familiar in later releases of Ruby, including object-oriented design, classes with inheritance, mixins, iterators, closures, exception handling and garbage collection.20","['present', 'stage', 'development', 'feature', 'familiar', 'later', 'release', 'ruby', 'include', 'object', 'orient', 'design', 'class', 'inheritance', 'mixin', 'iterator', 'closure', 'exception', 'handling', 'garbage', 'collection']"
1289,"Following the release of Ruby 0.95 in 1995, several stable versions of Ruby were released in the following years:","['follow', 'release', 'ruby', '0', '1995', 'stable', 'version', 'ruby', 'release', 'following', 'year']"
1290,"In 1997, the first article about Ruby was published on the Web. In the same year, Matsumoto was hired by netlab.jp to work on Ruby as a full-time developer.14","['1997', 'article', 'ruby', 'publish', 'web', 'year', 'matsumoto', 'hire', 'netlab.jp', 'work', 'ruby', 'time', 'developer']"
1291,"In 1998, the Ruby Application Archive was launched by Matsumoto, along with a simple English-language homepage for Ruby.14","['1998', 'ruby', 'application', 'archive', 'launch', 'matsumoto', 'simple', 'english', 'language', 'homepage', 'ruby']"
1292,"In 1999, the first English language mailing list ruby-talk began, which signaled a growing interest in the language outside Japan.21 In this same year, Matsumoto and Keiju Ishitsuka wrote the first book on Ruby, The Object-oriented Scripting Language Ruby オブジェクト指向スクリプト言語 Ruby, which was published in Japan in October 1999. It would be followed in the early 2000s by around 20 books on Ruby published in Japanese.14","['1999', 'english', 'language', 'mailing', 'list', 'ruby', 'talk', 'begin', 'signal', 'grow', 'interest', 'language', 'outside', 'japan', 'year', 'matsumoto', 'keiju', 'ishitsuka', 'write', 'book', 'ruby', 'object', 'orient', 'scripting', 'language', 'ruby', 'オブジェクト指向スクリプト言語', 'ruby', 'publish', 'japan', 'october', '1999', 'follow', 'early', '2000', 'book', 'ruby', 'publish', 'japanese']"
1293,"By 2000, Ruby was more popular than Python in Japan.22 In September 2000, the first English language book Programming Ruby was printed, which was later freely released to the public, further widening the adoption of Ruby amongst English speakers. In early 2002, the English-language ruby-talk mailing list was receiving more messages than the Japanese-language ruby-list, demonstrating Ruby's increasing popularity in the non-Japanese speaking world.","['2000', 'ruby', 'popular', 'python', 'japan', 'september', '2000', 'english', 'language', 'book', 'programming', 'ruby', 'print', 'later', 'freely', 'release', 'public', 'widen', 'adoption', 'ruby', 'english', 'speaker', 'early', '2002', 'english', 'language', 'ruby', 'talk', 'mailing', 'list', 'receive', 'message', 'japanese', 'language', 'ruby', 'list', 'demonstrate', 'ruby', 'increase', 'popularity', 'non', 'japanese', 'speak', 'world']"
1294,"Ruby 1.8 was initially released August 2003, was stable for a long time, and was retired June 2013.23 Although deprecated, there is still code based on it. Ruby 1.8 is only partially compatible with Ruby 1.9.","['ruby', '1', 'initially', 'release', 'august', '2003', 'stable', 'long', 'time', 'retire', 'june', '2013', 'deprecate', 'code', 'base', 'ruby', '1', 'partially', 'compatible', 'ruby', '1']"
1295,Ruby 1.8 has been the subject of several industry standards. The language specifications for Ruby were developed by the Open Standards Promotion Center of the Information-Technology Promotion Agency a Japanese government agency for submission to the Japanese Industrial Standards Committee JISC and then to the International Organization for Standardization ISO. It was accepted as a Japanese Industrial Standard JIS X 3017 in 201124 and an international standard ISO/IEC 30170 in 2012.2526,"['ruby', '1', 'subject', 'industry', 'standard', 'language', 'specification', 'ruby', 'develop', 'open', 'standards', 'promotion', 'center', 'information', 'technology', 'promotion', 'agency', 'japanese', 'government', 'agency', 'submission', 'japanese', 'industrial', 'standards', 'committee', 'jisc', 'international', 'organization', 'standardization', 'iso', 'accept', 'japanese', 'industrial', 'standard', 'jis', '3017', '201124', 'international', 'standard', 'iso', 'iec', '30170', '2012']"
1296,"Around 2005, interest in the Ruby language surged in tandem with Ruby on Rails, a web framework written in Ruby. Rails is frequently credited with increasing awareness of Ruby.27","['2005', 'interest', 'ruby', 'language', 'surge', 'tandem', 'ruby', 'rails', 'web', 'framework', 'write', 'ruby', 'rail', 'frequently', 'credit', 'increase', 'awareness', 'ruby']"
1297,"Effective with Ruby 1.9.3, released October 31, 2011,28 Ruby switched from being dual-licensed under the Ruby License and the GPL to being dual-licensed under the Ruby License and the two-clause BSD license.29 Adoption of 1.9 was slowed by changes from 1.8 that required many popular third party gems to be rewritten. Ruby 1.9 introduces many significant changes over the 1.8 series. Examples include:30","['effective', 'ruby', '1', 'release', 'october', '2011', 'ruby', 'switch', 'dual', 'license', 'ruby', 'license', 'gpl', 'dual', 'license', 'ruby', 'license', 'clause', 'bsd', 'license', 'adoption', '1', 'slow', 'change', '1', 'require', 'popular', 'party', 'gem', 'rewrite', 'ruby', '1', 'introduce', 'significant', 'change', '1', 'series', 'example', 'include']"
1298,"Ruby 2.0 was intended to be fully backward compatible with Ruby 1.9.3. As of the official 2.0.0 release on February 24, 2013, there were only five known minor incompatibilities.31 Ruby 2.0 added several new features, including:","['ruby', '2', 'intend', 'fully', 'backward', 'compatible', 'ruby', '1', 'official', '2', 'release', 'february', '2013', 'know', 'minor', 'incompatibilities', 'ruby', '2', 'add', 'new', 'feature', 'include']"
1299,"Starting with 2.1.0, Ruby's versioning policy changed to be more similar to semantic versioning.33","['start', '2', 'ruby', 'versioning', 'policy', 'change', 'similar', 'semantic', 'versioning']"
1300,"Ruby 2.2.0 includes speed-ups, bugfixes, and library updates and removes some deprecated APIs. Most notably, Ruby 2.2.0 introduces changes to memory handling – an incremental garbage collector, support for garbage collection of symbols and the option to compile directly against jemalloc. It also contains experimental support for using vfork2 with system and spawn, and added support for the Unicode 7.0 specification. Since version 2.2.1,34 Ruby MRI performance on PowerPC64 was improved.353637 Features that were made obsolete or removed include callcc, the DL library, Digest::HMAC, lib/rational.rb, lib/complex.rb, GServer, Logger::Application as well as various C API functions.38","['ruby', '2', 'include', 'speed', 'up', 'bugfixe', 'library', 'update', 'remove', 'deprecate', 'api', 'notably', 'ruby', '2', 'introduce', 'change', 'memory', 'handling', 'incremental', 'garbage', 'collector', 'support', 'garbage', 'collection', 'symbol', 'option', 'compile', 'directly', 'jemalloc', 'contain', 'experimental', 'support', 'vfork2', 'system', 'spawn', 'add', 'support', 'unicode', '7', 'specification', 'version', '2', 'ruby', 'mri', 'performance', 'powerpc64', 'improved', 'features', 'obsolete', 'remove', 'include', 'callcc', 'library', 'digest::hmac', 'lib', 'rational.rb', 'lib', 'complex.rb', 'gserver', 'logger::application', 'api', 'functions']"
1301,"Ruby 2.3.0 includes many performance improvements, updates, and bugfixes including changes to Proc#call, Socket and IO use of exception keywords, Thread#name handling, default passive Net::FTP connections, and Rake being removed from stdlib.39 Other notable changes include:","['ruby', '2', 'include', 'performance', 'improvement', 'update', 'bugfixe', 'include', 'change', 'proc#call', 'socket', 'use', 'exception', 'keyword', 'thread#name', 'handling', 'default', 'passive', 'net::ftp', 'connection', 'rake', 'remove', 'stdlib', 'notable', 'change', 'include']"
1302,"Ruby 2.4.0 includes performance improvements to hash table, Array#max, Array#min, and instance variable access.41 Other notable changes include:","['ruby', '2', 'include', 'performance', 'improvement', 'hash', 'table', 'array#max', 'array#min', 'instance', 'variable', 'access', 'notable', 'change', 'include']"
1303,"A few notable changes in Ruby 2.5.0 include rescue and ensure statements automatically use a surrounding do-end block less need for extra begin-end blocks, method-chaining with yield_self, support for branch coverage and method coverage measurement, and easier Hash transformations with Hash#slice and Hash#transform_keys On top of that come a lot of performance improvements like faster block passing 3 times faster, faster Mutexes, faster ERB templates and improvements on some concatenation methods.","['notable', 'change', 'ruby', '2', 'include', 'rescue', 'ensure', 'statement', 'automatically', 'use', 'surround', 'end', 'block', 'need', 'extra', 'begin', 'end', 'block', 'method', 'chain', 'yield_self', 'support', 'branch', 'coverage', 'method', 'coverage', 'measurement', 'easy', 'hash', 'transformation', 'hash#slice', 'hash#transform_key', 'come', 'lot', 'performance', 'improvement', 'like', 'fast', 'block', 'pass', 'time', 'fast', 'fast', 'mutexe', 'fast', 'erb', 'template', 'improvement', 'concatenation', 'method']"
1304,"A few notable changes in Ruby 2.6.0 include an experimental just-in-time compiler JIT, and RubyVM::AbstractSyntaxTree experimental.","['notable', 'change', 'ruby', '2', 'include', 'experimental', 'time', 'compiler', 'jit', 'rubyvm::abstractsyntaxtree', 'experimental']"
1305,"A few notable changes in Ruby 2.7.0 include pattern Matching experimental, REPL improvements, a compaction GC, and separation of positional and keyword arguments.","['notable', 'change', 'ruby', '2', 'include', 'pattern', 'match', 'experimental', 'repl', 'improvement', 'compaction', 'separation', 'positional', 'keyword', 'argument']"
1306,"Ruby 3.0.0 was released on Christmas Day in 2020.42 It is known as Ruby 3x3 which means that programs would run three times faster in Ruby 3.0 comparing to Ruby 2.0.43 and some had already implemented in intermediate releases on the road from 2 to 3. To achieve 3x3, Ruby 3 comes with MJIT, and later YJIT, Just-In-Time Compilers, to make programs faster, although they are described as experimental and remain disabled by default enabled by flags at runtime.","['ruby', '3', 'release', 'christmas', 'day', '2020', 'know', 'ruby', '3x3', 'mean', 'program', 'run', 'time', 'fast', 'ruby', '3', 'compare', 'ruby', '2', 'implement', 'intermediate', 'release', 'road', 'achieve', '3x3', 'ruby', 'come', 'mjit', 'later', 'yjit', 'time', 'compilers', 'program', 'fast', 'describe', 'experimental', 'remain', 'disabled', 'default', 'enable', 'flag', 'runtime']"
1307,"Another goal of Ruby 3.0 is to improve concurrency and two more utilities Fibre Scheduler, and experimental Ractor facilitate the goal.42 Ractor is light-weight and thread-safe as it is achieved by exchanging messages rather than shared objects.","['goal', 'ruby', '3', 'improve', 'concurrency', 'utility', 'fibre', 'scheduler', 'experimental', 'ractor', 'facilitate', 'goal', 'ractor', 'light', 'weight', 'thread', 'safe', 'achieve', 'exchange', 'message', 'share', 'object']"
1308,Ruby 3.0 introduces RBS language to describe the types of Ruby programs for static analysis.42 It is separated from general Ruby programs.,"['ruby', '3', 'introduce', 'rbs', 'language', 'describe', 'type', 'ruby', 'program', 'static', 'analysis', 'separate', 'general', 'ruby', 'program']"
1309,There are some syntax enhancements and library changes in Ruby 3.0 as well.42,"['syntax', 'enhancement', 'library', 'change', 'ruby', '3', 'well']"
1310,"Ruby 3.1 was released on Christmas Day in 2021.44 It includes YJIT, a new, experimental, Just-In-Time Compiler developed by Shopify, to enhance the performance of real world business applications. A new debugger is also included. There are some syntax enhancements and other improvements in this release. Network libraries for FTP, SMTP, IMAP, and POP are moved from default gems to bundled gems. 45","['ruby', '3', 'release', 'christmas', 'day', '2021', 'include', 'yjit', 'new', 'experimental', 'time', 'compiler', 'develop', 'shopify', 'enhance', 'performance', 'real', 'world', 'business', 'application', 'new', 'debugger', 'include', 'syntax', 'enhancement', 'improvement', 'release', 'network', 'librarie', 'ftp', 'smtp', 'imap', 'pop', 'move', 'default', 'gem', 'bundle', 'gem']"
1311,"Ruby 3.2 was released on Christmas Day in 2022.1 It brings support for being run inside of a WebAssembly environment via a WASI interface. Regular expressions also receives some improvements, including a faster, memoized matching algorithm to protect against certain ReDoS attacks, and configurable timeouts for regular expression matching. Additional debugging and syntax features are also included in this release, which include syntax suggestion, as well as error highlighting. The MJIT compiler has been re-implemented as a standard library module, while the YJIT, a Rust-based JIT compiler now supports more architectures on Linux.","['ruby', '3', 'release', 'christmas', 'day', '2022', 'bring', 'support', 'run', 'inside', 'webassembly', 'environment', 'wasi', 'interface', 'regular', 'expression', 'receive', 'improvement', 'include', 'fast', 'memoize', 'match', 'algorithm', 'protect', 'certain', 'redos', 'attack', 'configurable', 'timeout', 'regular', 'expression', 'matching', 'additional', 'debugging', 'syntax', 'feature', 'include', 'release', 'include', 'syntax', 'suggestion', 'error', 'highlighting', 'mjit', 'compiler', 'implement', 'standard', 'library', 'module', 'yjit', 'rust', 'base', 'jit', 'compiler', 'support', 'architecture', 'linux']"
1312,"Matsumoto has said that Ruby is designed for programmer productivity and fun, following the principles of good user interface design.83 At a Google Tech Talk in 2008 Matsumoto further stated, ""I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming, and to be happy. That is the primary purpose of Ruby language.""84 He stresses that systems design needs to emphasize human, rather than computer, needs:85","['matsumoto', 'say', 'ruby', 'design', 'programmer', 'productivity', 'fun', 'follow', 'principle', 'good', 'user', 'interface', 'design', 'google', 'tech', 'talk', '2008', 'matsumoto', 'state', 'hope', 'ruby', 'help', 'programmer', 'world', 'productive', 'enjoy', 'programming', 'happy', 'primary', 'purpose', 'ruby', 'language', '84', 'stress', 'system', 'design', 'need', 'emphasize', 'human', 'computer', 'needs']"
1313,"Often people, especially computer engineers, focus on the machines. They think, ""By doing this, the machine will run fast. By doing this, the machine will run more effectively. By doing this, the machine will something something something."" They are focusing on machines. But in fact we need to focus on humans, on how humans care about doing programming or operating the application of the machines. We are the masters. They are the slaves.","['people', 'especially', 'computer', 'engineer', 'focus', 'machine', 'think', 'machine', 'run', 'fast', 'machine', 'run', 'effectively', 'machine', 'focus', 'machine', 'fact', 'need', 'focus', 'human', 'human', 'care', 'programming', 'operate', 'application', 'machine', 'master', 'slave']"
1314,"Matsumoto has said his primary design goal was to make a language that he himself enjoyed using, by minimizing programmer work and possible confusion. He has said that he had not applied the principle of least astonishment POLA to the design of Ruby;85 in a May 2005 discussion on the newsgroup comp.lang.ruby, Matsumoto attempted to distance Ruby from POLA, explaining that because any design choice will be surprising to someone, he uses a personal standard in evaluating surprise. If that personal standard remains consistent, there would be few surprises for those familiar with the standard.86","['matsumoto', 'say', 'primary', 'design', 'goal', 'language', 'enjoy', 'minimize', 'programmer', 'work', 'possible', 'confusion', 'say', 'apply', 'principle', 'astonishment', 'pola', 'design', 'ruby', '2005', 'discussion', 'newsgroup', 'comp.lang.ruby', 'matsumoto', 'attempt', 'distance', 'ruby', 'pola', 'explain', 'design', 'choice', 'surprising', 'use', 'personal', 'standard', 'evaluate', 'surprise', 'personal', 'standard', 'remain', 'consistent', 'surprise', 'familiar', 'standard']"
1315,Matsumoto defined it this way in an interview:85,"['matsumoto', 'define', 'way', 'interview']"
1316,"Everyone has an individual background. Someone may come from Python, someone else may come from Perl, and they may be surprised by different aspects of the language. Then they come up to me and say, 'I was surprised by this feature of the language, so Ruby violates the principle of least surprise.' Wait. Wait. The principle of least surprise is not for you only. The principle of least surprise means principle of least my surprise. And it means the principle of least surprise after you learn Ruby very well. For example, I was a C++ programmer before I started designing Ruby. I programmed in C++ exclusively for two or three years. And after two years of C++ programming, it still surprises me.","['individual', 'background', 'come', 'python', 'come', 'perl', 'surprise', 'different', 'aspect', 'language', 'come', 'surprise', 'feature', 'language', 'ruby', 'violate', 'principle', 'surprise', 'wait', 'wait', 'principle', 'surprise', 'principle', 'surprise', 'mean', 'principle', 'surprise', 'mean', 'principle', 'surprise', 'learn', 'ruby', 'example', 'c++', 'programmer', 'start', 'design', 'ruby', 'program', 'c++', 'exclusively', 'year', 'year', 'c++', 'programming', 'surprise']"
1317,"Ruby is object-oriented: every value is an object, including classes and instances of types that many other languages designate as primitives such as integers, booleans, and ""null"". Variables always hold references to objects. Every function is a method and methods are always called on an object. Methods defined at the top level scope become methods of the Object class. Since this class is an ancestor of every other class, such methods can be called on any object. They are also visible in all scopes, effectively serving as ""global"" procedures. Ruby supports inheritance with dynamic dispatch, mixins and singleton methods belonging to, and defined for, a single instance rather than being defined on the class. Though Ruby does not support multiple inheritance, classes can import modules as mixins.","['ruby', 'object', 'orient', 'value', 'object', 'include', 'class', 'instance', 'type', 'language', 'designate', 'primitive', 'integer', 'boolean', 'null', 'variable', 'hold', 'reference', 'object', 'function', 'method', 'method', 'call', 'object', 'method', 'define', 'level', 'scope', 'method', 'object', 'class', 'class', 'ancestor', 'class', 'method', 'call', 'object', 'visible', 'scope', 'effectively', 'serve', 'global', 'procedure', 'ruby', 'support', 'inheritance', 'dynamic', 'dispatch', 'mixin', 'singleton', 'method', 'belong', 'define', 'single', 'instance', 'define', 'class', 'ruby', 'support', 'multiple', 'inheritance', 'class', 'import', 'module', 'mixin']"
1318,"Ruby has been described as a multi-paradigm programming language: it allows procedural programming defining functions/variables outside classes makes them part of the root, 'self' Object, with object orientation everything is an object or functional programming it has anonymous functions, closures, and continuations; statements all have values, and functions return the last evaluation. It has support for introspection, reflection and metaprogramming, as well as support for interpreter-based threads. Ruby features dynamic typing, and supports parametric polymorphism.","['ruby', 'describe', 'multi', 'paradigm', 'programming', 'language', 'allow', 'procedural', 'programming', 'defining', 'function', 'variable', 'outside', 'class', 'make', 'root', 'self', 'object', 'object', 'orientation', 'object', 'functional', 'programming', 'anonymous', 'function', 'closure', 'continuation', 'statement', 'value', 'function', 'return', 'evaluation', 'support', 'introspection', 'reflection', 'metaprogramming', 'support', 'interpreter', 'base', 'thread', 'ruby', 'feature', 'dynamic', 'typing', 'support', 'parametric', 'polymorphism']"
1319,"According to the Ruby FAQ, the syntax is similar to Perl's and the semantics are similar to Smalltalk's, but the design philosophy differs greatly from Python's.87","['accord', 'ruby', 'faq', 'syntax', 'similar', 'perl', 'semantic', 'similar', 'smalltalk', 'design', 'philosophy', 'differ', 'greatly', ""python's""]"
1320,"The syntax of Ruby is broadly similar to that of Perl and Python. It uses indention and readable. Class and method definitions are signaled by keywords, whereas code blocks can be defined by either keywords or braces. In contrast to Perl, variables are not obligatorily prefixed with a sigil. When used, the sigil changes the semantics of scope of the variable. For practical purposes there is no distinction between expressions and statements.9596 Line breaks are significant and taken as the end of a statement; a semicolon may be equivalently used. Unlike Python, indentation is not significant.","['syntax', 'ruby', 'broadly', 'similar', 'perl', 'python', 'use', 'indention', 'readable', 'class', 'method', 'definition', 'signal', 'keyword', 'code', 'block', 'define', 'keyword', 'brace', 'contrast', 'perl', 'variable', 'obligatorily', 'prefix', 'sigil', 'sigil', 'change', 'semantic', 'scope', 'variable', 'practical', 'purpose', 'distinction', 'expression', 'statements', 'line', 'break', 'significant', 'take', 'end', 'statement', 'semicolon', 'equivalently', 'unlike', 'python', 'indentation', 'significant']"
1321,"One of the differences from Python and Perl is that Ruby keeps all of its instance variables completely private to the class and only exposes them through accessor methods attr_writer, attr_reader, etc.. Unlike the ""getter"" and ""setter"" methods of other languages like C++ or Java, accessor methods in Ruby can be created with a single line of code via metaprogramming; however, accessor methods can also be created in the traditional fashion of C++ and Java. As invocation of these methods does not require the use of parentheses, it is trivial to change an instance variable into a full function, without modifying a single line of calling code or having to do any refactoring achieving similar functionality to C# and VB.NET property members.","['difference', 'python', 'perl', 'ruby', 'keep', 'instance', 'variable', 'completely', 'private', 'class', 'expose', 'accessor', 'method', 'attr_writer', 'attr_read', 'etc', 'unlike', 'getter', 'setter', 'method', 'language', 'like', 'c++', 'java', 'accessor', 'method', 'ruby', 'create', 'single', 'line', 'code', 'metaprogramme', 'accessor', 'method', 'create', 'traditional', 'fashion', 'c++', 'java', 'invocation', 'method', 'require', 'use', 'parenthesis', 'trivial', 'change', 'instance', 'variable', 'function', 'modify', 'single', 'line', 'call', 'code', 'have', 'refactoring', 'achieve', 'similar', 'functionality', 'vb.net', 'property', 'member']"
1322,"Python's property descriptors are similar, but come with a trade-off in the development process. If one begins in Python by using a publicly exposed instance variable, and later changes the implementation to use a private instance variable exposed through a property descriptor, code internal to the class may need to be adjusted to use the private variable rather than the public property. Ruby's design forces all instance variables to be private, but also provides a simple way to declare set and get methods. This is in keeping with the idea that in Ruby, one never directly accesses the internal members of a class from outside the class; rather, one passes a message to the class and receives a response.","['python', 'property', 'descriptor', 'similar', 'come', 'trade', 'development', 'process', 'begin', 'python', 'publicly', 'expose', 'instance', 'variable', 'later', 'change', 'implementation', 'use', 'private', 'instance', 'variable', 'expose', 'property', 'descriptor', 'code', 'internal', 'class', 'need', 'adjust', 'use', 'private', 'variable', 'public', 'property', 'ruby', 'design', 'force', 'instance', 'variable', 'private', 'provide', 'simple', 'way', 'declare', 'set', 'method', 'keep', 'idea', 'ruby', 'directly', 'access', 'internal', 'member', 'class', 'outside', 'class', 'pass', 'message', 'class', 'receive', 'response']"
1323,The original Ruby interpreter is often referred to as Matz's Ruby Interpreter or MRI. This implementation is written in C and uses its own Ruby-specific virtual machine.,"['original', 'ruby', 'interpreter', 'refer', 'matz', 'ruby', 'interpreter', 'mri', 'implementation', 'write', 'use', 'ruby', 'specific', 'virtual', 'machine']"
1324,"The standardized and retired Ruby 1.8 implementation was written in C, as a single-pass interpreted language.23","['standardized', 'retire', 'ruby', '1', 'implementation', 'write', 'single', 'pass', 'interpret', 'language']"
1325,"Starting with Ruby 1.9, and continuing with Ruby 2.x and above, the official Ruby interpreter has been YARV ""Yet Another Ruby VM"", and this implementation has superseded the slower virtual machine used in previous releases of MRI.","['start', 'ruby', '1', 'continue', 'ruby', '2.x', 'official', 'ruby', 'interpreter', 'yarv', 'ruby', 'implementation', 'supersede', 'slow', 'virtual', 'machine', 'previous', 'release', 'mri']"
1326,"As of 2018update, there are a number of alternative implementations of Ruby, including JRuby, Rubinius, and mruby. Each takes a different approach, with JRuby and Rubinius providing just-in-time compilation and mruby also providing ahead-of-time compilation.","['2018update', 'number', 'alternative', 'implementation', 'ruby', 'include', 'jruby', 'rubinius', 'mruby', 'take', 'different', 'approach', 'jruby', 'rubinius', 'provide', 'time', 'compilation', 'mruby', 'provide', 'ahead', 'time', 'compilation']"
1327,Ruby has three major alternative implementations:,"['ruby', 'major', 'alternative', 'implementation']"
1328,Other now defunct Ruby implementations were:,"['defunct', 'ruby', 'implementation']"
1329,"The maturity of Ruby implementations tends to be measured by their ability to run the Ruby on Rails Rails framework, because it is complex to implement and uses many Ruby-specific features. The point when a particular implementation achieves this goal is called ""the Rails singularity"". The reference implementation, JRuby, and Rubinius98 are all able to run Rails unmodified in a production environment.","['maturity', 'ruby', 'implementation', 'tend', 'measure', 'ability', 'run', 'ruby', 'rail', 'rails', 'framework', 'complex', 'implement', 'use', 'ruby', 'specific', 'feature', 'point', 'particular', 'implementation', 'achieve', 'goal', 'call', 'rail', 'singularity', 'reference', 'implementation', 'jruby', 'rubinius98', 'able', 'run', 'rail', 'unmodified', 'production', 'environment']"
1330,"Matsumoto originally developed Ruby on the 4.3BSD-based Sony NEWS-OS 3.x, but later migrated his work to SunOS 4.x, and finally to Linux.99100 By 1999, Ruby was known to work across many different operating systems. Modern Ruby versions and implementations are available on all major desktop, mobile and server-based operating systems. Ruby is also supported across a number of cloud hosting platforms like Jelastic, Heroku, Google Cloud Platform and others.","['matsumoto', 'originally', 'develop', 'ruby', '4bsd', 'base', 'sony', 'news', '3.x', 'later', 'migrate', 'work', 'sunos', '4.x', 'finally', 'linux', '1999', 'ruby', 'know', 'work', 'different', 'operating', 'system', 'modern', 'ruby', 'version', 'implementation', 'available', 'major', 'desktop', 'mobile', 'server', 'base', 'operating', 'system', 'ruby', 'support', 'number', 'cloud', 'host', 'platform', 'like', 'jelastic', 'heroku', 'google', 'cloud', 'platform']"
1331,"Tools such as RVM and RBEnv, facilitate installation and partitioning of multiple ruby versions, and multiple 'gemsets' on one machine.","['tool', 'rvm', 'rbenv', 'facilitate', 'installation', 'partitioning', 'multiple', 'ruby', 'version', 'multiple', 'gemset', 'machine']"
1332,"RubyGems is Ruby's package manager. A Ruby package is called a ""gem"" and can be installed via the command line. Most gems are libraries, though a few exist that are applications, such as IDEs.101 There are over 100,000 Ruby gems hosted on RubyGems.org.102","['rubygems', 'ruby', 'package', 'manager', 'ruby', 'package', 'call', 'gem', 'instal', 'command', 'line', 'gem', 'library', 'exist', 'application', 'ides', '100', 'ruby', 'gem', 'host', 'rubygems.org']"
1333,"Many new and existing Ruby libraries are hosted on GitHub, a service that offers version control repository hosting for Git.","['new', 'exist', 'ruby', 'library', 'host', 'github', 'service', 'offer', 'version', 'control', 'repository', 'host', 'git']"
1334,"The Ruby Application Archive, which hosted applications, documentation, and libraries for Ruby programming, was maintained until 2013, when its function was transferred to RubyGems.103","['ruby', 'application', 'archive', 'hosted', 'application', 'documentation', 'library', 'ruby', 'programming', 'maintain', '2013', 'function', 'transfer', 'rubygems']"
1335,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1336,"In software systems, encapsulation refers to the bundling of data with the mechanisms or methods that operate on the data, or the limiting of direct access to some data, such as an object's components.1 Encapsulation allows developers to present a consistent and usable interface which is independent of how a system is implemented internally. As one example, encapsulation can be used to hide the values or state of a structured data object inside a class, preventing direct access to them by clients in a way that could expose hidden implementation details or violate state invariance maintained by the methods.","['software', 'system', 'encapsulation', 'refer', 'bundling', 'datum', 'mechanism', 'method', 'operate', 'datum', 'limiting', 'direct', 'access', 'datum', 'object', 'components', 'encapsulation', 'allow', 'developer', 'present', 'consistent', 'usable', 'interface', 'independent', 'system', 'implement', 'internally', 'example', 'encapsulation', 'hide', 'value', 'state', 'structured', 'datum', 'object', 'inside', 'class', 'prevent', 'direct', 'access', 'client', 'way', 'expose', 'hidden', 'implementation', 'detail', 'violate', 'state', 'invariance', 'maintain', 'method']"
1337,"All object-oriented programming OOP systems support encapsulation, but encapsulation is not unique to OOP. Implementations of abstract data types, modules, and libraries, among other systems, also offer encapsulation. The similarity has been explained by programming language theorists in terms of existential types.2","['object', 'orient', 'programming', 'oop', 'system', 'support', 'encapsulation', 'encapsulation', 'unique', 'oop', 'implementation', 'abstract', 'datum', 'type', 'module', 'library', 'system', 'offer', 'encapsulation', 'similarity', 'explain', 'programming', 'language', 'theorist', 'term', 'existential', 'types']"
1338,"In object-oriented programming languages, and other related fields, encapsulation refers to one of two related but distinct notions, and sometimes to the combination thereof:34","['object', 'orient', 'programming', 'language', 'related', 'field', 'encapsulation', 'refer', 'related', 'distinct', 'notion', 'combination', 'thereof']"
1339,"Some programming language researchers and academics use the first meaning alone or in combination with the second as a distinguishing feature of object-oriented programming, while some programming languages that provide lexical closures view encapsulation as a feature of the language orthogonal to object orientation.","['programming', 'language', 'researcher', 'academic', 'use', 'meaning', 'combination', 'second', 'distinguish', 'feature', 'object', 'orient', 'programming', 'programming', 'language', 'provide', 'lexical', 'closure', 'view', 'encapsulation', 'feature', 'language', 'orthogonal', 'object', 'orientation']"
1340,"The second definition is motivated by the fact that in many object-oriented languages, and other related fields, the components are not hidden automatically and this can be overridden; thus, information hiding is defined as a separate notion by those who prefer the second definition.","['second', 'definition', 'motivate', 'fact', 'object', 'orient', 'language', 'related', 'field', 'component', 'hide', 'automatically', 'overridden', 'information', 'hiding', 'define', 'separate', 'notion', 'prefer', 'second', 'definition']"
1341,"The features of encapsulation are supported using classes in most object-oriented languages, although other alternatives also exist.","['feature', 'encapsulation', 'support', 'class', 'object', 'orient', 'language', 'alternative', 'exist']"
1342,"The authors of Design Patterns discuss the tension between inheritance and encapsulation at length and state that in their experience, designers overuse inheritance. They claim that inheritance often breaks encapsulation, given that inheritance exposes a subclass to the details of its parent's implementation.8 As described by the yo-yo problem, overuse of inheritance and therefore encapsulation, can become too complicated and hard to debug.","['author', 'design', 'patterns', 'discuss', 'tension', 'inheritance', 'encapsulation', 'length', 'state', 'experience', 'designer', 'overuse', 'inheritance', 'claim', 'inheritance', 'break', 'encapsulation', 'give', 'inheritance', 'expose', 'subclass', 'detail', 'parent', 'implementation', 'describe', 'problem', 'overuse', 'inheritance', 'encapsulation', 'complicated', 'hard', 'debug']"
1343,"Under the definition that encapsulation ""can be used to hide data members and member functions"", the internal representation of an object is generally hidden from view outside of the object's definition. Typically, only the object's own methods can directly inspect or manipulate its fields. Hiding the internals of the object protects its integrity by preventing users from setting the internal data of the component into an invalid or inconsistent state. A supposed benefit of encapsulation is that it can reduce system complexity, and thus increase robustness, by allowing the developer to limit the interdependencies between software components.citation needed","['definition', 'encapsulation', 'hide', 'data', 'member', 'member', 'function', 'internal', 'representation', 'object', 'generally', 'hide', 'view', 'outside', 'object', 'definition', 'typically', 'object', 'method', 'directly', 'inspect', 'manipulate', 'field', 'hide', 'internal', 'object', 'protect', 'integrity', 'prevent', 'user', 'set', 'internal', 'datum', 'component', 'invalid', 'inconsistent', 'state', 'supposed', 'benefit', 'encapsulation', 'reduce', 'system', 'complexity', 'increase', 'robustness', 'allow', 'developer', 'limit', 'interdependency', 'software', 'components.citation', 'need']"
1344,"Some languages like Smalltalk and Ruby only allow access via object methods, but most others e.g., C++, C#, Delphi or Java offer the programmer a degree of control over what is hidden, typically via keywords like public and private.6 ISO C++ standard refers to protected, private and public as ""access specifiers"" and that they do not ""hide any information"". Information hiding is accomplished by furnishing a compiled version of the source code that is interfaced via a header file.","['language', 'like', 'smalltalk', 'ruby', 'allow', 'access', 'object', 'method', 'e.g.', 'c++', 'delphi', 'java', 'offer', 'programmer', 'degree', 'control', 'hide', 'typically', 'keyword', 'like', 'public', 'private', 'iso', 'c++', 'standard', 'refer', 'protect', 'private', 'public', 'access', 'specifier', 'hide', 'information', 'information', 'hiding', 'accomplish', 'furnish', 'compile', 'version', 'source', 'code', 'interface', 'header', 'file']"
1345,"Almost always, there is a way to override such protection – usually via reflection API Ruby, Java, C#, etc., sometimes by mechanism like name mangling Python, or special keyword usage like friend in C++. Systems that provide object-level capability-based security adhering to the object-capability model are an exception, and guarantee strong encapsulation.","['way', 'override', 'protection', 'usually', 'reflection', 'api', 'ruby', 'java', 'etc', 'mechanism', 'like', 'mangle', 'python', 'special', 'keyword', 'usage', 'like', 'friend', 'c++', 'systems', 'provide', 'object', 'level', 'capability', 'base', 'security', 'adhere', 'object', 'capability', 'model', 'exception', 'guarantee', 'strong', 'encapsulation']"
1346,"Languages like C++, C#, Java, PHP, Swift, and Delphi offer ways to restrict access to data fields.","['language', 'like', 'c++', 'java', 'php', 'swift', 'delphi', 'offer', 'way', 'restrict', 'access', 'data', 'field']"
1347,Below is an example in C# that shows how access to a data field can be restricted through the use of a private keyword:,"['example', 'show', 'access', 'datum', 'field', 'restrict', 'use', 'private', 'keyword']"
1348,Below is an example in Java:,"['example', 'java']"
1349,"Encapsulation is also possible in non-object-oriented languages. In C, for example, a structure can be declared in the public API via the header file for a set of functions that operate on an item of data containing data members that are not accessible to clients of the API with the extern keyword.910","['encapsulation', 'possible', 'non', 'object', 'orient', 'language', 'example', 'structure', 'declare', 'public', 'api', 'header', 'file', 'set', 'function', 'operate', 'item', 'datum', 'contain', 'datum', 'member', 'accessible', 'client', 'api', 'extern', 'keyword']"
1350,"Clients call the API functions to allocate, operate on, and deallocate objects of an opaque data type. The contents of this type are known and accessible only to the implementation of the API functions; clients cannot directly access its contents. The source code for these functions defines the actual contents of the structure:","['client', 'api', 'function', 'allocate', 'operate', 'deallocate', 'object', 'opaque', 'datum', 'type', 'content', 'type', 'know', 'accessible', 'implementation', 'api', 'function', 'client', 'directly', 'access', 'content', 'source', 'code', 'function', 'define', 'actual', 'content', 'structure']"
1351,"Below is an example of Python, which does not support variable access restrictions. However, the convention is that a variable whose name is prefixed by an underscore should be considered private.11","['example', 'python', 'support', 'variable', 'access', 'restriction', 'convention', 'variable', 'prefix', 'underscore', 'consider', 'private']"
1352,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1353,"The European Conference on Object-Oriented Programming ECOOP, is an annual conference covering topics on object-oriented programming systems, languages and applications. Like other conferences, ECOOP offers various tracks and many simultaneous sessions, and thus has different meaning to different people.","['european', 'conference', 'object', 'orient', 'programming', 'ecoop', 'annual', 'conference', 'cover', 'topic', 'object', 'orient', 'programming', 'system', 'language', 'application', 'like', 'conference', 'ecoop', 'offer', 'track', 'simultaneous', 'session', 'different', 'meaning', 'different', 'people']"
1354,"The first ECOOP was held in Paris, France in 1987. It operates under the auspices of the Association Internationale pour les Technologies Objets, a non-profit organization located in Germany.","['ecoop', 'hold', 'paris', 'france', '1987', 'operate', 'auspex', 'association', 'internationale', 'pour', 'les', 'technologies', 'objets', 'non', 'profit', 'organization', 'locate', 'germany']"
1355,"ECOOP’s venue changes every year, and the categories of its program vary. Historically ECOOP has combined the presentation of academic papers with comparatively practical experience reports, panels, workshops and tutorials.","['ecoop', 'venue', 'change', 'year', 'category', 'program', 'vary', 'historically', 'ecoop', 'combine', 'presentation', 'academic', 'paper', 'comparatively', 'practical', 'experience', 'report', 'panel', 'workshop', 'tutorial']"
1356,"ECOOP helped object-oriented programming develop in Europe into what is now mainstream programming, and helped incubate a number of related disciplines, including design patterns, refactoring, aspect-oriented programming, and agile software development.","['ecoop', 'help', 'object', 'orient', 'programming', 'develop', 'europe', 'mainstream', 'programming', 'help', 'incubate', 'number', 'related', 'discipline', 'include', 'design', 'pattern', 'refactoring', 'aspect', 'orient', 'programming', 'agile', 'software', 'development']"
1357,The winners of the annual AITO Dahl-Nygaard Prize are offered the opportunity to give a keynote presentation at ECOOP.,"['winner', 'annual', 'aito', 'dahl', 'nygaard', 'prize', 'offer', 'opportunity', 'keynote', 'presentation', 'ecoop']"
1358,The sister conference of ECOOP in North America is OOPSLA.,"['sister', 'conference', 'ecoop', 'north', 'america', 'oopsla']"
1359,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1360,"In computing and computer programming, exception handling is the process of responding to the occurrence of exceptions – anomalous or exceptional conditions requiring special processing – during the execution of a program. In general, an exception breaks the normal flow of execution and executes a pre-registered exception handler; the details of how this is done depend on whether it is a hardware or software exception and how the software exception is implemented. Exception handling, if provided, is facilitated by specialized programming language constructs, hardware mechanisms like interrupts, or operating system OS inter-process communication IPC facilities like signals. Some exceptions, especially hardware ones, may be handled so gracefully that execution can resume where it was interrupted.","['computing', 'computer', 'programming', 'exception', 'handling', 'process', 'respond', 'occurrence', 'exception', 'anomalous', 'exceptional', 'condition', 'require', 'special', 'processing', 'execution', 'program', 'general', 'exception', 'break', 'normal', 'flow', 'execution', 'execute', 'pre', 'registered', 'exception', 'handler', 'detail', 'depend', 'hardware', 'software', 'exception', 'software', 'exception', 'implement', 'exception', 'handling', 'provide', 'facilitate', 'specialized', 'programming', 'language', 'construct', 'hardware', 'mechanism', 'like', 'interrupt', 'operating', 'system', 'inter', 'process', 'communication', 'ipc', 'facility', 'like', 'signal', 'exception', 'especially', 'hardware', 'one', 'handle', 'gracefully', 'execution', 'resume', 'interrupt']"
1361,"The definition of an exception is based on the observation that each procedure has a precondition, a set of circumstances for which it will terminate ""normally"".1 An exception handling mechanism allows the procedure to raise an exception2 if this precondition is violated,1 for example if the procedure has been called on an abnormal set of arguments. The exception handling mechanism then handles the exception.3 The precondition, and the definition of exception, is subjective. The set of ""normal"" circumstances is defined entirely by the programmer, e.g. the programmer may deem division by zero to be undefined, hence an exception, or devise some behavior such as returning zero or a special ""ZERO DIVIDE"" value circumventing the need for exceptions.4 Common exceptions include an invalid argument e.g. value is outside of the domain of a function, an unavailable resource like a missing file, a hard disk error, or out-of-memory errors, or that the routine has detected a normal condition that requires special handling, e.g., attention, end of file.","['definition', 'exception', 'base', 'observation', 'procedure', 'precondition', 'set', 'circumstance', 'terminate', 'normally', 'exception', 'handling', 'mechanism', 'allow', 'procedure', 'raise', 'exception2', 'precondition', 'violated', 'example', 'procedure', 'call', 'abnormal', 'set', 'argument', 'exception', 'handling', 'mechanism', 'handle', 'exception', 'precondition', 'definition', 'exception', 'subjective', 'set', 'normal', 'circumstance', 'define', 'entirely', 'programmer', 'e.g.', 'programmer', 'deem', 'division', 'zero', 'undefine', 'exception', 'devise', 'behavior', 'return', 'zero', 'special', 'zero', 'divide', 'value', 'circumvent', 'need', 'exceptions', 'common', 'exception', 'include', 'invalid', 'argument', 'e.g.', 'value', 'outside', 'domain', 'function', 'unavailable', 'resource', 'like', 'miss', 'file', 'hard', 'disk', 'error', 'memory', 'error', 'routine', 'detect', 'normal', 'condition', 'require', 'special', 'handling', 'e.g.', 'attention', 'end', 'file']"
1362,"Exception handling solves the semipredicate problem, in that the mechanism distinguishes normal return values from erroneous ones. In languages without built-in exception handling such as C, routines would need to signal the error in some other way, such as the common return code and errno pattern.5 Taking a broad view, errors can be considered to be a proper subset of exceptions,6 and explicit error mechanisms such as errno can be considered verbose forms of exception handling.5 The term ""exception"" is preferred to ""error"" because it does not imply that anything is wrong - a condition viewed as an error by one procedure or programmer may not be viewed that way by another. Even the term ""exception"" may be misleading because its typical connotation of ""outlier"" indicates that something infrequent or unusual has occurred, when in fact raising the exception may be a normal and usual situation in the program.7 For example, suppose a lookup function for an associative array throws an exception if the key has no value associated. Depending on context, this ""key absent"" exception may occur much more often than a successful lookup.8","['exception', 'handle', 'solve', 'semipredicate', 'problem', 'mechanism', 'distinguish', 'normal', 'return', 'value', 'erroneous', 'one', 'language', 'build', 'exception', 'handle', 'routine', 'need', 'signal', 'error', 'way', 'common', 'return', 'code', 'errno', 'pattern', 'take', 'broad', 'view', 'error', 'consider', 'proper', 'subset', 'exceptions', 'explicit', 'error', 'mechanism', 'errno', 'consider', 'verbose', 'form', 'exception', 'handling', 'term', 'exception', 'prefer', 'error', 'imply', 'wrong', 'condition', 'view', 'error', 'procedure', 'programmer', 'view', 'way', 'term', 'exception', 'misleading', 'typical', 'connotation', 'outlier', 'indicate', 'infrequent', 'unusual', 'occur', 'fact', 'raise', 'exception', 'normal', 'usual', 'situation', 'program', 'example', 'suppose', 'lookup', 'function', 'associative', 'array', 'throw', 'exception', 'key', 'value', 'associate', 'depend', 'context', 'key', 'absent', 'exception', 'occur', 'successful', 'lookup']"
1363,"A major influence on the scope and use of exceptions is social pressure, i.e. ""examples of use, typically found in core libraries, and code examples in technical books, magazine articles, and online discussion forums, and in an organization’s code standards"".9","['major', 'influence', 'scope', 'use', 'exception', 'social', 'pressure', 'i.e.', 'example', 'use', 'typically', 'find', 'core', 'library', 'code', 'example', 'technical', 'book', 'magazine', 'article', 'online', 'discussion', 'forum', 'organization', 'code', 'standards']"
1364,"The first hardware exception handling was found in the UNIVAC I from 1951. Arithmetic overflow executed two instructions at address 0, which could transfer control or fix up the result.10","['hardware', 'exception', 'handling', 'find', 'univac', '1951', 'arithmetic', 'overflow', 'execute', 'instruction', 'address', 'transfer', 'control', 'fix', 'result']"
1365,"Software exception handling developed in the 1960s and 1970s. LISP 1.5 1958-196111 allowed exceptions to be raised by the ERROR pseudo-function, similarly to errors raised by the interpreter or compiler. Exceptions were caught by the ERRORSET keyword, which returned NIL in case of an error, instead of terminating the program or entering the debugger.12 PL/I introduced its own form of exception handling circa 1964, allowing interrupts to be handled with ON units.13 MacLisp observed that ERRSET and ERR were used not only for error raising, but for non-local control flow, and thus added two new keywords, CATCH and THROW June 1972.14 The cleanup behavior now generally called ""finally"" was introduced in NIL New Implementation of LISP in the mid- to late-1970s as UNWIND-PROTECT.15 This was then adopted by Common Lisp. Contemporary with this was dynamic-wind in Scheme, which handled exceptions in closures. The first papers on structured exception handling were Goodenough 1975a and Goodenough 1975b.16 Exception handling was subsequently widely adopted by many programming languages from the 1980s onward.","['software', 'exception', 'handling', 'develop', '1960', '1970', 'lisp', '1', '1958', '196111', 'allow', 'exception', 'raise', 'error', 'pseudo', 'function', 'similarly', 'error', 'raise', 'interpreter', 'compiler', 'exception', 'catch', 'errorset', 'keyword', 'return', 'nil', 'case', 'error', 'instead', 'terminate', 'program', 'enter', 'debugger', 'introduce', 'form', 'exception', 'handle', 'circa', '1964', 'allow', 'interrupt', 'handle', 'units', 'maclisp', 'observe', 'errset', 'err', 'error', 'raising', 'non', 'local', 'control', 'flow', 'add', 'new', 'keyword', 'catch', 'throw', 'june', '1972', 'cleanup', 'behavior', 'generally', 'call', 'finally', 'introduce', 'nil', 'new', 'implementation', 'lisp', 'mid-', 'late-1970s', 'unwind', 'protect', 'adopt', 'common', 'lisp', 'contemporary', 'dynamic', 'wind', 'scheme', 'handle', 'exception', 'closure', 'paper', 'structured', 'exception', 'handling', 'goodenough', '1975a', 'goodenough', '1975b', 'exception', 'handling', 'subsequently', 'widely', 'adopt', 'programming', 'language', '1980', 'onward']"
1366,"There is no clear consensus as to the exact meaning of an exception with respect to hardware.17 From the implementation point of view, it is handled identically to an interrupt: the processor halts execution of the current program, looks up the interrupt handler in the interrupt vector table for that exception or interrupt condition, saves state, and switches control.","['clear', 'consensus', 'exact', 'meaning', 'exception', 'respect', 'hardware', 'implementation', 'point', 'view', 'handle', 'identically', 'interrupt', 'processor', 'halt', 'execution', 'current', 'program', 'look', 'interrupt', 'handler', 'interrupt', 'vector', 'table', 'exception', 'interrupt', 'condition', 'save', 'state', 'switch', 'control']"
1367,"Exception handling in the IEEE 754 floating-point standard refers in general to exceptional conditions and defines an exception as ""an event that occurs when an operation on some particular operands has no outcome suitable for every reasonable application. That operation might signal one or more exceptions by invoking the default or, if explicitly requested, a language-defined alternate handling.""","['exception', 'handling', 'ieee', '754', 'float', 'point', 'standard', 'refer', 'general', 'exceptional', 'condition', 'define', 'exception', 'event', 'occur', 'operation', 'particular', 'operand', 'outcome', 'suitable', 'reasonable', 'application', 'operation', 'signal', 'exception', 'invoke', 'default', 'explicitly', 'request', 'language', 'define', 'alternate', 'handling']"
1368,"By default, an IEEE 754 exception is resumable and is handled by substituting a predefined value for different exceptions, e.g. infinity for a divide by zero exception, and providing status flags for later checking of whether the exception occurred see C99 programming language for a typical example of handling of IEEE 754 exceptions. An exception-handling style enabled by the use of status flags involves: first computing an expression using a fast, direct implementation; checking whether it failed by testing status flags; and then, if necessary, calling a slower, more numerically robust, implementation.18","['default', 'ieee', '754', 'exception', 'resumable', 'handle', 'substitute', 'predefined', 'value', 'different', 'exception', 'e.g.', 'infinity', 'divide', 'zero', 'exception', 'provide', 'status', 'flag', 'later', 'checking', 'exception', 'occur', 'c99', 'programming', 'language', 'typical', 'example', 'handling', 'ieee', '754', 'exception', 'exception', 'handling', 'style', 'enable', 'use', 'status', 'flag', 'involve', 'compute', 'expression', 'fast', 'direct', 'implementation', 'check', 'fail', 'test', 'status', 'flag', 'necessary', 'call', 'slow', 'numerically', 'robust', 'implementation']"
1369,"The IEEE 754 standard uses the term ""trapping"" to refer to the calling of a user-supplied exception-handling routine on exceptional conditions, and is an optional feature of the standard. The standard recommends several usage scenarios for this, including the implementation of non-default pre-substitution of a value followed by resumption, to concisely handle removable singularities.181920","['ieee', '754', 'standard', 'use', 'term', 'trap', 'refer', 'calling', 'user', 'supply', 'exception', 'handling', 'routine', 'exceptional', 'condition', 'optional', 'feature', 'standard', 'standard', 'recommend', 'usage', 'scenario', 'include', 'implementation', 'non', 'default', 'pre', 'substitution', 'value', 'follow', 'resumption', 'concisely', 'handle', 'removable', 'singularities']"
1370,"The default IEEE 754 exception handling behaviour of resumption following pre-substitution of a default value avoids the risks inherent in changing flow of program control on numerical exceptions. For example, the 1996 Cluster spacecraft launch ended in a catastrophic explosion due in part to the Ada exception handling policy of aborting computation on arithmetic error. William Kahan claims the default IEEE 754 exception handling behavior would have prevented this.19","['default', 'ieee', '754', 'exception', 'handle', 'behaviour', 'resumption', 'follow', 'pre', 'substitution', 'default', 'value', 'avoid', 'risk', 'inherent', 'change', 'flow', 'program', 'control', 'numerical', 'exception', 'example', '1996', 'cluster', 'spacecraft', 'launch', 'end', 'catastrophic', 'explosion', 'ada', 'exception', 'handling', 'policy', 'abort', 'computation', 'arithmetic', 'error', 'william', 'kahan', 'claim', 'default', 'ieee', '754', 'exception', 'handle', 'behavior', 'prevent', 'this']"
1371,"Software exception handling and the support provided by software tools differs somewhat from what is understood by exception handling in hardware, but similar concepts are involved. In programming language mechanisms for exception handling, the term exception is typically used in a specific sense to denote a data structure storing information about an exceptional condition. One mechanism to transfer control, or raise an exception, is known as a throw. The exception is said to be thrown. Execution is transferred to a ""catch"".","['software', 'exception', 'handling', 'support', 'provide', 'software', 'tool', 'differ', 'somewhat', 'understand', 'exception', 'handling', 'hardware', 'similar', 'concept', 'involve', 'programming', 'language', 'mechanism', 'exception', 'handling', 'term', 'exception', 'typically', 'specific', 'sense', 'denote', 'data', 'structure', 'store', 'information', 'exceptional', 'condition', 'mechanism', 'transfer', 'control', 'raise', 'exception', 'know', 'throw', 'exception', 'say', 'throw', 'execution', 'transfer', 'catch']"
1372,Programming languages differ substantially in their notion of what an exception is. Contemporary languages can roughly be divided into two groups:9,"['programming', 'language', 'differ', 'substantially', 'notion', 'exception', 'contemporary', 'language', 'roughly', 'divide', 'groups']"
1373,"PL/I used dynamically scoped exceptions. PL/I exception handling included events that are not errors, e.g., attention, end-of-file, modification of listed variables.citation needed","['dynamically', 'scope', 'exception', 'exception', 'handling', 'include', 'event', 'error', 'e.g.', 'attention', 'end', 'file', 'modification', 'list', 'variables.citation', 'need']"
1374,"Many computer languages have built-in syntactic support for exceptions and exception handling. This includes ActionScript, Ada, BlitzMax, C++, C#, Clojure, COBOL, D, ECMAScript, Eiffel, Java, ML, Object Pascal e.g. Delphi, Free Pascal, and the like, PowerBuilder, Objective-C, OCaml, PHP as of version 5, PL/I, PL/SQL, Prolog, Python, REALbasic, Ruby, Scala, Seed7, Smalltalk, Tcl, Visual Prolog and most .NET languages.","['computer', 'language', 'build', 'syntactic', 'support', 'exception', 'exception', 'handling', 'include', 'actionscript', 'ada', 'blitzmax', 'c++', 'clojure', 'cobol', 'ecmascript', 'eiffel', 'java', 'object', 'pascal', 'e.g.', 'delphi', 'free', 'pascal', 'like', 'powerbuilder', 'objective', 'ocaml', 'php', 'version', 'sql', 'prolog', 'python', 'realbasic', 'ruby', 'scala', 'seed7', 'smalltalk', 'tcl', 'visual', 'prolog', '.net', 'language']"
1375,"Excluding minor syntactic differences, there are only a couple of exception handling styles in use. In the most popular style, an exception is initiated by a special statement throw or raise with an exception object e.g. with Java or Object Pascal or a value of a special extendable enumerated type e.g. with Ada or SML. The scope for exception handlers starts with a marker clause try or the language's block starter such as begin and ends in the start of the first handler clause catch, except, rescue. Several handler clauses can follow, and each can specify which exception types it handles and what name it uses for the exception object. As a minor variation, some languages use a single handler clause, which deals with the class of the exception internally.","['exclude', 'minor', 'syntactic', 'difference', 'couple', 'exception', 'handle', 'style', 'use', 'popular', 'style', 'exception', 'initiate', 'special', 'statement', 'throw', 'raise', 'exception', 'object', 'e.g.', 'java', 'object', 'pascal', 'value', 'special', 'extendable', 'enumerate', 'type', 'e.g.', 'ada', 'sml', 'scope', 'exception', 'handler', 'start', 'marker', 'clause', 'try', 'language', 'block', 'starter', 'begin', 'end', 'start', 'handler', 'clause', 'catch', 'rescue', 'handler', 'clause', 'follow', 'specify', 'exception', 'type', 'handle', 'use', 'exception', 'object', 'minor', 'variation', 'language', 'use', 'single', 'handler', 'clause', 'deal', 'class', 'exception', 'internally']"
1376,"Also common is a related clause finally or ensure that is executed whether an exception occurred or not, typically to release resources acquired within the body of the exception-handling block. Notably, C++ does not provide this construct, recommending instead the Resource Acquisition Is Initialization RAII technique which frees resources using destructors.24 According to a 2008 paper by Westley Weimer and George Necula, the syntax of the try...finally blocks in Java is a contributing factor to software defects. When a method needs to handle the acquisition and release of 3–5 resources, programmers are apparently unwilling to nest enough blocks due to readability concerns, even when this would be a correct solution. It is possible to use a single try...finally block even when dealing with multiple resources, but that requires a correct use of sentinel values, which is another common source of bugs for this type of problem.25: 8:6–8:7","['common', 'related', 'clause', 'finally', 'ensure', 'execute', 'exception', 'occur', 'typically', 'release', 'resource', 'acquire', 'body', 'exception', 'handling', 'block', 'notably', 'c++', 'provide', 'construct', 'recommend', 'instead', 'resource', 'acquisition', 'initialization', 'raii', 'technique', 'free', 'resource', 'destructors', 'accord', '2008', 'paper', 'westley', 'weimer', 'george', 'necula', 'syntax', 'try', 'finally', 'block', 'java', 'contribute', 'factor', 'software', 'defect', 'method', 'need', 'handle', 'acquisition', 'release', '3–5', 'resource', 'programmer', 'apparently', 'unwilling', 'nest', 'block', 'readability', 'concern', 'correct', 'solution', 'possible', 'use', 'single', 'try', 'finally', 'block', 'deal', 'multiple', 'resource', 'require', 'correct', 'use', 'sentinel', 'value', 'common', 'source', 'bug', 'type', 'problem', '8–8']"
1377,Python and Ruby also permit a clause else that is used in case no exception occurred before the end of the handler's scope was reached.,"['python', 'ruby', 'permit', 'clause', 'case', 'exception', 'occur', 'end', 'handler', 'scope', 'reach']"
1378,"In its whole, exception handling code might look like this in Java-like pseudocode:","['exception', 'handling', 'code', 'look', 'like', 'java', 'like', 'pseudocode']"
1379,"C does not have try-catch exception handling, but uses return codes for error checking. The setjmp and longjmp standard library functions can be used to implement try-catch handling via macros.26","['try', 'catch', 'exception', 'handling', 'use', 'return', 'code', 'error', 'checking', 'setjmp', 'longjmp', 'standard', 'library', 'function', 'implement', 'try', 'catch', 'handling', 'macros']"
1380,Perl 5 uses die for throw and eval if $@ for try-catch. It has CPAN modules that offer try-catch semantics.27,"['perl', 'use', 'die', 'throw', 'eval', 'try', 'catch', 'cpan', 'module', 'offer', 'try', 'catch', 'semantics']"
1381,"When an exception is thrown, the program searches back through the stack of function calls until an exception handler is found. Some languages call for unwinding the stack as this search progresses. That is, if function .mw-parser-output .monospacedfont-family:monospace,monospacef, containing a handler H for exception E, calls function g, which in turn calls function h, and an exception E occurs in h, then functions h and g may be terminated, and H in f will handle E. This is said to be termination semantics. Alternately, the exception handling mechanisms may not unwind the stack on entrynote 1 to an exception handler, giving the exception handler the option to restart the computation, resume or unwind. This allows the program to continue the computation at exactly the same place where the error occurred for example when a previously missing file has become available or to implement notifications, logging, queries and fluid variables on top of the exception handling mechanism as done in Smalltalk. Allowing the computation to resume where it left off is termed resumption semantics.","['exception', 'throw', 'program', 'search', 'stack', 'function', 'call', 'exception', 'handler', 'find', 'language', 'unwind', 'stack', 'search', 'progress', 'function', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacef', 'contain', 'handler', 'exception', 'call', 'function', 'turn', 'call', 'function', 'exception', 'occur', 'function', 'terminate', 'handle', 'say', 'termination', 'semantic', 'alternately', 'exception', 'handling', 'mechanism', 'unwind', 'stack', 'entrynote', 'exception', 'handler', 'give', 'exception', 'handler', 'option', 'restart', 'computation', 'resume', 'unwind', 'allow', 'program', 'continue', 'computation', 'exactly', 'place', 'error', 'occur', 'example', 'previously', 'miss', 'file', 'available', 'implement', 'notification', 'log', 'query', 'fluid', 'variable', 'exception', 'handling', 'mechanism', 'smalltalk', 'allow', 'computation', 'resume', 'leave', 'term', 'resumption', 'semantic']"
1382,There are theoretical and design arguments in favor of either decision. C++ standardization discussions in 1989–1991 resulted in a definitive decision to use termination semantics in C++.28 Bjarne Stroustrup cites a presentation by Jim Mitchell as a key data point:,"['theoretical', 'design', 'argument', 'favor', 'decision', 'c++', 'standardization', 'discussion', '1989–1991', 'result', 'definitive', 'decision', 'use', 'termination', 'semantic', 'c++', 'bjarne', 'stroustrup', 'cite', 'presentation', 'jim', 'mitchell', 'key', 'datum', 'point']"
1383,Jim had used exception handling in half a dozen languages over a period of 20 years and was an early proponent of resumption semantics as one of the main designers and implementers of Xerox's Cedar/Mesa system. His message was,"['jim', 'exception', 'handle', 'half', 'dozen', 'language', 'period', 'year', 'early', 'proponent', 'resumption', 'semantic', 'main', 'designer', 'implementer', 'xerox', 'cedar', 'mesa', 'system', 'message']"
1384,"He backed this statement with experience from several operating systems. The key example was Cedar/Mesa: It was written by people who liked and used resumption, but after ten years of use, there was only one use of resumption left in the half million line system – and that was a context inquiry. Because resumption wasn't actually necessary for such a context inquiry, they removed it and found a significant speed increase in that part of the system. In each and every case where resumption had been used it had – over the ten years – become a problem and a more appropriate design had replaced it. Basically, every use of resumption had represented a failure to keep separate levels of abstraction disjoint.16","['back', 'statement', 'experience', 'operating', 'system', 'key', 'example', 'cedar', 'mesa', 'write', 'people', 'like', 'resumption', 'year', 'use', 'use', 'resumption', 'leave', 'half', 'million', 'line', 'system', 'context', 'inquiry', 'resumption', 'actually', 'necessary', 'context', 'inquiry', 'remove', 'find', 'significant', 'speed', 'increase', 'system', 'case', 'resumption', 'year', 'problem', 'appropriate', 'design', 'replace', 'basically', 'use', 'resumption', 'represent', 'failure', 'separate', 'level', 'abstraction', 'disjoint']"
1385,"Exception-handling languages with resumption include Common Lisp with its Condition System, PL/I, Dylan, R,29 and Smalltalk. However, the majority of newer programming languages follow C++ and use termination semantics.","['exception', 'handling', 'language', 'resumption', 'include', 'common', 'lisp', 'condition', 'system', 'dylan', 'r', 'smalltalk', 'majority', 'new', 'programming', 'language', 'follow', 'c++', 'use', 'termination', 'semantic']"
1386,"The implementation of exception handling in programming languages typically involves a fair amount of support from both a code generator and the runtime system accompanying a compiler. It was the addition of exception handling to C++ that ended the useful lifetime of the original C++ compiler, Cfront.30 Two schemes are most common. The first, .mw-parser-output .vanchor>:target~.vanchor-textbackground-color:#b1d2ffdynamic registration, generates code that continually updates structures about the program state in terms of exception handling.31 Typically, this adds a new element to the stack frame layout that knows what handlers are available for the function or method associated with that frame; if an exception is thrown, a pointer in the layout directs the runtime to the appropriate handler code. This approach is compact in terms of space, but adds execution overhead on frame entry and exit. It was commonly used in many Ada implementations, for example, where complex generation and runtime support was already needed for many other language features. Microsoft's 32-bit Structured Exception Handling SEH uses this approach with a separate exception stack.32 Dynamic registration, being fairly straightforward to define, is amenable to proof of correctness.33","['implementation', 'exception', 'handling', 'programming', 'language', 'typically', 'involve', 'fair', 'support', 'code', 'generator', 'runtime', 'system', 'accompany', 'compiler', 'addition', 'exception', 'handle', 'c++', 'end', 'useful', 'lifetime', 'original', 'c++', 'compiler', 'cfront', 'scheme', 'common', '.mw', 'parser', 'output', '.vanchor>:target~.vanchor', 'textbackground', 'color:#b1d2ffdynamic', 'registration', 'generate', 'code', 'continually', 'update', 'structure', 'program', 'state', 'term', 'exception', 'handling', 'typically', 'add', 'new', 'element', 'stack', 'frame', 'layout', 'know', 'handler', 'available', 'function', 'method', 'associate', 'frame', 'exception', 'throw', 'pointer', 'layout', 'direct', 'runtime', 'appropriate', 'handler', 'code', 'approach', 'compact', 'term', 'space', 'add', 'execution', 'overhead', 'frame', 'entry', 'exit', 'commonly', 'ada', 'implementation', 'example', 'complex', 'generation', 'runtime', 'support', 'need', 'language', 'feature', 'microsoft', 'bit', 'structured', 'exception', 'handle', 'seh', 'use', 'approach', 'separate', 'exception', 'stack', 'dynamic', 'registration', 'fairly', 'straightforward', 'define', 'amenable', 'proof', 'correctness']"
1387,"The second scheme, and the one implemented in many production-quality C++ compilers and 64-bit Microsoft SEH, is a table-driven approach. This creates static tables at compile time and link time that relate ranges of the program counter to the program state with respect to exception handling.34 Then, if an exception is thrown, the runtime system looks up the current instruction location in the tables and determines what handlers are in play and what needs to be done. This approach minimizes executive overhead for the case where an exception is not thrown. This happens at the cost of some space, but this space can be allocated into read-only, special-purpose data sections that are not loaded or relocated until an exception is actually thrown.35 The location in memory of the code for handling an exception need not be located within or even near the region of memory where the rest of the function's code is stored. So if an exception is thrown then a performance hit – roughly comparable to a function call36 – may occur if the necessary exception handling code needs to be loaded/cached. However, this scheme has minimal performance cost if no exception is thrown. Since exceptions in C++ are supposed to be exceptional i.e. uncommon/rare events, the phrase ""zero-cost exceptions""note 2 is sometimes used to describe exception handling in C++. Like runtime type identification RTTI, exceptions might not adhere to C++'s zero-overhead principle as implementing exception handling at run-time requires a non-zero amount of memory for the lookup table.37 For this reason, exception handling and RTTI can be disabled in many C++ compilers, which may be useful for systems with very limited memory37 such as embedded systems. This second approach is also superior in terms of achieving thread safetycitation needed.","['second', 'scheme', 'implement', 'production', 'quality', 'c++', 'compiler', 'bit', 'microsoft', 'seh', 'table', 'drive', 'approach', 'create', 'static', 'table', 'compile', 'time', 'link', 'time', 'relate', 'range', 'program', 'counter', 'program', 'state', 'respect', 'exception', 'handling', 'exception', 'throw', 'runtime', 'system', 'look', 'current', 'instruction', 'location', 'table', 'determine', 'handler', 'play', 'need', 'approach', 'minimize', 'executive', 'overhead', 'case', 'exception', 'throw', 'happen', 'cost', 'space', 'space', 'allocate', 'read', 'special', 'purpose', 'datum', 'section', 'load', 'relocate', 'exception', 'actually', 'thrown', 'location', 'memory', 'code', 'handle', 'exception', 'need', 'locate', 'near', 'region', 'memory', 'rest', 'function', 'code', 'store', 'exception', 'throw', 'performance', 'hit', 'roughly', 'comparable', 'function', 'call36', 'occur', 'necessary', 'exception', 'handle', 'code', 'need', 'load', 'cache', 'scheme', 'minimal', 'performance', 'cost', 'exception', 'throw', 'exception', 'c++', 'suppose', 'exceptional', 'i.e.', 'uncommon', 'rare', 'event', 'phrase', 'zero', 'cost', 'exceptions', 'describe', 'exception', 'handling', 'c++', 'like', 'runtime', 'type', 'identification', 'rtti', 'exception', 'adhere', 'c++', 'zero', 'overhead', 'principle', 'implement', 'exception', 'handling', 'run', 'time', 'require', 'non', 'zero', 'memory', 'lookup', 'table', 'reason', 'exception', 'handling', 'rtti', 'disable', 'c++', 'compiler', 'useful', 'system', 'limited', 'memory37', 'embed', 'system', 'second', 'approach', 'superior', 'term', 'achieve', 'thread', 'safetycitation', 'need']"
1388,"Other definitional and implementation schemes have been proposed as well. For languages that support metaprogramming, approaches that involve no overhead at all beyond the already present support for reflection have been advanced.38","['definitional', 'implementation', 'scheme', 'propose', 'language', 'support', 'metaprogramme', 'approach', 'involve', 'overhead', 'present', 'support', 'reflection', 'advanced']"
1389,"A different view of exceptions is based on the principles of design by contract and is supported in particular by the Eiffel language. The idea is to provide a more rigorous basis for exception handling by defining precisely what is ""normal"" and ""abnormal"" behavior. Specifically, the approach is based on two concepts:","['different', 'view', 'exception', 'base', 'principle', 'design', 'contract', 'support', 'particular', 'eiffel', 'language', 'idea', 'provide', 'rigorous', 'basis', 'exception', 'handle', 'define', 'precisely', 'normal', 'abnormal', 'behavior', 'specifically', 'approach', 'base', 'concept']"
1390,"The ""Safe Exception Handling principle"" as introduced by Bertrand Meyer in Object-Oriented Software Construction then holds that there are only two meaningful ways a routine can react when an exception occurs:","['safe', 'exception', 'handling', 'principle', 'introduce', 'bertrand', 'meyer', 'object', 'orient', 'software', 'construction', 'hold', 'meaningful', 'way', 'routine', 'react', 'exception', 'occur']"
1391,"In particular, simply ignoring an exception is not permitted; a block must either be retried and successfully complete, or propagate the exception to its caller.","['particular', 'simply', 'ignore', 'exception', 'permit', 'block', 'retry', 'successfully', 'complete', 'propagate', 'exception', 'caller']"
1392,"Here is an example expressed in Eiffel syntax. It assumes that a routine send_fast is normally the better way to send a message, but it may fail, triggering an exception; if so, the algorithm next uses send_slow, which will fail less often. If send_slow fails, the routine send as a whole should fail, causing the caller to get an exception.","['example', 'express', 'eiffel', 'syntax', 'assume', 'routine', 'send_fast', 'normally', 'well', 'way', 'send', 'message', 'fail', 'trigger', 'exception', 'algorithm', 'use', 'send_slow', 'fail', 'send_slow', 'fail', 'routine', 'send', 'fail', 'cause', 'caller', 'exception']"
1393,"The boolean local variables are initialized to False at the start. If send_fast fails, the body do clause will be executed again, causing execution of send_slow. If this execution of send_slow fails, the rescue clause will execute to the end with no retry no else clause in the final if, causing the routine execution as a whole to fail.","['boolean', 'local', 'variable', 'initialize', 'false', 'start', 'send_fast', 'fail', 'body', 'clause', 'execute', 'cause', 'execution', 'send_slow', 'execution', 'send_slow', 'fail', 'rescue', 'clause', 'execute', 'end', 'retry', 'clause', 'final', 'cause', 'routine', 'execution', 'fail']"
1394,"This approach has the merit of defining clearly what ""normal"" and ""abnormal"" cases are: an abnormal case, causing an exception, is one in which the routine is unable to fulfill its contract. It defines a clear distribution of roles: the do clause normal body is in charge of achieving, or attempting to achieve, the routine's contract; the rescue clause is in charge of reestablishing the context and restarting the process, if this has a chance of succeeding, but not of performing any actual computation.","['approach', 'merit', 'define', 'clearly', 'normal', 'abnormal', 'case', 'abnormal', 'case', 'cause', 'exception', 'routine', 'unable', 'fulfill', 'contract', 'define', 'clear', 'distribution', 'role', 'clause', 'normal', 'body', 'charge', 'achieving', 'attempt', 'achieve', 'routine', 'contract', 'rescue', 'clause', 'charge', 'reestablish', 'context', 'restart', 'process', 'chance', 'succeed', 'perform', 'actual', 'computation']"
1395,"Although exceptions in Eiffel have a fairly clear philosophy, Kiniry 2006 criticizes their implementation because ""Exceptions that are part of the language definition are represented by INTEGER values, developer-defined exceptions by STRING values. ... Additionally, because they are basic values and not objects, they have no inherent semantics beyond that which is expressed in a helper routine which necessarily cannot be foolproof because of the representation overloading in effect e.g., one cannot differentiate two integers of the same value.""9","['exception', 'eiffel', 'fairly', 'clear', 'philosophy', 'kiniry', '2006', 'criticize', 'implementation', 'exception', 'language', 'definition', 'represent', 'integer', 'value', 'developer', 'define', 'exception', 'string', 'value', 'additionally', 'basic', 'value', 'object', 'inherent', 'semantic', 'express', 'helper', 'routine', 'necessarily', 'foolproof', 'representation', 'overloading', 'effect', 'e.g.', 'differentiate', 'integer', 'value']"
1396,"Contemporary applications face many design challenges when considering exception handling strategies. Particularly in modern enterprise level applications, exceptions must often cross process boundaries and machine boundaries. Part of designing a solid exception handling strategy is recognizing when a process has failed to the point where it cannot be economically handled by the software portion of the process.39","['contemporary', 'application', 'face', 'design', 'challenge', 'consider', 'exception', 'handling', 'strategy', 'particularly', 'modern', 'enterprise', 'level', 'application', 'exception', 'cross', 'process', 'boundary', 'machine', 'boundary', 'design', 'solid', 'exception', 'handling', 'strategy', 'recognize', 'process', 'fail', 'point', 'economically', 'handle', 'software', 'portion', 'process']"
1397,"If an exception is thrown and not caught operationally, an exception is thrown when there is no applicable handler specified, the uncaught exception is handled by the runtime; the routine that does this is called the uncaught exception handler.4041 The most common default behavior is to terminate the program and print an error message to the console, usually including debug information such as a string representation of the exception and the stack trace.404243 This is often avoided by having a top-level application-level handler for example in an event loop that catches exceptions before they reach the runtime.4044","['exception', 'throw', 'catch', 'operationally', 'exception', 'throw', 'applicable', 'handler', 'specify', 'uncaught', 'exception', 'handle', 'runtime', 'routine', 'call', 'uncaught', 'exception', 'handler', 'common', 'default', 'behavior', 'terminate', 'program', 'print', 'error', 'message', 'console', 'usually', 'include', 'debug', 'information', 'string', 'representation', 'exception', 'stack', 'trace', 'avoid', 'have', 'level', 'application', 'level', 'handler', 'example', 'event', 'loop', 'catch', 'exception', 'reach', 'runtime']"
1398,"Note that even though an uncaught exception may result in the program terminating abnormally the program may not be correct if an exception is not caught, notably by not rolling back partially completed transactions, or not releasing resources, the process terminates normally assuming the runtime works correctly, as the runtime which is controlling execution of the program can ensure orderly shutdown of the process.","['note', 'uncaught', 'exception', 'result', 'program', 'terminate', 'abnormally', 'program', 'correct', 'exception', 'catch', 'notably', 'roll', 'partially', 'complete', 'transaction', 'release', 'resource', 'process', 'terminates', 'normally', 'assume', 'runtime', 'work', 'correctly', 'runtime', 'control', 'execution', 'program', 'ensure', 'orderly', 'shutdown', 'process']"
1399,"In a multithreaded program, an uncaught exception in a thread may instead result in termination of just that thread, not the entire process uncaught exceptions in the thread-level handler are caught by the top-level handler. This is particularly important for servers, where for example a servlet running in its own thread can be terminated without the server overall being affected.","['multithreaded', 'program', 'uncaught', 'exception', 'thread', 'instead', 'result', 'termination', 'thread', 'entire', 'process', 'uncaught', 'exception', 'thread', 'level', 'handler', 'catch', 'level', 'handler', 'particularly', 'important', 'server', 'example', 'servlet', 'run', 'thread', 'terminate', 'server', 'overall', 'affect']"
1400,"This default uncaught exception handler may be overridden, either globally or per-thread, for example to provide alternative logging or end-user reporting of uncaught exceptions, or to restart threads that terminate due to an uncaught exception. For example, in Java this is done for a single thread via Thread.setUncaughtExceptionHandler and globally via Thread.setDefaultUncaughtExceptionHandler; in Python this is done by modifying sys.excepthook.","['default', 'uncaught', 'exception', 'handler', 'overridden', 'globally', 'thread', 'example', 'provide', 'alternative', 'logging', 'end', 'user', 'reporting', 'uncaught', 'exception', 'restart', 'thread', 'terminate', 'uncaught', 'exception', 'example', 'java', 'single', 'thread', 'thread.setuncaughtexceptionhandler', 'globally', 'thread.setdefaultuncaughtexceptionhandler', 'python', 'modify', 'sys.excepthook']"
1401,"Java introduced the notion of checked exceptions,4546 which are special classes of exceptions. The checked exceptions that a method may raise must be part of the method's signature. For instance, if a method might throw an IOException, it must declare this fact explicitly in its method signature. Failure to do so raises a compile-time error. According to Hanspeter Mössenböck, checked exceptions are less convenient but more robust.47 Checked exceptions can, at compile time, reduce the incidence of unhandled exceptions surfacing at runtime in a given application.","['java', 'introduce', 'notion', 'check', 'exceptions', 'special', 'class', 'exception', 'check', 'exception', 'method', 'raise', 'method', 'signature', 'instance', 'method', 'throw', 'ioexception', 'declare', 'fact', 'explicitly', 'method', 'signature', 'failure', 'raise', 'compile', 'time', 'error', 'accord', 'hanspeter', 'mössenböck', 'check', 'exception', 'convenient', 'robust', 'check', 'exception', 'compile', 'time', 'reduce', 'incidence', 'unhandled', 'exception', 'surface', 'runtime', 'give', 'application']"
1402,"Kiniry writes that ""As any Java programmer knows, the volume of try catch code in a typical Java application is sometimes larger than the comparable code necessary for explicit formal parameter and return value checking in other languages that do not have checked exceptions. In fact, the general consensus among in-the-trenches Java programmers is that dealing with checked exceptions is nearly as unpleasant a task as writing documentation. Thus, many programmers report that they “resent” checked exceptions."".9 Martin Fowler has written ""...on the whole I think that exceptions are good, but Java checked exceptions are more trouble than they are worth.""48 As of 2006 no major programming language has followed Java in adding checked exceptions.48 For example, C# does not require or allow declaration of any exception specifications, with the following posted by Eric Gunnerson:49948","['kiniry', 'write', 'java', 'programmer', 'know', 'volume', 'try', 'catch', 'code', 'typical', 'java', 'application', 'large', 'comparable', 'code', 'necessary', 'explicit', 'formal', 'parameter', 'return', 'value', 'checking', 'language', 'check', 'exception', 'fact', 'general', 'consensus', 'trench', 'java', 'programmer', 'deal', 'check', 'exception', 'nearly', 'unpleasant', 'task', 'write', 'documentation', 'programmer', 'report', 'resent', 'check', 'exception', 'martin', 'fowler', 'write', 'think', 'exception', 'good', 'java', 'check', 'exception', 'trouble', 'worth', '48', '2006', 'major', 'programming', 'language', 'follow', 'java', 'add', 'check', 'exceptions', 'example', 'require', 'allow', 'declaration', 'exception', 'specification', 'following', 'post', 'eric', 'gunnerson']"
1403,"""Examination of small programs leads to the conclusion that requiring exception specifications could both enhance developer productivity and enhance code quality, but experience with large software projects suggests a different result – decreased productivity and little or no increase in code quality.""","['examination', 'small', 'program', 'lead', 'conclusion', 'require', 'exception', 'specification', 'enhance', 'developer', 'productivity', 'enhance', 'code', 'quality', 'experience', 'large', 'software', 'project', 'suggest', 'different', 'result', 'decrease', 'productivity', 'little', 'increase', 'code', 'quality']"
1404,Anders Hejlsberg describes two concerns with checked exceptions:50,"['anders', 'hejlsberg', 'describe', 'concern', 'check', 'exceptions']"
1405,"To work around these, Hejlsberg says programmers resort to circumventing the feature by using a throws Exception declaration. Another circumvention is to use a try ... catch Exception e handler.50 This is referred to as catch-all exception handling or Pokémon exception handling after the show's catchphrase ""Gotta Catch ‘Em All!"".51 The Java Tutorials discourage catch-all exception handling as it may catch exceptions ""for which the handler was not intended"".52 Still another discouraged circumvention is to make all exceptions subclass RuntimeException.53 An encouraged solution is to use a catch-all handler or throws clause but with a specific superclass of all potentially thrown exceptions rather than the general superclass Exception. Another encouraged solution is to define and declare exception types that are suitable for the level of abstraction of the called method54 and map lower level exceptions to these types by using exception chaining.","['work', 'hejlsberg', 'say', 'programmer', 'resort', 'circumvent', 'feature', 'throw', 'exception', 'declaration', 'circumvention', 'use', 'try', 'catch', 'exception', 'handler', 'refer', 'catch', 'exception', 'handling', 'pokémon', 'exception', 'handle', 'catchphrase', 'got', 'catch', 'all!', 'java', 'tutorials', 'discourage', 'catch', 'exception', 'handling', 'catch', 'exception', 'handler', 'intended', 'discouraged', 'circumvention', 'exception', 'subclass', 'runtimeexception', 'encouraged', 'solution', 'use', 'catch', 'handler', 'throw', 'clause', 'specific', 'superclass', 'potentially', 'throw', 'exception', 'general', 'superclass', 'exception', 'encouraged', 'solution', 'define', 'declare', 'exception', 'type', 'suitable', 'level', 'abstraction', 'call', 'method54', 'map', 'low', 'level', 'exception', 'type', 'exception', 'chaining']"
1406,"The roots of checked exceptions go back to the CLU programming language's notion of exception specification.55 A function could raise only exceptions listed in its type, but any leaking exceptions from called functions would automatically be turned into the sole runtime exception, failure, instead of resulting in compile-time error.7 Later, Modula-3 had a similar feature.56 These features don't include the compile time checking that is central in the concept of checked exceptions.55","['root', 'check', 'exception', 'clu', 'programming', 'language', 'notion', 'exception', 'specification', 'function', 'raise', 'exception', 'list', 'type', 'leak', 'exception', 'call', 'function', 'automatically', 'turn', 'sole', 'runtime', 'exception', 'failure', 'instead', 'result', 'compile', 'time', 'error', 'later', 'modula-3', 'similar', 'feature', 'feature', 'include', 'compile', 'time', 'checking', 'central', 'concept', 'check', 'exceptions']"
1407,"Early versions of the C++ programming language included an optional mechanism similar to checked exceptions, called exception specifications. By default any function could throw any exception, but this could be limited by a throw clause added to the function signature, that specified which exceptions the function may throw. Exception specifications were not enforced at compile-time. Violations resulted in the global function std::unexpected being called.57 An empty exception specification could be given, which indicated that the function will throw no exception. This was not made the default when exception handling was added to the language because it would have required too much modification of existing code, would have impeded interaction with code written in other languages, and would have tempted programmers into writing too many handlers at the local level.57 Explicit use of empty exception specifications could, however, allow C++ compilers to perform significant code and stack layout optimizations that are precluded when exception handling may take place in a function.35 Some analysts viewed the proper use of exception specifications in C++ as difficult to achieve.58 This use of exception specifications was included in C++98 and C++03, deprecated in the 2012 C++ language standard C++11,59 and was removed from the language in C++17. A function that will not throw any exceptions can now be denoted by the noexcept keyword.","['early', 'version', 'c++', 'programming', 'language', 'include', 'optional', 'mechanism', 'similar', 'check', 'exception', 'call', 'exception', 'specification', 'default', 'function', 'throw', 'exception', 'limit', 'throw', 'clause', 'add', 'function', 'signature', 'specify', 'exception', 'function', 'throw', 'exception', 'specification', 'enforce', 'compile', 'time', 'violation', 'result', 'global', 'function', 'std::unexpecte', 'called', 'exception', 'specification', 'give', 'indicate', 'function', 'throw', 'exception', 'default', 'exception', 'handling', 'add', 'language', 'require', 'modification', 'exist', 'code', 'impede', 'interaction', 'code', 'write', 'language', 'tempt', 'programmer', 'write', 'handler', 'local', 'level', 'explicit', 'use', 'exception', 'specification', 'allow', 'c++', 'compiler', 'perform', 'significant', 'code', 'stack', 'layout', 'optimization', 'preclude', 'exception', 'handling', 'place', 'function', 'analyst', 'view', 'proper', 'use', 'exception', 'specification', 'c++', 'difficult', 'achieve', 'use', 'exception', 'specification', 'include', 'c++98', 'c++03', 'deprecate', '2012', 'c++', 'language', 'standard', 'c++11', 'remove', 'language', 'c++17', 'function', 'throw', 'exception', 'denote', 'noexcept', 'keyword']"
1408,"An uncaught exceptions analyzer exists for the OCaml programming language.60 The tool reports the set of raised exceptions as an extended type signature. But, unlike checked exceptions, the tool does not require any syntactic annotations and is external i.e. it is possible to compile and run a program without having checked the exceptions.","['uncaught', 'exception', 'analyzer', 'exist', 'ocaml', 'programming', 'language', 'tool', 'report', 'set', 'raise', 'exception', 'extended', 'type', 'signature', 'unlike', 'check', 'exception', 'tool', 'require', 'syntactic', 'annotation', 'external', 'i.e.', 'possible', 'compile', 'run', 'program', 'having', 'check', 'exception']"
1409,"The point of exception handling routines is to ensure that the code can handle error conditions. In order to establish that exception handling routines are sufficiently robust, it is necessary to present the code with a wide spectrum of invalid or unexpected inputs, such as can be created via software fault injection and mutation testing that is also sometimes referred to as fuzz testing. One of the most difficult types of software for which to write exception handling routines is protocol software, since a robust protocol implementation must be prepared to receive input that does not comply with the relevant specifications.","['point', 'exception', 'handling', 'routine', 'ensure', 'code', 'handle', 'error', 'condition', 'order', 'establish', 'exception', 'handling', 'routine', 'sufficiently', 'robust', 'necessary', 'present', 'code', 'wide', 'spectrum', 'invalid', 'unexpected', 'input', 'create', 'software', 'fault', 'injection', 'mutation', 'testing', 'refer', 'fuzz', 'testing', 'difficult', 'type', 'software', 'write', 'exception', 'handling', 'routine', 'protocol', 'software', 'robust', 'protocol', 'implementation', 'prepared', 'receive', 'input', 'comply', 'relevant', 'specification']"
1410,"In order to ensure that meaningful regression analysis can be conducted throughout a software development lifecycle process, any exception handling testing should be highly automated, and the test cases must be generated in a scientific, repeatable fashion. Several commercially available systems exist that perform such testing.","['order', 'ensure', 'meaningful', 'regression', 'analysis', 'conduct', 'software', 'development', 'lifecycle', 'process', 'exception', 'handling', 'testing', 'highly', 'automate', 'test', 'case', 'generate', 'scientific', 'repeatable', 'fashion', 'commercially', 'available', 'system', 'exist', 'perform', 'testing']"
1411,"In runtime engine environments such as Java or .NET, there exist tools that attach to the runtime engine and every time that an exception of interest occurs, they record debugging information that existed in memory at the time the exception was thrown call stack and heap values. These tools are called automated exception handling or error interception tools and provide 'root-cause' information for exceptions.","['runtime', 'engine', 'environment', 'java', '.net', 'exist', 'tool', 'attach', 'runtime', 'engine', 'time', 'exception', 'interest', 'occur', 'record', 'debug', 'information', 'exist', 'memory', 'time', 'exception', 'throw', 'stack', 'heap', 'value', 'tool', 'call', 'automated', 'exception', 'handling', 'error', 'interception', 'tool', 'provide', 'root', 'cause', 'information', 'exception']"
1412,"Asynchronous exceptions are events raised by a separate thread or external process, such as pressing Ctrl-C to interrupt a program, receiving a signal, or sending a disruptive message such as ""stop"" or ""suspend"" from another thread of execution.6162 Whereas synchronous exceptions happen at a specific throw statement, asynchronous exceptions can be raised at any time. It follows that asynchronous exception handling can't be optimized out by the compiler, as it cannot prove the absence of asynchronous exceptions. They are also difficult to program with correctly, as asynchronous exceptions must be blocked during cleanup operations to avoid resource leaks.","['asynchronous', 'exception', 'event', 'raise', 'separate', 'thread', 'external', 'process', 'press', 'ctrl', 'interrupt', 'program', 'receive', 'signal', 'send', 'disruptive', 'message', 'stop', 'suspend', 'thread', 'execution', 'synchronous', 'exception', 'happen', 'specific', 'throw', 'statement', 'asynchronous', 'exception', 'raise', 'time', 'follow', 'asynchronous', 'exception', 'handling', 'optimize', 'compiler', 'prove', 'absence', 'asynchronous', 'exception', 'difficult', 'program', 'correctly', 'asynchronous', 'exception', 'block', 'cleanup', 'operation', 'avoid', 'resource', 'leak']"
1413,"Programming languages typically avoid or restrict asynchronous exception handling, for example C++ forbids raising exceptions from signal handlers, and Java has deprecated the use of its ThreadDeath exception that was used to allow one thread to stop another one.63 Another feature is a semi-asynchronous mechanism that raises an asynchronous exception only during certain operations of the program. For example Java's Thread.interrupt only affects the thread when the thread calls an operation that throws InterruptedException.64 The similar POSIX pthread_cancel API has race conditions which make it impossible to use safely.65","['programming', 'language', 'typically', 'avoid', 'restrict', 'asynchronous', 'exception', 'handling', 'example', 'c++', 'forbid', 'raise', 'exception', 'signal', 'handler', 'java', 'deprecate', 'use', 'threaddeath', 'exception', 'allow', 'thread', 'stop', 'one', 'feature', 'semi', 'asynchronous', 'mechanism', 'raise', 'asynchronous', 'exception', 'certain', 'operation', 'program', 'example', 'java', 'thread.interrupt', 'affect', 'thread', 'thread', 'call', 'operation', 'throw', 'interruptedexception', 'similar', 'posix', 'pthread_cancel', 'api', 'race', 'condition', 'impossible', 'use', 'safely']"
1414,"Common Lisp, Dylan and Smalltalk have a condition system66 see Common Lisp Condition System that encompasses the aforementioned exception handling systems. In those languages or environments the advent of a condition a ""generalisation of an error"" according to Kent Pitman implies a function call, and only late in the exception handler the decision to unwind the stack may be taken.","['common', 'lisp', 'dylan', 'smalltalk', 'condition', 'system66', 'common', 'lisp', 'condition', 'system', 'encompass', 'aforementioned', 'exception', 'handling', 'system', 'language', 'environment', 'advent', 'condition', 'generalisation', 'error', 'accord', 'kent', 'pitman', 'imply', 'function', 'late', 'exception', 'handler', 'decision', 'unwind', 'stack', 'take']"
1415,"Conditions are a generalization of exceptions. When a condition arises, an appropriate condition handler is searched for and selected, in stack order, to handle the condition. Conditions that do not represent errors may safely go unhandled entirely; their only purpose may be to propagate hints or warnings toward the user.67","['condition', 'generalization', 'exception', 'condition', 'arise', 'appropriate', 'condition', 'handler', 'search', 'select', 'stack', 'order', 'handle', 'condition', 'condition', 'represent', 'error', 'safely', 'unhandled', 'entirely', 'purpose', 'propagate', 'hint', 'warning', 'user']"
1416,"This is related to the so-called resumption model of exception handling, in which some exceptions are said to be continuable: it is permitted to return to the expression that signaled an exception, after having taken corrective action in the handler. The condition system is generalized thus: within the handler of a non-serious condition a.k.a. continuable exception, it is possible to jump to predefined restart points a.k.a. restarts that lie between the signaling expression and the condition handler. Restarts are functions closed over some lexical environment, allowing the programmer to repair this environment before exiting the condition handler completely or unwinding the stack even partially.","['relate', 'call', 'resumption', 'model', 'exception', 'handling', 'exception', 'say', 'continuable', 'permit', 'return', 'expression', 'signal', 'exception', 'having', 'take', 'corrective', 'action', 'handler', 'condition', 'system', 'generalize', 'handler', 'non', 'condition', 'a.k.a', 'continuable', 'exception', 'possible', 'jump', 'predefine', 'restart', 'point', 'a.k.a', 'restart', 'lie', 'signal', 'expression', 'condition', 'handler', 'restart', 'function', 'close', 'lexical', 'environment', 'allow', 'programmer', 'repair', 'environment', 'exit', 'condition', 'handler', 'completely', 'unwind', 'stack', 'partially']"
1417,"An example is the ENDPAGE condition in PL/I; the ON unit might write page trailer lines and header lines for the next page, then fall through to resume execution of the interrupted code.","['example', 'endpage', 'condition', 'unit', 'write', 'page', 'trailer', 'line', 'header', 'line', 'page', 'fall', 'resume', 'execution', 'interrupted', 'code']"
1418,"Condition handling moreover provides a separation of mechanism from policy. Restarts provide various possible mechanisms for recovering from error, but do not select which mechanism is appropriate in a given situation. That is the province of the condition handler, which since it is located in higher-level code has access to a broader view.","['condition', 'handling', 'provide', 'separation', 'mechanism', 'policy', 'restart', 'provide', 'possible', 'mechanism', 'recover', 'error', 'select', 'mechanism', 'appropriate', 'give', 'situation', 'province', 'condition', 'handler', 'locate', 'high', 'level', 'code', 'access', 'broad', 'view']"
1419,"An example: Suppose there is a library function whose purpose is to parse a single syslog file entry. What should this function do if the entry is malformed? There is no one right answer, because the same library could be deployed in programs for many different purposes. In an interactive log-file browser, the right thing to do might be to return the entry unparsed, so the user can see it—but in an automated log-summarizing program, the right thing to do might be to supply null values for the unreadable fields, but abort with an error, if too many entries have been malformed.","['example', 'suppose', 'library', 'function', 'purpose', 'parse', 'single', 'syslog', 'file', 'entry', 'function', 'entry', 'malforme', 'right', 'answer', 'library', 'deploy', 'program', 'different', 'purpose', 'interactive', 'log', 'file', 'browser', 'right', 'thing', 'return', 'entry', 'unparse', 'user', 'automate', 'log', 'summarize', 'program', 'right', 'thing', 'supply', 'null', 'value', 'unreadable', 'field', 'abort', 'error', 'entry', 'malforme']"
1420,"That is to say, the question can only be answered in terms of the broader goals of the program, which are not known to the general-purpose library function. Nonetheless, exiting with an error message is only rarely the right answer. So instead of simply exiting with an error, the function may establish restarts offering various ways to continue—for instance, to skip the log entry, to supply default or null values for the unreadable fields, to ask the user for the missing values, or to unwind the stack and abort processing with an error message. The restarts offered constitute the mechanisms available for recovering from error; the selection of restart by the condition handler supplies the policy.","['question', 'answer', 'term', 'broad', 'goal', 'program', 'know', 'general', 'purpose', 'library', 'function', 'nonetheless', 'exit', 'error', 'message', 'rarely', 'right', 'answer', 'instead', 'simply', 'exit', 'error', 'function', 'establish', 'restart', 'offer', 'way', 'continue', 'instance', 'skip', 'log', 'entry', 'supply', 'default', 'null', 'value', 'unreadable', 'field', 'ask', 'user', 'miss', 'value', 'unwind', 'stack', 'abort', 'processing', 'error', 'message', 'restart', 'offer', 'constitute', 'mechanism', 'available', 'recover', 'error', 'selection', 'restart', 'condition', 'handler', 'supply', 'policy']"
1421,"Exception handling is often not handled correctly in software, especially when there are multiple sources of exceptions; data flow analysis of 5 million lines of Java code found over 1300 exception handling defects.25 Citing multiple prior studies by others 1999–2004 and their own results, Weimer and Necula wrote that a significant problem with exceptions is that they ""create hidden control-flow paths that are difficult for programmers to reason about"".25: 8:27 ""While try-catch-finally is conceptually simple, it has the most complicated execution description in the language specification Gosling et al. 1996 and requires four levels of nested “if”s in its official English description. In short, it contains a large number of corner cases that programmers often overlook.""25: 8:13–8:14","['exception', 'handling', 'handle', 'correctly', 'software', 'especially', 'multiple', 'source', 'exception', 'datum', 'flow', 'analysis', 'million', 'line', 'java', 'code', 'find', '1300', 'exception', 'handle', 'defects', 'cite', 'multiple', 'prior', 'study', '1999–2004', 'result', 'weimer', 'necula', 'write', 'significant', 'problem', 'exception', 'create', 'hidden', 'control', 'flow', 'path', 'difficult', 'programmer', 'reason', 'about', '8', 'try', 'catch', 'finally', 'conceptually', 'simple', 'complicated', 'execution', 'description', 'language', 'specification', 'gosling', '1996', 'require', 'level', 'nest', 'if”s', 'official', 'english', 'description', 'short', 'contain', 'large', 'number', 'corner', 'case', 'programmer', 'overlook', '25', '8–8']"
1422,"Exceptions, as unstructured flow, increase the risk of resource leaks such as escaping a section locked by a mutex, or one temporarily holding a file open or inconsistent state. There are various techniques for resource management in the presence of exceptions, most commonly combining the dispose pattern with some form of unwind protection like a finally clause, which automatically releases the resource when control exits a section of code.","['exception', 'unstructured', 'flow', 'increase', 'risk', 'resource', 'leak', 'escape', 'section', 'lock', 'mutex', 'temporarily', 'hold', 'file', 'open', 'inconsistent', 'state', 'technique', 'resource', 'management', 'presence', 'exception', 'commonly', 'combine', 'dispose', 'pattern', 'form', 'unwind', 'protection', 'like', 'finally', 'clause', 'automatically', 'release', 'resource', 'control', 'exit', 'section', 'code']"
1423,"Tony Hoare in 1980 described the Ada programming language as having ""...a plethora of features and notational conventions, many of them unnecessary and some of them, like exception handling, even dangerous. ... Do not allow this language in its present state to be used in applications where reliability is critical .... The next rocket to go astray as a result of a programming language error may not be an exploratory space rocket on a harmless trip to Venus: It may be a nuclear warhead exploding over one of our own cities.""68","['tony', 'hoare', '1980', 'describe', 'ada', 'programming', 'language', 'have', 'plethora', 'feature', 'notational', 'convention', 'unnecessary', 'like', 'exception', 'handling', 'dangerous', 'allow', 'language', 'present', 'state', 'application', 'reliability', 'critical', 'rocket', 'astray', 'result', 'programming', 'language', 'error', 'exploratory', 'space', 'rocket', 'harmless', 'trip', 'venus', 'nuclear', 'warhead', 'explode', 'city', '68']"
1424,"The Go developers believe that the try-catch-finally idiom obfuscates control flow,69 and introduced the exception-like panic/recover mechanism.70 recover differs from catch in that it can only be called from within a defer code block in a function, so the handler can only do clean-up and change the function's return values, and cannot return control to an arbitrary point within the function.71 The defer block itself functions similarly to a finally clause.","['developer', 'believe', 'try', 'catch', 'finally', 'idiom', 'obfuscate', 'control', 'flow', 'introduce', 'exception', 'like', 'panic', 'recover', 'mechanism', 'recover', 'differ', 'catch', 'call', 'defer', 'code', 'block', 'function', 'handler', 'clean', 'change', 'function', 'return', 'value', 'return', 'control', 'arbitrary', 'point', 'function', 'defer', 'block', 'function', 'similarly', 'finally', 'clause']"
1425,"Front-end web frameworks, such as React and Vue, have introduced error handling mechanisms where errors propagate up the UI component hierarchy, in a way that is analogous to how errors propagate up the call stack in executing code.7273 Here the error boundary mechanism serves as an analogue to the typical try-catch mechanism. Thus a component can ensure that errors from its child components are caught and handled, and not propagated up to parent components.","['end', 'web', 'framework', 'react', 'vue', 'introduce', 'error', 'handling', 'mechanism', 'error', 'propagate', 'component', 'hierarchy', 'way', 'analogous', 'error', 'propagate', 'stack', 'execute', 'code', 'error', 'boundary', 'mechanism', 'serve', 'analogue', 'typical', 'try', 'catch', 'mechanism', 'component', 'ensure', 'error', 'child', 'component', 'catch', 'handle', 'propagate', 'parent', 'component']"
1426,"For example, in Vue, a component would catch errors by implementing errorCaptured","['example', 'vue', 'component', 'catch', 'error', 'implement', 'errorcapture']"
1427,When used like this in markup:,"['like', 'markup']"
1428,The error produced by the child component is caught and handled by the parent component.74,"['error', 'produce', 'child', 'component', 'catch', 'handle', 'parent', 'component']"
1429,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1430,"In computing, a plug-in or plugin, add-in, addin, add-on, or addon is a software component that adds a specific feature to an existing computer program. When a program supports plug-ins, it enables customization.1","['computing', 'plug', 'plugin', 'add', 'addin', 'add', 'addon', 'software', 'component', 'add', 'specific', 'feature', 'exist', 'computer', 'program', 'program', 'support', 'plug', 'in', 'enable', 'customization']"
1431,"A theme or skin is a preset package containing additional or changed graphical appearance details, achieved by the use of a graphical user interface GUI that can be applied to specific software and websites to suit the purpose, topic, or tastes of different users to customize the look and feel of a piece of computer software or an operating system front-end GUI and window managers.","['theme', 'skin', 'preset', 'package', 'contain', 'additional', 'change', 'graphical', 'appearance', 'detail', 'achieve', 'use', 'graphical', 'user', 'interface', 'gui', 'apply', 'specific', 'software', 'website', 'suit', 'purpose', 'topic', 'taste', 'different', 'user', 'customize', 'look', 'feel', 'piece', 'computer', 'software', 'operate', 'system', 'end', 'gui', 'window', 'manager']"
1432,Types of applications and why they use plug-ins:,"['type', 'application', 'use', 'plug', 'in']"
1433,"The host application provides services which the plug-in can use, including a way for plug-ins to register themselves with the host application and a protocol for the exchange of data with plug-ins. Plug-ins depend on the services provided by the host application and do not usually work by themselves. Conversely, the host application operates independently of the plug-ins, making it possible for end-users to add and update plug-ins dynamically without needing to make changes to the host application.1112","['host', 'application', 'provide', 'service', 'plug', 'use', 'include', 'way', 'plug', 'in', 'register', 'host', 'application', 'protocol', 'exchange', 'datum', 'plug', 'in', 'plug', 'in', 'depend', 'service', 'provide', 'host', 'application', 'usually', 'work', 'conversely', 'host', 'application', 'operate', 'independently', 'plug', 'in', 'make', 'possible', 'end', 'user', 'add', 'update', 'plug', 'in', 'dynamically', 'need', 'change', 'host', 'application']"
1434,"Programmers typically implement plug-ins as shared libraries, which get dynamically loaded at run time. HyperCard supported a similar facility, but more commonly included the plug-in code in the HyperCard documents called stacks themselves. Thus the HyperCard stack became a self-contained application in its own right, distributable as a single entity that end-users could run without the need for additional installation-steps. Programs may also implement plug-ins by loading a directory of simple script files written in a scripting language like Python or Lua.","['programmer', 'typically', 'implement', 'plug', 'in', 'share', 'library', 'dynamically', 'load', 'run', 'time', 'hypercard', 'support', 'similar', 'facility', 'commonly', 'include', 'plug', 'code', 'hypercard', 'document', 'call', 'stack', 'hypercard', 'stack', 'self', 'contain', 'application', 'right', 'distributable', 'single', 'entity', 'end', 'user', 'run', 'need', 'additional', 'installation', 'step', 'program', 'implement', 'plug', 'in', 'load', 'directory', 'simple', 'script', 'file', 'write', 'scripting', 'language', 'like', 'python', 'lua']"
1435,"In Mozilla Foundation definitions, the words ""add-on"", ""extension"" and ""plug-in"" are not synonyms. ""Add-on"" can refer to anything that extends the functions of a Mozilla application. Extensions comprise a subtype, albeit the most common and the most powerful one. Mozilla applications come with integrated add-on managers that, similar to package managers, install, update and manage extensions. The term, ""plug-in"", however, strictly refers to NPAPI-based web content renderers.13 Mozilla deprecated plug-ins for its products.14 But UXP-based applications, like web browsers Pale Moon and Basilisk, keep supporting NPAPI plug-ins.151617","['mozilla', 'foundation', 'definition', 'word', 'add', 'extension', 'plug', 'synonym', 'add', 'refer', 'extend', 'function', 'mozilla', 'application', 'extension', 'comprise', 'subtype', 'albeit', 'common', 'powerful', 'mozilla', 'application', 'come', 'integrate', 'add', 'manager', 'similar', 'package', 'manager', 'install', 'update', 'manage', 'extension', 'term', 'plug', 'strictly', 'refer', 'npapi', 'base', 'web', 'content', 'renderers', 'mozilla', 'deprecate', 'plug', 'in', 'products', 'uxp', 'base', 'application', 'like', 'web', 'browser', 'pale', 'moon', 'basilisk', 'support', 'npapi', 'plug', 'ins']"
1436,"In the mid 1970s, the EDT text editor ran on the Unisys VS/9 operating system using the UNIVAC Series 90 mainframe computer. It allowed a program to be run from the editor which can access the in-memory edit buffer.18 The plug-in executable could call the editor to inspect and change the text. The University of Waterloo Fortran compiler used this to allow interactive compilation of Fortran programs.","['mid', '1970', 'edt', 'text', 'editor', 'run', 'unisys', 'operating', 'system', 'univac', 'series', 'mainframe', 'computer', 'allow', 'program', 'run', 'editor', 'access', 'memory', 'edit', 'buffer', 'plug', 'executable', 'editor', 'inspect', 'change', 'text', 'university', 'waterloo', 'fortran', 'compiler', 'allow', 'interactive', 'compilation', 'fortran', 'program']"
1437,"Early personal computer software with plug-in capability included HyperCard and QuarkXPress on the Apple Macintosh, both released in 1987. In 1988, Silicon Beach Software included plug-in capability in Digital Darkroom and SuperPaint.","['early', 'personal', 'computer', 'software', 'plug', 'capability', 'include', 'hypercard', 'quarkxpress', 'apple', 'macintosh', 'release', '1987', '1988', 'silicon', 'beach', 'software', 'include', 'plug', 'capability', 'digital', 'darkroom', 'superpaint']"
1438,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1439,"The facade pattern also spelled façade is a software-design pattern commonly used in object-oriented programming. Analogous to a facade in architecture, a facade is an object that serves as a front-facing interface masking more complex underlying or structural code. A facade can:","['facade', 'pattern', 'spell', 'façade', 'software', 'design', 'pattern', 'commonly', 'object', 'orient', 'programming', 'analogous', 'facade', 'architecture', 'facade', 'object', 'serve', 'face', 'interface', 'mask', 'complex', 'underlying', 'structural', 'code', 'facade']"
1440,Developers often use the facade design pattern when a system is very complex or difficult to understand because the system has many interdependent classes or because its source code is unavailable. This pattern hides the complexities of the larger system and provides a simpler interface to the client. It typically involves a single wrapper class that contains a set of members required by the client. These members access the system on behalf of the facade client and hide the implementation details.,"['developer', 'use', 'facade', 'design', 'pattern', 'system', 'complex', 'difficult', 'understand', 'system', 'interdependent', 'class', 'source', 'code', 'unavailable', 'pattern', 'hide', 'complexity', 'large', 'system', 'provide', 'simple', 'interface', 'client', 'typically', 'involve', 'single', 'wrapper', 'class', 'contain', 'set', 'member', 'require', 'client', 'member', 'access', 'system', 'behalf', 'facade', 'client', 'hide', 'implementation', 'detail']"
1441,"The Facade 1 design pattern is one of the twenty-three well-known GoF design patterns that describe how to solve recurring design problems to design flexible and reusable object-oriented software, that is, objects that are easier to implement, change, test, and reuse.","['facade', 'design', 'pattern', 'know', 'gof', 'design', 'pattern', 'describe', 'solve', 'recur', 'design', 'problem', 'design', 'flexible', 'reusable', 'object', 'orient', 'software', 'object', 'easy', 'implement', 'change', 'test', 'reuse']"
1442,What problems can the Facade design pattern solve? 2,"['problem', 'facade', 'design', 'pattern', 'solve']"
1443,"Clients that access a complex subsystem directly refer to depend on many different objects having different interfaces tight coupling, which makes the clients hard to implement, change, test, and reuse.","['client', 'access', 'complex', 'subsystem', 'directly', 'refer', 'depend', 'different', 'object', 'have', 'different', 'interface', 'tight', 'coupling', 'make', 'client', 'hard', 'implement', 'change', 'test', 'reuse']"
1444,What solution does the Facade design pattern describe?,"['solution', 'facade', 'design', 'pattern', 'describe']"
1445,This enables to work through a Facade object to minimize the dependencies on a subsystem. See also the UML class and sequence diagram below.,"['enable', 'work', 'facade', 'object', 'minimize', 'dependency', 'subsystem', 'uml', 'class', 'sequence', 'diagram']"
1446,"A Facade is used when an easier or simpler interface to an underlying object is desired.3 Alternatively, an adapter can be used when the wrapper must respect a particular interface and must support polymorphic behavior. A decorator makes it possible to add or alter behavior of an interface at run-time.","['facade', 'easy', 'simple', 'interface', 'underlying', 'object', 'desired', 'alternatively', 'adapter', 'wrapper', 'respect', 'particular', 'interface', 'support', 'polymorphic', 'behavior', 'decorator', 'make', 'possible', 'add', 'alter', 'behavior', 'interface', 'run', 'time']"
1447,The facade pattern is typically used when,"['facade', 'pattern', 'typically']"
1448,"In this UML class diagram, the Client class doesn't access the subsystem classes directly. Instead, the Client works through a Facade class that implements a simple interface in terms of by delegating to the subsystem classes Class1, Class2, and Class3. The Client depends only on the simple Facade interface and is independent of the complex subsystem.4","['uml', 'class', 'diagram', 'client', 'class', 'access', 'subsystem', 'class', 'directly', 'instead', 'client', 'work', 'facade', 'class', 'implement', 'simple', 'interface', 'term', 'delegate', 'subsystem', 'class', 'class1', 'class2', 'class3', 'client', 'depend', 'simple', 'facade', 'interface', 'independent', 'complex', 'subsystem']"
1449,"The sequence diagram shows the run-time interactions: The Client object works through a Facade object that delegates the request to the Class1, Class2, and Class3 instances that perform the request.","['sequence', 'diagram', 'show', 'run', 'time', 'interaction', 'client', 'object', 'work', 'facade', 'object', 'delegate', 'request', 'class1', 'class2', 'class3', 'instance', 'perform', 'request']"
1450,"This is an abstract example of how a client ""you"" interacts with a facade the ""computer"" to a complex system internal computer parts, like CPU and HardDrive.","['abstract', 'example', 'client', 'interact', 'facade', 'computer', 'complex', 'system', 'internal', 'computer', 'part', 'like', 'cpu', 'harddrive']"
1451,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1452,"In class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created. This is done by creating objects by calling a factory method—either specified in an interface and implemented by child classes, or implemented in a base class and optionally overridden by derived classes—rather than by calling a constructor.","['class', 'base', 'programming', 'factory', 'method', 'pattern', 'creational', 'pattern', 'use', 'factory', 'method', 'deal', 'problem', 'create', 'object', 'have', 'specify', 'exact', 'class', 'object', 'create', 'create', 'object', 'call', 'factory', 'method', 'specify', 'interface', 'implement', 'child', 'class', 'implement', 'base', 'class', 'optionally', 'overridden', 'derive', 'class', 'call', 'constructor']"
1453,"The Factory Method 1 design pattern is one of the twenty-three well-known design patterns that describe how to solve recurring design problems to design flexible and reusable object-oriented software, that is, objects that are easier to implement, change, test, and reuse.","['factory', 'method', 'design', 'pattern', 'know', 'design', 'pattern', 'describe', 'solve', 'recur', 'design', 'problem', 'design', 'flexible', 'reusable', 'object', 'orient', 'software', 'object', 'easy', 'implement', 'change', 'test', 'reuse']"
1454,The Factory Method design pattern solves problems like: 2,"['factory', 'method', 'design', 'pattern', 'solve', 'problem', 'like']"
1455,The Factory Method design pattern describes how to solve such problems:,"['factory', 'method', 'design', 'pattern', 'describe', 'solve', 'problem']"
1456,This enables writing of subclasses to change the way an object is created to redefine which class to instantiate. See also the UML class diagram below.,"['enable', 'writing', 'subclass', 'change', 'way', 'object', 'create', 'redefine', 'class', 'instantiate', 'uml', 'class', 'diagram']"
1457,"""Define an interface for creating an object, but let subclasses decide which class to instantiate. The Factory method lets a class defer instantiation it uses to subclasses."" Gang Of Four","['define', 'interface', 'create', 'object', 'let', 'subclass', 'decide', 'class', 'instantiate', 'factory', 'method', 'let', 'class', 'defer', 'instantiation', 'use', 'subclass', 'gang']"
1458,"Creating an object often requires complex processes not appropriate to include within a composing object. The object's creation may lead to a significant duplication of code, may require information not accessible to the composing object, may not provide a sufficient level of abstraction, or may otherwise not be part of the composing object's concerns. The factory method design pattern handles these problems by defining a separate method for creating the objects, which subclasses can then override to specify the derived type of product that will be created.","['create', 'object', 'require', 'complex', 'process', 'appropriate', 'include', 'compose', 'object', 'object', 'creation', 'lead', 'significant', 'duplication', 'code', 'require', 'information', 'accessible', 'compose', 'object', 'provide', 'sufficient', 'level', 'abstraction', 'compose', 'object', 'concern', 'factory', 'method', 'design', 'pattern', 'handle', 'problem', 'define', 'separate', 'method', 'create', 'object', 'subclass', 'override', 'specify', 'derive', 'type', 'product', 'create']"
1459,"The factory method pattern relies on inheritance, as object creation is delegated to subclasses that implement the factory method to create objects.3 As shown in the C# example below, the factory method pattern can also rely on an Interface - in this case IPerson - to be implemented.","['factory', 'method', 'pattern', 'rely', 'inheritance', 'object', 'creation', 'delegate', 'subclass', 'implement', 'factory', 'method', 'create', 'objects', 'show', 'example', 'factory', 'method', 'pattern', 'rely', 'interface', 'case', 'iperson', 'implement']"
1460,"In the above UML class diagram, the Creator class that requires a Product object does not instantiate the Product1 class directly. Instead, the Creator refers to a separate factoryMethod to create a product object, which makes the Creator independent of which concrete class is instantiated. Subclasses of Creator can redefine which class to instantiate. In this example, the Creator1 subclass implements the abstract factoryMethod by instantiating the Product1 class.","['uml', 'class', 'diagram', 'creator', 'class', 'require', 'product', 'object', 'instantiate', 'product1', 'class', 'directly', 'instead', 'creator', 'refer', 'separate', 'factorymethod', 'create', 'product', 'object', 'make', 'creator', 'independent', 'concrete', 'class', 'instantiate', 'subclass', 'creator', 'redefine', 'class', 'instantiate', 'example', 'creator1', 'subclass', 'implement', 'abstract', 'factorymethod', 'instantiate', 'product1', 'class']"
1461,"A maze game may be played in two modes, one with regular rooms that are only connected with adjacent rooms, and one with magic rooms that allow players to be transported at random.","['maze', 'game', 'play', 'mode', 'regular', 'room', 'connect', 'adjacent', 'room', 'magic', 'room', 'allow', 'player', 'transport', 'random']"
1462,"Room is the base class for a final product MagicRoom or OrdinaryRoom. MazeGame declares the abstract factory method to produce such a base product. MagicRoom and OrdinaryRoom are subclasses of the base product implementing the final product. MagicMazeGame and OrdinaryMazeGame are subclasses of MazeGame implementing the factory method producing the final products. Thus factory methods decouple callers MazeGame from the implementation of the concrete classes. This makes the ""new"" Operator redundant, allows adherence to the Open/closed principle and makes the final product more flexible in the event of change.","['room', 'base', 'class', 'final', 'product', 'magicroom', 'ordinaryroom', 'mazegame', 'declare', 'abstract', 'factory', 'method', 'produce', 'base', 'product', 'magicroom', 'ordinaryroom', 'subclass', 'base', 'product', 'implement', 'final', 'product', 'magicmazegame', 'ordinarymazegame', 'subclass', 'mazegame', 'implement', 'factory', 'method', 'produce', 'final', 'product', 'factory', 'method', 'decouple', 'caller', 'mazegame', 'implementation', 'concrete', 'class', 'make', 'new', 'operator', 'redundant', 'allow', 'adherence', 'open', 'close', 'principle', 'make', 'final', 'product', 'flexible', 'event', 'change']"
1463,"In the above code you can see the creation of one interface called IPerson and two implementations called Villager and CityPerson. Based on the type passed into the Factory object, we are returning the original concrete object as the interface IPerson.","['code', 'creation', 'interface', 'call', 'iperson', 'implementation', 'call', 'villager', 'cityperson', 'base', 'type', 'pass', 'factory', 'object', 'return', 'original', 'concrete', 'object', 'interface', 'iperson']"
1464,"A factory method is just an addition to Factory class. It creates the object of the class through interfaces but on the other hand, it also lets the subclass decide which class is instantiated.","['factory', 'method', 'addition', 'factory', 'class', 'create', 'object', 'class', 'interface', 'hand', 'let', 'subclass', 'decide', 'class', 'instantiate']"
1465,"You can see we have used MakeProduct in concreteFactory. As a result, you can easily call MakeProduct from it to get the IProduct. You might also write your custom logic after getting the object in the concrete Factory Method. The GetObject is made abstract in the Factory interface.","['makeproduct', 'concretefactory', 'result', 'easily', 'makeproduct', 'iproduct', 'write', 'custom', 'logic', 'get', 'object', 'concrete', 'factory', 'method', 'getobject', 'abstract', 'factory', 'interface']"
1466,This Java example is similar to one in the book Design Patterns.,"['java', 'example', 'similar', 'book', 'design', 'patterns']"
1467,The MazeGame uses Rooms but it puts the responsibility of creating Rooms to its subclasses which create the concrete classes. The regular game mode could use this template method:,"['mazegame', 'use', 'rooms', 'put', 'responsibility', 'create', 'room', 'subclass', 'create', 'concrete', 'class', 'regular', 'game', 'mode', 'use', 'template', 'method']"
1468,"In the above snippet, the MazeGame constructor is a template method that makes some common logic. It refers to the makeRoom factory method that encapsulates the creation of rooms such that other rooms can be used in a subclass. To implement the other game mode that has magic rooms, it suffices to override the makeRoom method:","['snippet', 'mazegame', 'constructor', 'template', 'method', 'make', 'common', 'logic', 'refer', 'makeroom', 'factory', 'method', 'encapsulate', 'creation', 'room', 'room', 'subclass', 'implement', 'game', 'mode', 'magic', 'room', 'suffice', 'override', 'makeroom', 'method']"
1469,"Another example in PHP follows, this time using interface implementations as opposed to subclassing however, the same can be achieved through subclassing. It is important to note that the factory method can also be defined as public and called directly by the client code in contrast with the Java example above.","['example', 'php', 'follow', 'time', 'interface', 'implementation', 'oppose', 'subclasse', 'achieve', 'subclasse', 'important', 'note', 'factory', 'method', 'define', 'public', 'call', 'directly', 'client', 'code', 'contrast', 'java', 'example']"
1470,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1471,"In object-oriented programming, a factory is an object for creating other objects; formally, it is a function or method that returns objects of a varying prototype or class1 from some method call, which is assumed to be ""new"".a More broadly, a subroutine that returns a ""new"" object may be referred to as a ""factory"", as in factory method or factory function. The factory pattern is the basis for a number of related software design patterns.","['object', 'orient', 'programming', 'factory', 'object', 'create', 'object', 'formally', 'function', 'method', 'return', 'object', 'vary', 'prototype', 'class1', 'method', 'assume', 'new', 'broadly', 'subroutine', 'return', 'new', 'object', 'refer', 'factory', 'factory', 'method', 'factory', 'function', 'factory', 'pattern', 'basis', 'number', 'relate', 'software', 'design', 'pattern']"
1472,"In class-based programming, a factory is an abstraction of a constructor of a class, while in prototype-based programming a factory is an abstraction of a prototype object. A constructor is concrete in that it creates objects as instances of a single class, and by a specified process class instantiation, while a factory can create objects by instantiating various classes, or by using other allocation schemes such as an object pool. A prototype object is concrete in that it is used to create objects by being cloned, while a factory can create objects by cloning various prototypes, or by other allocation schemes.","['class', 'base', 'programming', 'factory', 'abstraction', 'constructor', 'class', 'prototype', 'base', 'programming', 'factory', 'abstraction', 'prototype', 'object', 'constructor', 'concrete', 'create', 'object', 'instance', 'single', 'class', 'specify', 'process', 'class', 'instantiation', 'factory', 'create', 'object', 'instantiate', 'class', 'allocation', 'scheme', 'object', 'pool', 'prototype', 'object', 'concrete', 'create', 'object', 'clone', 'factory', 'create', 'object', 'clone', 'prototype', 'allocation', 'scheme']"
1473,"A factory may be implemented in various ways. Most often it is implemented as a method, in which case it is called a factory method. Sometimes it is implemented as a function, in which case it is called a factory function. In some languages, constructors are themselves factories. However, in most languages they are not, and constructors are invoked in a way that is idiomatic to the language, such as by using the keyword new, while a factory has no special status and is invoked via an ordinary method call or function call. In these languages, a factory is an abstraction of a constructor, but not strictly a generalization, as constructors are not themselves factories.","['factory', 'implement', 'way', 'implement', 'method', 'case', 'call', 'factory', 'method', 'implement', 'function', 'case', 'call', 'factory', 'function', 'language', 'constructor', 'factory', 'language', 'constructor', 'invoke', 'way', 'idiomatic', 'language', 'keyword', 'new', 'factory', 'special', 'status', 'invoke', 'ordinary', 'method', 'function', 'language', 'factory', 'abstraction', 'constructor', 'strictly', 'generalization', 'constructor', 'factory']"
1474,"Terminology differs as to whether the concept of a factory is itself a design pattern – in Design Patterns there is no ""factory pattern"", but instead two patterns factory method pattern and abstract factory pattern that use factories. Some sources refer to the concept as the factory pattern,23 while others consider the concept itself a programming idiom,4 reserving the term ""factory pattern"" or ""factory patterns"" to more complicated patterns that use factories, most often the factory method pattern; in this context, the concept of a factory itself may be referred to as a simple factory.4 In other contexts, particularly the Python language, ""factory"" itself is used, as in this article.5 More broadly, ""factory"" may be applied not just to an object that returns objects from some method call, but to a subroutine that returns objects, as in a factory function even if functions are not objects or factory method.6 Because in many languages factories are invoked by calling a method, the general concept of a factory is often confused with the specific factory method pattern design pattern.","['terminology', 'differ', 'concept', 'factory', 'design', 'pattern', 'design', 'patterns', 'factory', 'pattern', 'instead', 'pattern', 'factory', 'method', 'pattern', 'abstract', 'factory', 'pattern', 'use', 'factory', 'source', 'refer', 'concept', 'factory', 'pattern', 'consider', 'concept', 'programming', 'idiom', 'reserve', 'term', 'factory', 'pattern', 'factory', 'pattern', 'complicated', 'pattern', 'use', 'factory', 'factory', 'method', 'pattern', 'context', 'concept', 'factory', 'refer', 'simple', 'factory', 'context', 'particularly', 'python', 'language', 'factory', 'article', 'broadly', 'factory', 'apply', 'object', 'return', 'object', 'method', 'subroutine', 'return', 'object', 'factory', 'function', 'function', 'object', 'factory', 'method', 'language', 'factory', 'invoke', 'call', 'method', 'general', 'concept', 'factory', 'confuse', 'specific', 'factory', 'method', 'pattern', 'design', 'pattern']"
1475,"OOP provides polymorphism on object use by method dispatch, formally subtype polymorphism via single dispatch determined by the type of the object on which the method is called. However, this does not work for constructors, as constructors create an object of some type, rather than use an existing object. More concretely, when a constructor is called, there is no object yet on which to dispatch.b","['oop', 'provide', 'polymorphism', 'object', 'use', 'method', 'dispatch', 'formally', 'subtype', 'polymorphism', 'single', 'dispatch', 'determine', 'type', 'object', 'method', 'call', 'work', 'constructor', 'constructor', 'create', 'object', 'type', 'use', 'exist', 'object', 'concretely', 'constructor', 'call', 'object', 'dispatch.b']"
1476,"Using factories instead of constructors or prototypes allows one to use polymorphism for object creation, not only object use. Specifically, using factories provides encapsulation, and means the code is not tied to specific classes or objects, and thus the class hierarchy or prototypes can be changed or refactored without needing to change code that uses them – they abstract from the class hierarchy or prototypes.","['factory', 'instead', 'constructor', 'prototype', 'allow', 'use', 'polymorphism', 'object', 'creation', 'object', 'use', 'specifically', 'factory', 'provide', 'encapsulation', 'mean', 'code', 'tie', 'specific', 'class', 'object', 'class', 'hierarchy', 'prototype', 'change', 'refactore', 'need', 'change', 'code', 'use', 'abstract', 'class', 'hierarchy', 'prototype']"
1477,"More technically, in languages where factories generalize constructors, factories can usually be used anywhere constructors can be,c meaning that interfaces that accept a constructor can also in general accept a factory – usually one only need something that creates an object, rather than needing to specify a class and instantiation.","['technically', 'language', 'factory', 'generalize', 'constructor', 'factory', 'usually', 'constructor', 'mean', 'interface', 'accept', 'constructor', 'general', 'accept', 'factory', 'usually', 'need', 'create', 'object', 'need', 'specify', 'class', 'instantiation']"
1478,"For example, in Python, the collections.defaultdict class7 has a constructor which creates an object of type defaultdictd whose default values are produced by invoking a factory. The factory is passed as an argument to the constructor, and can itself be a constructor, or any thing that behaves like a constructor – a callable object that returns an object, i.e., a factory. For example, using the list constructor for lists:","['example', 'python', 'collections.defaultdict', 'class7', 'constructor', 'create', 'object', 'type', 'defaultdictd', 'default', 'value', 'produce', 'invoke', 'factory', 'factory', 'pass', 'argument', 'constructor', 'constructor', 'thing', 'behave', 'like', 'constructor', 'callable', 'object', 'return', 'object', 'i.e.', 'factory', 'example', 'list', 'constructor', 'list']"
1479,"Factory objects are used in situations where getting hold of an object of a particular kind is a more complex process than simply creating a new object, notably if complex allocation or initialization is desired. Some of the processes required in the creation of an object include determining which object to create, managing the lifetime of the object, and managing specialized build-up and tear-down concerns of the object. The factory object might decide to create the object's class if applicable dynamically, return it from an object pool, do complex configuration on the object, or other things. Similarly, using this definition, a singleton implemented by the singleton pattern is a formal factory – it returns an object, but does not create new objects beyond the single instance.","['factory', 'object', 'situation', 'get', 'hold', 'object', 'particular', 'kind', 'complex', 'process', 'simply', 'create', 'new', 'object', 'notably', 'complex', 'allocation', 'initialization', 'desire', 'process', 'require', 'creation', 'object', 'include', 'determine', 'object', 'create', 'manage', 'lifetime', 'object', 'manage', 'specialized', 'build', 'tear', 'concern', 'object', 'factory', 'object', 'decide', 'create', 'object', 'class', 'applicable', 'dynamically', 'return', 'object', 'pool', 'complex', 'configuration', 'object', 'thing', 'similarly', 'definition', 'singleton', 'implement', 'singleton', 'pattern', 'formal', 'factory', 'return', 'object', 'create', 'new', 'object', 'single', 'instance']"
1480,"The simplest example of a factory is a simple factory function, which just invokes a constructor and returns the result. In Python, a factory function f that instantiates a class A can be implemented as:","['simple', 'example', 'factory', 'simple', 'factory', 'function', 'invoke', 'constructor', 'return', 'result', 'python', 'factory', 'function', 'instantiate', 'class', 'implement']"
1481,A simple factory function implementing the singleton pattern is:,"['simple', 'factory', 'function', 'implement', 'singleton', 'pattern']"
1482,"This will create an object when first called, and always return the same object thereafter.","['create', 'object', 'call', 'return', 'object']"
1483,"Factories may be invoked in various ways, most often a method call a factory method, sometimes by being called as a function if the factory is a callable object a factory function. In some languages constructors and factories have identical syntax, while in others constructors have special syntax. In languages where constructors and factories have identical syntax, like Python, Perl, Ruby, Object Pascal, and F#,e constructors can be transparently replaced by factories. In languages where they differ, one must distinguish them in interfaces, and switching between constructors and factories requires changing the calls.","['factory', 'invoke', 'way', 'method', 'factory', 'method', 'call', 'function', 'factory', 'callable', 'object', 'factory', 'function', 'language', 'constructor', 'factory', 'identical', 'syntax', 'constructor', 'special', 'syntax', 'language', 'constructor', 'factory', 'identical', 'syntax', 'like', 'python', 'perl', 'ruby', 'object', 'pascal', 'f#,e', 'constructor', 'transparently', 'replace', 'factory', 'language', 'differ', 'distinguish', 'interface', 'switch', 'constructor', 'factory', 'require', 'change', 'call']"
1484,"In languages where objects are dynamically allocated, as in Java or Python, factories are semantically equivalent to constructors. However, in languages such as C++ that allow some objects to be statically allocated, factories are different from constructors for statically allocated classes, as the latter can have memory allocation determined at compile time, while allocation of the return values of factories must be determined at run time. If a constructor can be passed as an argument to a function, then invocation of the constructor and allocation of the return value must be done dynamically at run time, and thus have similar or identical semantics to invoking a factory.","['language', 'object', 'dynamically', 'allocate', 'java', 'python', 'factory', 'semantically', 'equivalent', 'constructor', 'language', 'c++', 'allow', 'object', 'statically', 'allocate', 'factory', 'different', 'constructor', 'statically', 'allocate', 'class', 'memory', 'allocation', 'determine', 'compile', 'time', 'allocation', 'return', 'value', 'factory', 'determine', 'run', 'time', 'constructor', 'pass', 'argument', 'function', 'invocation', 'constructor', 'allocation', 'return', 'value', 'dynamically', 'run', 'time', 'similar', 'identical', 'semantic', 'invoke', 'factory']"
1485,"Factories are used in various design patterns, specifically in creational patterns such as the Design pattern object library. Specific recipes have been developed to implement them in many languages. For example, several ""GoF patterns"", like the ""Factory method pattern"", the ""Builder"" or even the ""Singleton"" are implementations of this concept. The ""Abstract factory pattern"" instead is a method to build collections of factories.","['factory', 'design', 'pattern', 'specifically', 'creational', 'pattern', 'design', 'pattern', 'object', 'library', 'specific', 'recipe', 'develop', 'implement', 'language', 'example', 'gof', 'pattern', 'like', 'factory', 'method', 'pattern', 'builder', 'singleton', 'implementation', 'concept', 'abstract', 'factory', 'pattern', 'instead', 'method', 'build', 'collection', 'factory']"
1486,"In some design patterns, a factory object has a method for every kind of object it is capable of creating. These methods optionally accept parameters defining how the object is created, and then return the created object.","['design', 'pattern', 'factory', 'object', 'method', 'kind', 'object', 'capable', 'create', 'method', 'optionally', 'accept', 'parameter', 'define', 'object', 'create', 'return', 'create', 'object']"
1487,Factory objects are common in toolkits and frameworks where library code needs to create objects of types which may be subclassed by applications using the framework. They are also used in test-driven development to allow classes to be put under test.8,"['factory', 'object', 'common', 'toolkit', 'framework', 'library', 'code', 'need', 'create', 'object', 'type', 'subclasse', 'application', 'framework', 'test', 'drive', 'development', 'allow', 'class', 'test']"
1488,"Factories determine the actual concrete type of object to be created, and it is here that the object is actually created. As the factory only returns an abstract interface to the object, the client code does not know – and is not burdened by – the actual concrete type of the object which was just created. However, the type of a concrete object is known by the abstract factory. In particular, this means:","['factory', 'determine', 'actual', 'concrete', 'type', 'object', 'create', 'object', 'actually', 'create', 'factory', 'return', 'abstract', 'interface', 'object', 'client', 'code', 'know', 'burden', 'actual', 'concrete', 'type', 'object', 'create', 'type', 'concrete', 'object', 'know', 'abstract', 'factory', 'particular', 'mean']"
1489,"Factories, specifically factory methods, are common in toolkits and frameworks, where library code needs to create objects of types that may be subclassed by applications using the framework.","['factory', 'specifically', 'factory', 'method', 'common', 'toolkit', 'framework', 'library', 'code', 'need', 'create', 'object', 'type', 'subclasse', 'application', 'framework']"
1490,Parallel class hierarchies often require objects from one hierarchy to be able to create appropriate objects from another.,"['parallel', 'class', 'hierarchy', 'require', 'object', 'hierarchy', 'able', 'create', 'appropriate', 'object']"
1491,"Factory methods are used in test-driven development to allow classes to be put under test.9 If such a class Foo creates another object Dangerous that can't be put under automated unit tests perhaps it communicates with a production database that isn't always available, then the creation of Dangerous objects is placed in the virtual factory method createDangerous in class Foo. For testing, TestFoo a subclass of Foo is then created, with the virtual factory method createDangerous overridden to create and return FakeDangerous, a fake object. Unit tests then use TestFoo to test the functionality of Foo without incurring the side effect of using a real Dangerous object.","['factory', 'method', 'test', 'drive', 'development', 'allow', 'class', 'test', 'class', 'foo', 'create', 'object', 'dangerous', 'automate', 'unit', 'test', 'communicate', 'production', 'database', 'available', 'creation', 'dangerous', 'object', 'place', 'virtual', 'factory', 'method', 'createdangerous', 'class', 'foo', 'testing', 'testfoo', 'subclass', 'foo', 'create', 'virtual', 'factory', 'method', 'createdangerous', 'overridden', 'create', 'return', 'fakedangerous', 'fake', 'object', 'unit', 'test', 'use', 'testfoo', 'test', 'functionality', 'foo', 'incur', 'effect', 'real', 'dangerous', 'object']"
1492,"Besides use in design patterns, factories, especially factory methods, have various benefits and variations.","['use', 'design', 'pattern', 'factory', 'especially', 'factory', 'method', 'benefit', 'variation']"
1493,"A factory method has a distinct name. In many object-oriented languages, constructors must have the same name as the class they are in, which can lead to ambiguity if there is more than one way to create an object see overloading. Factory methods have no such constraint and can have descriptive names; these are sometimes known as alternative constructors. As an example, when complex numbers are created from two real numbers the real numbers can be interpreted as Cartesian or polar coordinates, but using factory methods, the meaning is clear, as illustrated by the following example in C#.","['factory', 'method', 'distinct', 'object', 'orient', 'language', 'constructor', 'class', 'lead', 'ambiguity', 'way', 'create', 'object', 'overload', 'factory', 'method', 'constraint', 'descriptive', 'name', 'know', 'alternative', 'constructor', 'example', 'complex', 'number', 'create', 'real', 'number', 'real', 'number', 'interpret', 'cartesian', 'polar', 'coordinate', 'factory', 'method', 'meaning', 'clear', 'illustrate', 'follow', 'example']"
1494,"When factory methods are used for disambiguation like this, the raw constructors are often made private to force clients to use the factory methods.","['factory', 'method', 'disambiguation', 'like', 'raw', 'constructor', 'private', 'force', 'client', 'use', 'factory', 'method']"
1495,"Factory methods encapsulate the creation of objects. This can be useful if the creation process is very complex; for example, if it depends on settings in configuration files or on user input.","['factory', 'method', 'encapsulate', 'creation', 'object', 'useful', 'creation', 'process', 'complex', 'example', 'depend', 'setting', 'configuration', 'file', 'user', 'input']"
1496,"Consider as an example a program that reads image files. The program supports different image formats, represented by a reader class for each format.","['consider', 'example', 'program', 'read', 'image', 'file', 'program', 'support', 'different', 'image', 'format', 'represent', 'reader', 'class', 'format']"
1497,"Each time the program reads an image, it needs to create a reader of the appropriate type based on some information in the file. This logic can be encapsulated in a factory method. This approach has also been referred to as the Simple Factory.","['time', 'program', 'read', 'image', 'need', 'create', 'reader', 'appropriate', 'type', 'base', 'information', 'file', 'logic', 'encapsulate', 'factory', 'method', 'approach', 'refer', 'simple', 'factory']"
1498,There are three limitations associated with the use of the factory method. The first relates to refactoring existing code; the other two relate to extending a class.,"['limitation', 'associate', 'use', 'factory', 'method', 'relate', 'refactore', 'exist', 'code', 'relate', 'extend', 'class']"
1499,All three problems could be alleviated by altering the underlying programming language to make factories first-class class members see also Virtual class.10,"['problem', 'alleviate', 'alter', 'underlying', 'programming', 'language', 'factory', 'class', 'class', 'member', 'virtual', 'class']"
1500,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1501,"In object-oriented programming, a factory is an object for creating other objects; formally, it is a function or method that returns objects of a varying prototype or class1 from some method call, which is assumed to be ""new"".a More broadly, a subroutine that returns a ""new"" object may be referred to as a ""factory"", as in factory method or factory function. The factory pattern is the basis for a number of related software design patterns.","['object', 'orient', 'programming', 'factory', 'object', 'create', 'object', 'formally', 'function', 'method', 'return', 'object', 'vary', 'prototype', 'class1', 'method', 'assume', 'new', 'broadly', 'subroutine', 'return', 'new', 'object', 'refer', 'factory', 'factory', 'method', 'factory', 'function', 'factory', 'pattern', 'basis', 'number', 'relate', 'software', 'design', 'pattern']"
1502,"In class-based programming, a factory is an abstraction of a constructor of a class, while in prototype-based programming a factory is an abstraction of a prototype object. A constructor is concrete in that it creates objects as instances of a single class, and by a specified process class instantiation, while a factory can create objects by instantiating various classes, or by using other allocation schemes such as an object pool. A prototype object is concrete in that it is used to create objects by being cloned, while a factory can create objects by cloning various prototypes, or by other allocation schemes.","['class', 'base', 'programming', 'factory', 'abstraction', 'constructor', 'class', 'prototype', 'base', 'programming', 'factory', 'abstraction', 'prototype', 'object', 'constructor', 'concrete', 'create', 'object', 'instance', 'single', 'class', 'specify', 'process', 'class', 'instantiation', 'factory', 'create', 'object', 'instantiate', 'class', 'allocation', 'scheme', 'object', 'pool', 'prototype', 'object', 'concrete', 'create', 'object', 'clone', 'factory', 'create', 'object', 'clone', 'prototype', 'allocation', 'scheme']"
1503,"A factory may be implemented in various ways. Most often it is implemented as a method, in which case it is called a factory method. Sometimes it is implemented as a function, in which case it is called a factory function. In some languages, constructors are themselves factories. However, in most languages they are not, and constructors are invoked in a way that is idiomatic to the language, such as by using the keyword new, while a factory has no special status and is invoked via an ordinary method call or function call. In these languages, a factory is an abstraction of a constructor, but not strictly a generalization, as constructors are not themselves factories.","['factory', 'implement', 'way', 'implement', 'method', 'case', 'call', 'factory', 'method', 'implement', 'function', 'case', 'call', 'factory', 'function', 'language', 'constructor', 'factory', 'language', 'constructor', 'invoke', 'way', 'idiomatic', 'language', 'keyword', 'new', 'factory', 'special', 'status', 'invoke', 'ordinary', 'method', 'function', 'language', 'factory', 'abstraction', 'constructor', 'strictly', 'generalization', 'constructor', 'factory']"
1504,"Terminology differs as to whether the concept of a factory is itself a design pattern – in Design Patterns there is no ""factory pattern"", but instead two patterns factory method pattern and abstract factory pattern that use factories. Some sources refer to the concept as the factory pattern,23 while others consider the concept itself a programming idiom,4 reserving the term ""factory pattern"" or ""factory patterns"" to more complicated patterns that use factories, most often the factory method pattern; in this context, the concept of a factory itself may be referred to as a simple factory.4 In other contexts, particularly the Python language, ""factory"" itself is used, as in this article.5 More broadly, ""factory"" may be applied not just to an object that returns objects from some method call, but to a subroutine that returns objects, as in a factory function even if functions are not objects or factory method.6 Because in many languages factories are invoked by calling a method, the general concept of a factory is often confused with the specific factory method pattern design pattern.","['terminology', 'differ', 'concept', 'factory', 'design', 'pattern', 'design', 'patterns', 'factory', 'pattern', 'instead', 'pattern', 'factory', 'method', 'pattern', 'abstract', 'factory', 'pattern', 'use', 'factory', 'source', 'refer', 'concept', 'factory', 'pattern', 'consider', 'concept', 'programming', 'idiom', 'reserve', 'term', 'factory', 'pattern', 'factory', 'pattern', 'complicated', 'pattern', 'use', 'factory', 'factory', 'method', 'pattern', 'context', 'concept', 'factory', 'refer', 'simple', 'factory', 'context', 'particularly', 'python', 'language', 'factory', 'article', 'broadly', 'factory', 'apply', 'object', 'return', 'object', 'method', 'subroutine', 'return', 'object', 'factory', 'function', 'function', 'object', 'factory', 'method', 'language', 'factory', 'invoke', 'call', 'method', 'general', 'concept', 'factory', 'confuse', 'specific', 'factory', 'method', 'pattern', 'design', 'pattern']"
1505,"OOP provides polymorphism on object use by method dispatch, formally subtype polymorphism via single dispatch determined by the type of the object on which the method is called. However, this does not work for constructors, as constructors create an object of some type, rather than use an existing object. More concretely, when a constructor is called, there is no object yet on which to dispatch.b","['oop', 'provide', 'polymorphism', 'object', 'use', 'method', 'dispatch', 'formally', 'subtype', 'polymorphism', 'single', 'dispatch', 'determine', 'type', 'object', 'method', 'call', 'work', 'constructor', 'constructor', 'create', 'object', 'type', 'use', 'exist', 'object', 'concretely', 'constructor', 'call', 'object', 'dispatch.b']"
1506,"Using factories instead of constructors or prototypes allows one to use polymorphism for object creation, not only object use. Specifically, using factories provides encapsulation, and means the code is not tied to specific classes or objects, and thus the class hierarchy or prototypes can be changed or refactored without needing to change code that uses them – they abstract from the class hierarchy or prototypes.","['factory', 'instead', 'constructor', 'prototype', 'allow', 'use', 'polymorphism', 'object', 'creation', 'object', 'use', 'specifically', 'factory', 'provide', 'encapsulation', 'mean', 'code', 'tie', 'specific', 'class', 'object', 'class', 'hierarchy', 'prototype', 'change', 'refactore', 'need', 'change', 'code', 'use', 'abstract', 'class', 'hierarchy', 'prototype']"
1507,"More technically, in languages where factories generalize constructors, factories can usually be used anywhere constructors can be,c meaning that interfaces that accept a constructor can also in general accept a factory – usually one only need something that creates an object, rather than needing to specify a class and instantiation.","['technically', 'language', 'factory', 'generalize', 'constructor', 'factory', 'usually', 'constructor', 'mean', 'interface', 'accept', 'constructor', 'general', 'accept', 'factory', 'usually', 'need', 'create', 'object', 'need', 'specify', 'class', 'instantiation']"
1508,"For example, in Python, the collections.defaultdict class7 has a constructor which creates an object of type defaultdictd whose default values are produced by invoking a factory. The factory is passed as an argument to the constructor, and can itself be a constructor, or any thing that behaves like a constructor – a callable object that returns an object, i.e., a factory. For example, using the list constructor for lists:","['example', 'python', 'collections.defaultdict', 'class7', 'constructor', 'create', 'object', 'type', 'defaultdictd', 'default', 'value', 'produce', 'invoke', 'factory', 'factory', 'pass', 'argument', 'constructor', 'constructor', 'thing', 'behave', 'like', 'constructor', 'callable', 'object', 'return', 'object', 'i.e.', 'factory', 'example', 'list', 'constructor', 'list']"
1509,"Factory objects are used in situations where getting hold of an object of a particular kind is a more complex process than simply creating a new object, notably if complex allocation or initialization is desired. Some of the processes required in the creation of an object include determining which object to create, managing the lifetime of the object, and managing specialized build-up and tear-down concerns of the object. The factory object might decide to create the object's class if applicable dynamically, return it from an object pool, do complex configuration on the object, or other things. Similarly, using this definition, a singleton implemented by the singleton pattern is a formal factory – it returns an object, but does not create new objects beyond the single instance.","['factory', 'object', 'situation', 'get', 'hold', 'object', 'particular', 'kind', 'complex', 'process', 'simply', 'create', 'new', 'object', 'notably', 'complex', 'allocation', 'initialization', 'desire', 'process', 'require', 'creation', 'object', 'include', 'determine', 'object', 'create', 'manage', 'lifetime', 'object', 'manage', 'specialized', 'build', 'tear', 'concern', 'object', 'factory', 'object', 'decide', 'create', 'object', 'class', 'applicable', 'dynamically', 'return', 'object', 'pool', 'complex', 'configuration', 'object', 'thing', 'similarly', 'definition', 'singleton', 'implement', 'singleton', 'pattern', 'formal', 'factory', 'return', 'object', 'create', 'new', 'object', 'single', 'instance']"
1510,"The simplest example of a factory is a simple factory function, which just invokes a constructor and returns the result. In Python, a factory function f that instantiates a class A can be implemented as:","['simple', 'example', 'factory', 'simple', 'factory', 'function', 'invoke', 'constructor', 'return', 'result', 'python', 'factory', 'function', 'instantiate', 'class', 'implement']"
1511,A simple factory function implementing the singleton pattern is:,"['simple', 'factory', 'function', 'implement', 'singleton', 'pattern']"
1512,"This will create an object when first called, and always return the same object thereafter.","['create', 'object', 'call', 'return', 'object']"
1513,"Factories may be invoked in various ways, most often a method call a factory method, sometimes by being called as a function if the factory is a callable object a factory function. In some languages constructors and factories have identical syntax, while in others constructors have special syntax. In languages where constructors and factories have identical syntax, like Python, Perl, Ruby, Object Pascal, and F#,e constructors can be transparently replaced by factories. In languages where they differ, one must distinguish them in interfaces, and switching between constructors and factories requires changing the calls.","['factory', 'invoke', 'way', 'method', 'factory', 'method', 'call', 'function', 'factory', 'callable', 'object', 'factory', 'function', 'language', 'constructor', 'factory', 'identical', 'syntax', 'constructor', 'special', 'syntax', 'language', 'constructor', 'factory', 'identical', 'syntax', 'like', 'python', 'perl', 'ruby', 'object', 'pascal', 'f#,e', 'constructor', 'transparently', 'replace', 'factory', 'language', 'differ', 'distinguish', 'interface', 'switch', 'constructor', 'factory', 'require', 'change', 'call']"
1514,"In languages where objects are dynamically allocated, as in Java or Python, factories are semantically equivalent to constructors. However, in languages such as C++ that allow some objects to be statically allocated, factories are different from constructors for statically allocated classes, as the latter can have memory allocation determined at compile time, while allocation of the return values of factories must be determined at run time. If a constructor can be passed as an argument to a function, then invocation of the constructor and allocation of the return value must be done dynamically at run time, and thus have similar or identical semantics to invoking a factory.","['language', 'object', 'dynamically', 'allocate', 'java', 'python', 'factory', 'semantically', 'equivalent', 'constructor', 'language', 'c++', 'allow', 'object', 'statically', 'allocate', 'factory', 'different', 'constructor', 'statically', 'allocate', 'class', 'memory', 'allocation', 'determine', 'compile', 'time', 'allocation', 'return', 'value', 'factory', 'determine', 'run', 'time', 'constructor', 'pass', 'argument', 'function', 'invocation', 'constructor', 'allocation', 'return', 'value', 'dynamically', 'run', 'time', 'similar', 'identical', 'semantic', 'invoke', 'factory']"
1515,"Factories are used in various design patterns, specifically in creational patterns such as the Design pattern object library. Specific recipes have been developed to implement them in many languages. For example, several ""GoF patterns"", like the ""Factory method pattern"", the ""Builder"" or even the ""Singleton"" are implementations of this concept. The ""Abstract factory pattern"" instead is a method to build collections of factories.","['factory', 'design', 'pattern', 'specifically', 'creational', 'pattern', 'design', 'pattern', 'object', 'library', 'specific', 'recipe', 'develop', 'implement', 'language', 'example', 'gof', 'pattern', 'like', 'factory', 'method', 'pattern', 'builder', 'singleton', 'implementation', 'concept', 'abstract', 'factory', 'pattern', 'instead', 'method', 'build', 'collection', 'factory']"
1516,"In some design patterns, a factory object has a method for every kind of object it is capable of creating. These methods optionally accept parameters defining how the object is created, and then return the created object.","['design', 'pattern', 'factory', 'object', 'method', 'kind', 'object', 'capable', 'create', 'method', 'optionally', 'accept', 'parameter', 'define', 'object', 'create', 'return', 'create', 'object']"
1517,Factory objects are common in toolkits and frameworks where library code needs to create objects of types which may be subclassed by applications using the framework. They are also used in test-driven development to allow classes to be put under test.8,"['factory', 'object', 'common', 'toolkit', 'framework', 'library', 'code', 'need', 'create', 'object', 'type', 'subclasse', 'application', 'framework', 'test', 'drive', 'development', 'allow', 'class', 'test']"
1518,"Factories determine the actual concrete type of object to be created, and it is here that the object is actually created. As the factory only returns an abstract interface to the object, the client code does not know – and is not burdened by – the actual concrete type of the object which was just created. However, the type of a concrete object is known by the abstract factory. In particular, this means:","['factory', 'determine', 'actual', 'concrete', 'type', 'object', 'create', 'object', 'actually', 'create', 'factory', 'return', 'abstract', 'interface', 'object', 'client', 'code', 'know', 'burden', 'actual', 'concrete', 'type', 'object', 'create', 'type', 'concrete', 'object', 'know', 'abstract', 'factory', 'particular', 'mean']"
1519,"Factories, specifically factory methods, are common in toolkits and frameworks, where library code needs to create objects of types that may be subclassed by applications using the framework.","['factory', 'specifically', 'factory', 'method', 'common', 'toolkit', 'framework', 'library', 'code', 'need', 'create', 'object', 'type', 'subclasse', 'application', 'framework']"
1520,Parallel class hierarchies often require objects from one hierarchy to be able to create appropriate objects from another.,"['parallel', 'class', 'hierarchy', 'require', 'object', 'hierarchy', 'able', 'create', 'appropriate', 'object']"
1521,"Factory methods are used in test-driven development to allow classes to be put under test.9 If such a class Foo creates another object Dangerous that can't be put under automated unit tests perhaps it communicates with a production database that isn't always available, then the creation of Dangerous objects is placed in the virtual factory method createDangerous in class Foo. For testing, TestFoo a subclass of Foo is then created, with the virtual factory method createDangerous overridden to create and return FakeDangerous, a fake object. Unit tests then use TestFoo to test the functionality of Foo without incurring the side effect of using a real Dangerous object.","['factory', 'method', 'test', 'drive', 'development', 'allow', 'class', 'test', 'class', 'foo', 'create', 'object', 'dangerous', 'automate', 'unit', 'test', 'communicate', 'production', 'database', 'available', 'creation', 'dangerous', 'object', 'place', 'virtual', 'factory', 'method', 'createdangerous', 'class', 'foo', 'testing', 'testfoo', 'subclass', 'foo', 'create', 'virtual', 'factory', 'method', 'createdangerous', 'overridden', 'create', 'return', 'fakedangerous', 'fake', 'object', 'unit', 'test', 'use', 'testfoo', 'test', 'functionality', 'foo', 'incur', 'effect', 'real', 'dangerous', 'object']"
1522,"Besides use in design patterns, factories, especially factory methods, have various benefits and variations.","['use', 'design', 'pattern', 'factory', 'especially', 'factory', 'method', 'benefit', 'variation']"
1523,"A factory method has a distinct name. In many object-oriented languages, constructors must have the same name as the class they are in, which can lead to ambiguity if there is more than one way to create an object see overloading. Factory methods have no such constraint and can have descriptive names; these are sometimes known as alternative constructors. As an example, when complex numbers are created from two real numbers the real numbers can be interpreted as Cartesian or polar coordinates, but using factory methods, the meaning is clear, as illustrated by the following example in C#.","['factory', 'method', 'distinct', 'object', 'orient', 'language', 'constructor', 'class', 'lead', 'ambiguity', 'way', 'create', 'object', 'overload', 'factory', 'method', 'constraint', 'descriptive', 'name', 'know', 'alternative', 'constructor', 'example', 'complex', 'number', 'create', 'real', 'number', 'real', 'number', 'interpret', 'cartesian', 'polar', 'coordinate', 'factory', 'method', 'meaning', 'clear', 'illustrate', 'follow', 'example']"
1524,"When factory methods are used for disambiguation like this, the raw constructors are often made private to force clients to use the factory methods.","['factory', 'method', 'disambiguation', 'like', 'raw', 'constructor', 'private', 'force', 'client', 'use', 'factory', 'method']"
1525,"Factory methods encapsulate the creation of objects. This can be useful if the creation process is very complex; for example, if it depends on settings in configuration files or on user input.","['factory', 'method', 'encapsulate', 'creation', 'object', 'useful', 'creation', 'process', 'complex', 'example', 'depend', 'setting', 'configuration', 'file', 'user', 'input']"
1526,"Consider as an example a program that reads image files. The program supports different image formats, represented by a reader class for each format.","['consider', 'example', 'program', 'read', 'image', 'file', 'program', 'support', 'different', 'image', 'format', 'represent', 'reader', 'class', 'format']"
1527,"Each time the program reads an image, it needs to create a reader of the appropriate type based on some information in the file. This logic can be encapsulated in a factory method. This approach has also been referred to as the Simple Factory.","['time', 'program', 'read', 'image', 'need', 'create', 'reader', 'appropriate', 'type', 'base', 'information', 'file', 'logic', 'encapsulate', 'factory', 'method', 'approach', 'refer', 'simple', 'factory']"
1528,There are three limitations associated with the use of the factory method. The first relates to refactoring existing code; the other two relate to extending a class.,"['limitation', 'associate', 'use', 'factory', 'method', 'relate', 'refactore', 'exist', 'code', 'relate', 'extend', 'class']"
1529,All three problems could be alleviated by altering the underlying programming language to make factories first-class class members see also Virtual class.10,"['problem', 'alleviate', 'alter', 'underlying', 'programming', 'language', 'factory', 'class', 'class', 'member', 'virtual', 'class']"
1530,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1531,"In object-oriented programming, a member variable sometimes called a member field is a variable that is associated with a specific object, and accessible for all its methods member functions.","['object', 'orient', 'programming', 'member', 'variable', 'call', 'member', 'field', 'variable', 'associate', 'specific', 'object', 'accessible', 'method', 'member', 'function']"
1532,"In class-based programming languages, these are distinguished into two types: class variables also called static member variables, where only one copy of the variable is shared with all instances of the class; and instance variables, where each instance of the class has its own independent copy of the variable.1","['class', 'base', 'programming', 'language', 'distinguish', 'type', 'class', 'variable', 'call', 'static', 'member', 'variable', 'copy', 'variable', 'share', 'instance', 'class', 'instance', 'variable', 'instance', 'class', 'independent', 'copy', 'variable']"
1533,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1534,"In computer science, a finalizer or finalize method is a special method that performs finalization, generally some form of cleanup. A finalizer is executed during object destruction, prior to the object being deallocated, and is complementary to an initializer, which is executed during object creation, following allocation. Finalizers are strongly discouraged by some, due to difficulty in proper use and the complexity they add, and alternatives are suggested instead, mainly the dispose pattern1 see problems with finalizers.","['computer', 'science', 'finalizer', 'finalize', 'method', 'special', 'method', 'perform', 'finalization', 'generally', 'form', 'cleanup', 'finalizer', 'execute', 'object', 'destruction', 'prior', 'object', 'deallocate', 'complementary', 'initializer', 'execute', 'object', 'creation', 'follow', 'allocation', 'finalizer', 'strongly', 'discourage', 'difficulty', 'proper', 'use', 'complexity', 'add', 'alternative', 'suggest', 'instead', 'mainly', 'dispose', 'pattern1', 'problem', 'finalizer']"
1535,"The term finalizer is mostly used in object-oriented and functional programming languages that use garbage collection, of which the archetype is Smalltalk. This is contrasted with a destructor, which is a method called for finalization in languages with deterministic object lifetimes, archetypically C++.23 These are generally exclusive: a language will have either finalizers if automatically garbage collected or destructors if manually memory managed, but in rare cases a language may have both, as in C++/CLI and D, and in case of reference counting instead of tracing garbage collection, terminology varies. In technical use, finalizer may also be used to refer to destructors, as these also perform finalization, and some subtler distinctions are drawn – see terminology. The term final is also used to indicate a class that cannot be inherited; this is unrelated.","['term', 'finalizer', 'object', 'orient', 'functional', 'programming', 'language', 'use', 'garbage', 'collection', 'archetype', 'smalltalk', 'contrast', 'destructor', 'method', 'call', 'finalization', 'language', 'deterministic', 'object', 'lifetime', 'archetypically', 'c++', 'generally', 'exclusive', 'language', 'finalizer', 'automatically', 'garbage', 'collect', 'destructor', 'manually', 'memory', 'manage', 'rare', 'case', 'language', 'case', 'reference', 'counting', 'instead', 'trace', 'garbage', 'collection', 'terminology', 'varie', 'technical', 'use', 'finalizer', 'refer', 'destructor', 'perform', 'finalization', 'subtler', 'distinction', 'draw', 'terminology', 'term', 'final', 'indicate', 'class', 'inherit', 'unrelated']"
1536,The terminology of finalizer and finalization versus destructor and destruction varies between authors and is sometimes unclear.,"['terminology', 'finalizer', 'finalization', 'versus', 'destructor', 'destruction', 'vary', 'author', 'unclear']"
1537,"In common use, a destructor is a method called deterministically on object destruction, and the archetype is C++ destructors; while a finalizer is called non-deterministically by the garbage collector, and the archetype is Java finalize methods.","['common', 'use', 'destructor', 'method', 'call', 'deterministically', 'object', 'destruction', 'archetype', 'c++', 'destructor', 'finalizer', 'call', 'non', 'deterministically', 'garbage', 'collector', 'archetype', 'java', 'finalize', 'method']"
1538,"For languages that implement garbage collection via reference counting, terminology varies, with some languages such as Objective-C and Perl using destructor, and other languages such as Python using finalizer per spec, Python is garbage collected, but the reference CPython implementation since its version 2.0 uses a combination of reference counting and garbage collection. This reflects that reference counting results in semi-deterministic object lifetime: for objects that are not part of a cycle, objects are destroyed deterministically when the reference count drops to zero, but objects that are part of a cycle are destroyed non-deterministically, as part of a separate form of garbage collection.","['language', 'implement', 'garbage', 'collection', 'reference', 'counting', 'terminology', 'varie', 'language', 'objective', 'perl', 'destructor', 'language', 'python', 'finalizer', 'spec', 'python', 'garbage', 'collect', 'reference', 'cpython', 'implementation', 'version', '2', 'use', 'combination', 'reference', 'counting', 'garbage', 'collection', 'reflect', 'reference', 'counting', 'result', 'semi', 'deterministic', 'object', 'lifetime', 'object', 'cycle', 'object', 'destroy', 'deterministically', 'reference', 'count', 'drop', 'zero', 'object', 'cycle', 'destroy', 'non', 'deterministically', 'separate', 'form', 'garbage', 'collection']"
1539,"In certain narrow technical use, constructor and destructor are language-level terms, meaning methods defined in a class, while initializer and finalizer are implementation-level terms, meaning methods called during object creation or destruction. Thus for example the original specification for the C# language referred to ""destructors"", even though C# is garbage-collected, but the specification for the Common Language Infrastructure CLI, and the implementation of its runtime environment as the Common Language Runtime CLR, referred to ""finalizers"". This is reflected in the C# language committee's notes, which read in part: ""The C# compiler compiles destructors to ... probably instance finalizers"".45 This terminology is confusing, and thus more recent versions of the C# spec refer to the language-level method as ""finalizers"".6","['certain', 'narrow', 'technical', 'use', 'constructor', 'destructor', 'language', 'level', 'term', 'mean', 'method', 'define', 'class', 'initializer', 'finalizer', 'implementation', 'level', 'term', 'mean', 'method', 'call', 'object', 'creation', 'destruction', 'example', 'original', 'specification', 'language', 'refer', 'destructor', 'garbage', 'collect', 'specification', 'common', 'language', 'infrastructure', 'cli', 'implementation', 'runtime', 'environment', 'common', 'language', 'runtime', 'clr', 'refer', 'finalizer', 'reflect', 'language', 'committee', 'note', 'read', 'compiler', 'compile', 'destructor', 'probably', 'instance', 'finalizers', 'terminology', 'confusing', 'recent', 'version', 'spec', 'refer', 'language', 'level', 'method', 'finalizers']"
1540,"Another language that does not make this terminology distinction is D. Although D classes are garbage collected, their cleanup functions are called destructors.7","['language', 'terminology', 'distinction', 'class', 'garbage', 'collect', 'cleanup', 'function', 'call', 'destructors']"
1541,"Finalization is mostly used for cleanup, to release memory or other resources: to deallocate memory allocated via manual memory management; to clear references if reference counting is used decrement reference counts; to release resources, particularly in the Resource Acquisition Is Initialization RAII idiom; or to unregister an object. The amount of finalization varies significantly between languages, from extensive finalization in C++, which has manual memory management, reference counting, and deterministic object lifetimes; to often no finalization in Java, which has non-deterministic object lifetimes and is often implemented with a tracing garbage collector. It is also possible for there to be little or no explicit user-specified finalization, but significant implicit finalization, performed by the compiler, interpreter, or runtime; this is common in case of automatic reference counting, as in the CPython reference implementation of Python, or in Automatic Reference Counting in Apple's implementation of Objective-C, which both automatically break references during finalization. A finalizer can include arbitrary code; a particularly complex use is to automatically return the object to an object pool.","['finalization', 'cleanup', 'release', 'memory', 'resource', 'deallocate', 'memory', 'allocate', 'manual', 'memory', 'management', 'clear', 'reference', 'reference', 'counting', 'decrement', 'reference', 'count', 'release', 'resource', 'particularly', 'resource', 'acquisition', 'initialization', 'raii', 'idiom', 'unregister', 'object', 'finalization', 'vary', 'significantly', 'language', 'extensive', 'finalization', 'c++', 'manual', 'memory', 'management', 'reference', 'counting', 'deterministic', 'object', 'lifetime', 'finalization', 'java', 'non', 'deterministic', 'object', 'lifetime', 'implement', 'trace', 'garbage', 'collector', 'possible', 'little', 'explicit', 'user', 'specify', 'finalization', 'significant', 'implicit', 'finalization', 'perform', 'compiler', 'interpreter', 'runtime', 'common', 'case', 'automatic', 'reference', 'counting', 'cpython', 'reference', 'implementation', 'python', 'automatic', 'reference', 'counting', 'apple', 'implementation', 'objective', 'automatically', 'break', 'reference', 'finalization', 'finalizer', 'include', 'arbitrary', 'code', 'particularly', 'complex', 'use', 'automatically', 'return', 'object', 'object', 'pool']"
1542,"Memory deallocation during finalization is common in languages like C++ where manual memory management is standard, but also occurs in managed languages when memory has been allocated outside of the managed heap externally to the language; in Java this occurs with Java Native Interface JNI and ByteBuffer objects in New I/O NIO. This latter can cause problems due to the garbage collector being unable to track these external resources, so they will not be collected aggressively enough, and can cause out-of-memory errors due to exhausting unmanaged memory – this can be avoided by treating native memory as a resource and using the dispose pattern, as discussed below.","['memory', 'deallocation', 'finalization', 'common', 'language', 'like', 'c++', 'manual', 'memory', 'management', 'standard', 'occur', 'manage', 'language', 'memory', 'allocate', 'outside', 'manage', 'heap', 'externally', 'language', 'java', 'occur', 'java', 'native', 'interface', 'jni', 'bytebuffer', 'object', 'new', 'nio', 'cause', 'problem', 'garbage', 'collector', 'unable', 'track', 'external', 'resource', 'collect', 'aggressively', 'cause', 'memory', 'error', 'exhaust', 'unmanaged', 'memory', 'avoid', 'treat', 'native', 'memory', 'resource', 'dispose', 'pattern', 'discuss']"
1543,"Finalizers are generally both much less necessary and much less used than destructors. They are much less necessary because garbage collection automates memory management, and much less used because they are not generally executed deterministically – they may not be called in a timely manner, or even at all, and the execution environment cannot be predicted – and thus any cleanup that must be done in a deterministic way must instead be done by some other method, most frequently manually via the dispose pattern. Notably, both Java and Python do not guarantee that finalizers will ever be called, and thus they cannot be relied on for cleanup.","['finalizer', 'generally', 'necessary', 'destructor', 'necessary', 'garbage', 'collection', 'automate', 'memory', 'management', 'generally', 'execute', 'deterministically', 'call', 'timely', 'manner', 'execution', 'environment', 'predict', 'cleanup', 'deterministic', 'way', 'instead', 'method', 'frequently', 'manually', 'dispose', 'pattern', 'notably', 'java', 'python', 'guarantee', 'finalizer', 'call', 'rely', 'cleanup']"
1544,"Due to the lack of programmer control over their execution, it is usually recommended to avoid finalizers for any but the most trivial operations. In particular, operations often performed in destructors are not usually appropriate for finalizers. A common anti-pattern is to write finalizers as if they were destructors, which is both unnecessary and ineffectual, due to differences between finalizers and destructors. This is particularly common among C++ programmers, as destructors are heavily used in idiomatic C++, following the Resource Acquisition Is Initialization RAII idiom.","['lack', 'programmer', 'control', 'execution', 'usually', 'recommend', 'avoid', 'finalizer', 'trivial', 'operation', 'particular', 'operation', 'perform', 'destructor', 'usually', 'appropriate', 'finalizer', 'common', 'anti', 'pattern', 'write', 'finalizer', 'destructor', 'unnecessary', 'ineffectual', 'difference', 'finalizer', 'destructor', 'particularly', 'common', 'c++', 'programmer', 'destructor', 'heavily', 'idiomatic', 'c++', 'follow', 'resource', 'acquisition', 'initialization', 'raii', 'idiom']"
1545,"Programming languages that use finalizers include C++/CLI, C#, Clean, Go, Java, JavaScript and Python. Syntax varies significantly by language.","['programming', 'language', 'use', 'finalizer', 'include', 'clean', 'java', 'javascript', 'python', 'syntax', 'vary', 'significantly', 'language']"
1546,"In Java, a finalizer is a method called finalize, which overrides the Object.finalize method.8","['java', 'finalizer', 'method', 'call', 'finalize', 'override', 'object.finalize', 'method']"
1547,"In JavaScript, FinalizationRegistry allows you to request a callback when an object is garbage-collected.","['javascript', 'finalizationregistry', 'allow', 'request', 'callback', 'object', 'garbage', 'collect']"
1548,"In Python, a finalizer is a method called __del__.","['python', 'finalizer', 'method', 'call', 'del']"
1549,"In Perl, a finalizer is a method called DESTROY.","['perl', 'finalizer', 'method', 'call', 'destroy']"
1550,"In C#, a finalizer called ""destructor"" in earlier versions of the standard is a method whose name is the class name with ~ prefixed, as in ~Foo – this is the same syntax as a C++ destructor, and these methods were originally called ""destructors"", by analogy with C++, despite having different behavior, but were renamed to ""finalizers"" due to the confusion this caused.6","['finalizer', 'call', 'destructor', 'early', 'version', 'standard', 'method', 'class', 'prefix', '~foo', 'syntax', 'c++', 'destructor', 'method', 'originally', 'call', 'destructor', 'analogy', 'c++', 'despite', 'have', 'different', 'behavior', 'rename', 'finalizer', 'confusion', 'caused']"
1551,"In C++/CLI, which has both destructors and finalizers, a destructor is a method whose name is the class name with ~ prefixed, as in ~Foo as in C#, and a finalizer is a method whose name is the class name with ! prefixed, as in !Foo.","['destructor', 'finalizer', 'destructor', 'method', 'class', 'prefix', '~foo', 'finalizer', 'method', 'class', 'prefix', 'foo']"
1552,In Go finalizers are applied to a single pointer by calling the runtime.SetFinalizer function in the standard library.9,"['finalizer', 'apply', 'single', 'pointer', 'call', 'runtime', 'setfinalizer', 'function', 'standard', 'library']"
1553,"A finalizer is called when an object is garbage collected – after an object has become garbage unreachable, but before its memory is deallocated. Finalization occurs non-deterministically, at the discretion of the garbage collector, and might never occur. This contrasts with destructors, which are called deterministically as soon as an object is no longer in use, and are always called, except in case of uncontrolled program termination. Finalizers are most frequently instance methods, due to needing to do object-specific operations.","['finalizer', 'call', 'object', 'garbage', 'collect', 'object', 'garbage', 'unreachable', 'memory', 'deallocate', 'finalization', 'occur', 'non', 'deterministically', 'discretion', 'garbage', 'collector', 'occur', 'contrast', 'destructor', 'call', 'deterministically', 'soon', 'object', 'long', 'use', 'call', 'case', 'uncontrolled', 'program', 'termination', 'finalizer', 'frequently', 'instance', 'method', 'need', 'object', 'specific', 'operation']"
1554,"The garbage collector must also account for the possibility of object resurrection. Most commonly this is done by first executing finalizers, then checking whether any objects have been resurrected, and if so, aborting their destruction. This additional check is potentially expensive – a simple implementation re-checks all garbage if even a single object has a finalizer – and thus both slows down and complicates garbage collection. For this reason, objects with finalizers may be collected less frequently than objects without finalizers only on certain cycles, exacerbating problems caused by relying on prompt finalization, such as resource leaks.","['garbage', 'collector', 'account', 'possibility', 'object', 'resurrection', 'commonly', 'execute', 'finalizer', 'check', 'object', 'resurrect', 'abort', 'destruction', 'additional', 'check', 'potentially', 'expensive', 'simple', 'implementation', 'check', 'garbage', 'single', 'object', 'finalizer', 'slow', 'complicate', 'garbage', 'collection', 'reason', 'object', 'finalizer', 'collect', 'frequently', 'object', 'finalizer', 'certain', 'cycle', 'exacerbate', 'problem', 'cause', 'rely', 'prompt', 'finalization', 'resource', 'leak']"
1555,"If an object is resurrected, there is the further question of whether its finalizer is called again, when it is next destroyed – unlike destructors, finalizers are potentially called multiple times. If finalizers are called for resurrected objects, objects may repeatedly resurrect themselves and be indestructible; this occurs in the CPython implementation of Python prior to Python 3.4, and in CLR languages such as C#. To avoid this, in many languages, including Java, Objective-C at least in recent Apple implementations, and Python from Python 3.4, objects are finalized at most once, which requires tracking if the object has been finalized yet.","['object', 'resurrect', 'question', 'finalizer', 'call', 'destroy', 'unlike', 'destructor', 'finalizer', 'potentially', 'call', 'multiple', 'time', 'finalizer', 'call', 'resurrected', 'object', 'object', 'repeatedly', 'resurrect', 'indestructible', 'occur', 'cpython', 'implementation', 'python', 'prior', 'python', '3', 'clr', 'language', 'avoid', 'language', 'include', 'java', 'objective', 'recent', 'apple', 'implementation', 'python', 'python', '3', 'object', 'finalize', 'require', 'track', 'object', 'finalize']"
1556,"In other cases, notably CLR languages like C#, finalization is tracked separately from the objects themselves, and objects can be repeatedly registered or deregistered for finalization.","['case', 'notably', 'clr', 'language', 'like', 'finalization', 'track', 'separately', 'object', 'object', 'repeatedly', 'register', 'deregistere', 'finalization']"
1557,"Depending on the implementation, finalizers can cause a significant number of problems, and are thus strongly discouraged by a number of authorities.1011 These problems include:10","['depend', 'implementation', 'finalizer', 'cause', 'significant', 'number', 'problem', 'strongly', 'discourage', 'number', 'authorities', 'problem', 'include']"
1558,"Further, finalizers may fail to run due to objects remaining reachable beyond when they are expected to be garbage, either due to programming errors or due to unexpected reachability. For example, when Python catches an exception or an exception is not caught in interactive mode, it keeps a reference to the stack frame where the exception was raised, which keeps objects referenced from that stack frame alive.","['finalizer', 'fail', 'run', 'object', 'remain', 'reachable', 'expect', 'garbage', 'programming', 'error', 'unexpected', 'reachability', 'example', 'python', 'catch', 'exception', 'exception', 'catch', 'interactive', 'mode', 'keep', 'reference', 'stack', 'frame', 'exception', 'raise', 'keep', 'object', 'reference', 'stack', 'frame', 'alive']"
1559,"In Java, finalizers in a superclass can also slow down garbage collection in a subclass, as the finalizer can potentially refer to fields in the subclass, and thus the field cannot be garbage collected until the following cycle, once the finalizer has run.10 This can be avoided by using composition over inheritance.","['java', 'finalizer', 'superclass', 'slow', 'garbage', 'collection', 'subclass', 'finalizer', 'potentially', 'refer', 'field', 'subclass', 'field', 'garbage', 'collect', 'following', 'cycle', 'finalizer', 'run', 'avoid', 'composition', 'inheritance']"
1560,"A common anti-pattern is to use finalizers to release resources, by analogy with the Resource Acquisition Is Initialization RAII idiom of C++: acquire a resource in the initializer constructor, and release it in the finalizer destructor. This does not work, for a number of reasons. Most basically, finalizers may never be called, and even if called, may not be called in a timely manner – thus using finalizers to release resources will generally cause resource leaks. Further, finalizers are not called in a prescribed order, while resources often need to be released in a specific order, frequently the opposite order in which they were acquired. Also, as finalizers are called at the discretion of the garbage collector, they will often only be called under managed memory pressure when there is little managed memory available, regardless of resource pressure – if scarce resources are held by garbage but there is plenty of managed memory available, garbage collection may not occur, thus not reclaiming these resources.","['common', 'anti', 'pattern', 'use', 'finalizer', 'release', 'resource', 'analogy', 'resource', 'acquisition', 'initialization', 'raii', 'idiom', 'c++', 'acquire', 'resource', 'initializer', 'constructor', 'release', 'finalizer', 'destructor', 'work', 'number', 'reason', 'basically', 'finalizer', 'call', 'call', 'call', 'timely', 'manner', 'finalizer', 'release', 'resource', 'generally', 'cause', 'resource', 'leak', 'finalizer', 'call', 'prescribed', 'order', 'resource', 'need', 'release', 'specific', 'order', 'frequently', 'opposite', 'order', 'acquire', 'finalizer', 'call', 'discretion', 'garbage', 'collector', 'call', 'manage', 'memory', 'pressure', 'little', 'manage', 'memory', 'available', 'regardless', 'resource', 'pressure', 'scarce', 'resource', 'hold', 'garbage', 'plenty', 'manage', 'memory', 'available', 'garbage', 'collection', 'occur', 'reclaim', 'resource']"
1561,"Thus instead of using finalizers for automatic resource management, in garbage-collected languages one instead must manually manage resources, generally by using the dispose pattern. In this case resources may still be acquired in the initializer, which is called explicitly on object instantiation, but are released in the dispose method. The dispose method may be called explicitly, or implicitly by language constructs such as C#'s using, Java's try-with-resources, or Python's with.","['instead', 'finalizer', 'automatic', 'resource', 'management', 'garbage', 'collect', 'language', 'instead', 'manually', 'manage', 'resource', 'generally', 'dispose', 'pattern', 'case', 'resource', 'acquire', 'initializer', 'call', 'explicitly', 'object', 'instantiation', 'release', 'dispose', 'method', 'dispose', 'method', 'call', 'explicitly', 'implicitly', 'language', 'construct', 'java', 'try', 'resource', 'python']"
1562,"However, in certain cases both the dispose pattern and finalizers are used for releasing resources. This is mostly found in CLR languages such as C#, where finalization is used as a backup for disposal: when a resource is acquired, the acquiring object is queued for finalization so that the resource is released on object destruction, even if the resource is not released by manual disposal.","['certain', 'case', 'dispose', 'pattern', 'finalizer', 'release', 'resource', 'find', 'clr', 'language', 'finalization', 'backup', 'disposal', 'resource', 'acquire', 'acquire', 'object', 'queue', 'finalization', 'resource', 'release', 'object', 'destruction', 'resource', 'release', 'manual', 'disposal']"
1563,"In languages with deterministic object lifetimes, notably C++, resource management is frequently done by tying resource possession lifetime to object lifetime, acquiring resources during initialization and releasing them during finalization; this is known as Resource Acquisition Is Initialization RAII. This ensures that resource possession is a class invariant, and that resources are released promptly when the object is destroyed.","['language', 'deterministic', 'object', 'lifetime', 'notably', 'c++', 'resource', 'management', 'frequently', 'tie', 'resource', 'possession', 'lifetime', 'object', 'lifetime', 'acquire', 'resource', 'initialization', 'release', 'finalization', 'know', 'resource', 'acquisition', 'initialization', 'raii', 'ensure', 'resource', 'possession', 'class', 'invariant', 'resource', 'release', 'promptly', 'object', 'destroy']"
1564,"However, in languages with non-deterministic object lifetimes – which include all major languages with garbage collection, such as C#, Java, and Python – this does not work, because finalization may not be timely or may not happen at all, and thus resources may not be released for a long time or even at all, causing resource leaks. In these languages resources are instead generally managed manually via the dispose pattern: resources may still be acquired during initialization, but are released by calling a dispose method. Nevertheless, using finalization for releasing resources in these languages is a common anti-pattern, and forgetting to call dispose will still cause a resource leak.","['language', 'non', 'deterministic', 'object', 'lifetime', 'include', 'major', 'language', 'garbage', 'collection', 'java', 'python', 'work', 'finalization', 'timely', 'happen', 'resource', 'release', 'long', 'time', 'cause', 'resource', 'leak', 'language', 'resource', 'instead', 'generally', 'manage', 'manually', 'dispose', 'pattern', 'resource', 'acquire', 'initialization', 'release', 'call', 'dispose', 'method', 'finalization', 'release', 'resource', 'language', 'common', 'anti', 'pattern', 'forget', 'dispose', 'cause', 'resource', 'leak']"
1565,"In some cases both techniques are combined, using an explicit dispose method, but also releasing any still-held resources during finalization as a backup. This is commonly found in C#, and is implemented by registering an object for finalization whenever a resource is acquired, and suppressing finalization whenever a resource is released.","['case', 'technique', 'combine', 'explicit', 'dispose', 'method', 'release', 'hold', 'resource', 'finalization', 'backup', 'commonly', 'find', 'implement', 'register', 'object', 'finalization', 'resource', 'acquire', 'suppress', 'finalization', 'resource', 'release']"
1566,"If user-specified finalizers are allowed, it is possible for finalization to cause object resurrection, as the finalizers can run arbitrary code, which may create references from live objects to objects being destroyed. For languages without garbage collection, this is a severe bug, and causes dangling references and memory safety violations; for languages with garbage collection, this is prevented by the garbage collector, most commonly by adding another step to garbage collection after running all user-specified finalizers, check for resurrection, which complicates and slows down garbage collection.","['user', 'specify', 'finalizer', 'allow', 'possible', 'finalization', 'cause', 'object', 'resurrection', 'finalizer', 'run', 'arbitrary', 'code', 'create', 'reference', 'live', 'object', 'object', 'destroy', 'language', 'garbage', 'collection', 'severe', 'bug', 'cause', 'dangle', 'reference', 'memory', 'safety', 'violation', 'language', 'garbage', 'collection', 'prevent', 'garbage', 'collector', 'commonly', 'add', 'step', 'garbage', 'collection', 'run', 'user', 'specify', 'finalizer', 'check', 'resurrection', 'complicate', 'slow', 'garbage', 'collection']"
1567,"Further, object resurrection means that an object may not be destroyed, and in pathological cases an object can always resurrect itself during finalization, making itself indestructible. To prevent this, some languages, like Java and Python from Python 3.4 only finalize objects once, and do not finalize resurrected objects.citation needed Concretely this is done by tracking if an object has been finalized on an object-by-object basis. Objective-C also tracks finalization at least in recentwhen? Apple versionsclarification needed for similar reasons, treating resurrection as a bug.","['object', 'resurrection', 'mean', 'object', 'destroy', 'pathological', 'case', 'object', 'resurrect', 'finalization', 'make', 'indestructible', 'prevent', 'language', 'like', 'java', 'python', 'python', '3', 'finalize', 'object', 'finalize', 'resurrect', 'objects.citation', 'need', 'concretely', 'track', 'object', 'finalize', 'object', 'object', 'basis', 'objective', 'track', 'finalization', 'recentwhen', 'apple', 'versionsclarification', 'need', 'similar', 'reason', 'treat', 'resurrection', 'bug']"
1568,"A different approach is used in the .NET Framework, notably C# and Visual Basic .NET, where finalization is tracked by a ""queue"", rather than by object. In this case, if a user-specified finalizer is provided, by default the object is only finalized once it is queued for finalization on creation, and dequeued once it is finalized, but this can be changed via calling the GC module. Finalization can be prevented by calling GC.SuppressFinalize, which dequeues the object, or reactivated by calling GC.ReRegisterForFinalize, which enqueues the object. These are particularly used when using finalization for resource management as a supplement to the dispose pattern, or when implementing an object pool.","['different', 'approach', '.net', 'framework', 'notably', 'visual', 'basic', '.net', 'finalization', 'track', 'queue', 'object', 'case', 'user', 'specify', 'finalizer', 'provide', 'default', 'object', 'finalize', 'queue', 'finalization', 'creation', 'dequeue', 'finalize', 'change', 'call', 'module', 'finalization', 'prevent', 'call', 'gc.suppressfinalize', 'dequeue', 'object', 'reactivate', 'call', 'gc.reregisterforfinalize', 'enqueue', 'object', 'particularly', 'finalization', 'resource', 'management', 'supplement', 'dispose', 'pattern', 'implement', 'object', 'pool']"
1569,"Finalization is formally complementary to initialization – initialization occurs at the start of lifetime, finalization at the end – but differs significantly in practice. Both variables and objects are initialized, mostly to assign values, but in general only objects are finalized, and in general there is no need to clear values – the memory can simply be deallocated and reclaimed by the operating system.","['finalization', 'formally', 'complementary', 'initialization', 'initialization', 'occur', 'start', 'lifetime', 'finalization', 'end', 'differ', 'significantly', 'practice', 'variable', 'object', 'initialize', 'assign', 'value', 'general', 'object', 'finalize', 'general', 'need', 'clear', 'value', 'memory', 'simply', 'deallocate', 'reclaim', 'operating', 'system']"
1570,"Beyond assigning initial values, initialization is mostly used to acquire resources or to register an object with some service like an event handler. These actions have symmetric release or unregister actions, and these can symmetrically be handled in a finalizer, which is done in RAII. However, in many languages, notably those with garbage collection, object lifetime is asymmetric: object creation happens deterministically at some explicit point in the code, but object destruction happens non-deterministically, in some unspecified environment, at the discretion of the garbage collector. This asymmetry means that finalization cannot be effectively used as the complement of initialization, because it does not happen in a timely manner, in a specified order, or in a specified environment. The symmetry is partially restored by also disposing of the object at an explicit point, but in this case disposal and destruction do not happen at the same point, and an object may be in a ""disposed but still alive"" state, which weakens the class invariants and complicates use.","['assign', 'initial', 'value', 'initialization', 'acquire', 'resource', 'register', 'object', 'service', 'like', 'event', 'handler', 'action', 'symmetric', 'release', 'unregister', 'action', 'symmetrically', 'handle', 'finalizer', 'raii', 'language', 'notably', 'garbage', 'collection', 'object', 'lifetime', 'asymmetric', 'object', 'creation', 'happen', 'deterministically', 'explicit', 'point', 'code', 'object', 'destruction', 'happen', 'non', 'deterministically', 'unspecified', 'environment', 'discretion', 'garbage', 'collector', 'asymmetry', 'mean', 'finalization', 'effectively', 'complement', 'initialization', 'happen', 'timely', 'manner', 'specified', 'order', 'specified', 'environment', 'symmetry', 'partially', 'restore', 'dispose', 'object', 'explicit', 'point', 'case', 'disposal', 'destruction', 'happen', 'point', 'object', 'disposed', 'alive', 'state', 'weaken', 'class', 'invariant', 'complicate', 'use']"
1571,"Variables are generally initialized at the start of their lifetime, but not finalized at the end of their lifetime – though if a variable has an object as its value, the object may be finalized. In some cases variables are also finalized: GCC extensions allow finalization of variables.","['variable', 'generally', 'initialize', 'start', 'lifetime', 'finalize', 'end', 'lifetime', 'variable', 'object', 'value', 'object', 'finalize', 'case', 'variable', 'finalize', 'gcc', 'extension', 'allow', 'finalization', 'variable']"
1572,"As reflected in the naming, ""finalization"" and the finally construct both fulfill similar purposes: performing some final action, generally cleaning up, after something else has finished. They differ in when they occur – a finally clause is executed when program execution leaves the body of the associated try clause – this occurs during stack unwind, and there is thus a stack of pending finally clauses, in order – while finalization occurs when an object is destroyed, which happens depending on the memory management method, and in general there is simply a set of objects awaiting finalization – often on the heap – which need not happen in any specific order.","['reflect', 'naming', 'finalization', 'finally', 'construct', 'fulfill', 'similar', 'purpose', 'perform', 'final', 'action', 'generally', 'clean', 'finish', 'differ', 'occur', 'finally', 'clause', 'execute', 'program', 'execution', 'leave', 'body', 'associated', 'try', 'clause', 'occur', 'stack', 'unwind', 'stack', 'pende', 'finally', 'clause', 'order', 'finalization', 'occur', 'object', 'destroy', 'happen', 'depend', 'memory', 'management', 'method', 'general', 'simply', 'set', 'object', 'await', 'finalization', 'heap', 'need', 'happen', 'specific', 'order']"
1573,"However, in some cases these coincide. In C++, object destruction is deterministic, and the behavior of a finally clause can be produced by having a local variable with an object as its value, whose scope is a block corresponds to the body of a try clause – the object is finalized destructed when execution exits this scope, exactly as if there were a finally clause. For this reason, C++ does not have a finally construct – the difference being that finalization is defined in the class definition as the destructor method, rather than at the call site in a finally clause.","['case', 'coincide', 'c++', 'object', 'destruction', 'deterministic', 'behavior', 'finally', 'clause', 'produce', 'have', 'local', 'variable', 'object', 'value', 'scope', 'block', 'correspond', 'body', 'try', 'clause', 'object', 'finalize', 'destruct', 'execution', 'exit', 'scope', 'exactly', 'finally', 'clause', 'reason', 'c++', 'finally', 'construct', 'difference', 'finalization', 'define', 'class', 'definition', 'destructor', 'method', 'site', 'finally', 'clause']"
1574,"Conversely, in the case of a finally clause in a coroutine, like in a Python generator, the coroutine may never terminate – only ever yielding – and thus in ordinary execution the finally clause is never executed. If one interprets instances of a coroutine as objects, then the finally clause can be considered a finalizer of the object, and thus can be executed when the instance is garbage collected. In Python terminology, the definition of a coroutine is a generator function, while an instance of it is a generator iterator, and thus a finally clause in a generator function becomes a finalizer in generator iterators instantiated from this function.","['conversely', 'case', 'finally', 'clause', 'coroutine', 'like', 'python', 'generator', 'coroutine', 'terminate', 'yield', 'ordinary', 'execution', 'finally', 'clause', 'execute', 'interpret', 'instance', 'coroutine', 'object', 'finally', 'clause', 'consider', 'finalizer', 'object', 'execute', 'instance', 'garbage', 'collect', 'python', 'terminology', 'definition', 'coroutine', 'generator', 'function', 'instance', 'generator', 'iterator', 'finally', 'clause', 'generator', 'function', 'finalizer', 'generator', 'iterator', 'instantiate', 'function']"
1575,"The notion of finalization as a separate step in object destruction dates to Montgomery 1994,13 by analogy with the earlier distinction of initialization in object construction in Martin & Odell 1992.14 Literature prior to this point used ""destruction"" for this process, not distinguishing finalization and deallocation, and programming languages dating to this period, like C++ and Perl, use the term ""destruction"". The terms ""finalize"" and ""finalization"" are also used in the influential book Design Patterns 1994.a15 The introduction of Java in 1995 contained finalize methods, which popularized the term and associated it with garbage collection, and languages from this point generally make this distinction and use the term ""finalization"", particularly in the context of garbage collection.","['notion', 'finalization', 'separate', 'step', 'object', 'destruction', 'date', 'montgomery', '1994', 'analogy', 'early', 'distinction', 'initialization', 'object', 'construction', 'martin', 'odell', '1992', 'literature', 'prior', 'point', 'destruction', 'process', 'distinguish', 'finalization', 'deallocation', 'programming', 'language', 'date', 'period', 'like', 'c++', 'perl', 'use', 'term', 'destruction', 'term', 'finalize', 'finalization', 'influential', 'book', 'design', 'patterns', '1994.a15', 'introduction', 'java', '1995', 'contain', 'finalize', 'method', 'popularize', 'term', 'associate', 'garbage', 'collection', 'language', 'point', 'generally', 'distinction', 'use', 'term', 'finalization', 'particularly', 'context', 'garbage', 'collection']"
1576,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1577,"In computer science, a programming language is said to have first-class functions if it treats functions as first-class citizens. This means the language supports passing functions as arguments to other functions, returning them as the values from other functions, and assigning them to variables or storing them in data structures.1 Some programming language theorists require support for anonymous functions function literals as well.2 In languages with first-class functions, the names of functions do not have any special status; they are treated like ordinary variables with a function type.3 The term was coined by Christopher Strachey in the context of ""functions as first-class citizens"" in the mid-1960s.4","['computer', 'science', 'programming', 'language', 'say', 'class', 'function', 'treat', 'function', 'class', 'citizen', 'mean', 'language', 'support', 'pass', 'function', 'argument', 'function', 'return', 'value', 'function', 'assign', 'variable', 'store', 'datum', 'structures', 'programming', 'language', 'theorist', 'require', 'support', 'anonymous', 'function', 'function', 'literal', 'well', 'language', 'class', 'function', 'name', 'function', 'special', 'status', 'treat', 'like', 'ordinary', 'variable', 'function', 'type', 'term', 'coin', 'christopher', 'strachey', 'context', 'function', 'class', 'citizen', 'mid-1960s']"
1578,"First-class functions are a necessity for the functional programming style, in which the use of higher-order functions is a standard practice. A simple example of a higher-ordered function is the map function, which takes, as its arguments, a function and a list, and returns the list formed by applying the function to each member of the list. For a language to support map, it must support passing a function as an argument.","['class', 'function', 'necessity', 'functional', 'programming', 'style', 'use', 'high', 'order', 'function', 'standard', 'practice', 'simple', 'example', 'higher', 'order', 'function', 'map', 'function', 'take', 'argument', 'function', 'list', 'return', 'list', 'form', 'apply', 'function', 'member', 'list', 'language', 'support', 'map', 'support', 'pass', 'function', 'argument']"
1579,"There are certain implementation difficulties in passing functions as arguments or returning them as results, especially in the presence of non-local variables introduced in nested and anonymous functions. Historically, these were termed the funarg problems, the name coming from ""function argument"".5 In early imperative languages these problems were avoided by either not supporting functions as result types e.g. ALGOL 60, Pascal or omitting nested functions and thus non-local variables e.g. C. The early functional language Lisp took the approach of dynamic scoping, where non-local variables refer to the closest definition of that variable at the point where the function is executed, instead of where it was defined. Proper support for lexically scoped first-class functions was introduced in Scheme and requires handling references to functions as closures instead of bare function pointers,4 which in turn makes garbage collection a necessity.","['certain', 'implementation', 'difficulty', 'pass', 'function', 'argument', 'return', 'result', 'especially', 'presence', 'non', 'local', 'variable', 'introduce', 'nested', 'anonymous', 'function', 'historically', 'term', 'funarg', 'problem', 'come', 'function', 'argument', 'early', 'imperative', 'language', 'problem', 'avoid', 'support', 'function', 'result', 'type', 'e.g.', 'algol', 'pascal', 'omit', 'nest', 'function', 'non', 'local', 'variable', 'e.g.', 'early', 'functional', 'language', 'lisp', 'take', 'approach', 'dynamic', 'scoping', 'non', 'local', 'variable', 'refer', 'close', 'definition', 'variable', 'point', 'function', 'execute', 'instead', 'define', 'proper', 'support', 'lexically', 'scope', 'class', 'function', 'introduce', 'scheme', 'require', 'handle', 'reference', 'function', 'closure', 'instead', 'bare', 'function', 'pointers', 'turn', 'make', 'garbage', 'collection', 'necessity']"
1580,"In this section, we compare how particular programming idioms are handled in a functional language with first-class functions Haskell compared to an imperative language where functions are second-class citizens C.","['section', 'compare', 'particular', 'programming', 'idiom', 'handle', 'functional', 'language', 'class', 'function', 'haskell', 'compare', 'imperative', 'language', 'function', 'second', 'class', 'citizen']"
1581,"In languages where functions are first-class citizens, functions can be passed as arguments to other functions in the same way as other values a function taking another function as argument is called a higher-order function. In the language Haskell:","['language', 'function', 'class', 'citizen', 'function', 'pass', 'argument', 'function', 'way', 'value', 'function', 'take', 'function', 'argument', 'call', 'high', 'order', 'function', 'language', 'haskell']"
1582,Languages where functions are not first-class often still allow one to write higher-order functions through the use of features such as function pointers or delegates. In the language C:,"['language', 'function', 'class', 'allow', 'write', 'high', 'order', 'function', 'use', 'feature', 'function', 'pointer', 'delegate', 'language']"
1583,"There are a number of differences between the two approaches that are not directly related to the support of first-class functions. The Haskell sample operates on lists, while the C sample operates on arrays. Both are the most natural compound data structures in the respective languages and making the C sample operate on linked lists would have made it unnecessarily complex. This also accounts for the fact that the C function needs an additional parameter giving the size of the array. The C function updates the array in-place, returning no value, whereas in Haskell data structures are persistent a new list is returned while the old is left intact. The Haskell sample uses recursion to traverse the list, while the C sample uses iteration. Again, this is the most natural way to express this function in both languages, but the Haskell sample could easily have been expressed in terms of a fold and the C sample in terms of recursion. Finally, the Haskell function has a polymorphic type, as this is not supported by C we have fixed all type variables to the type constant int.","['number', 'difference', 'approach', 'directly', 'relate', 'support', 'class', 'function', 'haskell', 'sample', 'operate', 'list', 'sample', 'operate', 'array', 'natural', 'compound', 'datum', 'structure', 'respective', 'language', 'make', 'sample', 'operate', 'link', 'list', 'unnecessarily', 'complex', 'account', 'fact', 'function', 'need', 'additional', 'parameter', 'give', 'size', 'array', 'function', 'update', 'array', 'place', 'return', 'value', 'haskell', 'datum', 'structure', 'persistent', 'new', 'list', 'return', 'old', 'leave', 'intact', 'haskell', 'sample', 'use', 'recursion', 'traverse', 'list', 'sample', 'use', 'iteration', 'natural', 'way', 'express', 'function', 'language', 'haskell', 'sample', 'easily', 'express', 'term', 'fold', 'sample', 'term', 'recursion', 'finally', 'haskell', 'function', 'polymorphic', 'type', 'support', 'fix', 'type', 'variable', 'type', 'constant', 'int']"
1584,"In languages supporting anonymous functions, we can pass such a function as an argument to a higher-order function:","['language', 'support', 'anonymous', 'function', 'pass', 'function', 'argument', 'high', 'order', 'function']"
1585,"In a language which does not support anonymous functions, we have to bind it to a name instead:","['language', 'support', 'anonymous', 'function', 'bind', 'instead']"
1586,"Once we have anonymous or nested functions, it becomes natural for them to refer to variables outside of their body called non-local variables:","['anonymous', 'nested', 'function', 'natural', 'refer', 'variable', 'outside', 'body', 'call', 'non', 'local', 'variable']"
1587,"If functions are represented with bare function pointers, we can not know anymore how the value that is outside of the function's body should be passed to it, and because of that a closure needs to be built manually. Therefore we can not speak of ""first-class"" functions here.","['function', 'represent', 'bare', 'function', 'pointer', 'know', 'anymore', 'value', 'outside', 'function', 'body', 'pass', 'closure', 'need', 'build', 'manually', 'speak', 'class', 'function']"
1588,"Also note that the map is now specialized to functions referring to two ints outside of their environment. This can be set up more generally, but requires more boilerplate code. If f would have been a nested function we would still have run into the same problem and this is the reason they are not supported in C.6","['note', 'map', 'specialize', 'function', 'refer', 'int', 'outside', 'environment', 'set', 'generally', 'require', 'boilerplate', 'code', 'nested', 'function', 'run', 'problem', 'reason', 'support', 'c']"
1589,"When returning a function, we are in fact returning its closure. In the C example any local variables captured by the closure will go out of scope once we return from the function that builds the closure. Forcing the closure at a later point will result in undefined behaviour, possibly corrupting the stack. This is known as the upwards funarg problem.","['return', 'function', 'fact', 'return', 'closure', 'example', 'local', 'variable', 'capture', 'closure', 'scope', 'return', 'function', 'build', 'closure', 'force', 'closure', 'later', 'point', 'result', 'undefined', 'behaviour', 'possibly', 'corrupt', 'stack', 'know', 'upwards', 'funarg', 'problem']"
1590,Assigning functions to variables and storing them inside global datastructures potentially suffers from the same difficulties as returning functions.,"['assign', 'function', 'variable', 'store', 'inside', 'global', 'datastructure', 'potentially', 'suffer', 'difficulty', 'return', 'function']"
1591,"As one can test most literals and values for equality, it is natural to ask whether a programming language can support testing functions for equality. On further inspection, this question appears more difficult and one has to distinguish between several types of function equality:7","['test', 'literal', 'value', 'equality', 'natural', 'ask', 'programming', 'language', 'support', 'testing', 'function', 'equality', 'inspection', 'question', 'appear', 'difficult', 'distinguish', 'type', 'function', 'equality']"
1592,"In type theory, the type of functions accepting values of type A and returning values of type B may be written as A → B or BA. In the Curry–Howard correspondence, function types are related to logical implication; lambda abstraction corresponds to discharging hypothetical assumptions and function application corresponds to the modus ponens inference rule. Besides the usual case of programming functions, type theory also uses first-class functions to model associative arrays and similar data structures.","['type', 'theory', 'type', 'function', 'accept', 'value', 'type', 'return', 'value', 'type', 'write', 'curry', 'howard', 'correspondence', 'function', 'type', 'relate', 'logical', 'implication', 'lambda', 'abstraction', 'correspond', 'discharge', 'hypothetical', 'assumption', 'function', 'application', 'correspond', 'modus', 'ponens', 'inference', 'rule', 'usual', 'case', 'programming', 'function', 'type', 'theory', 'use', 'class', 'function', 'model', 'associative', 'array', 'similar', 'datum', 'structure']"
1593,"In category-theoretical accounts of programming, the availability of first-class functions corresponds to the closed category assumption. For instance, the simply typed lambda calculus corresponds to the internal language of Cartesian closed categories.","['category', 'theoretical', 'account', 'programming', 'availability', 'class', 'function', 'correspond', 'closed', 'category', 'assumption', 'instance', 'simply', 'type', 'lambda', 'calculus', 'correspond', 'internal', 'language', 'cartesian', 'closed', 'category']"
1594,"Functional programming languages, such as Erlang, Scheme, ML, Haskell, F#, and Scala, all have first-class functions. When Lisp, one of the earliest functional languages, was designed, not all aspects of first-class functions were then properly understood, resulting in functions being dynamically scoped. The later Scheme and Common Lisp dialects do have lexically scoped first-class functions.","['functional', 'programming', 'language', 'erlang', 'scheme', 'haskell', 'scala', 'class', 'function', 'lisp', 'early', 'functional', 'language', 'design', 'aspect', 'class', 'function', 'properly', 'understand', 'result', 'function', 'dynamically', 'scope', 'later', 'scheme', 'common', 'lisp', 'dialect', 'lexically', 'scope', 'class', 'function']"
1595,"Many scripting languages, including Perl, Python, PHP, Lua, Tcl/Tk, JavaScript and Io, have first-class functions.","['scripting', 'language', 'include', 'perl', 'python', 'php', 'lua', 'tcl', 'javascript', 'class', 'function']"
1596,"For imperative languages, a distinction has to be made between Algol and its descendants such as Pascal, the traditional C family, and the modern garbage-collected variants. The Algol family has allowed nested functions and higher-order taking function as arguments, but not higher-order functions that return functions as results except Algol 68, which allows this. The reason for this was that it was not known how to deal with non-local variables if a nested-function was returned as a result and Algol 68 produces runtime errors in such cases.","['imperative', 'language', 'distinction', 'algol', 'descendant', 'pascal', 'traditional', 'family', 'modern', 'garbage', 'collect', 'variant', 'algol', 'family', 'allow', 'nested', 'function', 'high', 'order', 'take', 'function', 'argument', 'high', 'order', 'function', 'return', 'function', 'result', 'algol', 'allow', 'reason', 'know', 'deal', 'non', 'local', 'variable', 'nest', 'function', 'return', 'result', 'algol', 'produce', 'runtime', 'error', 'case']"
1597,"The C family allowed both passing functions as arguments and returning them as results, but avoided any problems by not supporting nested functions. The gcc compiler allows them as an extension. As the usefulness of returning functions primarily lies in the ability to return nested functions that have captured non-local variables, instead of top-level functions, these languages are generally not considered to have first-class functions.","['family', 'allow', 'pass', 'function', 'argument', 'return', 'result', 'avoid', 'problem', 'support', 'nested', 'function', 'gcc', 'compiler', 'allow', 'extension', 'usefulness', 'return', 'function', 'primarily', 'lie', 'ability', 'return', 'nested', 'function', 'capture', 'non', 'local', 'variable', 'instead', 'level', 'function', 'language', 'generally', 'consider', 'class', 'function']"
1598,"Modern imperative languages often support garbage-collection making the implementation of first-class functions feasible. First-class functions have often only been supported in later revisions of the language, including C# 2.0 and Apple's Blocks extension to C, C++, and Objective-C. C++11 has added support for anonymous functions and closures to the language, but because of the non-garbage collected nature of the language, special care has to be taken for non-local variables in functions to be returned as results see below.","['modern', 'imperative', 'language', 'support', 'garbage', 'collection', 'make', 'implementation', 'class', 'function', 'feasible', 'class', 'function', 'support', 'later', 'revision', 'language', 'include', '2', 'apple', 'blocks', 'extension', 'c++', 'objective', 'c++11', 'add', 'support', 'anonymous', 'function', 'closure', 'language', 'non', 'garbage', 'collect', 'nature', 'language', 'special', 'care', 'take', 'non', 'local', 'variable', 'function', 'return', 'result']"
1599,Explicit partial application possible with std::bind.,"['explicit', 'partial', 'application', 'possible', 'std::bind']"
1600,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1601,"The fragile base class problem is a fundamental architectural problem of object-oriented programming systems where base classes superclasses are considered ""fragile"" because seemingly safe modifications to a base class, when inherited by the derived classes, may cause the derived classes to malfunction. The programmer cannot determine whether a base class change is safe simply by examining in isolation the methods of the base class.","['fragile', 'base', 'class', 'problem', 'fundamental', 'architectural', 'problem', 'object', 'orient', 'programming', 'system', 'base', 'class', 'superclass', 'consider', 'fragile', 'seemingly', 'safe', 'modification', 'base', 'class', 'inherit', 'derive', 'class', 'cause', 'derive', 'class', 'malfunction', 'programmer', 'determine', 'base', 'class', 'change', 'safe', 'simply', 'examine', 'isolation', 'method', 'base', 'class']"
1602,One possible solution is to make instance variables private to their defining class and force subclasses to use accessors to modify superclass states. A language could also make it so that subclasses can control which inherited methods are exposed publicly. These changes prevent subclasses from relying on implementation details of superclasses and allow subclasses to expose only those superclass methods that are applicable to themselves.,"['possible', 'solution', 'instance', 'variable', 'private', 'define', 'class', 'force', 'subclass', 'use', 'accessor', 'modify', 'superclass', 'state', 'language', 'subclass', 'control', 'inherit', 'method', 'expose', 'publicly', 'change', 'prevent', 'subclass', 'rely', 'implementation', 'detail', 'superclass', 'allow', 'subclass', 'expose', 'superclass', 'method', 'applicable']"
1603,Another alternative solution could be to have an interface instead of superclass.,"['alternative', 'solution', 'interface', 'instead', 'superclass']"
1604,"The fragile base class problem has been blamed on open recursion dynamic dispatch of methods on this, with the suggestion that invoking methods on this default to closed recursion static dispatch, early binding rather than open recursion dynamic dispatch, late binding, only using open recursion when it is specifically requested; external calls not using this would be dynamically dispatched as usual.12","['fragile', 'base', 'class', 'problem', 'blame', 'open', 'recursion', 'dynamic', 'dispatch', 'method', 'suggestion', 'invoke', 'method', 'default', 'closed', 'recursion', 'static', 'dispatch', 'early', 'bind', 'open', 'recursion', 'dynamic', 'dispatch', 'late', 'bind', 'open', 'recursion', 'specifically', 'request', 'external', 'call', 'dynamically', 'dispatch', 'usual']"
1605,The following trivial example is written in the Java programming language and shows how a seemingly safe modification of a base class can cause an inheriting subclass to malfunction by entering an infinite recursion which will result in a stack overflow.,"['follow', 'trivial', 'example', 'write', 'java', 'programming', 'language', 'show', 'seemingly', 'safe', 'modification', 'base', 'class', 'cause', 'inheriting', 'subclass', 'malfunction', 'enter', 'infinite', 'recursion', 'result', 'stack', 'overflow']"
1606,Calling the dynamically bound method inc2 on an instance of Sub will correctly increase the field counter by one. If however the code of the superclass is changed in the following way:,"['call', 'dynamically', 'bind', 'method', 'inc2', 'instance', 'sub', 'correctly', 'increase', 'field', 'counter', 'code', 'superclass', 'change', 'following', 'way']"
1607,"a call to the dynamically bound method inc2 on an instance of Sub will cause an infinite recursion between itself and the method inc1 of the super-class and eventually cause a stack overflow. This problem could have been avoided, by declaring the methods in the superclass as final, which would make it impossible for a sub-class to override them. However, this is not always desirable or possible. Therefore, it is good practice for super-classes to avoid changing calls to dynamically-bound methods.","['dynamically', 'bind', 'method', 'inc2', 'instance', 'sub', 'cause', 'infinite', 'recursion', 'method', 'inc1', 'super', 'class', 'eventually', 'cause', 'stack', 'overflow', 'problem', 'avoid', 'declare', 'method', 'superclass', 'final', 'impossible', 'sub', 'class', 'override', 'desirable', 'possible', 'good', 'practice', 'super', 'class', 'avoid', 'change', 'call', 'dynamically', 'bind', 'method']"
1608,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1609,"In computer science, function composition is an act or mechanism to combine simple functions to build more complicated ones. Like the usual composition of functions in mathematics, the result of each function is passed as the argument of the next, and the result of the last one is the result of the whole.","['computer', 'science', 'function', 'composition', 'act', 'mechanism', 'combine', 'simple', 'function', 'build', 'complicated', 'one', 'like', 'usual', 'composition', 'function', 'mathematic', 'result', 'function', 'pass', 'argument', 'result', 'result']"
1610,"Programmers frequently apply functions to results of other functions, and almost all programming languages allow it. In some cases, the composition of functions is interesting as a function in its own right, to be used later. Such a function can always be defined but languages with first-class functions make it easier.","['programmer', 'frequently', 'apply', 'function', 'result', 'function', 'programming', 'language', 'allow', 'case', 'composition', 'function', 'interesting', 'function', 'right', 'later', 'function', 'define', 'language', 'class', 'function', 'easy']"
1611,"The ability to easily compose functions encourages factoring breaking apart functions for maintainability and code reuse. More generally, big systems might be built by composing whole programs.","['ability', 'easily', 'compose', 'function', 'encourage', 'factor', 'break', 'apart', 'function', 'maintainability', 'code', 'reuse', 'generally', 'big', 'system', 'build', 'compose', 'program']"
1612,"Narrowly speaking, function composition applies to functions that operate on a finite amount of data, each step sequentially processing it before handing it to the next. Functions that operate on potentially infinite data a stream or other codata are known as filters, and are instead connected in a pipeline, which is analogous to function composition and can execute concurrently.","['narrowly', 'speak', 'function', 'composition', 'apply', 'function', 'operate', 'finite', 'datum', 'step', 'sequentially', 'process', 'hand', 'function', 'operate', 'potentially', 'infinite', 'datum', 'stream', 'codata', 'know', 'filter', 'instead', 'connect', 'pipeline', 'analogous', 'function', 'composition', 'execute', 'concurrently']"
1613,"For example, suppose we have two functions f and g, as in z = fy and y = gx. Composing them means we first compute y = gx, and then use y to compute z = fy. Here is the example in the C language:","['example', 'suppose', 'function', 'compose', 'mean', 'compute', 'use', 'compute', 'example', 'language']"
1614,The steps can be combined if we don't give a name to the intermediate result:,"['step', 'combine', 'intermediate', 'result']"
1615,"Despite differences in length, these two implementations compute the same result. The second implementation requires only one line of code and is colloquially referred to as a ""highly composed"" form. Readability and hence maintainability is one advantage of highly composed forms, since they require fewer lines of code, minimizing a program's ""surface area"".1 DeMarco and Lister empirically verify an inverse relationship between surface area and maintainability.2 On the other hand, it may be possible to overuse highly composed forms. A nesting of too many functions may have the opposite effect, making the code less maintainable.","['despite', 'difference', 'length', 'implementation', 'compute', 'result', 'second', 'implementation', 'require', 'line', 'code', 'colloquially', 'refer', 'highly', 'composed', 'form', 'readability', 'maintainability', 'advantage', 'highly', 'composed', 'form', 'require', 'few', 'line', 'code', 'minimize', 'program', 'surface', 'area', 'demarco', 'lister', 'empirically', 'verify', 'inverse', 'relationship', 'surface', 'area', 'maintainability', 'hand', 'possible', 'overuse', 'highly', 'compose', 'form', 'nesting', 'function', 'opposite', 'effect', 'make', 'code', 'maintainable']"
1616,"In a stack-based language, functional composition is even more natural: it is performed by concatenation, and is usually the primary method of program design. The above example in Forth:","['stack', 'base', 'language', 'functional', 'composition', 'natural', 'perform', 'concatenation', 'usually', 'primary', 'method', 'program', 'design', 'example', 'forth']"
1617,"Which will take whatever was on the stack before, apply g, then f, and leave the result on the stack. See postfix composition notation for the corresponding mathematical notation.","['stack', 'apply', 'leave', 'result', 'stack', 'postfix', 'composition', 'notation', 'corresponding', 'mathematical', 'notation']"
1618,"Now suppose that the combination of calling f on the result of g is frequently useful, and which we want to name foo to be used as a function in its own right.","['suppose', 'combination', 'call', 'result', 'frequently', 'useful', 'want', 'foo', 'function', 'right']"
1619,"In most languages, we can define a new function implemented by composition. Example in C:","['language', 'define', 'new', 'function', 'implement', 'composition', 'example']"
1620,the long form with intermediates would work as well. Example in Forth:,"['long', 'form', 'intermediate', 'work', 'example', 'forth']"
1621,"In languages such as C, the only way to create a new function is to define it in the program source, which means that functions can't be composed at run time. An evaluation of an arbitrary composition of predefined functions, however, is possible:","['language', 'way', 'create', 'new', 'function', 'define', 'program', 'source', 'mean', 'function', 'compose', 'run', 'time', 'evaluation', 'arbitrary', 'composition', 'predefined', 'function', 'possible']"
1622,"In functional programming languages, function composition can be naturally expressed as a higher-order function or operator. In other programming languages you can write your own mechanisms to perform function composition.","['functional', 'programming', 'language', 'function', 'composition', 'naturally', 'express', 'high', 'order', 'function', 'operator', 'programming', 'language', 'write', 'mechanism', 'perform', 'function', 'composition']"
1623,"In Haskell, the example foo = f ∘ g given above becomes:","['haskell', 'example', 'foo', 'give']"
1624,using the built-in composition operator . which can be read as f after g or g composed with f.,"['build', 'composition', 'operator', 'read', 'compose']"
1625,The composition operator ∘ itself can be defined in Haskell using a lambda expression:,"['composition', 'operator', 'define', 'haskell', 'lambda', 'expression']"
1626,"The first line describes the type of . - it takes a pair of functions, f, g and returns a function the lambda expression on the second line. Note that Haskell doesn't require specification of the exact input and output types of f and g; the a, b, c, and x are placeholders; only the relation between f, g matters f must accept what g returns. This makes . a polymorphic operator.","['line', 'describe', 'type', 'take', 'pair', 'function', 'return', 'function', 'lambda', 'expression', 'second', 'line', 'note', 'haskell', 'require', 'specification', 'exact', 'input', 'output', 'type', 'placeholder', 'relation', 'matter', 'accept', 'return', 'make', 'polymorphic', 'operator']"
1627,"Variants of Lisp, especially Scheme, the interchangeability of code and data together with the treatment of functions lend themselves extremely well for a recursive definition of a variadic compositional operator.","['variants', 'lisp', 'especially', 'scheme', 'interchangeability', 'code', 'datum', 'treatment', 'function', 'lend', 'extremely', 'recursive', 'definition', 'variadic', 'compositional', 'operator']"
1628,Many dialects of APL feature built in function composition using the symbol ∘. This higher-order function extends function composition to dyadic application of the left side function such that A f∘g B is A f g B.,"['dialect', 'apl', 'feature', 'build', 'function', 'composition', 'symbol', 'high', 'order', 'function', 'extend', 'function', 'composition', 'dyadic', 'application', 'left', 'function', 'f∘g']"
1629,"Additionally, you can define function composition:","['additionally', 'define', 'function', 'composition']"
1630,"In dialect that does not support inline definition using braces, the traditional definition is available:","['dialect', 'support', 'inline', 'definition', 'brace', 'traditional', 'definition', 'available']"
1631,"Raku like Haskell has a built in function composition operator, the main difference is it is spelled as ∘ or o.","['raku', 'like', 'haskell', 'build', 'function', 'composition', 'operator', 'main', 'difference', 'spell']"
1632,Also like Haskell you could define the operator yourself. In fact the following is the Raku code used to define it in the Rakudo implementation.,"['like', 'haskell', 'define', 'operator', 'fact', 'following', 'raku', 'code', 'define', 'rakudo', 'implementation']"
1633,"In Python, a way to define the composition for any group of functions, is using reduce function use functools.reduce in Python 3:","['python', 'way', 'define', 'composition', 'group', 'function', 'reduce', 'function', 'use', 'functools.reduce', 'python']"
1634,"In JavaScript we can define it as a function which takes two functions f and g, and produces a function:","['javascript', 'define', 'function', 'take', 'function', 'produce', 'function']"
1635,"In C# we can define it as a Func which takes two Funcs f and g, and produces a Func:","['define', 'func', 'take', 'func', 'produce', 'func']"
1636,Languages like Ruby let you construct a binary operator yourself:,"['language', 'like', 'ruby', 'let', 'construct', 'binary', 'operator']"
1637,"However, a native function composition operator was introduced in Ruby 2.6:3","['native', 'function', 'composition', 'operator', 'introduce', 'ruby', '2']"
1638,"Notions of composition, including the principle of compositionality and composability, are so ubiquitous that numerous strands of research have separately evolved. The following is a sampling of the kind of research in which the notion of composition is central.","['notion', 'composition', 'include', 'principle', 'compositionality', 'composability', 'ubiquitous', 'numerous', 'strand', 'research', 'separately', 'evolve', 'follow', 'sampling', 'kind', 'research', 'notion', 'composition', 'central']"
1639,"Whole programs or systems can be treated as functions, which can be readily composed if their inputs and outputs are well-defined.4 Pipelines allowing easy composition of filters were so successful that they became a design pattern of operating systems.","['program', 'system', 'treat', 'function', 'readily', 'compose', 'input', 'output', 'defined', 'pipelines', 'allow', 'easy', 'composition', 'filter', 'successful', 'design', 'pattern', 'operating', 'system']"
1640,"Imperative procedures with side effects violate referential transparency and therefore are not cleanly composable. However if one considers the ""state of the world"" before and after running the code as its input and output, one gets a clean function. Composition of such functions corresponds to running the procedures one after the other. The monad formalism uses this idea to incorporate side effects and input/output I/O into functional languages.","['imperative', 'procedure', 'effect', 'violate', 'referential', 'transparency', 'cleanly', 'composable', 'consider', 'state', 'world', 'run', 'code', 'input', 'output', 'get', 'clean', 'function', 'composition', 'function', 'correspond', 'run', 'procedure', 'monad', 'formalism', 'use', 'idea', 'incorporate', 'effect', 'input', 'output', 'functional', 'language']"
1641,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1642,"Generic programming is a style of computer programming in which algorithms are written in terms of types to-be-specified-later that are then instantiated when needed for specific types provided as parameters. This approach, pioneered by the ML programming language in 1973,12 permits writing common functions or types that differ only in the set of types on which they operate when used, thus reducing duplication. Such software entities are known as generics in Ada, C#, Delphi, Eiffel, F#, Java, Nim, Python, Go, Rust, Swift, TypeScript and Visual Basic .NET. They are known as parametric polymorphism in ML, Scala, Julia, and Haskell the Haskell community also uses the term ""generic"" for a related but somewhat different concept; templates in C++ and D; and parameterized types in the influential 1994 book Design Patterns.3","['generic', 'programming', 'style', 'computer', 'programming', 'algorithm', 'write', 'term', 'type', 'specify', 'later', 'instantiate', 'need', 'specific', 'type', 'provide', 'parameter', 'approach', 'pioneer', 'programming', 'language', '1973', 'permit', 'write', 'common', 'function', 'type', 'differ', 'set', 'type', 'operate', 'reduce', 'duplication', 'software', 'entity', 'know', 'generic', 'ada', 'delphi', 'eiffel', 'java', 'nim', 'python', 'rust', 'swift', 'typescript', 'visual', 'basic', '.net', 'know', 'parametric', 'polymorphism', 'scala', 'julia', 'haskell', 'haskell', 'community', 'use', 'term', 'generic', 'related', 'somewhat', 'different', 'concept', 'template', 'c++', 'parameterized', 'type', 'influential', '1994', 'book', 'design', 'patterns']"
1643,"The term ""generic programming"" was originally coined by David Musser and Alexander Stepanov4 in a more specific sense than the above, to describe a programming paradigm whereby fundamental requirements on types are abstracted from across concrete examples of algorithms and data structures and formalized as concepts, with generic functions implemented in terms of these concepts, typically using language genericity mechanisms as described above.","['term', 'generic', 'programming', 'originally', 'coin', 'david', 'musser', 'alexander', 'stepanov4', 'specific', 'sense', 'describe', 'programming', 'paradigm', 'fundamental', 'requirement', 'type', 'abstract', 'concrete', 'example', 'algorithm', 'datum', 'structure', 'formalize', 'concept', 'generic', 'function', 'implement', 'term', 'concept', 'typically', 'language', 'genericity', 'mechanism', 'describe']"
1644,"Generic programming is defined in Musser & Stepanov 1989 as follows,","['generic', 'programming', 'define', 'musser', 'stepanov', '1989', 'follow']"
1645,"Generic programming centers around the idea of abstracting from concrete, efficient algorithms to obtain generic algorithms that can be combined with different data representations to produce a wide variety of useful software.","['generic', 'programming', 'center', 'idea', 'abstract', 'concrete', 'efficient', 'algorithm', 'obtain', 'generic', 'algorithm', 'combine', 'different', 'datum', 'representation', 'produce', 'wide', 'variety', 'useful', 'software']"
1646,"The ""generic programming"" paradigm is an approach to software decomposition whereby fundamental requirements on types are abstracted from across concrete examples of algorithms and data structures and formalized as concepts, analogously to the abstraction of algebraic theories in abstract algebra.6 Early examples of this programming approach were implemented in Scheme and Ada,7 although the best known example is the Standard Template Library STL,89 which developed a theory of iterators that is used to decouple sequence data structures and the algorithms operating on them.","['generic', 'programming', 'paradigm', 'approach', 'software', 'decomposition', 'fundamental', 'requirement', 'type', 'abstract', 'concrete', 'example', 'algorithm', 'datum', 'structure', 'formalize', 'concept', 'analogously', 'abstraction', 'algebraic', 'theory', 'abstract', 'algebra', 'early', 'example', 'programming', 'approach', 'implement', 'scheme', 'ada', 'well', 'know', 'example', 'standard', 'template', 'library', 'stl', 'develop', 'theory', 'iterator', 'decouple', 'sequence', 'data', 'structure', 'algorithm', 'operate']"
1647,"For example, given N sequence data structures, e.g. singly linked list, vector etc., and M algorithms to operate on them, e.g. find, sort etc., a direct approach would implement each algorithm specifically for each data structure, giving N × M combinations to implement. However, in the generic programming approach, each data structure returns a model of an iterator concept a simple value type that can be dereferenced to retrieve the current value, or changed to point to another value in the sequence and each algorithm is instead written generically with arguments of such iterators, e.g. a pair of iterators pointing to the beginning and end of the subsequence or range to process. Thus, only N + M data structure-algorithm combinations need be implemented. Several iterator concepts are specified in the STL, each a refinement of more restrictive concepts e.g. forward iterators only provide movement to the next value in a sequence e.g. suitable for a singly linked list or a stream of input data, whereas a random-access iterator also provides direct constant-time access to any element of the sequence e.g. suitable for a vector. An important point is that a data structure will return a model of the most general concept that can be implemented efficiently—computational complexity requirements are explicitly part of the concept definition. This limits the data structures a given algorithm can be applied to and such complexity requirements are a major determinant of data structure choice. Generic programming similarly has been applied in other domains, e.g. graph algorithms.10","['example', 'give', 'sequence', 'datum', 'structure', 'e.g.', 'singly', 'link', 'list', 'vector', 'etc', 'algorithm', 'operate', 'e.g.', 'find', 'sort', 'etc', 'direct', 'approach', 'implement', 'algorithm', 'specifically', 'datum', 'structure', 'give', 'combination', 'implement', 'generic', 'programming', 'approach', 'data', 'structure', 'return', 'model', 'iterator', 'concept', 'simple', 'value', 'type', 'dereference', 'retrieve', 'current', 'value', 'change', 'point', 'value', 'sequence', 'algorithm', 'instead', 'write', 'generically', 'argument', 'iterator', 'e.g.', 'pair', 'iterator', 'point', 'beginning', 'end', 'subsequence', 'range', 'process', 'datum', 'structure', 'algorithm', 'combination', 'need', 'implement', 'iterator', 'concept', 'specify', 'stl', 'refinement', 'restrictive', 'concept', 'e.g.', 'forward', 'iterator', 'provide', 'movement', 'value', 'sequence', 'e.g.', 'suitable', 'singly', 'link', 'list', 'stream', 'input', 'datum', 'random', 'access', 'iterator', 'provide', 'direct', 'constant', 'time', 'access', 'element', 'sequence', 'e.g.', 'suitable', 'vector', 'important', 'point', 'data', 'structure', 'return', 'model', 'general', 'concept', 'implement', 'efficiently', 'computational', 'complexity', 'requirement', 'explicitly', 'concept', 'definition', 'limit', 'datum', 'structure', 'give', 'algorithm', 'apply', 'complexity', 'requirement', 'major', 'determinant', 'data', 'structure', 'choice', 'generic', 'programming', 'similarly', 'apply', 'domain', 'e.g.', 'graph', 'algorithms']"
1648,"Note that although this approach often utilizes language features of compile-time genericity/templates, it is in fact independent of particular language-technical details. Generic programming pioneer Alexander Stepanov wrote,","['note', 'approach', 'utilize', 'language', 'feature', 'compile', 'time', 'genericity', 'template', 'fact', 'independent', 'particular', 'language', 'technical', 'detail', 'generic', 'programming', 'pioneer', 'alexander', 'stepanov', 'write']"
1649,"Generic programming is about abstracting and classifying algorithms and data structures. It gets its inspiration from Knuth and not from type theory. Its goal is the incremental construction of systematic catalogs of useful, efficient and abstract algorithms and data structures. Such an undertaking is still a dream.","['generic', 'programming', 'abstract', 'classify', 'algorithm', 'data', 'structure', 'get', 'inspiration', 'knuth', 'type', 'theory', 'goal', 'incremental', 'construction', 'systematic', 'catalog', 'useful', 'efficient', 'abstract', 'algorithm', 'datum', 'structure', 'undertaking', 'dream']"
1650,I believe that iterator theories are as central to Computer Science as theories of rings or Banach spaces are central to Mathematics.,"['believe', 'iterator', 'theory', 'central', 'computer', 'science', 'theory', 'ring', 'banach', 'space', 'central', 'mathematics']"
1651,"Following Stepanov, we can define generic programming without mentioning language features: Lift algorithms and data structures from concrete examples to their most general and abstract form.","['follow', 'stepanov', 'define', 'generic', 'programming', 'mention', 'language', 'feature', 'lift', 'algorithm', 'datum', 'structure', 'concrete', 'example', 'general', 'abstract', 'form']"
1652,"Other programming paradigms that have been described as generic programming include Datatype generic programming as described in ""Generic Programming – an Introduction"".14 The Scrap your boilerplate approach is a lightweight generic programming approach for Haskell.15","['programming', 'paradigms', 'describe', 'generic', 'programming', 'include', 'datatype', 'generic', 'programming', 'describe', 'generic', 'programming', 'introduction', 'scrap', 'boilerplate', 'approach', 'lightweight', 'generic', 'programming', 'approach', 'haskell']"
1653,"In this article we distinguish the high-level programming paradigms of generic programming, above, from the lower-level programming language genericity mechanisms used to implement them see Programming language support for genericity. For further discussion and comparison of generic programming paradigms, see.16","['article', 'distinguish', 'high', 'level', 'programming', 'paradigm', 'generic', 'programming', 'low', 'level', 'programming', 'language', 'genericity', 'mechanism', 'implement', 'programming', 'language', 'support', 'genericity', 'discussion', 'comparison', 'generic', 'programming', 'paradigms', 'see']"
1654,"Genericity facilities have existed in high-level languages since at least the 1970s in languages such as ML, CLU and Ada, and were subsequently adopted by many object-based and object-oriented languages, including BETA, C++, D, Eiffel, Java, and DEC's now defunct Trellis-Owl language.","['genericity', 'facility', 'exist', 'high', 'level', 'language', '1970', 'language', 'clu', 'ada', 'subsequently', 'adopt', 'object', 'base', 'object', 'orient', 'language', 'include', 'beta', 'c++', 'eiffel', 'java', 'dec', 'defunct', 'trellis', 'owl', 'language']"
1655,"Genericity is implemented and supported differently in various programming languages; the term ""generic"" has also been used differently in various programming contexts. For example, in Forth the compiler can execute code while compiling and one can create new compiler keywords and new implementations for those words on the fly. It has few words that expose the compiler behaviour and therefore naturally offers genericity capacities that, however, are not referred to as such in most Forth texts. Similarly, dynamically typed languages, especially interpreted ones, usually offer genericity by default as both passing values to functions and value assignment are type-indifferent and such behavior is often utilized for abstraction or code terseness, however this is not typically labeled genericity as it's a direct consequence of the dynamic typing system employed by the language.citation needed The term has been used in functional programming, specifically in Haskell-like languages, which use a structural type system where types are always parametric and the actual code on those types is generic. These usages still serve a similar purpose of code-saving and the rendering of an abstraction.","['genericity', 'implement', 'support', 'differently', 'programming', 'language', 'term', 'generic', 'differently', 'programming', 'context', 'example', 'forth', 'compiler', 'execute', 'code', 'compile', 'create', 'new', 'compiler', 'keyword', 'new', 'implementation', 'word', 'fly', 'word', 'expose', 'compiler', 'behaviour', 'naturally', 'offer', 'genericity', 'capacity', 'refer', 'forth', 'text', 'similarly', 'dynamically', 'type', 'language', 'especially', 'interpret', 'one', 'usually', 'offer', 'genericity', 'default', 'pass', 'value', 'function', 'value', 'assignment', 'type', 'indifferent', 'behavior', 'utilize', 'abstraction', 'code', 'terseness', 'typically', 'label', 'genericity', 'direct', 'consequence', 'dynamic', 'typing', 'system', 'employ', 'language.citation', 'need', 'term', 'functional', 'programming', 'specifically', 'haskell', 'like', 'language', 'use', 'structural', 'type', 'system', 'type', 'parametric', 'actual', 'code', 'type', 'generic', 'usage', 'serve', 'similar', 'purpose', 'code', 'saving', 'rendering', 'abstraction']"
1656,"Arrays and structs can be viewed as predefined generic types. Every usage of an array or struct type instantiates a new concrete type, or reuses a previous instantiated type. Array element types and struct element types are parameterized types, which are used to instantiate the corresponding generic type. All this is usually built-in in the compiler and the syntax differs from other generic constructs. Some extensible programming languages try to unify built-in and user defined generic types.","['array', 'struct', 'view', 'predefine', 'generic', 'type', 'usage', 'array', 'struct', 'type', 'instantiate', 'new', 'concrete', 'type', 'reuse', 'previous', 'instantiated', 'type', 'array', 'element', 'type', 'struct', 'element', 'type', 'parameterized', 'type', 'instantiate', 'corresponding', 'generic', 'type', 'usually', 'build', 'compiler', 'syntax', 'differ', 'generic', 'construct', 'extensible', 'programming', 'language', 'try', 'unify', 'build', 'user', 'define', 'generic', 'type']"
1657,"A broad survey of genericity mechanisms in programming languages follows. For a specific survey comparing suitability of mechanisms for generic programming, see.17","['broad', 'survey', 'genericity', 'mechanism', 'programming', 'language', 'follow', 'specific', 'survey', 'compare', 'suitability', 'mechanism', 'generic', 'programming', 'see']"
1658,"When creating container classes in statically typed languages, it is inconvenient to write specific implementations for each datatype contained, especially if the code for each datatype is virtually identical. For example, in C++, this duplication of code can be circumvented by defining a class template:","['create', 'container', 'class', 'statically', 'type', 'language', 'inconvenient', 'write', 'specific', 'implementation', 'datatype', 'contain', 'especially', 'code', 'datatype', 'virtually', 'identical', 'example', 'c++', 'duplication', 'code', 'circumvent', 'define', 'class', 'template']"
1659,"Above, T is a placeholder for whatever type is specified when the list is created. These ""containers-of-type-T"", commonly called templates, allow a class to be reused with different datatypes as long as certain contracts such as subtypes and signature are kept. This genericity mechanism should not be confused with inclusion polymorphism, which is the algorithmic usage of exchangeable sub-classes: for instance, a list of objects of type Moving_Object containing objects of type Animal and Car. Templates can also be used for type-independent functions as in the Swap example below:","['placeholder', 'type', 'specify', 'list', 'create', 'container', 'type', 'commonly', 'call', 'template', 'allow', 'class', 'reuse', 'different', 'datatype', 'long', 'certain', 'contract', 'subtype', 'signature', 'keep', 'genericity', 'mechanism', 'confuse', 'inclusion', 'polymorphism', 'algorithmic', 'usage', 'exchangeable', 'sub', 'class', 'instance', 'list', 'object', 'type', 'moving_object', 'contain', 'object', 'type', 'animal', 'car', 'template', 'type', 'independent', 'function', 'swap', 'example']"
1660,The C++ template construct used above is widely citedcitation needed as the genericity construct that popularized the notion among programmers and language designers and supports many generic programming idioms. The D programming language also offers fully generic-capable templates based on the C++ precedent but with a simplified syntax. The Java programming language has provided genericity facilities syntactically based on C++'s since the introduction of J2SE 5.0.,"['c++', 'template', 'construct', 'widely', 'citedcitation', 'need', 'genericity', 'construct', 'popularize', 'notion', 'programmer', 'language', 'designer', 'support', 'generic', 'programming', 'idiom', 'programming', 'language', 'offer', 'fully', 'generic', 'capable', 'template', 'base', 'c++', 'precedent', 'simplified', 'syntax', 'java', 'programming', 'language', 'provide', 'genericity', 'facility', 'syntactically', 'base', 'c++', 'introduction', 'j2se', '5']"
1661,"C# 2.0, Oxygene 1.5 also known as Chrome and Visual Basic .NET 2005 have constructs that take advantage of the support for generics present in the Microsoft .NET Framework since version 2.0.","['2', 'oxygene', '1', 'know', 'chrome', 'visual', 'basic', '.net', '2005', 'construct', 'advantage', 'support', 'generic', 'present', 'microsoft', '.net', 'framework', 'version', '2']"
1662,"Ada has had generics since it was first designed in 1977–1980. The standard library uses generics to provide many services. Ada 2005 adds a comprehensive generic container library to the standard library, which was inspired by C++'s standard template library.","['ada', 'generic', 'design', '1977–1980', 'standard', 'library', 'use', 'generic', 'provide', 'service', 'ada', '2005', 'add', 'comprehensive', 'generic', 'container', 'library', 'standard', 'library', 'inspire', 'c++', 'standard', 'template', 'library']"
1663,A generic unit is a package or a subprogram that takes one or more generic formal parameters.,"['generic', 'unit', 'package', 'subprogram', 'take', 'generic', 'formal', 'parameter']"
1664,"A generic formal parameter is a value, a variable, a constant, a type, a subprogram, or even an instance of another, designated, generic unit. For generic formal types, the syntax distinguishes between discrete, floating-point, fixed-point, access pointer types, etc. Some formal parameters can have default values.","['generic', 'formal', 'parameter', 'value', 'variable', 'constant', 'type', 'subprogram', 'instance', 'designate', 'generic', 'unit', 'generic', 'formal', 'type', 'syntax', 'distinguishe', 'discrete', 'float', 'point', 'fix', 'point', 'access', 'pointer', 'type', 'etc', 'formal', 'parameter', 'default', 'value']"
1665,"To instantiate a generic unit, the programmer passes actual parameters for each formal. The generic instance then behaves just like any other unit. It is possible to instantiate generic units at run-time, for example inside a loop.","['instantiate', 'generic', 'unit', 'programmer', 'pass', 'actual', 'parameter', 'formal', 'generic', 'instance', 'behave', 'like', 'unit', 'possible', 'instantiate', 'generic', 'unit', 'run', 'time', 'example', 'inside', 'loop']"
1666,The specification of a generic package:,"['specification', 'generic', 'package']"
1667,Using an instance of a generic package:,"['instance', 'generic', 'package']"
1668,"The language syntax allows precise specification of constraints on generic formal parameters. For example, it is possible to specify that a generic formal type will only accept a modular type as the actual. It is also possible to express constraints between generic formal parameters; for example:","['language', 'syntax', 'allow', 'precise', 'specification', 'constraint', 'generic', 'formal', 'parameter', 'example', 'possible', 'specify', 'generic', 'formal', 'type', 'accept', 'modular', 'type', 'actual', 'possible', 'express', 'constraint', 'generic', 'formal', 'parameter', 'example']"
1669,"In this example, Array_Type is constrained by both Index_Type and Element_Type. When instantiating the unit, the programmer must pass an actual array type that satisfies these constraints.","['example', 'array_type', 'constrain', 'index_type', 'element_type', 'instantiate', 'unit', 'programmer', 'pass', 'actual', 'array', 'type', 'satisfy', 'constraint']"
1670,"The disadvantage of this fine-grained control is a complicated syntax, but, because all generic formal parameters are completely defined in the specification, the compiler can instantiate generics without looking at the body of the generic.","['disadvantage', 'fine', 'grain', 'control', 'complicated', 'syntax', 'generic', 'formal', 'parameter', 'completely', 'define', 'specification', 'compiler', 'instantiate', 'generic', 'look', 'body', 'generic']"
1671,"Unlike C++, Ada does not allow specialised generic instances, and requires that all generics be instantiated explicitly. These rules have several consequences:","['unlike', 'c++', 'ada', 'allow', 'specialised', 'generic', 'instance', 'require', 'generic', 'instantiate', 'explicitly', 'rule', 'consequence']"
1672,"C++ uses templates to enable generic programming techniques. The C++ Standard Library includes the Standard Template Library or STL that provides a framework of templates for common data structures and algorithms. Templates in C++ may also be used for template metaprogramming, which is a way of pre-evaluating some of the code at compile-time rather than run-time. Using template specialization, C++ Templates are considered Turing complete.","['c++', 'use', 'template', 'enable', 'generic', 'programming', 'technique', 'c++', 'standard', 'library', 'include', 'standard', 'template', 'library', 'stl', 'provide', 'framework', 'template', 'common', 'datum', 'structure', 'algorithm', 'template', 'c++', 'template', 'metaprogramming', 'way', 'pre', 'evaluate', 'code', 'compile', 'time', 'run', 'time', 'template', 'specialization', 'c++', 'templates', 'consider', 'ture', 'complete']"
1673,"There are many kinds of templates, the most common being function templates and class templates. A function template is a pattern for creating ordinary functions based upon the parameterizing types supplied when instantiated. For example, the C++ Standard Template Library contains the function template maxx, y that creates functions that return either x or y, whichever is larger. max could be defined like this:","['kind', 'template', 'common', 'function', 'template', 'class', 'template', 'function', 'template', 'pattern', 'create', 'ordinary', 'function', 'base', 'parameterizing', 'type', 'supply', 'instantiate', 'example', 'c++', 'standard', 'template', 'library', 'contain', 'function', 'template', 'maxx', 'create', 'function', 'return', 'whichever', 'large', 'max', 'define', 'like']"
1674,"Specializations of this function template, instantiations with specific types, can be called just like an ordinary function:","['specialization', 'function', 'template', 'instantiation', 'specific', 'type', 'call', 'like', 'ordinary', 'function']"
1675,"The compiler examines the arguments used to call max and determines that this is a call to maxint, int. It then instantiates a version of the function where the parameterizing type T is int, making the equivalent of the following function:","['compiler', 'examine', 'argument', 'max', 'determine', 'maxint', 'int', 'instantiate', 'version', 'function', 'parameterizing', 'type', 'int', 'make', 'equivalent', 'follow', 'function']"
1676,"This works whether the arguments x and y are integers, strings, or any other type for which the expression x < y is sensible, or more specifically, for any type for which operator< is defined. Common inheritance is not needed for the set of types that can be used, and so it is very similar to duck typing. A program defining a custom data type can use operator overloading to define the meaning of < for that type, thus allowing its use with the max function template. While this may seem a minor benefit in this isolated example, in the context of a comprehensive library like the STL it allows the programmer to get extensive functionality for a new data type, just by defining a few operators for it. Merely defining < allows a type to be used with the standard sort, stable_sort, and binary_search algorithms or to be put inside data structures such as sets, heaps, and associative arrays.","['work', 'argument', 'integer', 'string', 'type', 'expression', 'sensible', 'specifically', 'type', 'operator', 'define', 'common', 'inheritance', 'need', 'set', 'type', 'similar', 'duck', 'typing', 'program', 'define', 'custom', 'datum', 'type', 'use', 'operator', 'overload', 'define', 'meaning', 'type', 'allow', 'use', 'max', 'function', 'template', 'minor', 'benefit', 'isolated', 'example', 'context', 'comprehensive', 'library', 'like', 'stl', 'allow', 'programmer', 'extensive', 'functionality', 'new', 'data', 'type', 'define', 'operator', 'merely', 'define', 'allow', 'type', 'standard', 'sort', 'stable_sort', 'binary_search', 'algorithm', 'inside', 'data', 'structure', 'set', 'heap', 'associative', 'array']"
1677,"C++ templates are completely type safe at compile time. As a demonstration, the standard type complex does not define the < operator, because there is no strict order on complex numbers. Therefore, maxx, y will fail with a compile error, if x and y are complex values. Likewise, other templates that rely on < cannot be applied to complex data unless a comparison in the form of a functor or function is provided. E.g.: A complex cannot be used as key for a map unless a comparison is provided. Unfortunately, compilers historically generate somewhat esoteric, long, and unhelpful error messages for this sort of error. Ensuring that a certain object adheres to a method protocol can alleviate this issue. Languages which use compare instead of < can also use complex values as keys.","['c++', 'template', 'completely', 'type', 'safe', 'compile', 'time', 'demonstration', 'standard', 'type', 'complex', 'define', 'operator', 'strict', 'order', 'complex', 'number', 'maxx', 'fail', 'compile', 'error', 'complex', 'value', 'likewise', 'template', 'rely', 'apply', 'complex', 'datum', 'comparison', 'form', 'functor', 'function', 'provide', 'e.g.', 'complex', 'key', 'map', 'comparison', 'provide', 'unfortunately', 'compiler', 'historically', 'generate', 'somewhat', 'esoteric', 'long', 'unhelpful', 'error', 'message', 'sort', 'error', 'ensure', 'certain', 'object', 'adhere', 'method', 'protocol', 'alleviate', 'issue', 'language', 'use', 'compare', 'instead', 'use', 'complex', 'value', 'key']"
1678,"Another kind of template, a class template, extends the same concept to classes. A class template specialization is a class. Class templates are often used to make generic containers. For example, the STL has a linked list container. To make a linked list of integers, one writes list<int>. A list of strings is denoted list<string>. A list has a set of standard functions associated with it, that work for any compatible parameterizing types.","['kind', 'template', 'class', 'template', 'extend', 'concept', 'class', 'class', 'template', 'specialization', 'class', 'class', 'template', 'generic', 'container', 'example', 'stl', 'link', 'list', 'container', 'link', 'list', 'integer', 'write', 'list', 'int', 'list', 'string', 'denote', 'list', 'string', 'list', 'set', 'standard', 'function', 'associate', 'work', 'compatible', 'parameterizing', 'type']"
1679,"A powerful feature of C++'s templates is template specialization. This allows alternative implementations to be provided based on certain characteristics of the parameterized type that is being instantiated. Template specialization has two purposes: to allow certain forms of optimization, and to reduce code bloat.","['powerful', 'feature', 'c++', 'template', 'template', 'specialization', 'allow', 'alternative', 'implementation', 'provide', 'base', 'certain', 'characteristic', 'parameterized', 'type', 'instantiate', 'template', 'specialization', 'purpose', 'allow', 'certain', 'form', 'optimization', 'reduce', 'code', 'bloat']"
1680,"For example, consider a sort template function. One of the primary activities that such a function does is to swap or exchange the values in two of the container's positions. If the values are large in terms of the number of bytes it takes to store each of them, then it is often quicker to first build a separate list of pointers to the objects, sort those pointers, and then build the final sorted sequence. If the values are quite small however it is usually fastest to just swap the values in-place as needed. Furthermore, if the parameterized type is already of some pointer-type, then there is no need to build a separate pointer array. Template specialization allows the template creator to write different implementations and to specify the characteristics that the parameterized types must have for each implementation to be used.","['example', 'consider', 'sort', 'template', 'function', 'primary', 'activity', 'function', 'swap', 'exchange', 'value', 'container', 'position', 'value', 'large', 'term', 'number', 'byte', 'take', 'store', 'quick', 'build', 'separate', 'list', 'pointer', 'object', 'sort', 'pointer', 'build', 'final', 'sorted', 'sequence', 'value', 'small', 'usually', 'fast', 'swap', 'value', 'place', 'need', 'furthermore', 'parameterized', 'type', 'pointer', 'type', 'need', 'build', 'separate', 'pointer', 'array', 'template', 'specialization', 'allow', 'template', 'creator', 'write', 'different', 'implementation', 'specify', 'characteristic', 'parameterize', 'type', 'implementation']"
1681,"Unlike function templates, class templates can be partially specialized. That means that an alternate version of the class template code can be provided when some of the template parameters are known, while leaving other template parameters generic. This can be used, for example, to create a default implementation the primary specialization that assumes that copying a parameterizing type is expensive and then create partial specializations for types that are cheap to copy, thus increasing overall efficiency. Clients of such a class template just use specializations of it without needing to know whether the compiler used the primary specialization or some partial specialization in each case. Class templates can also be fully specialized, which means that an alternate implementation can be provided when all of the parameterizing types are known.","['unlike', 'function', 'template', 'class', 'template', 'partially', 'specialize', 'mean', 'alternate', 'version', 'class', 'template', 'code', 'provide', 'template', 'parameter', 'know', 'leave', 'template', 'parameter', 'generic', 'example', 'create', 'default', 'implementation', 'primary', 'specialization', 'assume', 'copy', 'parameterizing', 'type', 'expensive', 'create', 'partial', 'specialization', 'type', 'cheap', 'copy', 'increase', 'overall', 'efficiency', 'client', 'class', 'template', 'use', 'specialization', 'need', 'know', 'compiler', 'primary', 'specialization', 'partial', 'specialization', 'case', 'class', 'template', 'fully', 'specialize', 'mean', 'alternate', 'implementation', 'provide', 'parameterizing', 'type', 'know']"
1682,"Some uses of templates, such as the max function, were previously filled by function-like preprocessor macros a legacy of the C programming language. For example, here is a possible implementation of such macro:","['use', 'template', 'max', 'function', 'previously', 'fill', 'function', 'like', 'preprocessor', 'macros', 'legacy', 'programming', 'language', 'example', 'possible', 'implementation', 'macro']"
1683,"Macros are expanded copy pasted by preprocessor, before compilation proper; templates are actual real functions. Macros are always expanded inline; templates can also be inline functions when the compiler deems it appropriate.","['macros', 'expand', 'copy', 'paste', 'preprocessor', 'compilation', 'proper', 'template', 'actual', 'real', 'function', 'macros', 'expand', 'inline', 'template', 'inline', 'function', 'compiler', 'deem', 'appropriate']"
1684,"However, templates are generally considered an improvement over macros for these purposes. Templates are type-safe. Templates avoid some of the common errors found in code that makes heavy use of function-like macros, such as evaluating parameters with side effects twice. Perhaps most importantly, templates were designed to be applicable to much larger problems than macros.","['template', 'generally', 'consider', 'improvement', 'macros', 'purpose', 'template', 'type', 'safe', 'template', 'avoid', 'common', 'error', 'find', 'code', 'make', 'heavy', 'use', 'function', 'like', 'macros', 'evaluate', 'parameter', 'effect', 'twice', 'importantly', 'template', 'design', 'applicable', 'large', 'problem', 'macros']"
1685,"There are four primary drawbacks to the use of templates: supported features, compiler support, poor error messages usually with pre C++20 SFINAE, and code bloat:","['primary', 'drawback', 'use', 'template', 'support', 'feature', 'compiler', 'support', 'poor', 'error', 'message', 'usually', 'pre', 'c++20', 'sfinae', 'code', 'bloat']"
1686,"So, can derivation be used to reduce the problem of code replicated because templates are used? This would involve deriving a template from an ordinary class. This technique proved successful in curbing code bloat in real use. People who do not use a technique like this have found that replicated code can cost megabytes of code space even in moderate size programs.","['derivation', 'reduce', 'problem', 'code', 'replicate', 'template', 'involve', 'derive', 'template', 'ordinary', 'class', 'technique', 'prove', 'successful', 'curb', 'code', 'bloat', 'real', 'use', 'people', 'use', 'technique', 'like', 'find', 'replicate', 'code', 'cost', 'megabyte', 'code', 'space', 'moderate', 'size', 'program']"
1687,"The extra instantiations generated by templates can also cause some debuggers to have difficulty working gracefully with templates. For example, setting a debug breakpoint within a template from a source file may either miss setting the breakpoint in the actual instantiation desired or may set a breakpoint in every place the template is instantiated.","['extra', 'instantiation', 'generate', 'template', 'cause', 'debugger', 'difficulty', 'work', 'gracefully', 'template', 'example', 'set', 'debug', 'breakpoint', 'template', 'source', 'file', 'miss', 'set', 'breakpoint', 'actual', 'instantiation', 'desire', 'set', 'breakpoint', 'place', 'template', 'instantiate']"
1688,"Also, the implementation source code for the template must be completely available e.g. included in a header to the translation unit source file using it. Templates, including much of the Standard Library, if not included in header files, cannot be compiled. This is in contrast to non-templated code, which may be compiled to binary, providing only a declarations header file for code using it. This may be a disadvantage by exposing the implementing code, which removes some abstractions, and could restrict its use in closed-source projects.citation needed","['implementation', 'source', 'code', 'template', 'completely', 'available', 'e.g.', 'include', 'header', 'translation', 'unit', 'source', 'file', 'template', 'include', 'standard', 'library', 'include', 'header', 'file', 'compile', 'contrast', 'non', 'templated', 'code', 'compile', 'binary', 'provide', 'declaration', 'header', 'file', 'code', 'disadvantage', 'expose', 'implement', 'code', 'remove', 'abstraction', 'restrict', 'use', 'closed', 'source', 'projects.citation', 'need']"
1689,"The D programming language supports templates based in design on C++. Most C++ template idioms will carry over to D without alteration, but D adds some additional functionality:","['programming', 'language', 'support', 'template', 'base', 'design', 'c++', 'c++', 'template', 'idiom', 'carry', 'alteration', 'add', 'additional', 'functionality']"
1690,"Templates in D use a different syntax than in C++: whereas in C++ template parameters are wrapped in angular brackets Template<param1, param2>, D uses an exclamation sign and parentheses: Template!param1, param2. This avoids the C++ parsing difficulties due to ambiguity with comparison operators. If there is only one parameter, the parentheses can be omitted.","['template', 'use', 'different', 'syntax', 'c++', 'c++', 'template', 'parameter', 'wrap', 'angular', 'bracket', 'template', 'param1', 'param2', 'use', 'exclamation', 'sign', 'parenthesis', 'template!param1', 'param2', 'avoid', 'c++', 'parse', 'difficulty', 'ambiguity', 'comparison', 'operator', 'parameter', 'parenthesis', 'omit']"
1691,"Conventionally, D combines the above features to provide compile-time polymorphism using trait-based generic programming. For example, an input range is defined as any type that satisfies the checks performed by isInputRange, which is defined as follows:","['conventionally', 'combine', 'feature', 'provide', 'compile', 'time', 'polymorphism', 'trait', 'base', 'generic', 'programming', 'example', 'input', 'range', 'define', 'type', 'satisfy', 'check', 'perform', 'isinputrange', 'define', 'follow']"
1692,A function that accepts only input ranges can then use the above template in a template constraint:,"['function', 'accept', 'input', 'range', 'use', 'template', 'template', 'constraint']"
1693,"In addition to template metaprogramming, D also provides several features to enable compile-time code generation:","['addition', 'template', 'metaprogramming', 'provide', 'feature', 'enable', 'compile', 'time', 'code', 'generation']"
1694,"Combining the above allows generating code based on existing declarations. For example, D serialization frameworks can enumerate a type's members and generate specialized functions for each serialized type to perform serialization and deserialization. User-defined attributes could further indicate serialization rules.","['combine', 'allow', 'generating', 'code', 'base', 'exist', 'declaration', 'example', 'serialization', 'framework', 'enumerate', 'type', 'member', 'generate', 'specialized', 'function', 'serialize', 'type', 'perform', 'serialization', 'deserialization', 'user', 'define', 'attribute', 'indicate', 'serialization', 'rule']"
1695,"The import expression and compile-time function execution also allow efficiently implementing domain-specific languages. For example, given a function that takes a string containing an HTML template and returns equivalent D source code, it is possible to use it in the following way:","['import', 'expression', 'compile', 'time', 'function', 'execution', 'allow', 'efficiently', 'implement', 'domain', 'specific', 'language', 'example', 'give', 'function', 'take', 'string', 'contain', 'html', 'template', 'return', 'equivalent', 'source', 'code', 'possible', 'use', 'following', 'way']"
1696,"Generic classes have been a part of Eiffel since the original method and language design. The foundation publications of Eiffel,2122 use the term genericity to describe the creation and use of generic classes.","['generic', 'class', 'eiffel', 'original', 'method', 'language', 'design', 'foundation', 'publication', 'eiffel', 'use', 'term', 'genericity', 'describe', 'creation', 'use', 'generic', 'class']"
1697,"Generic classes are declared with their class name and a list of one or more formal generic parameters. In the following code, class LIST has one formal generic parameter G","['generic', 'class', 'declare', 'class', 'list', 'formal', 'generic', 'parameter', 'follow', 'code', 'class', 'list', 'formal', 'generic', 'parameter']"
1698,"The formal generic parameters are placeholders for arbitrary class names that will be supplied when a declaration of the generic class is made, as shown in the two generic derivations below, where ACCOUNT and DEPOSIT are other class names. ACCOUNT and DEPOSIT are considered actual generic parameters as they provide real class names to substitute for G in actual use.","['formal', 'generic', 'parameter', 'placeholder', 'arbitrary', 'class', 'name', 'supply', 'declaration', 'generic', 'class', 'show', 'generic', 'derivation', 'account', 'deposit', 'class', 'name', 'account', 'deposit', 'consider', 'actual', 'generic', 'parameter', 'provide', 'real', 'class', 'name', 'substitute', 'actual', 'use']"
1699,"Within the Eiffel type system, although class LIST G is considered a class, it is not considered a type. However, a generic derivation of LIST G such as LIST ACCOUNT is considered a type.","['eiffel', 'type', 'system', 'class', 'list', 'consider', 'class', 'consider', 'type', 'generic', 'derivation', 'list', 'list', 'account', 'consider', 'type']"
1700,"For the list class shown above, an actual generic parameter substituting for G can be any other available class. To constrain the set of classes from which valid actual generic parameters can be chosen, a generic constraint can be specified. In the declaration of class SORTED_LIST below, the generic constraint dictates that any valid actual generic parameter will be a class that inherits from class COMPARABLE. The generic constraint ensures that elements of a SORTED_LIST can in fact be sorted.","['list', 'class', 'show', 'actual', 'generic', 'parameter', 'substituting', 'available', 'class', 'constrain', 'set', 'class', 'valid', 'actual', 'generic', 'parameter', 'choose', 'generic', 'constraint', 'specify', 'declaration', 'class', 'sorted_list', 'generic', 'constraint', 'dictate', 'valid', 'actual', 'generic', 'parameter', 'class', 'inherit', 'class', 'comparable', 'generic', 'constraint', 'ensure', 'element', 'sorted_list', 'fact', 'sort']"
1701,"Support for the generics, or ""containers-of-type-T"" was added to the Java programming language in 2004 as part of J2SE 5.0. In Java, generics are only checked at compile time for type correctness. The generic type information is then removed via a process called type erasure, to maintain compatibility with old JVM implementations, making it unavailable at runtime. For example, a List<String> is converted to the raw type List. The compiler inserts type casts to convert the elements to the String type when they are retrieved from the list, reducing performance compared to other implementations such as C++ templates.","['support', 'generic', 'container', 'type', 'add', 'java', 'programming', 'language', '2004', 'j2se', '5', 'java', 'generic', 'check', 'compile', 'time', 'type', 'correctness', 'generic', 'type', 'information', 'remove', 'process', 'call', 'type', 'erasure', 'maintain', 'compatibility', 'old', 'jvm', 'implementation', 'make', 'unavailable', 'runtime', 'example', 'list', 'string', 'convert', 'raw', 'type', 'list', 'compiler', 'insert', 'type', 'cast', 'convert', 'element', 'string', 'type', 'retrieve', 'list', 'reduce', 'performance', 'compare', 'implementation', 'c++', 'template']"
1702,"Generics were added as part of .NET Framework 2.0 in November 2005, based on a research prototype from Microsoft Research started in 1999.23 Although similar to generics in Java, .NET generics do not apply type erasure, but implement generics as a first class mechanism in the runtime using reification. This design choice provides additional functionality, such as allowing reflection with preservation of generic types, as well as alleviating some of the limitations of erasure such as being unable to create generic arrays.2425 This also means that there is no performance hit from runtime casts and normally expensive boxing conversions. When primitive and value types are used as generic arguments, they get specialized implementations, allowing for efficient generic collections and methods. As in C++ and Java, nested generic types such as Dictionary<string, List<int>> are valid types, however are advised against for member signatures in code analysis design rules.26","['generic', 'add', '.net', 'framework', '2', 'november', '2005', 'base', 'research', 'prototype', 'microsoft', 'research', 'start', '1999', 'similar', 'generic', 'java', '.net', 'generic', 'apply', 'type', 'erasure', 'implement', 'generic', 'class', 'mechanism', 'runtime', 'reification', 'design', 'choice', 'provide', 'additional', 'functionality', 'allow', 'reflection', 'preservation', 'generic', 'type', 'alleviate', 'limitation', 'erasure', 'unable', 'create', 'generic', 'arrays', 'mean', 'performance', 'hit', 'runtime', 'cast', 'normally', 'expensive', 'boxing', 'conversion', 'primitive', 'value', 'type', 'generic', 'argument', 'specialized', 'implementation', 'allow', 'efficient', 'generic', 'collection', 'method', 'c++', 'java', 'nest', 'generic', 'type', 'dictionary', 'string', 'list', 'int', 'valid', 'type', 'advise', 'member', 'signature', 'code', 'analysis', 'design', 'rules']"
1703,".NET allows six varieties of generic type constraints using the where keyword including restricting generic types to be value types, to be classes, to have constructors, and to implement interfaces.27 Below is an example with an interface constraint:","['.net', 'allow', 'variety', 'generic', 'type', 'constraint', 'keyword', 'include', 'restrict', 'generic', 'type', 'value', 'type', 'class', 'constructor', 'implement', 'interfaces', 'example', 'interface', 'constraint']"
1704,"The MakeAtLeast method allows operation on arrays, with elements of generic type T. The method's type constraint indicates that the method is applicable to any type T that implements the generic IComparable<T> interface. This ensures a compile time error, if the method is called if the type does not support comparison. The interface provides the generic method CompareToT.","['makeatleast', 'method', 'allow', 'operation', 'array', 'element', 'generic', 'type', 'method', 'type', 'constraint', 'indicate', 'method', 'applicable', 'type', 'implement', 'generic', 'icomparable', 'interface', 'ensure', 'compile', 'time', 'error', 'method', 'call', 'type', 'support', 'comparison', 'interface', 'provide', 'generic', 'method', 'comparetot.']"
1705,"The above method could also be written without generic types, simply using the non-generic Array type. However, since arrays are contravariant, the casting would not be type safe, and the compiler would be unable to find certain possible errors that would otherwise be caught when using generic types. In addition, the method would need to access the array items as objects instead, and would require casting to compare two elements. For value types like types such as int this requires a boxing conversion, although this can be worked around using the Comparer<T> class, as is done in the standard collection classes.","['method', 'write', 'generic', 'type', 'simply', 'non', 'generic', 'array', 'type', 'array', 'contravariant', 'casting', 'type', 'safe', 'compiler', 'unable', 'find', 'certain', 'possible', 'error', 'catch', 'generic', 'type', 'addition', 'method', 'need', 'access', 'array', 'item', 'object', 'instead', 'require', 'cast', 'compare', 'element', 'value', 'type', 'like', 'type', 'int', 'require', 'boxing', 'conversion', 'work', 'comparer', 'class', 'standard', 'collection', 'class']"
1706,A notable behavior of static members in a generic .NET class is static member instantiation per run-time type see example below.,"['notable', 'behavior', 'static', 'member', 'generic', '.net', 'class', 'static', 'member', 'instantiation', 'run', 'time', 'type', 'example']"
1707,"Delphi's Object Pascal dialect acquired generics in the Delphi 2007 release, initially only with the now discontinued .NET compiler before being added to the native code in the Delphi 2009 release. The semantics and capabilities of Delphi generics are largely modelled on those had by generics in .NET 2.0, though the implementation is by necessity quite different. Here's a more or less direct translation of the first C# example shown above:","['delphi', 'object', 'pascal', 'dialect', 'acquire', 'generic', 'delphi', '2007', 'release', 'initially', 'discontinue', '.net', 'compiler', 'add', 'native', 'code', 'delphi', '2009', 'release', 'semantic', 'capability', 'delphi', 'generic', 'largely', 'model', 'generic', '.net', '2', 'implementation', 'necessity', 'different', 'direct', 'translation', 'example', 'show']"
1708,"As with C#, methods as well as whole types can have one or more type parameters. In the example, TArray is a generic type defined by the language and MakeAtLeast a generic method. The available constraints are very similar to the available constraints in C#: any value type, any class, a specific class or interface, and a class with a parameterless constructor. Multiple constraints act as an additive union.","['method', 'type', 'type', 'parameter', 'example', 'tarray', 'generic', 'type', 'define', 'language', 'makeatleast', 'generic', 'method', 'available', 'constraint', 'similar', 'available', 'constraint', 'value', 'type', 'class', 'specific', 'class', 'interface', 'class', 'parameterless', 'constructor', 'multiple', 'constraint', 'act', 'additive', 'union']"
1709,"Free Pascal implemented generics before Delphi, and with different syntax and semantics. However, since FPC version 2.6.0, the Delphi-style syntax is available when using the $mode Delphi language mode. Thus, Free Pascal programmers are able to use generics in whichever style they prefer.","['free', 'pascal', 'implement', 'generic', 'delphi', 'different', 'syntax', 'semantic', 'fpc', 'version', '2', 'delphi', 'style', 'syntax', 'available', 'mode', 'delphi', 'language', 'mode', 'free', 'pascal', 'programmer', 'able', 'use', 'generic', 'whichever', 'style', 'prefer']"
1710,"The type class mechanism of Haskell supports generic programming. Six of the predefined type classes in Haskell including Eq, the types that can be compared for equality, and Show, the types whose values can be rendered as strings have the special property of supporting derived instances. This means that a programmer defining a new type can state that this type is to be an instance of one of these special type classes, without providing implementations of the class methods as is usually necessary when declaring class instances. All the necessary methods will be ""derived"" – that is, constructed automatically – based on the structure of the type. For instance, the following declaration of a type of binary trees states that it is to be an instance of the classes Eq and Show:","['type', 'class', 'mechanism', 'haskell', 'support', 'generic', 'programming', 'predefined', 'type', 'class', 'haskell', 'include', 'type', 'compare', 'equality', 'type', 'value', 'render', 'string', 'special', 'property', 'support', 'derive', 'instance', 'mean', 'programmer', 'define', 'new', 'type', 'state', 'type', 'instance', 'special', 'type', 'class', 'provide', 'implementation', 'class', 'method', 'usually', 'necessary', 'declare', 'class', 'instance', 'necessary', 'method', 'derive', 'construct', 'automatically', 'base', 'structure', 'type', 'instance', 'follow', 'declaration', 'type', 'binary', 'tree', 'state', 'instance', 'class']"
1711,This results in an equality function == and a string representation function show being automatically defined for any type of the form BinTree T provided that T itself supports those operations.,"['result', 'equality', 'function', 'string', 'representation', 'function', 'automatically', 'define', 'type', 'form', 'bintree', 'provide', 'support', 'operation']"
1712,"The support for derived instances of Eq and Show makes their methods == and show generic in a qualitatively different way from parametrically polymorphic functions: these ""functions"" more accurately, type-indexed families of functions can be applied to values of various types, and although they behave differently for every argument type, little work is needed to add support for a new type. Ralf Hinze 2004 has shown that a similar effect can be achieved for user-defined type classes by certain programming techniques. Other researchers have proposed approaches to this and other kinds of genericity in the context of Haskell and extensions to Haskell discussed below.","['support', 'derive', 'instance', 'make', 'method', 'generic', 'qualitatively', 'different', 'way', 'parametrically', 'polymorphic', 'function', 'function', 'accurately', 'type', 'index', 'family', 'function', 'apply', 'value', 'type', 'behave', 'differently', 'argument', 'type', 'little', 'work', 'need', 'add', 'support', 'new', 'type', 'ralf', 'hinze', '2004', 'show', 'similar', 'effect', 'achieve', 'user', 'define', 'type', 'class', 'certain', 'programming', 'technique', 'researcher', 'propose', 'approach', 'kind', 'genericity', 'context', 'haskell', 'extension', 'haskell', 'discuss']"
1713,"PolyP was the first generic programming language extension to Haskell. In PolyP, generic functions are called polytypic. The language introduces a special construct in which such polytypic functions can be defined via structural induction over the structure of the pattern functor of a regular datatype. Regular datatypes in PolyP are a subset of Haskell datatypes. A regular datatype t must be of kind * → *, and if a is the formal type argument in the definition, then all recursive calls to t must have the form t a. These restrictions rule out higher-kinded datatypes as well as nested datatypes, where the recursive calls are of a different form. The flatten function in PolyP is here provided as an example:","['polyp', 'generic', 'programming', 'language', 'extension', 'haskell', 'polyp', 'generic', 'function', 'call', 'polytypic', 'language', 'introduce', 'special', 'construct', 'polytypic', 'function', 'define', 'structural', 'induction', 'structure', 'pattern', 'functor', 'regular', 'datatype', 'regular', 'datatype', 'polyp', 'subset', 'haskell', 'datatype', 'regular', 'datatype', 'kind', 'formal', 'type', 'argument', 'definition', 'recursive', 'call', 'form', 'restriction', 'rule', 'higher', 'kinde', 'datatype', 'nested', 'datatype', 'recursive', 'call', 'different', 'form', 'flatten', 'function', 'polyp', 'provide', 'example']"
1714,"Generic Haskell is another extension to Haskell, developed at Utrecht University in the Netherlands. The extensions it provides are:","['generic', 'haskell', 'extension', 'haskell', 'develop', 'utrecht', 'university', 'netherlands', 'extension', 'provide']"
1715,The resulting type-indexed value can be specialized to any type.,"['result', 'type', 'index', 'value', 'specialize', 'type']"
1716,"As an example, the equality function in Generic Haskell:28","['example', 'equality', 'function', 'generic', 'haskell']"
1717,Clean offers generic programming based § PolyP and the § Generic Haskell as supported by the GHC ≥ 6.0. It parametrizes by kind as those but offers overloading.,"['clean', 'offer', 'generic', 'programming', 'base', 'polyp', 'generic', 'haskell', 'support', 'ghc', '6', 'parametrize', 'kind', 'offer', 'overload']"
1718,"Languages in the ML family support generic programming through parametric polymorphism and generic modules called functors. Both Standard ML and OCaml provide functors, which are similar to class templates and to Ada's generic packages. Scheme syntactic abstractions also have a connection to genericity – these are in fact a superset of C++ templates.","['language', 'family', 'support', 'generic', 'programming', 'parametric', 'polymorphism', 'generic', 'module', 'call', 'functor', 'standard', 'ocaml', 'provide', 'functor', 'similar', 'class', 'template', 'ada', 'generic', 'package', 'scheme', 'syntactic', 'abstraction', 'connection', 'genericity', 'fact', 'superset', 'c++', 'template']"
1719,"A Verilog module may take one or more parameters, to which their actual values are assigned upon the instantiation of the module. One example is a generic register array where the array width is given via a parameter. Such an array, combined with a generic wire vector, can make a generic buffer or memory module with an arbitrary bit width out of a single module implementation.29","['verilog', 'module', 'parameter', 'actual', 'value', 'assign', 'instantiation', 'module', 'example', 'generic', 'register', 'array', 'array', 'width', 'give', 'parameter', 'array', 'combine', 'generic', 'wire', 'vector', 'generic', 'buffer', 'memory', 'module', 'arbitrary', 'bit', 'width', 'single', 'module', 'implementation']"
1720,"VHDL, being derived from Ada, also has generic capabilities. 30","['vhdl', 'derive', 'ada', 'generic', 'capability']"
1721,"C supports ""type-generic expressions"" using the _Generic keyword:31","['support', 'type', 'generic', 'expression', 'generic', 'keyword']"
1722,"In object-oriented programming, a god object sometimes also called an omniscient or all-knowing object is an object that references a large number of distinct types, has too many unrelated or uncategorized methods, or some combination of both.1 The god object is an example of an anti-pattern and a code smell.","['object', 'orient', 'programming', 'god', 'object', 'call', 'omniscient', 'know', 'object', 'object', 'reference', 'large', 'number', 'distinct', 'type', 'unrelated', 'uncategorized', 'method', 'combination', 'both', 'god', 'object', 'example', 'anti', 'pattern', 'code', 'smell']"
1723,"A common programming technique is to separate a large problem into several smaller problems a divide and conquer strategy and create solutions for each of them. Once the smaller problems are solved, the big problem as a whole has been solved. Therefore a given object for a small problem only needs to know about itself. Likewise, there is only one set of problems an object needs to solve: its own problems. This also follows Single-responsibility principle.","['common', 'programming', 'technique', 'separate', 'large', 'problem', 'small', 'problem', 'divide', 'conquer', 'strategy', 'create', 'solution', 'small', 'problem', 'solve', 'big', 'problem', 'solve', 'give', 'object', 'small', 'problem', 'need', 'know', 'likewise', 'set', 'problem', 'object', 'need', 'solve', 'problem', 'follow', 'single', 'responsibility', 'principle']"
1724,"In contrast, a program that employs a god object does not follow this approach. Most of such a program's overall functionality is coded into a single ""all-knowing"" object, which maintains most of the information about the entire program, and also provides most of the methods for manipulating this data. Because this object holds so much data and requires so many methods, its role in the program becomes god-like all-knowing and all-encompassing. Instead of program objects communicating among themselves directly, the other objects within the program rely on the single god object for most of their information and interaction. Since this object is tightly coupled to referenced by so much of the other code, maintenance becomes more difficult than it would be in a more evenly divided programming design. Changes made to the object for the benefit of one routine can have unintended effects on other unrelated routines.","['contrast', 'program', 'employ', 'god', 'object', 'follow', 'approach', 'program', 'overall', 'functionality', 'code', 'single', 'know', 'object', 'maintain', 'information', 'entire', 'program', 'provide', 'method', 'manipulate', 'datum', 'object', 'hold', 'datum', 'require', 'method', 'role', 'program', 'god', 'like', 'knowing', 'encompass', 'instead', 'program', 'object', 'communicate', 'directly', 'object', 'program', 'rely', 'single', 'god', 'object', 'information', 'interaction', 'object', 'tightly', 'couple', 'reference', 'code', 'maintenance', 'difficult', 'evenly', 'divide', 'programming', 'design', 'change', 'object', 'benefit', 'routine', 'unintended', 'effect', 'unrelated', 'routine']"
1725,"A god object is the object-oriented analogue of failing to use subroutines in procedural programming languages, or of using far too many global variables to store state information.","['god', 'object', 'object', 'orient', 'analogue', 'fail', 'use', 'subroutine', 'procedural', 'programming', 'language', 'far', 'global', 'variable', 'store', 'state', 'information']"
1726,"Whereas creating a god object is typically considered bad programming practice, this technique is occasionally used for tight programming environments such as microcontrollers, where the performance increase and centralization of control are more important than maintainability and programming elegance.","['create', 'god', 'object', 'typically', 'consider', 'bad', 'programming', 'practice', 'technique', 'occasionally', 'tight', 'programming', 'environment', 'microcontroller', 'performance', 'increase', 'centralization', 'control', 'important', 'maintainability', 'programming', 'elegance']"
1727,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1728,"Memory management is a form of resource management applied to computer memory. The essential requirement of memory management is to provide ways to dynamically allocate portions of memory to programs at their request, and free it for reuse when no longer needed. This is critical to any advanced computer system where more than a single process might be underway at any time.1","['memory', 'management', 'form', 'resource', 'management', 'apply', 'computer', 'memory', 'essential', 'requirement', 'memory', 'management', 'provide', 'way', 'dynamically', 'allocate', 'portion', 'memory', 'program', 'request', 'free', 'reuse', 'long', 'need', 'critical', 'advanced', 'computer', 'system', 'single', 'process', 'underway', 'time']"
1729,"Several methods have been devised that increase the effectiveness of memory management. Virtual memory systems separate the memory addresses used by a process from actual physical addresses, allowing separation of processes and increasing the size of the virtual address space beyond the available amount of RAM using paging or swapping to secondary storage. The quality of the virtual memory manager can have an extensive effect on overall system performance.","['method', 'devise', 'increase', 'effectiveness', 'memory', 'management', 'virtual', 'memory', 'system', 'separate', 'memory', 'address', 'process', 'actual', 'physical', 'address', 'allow', 'separation', 'process', 'increase', 'size', 'virtual', 'address', 'space', 'available', 'ram', 'page', 'swap', 'secondary', 'storage', 'quality', 'virtual', 'memory', 'manager', 'extensive', 'effect', 'overall', 'system', 'performance']"
1730,"In some operating systems, e.g. OS/360 and successors,2 memory is managed by the operating system.note 1 In other operating systems, e.g. Unix-like operating systems, memory is managed at the application level.","['operating', 'system', 'e.g.', 'successors', 'memory', 'manage', 'operating', 'system.note', 'operating', 'system', 'e.g.', 'unix', 'like', 'operating', 'system', 'memory', 'manage', 'application', 'level']"
1731,Memory management within an address space is generally categorized as either manual memory management or automatic memory management.,"['memory', 'management', 'address', 'space', 'generally', 'categorize', 'manual', 'memory', 'management', 'automatic', 'memory', 'management']"
1732,"The task of fulfilling an allocation request consists of locating a block of unused memory of sufficient size. Memory requests are satisfied by allocating portions from a large poolnote 2 of memory called the heapnote 3 or free store. At any given time, some parts of the heap are in use, while some are ""free"" unused and thus available for future allocations.","['task', 'fulfil', 'allocation', 'request', 'consist', 'locate', 'block', 'unused', 'memory', 'sufficient', 'size', 'memory', 'request', 'satisfied', 'allocate', 'portion', 'large', 'poolnote', 'memory', 'call', 'heapnote', 'free', 'store', 'give', 'time', 'part', 'heap', 'use', 'free', 'unused', 'available', 'future', 'allocation']"
1733,"Several issues complicate the implementation, such as external fragmentation, which arises when there are many small gaps between allocated memory blocks, which invalidates their use for an allocation request. The allocator's metadata can also inflate the size of individually small allocations. This is often managed by chunking. The memory management system must track outstanding allocations to ensure that they do not overlap and that no memory is ever ""lost"" i.e. that there are no ""memory leaks"".","['issue', 'complicate', 'implementation', 'external', 'fragmentation', 'arise', 'small', 'gap', 'allocate', 'memory', 'block', 'invalidate', 'use', 'allocation', 'request', 'allocator', 'metadata', 'inflate', 'size', 'individually', 'small', 'allocation', 'manage', 'chunk', 'memory', 'management', 'system', 'track', 'outstanding', 'allocation', 'ensure', 'overlap', 'memory', 'lose', 'i.e.', 'memory', 'leak']"
1734,The specific dynamic memory allocation algorithm implemented can impact performance significantly. A study conducted in 1994 by Digital Equipment Corporation illustrates the overheads involved for a variety of allocators. The lowest average instruction path length required to allocate a single memory slot was 52 as measured with an instruction level profiler on a variety of software.1,"['specific', 'dynamic', 'memory', 'allocation', 'algorithm', 'implement', 'impact', 'performance', 'significantly', 'study', 'conduct', '1994', 'digital', 'equipment', 'corporation', 'illustrate', 'overhead', 'involve', 'variety', 'allocator', 'low', 'average', 'instruction', 'path', 'length', 'require', 'allocate', 'single', 'memory', 'slot', 'measure', 'instruction', 'level', 'profiler', 'variety', 'software']"
1735,"Since the precise location of the allocation is not known in advance, the memory is accessed indirectly, usually through a pointer reference. The specific algorithm used to organize the memory area and allocate and deallocate chunks is interlinked with the kernel, and may use any of the following methods:","['precise', 'location', 'allocation', 'know', 'advance', 'memory', 'access', 'indirectly', 'usually', 'pointer', 'reference', 'specific', 'algorithm', 'organize', 'memory', 'area', 'allocate', 'deallocate', 'chunk', 'interlink', 'kernel', 'use', 'follow', 'method']"
1736,"Fixed-size blocks allocation, also called memory pool allocation, uses a free list of fixed-size blocks of memory often all of the same size. This works well for simple embedded systems where no large objects need to be allocated, but suffers from fragmentation, especially with long memory addresses. However, due to the significantly reduced overhead this method can substantially improve performance for objects that need frequent allocation / de-allocation and is often used in video games.","['fix', 'size', 'block', 'allocation', 'call', 'memory', 'pool', 'allocation', 'use', 'free', 'list', 'fix', 'size', 'block', 'memory', 'size', 'work', 'simple', 'embed', 'system', 'large', 'object', 'need', 'allocate', 'suffer', 'fragmentation', 'especially', 'long', 'memory', 'address', 'significantly', 'reduce', 'overhead', 'method', 'substantially', 'improve', 'performance', 'object', 'need', 'frequent', 'allocation', 'allocation', 'video', 'game']"
1737,"In this system, memory is allocated into several pools of memory instead of just one, where each pool represents blocks of memory of a certain power of two in size, or blocks of some other convenient size progression. All blocks of a particular size are kept in a sorted linked list or tree and all new blocks that are formed during allocation are added to their respective memory pools for later use. If a smaller size is requested than is available, the smallest available size is selected and split. One of the resulting parts is selected, and the process repeats until the request is complete. When a block is allocated, the allocator will start with the smallest sufficiently large block to avoid needlessly breaking blocks. When a block is freed, it is compared to its buddy. If they are both free, they are combined and placed in the correspondingly larger-sized buddy-block list.","['system', 'memory', 'allocate', 'pool', 'memory', 'instead', 'pool', 'represent', 'block', 'memory', 'certain', 'power', 'size', 'block', 'convenient', 'size', 'progression', 'block', 'particular', 'size', 'keep', 'sorted', 'link', 'list', 'tree', 'new', 'block', 'form', 'allocation', 'add', 'respective', 'memory', 'pool', 'later', 'use', 'small', 'size', 'request', 'available', 'small', 'available', 'size', 'select', 'split', 'result', 'part', 'select', 'process', 'repeat', 'request', 'complete', 'block', 'allocate', 'allocator', 'start', 'small', 'sufficiently', 'large', 'block', 'avoid', 'needlessly', 'break', 'block', 'block', 'free', 'compare', 'buddy', 'free', 'combine', 'place', 'correspondingly', 'large', 'sized', 'buddy', 'block', 'list']"
1738,"This memory allocation mechanism preallocates memory chunks suitable to fit objects of a certain type or size.3 These chunks are called caches and the allocator only has to keep track of a list of free cache slots. Constructing an object will use any one of the free cache slots and destructing an object will add a slot back to the free cache slot list. This technique alleviates memory fragmentation and is efficient as there is no need to search for a suitable portion of memory, as any open slot will suffice.","['memory', 'allocation', 'mechanism', 'preallocate', 'memory', 'chunk', 'suitable', 'fit', 'object', 'certain', 'type', 'size', 'chunk', 'call', 'cache', 'allocator', 'track', 'list', 'free', 'cache', 'slot', 'construct', 'object', 'use', 'free', 'cache', 'slot', 'destruct', 'object', 'add', 'slot', 'free', 'cache', 'slot', 'list', 'technique', 'alleviate', 'memory', 'fragmentation', 'efficient', 'need', 'search', 'suitable', 'portion', 'memory', 'open', 'slot', 'suffice']"
1739,"Many Unix-like systems as well as Microsoft Windows implement a function called alloca for dynamically allocating stack memory in a way similar to the heap-based malloc. A compiler typically translates it to inlined instructions manipulating the stack pointer.4 Although there is no need of manually freeing memory allocated this way as it is automatically freed when the function that called alloca returns, there exists a risk of overflow. And since alloca is an ad hoc expansion seen in many systems but never in POSIX or the C standard, its behavior in case of a stack overflow is undefined.","['unix', 'like', 'system', 'microsoft', 'windows', 'implement', 'function', 'call', 'alloca', 'dynamically', 'allocate', 'stack', 'memory', 'way', 'similar', 'heap', 'base', 'malloc', 'compiler', 'typically', 'translate', 'inline', 'instruction', 'manipulate', 'stack', 'pointer', 'need', 'manually', 'free', 'memory', 'allocate', 'way', 'automatically', 'free', 'function', 'call', 'alloca', 'return', 'exist', 'risk', 'overflow', 'alloca', 'hoc', 'expansion', 'see', 'system', 'posix', 'standard', 'behavior', 'case', 'stack', 'overflow', 'undefined']"
1740,"A safer version of alloca called _malloca, which reports errors, exists on Microsoft Windows. It requires the use of _freea.5 gnulib provides an equivalent interface, albeit instead of throwing an SEH exception on overflow, it delegates to malloc when an overlarge size is detected.6 A similar feature can be emulated using manual accounting and size-checking, such as in the uses of alloca_account in glibc.7","['safe', 'version', 'alloca', 'call', 'malloca', 'report', 'error', 'exist', 'microsoft', 'windows', 'require', 'use', 'freea', 'gnulib', 'provide', 'equivalent', 'interface', 'albeit', 'instead', 'throw', 'seh', 'exception', 'overflow', 'delegate', 'malloc', 'overlarge', 'size', 'detected', 'similar', 'feature', 'emulate', 'manual', 'accounting', 'size', 'checking', 'use', 'alloca_account', 'glibc']"
1741,"In many programming language implementations, the runtime environment for the program automatically allocates memory in the call stack for non-static local variables of a subroutine, called automatic variables, when the subroutine is called, and automatically releases that memory when the subroutine is exited. Special declarations may allow local variables to retain values between invocations of the procedure, or may allow local variables to be accessed by other subroutines. The automatic allocation of local variables makes recursion possible, to a depth limited by available memory.","['programming', 'language', 'implementation', 'runtime', 'environment', 'program', 'automatically', 'allocate', 'memory', 'stack', 'non', 'static', 'local', 'variable', 'subroutine', 'call', 'automatic', 'variable', 'subroutine', 'call', 'automatically', 'release', 'memory', 'subroutine', 'exit', 'special', 'declaration', 'allow', 'local', 'variable', 'retain', 'value', 'invocation', 'procedure', 'allow', 'local', 'variable', 'access', 'subroutine', 'automatic', 'allocation', 'local', 'variable', 'make', 'recursion', 'possible', 'depth', 'limit', 'available', 'memory']"
1742,"Garbage collection is a strategy for automatically detecting memory allocated to objects that are no longer usable in a program, and returning that allocated memory to a pool of free memory locations. This method is in contrast to ""manual"" memory management where a programmer explicitly codes memory requests and memory releases in the program. While automatic garbage collection has the advantages of reducing programmer workload and preventing certain kinds of memory allocation bugs, garbage collection does require memory resources of its own, and can compete with the application program for processor time.","['garbage', 'collection', 'strategy', 'automatically', 'detect', 'memory', 'allocate', 'object', 'long', 'usable', 'program', 'return', 'allocate', 'memory', 'pool', 'free', 'memory', 'location', 'method', 'contrast', 'manual', 'memory', 'management', 'programmer', 'explicitly', 'code', 'memory', 'request', 'memory', 'release', 'program', 'automatic', 'garbage', 'collection', 'advantage', 'reduce', 'programmer', 'workload', 'prevent', 'certain', 'kind', 'memory', 'allocation', 'bug', 'garbage', 'collection', 'require', 'memory', 'resource', 'compete', 'application', 'program', 'processor', 'time']"
1743,Virtual memory is a method of decoupling the memory organization from the physical hardware. The applications operate on memory via virtual addresses. Each attempt by the application to access a particular virtual memory address results in the virtual memory address being translated to an actual physical address.8 In this way the addition of virtual memory enables granular control over memory systems and methods of access.,"['virtual', 'memory', 'method', 'decouple', 'memory', 'organization', 'physical', 'hardware', 'application', 'operate', 'memory', 'virtual', 'address', 'attempt', 'application', 'access', 'particular', 'virtual', 'memory', 'address', 'result', 'virtual', 'memory', 'address', 'translate', 'actual', 'physical', 'address', 'way', 'addition', 'virtual', 'memory', 'enable', 'granular', 'control', 'memory', 'system', 'method', 'access']"
1744,"In virtual memory systems the operating system limits how a process can access the memory. This feature, called memory protection, can be used to disallow a process to read or write to memory that is not allocated to it, preventing malicious or malfunctioning code in one program from interfering with the operation of another.","['virtual', 'memory', 'system', 'operating', 'system', 'limit', 'process', 'access', 'memory', 'feature', 'call', 'memory', 'protection', 'disallow', 'process', 'read', 'write', 'memory', 'allocate', 'prevent', 'malicious', 'malfunction', 'code', 'program', 'interfere', 'operation']"
1745,"Even though the memory allocated for specific processes is normally isolated, processes sometimes need to be able to share information. Shared memory is one of the fastest techniques for inter-process communication.","['memory', 'allocate', 'specific', 'process', 'normally', 'isolate', 'process', 'need', 'able', 'share', 'information', 'share', 'memory', 'fast', 'technique', 'inter', 'process', 'communication']"
1746,"Memory is usually classified by access rate into primary storage and secondary storage. Memory management systems, among other operations, also handle the moving of information between these two levels of memory.","['memory', 'usually', 'classify', 'access', 'rate', 'primary', 'storage', 'secondary', 'storage', 'memory', 'management', 'system', 'operation', 'handle', 'moving', 'information', 'level', 'memory']"
1747,"IBM System/360 does not support virtual memory.note 4 Memory isolation of jobs is optionally accomplished using protection keys, assigning storage for each job a different key, 0 for the supervisor or 1–15. Memory management in OS/360 is a supervisor function. Storage is requested using the GETMAIN macro and freed using the FREEMAIN macro, which result in a call to the supervisor SVC to perform the operation.","['ibm', 'support', 'virtual', 'memory.note', 'memory', 'isolation', 'job', 'optionally', 'accomplish', 'protection', 'key', 'assign', 'storage', 'job', 'different', 'key', 'supervisor', '1–15', 'memory', 'management', 'supervisor', 'function', 'storage', 'request', 'getmain', 'macro', 'free', 'freemain', 'macro', 'result', 'supervisor', 'svc', 'perform', 'operation']"
1748,"In OS/360 the details vary depending on how the system is generated, e.g., for PCP, MFT, MVT.","['detail', 'vary', 'depend', 'system', 'generate', 'e.g.', 'pcp', 'mft', 'mvt']"
1749,"In OS/360 MVT, suballocation within a job's region or the shared System Queue Area SQA is based on subpools, areas a multiple of 2 KB in size—the size of an area protected by a protection key. Subpools are numbered 0–255.9 Within a region subpools are assigned either the job's storage protection or the supervisor's key, key 0. Subpools 0–127 receive the job's key. Initially only subpool zero is created, and all user storage requests are satisfied from subpool 0, unless another is specified in the memory request. Subpools 250–255 are created by memory requests by the supervisor on behalf of the job. Most of these are assigned key 0, although a few get the key of the job. Subpool numbers are also relevant in MFT, although the details are much simpler.10 MFT uses fixed partitions redefinable by the operator instead of dynamic regions and PCP has only a single partition.","['mvt', 'suballocation', 'job', 'region', 'share', 'system', 'queue', 'area', 'sqa', 'base', 'subpool', 'area', 'multiple', 'size', 'size', 'area', 'protect', 'protection', 'key', 'subpool', 'number', '0–255', 'region', 'subpool', 'assign', 'job', 'storage', 'protection', 'supervisor', 'key', 'key', 'subpool', '0–127', 'receive', 'job', 'key', 'initially', 'subpool', 'zero', 'create', 'user', 'storage', 'request', 'satisfied', 'subpool', 'specify', 'memory', 'request', 'subpools', '250–255', 'create', 'memory', 'request', 'supervisor', 'behalf', 'job', 'assign', 'key', 'key', 'job', 'subpool', 'number', 'relevant', 'mft', 'detail', 'simpler', 'mft', 'use', 'fix', 'partition', 'redefinable', 'operator', 'instead', 'dynamic', 'region', 'pcp', 'single', 'partition']"
1750,"Each subpool is mapped by a list of control blocks identifying allocated and free memory blocks within the subpool. Memory is allocated by finding a free area of sufficient size, or by allocating additional blocks in the subpool, up to the region size of the job. It is possible to free all or part of an allocated memory area.11","['subpool', 'map', 'list', 'control', 'block', 'identify', 'allocate', 'free', 'memory', 'block', 'subpool', 'memory', 'allocate', 'find', 'free', 'area', 'sufficient', 'size', 'allocate', 'additional', 'block', 'subpool', 'region', 'size', 'job', 'possible', 'free', 'allocate', 'memory', 'area']"
1751,"The details for OS/VS1 are similar12 to those for MFT and for MVT; the details for OS/VS2 are similar to those for MVT, except that the page size is 4 KiB. For both OS/VS1 and OS/VS2 the shared System Queue Area SQA is nonpageable.","['detail', 'vs1', 'similar12', 'mft', 'mvt', 'detail', 'vs2', 'similar', 'mvt', 'page', 'size', 'kib.', 'vs1', 'vs2', 'share', 'system', 'queue', 'area', 'sqa', 'nonpageable']"
1752,"In MVS the address space includes an additional pageable shared area, the Common Storage Area CSA, and an additional private area, the System Work area SWA. Also, the storage keys 0-7 are all reserved for use by privileged code.","['mvs', 'address', 'space', 'include', 'additional', 'pageable', 'shared', 'area', 'common', 'storage', 'area', 'csa', 'additional', 'private', 'area', 'system', 'work', 'area', 'swa', 'storage', 'key', 'reserve', 'use', 'privileged', 'code']"
1753,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1754,"In object-oriented programming, a helper class is used to assist in providing some functionality, which isn't the main goal of the application or class in which it is usedcitation needed. An instance of a helper class is called a helper object for example, in the delegation pattern.","['object', 'orient', 'programming', 'helper', 'class', 'assist', 'provide', 'functionality', 'main', 'goal', 'application', 'class', 'usedcitation', 'need', 'instance', 'helper', 'class', 'call', 'helper', 'object', 'example', 'delegation', 'pattern']"
1755,"Helper classes are often created in introductory programming lessons, after the novice programmer has moved beyond creating one or two classes.","['helper', 'class', 'create', 'introductory', 'programming', 'lesson', 'novice', 'programmer', 'move', 'create', 'class']"
1756,"A utility class is a special case of a helper class in which the methods are all static. In general, helper classes do not have to have all static methods, but may have instance variables. Multiple instances of the helper class may exist as well.","['utility', 'class', 'special', 'case', 'helper', 'class', 'method', 'static', 'general', 'helper', 'class', 'static', 'method', 'instance', 'variable', 'multiple', 'instance', 'helper', 'class', 'exist']"
1757,This is also an example of a utility class.,"['example', 'utility', 'class']"
1758,Functions which are going to helper classes could be placed close to where they are used. The other alternative is wrapping helper class parameters into a class as a field. That class can have a name from the business domain connected to the fields it has. The example below shows how to convert helper methods to methods on domain types:,"['function', 'go', 'helper', 'class', 'place', 'close', 'alternative', 'wrap', 'helper', 'class', 'parameter', 'class', 'field', 'class', 'business', 'domain', 'connect', 'field', 'example', 'show', 'convert', 'helper', 'method', 'method', 'domain', 'type']"
1759,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1760,Programming paradigms are a way to classify programming languages based on their features. Languages can be classified into multiple paradigms.,"['programming', 'paradigm', 'way', 'classify', 'programming', 'language', 'base', 'feature', 'language', 'classify', 'multiple', 'paradigms']"
1761,"Some paradigms are concerned mainly with implications for the execution model of the language, such as allowing side effects, or whether the sequence of operations is defined by the execution model. Other paradigms are concerned mainly with the way that code is organized, such as grouping a code into units along with the state that is modified by the code. Yet others are concerned mainly with the style of syntax and grammar.","['paradigm', 'concern', 'mainly', 'implication', 'execution', 'model', 'language', 'allow', 'effect', 'sequence', 'operation', 'define', 'execution', 'model', 'paradigm', 'concern', 'mainly', 'way', 'code', 'organize', 'group', 'code', 'unit', 'state', 'modify', 'code', 'concern', 'mainly', 'style', 'syntax', 'grammar']"
1762,"Symbolic techniques such as reflection, which allow the program to refer to itself, might also be considered as a programming paradigm. However, this is compatible with the major paradigms and thus is not a real paradigm in its own right.","['symbolic', 'technique', 'reflection', 'allow', 'program', 'refer', 'consider', 'programming', 'paradigm', 'compatible', 'major', 'paradigm', 'real', 'paradigm', 'right']"
1763,"For example, languages that fall into the imperative paradigm have two main features: they state the order in which operations occur, with constructs that explicitly control that order, and they allow side effects, in which state can be modified at one point in time, within one unit of code, and then later read at a different point in time inside a different unit of code. The communication between the units of code is not explicit. Meanwhile, in object-oriented programming, code is organized into objects that contain a state that is only modified by the code that is part of the object. Most object-oriented languages are also imperative languages. In contrast, languages that fit the declarative paradigm do not state the order in which to execute operations. Instead, they supply a number of available operations in the system, along with the conditions under which each is allowed to execute.4 The implementation of the language's execution model tracks which operations are free to execute and chooses the order independently. More at Comparison of multi-paradigm programming languages.","['example', 'language', 'fall', 'imperative', 'paradigm', 'main', 'feature', 'state', 'order', 'operation', 'occur', 'construct', 'explicitly', 'control', 'order', 'allow', 'effect', 'state', 'modify', 'point', 'time', 'unit', 'code', 'later', 'read', 'different', 'point', 'time', 'inside', 'different', 'unit', 'code', 'communication', 'unit', 'code', 'explicit', 'object', 'orient', 'programming', 'code', 'organize', 'object', 'contain', 'state', 'modify', 'code', 'object', 'object', 'orient', 'language', 'imperative', 'language', 'contrast', 'language', 'fit', 'declarative', 'paradigm', 'state', 'order', 'execute', 'operation', 'instead', 'supply', 'number', 'available', 'operation', 'system', 'condition', 'allow', 'execute', 'implementation', 'language', 'execution', 'model', 'track', 'operation', 'free', 'execute', 'choose', 'order', 'independently', 'comparison', 'multi', 'paradigm', 'programming', 'language']"
1764,"Just as software engineering as a process is defined by differing methodologies, so the programming languages as models of computation are defined by differing paradigms. Some languages are designed to support one paradigm Smalltalk supports object-oriented programming, Haskell supports functional programming, while other programming languages support multiple paradigms such as Object Pascal, C++, Java, JavaScript, C#, Scala, Visual Basic, Common Lisp, Scheme, Perl, PHP, Python, Ruby, Oz, and F#. For example, programs written in C++, Object Pascal or PHP can be purely procedural, purely object-oriented, or can contain elements of both or other paradigms. Software designers and programmers decide how to use those paradigm elements.","['software', 'engineering', 'process', 'define', 'differ', 'methodology', 'programming', 'language', 'model', 'computation', 'define', 'differ', 'paradigm', 'language', 'design', 'support', 'paradigm', 'smalltalk', 'support', 'object', 'orient', 'programming', 'haskell', 'support', 'functional', 'programming', 'programming', 'language', 'support', 'multiple', 'paradigm', 'object', 'pascal', 'c++', 'java', 'javascript', 'scala', 'visual', 'basic', 'common', 'lisp', 'scheme', 'perl', 'php', 'python', 'ruby', 'example', 'program', 'write', 'c++', 'object', 'pascal', 'php', 'purely', 'procedural', 'purely', 'object', 'orient', 'contain', 'element', 'paradigms', 'software', 'designer', 'programmer', 'decide', 'use', 'paradigm', 'element']"
1765,"In object-oriented programming, programs are treated as a set of interacting objects. In functional programming, programs are treated as a sequence of stateless function evaluations. When programming computers or systems with many processors, in process-oriented programming, programs are treated as sets of concurrent processes that act on a logical shared data structures.","['object', 'orient', 'programming', 'program', 'treat', 'set', 'interact', 'object', 'functional', 'programming', 'program', 'treat', 'sequence', 'stateless', 'function', 'evaluation', 'programming', 'computer', 'system', 'processor', 'process', 'orient', 'programming', 'program', 'treat', 'set', 'concurrent', 'process', 'act', 'logical', 'share', 'data', 'structure']"
1766,"Many programming paradigms are as well known for the techniques they forbid as for those they enable. For instance, pure functional programming disallows use of side-effects, while structured programming disallows use of the goto statement. Partly for this reason, new paradigms are often regarded as doctrinaire or overly rigid by those accustomed to earlier styles.7 Yet, avoiding certain techniques can make it easier to understand program behavior, and to prove theorems about program correctness.","['programming', 'paradigm', 'know', 'technique', 'forbid', 'enable', 'instance', 'pure', 'functional', 'programming', 'disallow', 'use', 'effect', 'structured', 'programming', 'disallow', 'use', 'goto', 'statement', 'partly', 'reason', 'new', 'paradigm', 'regard', 'doctrinaire', 'overly', 'rigid', 'accustomed', 'early', 'styles', 'avoid', 'certain', 'technique', 'easy', 'understand', 'program', 'behavior', 'prove', 'theorem', 'program', 'correctness']"
1767,"Programming paradigms can also be compared with programming models, which allows invoking an execution model by using only an API. Programming models can also be classified into paradigms based on features of the execution model.","['programming', 'paradigm', 'compare', 'programming', 'model', 'allow', 'invoke', 'execution', 'model', 'api', 'programming', 'model', 'classify', 'paradigm', 'base', 'feature', 'execution', 'model']"
1768,"For parallel computing, using a programming model instead of a language is common. The reason is that details of the parallel hardware leak into the abstractions used to program the hardware. This causes the programmer to have to map patterns in the algorithm onto patterns in the execution model which have been inserted due to leakage of hardware into the abstraction. As a consequence, no one parallel programming language maps well to all computation problems. Thus, it is more convenient to use a base sequential language and insert API calls to parallel execution models via a programming model. Such parallel programming models can be classified according to abstractions that reflect the hardware, such as shared memory, distributed memory with message passing, notions of place visible in the code, and so forth. These can be considered flavors of programming paradigm that apply to only parallel languages and programming models.","['parallel', 'computing', 'programming', 'model', 'instead', 'language', 'common', 'reason', 'detail', 'parallel', 'hardware', 'leak', 'abstraction', 'program', 'hardware', 'cause', 'programmer', 'map', 'pattern', 'algorithm', 'pattern', 'execution', 'model', 'insert', 'leakage', 'hardware', 'abstraction', 'consequence', 'parallel', 'programming', 'language', 'map', 'computation', 'problem', 'convenient', 'use', 'base', 'sequential', 'language', 'insert', 'api', 'call', 'parallel', 'execution', 'model', 'programming', 'model', 'parallel', 'programming', 'model', 'classify', 'accord', 'abstraction', 'reflect', 'hardware', 'share', 'memory', 'distribute', 'memory', 'message', 'passing', 'notion', 'place', 'visible', 'code', 'forth', 'consider', 'flavor', 'programming', 'paradigm', 'apply', 'parallel', 'language', 'programming', 'model']"
1769,"Some programming language researchers criticise the notion of paradigms as a classification of programming languages, e.g. Harper,8 and Krishnamurthi.9 They argue that many programming languages cannot be strictly classified into one paradigm, but rather include features from several paradigms. See Comparison of multi-paradigm programming languages.","['programming', 'language', 'researcher', 'criticise', 'notion', 'paradigms', 'classification', 'programming', 'language', 'e.g.', 'harper', 'krishnamurthi', 'argue', 'programming', 'language', 'strictly', 'classify', 'paradigm', 'include', 'feature', 'paradigm', 'comparison', 'multi', 'paradigm', 'programming', 'language']"
1770,"Different approaches to programming have developed over time, being identified as such either at the time or retrospectively. An early approach consciously identified as such is structured programming, advocated since the mid 1960s. The concept of a ""programming paradigm"" as such dates at least to 1978, in the Turing Award lecture of Robert W. Floyd, entitled The Paradigms of Programming, which cites the notion of paradigm as used by Thomas Kuhn in his The Structure of Scientific Revolutions 1962.10","['different', 'approach', 'programming', 'develop', 'time', 'identify', 'time', 'retrospectively', 'early', 'approach', 'consciously', 'identify', 'structure', 'programming', 'advocate', 'mid', '1960', 'concept', 'programming', 'paradigm', 'date', '1978', 'turing', 'award', 'lecture', 'robert', 'floyd', 'entitle', 'paradigms', 'programming', 'cite', 'notion', 'paradigm', 'thomas', 'kuhn', 'structure', 'scientific', 'revolutions', '1962']"
1771,"The lowest-level programming paradigms are machine code, which directly represents the instructions the contents of program memory as a sequence of numbers, and assembly language where the machine instructions are represented by mnemonics and memory addresses can be given symbolic labels. These are sometimes called first- and second-generation languages.","['low', 'level', 'programming', 'paradigm', 'machine', 'code', 'directly', 'represent', 'instruction', 'content', 'program', 'memory', 'sequence', 'number', 'assembly', 'language', 'machine', 'instruction', 'represent', 'mnemonic', 'memory', 'address', 'give', 'symbolic', 'label', 'call', 'first-', 'second', 'generation', 'language']"
1772,"In the 1960s, assembly languages were developed to support library COPY and quite sophisticated conditional macro generation and preprocessing abilities, CALL to subroutines, external variables and common sections globals, enabling significant code re-use and isolation from hardware specifics via the use of logical operators such as READ/WRITE/GET/PUT. Assembly was, and still is, used for time-critical systems and often in embedded systems as it gives the most direct control of what the machine does.","['1960', 'assembly', 'language', 'develop', 'support', 'library', 'copy', 'sophisticated', 'conditional', 'macro', 'generation', 'preprocesse', 'ability', 'subroutine', 'external', 'variable', 'common', 'section', 'global', 'enable', 'significant', 'code', 'use', 'isolation', 'hardware', 'specific', 'use', 'logical', 'operator', 'read', 'write', 'assembly', 'time', 'critical', 'system', 'embed', 'system', 'give', 'direct', 'control', 'machine']"
1773,"The next advance was the development of procedural languages. These third-generation languages the first described as high-level languages use vocabulary related to the problem being solved. For example,","['advance', 'development', 'procedural', 'language', 'generation', 'language', 'describe', 'high', 'level', 'language', 'use', 'vocabulary', 'relate', 'problem', 'solve', 'example']"
1774,"All these languages follow the procedural paradigm. That is, they describe, step by step, exactly the procedure that should, according to the particular programmer at least, be followed to solve a specific problem. The efficacy and efficiency of any such solution are both therefore entirely subjective and highly dependent on that programmer's experience, inventiveness, and ability.","['language', 'follow', 'procedural', 'paradigm', 'describe', 'step', 'step', 'exactly', 'procedure', 'accord', 'particular', 'programmer', 'follow', 'solve', 'specific', 'problem', 'efficacy', 'efficiency', 'solution', 'entirely', 'subjective', 'highly', 'dependent', 'programmer', 'experience', 'inventiveness', 'ability']"
1775,"Following the widespread use of procedural languages, object-oriented programming OOP languages were created, such as Simula, Smalltalk, C++, Eiffel, Python, PHP, Java, and C#. In these languages, data and methods to manipulate it are kept as one unit called an object. With perfect encapsulation, one of the distinguishing features of OOP, the only way that another object or user would be able to access the data is via the object's methods. Thus, an object's inner workings may be changed without affecting any code that uses the object. There is still some controversy raised by Alexander Stepanov, Richard Stallman11 and other programmers, concerning the efficacy of the OOP paradigm versus the procedural paradigm. The need for every object to have associative methods leads some skeptics to associate OOP with software bloat; an attempt to resolve this dilemma came through polymorphism.","['follow', 'widespread', 'use', 'procedural', 'language', 'object', 'orient', 'programming', 'oop', 'language', 'create', 'simula', 'smalltalk', 'c++', 'eiffel', 'python', 'php', 'java', 'language', 'datum', 'method', 'manipulate', 'keep', 'unit', 'call', 'object', 'perfect', 'encapsulation', 'distinguish', 'feature', 'oop', 'way', 'object', 'user', 'able', 'access', 'datum', 'object', 'method', 'object', 'inner', 'working', 'change', 'affect', 'code', 'use', 'object', 'controversy', 'raise', 'alexander', 'stepanov', 'richard', 'stallman11', 'programmer', 'concern', 'efficacy', 'oop', 'paradigm', 'versus', 'procedural', 'paradigm', 'need', 'object', 'associative', 'method', 'lead', 'skeptic', 'associate', 'oop', 'software', 'bloat', 'attempt', 'resolve', 'dilemma', 'come', 'polymorphism']"
1776,"Because object-oriented programming is considered a paradigm, not a language, it is possible to create even an object-oriented assembler language. High Level Assembly HLA is an example of this that fully supports advanced data types and object-oriented assembly language programming – despite its early origins. Thus, differing programming paradigms can be seen rather like motivational memes of their advocates, rather than necessarily representing progress from one level to the nextcitation needed. Precise comparisons of competing paradigms' efficacy are frequently made more difficult because of new and differing terminology applied to similar entities and processes together with numerous implementation distinctions across languages.","['object', 'orient', 'programming', 'consider', 'paradigm', 'language', 'possible', 'create', 'object', 'orient', 'assembler', 'language', 'high', 'level', 'assembly', 'hla', 'example', 'fully', 'support', 'advanced', 'datum', 'type', 'object', 'orient', 'assembly', 'language', 'programming', 'despite', 'early', 'origin', 'differ', 'programming', 'paradigm', 'see', 'like', 'motivational', 'meme', 'advocate', 'necessarily', 'represent', 'progress', 'level', 'nextcitation', 'need', 'precise', 'comparison', 'compete', 'paradigm', 'efficacy', 'frequently', 'difficult', 'new', 'differing', 'terminology', 'apply', 'similar', 'entity', 'process', 'numerous', 'implementation', 'distinction', 'language']"
1777,"Literate programming, as a form of imperative programming, structures programs as a human-centered web, as in a hypertext essay: documentation is integral to the program, and the program is structured following the logic of prose exposition, rather than compiler convenience.","['literate', 'programming', 'form', 'imperative', 'programming', 'structure', 'program', 'human', 'center', 'web', 'hypertext', 'essay', 'documentation', 'integral', 'program', 'program', 'structure', 'follow', 'logic', 'prose', 'exposition', 'compiler', 'convenience']"
1778,"Independent of the imperative branch, declarative programming paradigms were developed. In these languages, the computer is told what the problem is, not how to solve the problem – the program is structured as a set of properties to find in the expected result, not as a procedure to follow. Given a database or a set of rules, the computer tries to find a solution matching all the desired properties. An archetype of a declarative language is the fourth generation language SQL, and the family of functional languages and logic programming.","['independent', 'imperative', 'branch', 'declarative', 'programming', 'paradigm', 'develop', 'language', 'computer', 'tell', 'problem', 'solve', 'problem', 'program', 'structure', 'set', 'property', 'find', 'expected', 'result', 'procedure', 'follow', 'give', 'database', 'set', 'rule', 'computer', 'try', 'find', 'solution', 'match', 'desire', 'property', 'archetype', 'declarative', 'language', 'fourth', 'generation', 'language', 'sql', 'family', 'functional', 'language', 'logic', 'programming']"
1779,"Functional programming is a subset of declarative programming. Programs written using this paradigm use functions, blocks of code intended to behave like mathematical functions. Functional languages discourage changes in the value of variables through assignment, making a great deal of use of recursion instead.","['functional', 'programming', 'subset', 'declarative', 'programming', 'programs', 'write', 'paradigm', 'use', 'function', 'block', 'code', 'intend', 'behave', 'like', 'mathematical', 'function', 'functional', 'language', 'discourage', 'change', 'value', 'variable', 'assignment', 'make', 'great', 'deal', 'use', 'recursion', 'instead']"
1780,"The logic programming paradigm views computation as automated reasoning over a body of knowledge. Facts about the problem domain are expressed as logic formulas, and programs are executed by applying inference rules over them until an answer to the problem is found, or the set of formulas is proved inconsistent.","['logic', 'programming', 'paradigm', 'view', 'computation', 'automate', 'reasoning', 'body', 'knowledge', 'fact', 'problem', 'domain', 'express', 'logic', 'formula', 'program', 'execute', 'apply', 'inference', 'rule', 'answer', 'problem', 'find', 'set', 'formula', 'prove', 'inconsistent']"
1781,"Symbolic programming is a paradigm that describes programs able to manipulate formulas and program components as data.3 Programs can thus effectively modify themselves, and appear to ""learn"", making them suited for applications such as artificial intelligence, expert systems, natural-language processing and computer games. Languages that support this paradigm include Lisp and Prolog.12","['symbolic', 'programming', 'paradigm', 'describe', 'program', 'able', 'manipulate', 'formula', 'program', 'component', 'data', 'programs', 'effectively', 'modify', 'appear', 'learn', 'make', 'suited', 'application', 'artificial', 'intelligence', 'expert', 'system', 'natural', 'language', 'processing', 'computer', 'game', 'language', 'support', 'paradigm', 'include', 'lisp', 'prolog']"
1782,"Differentiable programming structures programs so that they can be differentiated throughout, usually via automatic differentiation.1314","['differentiable', 'programming', 'structure', 'program', 'differentiate', 'usually', 'automatic', 'differentiation']"
1783,Most programming languages support more than one programming paradigm to allow programmers to use the most suitable programming style and associated language constructs for a given job.15,"['programming', 'language', 'support', 'programming', 'paradigm', 'allow', 'programmer', 'use', 'suitable', 'programming', 'style', 'associate', 'language', 'construct', 'give', 'job']"
1784,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1785,"In object-oriented and functional programming, an immutable object unchangeable1 object is an object whose state cannot be modified after it is created.2 This is in contrast to a mutable object changeable object, which can be modified after it is created. 3 In some cases, an object is considered immutable even if some internally used attributes change, but the object's state appears unchanging from an external point of view. For example, an object that uses memoization to cache the results of expensive computations could still be considered an immutable object.","['object', 'orient', 'functional', 'programming', 'immutable', 'object', 'unchangeable1', 'object', 'object', 'state', 'modify', 'created', 'contrast', 'mutable', 'object', 'changeable', 'object', 'modify', 'create', 'case', 'object', 'consider', 'immutable', 'internally', 'attribute', 'change', 'object', 'state', 'appear', 'unchanging', 'external', 'point', 'view', 'example', 'object', 'use', 'memoization', 'cache', 'result', 'expensive', 'computation', 'consider', 'immutable', 'object']"
1786,Strings and other concrete objects are typically expressed as immutable objects to improve readability and runtime efficiency in object-oriented programming. Immutable objects are also useful because they are inherently thread-safe.2 Other benefits are that they are simpler to understand and reason about and offer higher security than mutable objects.2,"['string', 'concrete', 'object', 'typically', 'express', 'immutable', 'object', 'improve', 'readability', 'runtime', 'efficiency', 'object', 'orient', 'programming', 'immutable', 'object', 'useful', 'inherently', 'thread', 'safe', 'benefit', 'simple', 'understand', 'reason', 'offer', 'high', 'security', 'mutable', 'objects']"
1787,"In imperative programming, values held in program variables whose content never changes are known as constants to differentiate them from variables that could be altered during execution. Examples include conversion factors from meters to feet, or the value of pi to several decimal places.","['imperative', 'programming', 'value', 'hold', 'program', 'variable', 'content', 'change', 'know', 'constant', 'differentiate', 'variable', 'alter', 'execution', 'example', 'include', 'conversion', 'factor', 'meter', 'foot', 'value', 'decimal', 'place']"
1788,"Read-only fields may be calculated when the program runs unlike constants, which are known beforehand, but never change after they are initialized.","['read', 'field', 'calculate', 'program', 'run', 'unlike', 'constant', 'know', 'change', 'initialize']"
1789,"Sometimes, one talks of certain fields of an object being immutable. This means that there is no way to change those parts of the object state, even though other parts of the object may be changeable weakly immutable. If all fields are immutable, then the object is immutable. If the whole object cannot be extended by another class, the object is called strongly immutable.4 This might, for example, help to explicitly enforce certain invariants about certain data in the object staying the same through the lifetime of the object. In some languages, this is done with a keyword e.g. const in C++, final in Java that designates the field as immutable. Some languages reverse it: in OCaml, fields of an object or record are by default immutable, and must be explicitly marked with mutable to be so.","['talk', 'certain', 'field', 'object', 'immutable', 'mean', 'way', 'change', 'part', 'object', 'state', 'part', 'object', 'changeable', 'weakly', 'immutable', 'field', 'immutable', 'object', 'immutable', 'object', 'extend', 'class', 'object', 'call', 'strongly', 'immutable', 'example', 'help', 'explicitly', 'enforce', 'certain', 'invariant', 'certain', 'datum', 'object', 'stay', 'lifetime', 'object', 'language', 'keyword', 'e.g.', 'const', 'c++', 'final', 'java', 'designate', 'field', 'immutable', 'language', 'reverse', 'ocaml', 'field', 'object', 'record', 'default', 'immutable', 'explicitly', 'mark', 'mutable']"
1790,"In most object-oriented languages, objects can be referred to using references. Some examples of such languages are Java, C++, C#, VB.NET, and many scripting languages, such as Perl, Python, and Ruby. In this case, it matters whether the state of an object can vary when objects are shared via references.","['object', 'orient', 'language', 'object', 'refer', 'reference', 'example', 'language', 'java', 'c++', 'vb.net', 'scripting', 'language', 'perl', 'python', 'ruby', 'case', 'matter', 'state', 'object', 'vary', 'object', 'share', 'reference']"
1791,"If an object is known to be immutable, it is preferred to create a reference of it instead of copying the entire object. This is done to conserve memory by preventing data duplication and avoid calls to constructors and destructors; it also results in a potential boost in execution speed.","['object', 'know', 'immutable', 'preferred', 'create', 'reference', 'instead', 'copy', 'entire', 'object', 'conserve', 'memory', 'prevent', 'data', 'duplication', 'avoid', 'call', 'constructor', 'destructor', 'result', 'potential', 'boost', 'execution', 'speed']"
1792,"The reference copying technique is much more difficult to use for mutable objects, because if any user of a mutable object reference changes it, all other users of that reference see the change. If this is not the intended effect, it can be difficult to notify the other users to have them respond correctly. In these situations, defensive copying of the entire object rather than the reference is usually an easy but costly solution. The observer pattern is an alternative technique for handling changes to mutable objects.","['reference', 'copying', 'technique', 'difficult', 'use', 'mutable', 'object', 'user', 'mutable', 'object', 'reference', 'change', 'user', 'reference', 'change', 'intend', 'effect', 'difficult', 'notify', 'user', 'respond', 'correctly', 'situation', 'defensive', 'copying', 'entire', 'object', 'reference', 'usually', 'easy', 'costly', 'solution', 'observer', 'pattern', 'alternative', 'technique', 'handle', 'change', 'mutable', 'object']"
1793,"A technique that blends the advantages of mutable and immutable objects, and is supported directly in almost all modern hardware, is copy-on-write COW. Using this technique, when a user asks the system to copy an object, it instead merely creates a new reference that still points to the same object. As soon as a user attempts to modify the object through a particular reference, the system makes a real copy, applies the modification to that, and sets the reference to refer to the new copy. The other users are unaffected, because they still refer to the original object. Therefore, under COW, all users appear to have a mutable version of their objects, although in the case that users do not modify their objects, the space-saving and speed advantages of immutable objects are preserved. Copy-on-write is popular in virtual memory systems because it allows them to save memory space while still correctly handling anything an application program might do.","['technique', 'blend', 'advantage', 'mutable', 'immutable', 'object', 'support', 'directly', 'modern', 'hardware', 'copy', 'write', 'cow', 'technique', 'user', 'ask', 'system', 'copy', 'object', 'instead', 'merely', 'create', 'new', 'reference', 'point', 'object', 'soon', 'user', 'attempt', 'modify', 'object', 'particular', 'reference', 'system', 'make', 'real', 'copy', 'apply', 'modification', 'set', 'reference', 'refer', 'new', 'copy', 'user', 'unaffected', 'refer', 'original', 'object', 'cow', 'user', 'appear', 'mutable', 'version', 'object', 'case', 'user', 'modify', 'object', 'space', 'save', 'speed', 'advantage', 'immutable', 'object', 'preserve', 'copy', 'write', 'popular', 'virtual', 'memory', 'system', 'allow', 'save', 'memory', 'space', 'correctly', 'handle', 'application', 'program']"
1794,"The practice of always using references in place of copies of equal objects is known as interning. If interning is used, two objects are considered equal if and only if their references, typically represented as pointers or integers, are equal. Some languages do this automatically: for example, Python automatically interns short strings. If the algorithm that implements interning is guaranteed to do so in every case that it is possible, then comparing objects for equality is reduced to comparing their pointers – a substantial gain in speed in most applications. Even if the algorithm is not guaranteed to be comprehensive, there still exists the possibility of a fast path case improvement when the objects are equal and use the same reference. Interning is generally only useful for immutable objects.","['practice', 'reference', 'place', 'copy', 'equal', 'object', 'know', 'intern', 'intern', 'object', 'consider', 'equal', 'reference', 'typically', 'represent', 'pointer', 'integer', 'equal', 'language', 'automatically', 'example', 'python', 'automatically', 'intern', 'short', 'string', 'algorithm', 'implement', 'intern', 'guarantee', 'case', 'possible', 'compare', 'object', 'equality', 'reduce', 'compare', 'pointer', 'substantial', 'gain', 'speed', 'application', 'algorithm', 'guarantee', 'comprehensive', 'exist', 'possibility', 'fast', 'path', 'case', 'improvement', 'object', 'equal', 'use', 'reference', 'intern', 'generally', 'useful', 'immutable', 'object']"
1795,Immutable objects can be useful in multi-threaded applications. Multiple threads can act on data represented by immutable objects without concern of the data being changed by other threads. Immutable objects are therefore considered more thread-safe than mutable objects.,"['immutable', 'object', 'useful', 'multi', 'threaded', 'application', 'multiple', 'thread', 'act', 'datum', 'represent', 'immutable', 'object', 'concern', 'datum', 'change', 'thread', 'immutable', 'object', 'consider', 'thread', 'safe', 'mutable', 'object']"
1796,"Immutability does not imply that the object as stored in the computer's memory is unwriteable. Rather, immutability is a compile-time construct that indicates what a programmer can do through the normal interface of the object, not necessarily what they can absolutely do for instance, by circumventing the type system or violating const correctness in C or C++.","['immutability', 'imply', 'object', 'store', 'computer', 'memory', 'unwriteable', 'immutability', 'compile', 'time', 'construct', 'indicate', 'programmer', 'normal', 'interface', 'object', 'necessarily', 'absolutely', 'instance', 'circumvent', 'type', 'system', 'violate', 'const', 'correctness', 'c++']"
1797,"In Python, Java and the .NET Framework, strings are immutable objects. Both Java and the .NET Framework have mutable versions of string. In Java these are StringBuffer and StringBuilder mutable versions of Java String and in .NET this is StringBuilder mutable version of .Net String. Python 3 has a mutable string bytes variant, named bytearray.5","['python', 'java', '.net', 'framework', 'string', 'immutable', 'object', 'java', '.net', 'framework', 'mutable', 'version', 'string', 'java', 'stringbuffer', 'stringbuilder', 'mutable', 'version', 'java', 'string', '.net', 'stringbuilder', 'mutable', 'version', '.net', 'string', 'python', 'mutable', 'string', 'byte', 'variant', 'name', 'bytearray']"
1798,"Additionally, all of the primitive wrapper classes in Java are immutable.","['additionally', 'primitive', 'wrapper', 'class', 'java', 'immutable']"
1799,Similar patterns are the Immutable Interface and Immutable Wrapper.,"['similar', 'pattern', 'immutable', 'interface', 'immutable', 'wrapper']"
1800,"In pure functional programming languages it is not possible to create mutable objects without extending the language e.g. via a mutable references library or a foreign function interface, so all objects are immutable.","['pure', 'functional', 'programming', 'language', 'possible', 'create', 'mutable', 'object', 'extend', 'language', 'e.g.', 'mutable', 'reference', 'library', 'foreign', 'function', 'interface', 'object', 'immutable']"
1801,"In Ada, any object is declared either variable i.e. mutable; typically the implicit default, or constant i.e. immutable via the constant keyword.","['ada', 'object', 'declare', 'variable', 'i.e.', 'mutable', 'typically', 'implicit', 'default', 'constant', 'i.e.', 'immutable', 'constant', 'keyword']"
1802,"Subprogram parameters are immutable in the in mode, and mutable in the in out and out modes.","['subprogram', 'parameter', 'immutable', 'mode', 'mutable', 'mode']"
1803,"In C# you can enforce immutability of the fields of a class with the readonly statement. By enforcing all the fields as immutable, you obtain an immutable type.","['enforce', 'immutability', 'field', 'class', 'readonly', 'statement', 'enforce', 'field', 'immutable', 'obtain', 'immutable', 'type']"
1804,"In C++, a const-correct implementation of Cart would allow the user to create instances of the class and then use them as either const immutable or mutable, as desired, by providing two different versions of the items method. Notice that in C++ it is not necessary — and in fact impossible — to provide a specialized constructor for const instances.","['c++', 'const', 'correct', 'implementation', 'cart', 'allow', 'user', 'create', 'instance', 'class', 'use', 'const', 'immutable', 'mutable', 'desire', 'provide', 'different', 'version', 'item', 'method', 'notice', 'c++', 'necessary', 'fact', 'impossible', 'provide', 'specialized', 'constructor', 'const', 'instance']"
1805,"Note that, when there is a data member that is a pointer or reference to another object, then it is possible to mutate the object pointed to or referenced only within a non-const method.","['note', 'data', 'member', 'pointer', 'reference', 'object', 'possible', 'mutate', 'object', 'point', 'reference', 'non', 'const', 'method']"
1806,"C++ also provides abstract as opposed to bitwise immutability via the mutable keyword, which lets a member variable be changed from within a const method.","['c++', 'provide', 'abstract', 'oppose', 'bitwise', 'immutability', 'mutable', 'keyword', 'let', 'member', 'variable', 'change', 'const', 'method']"
1807,"In D, there exist two type qualifiers, const and immutable, for variables that cannot be changed.6 Unlike C++'s const, Java's final, and C#'s readonly, they are transitive and recursively apply to anything reachable through references of such a variable. The difference between const and immutable is what they apply to: const is a property of the variable: there might legally exist mutable references to referred value, i.e. the value can actually change. In contrast, immutable is a property of the referred value: the value and anything transitively reachable from it cannot change without breaking the type system, leading to undefined behavior. Any reference of that value must be marked const or immutable. Basically for any unqualified type T, constT is the disjoint union of T mutable and immutableT.","['exist', 'type', 'qualifier', 'const', 'immutable', 'variable', 'changed', 'unlike', 'c++', 'const', 'java', 'final', 'readonly', 'transitive', 'recursively', 'apply', 'reachable', 'reference', 'variable', 'difference', 'const', 'immutable', 'apply', 'const', 'property', 'variable', 'legally', 'exist', 'mutable', 'reference', 'refer', 'value', 'i.e.', 'value', 'actually', 'change', 'contrast', 'immutable', 'property', 'refer', 'value', 'value', 'transitively', 'reachable', 'change', 'break', 'type', 'system', 'lead', 'undefined', 'behavior', 'reference', 'value', 'mark', 'const', 'immutable', 'basically', 'unqualified', 'type', 'constt', 'disjoint', 'union', 'mutable', 'immutablet.']"
1808,"For a mutable C object, its mField can be written to. For a constC object, mField cannot be modified, it inherits const; iField is still immutable as it is the stronger guarantee. For an immutableC, all fields are immutable.","['mutable', 'object', 'mfield', 'write', 'constc', 'object', 'mfield', 'modify', 'inherit', 'const', 'ifield', 'immutable', 'strong', 'guarantee', 'immutablec', 'field', 'immutable']"
1809,"Inside the braces, c might refer to the same object as m, so mutations to m could indirectly change c as well. Also, c might refer to the same object as i, but since the value then is immutable, there are no changes. However, m and i cannot legally refer to the same object.","['inside', 'brace', 'refer', 'object', 'mutation', 'indirectly', 'change', 'refer', 'object', 'value', 'immutable', 'change', 'legally', 'refer', 'object']"
1810,"In the language of guarantees, mutable has no guarantees the function might change the object, const is an outward-only guarantee that the function will not change anything, and immutable is a bidirectional guarantee the function will not change the value and the caller must not change it.","['language', 'guarantee', 'mutable', 'guarantee', 'function', 'change', 'object', 'const', 'outward', 'guarantee', 'function', 'change', 'immutable', 'bidirectional', 'guarantee', 'function', 'change', 'value', 'caller', 'change']"
1811,Values that are const or immutable must be initialized by direct assignment at the point of declaration or by a constructor.,"['value', 'const', 'immutable', 'initialize', 'direct', 'assignment', 'point', 'declaration', 'constructor']"
1812,"Because const parameters forget if the value was mutable or not, a similar construct, inout, acts, in a sense, as a variable for mutability information. A function of type constS functionconstT returns constS typed values for mutable, const and immutable arguments. In contrast, a function of type inoutS functioninoutT returns S for mutable T arguments, constS for constT values, and immutableS for immutableT values.","['const', 'parameter', 'forget', 'value', 'mutable', 'similar', 'construct', 'inout', 'act', 'sense', 'variable', 'mutability', 'information', 'function', 'type', 'consts', 'functionconstt', 'return', 'consts', 'type', 'value', 'mutable', 'const', 'immutable', 'argument', 'contrast', 'function', 'type', 'inouts', 'functioninoutt', 'return', 'mutable', 'argument', 'consts', 'constt', 'value', 'immutables', 'immutablet', 'value']"
1813,"Casting immutable values to mutable inflicts undefined behavior upon change, even if the original value comes from a mutable origin. Casting mutable values to immutable can be legal when there remain no mutable references afterward. ""An expression may be converted from mutable ... to immutable if the expression is unique and all expressions it transitively refers to are either unique or immutable.""6 If the compiler cannot prove uniqueness, the casting can be done explicitly and it is up to the programmer to ensure that no mutable references exist.","['cast', 'immutable', 'value', 'mutable', 'inflict', 'undefined', 'behavior', 'change', 'original', 'value', 'come', 'mutable', 'origin', 'cast', 'mutable', 'value', 'immutable', 'legal', 'remain', 'mutable', 'reference', 'afterward', 'expression', 'convert', 'mutable', 'immutable', 'expression', 'unique', 'expression', 'transitively', 'refer', 'unique', 'immutable', 'compiler', 'prove', 'uniqueness', 'casting', 'explicitly', 'programmer', 'ensure', 'mutable', 'reference', 'exist']"
1814,"The type string is an alias for immutablechar, i.e. a typed slice of memory of immutable characters.7 Making substrings is cheap, as it just copies and modifies a pointer and a length filed, and safe, as the underlying data cannot be changed. Objects of type constchar can refer to strings, but also to mutable buffers.","['type', 'string', 'alias', 'immutablechar', 'i.e.', 'type', 'slice', 'memory', 'immutable', 'characters', 'make', 'substring', 'cheap', 'copy', 'modify', 'pointer', 'length', 'file', 'safe', 'underlie', 'datum', 'change', 'object', 'type', 'constchar', 'refer', 'string', 'mutable', 'buffer']"
1815,"Making a shallow copy of a const or immutable value removes the outer layer of immutability: Copying an immutable string immutablechar returns a string immutablechar. The immutable pointer and length are being copied and the copies are mutable. The referred data has not been copied and keeps its qualifier, in the example immutable. It can be stripped by making a depper copy, e.g. using the dup function.","['make', 'shallow', 'copy', 'const', 'immutable', 'value', 'remove', 'outer', 'layer', 'immutability', 'copy', 'immutable', 'string', 'immutablechar', 'return', 'string', 'immutablechar', 'immutable', 'pointer', 'length', 'copy', 'copy', 'mutable', 'refer', 'data', 'copy', 'keep', 'qualifi', 'example', 'immutable', 'strip', 'make', 'depper', 'copy', 'e.g.', 'dup', 'function']"
1816,A classic example of an immutable object is an instance of the Java String class,"['classic', 'example', 'immutable', 'object', 'instance', 'java', 'string', 'class']"
1817,"The method toLowerCase does not change the data ""ABC"" that s contains. Instead, a new String object is instantiated and given the data ""abc"" during its construction. A reference to this String object is returned by the toLowerCase method. To make the String s contain the data ""abc"", a different approach is needed:","['method', 'tolowercase', 'change', 'datum', 'abc', 'contain', 'instead', 'new', 'string', 'object', 'instantiate', 'give', 'datum', 'abc', 'construction', 'reference', 'string', 'object', 'return', 'tolowercase', 'method', 'string', 'contain', 'datum', 'abc', 'different', 'approach', 'need']"
1818,"Now the String s references a new String object that contains ""abc"". There is nothing in the syntax of the declaration of the class String that enforces it as immutable; rather, none of the String class's methods ever affect the data that a String object contains, thus making it immutable.","['string', 'reference', 'new', 'string', 'object', 'contain', 'abc', 'syntax', 'declaration', 'class', 'string', 'enforce', 'immutable', 'string', 'class', 'method', 'affect', 'datum', 'string', 'object', 'contain', 'make', 'immutable']"
1819,"The keyword final detailed article is used in implementing immutable primitive types and object references,8 but it cannot, by itself, make the objects themselves immutable. See below examples:","['keyword', 'final', 'detailed', 'article', 'implement', 'immutable', 'primitive', 'type', 'object', 'references', 'object', 'immutable', 'example']"
1820,"Primitive type variables int, long, short, etc. can be reassigned after being defined. This can be prevented by using final.","['primitive', 'type', 'variable', 'int', 'long', 'short', 'etc', 'reassign', 'define', 'prevent', 'final']"
1821,Reference types cannot be made immutable just by using the final keyword. final only prevents reassignment.,"['reference', 'type', 'immutable', 'final', 'keyword', 'final', 'prevent', 'reassignment']"
1822,"Primitive wrappers Integer, Long, Short, Double, Float, Character, Byte, Boolean are also all immutable. Immutable classes can be implemented by following a few simple guidelines.9","['primitive', 'wrapper', 'integer', 'long', 'short', 'double', 'float', 'character', 'byte', 'boolean', 'immutable', 'immutable', 'class', 'implement', 'follow', 'simple', 'guidelines']"
1823,"In JavaScript, all primitive types Undefined, Null, Boolean, Number, BigInt, String, Symbol are immutable, but custom objects are generally mutable.","['javascript', 'primitive', 'type', 'undefined', 'null', 'boolean', 'number', 'bigint', 'string', 'symbol', 'immutable', 'custom', 'object', 'generally', 'mutable']"
1824,"To simulate immutability in an object, one may define properties as read-only writable: false.","['simulate', 'immutability', 'object', 'define', 'property', 'read', 'writable', 'false']"
1825,"However, the approach above still lets new properties be added. Alternatively, one may use Object.freeze to make existing objects immutable.","['approach', 'let', 'new', 'property', 'add', 'alternatively', 'use', 'object.freeze', 'exist', 'object', 'immutable']"
1826,"With the implementation of ECMA262, JavaScript has the ability to create immutable references that cannot be reassigned. However, using a const declaration doesn't mean that value of the read-only reference is immutable, just that the name cannot be assigned to a new value.","['implementation', 'ecma262', 'javascript', 'ability', 'create', 'immutable', 'reference', 'reassign', 'const', 'declaration', 'mean', 'value', 'read', 'reference', 'immutable', 'assign', 'new', 'value']"
1827,"The use of immutable state has become a rising trend in JavaScript since the introduction of React, which favours Flux-like state management patterns such as Redux.10","['use', 'immutable', 'state', 'rise', 'trend', 'javascript', 'introduction', 'react', 'favour', 'flux', 'like', 'state', 'management', 'pattern', 'redux']"
1828,"In Perl, one can create an immutable class with the Moo library by simply declaring all the attributes read only:","['perl', 'create', 'immutable', 'class', 'moo', 'library', 'simply', 'declare', 'attribute', 'read']"
1829,"Creating an immutable class used to require two steps: first, creating accessors either automatically or manually that prevent modification of object attributes, and secondly, preventing direct modification of the instance data of instances of that class this was usually stored in a hash reference, and could be locked with Hash::Util's lock_hash function:","['create', 'immutable', 'class', 'require', 'step', 'create', 'accessor', 'automatically', 'manually', 'prevent', 'modification', 'object', 'attribute', 'secondly', 'prevent', 'direct', 'modification', 'instance', 'datum', 'instance', 'class', 'usually', 'store', 'hash', 'reference', 'lock', 'hash::util', 'lock_hash', 'function']"
1830,"Or, with a manually written accessor:","['manually', 'write', 'accessor']"
1831,"In Python, some built-in types numbers, booleans, strings, tuples, frozensets are immutable, but custom classes are generally mutable. To simulate immutability in a class, one could override attribute setting and deletion to raise exceptions:","['python', 'build', 'type', 'number', 'boolean', 'string', 'tuple', 'frozenset', 'immutable', 'custom', 'class', 'generally', 'mutable', 'simulate', 'immutability', 'class', 'override', 'attribute', 'setting', 'deletion', 'raise', 'exception']"
1832,"The standard library helpers collections.namedtuple and typing.NamedTuple, available from Python 3.6 onward, create simple immutable classes. The following example is roughly equivalent to the above, plus some tuple-like features:","['standard', 'library', 'helper', 'collections.namedtuple', 'type', 'namedtuple', 'available', 'python', '3', 'onward', 'create', 'simple', 'immutable', 'class', 'follow', 'example', 'roughly', 'equivalent', 'plus', 'tuple', 'like', 'feature']"
1833,"Introduced in Python 3.7, dataclasses allow developers to emulate immutability with frozen instances. If a frozen dataclass is built, dataclasses will override __setattr__ and __delattr__ to raise FrozenInstanceError if invoked.","['introduce', 'python', '3', 'dataclasse', 'allow', 'developer', 'emulate', 'immutability', 'frozen', 'instance', 'frozen', 'dataclass', 'build', 'dataclasse', 'override', 'setattr', 'delattr', 'raise', 'frozeninstanceerror', 'invoke']"
1834,"Racket substantially diverges from other Scheme implementations by making its core pair type ""cons cells"" immutable. Instead, it provides a parallel mutable pair type, via mcons, mcar, set-mcar! etc. In addition, many immutable types are supported, for example, immutable strings and vectors, and these are used extensively. New structs are immutable by default, unless a field is specifically declared mutable, or the whole struct:","['racket', 'substantially', 'diverge', 'scheme', 'implementation', 'make', 'core', 'pair', 'type', 'con', 'cell', 'immutable', 'instead', 'provide', 'parallel', 'mutable', 'pair', 'type', 'mcon', 'mcar', 'set', 'mcar', 'etc', 'addition', 'immutable', 'type', 'support', 'example', 'immutable', 'string', 'vector', 'extensively', 'new', 'struct', 'immutable', 'default', 'field', 'specifically', 'declare', 'mutable', 'struct']"
1835,"The language also supports immutable hash tables, implemented functionally, and immutable dictionaries.","['language', 'support', 'immutable', 'hash', 'table', 'implement', 'functionally', 'immutable', 'dictionary']"
1836,"Rust's ownership system allows developers to declare immutable variables, and pass immutable references. By default, all variables and references are immutable. Mutable variables and references are explicitly created with the mut keyword.","['rust', 'ownership', 'system', 'allow', 'developer', 'declare', 'immutable', 'variable', 'pass', 'immutable', 'reference', 'default', 'variable', 'reference', 'immutable', 'mutable', 'variable', 'reference', 'explicitly', 'create', 'mut', 'keyword']"
1837,Constant items in Rust are always immutable.,"['constant', 'item', 'rust', 'immutable']"
1838,"In Scala, any entity narrowly, a binding can be defined as mutable or immutable: in the declaration, one can use val value for immutable entities and var variable for mutable ones. Note that even though an immutable binding can not be reassigned, it may still refer to a mutable object and it is still possible to call mutating methods on that object: the binding is immutable, but the underlying object may be mutable.","['scala', 'entity', 'narrowly', 'binding', 'define', 'mutable', 'immutable', 'declaration', 'use', 'val', 'value', 'immutable', 'entity', 'var', 'variable', 'mutable', 'one', 'note', 'immutable', 'binding', 'reassign', 'refer', 'mutable', 'object', 'possible', 'mutating', 'method', 'object', 'binding', 'immutable', 'underlying', 'object', 'mutable']"
1839,"For example, the following code snippet:","['example', 'follow', 'code', 'snippet']"
1840,defines an immutable entity maxValue the integer type is inferred at compile-time and a mutable entity named currentValue.,"['define', 'immutable', 'entity', 'maxvalue', 'integer', 'type', 'infer', 'compile', 'time', 'mutable', 'entity', 'name', 'currentvalue']"
1841,"By default, collection classes such as List and Map are immutable, so update-methods return a new instance rather than mutating an existing one. While this may sound inefficient, the implementation of these classes and their guarantees of immutability mean that the new instance can re-use existing nodes, which, especially in the case of creating copies, is very efficient.11better source needed","['default', 'collection', 'class', 'list', 'map', 'immutable', 'update', 'method', 'return', 'new', 'instance', 'mutate', 'exist', 'sound', 'inefficient', 'implementation', 'class', 'guarantee', 'immutability', 'mean', 'new', 'instance', 'use', 'exist', 'node', 'especially', 'case', 'create', 'copy', 'efficientbetter', 'source', 'need']"
1842,This article contains some material from the Perl Design Patterns Book,"['article', 'contain', 'material', 'perl', 'design', 'patterns', 'book']"
1843,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1844,"In computer science, information hiding is the principle of segregation of the design decisions in a computer program that are most likely to change, thus protecting other parts of the program from extensive modification if the design decision is changed. The protection involves providing a stable interface which protects the remainder of the program from the implementation whose details are likely to change. Written in another way, information hiding is the ability to prevent certain aspects of a class or software component from being accessible to its clients, using either programming language features like private variables or an explicit exporting policy.","['computer', 'science', 'information', 'hiding', 'principle', 'segregation', 'design', 'decision', 'computer', 'program', 'likely', 'change', 'protect', 'part', 'program', 'extensive', 'modification', 'design', 'decision', 'change', 'protection', 'involve', 'provide', 'stable', 'interface', 'protect', 'remainder', 'program', 'implementation', 'detail', 'likely', 'change', 'write', 'way', 'information', 'hiding', 'ability', 'prevent', 'certain', 'aspect', 'class', 'software', 'component', 'accessible', 'client', 'programming', 'language', 'feature', 'like', 'private', 'variable', 'explicit', 'export', 'policy']"
1845,"The term encapsulation is often used interchangeably with information hiding. Not all agree on the distinctions between the two, though; one may think of information hiding as being the principle and encapsulation being the technique. A software module hides information by encapsulating the information into a module or other construct which presents an interface.1","['term', 'encapsulation', 'interchangeably', 'information', 'hiding', 'agree', 'distinction', 'think', 'information', 'hide', 'principle', 'encapsulation', 'technique', 'software', 'module', 'hide', 'information', 'encapsulate', 'information', 'module', 'construct', 'present', 'interface']"
1846,"A common use of information hiding is to hide the physical storage layout for data so that if it is changed, the change is restricted to a small subset of the total program. For example, if a three-dimensional point x, y, z is represented in a program with three floating-point scalar variables and later, the representation is changed to a single array variable of size three, a module designed with information hiding in mind would protect the remainder of the program from such a change.","['common', 'use', 'information', 'hiding', 'hide', 'physical', 'storage', 'layout', 'datum', 'change', 'change', 'restrict', 'small', 'subset', 'total', 'program', 'example', 'dimensional', 'point', 'represent', 'program', 'float', 'point', 'scalar', 'variable', 'later', 'representation', 'change', 'single', 'array', 'variable', 'size', 'module', 'design', 'information', 'hiding', 'mind', 'protect', 'remainder', 'program', 'change']"
1847,"In object-oriented programming, information hiding by way of nesting of types reduces software development risk by shifting the code's dependency on an uncertain implementation design decision onto a well-defined interface. Clients of the interface perform operations purely through the interface, so, if the implementation changes, the clients do not have to change.","['object', 'orient', 'programming', 'information', 'hiding', 'way', 'nesting', 'type', 'reduce', 'software', 'development', 'risk', 'shift', 'code', 'dependency', 'uncertain', 'implementation', 'design', 'decision', 'define', 'interface', 'client', 'interface', 'perform', 'operation', 'purely', 'interface', 'implementation', 'change', 'client', 'change']"
1848,"In his book on object-oriented design, Grady Booch defined encapsulation as ""the process of compartmentalizing the elements of an abstraction that constitute its structure and behavior; encapsulation serves to separate the contractual interface of an abstraction and its implementation.""2","['book', 'object', 'orient', 'design', 'grady', 'booch', 'define', 'encapsulation', 'process', 'compartmentalize', 'element', 'abstraction', 'constitute', 'structure', 'behavior', 'encapsulation', 'serve', 'separate', 'contractual', 'interface', 'abstraction', 'implementation']"
1849,"The purpose is to achieve the potential for change: the internal mechanisms of the component can be improved without impact on other components, or the component can be replaced with a different one that supports the same public interface. Encapsulation also protects the integrity of the component, by preventing users from setting the internal data of the component into an invalid or inconsistent state. Another benefit of encapsulation is that it reduces system complexity and thus increases robustness, by limiting the interdependencies between software components.2","['purpose', 'achieve', 'potential', 'change', 'internal', 'mechanism', 'component', 'improve', 'impact', 'component', 'component', 'replace', 'different', 'support', 'public', 'interface', 'encapsulation', 'protect', 'integrity', 'component', 'prevent', 'user', 'set', 'internal', 'datum', 'component', 'invalid', 'inconsistent', 'state', 'benefit', 'encapsulation', 'reduce', 'system', 'complexity', 'increase', 'robustness', 'limit', 'interdependency', 'software', 'components']"
1850,"In this sense, the idea of encapsulation is more general than how it is applied in object-oriented programming. For example, a relational database is encapsulated in the sense that its only public interface is a query language such as SQL, which hides all the internal machinery and data structures of the database management system. As such, encapsulation is a core principle of good software architecture, at every level of granularity.","['sense', 'idea', 'encapsulation', 'general', 'apply', 'object', 'orient', 'programming', 'example', 'relational', 'database', 'encapsulate', 'sense', 'public', 'interface', 'query', 'language', 'sql', 'hide', 'internal', 'machinery', 'datum', 'structure', 'database', 'management', 'system', 'encapsulation', 'core', 'principle', 'good', 'software', 'architecture', 'level', 'granularity']"
1851,"Encapsulating software behind an interface allows the construction of objects that mimic the behavior and interactions of objects in the real world. For example, a simple digital alarm clock is a real-world object that a layperson can use and understand. They can understand what the alarm clock does, and how to use it through the provided interface buttons and screen, without having to understand every part inside of the clock. Similarly, if the clock were replaced by a different model, the layperson could continue to use it in the same way, provided that the interface works the same.","['encapsulate', 'software', 'interface', 'allow', 'construction', 'object', 'mimic', 'behavior', 'interaction', 'object', 'real', 'world', 'example', 'simple', 'digital', 'alarm', 'clock', 'real', 'world', 'object', 'layperson', 'use', 'understand', 'understand', 'alarm', 'clock', 'use', 'provide', 'interface', 'button', 'screen', 'have', 'understand', 'inside', 'clock', 'similarly', 'clock', 'replace', 'different', 'model', 'layperson', 'continue', 'use', 'way', 'provide', 'interface', 'work']"
1852,"In the more concrete setting of an object-oriented programming language, the notion is used to mean either an information hiding mechanism, a bundling mechanism, or the combination of the two. See Encapsulation object-oriented programming for details.","['concrete', 'setting', 'object', 'orient', 'programming', 'language', 'notion', 'mean', 'information', 'hiding', 'mechanism', 'bundling', 'mechanism', 'combination', 'encapsulation', 'object', 'orient', 'programming', 'detail']"
1853,"The concept of information hiding was first described by David Parnas in 1972.34 Before then, modularity was discussed by Richard Gauthier and Stephen Pont in their 1970 book Designing Systems Programs although modular programming itself had been used at many commercial sites for many years previously – especially in I/O sub-systems and software libraries – without acquiring the 'information hiding' tag – but for similar reasons, as well as the more obvious code reuse reason.clarification needed","['concept', 'information', 'hiding', 'describe', 'david', 'parnas', '1972', 'modularity', 'discuss', 'richard', 'gauthier', 'stephen', 'pont', '1970', 'book', 'designing', 'systems', 'programs', 'modular', 'programming', 'commercial', 'site', 'year', 'previously', 'especially', 'sub', 'system', 'software', 'library', 'acquire', 'information', 'hiding', 'tag', 'similar', 'reason', 'obvious', 'code', 'reuse', 'reason.clarification', 'need']"
1854,"Information hiding serves as an effective criterion for dividing any piece of equipment, software, or hardware, into modules of functionality. For instance, a car is a complex piece of equipment. In order to make the design, manufacturing, and maintenance of a car reasonable, the complex piece of equipment is divided into modules with particular interfaces hiding design decisions. By designing a car in this fashion, a car manufacturer can also offer various options while still having a vehicle that is economical to manufacture.","['information', 'hiding', 'serve', 'effective', 'criterion', 'divide', 'piece', 'equipment', 'software', 'hardware', 'module', 'functionality', 'instance', 'car', 'complex', 'piece', 'equipment', 'order', 'design', 'manufacturing', 'maintenance', 'car', 'reasonable', 'complex', 'piece', 'equipment', 'divide', 'module', 'particular', 'interface', 'hide', 'design', 'decision', 'design', 'car', 'fashion', 'car', 'manufacturer', 'offer', 'option', 'have', 'vehicle', 'economical', 'manufacture']"
1855,"For instance, a car manufacturer may have a luxury version of the car as well as a standard version. The luxury version comes with a more powerful engine than the standard version. The engineers designing the two different car engines, one for the luxury version and one for the standard version, provide the same interface for both engines. Both engines fit into the engine bay of the car which is the same between both versions. Both engines fit the same transmission, the same engine mounts, and the same controls. The differences in the engines are that the more powerful luxury version has a larger displacement with a fuel injection system that is programmed to provide the fuel-air mixture that the larger displacement engine requires.","['instance', 'car', 'manufacturer', 'luxury', 'version', 'car', 'standard', 'version', 'luxury', 'version', 'come', 'powerful', 'engine', 'standard', 'version', 'engineer', 'design', 'different', 'car', 'engine', 'luxury', 'version', 'standard', 'version', 'provide', 'interface', 'engine', 'engine', 'fit', 'engine', 'bay', 'car', 'version', 'engine', 'fit', 'transmission', 'engine', 'mount', 'control', 'difference', 'engine', 'powerful', 'luxury', 'version', 'large', 'displacement', 'fuel', 'injection', 'system', 'program', 'provide', 'fuel', 'air', 'mixture', 'large', 'displacement', 'engine', 'require']"
1856,"In addition to the more powerful engine, the luxury version may also offer other options such as a better radio with CD player, more comfortable seats, a better suspension system with wider tires, and different paint colors. With all of these changes, most of the car is the same between the standard version and the luxury version. The radio with CD player is a module that replaces the standard radio, also a module, in the luxury model. The more comfortable seats are installed into the same seat mounts as the standard types of seats. Whether the seats are leather or plastic, or offer lumbar support or not, does not matter.","['addition', 'powerful', 'engine', 'luxury', 'version', 'offer', 'option', 'well', 'radio', 'player', 'comfortable', 'seat', 'well', 'suspension', 'system', 'wide', 'tire', 'different', 'paint', 'color', 'change', 'car', 'standard', 'version', 'luxury', 'version', 'radio', 'player', 'module', 'replace', 'standard', 'radio', 'module', 'luxury', 'model', 'comfortable', 'seat', 'instal', 'seat', 'mount', 'standard', 'type', 'seat', 'seat', 'leather', 'plastic', 'offer', 'lumbar', 'support', 'matter']"
1857,The engineers design the car by dividing the task up into pieces of work that are assigned to teams. Each team then designs their component to a particular standard or interface which allows the team flexibility in the design of the component while at the same time ensuring that all of the components will fit together.,"['engineer', 'design', 'car', 'divide', 'task', 'piece', 'work', 'assign', 'team', 'team', 'design', 'component', 'particular', 'standard', 'interface', 'allow', 'team', 'flexibility', 'design', 'component', 'time', 'ensure', 'component', 'fit']"
1858,"Motor vehicle manufacturers frequently use the same core structure for several different models, in part as a cost-control measure. Such a ""platform"" also provides an example of information hiding, since the floorplan can be built without knowing whether it is to be used in a sedan or a hatchback.","['motor', 'vehicle', 'manufacturer', 'frequently', 'use', 'core', 'structure', 'different', 'model', 'cost', 'control', 'measure', 'platform', 'provide', 'example', 'information', 'hiding', 'floorplan', 'build', 'know', 'sedan', 'hatchback']"
1859,"As can be seen by this example, information hiding provides flexibility. This flexibility allows a programmer to modify the functionality of a computer program during normal evolution as the computer program is changed to better fit the needs of users. When a computer program is well designed, decomposing the source code solution into modules using the principle of information hiding, evolutionary changes are much easier because the changes typically are local rather than global changes.","['see', 'example', 'information', 'hiding', 'provide', 'flexibility', 'flexibility', 'allow', 'programmer', 'modify', 'functionality', 'computer', 'program', 'normal', 'evolution', 'computer', 'program', 'change', 'well', 'fit', 'need', 'user', 'computer', 'program', 'design', 'decompose', 'source', 'code', 'solution', 'module', 'principle', 'information', 'hiding', 'evolutionary', 'change', 'easy', 'change', 'typically', 'local', 'global', 'change']"
1860,"Cars provide another example of this in how they interface with drivers. They present a standard interface pedals, wheel, shifter, signals, gauges, etc. on which people are trained and licensed. Thus, people only have to learn to drive a car; they don't need to learn a completely different way of driving every time they drive a new model. Granted, there are manual and automatic transmissions and other such differences, but on the whole, cars maintain a unified interface.","['car', 'provide', 'example', 'interface', 'driver', 'present', 'standard', 'interface', 'pedal', 'wheel', 'shifter', 'signal', 'gauge', 'etc', 'people', 'train', 'license', 'people', 'learn', 'drive', 'car', 'need', 'learn', 'completely', 'different', 'way', 'drive', 'time', 'drive', 'new', 'model', 'grant', 'manual', 'automatic', 'transmission', 'difference', 'car', 'maintain', 'unified', 'interface']"
1861,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1862,"In object-oriented programming, inheritance is the mechanism of basing an object or class upon another object prototype-based inheritance or class class-based inheritance, retaining similar implementation. Also defined as deriving new classes sub classes from existing ones such as super class or base class and then forming them into a hierarchy of classes. In most class-based object-oriented languages, an object created through inheritance, a ""child object"", acquires all the properties and behaviors of the ""parent object"" , with the exception of: constructors, destructor, overloaded operators and friend functions of the base class. Inheritance allows programmers to create classes that are built upon existing classes,1 to specify a new implementation while maintaining the same behaviors realizing an interface, to reuse code and to independently extend original software via public classes and interfaces. The relationships of objects or classes through inheritance give rise to a directed acyclic graph.","['object', 'orient', 'programming', 'inheritance', 'mechanism', 'base', 'object', 'class', 'object', 'prototype', 'base', 'inheritance', 'class', 'class', 'base', 'inheritance', 'retain', 'similar', 'implementation', 'define', 'derive', 'new', 'class', 'sub', 'class', 'exist', 'one', 'super', 'class', 'base', 'class', 'form', 'hierarchy', 'class', 'class', 'base', 'object', 'orient', 'language', 'object', 'create', 'inheritance', 'child', 'object', 'acquire', 'property', 'behavior', 'parent', 'object', 'exception', 'constructor', 'destructor', 'overloaded', 'operator', 'friend', 'function', 'base', 'class', 'inheritance', 'allow', 'programmer', 'create', 'class', 'build', 'exist', 'classes', 'specify', 'new', 'implementation', 'maintain', 'behavior', 'realize', 'interface', 'reuse', 'code', 'independently', 'extend', 'original', 'software', 'public', 'class', 'interface', 'relationship', 'object', 'class', 'inheritance', 'rise', 'direct', 'acyclic', 'graph']"
1863,"An inherited class is called a subclass of its parent class or super class. The term ""inheritance"" is loosely used for both class-based and prototype-based programming, but in narrow use the term is reserved for class-based programming one class inherits from another, with the corresponding technique in prototype-based programming being instead called delegation one object delegates to another. Class-modifying inheritance patterns can be pre-defined according to simple network interface parameters such that inter-language compatibility is preserved.23","['inherit', 'class', 'call', 'subclass', 'parent', 'class', 'super', 'class', 'term', 'inheritance', 'loosely', 'class', 'base', 'prototype', 'base', 'programming', 'narrow', 'use', 'term', 'reserve', 'class', 'base', 'programming', 'class', 'inherit', 'corresponding', 'technique', 'prototype', 'base', 'programming', 'instead', 'call', 'delegation', 'object', 'delegate', 'class', 'modifying', 'inheritance', 'pattern', 'pre', 'define', 'accord', 'simple', 'network', 'interface', 'parameter', 'inter', 'language', 'compatibility', 'preserved']"
1864,"Inheritance should not be confused with subtyping.45 In some languages inheritance and subtyping agree,a whereas in others they differ; in general, subtyping establishes an is-a relationship, whereas inheritance only reuses implementation and establishes a syntactic relationship, not necessarily a semantic relationship inheritance does not ensure behavioral subtyping. To distinguish these concepts, subtyping is sometimes referred to as interface inheritance without acknowledging that the specialization of type variables also induces a subtyping relation, whereas inheritance as defined here is known as implementation inheritance or code inheritance.6 Still, inheritance is a commonly used mechanism for establishing subtype relationships.7","['inheritance', 'confuse', 'subtyping', 'language', 'inheritance', 'subtype', 'agree', 'differ', 'general', 'subtype', 'establishe', 'relationship', 'inheritance', 'reuse', 'implementation', 'establish', 'syntactic', 'relationship', 'necessarily', 'semantic', 'relationship', 'inheritance', 'ensure', 'behavioral', 'subtyping', 'distinguish', 'concept', 'subtype', 'refer', 'interface', 'inheritance', 'acknowledge', 'specialization', 'type', 'variable', 'induce', 'subtype', 'relation', 'inheritance', 'define', 'know', 'implementation', 'inheritance', 'code', 'inheritance', 'inheritance', 'commonly', 'mechanism', 'establish', 'subtype', 'relationships']"
1865,"Inheritance is contrasted with object composition, where one object contains another object or objects of one class contain objects of another class; see composition over inheritance. Composition implements a has-a relationship, in contrast to the is-a relationship of subtyping.","['inheritance', 'contrast', 'object', 'composition', 'object', 'contain', 'object', 'object', 'class', 'contain', 'object', 'class', 'composition', 'inheritance', 'composition', 'implement', 'relationship', 'contrast', 'relationship', 'subtype']"
1866,"In 1966, Tony Hoare presented some remarks on records, and in particular presented the idea of record subclasses, record types with common properties but discriminated by a variant tag and having fields private to the variant.8 Influenced by this, in 1967 Ole-Johan Dahl and Kristen Nygaard presented a design that allowed specifying objects that belonged to different classes but had common properties. The common properties were collected in a superclass, and each superclass could itself potentially have a superclass. The values of a subclass were thus compound objects, consisting of some number of prefix parts belonging to various superclasses, plus a main part belonging to the subclass. These parts were all concatenated together.9 The attributes of a compound object would be accessible by dot notation. This idea was first adopted in the Simula 67 programming language.10 The idea then spread to Smalltalk, C++, Java, Python, and many other languages.","['1966', 'tony', 'hoare', 'present', 'remark', 'record', 'particular', 'present', 'idea', 'record', 'subclass', 'record', 'type', 'common', 'property', 'discriminate', 'variant', 'tag', 'have', 'field', 'private', 'variant', 'influence', '1967', 'ole', 'johan', 'dahl', 'kristen', 'nygaard', 'present', 'design', 'allow', 'specify', 'object', 'belong', 'different', 'class', 'common', 'property', 'common', 'property', 'collect', 'superclass', 'superclass', 'potentially', 'superclass', 'value', 'subclass', 'compound', 'object', 'consist', 'number', 'prefix', 'part', 'belong', 'superclass', 'plus', 'main', 'belong', 'subclass', 'part', 'concatenate', 'together', 'attribute', 'compound', 'object', 'accessible', 'dot', 'notation', 'idea', 'adopt', 'simula', 'programming', 'language', 'idea', 'spread', 'smalltalk', 'c++', 'java', 'python', 'language']"
1867,"There are various types of inheritance, based on paradigm and specific language.11","['type', 'inheritance', 'base', 'paradigm', 'specific', 'language']"
1868,"""Multiple inheritance ... was widely supposed to be very difficult to implement efficiently. For example, in a summary of C++ in his book on Objective C, Brad Cox actually claimed that adding multiple inheritance to C++ was impossible. Thus, multiple inheritance seemed more of a challenge. Since I had considered multiple inheritance as early as 1982 and found a simple and efficient implementation technique in 1984, I couldn't resist the challenge. I suspect this to be the only case in which fashion affected the sequence of events.""12","['multiple', 'inheritance', 'widely', 'suppose', 'difficult', 'implement', 'efficiently', 'example', 'summary', 'c++', 'book', 'objective', 'brad', 'cox', 'actually', 'claim', 'add', 'multiple', 'inheritance', 'c++', 'impossible', 'multiple', 'inheritance', 'challenge', 'consider', 'multiple', 'inheritance', 'early', '1982', 'find', 'simple', 'efficient', 'implementation', 'technique', '1984', 'resist', 'challenge', 'suspect', 'case', 'fashion', 'affect', 'sequence', 'event', '12']"
1869,"Subclasses, derived classes, heir classes, or child classes are modular derivative classes that inherits one or more language entities from one or more other classes called superclass, base classes, or parent classes. The semantics of class inheritance vary from language to language, but commonly the subclass automatically inherits the instance variables and member functions of its superclasses.","['subclass', 'derive', 'class', 'heir', 'class', 'child', 'class', 'modular', 'derivative', 'class', 'inherit', 'language', 'entity', 'class', 'call', 'superclass', 'base', 'class', 'parent', 'class', 'semantic', 'class', 'inheritance', 'vary', 'language', 'language', 'commonly', 'subclass', 'automatically', 'inherit', 'instance', 'variable', 'member', 'function', 'superclass']"
1870,The general form of defining a derived class is:13,"['general', 'form', 'define', 'derive', 'class', 'is']"
1871,"Some languages support also the inheritance of other constructs. For example, in Eiffel, contracts that define the specification of a class are also inherited by heirs. The superclass establishes a common interface and foundational functionality, which specialized subclasses can inherit, modify, and supplement. The software inherited by a subclass is considered reused in the subclass. A reference to an instance of a class may actually be referring to one of its subclasses. The actual class of the object being referenced is impossible to predict at compile-time. A uniform interface is used to invoke the member functions of objects of a number of different classes. Subclasses may replace superclass functions with entirely new functions that must share the same method signature.","['language', 'support', 'inheritance', 'construct', 'example', 'eiffel', 'contract', 'define', 'specification', 'class', 'inherit', 'heir', 'superclass', 'establish', 'common', 'interface', 'foundational', 'functionality', 'specialized', 'subclass', 'inherit', 'modify', 'supplement', 'software', 'inherit', 'subclass', 'consider', 'reuse', 'subclass', 'reference', 'instance', 'class', 'actually', 'refer', 'subclass', 'actual', 'class', 'object', 'reference', 'impossible', 'predict', 'compile', 'time', 'uniform', 'interface', 'invoke', 'member', 'function', 'object', 'number', 'different', 'class', 'subclass', 'replace', 'superclass', 'function', 'entirely', 'new', 'function', 'share', 'method', 'signature']"
1872,"In some languages a class may be declared as non-subclassable by adding certain class modifiers to the class declaration. Examples include the final keyword in Java and C++11 onwards or the sealed keyword in C#. Such modifiers are added to the class declaration before the class keyword and the class identifier declaration. Such non-subclassable classes restrict reusability, particularly when developers only have access to precompiled binaries and not source code.","['language', 'class', 'declare', 'non', 'subclassable', 'add', 'certain', 'class', 'modifier', 'class', 'declaration', 'example', 'include', 'final', 'keyword', 'java', 'c++11', 'onwards', 'seal', 'keyword', 'modifier', 'add', 'class', 'declaration', 'class', 'keyword', 'class', 'identifi', 'declaration', 'non', 'subclassable', 'class', 'restrict', 'reusability', 'particularly', 'developer', 'access', 'precompile', 'binary', 'source', 'code']"
1873,"A non-subclassable class has no subclasses, so it can be easily deduced at compile time that references or pointers to objects of that class are actually referencing instances of that class and not instances of subclasses they don't exist or instances of superclasses upcasting a reference type violates the type system. Because the exact type of the object being referenced is known before execution, early binding also called static dispatch can be used instead of late binding also called dynamic dispatch, which requires one or more virtual method table lookups depending on whether multiple inheritance or only single inheritance are supported in the programming language that is being used.","['non', 'subclassable', 'class', 'subclass', 'easily', 'deduce', 'compile', 'time', 'reference', 'pointer', 'object', 'class', 'actually', 'reference', 'instance', 'class', 'instance', 'subclass', 'exist', 'instance', 'superclass', 'upcaste', 'reference', 'type', 'violate', 'type', 'system', 'exact', 'type', 'object', 'reference', 'know', 'execution', 'early', 'bind', 'call', 'static', 'dispatch', 'instead', 'late', 'binding', 'call', 'dynamic', 'dispatch', 'require', 'virtual', 'method', 'table', 'lookup', 'depend', 'multiple', 'inheritance', 'single', 'inheritance', 'support', 'programming', 'language']"
1874,"Just as classes may be non-subclassable, method declarations may contain method modifiers that prevent the method from being overridden i.e. replaced with a new function with the same name and type signature in a subclass. A private method is un-overridable simply because it is not accessible by classes other than the class it is a member function of this is not true for C++, though. A final method in Java, a sealed method in C# or a frozen feature in Eiffel cannot be overridden.","['class', 'non', 'subclassable', 'method', 'declaration', 'contain', 'method', 'modifier', 'prevent', 'method', 'overridden', 'i.e.', 'replace', 'new', 'function', 'type', 'signature', 'subclass', 'private', 'method', 'overridable', 'simply', 'accessible', 'class', 'class', 'member', 'function', 'true', 'c++', 'final', 'method', 'java', 'seal', 'method', 'frozen', 'feature', 'eiffel', 'overridden']"
1875,"If the superclass method is a virtual method, then invocations of the superclass method will be dynamically dispatched. Some languages require that methods be specifically declared as virtual e.g. C++, and in others, all methods are virtual e.g. Java. An invocation of a non-virtual method will always be statically dispatched i.e. the address of the function call is determined at compile-time. Static dispatch is faster than dynamic dispatch and allows optimizations such as inline expansion.","['superclass', 'method', 'virtual', 'method', 'invocation', 'superclass', 'method', 'dynamically', 'dispatch', 'language', 'require', 'method', 'specifically', 'declare', 'virtual', 'e.g.', 'c++', 'method', 'virtual', 'e.g.', 'java', 'invocation', 'non', 'virtual', 'method', 'statically', 'dispatch', 'i.e.', 'address', 'function', 'determine', 'compile', 'time', 'static', 'dispatch', 'fast', 'dynamic', 'dispatch', 'allow', 'optimization', 'inline', 'expansion']"
1876,"The following table shows which variables and functions get inherited dependent on the visibility given when deriving the class, using the terminology established by C++.14","['following', 'table', 'show', 'variable', 'function', 'inherit', 'dependent', 'visibility', 'give', 'derive', 'class', 'terminology', 'establish', 'c++']"
1877,Inheritance is used to co-relate two or more classes to each other.,"['inheritance', 'relate', 'class']"
1878,"Many object-oriented programming languages permit a class or object to replace the implementation of an aspect—typically a behavior—that it has inherited. This process is called overriding. Overriding introduces a complication: which version of the behavior does an instance of the inherited class use—the one that is part of its own class, or the one from the parent base class? The answer varies between programming languages, and some languages provide the ability to indicate that a particular behavior is not to be overridden and should behave as defined by the base class. For instance, in C#, the base method or property can only be overridden in a subclass if it is marked with the virtual, abstract, or override modifier, while in programming languages such as Java, different methods can be called to override other methods.15 An alternative to overriding is hiding the inherited code.","['object', 'orient', 'programming', 'language', 'permit', 'class', 'object', 'replace', 'implementation', 'aspect', 'typically', 'behavior', 'inherit', 'process', 'call', 'overriding', 'override', 'introduce', 'complication', 'version', 'behavior', 'instance', 'inherit', 'class', 'use', 'class', 'parent', 'base', 'class', 'answer', 'vary', 'programming', 'language', 'language', 'provide', 'ability', 'indicate', 'particular', 'behavior', 'overridden', 'behave', 'define', 'base', 'class', 'instance', 'base', 'method', 'property', 'overridden', 'subclass', 'mark', 'virtual', 'abstract', 'override', 'modifier', 'programming', 'language', 'java', 'different', 'method', 'call', 'override', 'methods', 'alternative', 'override', 'hide', 'inherit', 'code']"
1879,"Implementation inheritance is the mechanism whereby a subclass re-uses code in a base class. By default the subclass retains all of the operations of the base class, but the subclass may override some or all operations, replacing the base-class implementation with its own.","['implementation', 'inheritance', 'mechanism', 'subclass', 'use', 'code', 'base', 'class', 'default', 'subclass', 'retain', 'operation', 'base', 'class', 'subclass', 'override', 'operation', 'replace', 'base', 'class', 'implementation']"
1880,"In the following Python example, subclasses .mw-parser-output .monospacedfont-family:monospace,monospaceSquareSumComputer and CubeSumComputer override the transform method of the base class SumComputer. The base class comprises operations to compute the sum of the squares between two integers. The subclass re-uses all of the functionality of the base class with the exception of the operation that transforms a number into its square, replacing it with an operation that transforms a number into its square and cube respectively. The subclasses therefore compute the sum of the squares/cubes between two integers.","['follow', 'python', 'example', 'subclasse', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacesquaresumcomputer', 'cubesumcomputer', 'override', 'transform', 'method', 'base', 'class', 'sumcomputer', 'base', 'class', 'comprise', 'operation', 'compute', 'sum', 'square', 'integer', 'subclass', 'use', 'functionality', 'base', 'class', 'exception', 'operation', 'transform', 'number', 'square', 'replace', 'operation', 'transform', 'number', 'square', 'cube', 'respectively', 'subclass', 'compute', 'sum', 'square', 'cube', 'integer']"
1881,Below is an example of Python.,"['example', 'python']"
1882,"In most quarters, class inheritance for the sole purpose of code reuse has fallen out of favor.citation needed The primary concern is that implementation inheritance does not provide any assurance of polymorphic substitutability—an instance of the reusing class cannot necessarily be substituted for an instance of the inherited class. An alternative technique, explicit delegation, requires more programming effort, but avoids the substitutability issue.citation needed In C++ private inheritance can be used as a form of implementation inheritance without substitutability. Whereas public inheritance represents an ""is-a"" relationship and delegation represents a ""has-a"" relationship, private and protected inheritance can be thought of as an ""is implemented in terms of"" relationship.16","['quarter', 'class', 'inheritance', 'sole', 'purpose', 'code', 'reuse', 'fall', 'favor.citation', 'need', 'primary', 'concern', 'implementation', 'inheritance', 'provide', 'assurance', 'polymorphic', 'substitutability', 'instance', 'reuse', 'class', 'necessarily', 'substitute', 'instance', 'inherit', 'class', 'alternative', 'technique', 'explicit', 'delegation', 'require', 'programming', 'effort', 'avoid', 'substitutability', 'issue.citation', 'need', 'c++', 'private', 'inheritance', 'form', 'implementation', 'inheritance', 'substitutability', 'public', 'inheritance', 'represent', 'relationship', 'delegation', 'represent', 'relationship', 'private', 'protect', 'inheritance', 'think', 'implement', 'term', 'relationship']"
1883,"Another frequent use of inheritance is to guarantee that classes maintain a certain common interface; that is, they implement the same methods. The parent class can be a combination of implemented operations and operations that are to be implemented in the child classes. Often, there is no interface change between the supertype and subtype- the child implements the behavior described instead of its parent class.17","['frequent', 'use', 'inheritance', 'guarantee', 'class', 'maintain', 'certain', 'common', 'interface', 'implement', 'method', 'parent', 'class', 'combination', 'implement', 'operation', 'operation', 'implement', 'child', 'class', 'interface', 'change', 'supertype', 'subtype-', 'child', 'implement', 'behavior', 'describe', 'instead', 'parent', 'class']"
1884,"Inheritance is similar to but distinct from subtyping.4 Subtyping enables a given type to be substituted for another type or abstraction, and is said to establish an is-a relationship between the subtype and some existing abstraction, either implicitly or explicitly, depending on language support. The relationship can be expressed explicitly via inheritance in languages that support inheritance as a subtyping mechanism. For example, the following C++ code establishes an explicit inheritance relationship between classes B and A, where B is both a subclass and a subtype of A, and can be used as an A wherever a B is specified via a reference, a pointer or the object itself.","['inheritance', 'similar', 'distinct', 'subtyping', 'subtype', 'enable', 'give', 'type', 'substitute', 'type', 'abstraction', 'say', 'establish', 'relationship', 'subtype', 'exist', 'abstraction', 'implicitly', 'explicitly', 'depend', 'language', 'support', 'relationship', 'express', 'explicitly', 'inheritance', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'example', 'following', 'c++', 'code', 'establish', 'explicit', 'inheritance', 'relationship', 'class', 'subclass', 'subtype', 'specify', 'reference', 'pointer', 'object']"
1885,"In programming languages that do not support inheritance as a subtyping mechanism, the relationship between a base class and a derived class is only a relationship between implementations a mechanism for code reuse, as compared to a relationship between types. Inheritance, even in programming languages that support inheritance as a subtyping mechanism, does not necessarily entail behavioral subtyping. It is entirely possible to derive a class whose object will behave incorrectly when used in a context where the parent class is expected; see the Liskov substitution principle. 18 Compare connotation/denotation. In some OOP languages, the notions of code reuse and subtyping coincide because the only way to declare a subtype is to define a new class that inherits the implementation of another.","['programming', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'relationship', 'base', 'class', 'derive', 'class', 'relationship', 'implementation', 'mechanism', 'code', 'reuse', 'compare', 'relationship', 'type', 'inheritance', 'programming', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'necessarily', 'entail', 'behavioral', 'subtyping', 'entirely', 'possible', 'derive', 'class', 'object', 'behave', 'incorrectly', 'context', 'parent', 'class', 'expect', 'liskov', 'substitution', 'principle', 'compare', 'connotation', 'denotation', 'oop', 'language', 'notion', 'code', 'reuse', 'subtype', 'coincide', 'way', 'declare', 'subtype', 'define', 'new', 'class', 'inherit', 'implementation']"
1886,Using inheritance extensively in designing a program imposes certain constraints.,"['inheritance', 'extensively', 'design', 'program', 'impose', 'certain', 'constraint']"
1887,"For example, consider a class Person that contains a person's name, date of birth, address and phone number. We can define a subclass of Person called Student that contains the person's grade point average and classes taken, and another subclass of Person called Employee that contains the person's job-title, employer, and salary.","['example', 'consider', 'class', 'person', 'contain', 'person', 'date', 'birth', 'address', 'phone', 'number', 'define', 'subclass', 'person', 'call', 'student', 'contain', 'person', 'grade', 'point', 'average', 'class', 'take', 'subclass', 'person', 'call', 'employee', 'contain', 'person', 'job', 'title', 'employer', 'salary']"
1888,"In defining this inheritance hierarchy we have already defined certain restrictions, not all of which are desirable:","['define', 'inheritance', 'hierarchy', 'define', 'certain', 'restriction', 'desirable']"
1889,"The composite reuse principle is an alternative to inheritance. This technique supports polymorphism and code reuse by separating behaviors from the primary class hierarchy and including specific behavior classes as required in any business domain class. This approach avoids the static nature of a class hierarchy by allowing behavior modifications at run time and allows one class to implement behaviors buffet-style, instead of being restricted to the behaviors of its ancestor classes.","['composite', 'reuse', 'principle', 'alternative', 'inheritance', 'technique', 'support', 'polymorphism', 'code', 'reuse', 'separate', 'behavior', 'primary', 'class', 'hierarchy', 'include', 'specific', 'behavior', 'class', 'require', 'business', 'domain', 'class', 'approach', 'avoid', 'static', 'nature', 'class', 'hierarchy', 'allow', 'behavior', 'modification', 'run', 'time', 'allow', 'class', 'implement', 'behavior', 'buffet', 'style', 'instead', 'restrict', 'behavior', 'ancestor', 'class']"
1890,"Implementation inheritance is controversial among programmers and theoreticians of object-oriented programming since at least the 1990s. Among them are the authors of Design Patterns, who advocate interface inheritance instead, and favor composition over inheritance. For example, the decorator pattern as mentioned above has been proposed to overcome the static nature of inheritance between classes. As a more fundamental solution to the same problem, role-oriented programming introduces a distinct relationship, played-by, combining properties of inheritance and composition into a new concept.citation needed","['implementation', 'inheritance', 'controversial', 'programmer', 'theoretician', 'object', 'orient', 'programming', '1990s', 'author', 'design', 'patterns', 'advocate', 'interface', 'inheritance', 'instead', 'favor', 'composition', 'inheritance', 'example', 'decorator', 'pattern', 'mention', 'propose', 'overcome', 'static', 'nature', 'inheritance', 'class', 'fundamental', 'solution', 'problem', 'role', 'orient', 'programming', 'introduce', 'distinct', 'relationship', 'play', 'combine', 'property', 'inheritance', 'composition', 'new', 'concept.citation', 'need']"
1891,"According to Allen Holub, the main problem with implementation inheritance is that it introduces unnecessary coupling in the form of the ""fragile base class problem"":6 modifications to the base class implementation can cause inadvertent behavioral changes in subclasses. Using interfaces avoids this problem because no implementation is shared, only the API.19 Another way of stating this is that ""inheritance breaks encapsulation"".20 The problem surfaces clearly in open object-oriented systems such as frameworks, where client code is expected to inherit from system-supplied classes and then substituted for the system's classes in its algorithms.6","['accord', 'allen', 'holub', 'main', 'problem', 'implementation', 'inheritance', 'introduce', 'unnecessary', 'coupling', 'form', 'fragile', 'base', 'class', 'problem', 'modification', 'base', 'class', 'implementation', 'cause', 'inadvertent', 'behavioral', 'change', 'subclass', 'interface', 'avoid', 'problem', 'implementation', 'share', 'api', 'way', 'state', 'inheritance', 'break', 'encapsulation', 'problem', 'surface', 'clearly', 'open', 'object', 'orient', 'system', 'framework', 'client', 'code', 'expect', 'inherit', 'system', 'supply', 'class', 'substitute', 'system', 'class', 'algorithms']"
1892,"Reportedly, Java inventor James Gosling has spoken against implementation inheritance, stating that he would not include it if he were to redesign Java.19 Language designs that decouple inheritance from subtyping interface inheritance appeared as early as 1990;21 a modern example of this is the Go programming language.","['reportedly', 'java', 'inventor', 'james', 'gosling', 'speak', 'implementation', 'inheritance', 'state', 'include', 'redesign', 'java', 'language', 'design', 'decouple', 'inheritance', 'subtype', 'interface', 'inheritance', 'appear', 'early', '1990', 'modern', 'example', 'programming', 'language']"
1893,"Complex inheritance, or inheritance used within an insufficiently mature design, may lead to the yo-yo problem. When inheritance was used as a primary approach to structure programs in the late 1990s, developers tended to break code into more layers of inheritance as the system functionality grew. If a development team combined multiple layers of inheritance with the single responsibility principle, this resulted in many very thin layers of code, with many layers consisting of only 1 or 2 lines of actual code.citation needed Too many layers make debugging a significant challenge, as it becomes hard to determine which layer needs to be debugged.","['complex', 'inheritance', 'inheritance', 'insufficiently', 'mature', 'design', 'lead', 'problem', 'inheritance', 'primary', 'approach', 'structure', 'program', 'late', '1990', 'developer', 'tend', 'break', 'code', 'layer', 'inheritance', 'system', 'functionality', 'grow', 'development', 'team', 'combine', 'multiple', 'layer', 'inheritance', 'single', 'responsibility', 'principle', 'result', 'thin', 'layer', 'code', 'layer', 'consist', 'line', 'actual', 'code.citation', 'need', 'layer', 'debug', 'significant', 'challenge', 'hard', 'determine', 'layer', 'need', 'debug']"
1894,"Another issue with inheritance is that subclasses must be defined in code, which means that program users cannot add new subclasses at runtime. Other design patterns such as Entity–component–system allow program users to define variations of an entity at runtime.","['issue', 'inheritance', 'subclass', 'define', 'code', 'mean', 'program', 'user', 'add', 'new', 'subclass', 'runtime', 'design', 'pattern', 'entity', 'component', 'system', 'allow', 'program', 'user', 'define', 'variation', 'entity', 'runtime']"
1895,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1896,"In computing, booting is the process of starting a computer as initiated via hardware such as a button or by a software command. After it is switched on, a computer's central processing unit CPU has no software in its main memory, so some process must load software into memory before it can be executed. This may be done by hardware or firmware in the CPU, or by a separate processor in the computer system.","['computing', 'booting', 'process', 'start', 'computer', 'initiate', 'hardware', 'button', 'software', 'command', 'switch', 'computer', 'central', 'processing', 'unit', 'cpu', 'software', 'main', 'memory', 'process', 'load', 'software', 'memory', 'execute', 'hardware', 'firmware', 'cpu', 'separate', 'processor', 'computer', 'system']"
1897,"Restarting a computer also is called rebooting, which can be ""hard"", e.g. after electrical power to the CPU is switched from off to on, or ""soft"", where the power is not cut. On some systems, a soft boot may optionally clear RAM to zero. Both hard and soft booting can be initiated by hardware such as a button press or by a software command. Booting is complete when the operative runtime system, typically the operating system and some applications,nb 1 is attained.","['restart', 'computer', 'call', 'rebooting', 'hard', 'e.g.', 'electrical', 'power', 'cpu', 'switch', 'soft', 'power', 'cut', 'system', 'soft', 'boot', 'optionally', 'clear', 'ram', 'zero', 'hard', 'soft', 'booting', 'initiate', 'hardware', 'button', 'press', 'software', 'command', 'booting', 'complete', 'operative', 'runtime', 'system', 'typically', 'operating', 'system', 'application', 'attain']"
1898,"The process of returning a computer from a state of sleep suspension does not involve booting; however, restoring it from a state of hibernation does. Minimally, some embedded systems do not require a noticeable boot sequence to begin functioning and when turned on may simply run operational programs that are stored in ROM. All computing systems are state machines, and a reboot may be the only method to return to a designated zero-state from an unintended, locked state.","['process', 'return', 'computer', 'state', 'sleep', 'suspension', 'involve', 'booting', 'restore', 'state', 'hibernation', 'minimally', 'embed', 'system', 'require', 'noticeable', 'boot', 'sequence', 'begin', 'function', 'turn', 'simply', 'run', 'operational', 'program', 'store', 'rom', 'computing', 'system', 'state', 'machine', 'reboot', 'method', 'return', 'designate', 'zero', 'state', 'unintended', 'locked', 'state']"
1899,"In addition to loading an operating system or stand-alone utility, the boot process can also load a storage dump program for diagnosing problems in an operating system.","['addition', 'load', 'operating', 'system', 'stand', 'utility', 'boot', 'process', 'load', 'storage', 'dump', 'program', 'diagnose', 'problem', 'operating', 'system']"
1900,"Boot is short for bootstrap12 or bootstrap load and derives from the phrase to pull oneself up by one's bootstraps.34 The usage calls attention to the requirement that, if most software is loaded onto a computer by other software already running on the computer, some mechanism must exist to load the initial software onto the computer.5 Early computers used a variety of ad-hoc methods to get a small program into memory to solve this problem. The invention of read-only memory ROM of various types solved this paradox by allowing computers to be shipped with a start up program that could not be erased. Growth in the capacity of ROM has allowed ever more elaborate start up procedures to be implemented.","['boot', 'short', 'bootstrap12', 'bootstrap', 'load', 'derive', 'phrase', 'pull', 'oneself', 'bootstraps', 'usage', 'call', 'attention', 'requirement', 'software', 'load', 'computer', 'software', 'run', 'computer', 'mechanism', 'exist', 'load', 'initial', 'software', 'computer', 'early', 'computer', 'variety', 'hoc', 'method', 'small', 'program', 'memory', 'solve', 'problem', 'invention', 'read', 'memory', 'rom', 'type', 'solve', 'paradox', 'allow', 'computer', 'ship', 'start', 'program', 'erase', 'growth', 'capacity', 'rom', 'allow', 'elaborate', 'start', 'procedure', 'implement']"
1901,"There are many different methods available to load a short initial program into a computer. These methods reach from simple, physical input to removable media that can hold more complex programs.","['different', 'method', 'available', 'load', 'short', 'initial', 'program', 'computer', 'method', 'reach', 'simple', 'physical', 'input', 'removable', 'medium', 'hold', 'complex', 'program']"
1902,"Early computers in the 1940s and 1950s were one-of-a-kind engineering efforts that could take weeks to program and program loading was one of many problems that had to be solved. An early computer, ENIAC, had no program stored in memory, but was set up for each problem by a configuration of interconnecting cables. Bootstrapping did not apply to ENIAC, whose hardware configuration was ready for solving problems as soon as power was applied.","['early', 'computer', '1940', '1950', 'kind', 'engineering', 'effort', 'week', 'program', 'program', 'loading', 'problem', 'solve', 'early', 'computer', 'eniac', 'program', 'store', 'memory', 'set', 'problem', 'configuration', 'interconnect', 'cable', 'bootstrapping', 'apply', 'eniac', 'hardware', 'configuration', 'ready', 'solve', 'problem', 'soon', 'power', 'apply']"
1903,"The EDSAC system, the second stored-program computer to be built, used stepping switches to transfer a fixed program into memory when its start button was pressed. The program stored on this device, which David Wheeler completed in late 1948, loaded further instructions from punched tape and then executed them.67","['edsac', 'system', 'second', 'store', 'program', 'computer', 'build', 'stepping', 'switch', 'transfer', 'fix', 'program', 'memory', 'start', 'button', 'press', 'program', 'store', 'device', 'david', 'wheeler', 'complete', 'late', '1948', 'load', 'instruction', 'punched', 'tape', 'execute', 'them']"
1904,"The first programmable computers for commercial sale, such as the UNIVAC I and the IBM 7018 included features to make their operation simpler. They typically included instructions that performed a complete input or output operation. The same hardware logic could be used to load the contents of a punch card the most typical ones or other input media, such as a magnetic drum or magnetic tape, that contained a bootstrap program by pressing a single button. This booting concept was called a variety of names for IBM computers of the 1950s and early 1960s, but IBM used the term ""Initial Program Load"" with the IBM 7030 Stretch9 and later used it for their mainframe lines, starting with the System/360 in 1964.","['programmable', 'computer', 'commercial', 'sale', 'univac', 'ibm', '7018', 'include', 'feature', 'operation', 'simple', 'typically', 'include', 'instruction', 'perform', 'complete', 'input', 'output', 'operation', 'hardware', 'logic', 'load', 'content', 'punch', 'card', 'typical', 'one', 'input', 'medium', 'magnetic', 'drum', 'magnetic', 'tape', 'contain', 'bootstrap', 'program', 'press', 'single', 'button', 'boot', 'concept', 'call', 'variety', 'name', 'ibm', 'computer', '1950', 'early', '1960', 'ibm', 'term', 'initial', 'program', 'load', 'ibm', '7030', 'stretch9', 'later', 'mainframe', 'line', 'start', '1964']"
1905,"The IBM 701 computer 1952–1956 had a ""Load"" button that initiated reading of the first 36-bit word into main memory from a punched card in a card reader, a magnetic tape in a tape drive, or a magnetic drum unit, depending on the position of the Load Selector switch. The left 18-bit half-word was then executed as an instruction, which usually read additional words into memory.1011 The loaded boot program was then executed, which, in turn, loaded a larger program from that medium into memory without further help from the human operator. The IBM 704,12 IBM 7090,13 and IBM 709414 had similar mechanisms, but with different load buttons for different devices. The term ""boot"" has been used in this sense since at least 1958.15","['ibm', '701', 'computer', '1952–1956', 'load', 'button', 'initiate', 'reading', 'bit', 'word', 'main', 'memory', 'punched', 'card', 'card', 'reader', 'magnetic', 'tape', 'tape', 'drive', 'magnetic', 'drum', 'unit', 'depend', 'position', 'load', 'selector', 'switch', 'left', 'bit', 'half', 'word', 'execute', 'instruction', 'usually', 'read', 'additional', 'word', 'memory', 'loaded', 'boot', 'program', 'execute', 'turn', 'load', 'large', 'program', 'medium', 'memory', 'help', 'human', 'operator', 'ibm', '704', 'ibm', '7090', 'ibm', '709414', 'similar', 'mechanism', 'different', 'load', 'button', 'different', 'device', 'term', 'boot', 'sense', '1958']"
1906,"Other IBM computers of that era had similar features. For example, the IBM 1401 system c. 1958 used a card reader to load a program from a punched card. The 80 characters stored in the punched card were read into memory locations 001 to 080, then the computer would branch to memory location 001 to read its first stored instruction. This instruction was always the same: move the information in these first 80 memory locations to an assembly area where the information in punched cards 2, 3, 4, and so on, could be combined to form the stored program. Once this information was moved to the assembly area, the machine would branch to an instruction in location 080 read a card and the next card would be read and its information processed.","['ibm', 'computer', 'era', 'similar', 'feature', 'example', 'ibm', '1401', 'system', '1958', 'card', 'reader', 'load', 'program', 'punched', 'card', 'character', 'store', 'punched', 'card', 'read', 'memory', 'location', '001', '080', 'computer', 'branch', 'memory', 'location', '001', 'read', 'store', 'instruction', 'instruction', 'information', 'memory', 'location', 'assembly', 'area', 'information', 'punched', 'card', 'combine', 'form', 'store', 'program', 'information', 'move', 'assembly', 'area', 'machine', 'branch', 'instruction', 'location', '080', 'read', 'card', 'card', 'read', 'information', 'process']"
1907,"Another example was the IBM 650 1953, a decimal machine, which had a group of ten 10-position switches on its operator panel which were addressable as a memory word address 8000 and could be executed as an instruction. Thus setting the switches to 7004000400 and pressing the appropriate button would read the first card in the card reader into memory op code 70, starting at address 400 and then jump to 400 to begin executing the program on that card.16 The IBM 7040 and 7044 have a similar mechanism, in which the Load button causes the instruction set up in the entry keys on the front panel is executed, and the channel that instruction sets up is given a command to transfer data to memory starting at address 00100; when that transfer finishes, the CPU jumps to address 00101.17","['example', 'ibm', '650', '1953', 'decimal', 'machine', 'group', 'position', 'switch', 'operator', 'panel', 'addressable', 'memory', 'word', 'address', '8000', 'execute', 'instruction', 'set', 'switch', '7004000400', 'press', 'appropriate', 'button', 'read', 'card', 'card', 'reader', 'memory', 'code', 'start', 'address', '400', 'jump', '400', 'begin', 'execute', 'program', 'card', 'ibm', '7040', '7044', 'similar', 'mechanism', 'load', 'button', 'cause', 'instruction', 'set', 'entry', 'key', 'panel', 'execute', 'channel', 'instruction', 'set', 'give', 'command', 'transfer', 'datum', 'memory', 'start', 'address', '00100', 'transfer', 'finish', 'cpu', 'jump', 'address', '00101']"
1908,IBM's competitors also offered single button program load.,"['ibm', 'competitor', 'offer', 'single', 'button', 'program', 'load']"
1909,"A noteworthy variation of this is found on the Burroughs B1700 where there is neither a bootstrap ROM nor a hardwired IPL operation. Instead, after the system is reset it reads and executes microinstructions sequentially from a cassette tape drive mounted on the front panel; this sets up a boot loader in RAM which is then executed.21 However, since this makes few assumptions about the system it can equally well be used to load diagnostic Maintenance Test Routine tapes which display an intelligible code on the front panel even in cases of gross CPU failure.21","['noteworthy', 'variation', 'find', 'burroughs', 'b1700', 'bootstrap', 'rom', 'hardwired', 'ipl', 'operation', 'instead', 'system', 'reset', 'read', 'execute', 'microinstruction', 'sequentially', 'cassette', 'tape', 'drive', 'mount', 'panel', 'set', 'boot', 'loader', 'ram', 'executed', 'make', 'assumption', 'system', 'equally', 'load', 'diagnostic', 'maintenance', 'test', 'routine', 'tape', 'display', 'intelligible', 'code', 'panel', 'case', 'gross', 'cpu', 'failure']"
1910,"In the IBM System/360 and its successors, including the current z/Architecture machines, the boot process is known as Initial Program Load IPL.","['ibm', 'successor', 'include', 'current', 'architecture', 'machine', 'boot', 'process', 'know', 'initial', 'program', 'load', 'ipl']"
1911,"IBM coined this term for the 7030 Stretch,9 revived it for the design of the System/360, and continues to use it in those environments today.22 In the System/360 processors, an IPL is initiated by the computer operator by selecting the three hexadecimal digit device address CUU; C=I/O Channel address, UU=Control unit and Device addressnb 2 followed by pressing the LOAD button. On the high end System/360 models, mostnb 3 System/370 and some later systems, the functions of the switches and the LOAD button are simulated using selectable areas on the screen of a graphics console, oftennb 4 an IBM 2250-like device or an IBM 3270-like device. For example, on the System/370 Model 158, the keyboard sequence 0-7-X zero, seven and X, in that order results in an IPL from the device address which was keyed into the input area. The Amdahl 470V/6 and related CPUs supported four hexadecimal digits on those CPUs which had the optional second channel unit installed, for a total of 32 channels. Later, IBM would also support more than 16 channels.","['ibm', 'coin', 'term', '7030', 'stretch', 'revive', 'design', 'continue', 'use', 'environment', 'today', 'processor', 'ipl', 'initiate', 'computer', 'operator', 'select', 'hexadecimal', 'digit', 'device', 'address', 'cuu', 'channel', 'address', 'control', 'unit', 'device', 'addressnb', 'follow', 'press', 'load', 'button', 'high', 'end', 'model', 'mostnb', 'later', 'system', 'function', 'switch', 'load', 'button', 'simulate', 'selectable', 'area', 'screen', 'graphic', 'console', 'oftennb', 'ibm', '2250', 'like', 'device', 'ibm', '3270', 'like', 'device', 'example', 'model', '158', 'keyboard', 'sequence', 'zero', 'seven', 'order', 'result', 'ipl', 'device', 'address', 'key', 'input', 'area', 'amdahl', 'relate', 'cpu', 'support', 'hexadecimal', 'digit', 'cpu', 'optional', 'second', 'channel', 'unit', 'instal', 'total', 'channel', 'later', 'ibm', 'support', 'channel']"
1912,"The IPL function in the System/360 and its successors prior to IBM Z, and its compatibles such as Amdahl's, reads 24 bytes from an operator-specified device into main storage starting at real address zero. The second and third groups of eight bytes are treated as Channel Command Words CCWs to continue loading the startup program the first CCW is always simulated by the CPU and consists of a Read IPL command, .mw-parser-output .monospacedfont-family:monospace,monospace02h, with command chaining and suppress incorrect length indication being enforced. When the I/O channel commands are complete, the first group of eight bytes is then loaded into the processor's Program Status Word PSW and the startup program begins execution at the location designated by that PSW.22 The IPL device is usually a disk drive, hence the special significance of the 02h read-type command, but exactly the same procedure is also used to IPL from other input-type devices, such as tape drives, or even card readers, in a device-independent manner, allowing, for example, the installation of an operating system on a brand-new computer from an OS initial distribution magnetic tape. For disk controllers, the 02h command also causes the selected device to seek to cylinder 0000h, head 0000h, simulating a Seek cylinder and head command, 07h, and to search for record 01h, simulating a Search ID Equal command, 31h; seeks and searches are not simulated by tape and card controllers, as for these device classes a Read IPL command is simply a sequential read command.","['ipl', 'function', 'successor', 'prior', 'ibm', 'compatible', 'amdahl', 'read', 'byte', 'operator', 'specify', 'device', 'main', 'storage', 'start', 'real', 'address', 'zero', 'second', 'group', 'byte', 'treat', 'channel', 'command', 'words', 'ccw', 'continue', 'load', 'startup', 'program', 'ccw', 'simulate', 'cpu', 'consist', 'read', 'ipl', 'command', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospace02h', 'command', 'chain', 'suppress', 'incorrect', 'length', 'indication', 'enforce', 'channel', 'command', 'complete', 'group', 'byte', 'load', 'processor', 'program', 'status', 'word', 'psw', 'startup', 'program', 'begin', 'execution', 'location', 'designate', 'psw', 'ipl', 'device', 'usually', 'disk', 'drive', 'special', 'significance', '02h', 'read', 'type', 'command', 'exactly', 'procedure', 'ipl', 'input', 'type', 'device', 'tape', 'drive', 'card', 'reader', 'device', 'independent', 'manner', 'allow', 'example', 'installation', 'operate', 'system', 'brand', 'new', 'computer', 'initial', 'distribution', 'magnetic', 'tape', 'disk', 'controller', '02h', 'command', 'cause', 'select', 'device', 'seek', 'cylinder', '0000h', 'head', '0000h', 'simulate', 'seek', 'cylinder', 'head', 'command', '07h', 'search', 'record', '01h', 'simulate', 'search', 'equal', 'command', '31h', 'seek', 'search', 'simulate', 'tape', 'card', 'controller', 'device', 'class', 'read', 'ipl', 'command', 'simply', 'sequential', 'read', 'command']"
1913,"The disk, tape or card deck must contain a special program to load the actual operating system or standalone utility into main storage, and for this specific purpose ""IPL Text"" is placed on the disk by the stand-alone DASDI Direct Access Storage Device Initialization program or an equivalent program running under an operating system, e.g., ICKDSF, but IPL-able tapes and card decks are usually distributed with this ""IPL Text"" already present.","['disk', 'tape', 'card', 'deck', 'contain', 'special', 'program', 'load', 'actual', 'operating', 'system', 'standalone', 'utility', 'main', 'storage', 'specific', 'purpose', 'ipl', 'text', 'place', 'disk', 'stand', 'dasdi', 'direct', 'access', 'storage', 'device', 'initialization', 'program', 'equivalent', 'program', 'run', 'operating', 'system', 'e.g.', 'ickdsf', 'ipl', 'able', 'tape', 'card', 'deck', 'usually', 'distribute', 'ipl', 'text', 'present']"
1914,"IBM introduced some evolutionary changes in the IPL process, changing some details for System/370 Extended Architecture S/370-XA and later, and adding a new type of IPL for z/Architecture.","['ibm', 'introduce', 'evolutionary', 'change', 'ipl', 'process', 'change', 'detail', 'extended', 'architecture', 'later', 'add', 'new', 'type', 'ipl', 'architecture']"
1915,"Minicomputers, starting with the Digital Equipment Corporation DEC PDP-5 and PDP-8 1965 simplified design by using the CPU to assist input and output operations. This saved cost but made booting more complicated than pressing a single button. Minicomputers typically had some way to toggle in short programs by manipulating an array of switches on the front panel. Since the early minicomputers used magnetic-core memory, which did not lose its information when power was off, these bootstrap loaders would remain in place unless they were erased. Erasure sometimes happened accidentally when a program bug caused a loop that overwrote all of memory.","['minicomputer', 'start', 'digital', 'equipment', 'corporation', 'dec', 'pdp-5', 'pdp-8', '1965', 'simplified', 'design', 'cpu', 'assist', 'input', 'output', 'operation', 'save', 'cost', 'boot', 'complicated', 'press', 'single', 'button', 'minicomputer', 'typically', 'way', 'toggle', 'short', 'program', 'manipulate', 'array', 'switch', 'panel', 'early', 'minicomputer', 'magnetic', 'core', 'memory', 'lose', 'information', 'power', 'bootstrap', 'loader', 'remain', 'place', 'erase', 'erasure', 'happen', 'accidentally', 'program', 'bug', 'cause', 'loop', 'overwrite', 'memory']"
1916,"Other minicomputers with such simple form of booting include Hewlett-Packard's HP 2100 series mid-1960s, the original Data General Nova 1969, and DEC's PDP-4 1962 and PDP-11 1970.","['minicomputer', 'simple', 'form', 'booting', 'include', 'hewlett', 'packard', '2100', 'series', 'mid-1960', 'original', 'data', 'general', 'nova', '1969', 'dec', 'pdp-4', '1962', 'pdp-11', '1970']"
1917,"As the I/O operations needed to cause a read operation on a minicomputer I/O device were typically different for different device controllers, different bootstrap programs were needed for different devices.","['operation', 'need', 'cause', 'read', 'operation', 'minicomputer', 'device', 'typically', 'different', 'different', 'device', 'controller', 'different', 'bootstrap', 'program', 'need', 'different', 'device']"
1918,"DEC later added, in 1971, an optional diode matrix read-only memory for the PDP-11 that stored a bootstrap program of up to 32 words 64 bytes. It consisted of a printed circuit card, the M792, that plugged into the Unibus and held a 32 by 16 array of semiconductor diodes. With all 512 diodes in place, the memory contained all ""one"" bits; the card was programmed by cutting off each diode whose bit was to be ""zero"". DEC also sold versions of the card, the BM792-Yx series, pre-programmed for many standard input devices by simply omitting the unneeded diodes.2324","['dec', 'later', 'add', '1971', 'optional', 'diode', 'matrix', 'read', 'memory', 'pdp-11', 'store', 'bootstrap', 'program', 'word', 'byte', 'consist', 'print', 'circuit', 'card', 'm792', 'plug', 'unibus', 'hold', 'array', 'semiconductor', 'diode', '512', 'diode', 'place', 'memory', 'contain', 'bit', 'card', 'program', 'cut', 'diode', 'bit', 'zero', 'dec', 'sell', 'version', 'card', 'bm792', 'series', 'pre', 'program', 'standard', 'input', 'device', 'simply', 'omit', 'unneeded', 'diodes']"
1919,"Following the older approach, the earlier PDP-1 has a hardware loader, such that an operator need only push the ""load"" switch to instruct the paper tape reader to load a program directly into core memory. The PDP-7,25 PDP-9,26 and PDP-1527 successors to the PDP-4 have an added Read-In button to read a program in from paper tape and jump to it. The Data General Supernova used front panel switches to cause the computer to automatically load instructions into memory from a device specified by the front panel's data switches, and then jump to loaded code.28","['follow', 'old', 'approach', 'early', 'pdp-1', 'hardware', 'loader', 'operator', 'need', 'push', 'load', 'switch', 'instruct', 'paper', 'tape', 'reader', 'load', 'program', 'directly', 'core', 'memory', 'pdp-7', 'pdp-9', 'pdp-1527', 'successor', 'pdp-4', 'add', 'read', 'button', 'read', 'program', 'paper', 'tape', 'jump', 'data', 'general', 'supernova', 'panel', 'switch', 'cause', 'computer', 'automatically', 'load', 'instruction', 'memory', 'device', 'specify', 'panel', 'data', 'switch', 'jump', 'loaded', 'code']"
1920,"In a minicomputer with a paper tape reader, the first program to run in the boot process, the boot loader, would read into core memory either the second-stage boot loader often called a Binary Loader that could read paper tape with checksum or the operating system from an outside storage medium. Pseudocode for the boot loader might be as simple as the following eight instructions:","['minicomputer', 'paper', 'tape', 'reader', 'program', 'run', 'boot', 'process', 'boot', 'loader', 'read', 'core', 'memory', 'second', 'stage', 'boot', 'loader', 'call', 'binary', 'loader', 'read', 'paper', 'tape', 'checksum', 'operating', 'system', 'outside', 'storage', 'medium', 'pseudocode', 'boot', 'loader', 'simple', 'follow', 'instruction']"
1921,"A related example is based on a loader for a Nicolet Instrument Corporation minicomputer of the 1970s, using the paper tape reader-punch unit on a Teletype Model 33 ASR teleprinter. The bytes of its second-stage loader are read from paper tape in reverse order.","['related', 'example', 'base', 'loader', 'nicolet', 'instrument', 'corporation', 'minicomputer', '1970', 'paper', 'tape', 'reader', 'punch', 'unit', 'teletype', 'model', 'asr', 'teleprinter', 'byte', 'second', 'stage', 'loader', 'read', 'paper', 'tape', 'reverse', 'order']"
1922,"The length of the second stage loader is such that the final byte overwrites location 7. After the instruction in location 6 executes, location 7 starts the second stage loader executing. The second stage loader then waits for the much longer tape containing the operating system to be placed in the tape reader. The difference between the boot loader and second stage loader is the addition of checking code to trap paper tape read errors, a frequent occurrence with relatively low-cost, ""part-time-duty"" hardware, such as the Teletype Model 33 ASR. Friden Flexowriters were far more reliable, but also comparatively costly.","['length', 'second', 'stage', 'loader', 'final', 'byte', 'overwrite', 'location', 'instruction', 'location', 'execute', 'location', 'start', 'second', 'stage', 'loader', 'executing', 'second', 'stage', 'loader', 'wait', 'long', 'tape', 'contain', 'operating', 'system', 'place', 'tape', 'reader', 'difference', 'boot', 'loader', 'second', 'stage', 'loader', 'addition', 'check', 'code', 'trap', 'paper', 'tape', 'read', 'error', 'frequent', 'occurrence', 'relatively', 'low', 'cost', 'time', 'duty', 'hardware', 'teletype', 'model', 'asr', 'friden', 'flexowriters', 'far', 'reliable', 'comparatively', 'costly']"
1923,"The earliest microcomputers, such as the Altair 8800 released first in 1975 and an even earlier, similar machine based on the Intel 8008 CPU had no bootstrapping hardware as such.29 When powered-up, the CPU would see memory that would contain random data. The front panels of these machines carried toggle switches for entering addresses and data, one switch per bit of the computer memory word and address bus. Simple additions to the hardware permitted one memory location at a time to be loaded from those switches to store bootstrap code. Meanwhile, the CPU was kept from attempting to execute memory content. Once correctly loaded, the CPU was enabled to execute the bootstrapping code. This process, similar to that used for several earlier minicomputers, was tedious and had to be error-free.30","['early', 'microcomputer', 'altair', '8800', 'release', '1975', 'early', 'similar', 'machine', 'base', 'intel', '8008', 'cpu', 'bootstrapping', 'hardware', 'such', 'power', 'cpu', 'memory', 'contain', 'random', 'datum', 'panel', 'machine', 'carry', 'toggle', 'switch', 'enter', 'address', 'datum', 'switch', 'bit', 'computer', 'memory', 'word', 'address', 'bus', 'simple', 'addition', 'hardware', 'permit', 'memory', 'location', 'time', 'load', 'switch', 'store', 'bootstrap', 'code', 'cpu', 'keep', 'attempt', 'execute', 'memory', 'content', 'correctly', 'load', 'cpu', 'enable', 'execute', 'bootstrapping', 'code', 'process', 'similar', 'early', 'minicomputer', 'tedious', 'error', 'free']"
1924,"The introduction of integrated circuit read-only memory ROM, with its many variants, including mask-programmed ROMs, programmable ROMs PROM, erasable programmable ROMs EPROM, and flash memory, reduced the physical size and cost of ROM. This allowed firmware boot programs to be included as part of the computer.","['introduction', 'integrate', 'circuit', 'read', 'memory', 'rom', 'variant', 'include', 'mask', 'program', 'rom', 'programmable', 'rom', 'prom', 'erasable', 'programmable', 'rom', 'eprom', 'flash', 'memory', 'reduce', 'physical', 'size', 'cost', 'rom', 'allow', 'firmware', 'boot', 'program', 'include', 'computer']"
1925,"The Data General Nova 1200 1970 and Nova 800 1971 had a program load switch that, in combination with options that provided two ROM chips, loaded a program into main memory from those ROM chips and jumped to it.28 Digital Equipment Corporation introduced the integrated-circuit-ROM-based BM873 1974,31 M9301 1977,32 M9312 1978,33 REV11-A and REV11-C,34 MRV11-C,35 and MRV11-D36 ROM memories, all usable as bootstrap ROMs. The PDP-11/34 1976,37 PDP-11/60 1977,38 PDP-11/24 1979,39 and most later models include boot ROM modules.","['data', 'general', 'nova', '1200', '1970', 'nova', '800', '1971', 'program', 'load', 'switch', 'combination', 'option', 'provide', 'rom', 'chip', 'load', 'program', 'main', 'memory', 'rom', 'chip', 'jump', 'it', 'digital', 'equipment', 'corporation', 'introduce', 'integrate', 'circuit', 'rom', 'base', 'bm873', '1974', 'm9301', '1977', 'm9312', '1978', 'rev11', 'rev11', 'c', 'mrv11', 'c', 'mrv11', 'd36', 'rom', 'memory', 'usable', 'bootstrap', 'rom', '1976', '1977', '1979', 'late', 'model', 'include', 'boot', 'rom', 'module']"
1926,"An Italian telephone switching computer, called ""Gruppi Speciali"", patented in 1975 by Alberto Ciaramella, a researcher at CSELT,40 included an external ROM. Gruppi Speciali was, starting from 1975, a fully single-button machine booting into the operating system from a ROM memory composed from semiconductors, not from ferrite cores. Although the ROM device was not natively embedded in the computer of Gruppi Speciali, due to the design of the machine, it also allowed the single-button ROM booting in machines not designed for that therefore, this ""bootstrap device"" was architecture-independent, e.g. the PDP-11. Storing the state of the machine after the switch-off was also in place, which was another critical feature in the telephone switching contest.41","['italian', 'telephone', 'switching', 'computer', 'call', 'gruppi', 'speciali', 'patent', '1975', 'alberto', 'ciaramella', 'researcher', 'cselt', 'include', 'external', 'rom', 'gruppi', 'speciali', 'start', '1975', 'fully', 'single', 'button', 'machine', 'booting', 'operating', 'system', 'rom', 'memory', 'compose', 'semiconductor', 'ferrite', 'core', 'rom', 'device', 'natively', 'embed', 'computer', 'gruppi', 'speciali', 'design', 'machine', 'allow', 'single', 'button', 'rom', 'booting', 'machine', 'design', 'bootstrap', 'device', 'architecture', 'independent', 'e.g.', 'pdp-11', 'store', 'state', 'machine', 'switch', 'place', 'critical', 'feature', 'telephone', 'switching', 'contest']"
1927,"Some minicomputers and superminicomputers include a separate console processor that bootstraps the main processor. The PDP-11/44 had an Intel 8085 as a console processor;42 the VAX-11/780, the first member of Digital's VAX line of 32-bit superminicomputers, had an LSI-11-based console processor,43 and the VAX-11/730 had an 8085-based console processor.44 These console processors could boot the main processor from various storage devices.","['minicomputer', 'superminicomputer', 'include', 'separate', 'console', 'processor', 'bootstrap', 'main', 'processor', 'intel', '8085', 'console', 'processor', 'member', 'digital', 'vax', 'line', 'bit', 'superminicomputer', 'lsi-11', 'base', 'console', 'processor', '8085', 'base', 'console', 'processor', 'console', 'processor', 'boot', 'main', 'processor', 'storage', 'device']"
1928,"Some other superminicomputers, such as the VAX-11/750, implement console functions, including the first stage of booting, in CPU microcode.45","['superminicomputer', 'implement', 'console', 'function', 'include', 'stage', 'booting', 'cpu', 'microcode']"
1929,"Typically, a microprocessor will, after a reset or power-on condition, perform a start-up process that usually takes the form of ""begin execution of the code that is found starting at a specific address"" or ""look for a multibyte code at a specific address and jump to the indicated location to begin execution"". A system built using that microprocessor will have the permanent ROM occupying these special locations so that the system always begins operating without operator assistance. For example, Intel x86 processors always start by running the instructions beginning at F000:FFF0,4647 while for the MOS 6502 processor, initialization begins by reading a two-byte vector address at $FFFD MS byte and $FFFC LS byte and jumping to that location to run the bootstrap code.48","['typically', 'microprocessor', 'reset', 'power', 'condition', 'perform', 'start', 'process', 'usually', 'take', 'form', 'begin', 'execution', 'code', 'find', 'start', 'specific', 'address', 'look', 'multibyte', 'code', 'specific', 'address', 'jump', 'indicate', 'location', 'begin', 'execution', 'system', 'build', 'microprocessor', 'permanent', 'rom', 'occupy', 'special', 'location', 'system', 'begin', 'operate', 'operator', 'assistance', 'example', 'intel', 'x86', 'processor', 'start', 'run', 'instruction', 'begin', 'f000', 'fff0', 'mos', '6502', 'processor', 'initialization', 'begin', 'read', 'byte', 'vector', 'address', 'fffd', 'byte', 'fffc', 'byte', 'jump', 'location', 'run', 'bootstrap', 'code']"
1930,"Apple Computer's first computer, the Apple 1 introduced in 1976, featured PROM chips that eliminated the need for a front panel for the boot process as was the case with the Altair 8800 in a commercial computer. According to Apple's ad announcing it ""No More Switches, No More Lights ... the firmware in PROMS enables you to enter, display and debug programs all in hex from the keyboard.""49","['apple', 'computer', 'computer', 'apple', 'introduce', '1976', 'feature', 'prom', 'chip', 'eliminate', 'need', 'panel', 'boot', 'process', 'case', 'altair', '8800', 'commercial', 'computer', 'accord', 'apple', 'announce', 'switches', 'lights', 'firmware', 'proms', 'enable', 'enter', 'display', 'debug', 'program', 'hex', 'keyboard', '49']"
1931,"Due to the expense of read-only memory at the time, the Apple II series booted its disk operating systems using a series of very small incremental steps, each passing control onward to the next phase of the gradually more complex boot process. See Apple DOS: Boot loader. Because so little of the disk operating system relied on ROM, the hardware was also extremely flexible and supported a wide range of customized disk copy protection mechanisms. See Software Cracking: History.","['expense', 'read', 'memory', 'time', 'apple', 'series', 'boot', 'disk', 'operating', 'system', 'series', 'small', 'incremental', 'step', 'pass', 'control', 'onward', 'phase', 'gradually', 'complex', 'boot', 'process', 'apple', 'dos', 'boot', 'loader', 'little', 'disk', 'operating', 'system', 'rely', 'rom', 'hardware', 'extremely', 'flexible', 'support', 'wide', 'range', 'customize', 'disk', 'copy', 'protection', 'mechanism', 'software', 'cracking', 'history']"
1932,"Some operating systems, most notably pre-1995 Macintosh systems from Apple, are so closely interwoven with their hardware that it is impossible to natively boot an operating system other than the standard one. This is the opposite extreme of the scenario using switches mentioned above; it is highly inflexible but relatively error-proof and foolproof as long as all hardware is working normally. A common solution in such situations is to design a boot loader that works as a program belonging to the standard OS that hijacks the system and loads the alternative OS. This technique was used by Apple for its A/UX Unix implementation and copied by various freeware operating systems and BeOS Personal Edition 5.","['operating', 'system', 'notably', 'pre-1995', 'macintosh', 'system', 'apple', 'closely', 'interwoven', 'hardware', 'impossible', 'natively', 'boot', 'operating', 'system', 'standard', 'opposite', 'extreme', 'scenario', 'switch', 'mention', 'highly', 'inflexible', 'relatively', 'error', 'proof', 'foolproof', 'long', 'hardware', 'work', 'normally', 'common', 'solution', 'situation', 'design', 'boot', 'loader', 'work', 'program', 'belong', 'standard', 'hijack', 'system', 'load', 'alternative', 'technique', 'apple', 'unix', 'implementation', 'copy', 'freeware', 'operating', 'system', 'beos', 'personal', 'edition']"
1933,"Some machines, like the Atari ST microcomputer, were ""instant-on"", with the operating system executing from a ROM. Retrieval of the OS from secondary or tertiary store was thus eliminated as one of the characteristic operations for bootstrapping. To allow system customizations, accessories, and other support software to be loaded automatically, the Atari's floppy drive was read for additional components during the boot process. There was a timeout delay that provided time to manually insert a floppy as the system searched for the extra components. This could be avoided by inserting a blank disk. The Atari ST hardware was also designed so the cartridge slot could provide native program execution for gaming purposes as a holdover from Atari's legacy making electronic games; by inserting the Spectre GCR cartridge with the Macintosh system ROM in the game slot and turning the Atari on, it could ""natively boot"" the Macintosh operating system rather than Atari's own TOS.","['machine', 'like', 'atari', 'microcomputer', 'instant', 'operating', 'system', 'execute', 'rom', 'retrieval', 'secondary', 'tertiary', 'store', 'eliminate', 'characteristic', 'operation', 'bootstrappe', 'allow', 'system', 'customization', 'accessory', 'support', 'software', 'load', 'automatically', 'atari', 'floppy', 'drive', 'read', 'additional', 'component', 'boot', 'process', 'timeout', 'delay', 'provide', 'time', 'manually', 'insert', 'floppy', 'system', 'search', 'extra', 'component', 'avoid', 'insert', 'blank', 'disk', 'atari', 'hardware', 'design', 'cartridge', 'slot', 'provide', 'native', 'program', 'execution', 'game', 'purpose', 'holdover', 'atari', 'legacy', 'make', 'electronic', 'game', 'insert', 'spectre', 'gcr', 'cartridge', 'macintosh', 'system', 'rom', 'game', 'slot', 'turn', 'atari', 'natively', 'boot', 'macintosh', 'operating', 'system', 'atari', 'tos']"
1934,"The IBM Personal Computer included ROM-based firmware called the BIOS; one of the functions of that firmware was to perform a power-on self test when the machine was powered up, and then to read software from a boot device and execute it. Firmware compatible with the BIOS on the IBM Personal Computer is used in IBM PC compatible computers. The UEFI was developed by Intel, originally for Itanium-based machines, and later also used as an alternative to the BIOS in x86-based machines, including Apple Macs using Intel processors.","['ibm', 'personal', 'computer', 'include', 'rom', 'base', 'firmware', 'call', 'bios', 'function', 'firmware', 'perform', 'power', 'self', 'test', 'machine', 'power', 'read', 'software', 'boot', 'device', 'execute', 'firmware', 'compatible', 'bios', 'ibm', 'personal', 'computer', 'ibm', 'compatible', 'computer', 'uefi', 'develop', 'intel', 'originally', 'itanium', 'base', 'machine', 'later', 'alternative', 'bios', 'x86', 'base', 'machine', 'include', 'apple', 'macs', 'intel', 'processor']"
1935,"Unix workstations originally had vendor-specific ROM-based firmware. Sun Microsystems later developed OpenBoot, later known as Open Firmware, which incorporated a Forth interpreter, with much of the firmware being written in Forth. It was standardized by the IEEE as IEEE standard 1275-1994; firmware that implements that standard was used in PowerPC-based Macs and some other PowerPC-based machines, as well as Sun's own SPARC-based computers. The Advanced RISC Computing specification defined another firmware standard, which was implemented on some MIPS-based and Alpha-based machines and the SGI Visual Workstation x86-based workstations.","['unix', 'workstation', 'originally', 'vendor', 'specific', 'rom', 'base', 'firmware', 'sun', 'microsystems', 'later', 'develop', 'openboot', 'later', 'know', 'open', 'firmware', 'incorporate', 'forth', 'interpreter', 'firmware', 'write', 'forth', 'standardize', 'ieee', 'ieee', 'standard', '1275', '1994', 'firmware', 'implement', 'standard', 'powerpc', 'base', 'macs', 'powerpc', 'base', 'machine', 'sun', 'sparc', 'base', 'computer', 'advanced', 'risc', 'computing', 'specification', 'define', 'firmware', 'standard', 'implement', 'mips', 'base', 'alpha', 'base', 'machine', 'sgi', 'visual', 'workstation', 'x86', 'base', 'workstation']"
1936,"When a computer is turned off, its software‍—‌including operating systems, application code, and data‍—‌remains stored on non-volatile memory. When the computer is powered on, it typically does not have an operating system or its loader in random-access memory RAM. The computer first executes a relatively small program stored in read-only memory ROM, and later EEPROM, NOR flash along with some needed data, to initialize CPU and motherboard, to initialize RAM especially on x86 systems, to access the nonvolatile device usually block device, e.g. NAND flash or devices from which the operating system programs and data can be loaded into RAM.","['computer', 'turn', 'software\u200d—\u200cincluding', 'operating', 'system', 'application', 'code', 'data\u200d—\u200cremain', 'store', 'non', 'volatile', 'memory', 'computer', 'power', 'typically', 'operate', 'system', 'loader', 'random', 'access', 'memory', 'ram', 'computer', 'execute', 'relatively', 'small', 'program', 'store', 'read', 'memory', 'rom', 'later', 'eeprom', 'flash', 'need', 'datum', 'initialize', 'cpu', 'motherboard', 'initialize', 'ram', 'especially', 'x86', 'system', 'access', 'nonvolatile', 'device', 'usually', 'block', 'device', 'e.g.', 'nand', 'flash', 'device', 'operate', 'system', 'program', 'datum', 'load', 'ram']"
1937,"The small program that starts this sequence is known as a bootstrap loader, bootstrap or boot loader. Often, multiple-stage boot loaders are used, during which several programs of increasing complexity load one after the other in a process of chain loading.","['small', 'program', 'start', 'sequence', 'know', 'bootstrap', 'loader', 'bootstrap', 'boot', 'loader', 'multiple', 'stage', 'boot', 'loader', 'program', 'increase', 'complexity', 'load', 'process', 'chain', 'loading']"
1938,"Some earlier computer systems, upon receiving a boot signal from a human operator or a peripheral device, may load a very small number of fixed instructions into memory at a specific location, initialize at least one CPU, and then point the CPU to the instructions and start their execution. These instructions typically start an input operation from some peripheral device which may be switch-selectable by the operator. Other systems may send hardware commands directly to peripheral devices or I/O controllers that cause an extremely simple input operation such as ""read sector zero of the system device into memory starting at location 1000"" to be carried out, effectively loading a small number of boot loader instructions into memory; a completion signal from the I/O device may then be used to start execution of the instructions by the CPU.","['early', 'computer', 'system', 'receive', 'boot', 'signal', 'human', 'operator', 'peripheral', 'device', 'load', 'small', 'number', 'fix', 'instruction', 'memory', 'specific', 'location', 'initialize', 'cpu', 'point', 'cpu', 'instruction', 'start', 'execution', 'instruction', 'typically', 'start', 'input', 'operation', 'peripheral', 'device', 'switch', 'selectable', 'operator', 'system', 'send', 'hardware', 'command', 'directly', 'peripheral', 'device', 'controller', 'cause', 'extremely', 'simple', 'input', 'operation', 'read', 'sector', 'zero', 'system', 'device', 'memory', 'start', 'location', '1000', 'carry', 'effectively', 'load', 'small', 'number', 'boot', 'loader', 'instruction', 'memory', 'completion', 'signal', 'device', 'start', 'execution', 'instruction', 'cpu']"
1939,"Smaller computers often use less flexible but more automatic boot loader mechanisms to ensure that the computer starts quickly and with a predetermined software configuration. In many desktop computers, for example, the bootstrapping process begins with the CPU executing software contained in ROM for example, the BIOS of an IBM PC at a predefined address some CPUs, including the Intel x86 series are designed to execute this software after reset without outside help. This software contains rudimentary functionality to search for devices eligible to participate in booting, and load a small program from a special section most commonly the boot sector of the most promising device, typically starting at a fixed entry point such as the start of the sector.","['small', 'computer', 'use', 'flexible', 'automatic', 'boot', 'loader', 'mechanism', 'ensure', 'computer', 'start', 'quickly', 'predetermine', 'software', 'configuration', 'desktop', 'computer', 'example', 'bootstrapping', 'process', 'begin', 'cpu', 'executing', 'software', 'contain', 'rom', 'example', 'bios', 'ibm', 'predefined', 'address', 'cpu', 'include', 'intel', 'x86', 'series', 'design', 'execute', 'software', 'reset', 'outside', 'help', 'software', 'contain', 'rudimentary', 'functionality', 'search', 'device', 'eligible', 'participate', 'booting', 'load', 'small', 'program', 'special', 'section', 'commonly', 'boot', 'sector', 'promising', 'device', 'typically', 'start', 'fix', 'entry', 'point', 'start', 'sector']"
1940,"Boot loaders may face peculiar constraints, especially in size; for instance, on the IBM PC and compatibles, the boot code must fit in the Master Boot Record MBR and the Partition Boot Record PBR, which in turn are limited to a single sector; on the IBM System/360, the size is limited by the IPL medium, e.g., card size, track size.","['boot', 'loader', 'face', 'peculiar', 'constraint', 'especially', 'size', 'instance', 'ibm', 'compatible', 'boot', 'code', 'fit', 'master', 'boot', 'record', 'mbr', 'partition', 'boot', 'record', 'pbr', 'turn', 'limit', 'single', 'sector', 'ibm', 'size', 'limit', 'ipl', 'medium', 'e.g.', 'card', 'size', 'track', 'size']"
1941,"On systems with those constraints, the first program loaded into RAM may not be sufficiently large to load the operating system and, instead, must load another, larger program. The first program loaded into RAM is called a first-stage boot loader, and the program it loads is called a second-stage boot loader.","['system', 'constraint', 'program', 'load', 'ram', 'sufficiently', 'large', 'load', 'operating', 'system', 'instead', 'load', 'large', 'program', 'program', 'load', 'ram', 'call', 'stage', 'boot', 'loader', 'program', 'load', 'call', 'second', 'stage', 'boot', 'loader']"
1942,"Examples of first-stage Hardware initialization stage bootloaders include BIOS, UEFI, coreboot, Libreboot and Das U-Boot. On the IBM PC, the boot loader in the Master Boot Record MBR and the Partition Boot Record PBR was coded to require at least 32 KB5051 later expanded to 64 KB52 of system memory and only use instructions supported by the original 8088/8086 processors.","['example', 'stage', 'hardware', 'initialization', 'stage', 'bootloader', 'include', 'bios', 'uefi', 'coreboot', 'libreboot', 'das', 'boot', 'ibm', 'boot', 'loader', 'master', 'boot', 'record', 'mbr', 'partition', 'boot', 'record', 'pbr', 'code', 'require', 'kb5051', 'later', 'expand', 'kb52', 'system', 'memory', 'use', 'instruction', 'support', 'original', 'processor']"
1943,"Second-stage OS initialization stage boot loaders, such as GNU GRUB, rEFInd, BOOTMGR, Syslinux, NTLDR or iBoot, are not themselves operating systems, but are able to load an operating system properly and transfer execution to it; the operating system subsequently initializes itself and may load extra device drivers. The second-stage boot loader does not need drivers for its own operation, but may instead use generic storage access methods provided by system firmware such as the BIOS, UEFI or Open Firmware, though typically with restricted hardware functionality and lower performance.53","['second', 'stage', 'initialization', 'stage', 'boot', 'loader', 'gnu', 'grub', 'refind', 'bootmgr', 'syslinux', 'ntldr', 'iboot', 'operate', 'system', 'able', 'load', 'operating', 'system', 'properly', 'transfer', 'execution', 'operate', 'system', 'subsequently', 'initialize', 'load', 'extra', 'device', 'driver', 'second', 'stage', 'boot', 'loader', 'need', 'driver', 'operation', 'instead', 'use', 'generic', 'storage', 'access', 'method', 'provide', 'system', 'firmware', 'bios', 'uefi', 'open', 'firmware', 'typically', 'restricted', 'hardware', 'functionality', 'low', 'performance']"
1944,"Many boot loaders like GNU GRUB, rEFInd, Windows's BOOTMGR, Syslinux, and Windows NT/2000/XP's NTLDR can be configured to give the user multiple booting choices. These choices can include different operating systems for dual or multi-booting from different partitions or drives, different versions of the same operating system in case a new version has unexpected problems, different operating system loading options e.g., booting into a rescue or safe mode, and some standalone programs that can function without an operating system, such as memory testers e.g., memtest86+, a basic shell as in GNU GRUB, or even games see List of PC Booter games.54 Some boot loaders can also load other boot loaders; for example, GRUB loads BOOTMGR instead of loading Windows directly. Usually a default choice is preselected with a time delay during which a user can press a key to change the choice; after this delay, the default choice is automatically run so normal booting can occur without interaction.","['boot', 'loader', 'like', 'gnu', 'grub', 'refind', 'windows', 'bootmgr', 'syslinux', 'windows', 'ntldr', 'configure', 'user', 'multiple', 'booting', 'choice', 'choice', 'include', 'different', 'operating', 'system', 'dual', 'multi', 'boot', 'different', 'partition', 'drive', 'different', 'version', 'operating', 'system', 'case', 'new', 'version', 'unexpected', 'problem', 'different', 'operating', 'system', 'loading', 'option', 'e.g.', 'boot', 'rescue', 'safe', 'mode', 'standalone', 'program', 'function', 'operating', 'system', 'memory', 'tester', 'e.g.', 'memtest86', 'basic', 'shell', 'gnu', 'grub', 'game', 'list', 'booter', 'games', 'boot', 'loader', 'load', 'boot', 'loader', 'example', 'grub', 'load', 'bootmgr', 'instead', 'load', 'windows', 'directly', 'usually', 'default', 'choice', 'preselecte', 'time', 'delay', 'user', 'press', 'key', 'change', 'choice', 'delay', 'default', 'choice', 'automatically', 'run', 'normal', 'booting', 'occur', 'interaction']"
1945,"The boot process can be considered complete when the computer is ready to interact with the user, or the operating system is capable of running system programs or application programs.","['boot', 'process', 'consider', 'complete', 'computer', 'ready', 'interact', 'user', 'operate', 'system', 'capable', 'run', 'system', 'program', 'application', 'program']"
1946,"Many embedded systems must boot immediately. For example, waiting a minute for a digital television or a GPS navigation device to start is generally unacceptable. Therefore, such devices have software systems in ROM or flash memory so the device can begin functioning immediately; little or no loading is necessary, because the loading can be precomputed and stored on the ROM when the device is made.","['embed', 'system', 'boot', 'immediately', 'example', 'wait', 'minute', 'digital', 'television', 'gps', 'navigation', 'device', 'start', 'generally', 'unacceptable', 'device', 'software', 'system', 'rom', 'flash', 'memory', 'device', 'begin', 'function', 'immediately', 'little', 'loading', 'necessary', 'loading', 'precompute', 'store', 'rom', 'device']"
1947,"Large and complex systems may have boot procedures that proceed in multiple phases until finally the operating system and other programs are loaded and ready to execute. Because operating systems are designed as if they never start or stop, a boot loader might load the operating system, configure itself as a mere process within that system, and then irrevocably transfer control to the operating system. The boot loader then terminates normally as any other process would.","['large', 'complex', 'system', 'boot', 'procedure', 'proceed', 'multiple', 'phase', 'finally', 'operating', 'system', 'program', 'load', 'ready', 'execute', 'operate', 'system', 'design', 'start', 'stop', 'boot', 'loader', 'load', 'operating', 'system', 'configure', 'mere', 'process', 'system', 'irrevocably', 'transfer', 'control', 'operating', 'system', 'boot', 'loader', 'terminate', 'normally', 'process']"
1948,"Most computers are also capable of booting over a computer network. In this scenario, the operating system is stored on the disk of a server, and certain parts of it are transferred to the client using a simple protocol such as the Trivial File Transfer Protocol TFTP. After these parts have been transferred, the operating system takes over the control of the booting process.","['computer', 'capable', 'boot', 'computer', 'network', 'scenario', 'operating', 'system', 'store', 'disk', 'server', 'certain', 'part', 'transfer', 'client', 'simple', 'protocol', 'trivial', 'file', 'transfer', 'protocol', 'tftp', 'part', 'transfer', 'operating', 'system', 'take', 'control', 'booting', 'process']"
1949,"As with the second-stage boot loader, network booting begins by using generic network access methods provided by the network interface's boot ROM, which typically contains a Preboot Execution Environment PXE image. No drivers are required, but the system functionality is limited until the operating system kernel and drivers are transferred and started. As a result, once the ROM-based booting has completed it is entirely possible to network boot into an operating system that itself does not have the ability to use the network interface.","['second', 'stage', 'boot', 'loader', 'network', 'booting', 'begin', 'generic', 'network', 'access', 'method', 'provide', 'network', 'interface', 'boot', 'rom', 'typically', 'contain', 'preboot', 'execution', 'environment', 'pxe', 'image', 'driver', 'require', 'system', 'functionality', 'limit', 'operating', 'system', 'kernel', 'driver', 'transfer', 'start', 'result', 'rom', 'base', 'booting', 'complete', 'entirely', 'possible', 'network', 'boot', 'operating', 'system', 'ability', 'use', 'network', 'interface']"
1950,"The boot device is the device from which the operating system is loaded. A modern PC's UEFI or BIOS firmware supports booting from various devices, typically a local solid state drive or hard disk drive via the GPT or Master Boot Record MBR on such a drive or disk, an optical disc drive using El Torito, a USB mass storage device FTL-based flash drive, SD card or multi-media card slot, USB hard disk drive, USB optical disc drive, etc., or a network interface card using PXE. Older, less common BIOS-bootable devices include floppy disk drives, Zip drives, and LS-120 drives.","['boot', 'device', 'device', 'operate', 'system', 'load', 'modern', 'uefi', 'bios', 'firmware', 'support', 'boot', 'device', 'typically', 'local', 'solid', 'state', 'drive', 'hard', 'disk', 'drive', 'gpt', 'master', 'boot', 'record', 'mbr', 'drive', 'disk', 'optical', 'disc', 'drive', 'torito', 'usb', 'mass', 'storage', 'device', 'ftl', 'base', 'flash', 'drive', 'card', 'multi', 'media', 'card', 'slot', 'usb', 'hard', 'disk', 'drive', 'usb', 'optical', 'disc', 'drive', 'etc', 'network', 'interface', 'card', 'pxe', 'old', 'common', 'bios', 'bootable', 'device', 'include', 'floppy', 'disk', 'drive', 'zip', 'drive', 'ls-120', 'drive']"
1951,"Typically, the system firmware UEFI or BIOS will allow the user to configure a boot order. If the boot order is set to ""first, the DVD drive; second, the hard disk drive"", then the firmware will try to boot from the DVD drive, and if this fails e.g. because there is no DVD in the drive, it will try to boot from the local hard disk drive.","['typically', 'system', 'firmware', 'uefi', 'bios', 'allow', 'user', 'configure', 'boot', 'order', 'boot', 'order', 'set', 'dvd', 'drive', 'second', 'hard', 'disk', 'drive', 'firmware', 'try', 'boot', 'dvd', 'drive', 'fail', 'e.g.', 'dvd', 'drive', 'try', 'boot', 'local', 'hard', 'disk', 'drive']"
1952,"For example, on a PC with Windows installed on the hard drive, the user could set the boot order to the one given above, and then insert a Linux Live CD in order to try out Linux without having to install an operating system onto the hard drive. This is an example of dual booting, in which the user chooses which operating system to start after the computer has performed its Power-on self-test POST. In this example of dual booting, the user chooses by inserting or removing the DVD from the computer, but it is more common to choose which operating system to boot by selecting from a boot manager menu on the selected device, by using the computer keyboard to select from a BIOS or UEFI Boot Menu, or both; the Boot Menu is typically entered by pressing .mw-parser-output .keyboard-keyborder:1px solid #aaa;border-radius:0.2em;box-shadow:0.1em 0.1em 0.2em rgba0,0,0,0.1;background-color:#f9f9f9;background-image:linear-gradientto bottom,#eee,#f9f9f9,#eee;color:#000;padding:0.1em 0.3em;font-family:inherit;font-size:0.85emF8 or F12 keys during the POST; the BIOS Setup is typically entered by pressing F2 or DEL keys during the POST.5556","['example', 'windows', 'instal', 'hard', 'drive', 'user', 'set', 'boot', 'order', 'give', 'insert', 'linux', 'live', 'order', 'try', 'linux', 'have', 'install', 'operating', 'system', 'hard', 'drive', 'example', 'dual', 'booting', 'user', 'choose', 'operating', 'system', 'start', 'computer', 'perform', 'power', 'self', 'test', 'post', 'example', 'dual', 'booting', 'user', 'choose', 'insert', 'remove', 'dvd', 'computer', 'common', 'choose', 'operating', 'system', 'boot', 'select', 'boot', 'manager', 'menu', 'select', 'device', 'computer', 'keyboard', 'select', 'bios', 'uefi', 'boot', 'menu', 'boot', 'menu', 'typically', 'enter', 'press', '.mw', 'parser', 'output', '.keyboard', 'keyborderpx', 'solid', 'aaa', 'radiusem', 'shadowem', '0em', '0em', 'rgba0', 'color:#f9f9f9', 'image', 'linear', 'gradientto', 'bottom,#eee,#f9f9f9,#eee', '0em', 'family', 'inherit', 'sizeemf8', 'f12', 'key', 'post', 'bios', 'setup', 'typically', 'enter', 'press', 'del', 'key', 'post']"
1953,Several devices are available that enable the user to quick-boot into what is usually a variant of Linux for various simple tasks such as Internet access; examples are Splashtop and Latitude ON.575859,"['device', 'available', 'enable', 'user', 'quick', 'boot', 'usually', 'variant', 'linux', 'simple', 'task', 'internet', 'access', 'example', 'splashtop', 'latitude', 'on']"
1954,"Upon starting, an IBM-compatible personal computer's x86 CPU, executes in real mode, the instruction located at reset vector the physical memory address FFFF0h on 16-bit x86 processors60 and FFFFFFF0h on 32-bit and 64-bit x86 processors6162, usually pointing to the firmware UEFI or BIOS entry point inside the ROM. This memory location typically contains a jump instruction that transfers execution to the location of the firmware UEFI or BIOS start-up program. This program runs a power-on self-test POST to check and initialize required devices such as main memory DRAM, the PCI bus and the PCI devices including running embedded Option ROMs. One of the most involved steps is setting up DRAM over SPD, further complicated by the fact that at this point memory is very limited.","['start', 'ibm', 'compatible', 'personal', 'computer', 'x86', 'cpu', 'execute', 'real', 'mode', 'instruction', 'locate', 'reset', 'vector', 'physical', 'memory', 'address', 'ffff0h', 'bit', 'x86', 'processors60', 'fffffff0h', 'bit', 'bit', 'x86', 'processors6162', 'usually', 'point', 'firmware', 'uefi', 'bios', 'entry', 'point', 'inside', 'rom', 'memory', 'location', 'typically', 'contain', 'jump', 'instruction', 'transfer', 'execution', 'location', 'firmware', 'uefi', 'bios', 'start', 'program', 'program', 'run', 'power', 'self', 'test', 'post', 'check', 'initialize', 'require', 'device', 'main', 'memory', 'dram', 'pci', 'bus', 'pci', 'device', 'include', 'run', 'embed', 'option', 'rom', 'involved', 'step', 'set', 'dram', 'spd', 'complicate', 'fact', 'point', 'memory', 'limited']"
1955,"After initializing required hardware, the firmware UEFI or BIOS goes through a pre-configured list of non-volatile storage devices ""boot device sequence"" until it finds one that is bootable. A bootable MBR device is defined as one that can be read from, and where the last two bytes of the first sector contain the little-endian word AA55h,nb 5 found as byte sequence 55h, AAh on disk also known as the MBR boot signature, or where it is otherwise established that the code inside the sector is executable on x86 PCs.","['initialize', 'require', 'hardware', 'firmware', 'uefi', 'bios', 'go', 'pre', 'configure', 'list', 'non', 'volatile', 'storage', 'device', 'boot', 'device', 'sequence', 'find', 'bootable', 'bootable', 'mbr', 'device', 'define', 'read', 'byte', 'sector', 'contain', 'little', 'endian', 'word', 'aa55h', 'find', 'byte', 'sequence', '55h', 'aah', 'disk', 'know', 'mbr', 'boot', 'signature', 'establish', 'code', 'inside', 'sector', 'executable', 'x86', 'pc']"
1956,"Once the BIOS has found a bootable device it loads the boot sector to linear address 7C00h usually segment:offset 0000h:7C00h,5052: 29 but some BIOSes erroneously use 07C0h:0000hcitation needed and transfers execution to the boot code. In the case of a hard disk, this is referred to as the Master Boot Record MBR. The conventional MBR code checks the MBR's partition table for a partition set as bootablenb 6 the one with active flag set. If an active partition is found, the MBR code loads the boot sector code from that partition, known as Volume Boot Record VBR, and executes it. The MBR boot code is often operating-system specific.","['bios', 'find', 'bootable', 'device', 'load', 'boot', 'sector', 'linear', 'address', '7c00h', 'usually', 'segment', 'offset', '0000hc00h', 'bioses', 'erroneously', 'use', '07c0hhcitation', 'need', 'transfer', 'execution', 'boot', 'code', 'case', 'hard', 'disk', 'refer', 'master', 'boot', 'record', 'mbr', 'conventional', 'mbr', 'code', 'check', 'mbr', 'partition', 'table', 'partition', 'set', 'bootablenb', 'active', 'flag', 'set', 'active', 'partition', 'find', 'mbr', 'code', 'load', 'boot', 'sector', 'code', 'partition', 'know', 'volume', 'boot', 'record', 'vbr', 'execute', 'mbr', 'boot', 'code', 'operate', 'system', 'specific']"
1957,"The boot sector code is the first-stage boot loader. It is located on fixed disks and removable drives, and must fit into the first 446 bytes of the Master Boot Record in order to leave room for the default 64-byte partition table with four partition entries and the two-byte boot signature, which the BIOS requires for a proper boot loader — or even less, when additional features like more than four partition entries up to 16 with 16 bytes each, a disk signature 6 bytes, a disk timestamp 6 bytes, an Advanced Active Partition 18 bytes or special multi-boot loaders have to be supported as well in some environments. In floppy and superfloppy Volume Boot Records, up to 59 bytes are occupied for the Extended BIOS Parameter Block on FAT12 and FAT16 volumes since DOS 4.0, whereas the FAT32 EBPB introduced with DOS 7.1 requires even 87 bytes, leaving only 423 bytes for the boot loader when assuming a sector size of 512 bytes. Microsoft boot sectors therefore traditionally imposed certain restrictions on the boot process, for example, the boot file had to be located at a fixed position in the root directory of the file system and stored as consecutive sectors,6364 conditions taken care of by the SYS command and slightly relaxed in later versions of DOS.64nb 7 The boot loader was then able to load the first three sectors of the file into memory, which happened to contain another embedded boot loader able to load the remainder of the file into memory.64 When Microsoft added LBA and FAT32 support, they even switched to a boot loader reaching over two physical sectors and using 386 instructions for size reasons. At the same time other vendors managed to squeeze much more functionality into a single boot sector without relaxing the original constraints on only minimal available memory 32 KB and processor support 8088/8086.nb 8 For example, DR-DOS boot sectors are able to locate the boot file in the FAT12, FAT16 and FAT32 file system, and load it into memory as a whole via CHS or LBA, even if the file is not stored in a fixed location and in consecutive sectors.6550666768nb 9nb 8","['boot', 'sector', 'code', 'stage', 'boot', 'loader', 'locate', 'fix', 'disk', 'removable', 'drive', 'fit', '446', 'byte', 'master', 'boot', 'record', 'order', 'leave', 'room', 'default', 'byte', 'partition', 'table', 'partition', 'entry', 'byte', 'boot', 'signature', 'bios', 'require', 'proper', 'boot', 'loader', 'additional', 'feature', 'like', 'partition', 'entry', 'byte', 'disk', 'signature', 'byte', 'disk', 'timestamp', 'byte', 'advanced', 'active', 'partition', 'byte', 'special', 'multi', 'boot', 'loader', 'support', 'environment', 'floppy', 'superfloppy', 'volume', 'boot', 'records', 'byte', 'occupy', 'extended', 'bios', 'parameter', 'block', 'fat12', 'fat16', 'volume', 'dos', '4', 'fat32', 'ebpb', 'introduce', 'dos', '7', 'require', 'byte', 'leave', '423', 'byte', 'boot', 'loader', 'assume', 'sector', 'size', '512', 'byte', 'microsoft', 'boot', 'sector', 'traditionally', 'impose', 'certain', 'restriction', 'boot', 'process', 'example', 'boot', 'file', 'locate', 'fix', 'position', 'root', 'directory', 'file', 'system', 'store', 'consecutive', 'sectors', 'condition', 'take', 'care', 'sys', 'command', 'slightly', 'relax', 'later', 'version', 'dosnb', 'boot', 'loader', 'able', 'load', 'sector', 'file', 'memory', 'happen', 'contain', 'embed', 'boot', 'loader', 'able', 'load', 'remainder', 'file', 'memory', 'microsoft', 'add', 'lba', 'fat32', 'support', 'switch', 'boot', 'loader', 'reach', 'physical', 'sector', '386', 'instruction', 'size', 'reason', 'time', 'vendor', 'manage', 'squeeze', 'functionality', 'single', 'boot', 'sector', 'relax', 'original', 'constraint', 'minimal', 'available', 'memory', 'processor', 'support', 'example', 'dos', 'boot', 'sector', 'able', 'locate', 'boot', 'file', 'fat12', 'fat16', 'fat32', 'file', 'system', 'load', 'memory', 'chs', 'lba', 'file', 'store', 'fix', 'location', 'consecutive', 'sectorsnb', '9nb']"
1958,"The VBR is often OS-specific; however, its main function is to load and execute the operating system boot loader file such as bootmgr or ntldr, which is the second-stage boot loader, from an active partition. Then the boot loader loads the OS kernel from the storage device.","['vbr', 'specific', 'main', 'function', 'load', 'execute', 'operating', 'system', 'boot', 'loader', 'file', 'bootmgr', 'ntldr', 'second', 'stage', 'boot', 'loader', 'active', 'partition', 'boot', 'loader', 'load', 'kernel', 'storage', 'device']"
1959,"If there is no active partition, or the active partition's boot sector is invalid, the MBR may load a secondary boot loader which will select a partition often via user input and load its boot sector, which usually loads the corresponding operating system kernel. In some cases, the MBR may also attempt to load secondary boot loaders before trying to boot the active partition. If all else fails, it should issue an INT 18h5250 BIOS interrupt call followed by an INT 19h just in case INT 18h would return in order to give back control to the BIOS, which would then attempt to boot off other devices, attempt a remote boot via network.50","['active', 'partition', 'active', 'partition', 'boot', 'sector', 'invalid', 'mbr', 'load', 'secondary', 'boot', 'loader', 'select', 'partition', 'user', 'input', 'load', 'boot', 'sector', 'usually', 'load', 'corresponding', 'operate', 'system', 'kernel', 'case', 'mbr', 'attempt', 'load', 'secondary', 'boot', 'loader', 'try', 'boot', 'active', 'partition', 'fail', 'issue', 'int', '18h5250', 'bios', 'interrupt', 'follow', 'int', '19h', 'case', 'int', '18h', 'return', 'order', 'control', 'bios', 'attempt', 'boot', 'device', 'attempt', 'remote', 'boot', 'network']"
1960,Many modern systems Intel Macs and newer PCs use UEFI.6970,"['modern', 'system', 'intel', 'macs', 'new', 'pc', 'use', 'uefi']"
1961,"Unlike BIOS, UEFI not Legacy boot via CSM does not rely on boot sectors, UEFI system loads the boot loader EFI application file in USB disk or in the EFI System Partition directly,71 and the OS kernel is loaded by the boot loader.","['unlike', 'bios', 'uefi', 'legacy', 'boot', 'csm', 'rely', 'boot', 'sector', 'uefi', 'system', 'load', 'boot', 'loader', 'efi', 'application', 'file', 'usb', 'disk', 'efi', 'system', 'partition', 'directly', 'kernel', 'load', 'boot', 'loader']"
1962,"Many modern CPUs, SoCs and microcontrollers for example, TI OMAP or sometimes even digital signal processors DSPs may have boot ROM integrated directly into their silicon, so such a processor can perform a simple boot sequence on its own and load boot programs firmware or software from boot sources such as NAND flash or eMMC. It is difficult to hardwire all the required logic for handling such devices, so an integrated boot ROM is used instead in such scenarios. Also, a boot ROM may be able to load a boot loader or diagnostic program via serial interfaces like UART, SPI, USB and so on. This feature is often used for system recovery purposes, or it could also be used for initial non-volatile memory programming when there is no software available in the non-volatile memory yet. Many modern microcontrollers e.g. flash memory controller on some USB flash drives have firmware ROM integrated directly into their silicon.","['modern', 'cpu', 'socs', 'microcontroller', 'example', 'omap', 'digital', 'signal', 'processor', 'dsp', 'boot', 'rom', 'integrate', 'directly', 'silicon', 'processor', 'perform', 'simple', 'boot', 'sequence', 'load', 'boot', 'program', 'firmware', 'software', 'boot', 'source', 'nand', 'flash', 'emmc', 'difficult', 'hardwire', 'require', 'logic', 'handle', 'device', 'integrate', 'boot', 'rom', 'instead', 'scenario', 'boot', 'rom', 'able', 'load', 'boot', 'loader', 'diagnostic', 'program', 'serial', 'interface', 'like', 'uart', 'spi', 'usb', 'feature', 'system', 'recovery', 'purpose', 'initial', 'non', 'volatile', 'memory', 'programming', 'software', 'available', 'non', 'volatile', 'memory', 'modern', 'microcontroller', 'e.g.', 'flash', 'memory', 'controller', 'usb', 'flash', 'drive', 'firmware', 'rom', 'integrate', 'directly', 'silicon']"
1963,"Some embedded system designs may also include an intermediary boot sequence step. For example, Das U-Boot may be split into two stages: the platform would load a small SPL Secondary Program Loader, which is a stripped-down version of U-Boot, and the SPL would do some initial hardware configuration e.g. DRAM initialization using CPU cache as RAM and load the larger, fully featured version of U-Boot.72","['embed', 'system', 'design', 'include', 'intermediary', 'boot', 'sequence', 'step', 'example', 'das', 'boot', 'split', 'stage', 'platform', 'load', 'small', 'spl', 'secondary', 'program', 'loader', 'strip', 'version', 'boot', 'spl', 'initial', 'hardware', 'configuration', 'e.g.', 'dram', 'initialization', 'cpu', 'cache', 'ram', 'load', 'large', 'fully', 'feature', 'version', 'boot']"
1964,"It is also possible to take control of a system by using a hardware debug interface such as JTAG. Such an interface may be used to write the boot loader program into bootable non-volatile memory e.g. flash by instructing the processor core to perform the necessary actions to program non-volatile memory. Alternatively, the debug interface may be used to upload some diagnostic or boot code into RAM, and then to start the processor core and instruct it to execute the uploaded code. This allows, for example, the recovery of embedded systems where no software remains on any supported boot device, and where the processor does not have any integrated boot ROM. JTAG is a standard and popular interface; many CPUs, microcontrollers and other devices are manufactured with JTAG interfaces as of 2009.","['possible', 'control', 'system', 'hardware', 'debug', 'interface', 'jtag', 'interface', 'write', 'boot', 'loader', 'program', 'bootable', 'non', 'volatile', 'memory', 'e.g.', 'flash', 'instruct', 'processor', 'core', 'perform', 'necessary', 'action', 'program', 'non', 'volatile', 'memory', 'alternatively', 'debug', 'interface', 'upload', 'diagnostic', 'boot', 'code', 'ram', 'start', 'processor', 'core', 'instruct', 'execute', 'uploaded', 'code', 'allow', 'example', 'recovery', 'embed', 'system', 'software', 'remain', 'support', 'boot', 'device', 'processor', 'integrate', 'boot', 'rom', 'jtag', 'standard', 'popular', 'interface', 'cpu', 'microcontroller', 'device', 'manufacture', 'jtag', 'interface', '2009']"
1965,"Some microcontrollers provide special hardware interfaces which cannot be used to take arbitrary control of a system or directly run code, but instead they allow the insertion of boot code into bootable non-volatile memory like flash memory via simple protocols. Then at the manufacturing phase, such interfaces are used to inject boot code and possibly other code into non-volatile memory. After system reset, the microcontroller begins to execute code programmed into its non-volatile memory, just like usual processors are using ROMs for booting. Most notably this technique is used by Atmel AVR microcontrollers, and by others as well. In many cases such interfaces are implemented by hardwired logic. In other cases such interfaces could be created by software running in integrated on-chip boot ROM from GPIO pins.","['microcontroller', 'provide', 'special', 'hardware', 'interface', 'arbitrary', 'control', 'system', 'directly', 'run', 'code', 'instead', 'allow', 'insertion', 'boot', 'code', 'bootable', 'non', 'volatile', 'memory', 'like', 'flash', 'memory', 'simple', 'protocol', 'manufacturing', 'phase', 'interface', 'inject', 'boot', 'code', 'possibly', 'code', 'non', 'volatile', 'memory', 'system', 'reset', 'microcontroller', 'begin', 'execute', 'code', 'program', 'non', 'volatile', 'memory', 'like', 'usual', 'processor', 'rom', 'boot', 'notably', 'technique', 'atmel', 'avr', 'microcontroller', 'case', 'interface', 'implement', 'hardwired', 'logic', 'case', 'interface', 'create', 'software', 'run', 'integrate', 'chip', 'boot', 'rom', 'gpio', 'pin']"
1966,"Most DSPs have a serial mode boot, and a parallel mode boot, such as the host port interface HPI boot.","['dsp', 'serial', 'mode', 'boot', 'parallel', 'mode', 'boot', 'host', 'port', 'interface', 'hpi', 'boot']"
1967,"In case of DSPs there is often a second microprocessor or microcontroller present in the system design, and this is responsible for overall system behavior, interrupt handling, dealing with external events, user interface, etc. while the DSP is dedicated to signal processing tasks only. In such systems the DSP could be booted by another processor which is sometimes referred as the host processor giving name to a Host Port. Such a processor is also sometimes referred as the master, since it usually boots first from its own memories and then controls overall system behavior, including booting of the DSP, and then further controlling the DSP's behavior. The DSP often lacks its own boot memories and relies on the host processor to supply the required code instead. The most notable systems with such a design are cell phones, modems, audio and video players and so on, where a DSP and a CPU/microcontroller are co-existing.","['case', 'dsp', 'second', 'microprocessor', 'microcontroller', 'present', 'system', 'design', 'responsible', 'overall', 'system', 'behavior', 'interrupt', 'handling', 'deal', 'external', 'event', 'user', 'interface', 'etc', 'dsp', 'dedicate', 'signal', 'processing', 'task', 'system', 'dsp', 'boot', 'processor', 'refer', 'host', 'processor', 'give', 'host', 'port', 'processor', 'refer', 'master', 'usually', 'boot', 'memory', 'control', 'overall', 'system', 'behavior', 'include', 'boot', 'dsp', 'control', 'dsp', 'behavior', 'dsp', 'lack', 'boot', 'memory', 'rely', 'host', 'processor', 'supply', 'require', 'code', 'instead', 'notable', 'system', 'design', 'cell', 'phone', 'modem', 'audio', 'video', 'player', 'dsp', 'cpu', 'microcontroller', 'exist']"
1968,"Many FPGA chips load their configuration from an external serial EEPROM ""configuration ROM"" on power-up.","['fpga', 'chip', 'load', 'configuration', 'external', 'serial', 'eeprom', 'configuration', 'rom', 'power']"
1969,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
1970,"In computing, inline expansion, or inlining, is a manual or compiler optimization that replaces a function call site with the body of the called function. Inline expansion is similar to macro expansion, but occurs during compilation, without changing the source code the text, while macro expansion occurs prior to compilation, and results in different text that is then processed by the compiler.","['computing', 'inline', 'expansion', 'inlining', 'manual', 'compiler', 'optimization', 'replace', 'function', 'site', 'body', 'call', 'function', 'inline', 'expansion', 'similar', 'macro', 'expansion', 'occur', 'compilation', 'change', 'source', 'code', 'text', 'macro', 'expansion', 'occur', 'prior', 'compilation', 'result', 'different', 'text', 'process', 'compiler']"
1971,"Inlining is an important optimization, but has complicated effects on performance.1 As a rule of thumb, some inlining will improve speed at very minor cost of space, but excess inlining will hurt speed, due to inlined code consuming too much of the instruction cache, and also cost significant space. A survey of the modest academic literature on inlining from the 1980s and 1990s is given in Peyton Jones & Marlow 1999.2","['inline', 'important', 'optimization', 'complicate', 'effect', 'performance', 'rule', 'thumb', 'inline', 'improve', 'speed', 'minor', 'cost', 'space', 'excess', 'inlining', 'hurt', 'speed', 'inline', 'code', 'consume', 'instruction', 'cache', 'cost', 'significant', 'space', 'survey', 'modest', 'academic', 'literature', 'inline', '1980', '1990', 'give', 'peyton', 'jones', 'marlow', '1999']"
1972,"Inline expansion is similar to macro expansion as the compiler places a new copy of the function in each place it is called. Inlined functions run a little faster than the normal functions as function-calling-overheads are saved, however, there is a memory penalty. If a function is inlined 10 times, there will be 10 copies of the function inserted into the code. Hence inlining is best for small functions that are called often. In C++ the member functions of a class, if defined within the class definition, are inlined by default no need to use the inline keyword; otherwise, the keyword is needed. The compiler may ignore the programmer’s attempt to inline a function, mainly if it is particularly large.","['inline', 'expansion', 'similar', 'macro', 'expansion', 'compiler', 'place', 'new', 'copy', 'function', 'place', 'call', 'inline', 'function', 'run', 'little', 'fast', 'normal', 'function', 'function', 'call', 'overhead', 'save', 'memory', 'penalty', 'function', 'inline', 'time', 'copy', 'function', 'insert', 'code', 'inline', 'good', 'small', 'function', 'call', 'c++', 'member', 'function', 'class', 'define', 'class', 'definition', 'inline', 'default', 'need', 'use', 'inline', 'keyword', 'keyword', 'need', 'compiler', 'ignore', 'programmer', 'attempt', 'inline', 'function', 'mainly', 'particularly', 'large']"
1973,"Inline expansion is used to eliminate the time overhead excess time when a function is called. It is typically used for functions that execute frequently. It also has a space benefit for very small functions, and is an enabling transformation for other optimizations.","['inline', 'expansion', 'eliminate', 'time', 'overhead', 'excess', 'time', 'function', 'call', 'typically', 'function', 'execute', 'frequently', 'space', 'benefit', 'small', 'function', 'enable', 'transformation', 'optimization']"
1974,"Without inline functions, the compiler decides which functions to inline. The programmer has little or no control over which functions are inlined and which are not. Giving this degree of control to the programmer allows for the use of application-specific knowledge in choosing which functions to inline.","['inline', 'function', 'compiler', 'decide', 'function', 'inline', 'programmer', 'little', 'control', 'function', 'inline', 'give', 'degree', 'control', 'programmer', 'allow', 'use', 'application', 'specific', 'knowledge', 'choose', 'function', 'inline']"
1975,"Ordinarily, when a function is invoked, control is transferred to its definition by a branch or call instruction. With inlining, control drops through directly to the code for the function, without a branch or call instruction.","['ordinarily', 'function', 'invoke', 'control', 'transfer', 'definition', 'branch', 'instruction', 'inlining', 'control', 'drop', 'directly', 'code', 'function', 'branch', 'instruction']"
1976,Compilers usually implement statements with inlining. Loop conditions and loop bodies need lazy evaluation. This property is fulfilled when the code to compute loop conditions and loop bodies is inlined. Performance considerations are another reason to inline statements.,"['compiler', 'usually', 'implement', 'statement', 'inline', 'loop', 'condition', 'loop', 'body', 'need', 'lazy', 'evaluation', 'property', 'fulfil', 'code', 'compute', 'loop', 'condition', 'loop', 'body', 'inline', 'performance', 'consideration', 'reason', 'inline', 'statement']"
1977,"In the context of functional programming languages, inline expansion is usually followed by the beta-reduction transformation.","['context', 'functional', 'programming', 'language', 'inline', 'expansion', 'usually', 'follow', 'beta', 'reduction', 'transformation']"
1978,"A programmer might inline a function manually through copy and paste programming, as a one-time operation on the source code. However, other methods of controlling inlining see below are preferable, because they do not precipitate bugs arising when the programmer overlooks a possibly modified duplicated version of the original function body, while fixing a bug in the inlined function.","['programmer', 'inline', 'function', 'manually', 'copy', 'paste', 'programming', 'time', 'operation', 'source', 'code', 'method', 'control', 'inline', 'preferable', 'precipitate', 'bug', 'arise', 'programmer', 'overlook', 'possibly', 'modify', 'duplicate', 'version', 'original', 'function', 'body', 'fix', 'bug', 'inline', 'function']"
1979,"The direct effect of this optimization is to improve time performance by eliminating call overhead, at the cost of worsening space usagea due to duplicating the function body. The code expansion due to duplicating the function body dominates, except for simple cases,b and thus the direct effect of inline expansion is to improve time at the cost of space.","['direct', 'effect', 'optimization', 'improve', 'time', 'performance', 'eliminate', 'overhead', 'cost', 'worsen', 'space', 'usagea', 'duplicate', 'function', 'body', 'code', 'expansion', 'duplicate', 'function', 'body', 'dominate', 'simple', 'case', 'direct', 'effect', 'inline', 'expansion', 'improve', 'time', 'cost', 'space']"
1980,"However, the primary benefit of inline expansion is to allow further optimizations and improved scheduling, due to increasing the size of the function body, as better optimization is possible on larger functions.3 The ultimate impact of inline expansion on speed is complicated, due to multiple effects on performance of the memory system primarily instruction cache, which dominates performance on modern processors: depending on the specific program and cache, inlining particular functions can increase or decrease performance.1","['primary', 'benefit', 'inline', 'expansion', 'allow', 'optimization', 'improved', 'scheduling', 'increase', 'size', 'function', 'body', 'well', 'optimization', 'possible', 'large', 'functions', 'ultimate', 'impact', 'inline', 'expansion', 'speed', 'complicated', 'multiple', 'effect', 'performance', 'memory', 'system', 'primarily', 'instruction', 'cache', 'dominate', 'performance', 'modern', 'processor', 'depend', 'specific', 'program', 'cache', 'inline', 'particular', 'function', 'increase', 'decrease', 'performance']"
1981,"The impact of inlining varies by programming language and program, due to different degrees of abstraction. In lower-level imperative languages such as C and Fortran it is typically a 10–20% speed boost, with minor impact on code size, while in more abstract languages it can be significantly more important, due to the number of layers inlining removes, with an extreme example being Self, where one compiler saw improvement factors of 4 to 55 by inlining.2","['impact', 'inline', 'varie', 'programming', 'language', 'program', 'different', 'degree', 'abstraction', 'low', 'level', 'imperative', 'language', 'fortran', 'typically', '10–20', 'speed', 'boost', 'minor', 'impact', 'code', 'size', 'abstract', 'language', 'significantly', 'important', 'number', 'layer', 'inline', 'remove', 'extreme', 'example', 'self', 'compiler', 'see', 'improvement', 'factor', 'inlining']"
1982,The direct benefits of eliminating a function call are:,"['direct', 'benefit', 'eliminate', 'function']"
1983,"The primary benefit of inlining, however, is the further optimizations it allows. Optimizations that cross function boundaries can be done without requiring interprocedural optimization IPO: once inlining has been performed, additional intraprocedural optimizations ""global optimizations"" become possible on the enlarged function body. For example:","['primary', 'benefit', 'inline', 'optimization', 'allow', 'optimization', 'cross', 'function', 'boundary', 'require', 'interprocedural', 'optimization', 'ipo', 'inline', 'perform', 'additional', 'intraprocedural', 'optimization', 'global', 'optimization', 'possible', 'enlarge', 'function', 'body', 'example']"
1984,"These can be done without inlining, but require a significantly more complicated compiler and linker in case caller and callee are in separate compilation units.","['inline', 'require', 'significantly', 'complicated', 'compiler', 'linker', 'case', 'caller', 'callee', 'separate', 'compilation', 'unit']"
1985,"Conversely, in some cases a language specification may allow a program to make additional assumptions about arguments to procedures that it can no longer make after the procedure is inlined, preventing some optimizations. Smarter compilers such as Glasgow Haskell Compiler will track this, but naive inlining loses this information.","['conversely', 'case', 'language', 'specification', 'allow', 'program', 'additional', 'assumption', 'argument', 'procedure', 'long', 'procedure', 'inline', 'prevent', 'optimization', 'smart', 'compiler', 'glasgow', 'haskell', 'compiler', 'track', 'naive', 'inlining', 'lose', 'information']"
1986,A further benefit of inlining for the memory system is:,"['benefit', 'inline', 'memory', 'system']"
1987,"The direct cost of inlining is increased code size, due to duplicating the function body at each call site. However, it does not always do so, namely in case of very short functions, where the function body is smaller than the size of a function call at the caller, including argument and return value handling, such as trivial accessor methods or mutator methods getters and setters; or for a function that is only used in one place, in which case it is not duplicated. Thus inlining may be minimized or eliminated if optimizing for code size, as is often the case in embedded systems.","['direct', 'cost', 'inline', 'increase', 'code', 'size', 'duplicate', 'function', 'body', 'site', 'case', 'short', 'function', 'function', 'body', 'small', 'size', 'function', 'caller', 'include', 'argument', 'return', 'value', 'handling', 'trivial', 'accessor', 'method', 'mutator', 'method', 'getter', 'setter', 'function', 'place', 'case', 'duplicate', 'inline', 'minimize', 'eliminate', 'optimize', 'code', 'size', 'case', 'embed', 'system']"
1988,"Inlining also imposes a cost on performance, due to the code expansion due to duplication hurting instruction cache performance.6 This is most significant if, prior to expansion, the working set of the program or a hot section of code fit in one level of the memory hierarchy e.g., L1 cache, but after expansion it no longer fits, resulting in frequent cache misses at that level. Due to the significant difference in performance at different levels of the hierarchy, this hurts performance considerably. At the highest level this can result in increased page faults, catastrophic performance degradation due to thrashing, or the program failing to run at all. This last is rare in common desktop and server applications, where code size is small relative to available memory, but can be an issue for resource-constrained environments such as embedded systems. One way to mitigate this problem is to split functions into a smaller hot inline path fast path, and a larger cold non-inline path slow path.6","['inline', 'impose', 'cost', 'performance', 'code', 'expansion', 'duplication', 'hurting', 'instruction', 'cache', 'performance', 'significant', 'prior', 'expansion', 'working', 'set', 'program', 'hot', 'section', 'code', 'fit', 'level', 'memory', 'hierarchy', 'e.g.', 'cache', 'expansion', 'long', 'fit', 'result', 'frequent', 'cache', 'miss', 'level', 'significant', 'difference', 'performance', 'different', 'level', 'hierarchy', 'hurt', 'performance', 'considerably', 'high', 'level', 'result', 'increase', 'page', 'fault', 'catastrophic', 'performance', 'degradation', 'thrashing', 'program', 'fail', 'run', 'rare', 'common', 'desktop', 'server', 'application', 'code', 'size', 'small', 'relative', 'available', 'memory', 'issue', 'resource', 'constrain', 'environment', 'embed', 'system', 'way', 'mitigate', 'problem', 'split', 'function', 'small', 'hot', 'inline', 'path', 'fast', 'path', 'large', 'cold', 'non', 'inline', 'path', 'slow', 'path']"
1989,"Inlining hurting performance is primarily a problem for large functions that are used in many places, but the break-even point beyond which inlining reduces performance is difficult to determine and depends in general on precise load, so it can be subject to manual optimization or profile-guided optimization.7 This is a similar issue to other code expanding optimizations such as loop unrolling, which also reduces number of instructions processed, but can decrease performance due to poorer cache performance.","['inline', 'hurt', 'performance', 'primarily', 'problem', 'large', 'function', 'place', 'break', 'point', 'inlining', 'reduce', 'performance', 'difficult', 'determine', 'depend', 'general', 'precise', 'load', 'subject', 'manual', 'optimization', 'profile', 'guide', 'optimization', 'similar', 'issue', 'code', 'expand', 'optimization', 'loop', 'unrolling', 'reduce', 'number', 'instruction', 'process', 'decrease', 'performance', 'poor', 'cache', 'performance']"
1990,"The precise effect of inlining on cache performance is complicated. For small cache sizes much smaller than the working set prior to expansion, the increased sequentiality dominates, and inlining improves cache performance. For cache sizes close to the working set, where inlining expands the working set so it no longer fits in cache, this dominates and cache performance decreases. For cache sizes larger than the working set, inlining has negligible impact on cache performance. Further, changes in cache design, such as load forwarding, can offset the increase in cache misses.8","['precise', 'effect', 'inline', 'cache', 'performance', 'complicated', 'small', 'cache', 'size', 'small', 'working', 'set', 'prior', 'expansion', 'increase', 'sequentiality', 'dominate', 'inline', 'improve', 'cache', 'performance', 'cache', 'size', 'close', 'work', 'set', 'inline', 'expand', 'working', 'set', 'long', 'fit', 'cache', 'dominate', 'cache', 'performance', 'decrease', 'cache', 'size', 'large', 'work', 'set', 'inline', 'negligible', 'impact', 'cache', 'performance', 'change', 'cache', 'design', 'load', 'forwarding', 'offset', 'increase', 'cache', 'misses']"
1991,"Compilers use a variety of mechanisms to decide which function calls should be inlined; these can include manual hints from programmers for specific functions, together with overall control via command-line options. Inlining is done automatically by many compilers in many languages, based on judgment of whether inlining is beneficial, while in other cases it can be manually specified via compiler directives, typically using a keyword or compiler directive called inline. Typically this only hints that inlining is desired, rather than requiring inlining, with the force of the hint varying by language and compiler.","['compiler', 'use', 'variety', 'mechanism', 'decide', 'function', 'call', 'inline', 'include', 'manual', 'hint', 'programmer', 'specific', 'function', 'overall', 'control', 'command', 'line', 'option', 'inline', 'automatically', 'compiler', 'language', 'base', 'judgment', 'inline', 'beneficial', 'case', 'manually', 'specify', 'compiler', 'directive', 'typically', 'keyword', 'compiler', 'directive', 'call', 'inline', 'typically', 'hint', 'inline', 'desire', 'require', 'inline', 'force', 'hint', 'vary', 'language', 'compiler']"
1992,"Typically, compiler developers keep the above performance issues in mind, and incorporate heuristics into their compilers that choose which functions to inline so as to improve performance, rather than worsening it, in most cases.","['typically', 'compiler', 'developer', 'performance', 'issue', 'mind', 'incorporate', 'heuristic', 'compiler', 'choose', 'function', 'inline', 'improve', 'performance', 'worsen', 'case']"
1993,"Once the compiler has decided to inline a particular function, performing the inlining operation itself is usually simple. Depending on whether the compiler inlines functions across code in different languages, the compiler can do inlining on either a high-level intermediate representation like abstract syntax trees or a low-level intermediate representation. In either case, the compiler simply computes the arguments, stores them in variables corresponding to the function's arguments, and then inserts the body of the function at the call site.","['compiler', 'decide', 'inline', 'particular', 'function', 'perform', 'inline', 'operation', 'usually', 'simple', 'depend', 'compiler', 'inline', 'function', 'code', 'different', 'language', 'compiler', 'inline', 'high', 'level', 'intermediate', 'representation', 'like', 'abstract', 'syntax', 'tree', 'low', 'level', 'intermediate', 'representation', 'case', 'compiler', 'simply', 'compute', 'argument', 'store', 'variable', 'correspond', 'function', 'argument', 'insert', 'body', 'function', 'site']"
1994,"Linkers can also do function inlining. When a linker inlines functions, it may inline functions whose source is not available, such as library functions see link-time optimization. A run-time system can inline function as well. Run-time inlining can use dynamic profiling information to make better decisions about which functions to inline, as in the Java Hotspot compiler.9","['linker', 'function', 'inline', 'linker', 'inline', 'function', 'inline', 'function', 'source', 'available', 'library', 'function', 'link', 'time', 'optimization', 'run', 'time', 'system', 'inline', 'function', 'run', 'time', 'inlining', 'use', 'dynamic', 'profiling', 'information', 'well', 'decision', 'function', 'inline', 'java', 'hotspot', 'compiler']"
1995,"Here is a simple example of inline expansion performed ""by hand"" at the source level in the C programming language:","['simple', 'example', 'inline', 'expansion', 'perform', 'hand', 'source', 'level', 'programming', 'language']"
1996,"Note that this is only an example. In an actual C application, it would be preferable to use an inlining language feature such as parameterized macros or inline functions to tell the compiler to transform the code in this way. The next section lists ways to optimize this code.","['note', 'example', 'actual', 'application', 'preferable', 'use', 'inlining', 'language', 'feature', 'parameterized', 'macros', 'inline', 'function', 'tell', 'compiler', 'transform', 'code', 'way', 'section', 'list', 'way', 'optimize', 'code']"
1997,Assembler macros provide an alternative approach to inlining whereby a sequence of instructions can normally be generated inline by macro expansion from a single macro source statement with zero or more parameters. One of the parameters might be an option to alternatively generate a one-time separate subroutine containing the sequence and processed instead by an inlined call to the function. Example:,"['assembler', 'macros', 'provide', 'alternative', 'approach', 'inline', 'sequence', 'instruction', 'normally', 'generate', 'inline', 'macro', 'expansion', 'single', 'macro', 'source', 'statement', 'zero', 'parameter', 'parameter', 'option', 'alternatively', 'generate', 'time', 'separate', 'subroutine', 'contain', 'sequence', 'process', 'instead', 'inline', 'function', 'example']"
1998,"A range of different heuristics have been explored for inlining. Usually, an inlining algorithm has a certain code budget an allowed increase in program size and aims to inline the most valuable callsites without exceeding that budget. In this sense, many inlining algorithms are usually modeled after the Knapsack problem.10 To decide which callsites are more valuable, an inlining algorithm must estimate their benefit—i.e. the expected decrease in the execution time. Commonly, inliners use profiling information about the frequency of the execution of different code paths to estimate the benefits.11","['range', 'different', 'heuristic', 'explore', 'inline', 'usually', 'inline', 'algorithm', 'certain', 'code', 'budget', 'allow', 'increase', 'program', 'size', 'aim', 'inline', 'valuable', 'callsite', 'exceed', 'budget', 'sense', 'inlining', 'algorithm', 'usually', 'model', 'knapsack', 'problem', 'decide', 'callsite', 'valuable', 'inlining', 'algorithm', 'estimate', 'benefit', 'i.e.', 'expect', 'decrease', 'execution', 'time', 'commonly', 'inliner', 'use', 'profile', 'information', 'frequency', 'execution', 'different', 'code', 'path', 'estimate', 'benefits']"
1999,"In addition to profiling information, newer just-in-time compilers apply several more advanced heuristics, such as:4","['addition', 'profile', 'information', 'new', 'time', 'compiler', 'apply', 'advanced', 'heuristic', 'as']"
2000,"Inline expansion itself is an optimization, since it eliminates overhead from calls, but it is much more important as an enabling transformation. That is, once the compiler expands a function body in the context of its call site—often with arguments that may be fixed constants—it may be able to do a variety of transformations that were not possible before. For example, a conditional branch may turn out to be always true or always false at this particular call site. This in turn may enable dead code elimination, loop-invariant code motion, or induction variable elimination.","['inline', 'expansion', 'optimization', 'eliminate', 'overhead', 'call', 'important', 'enable', 'transformation', 'compiler', 'expand', 'function', 'body', 'context', 'site', 'argument', 'fix', 'constant', 'able', 'variety', 'transformation', 'possible', 'example', 'conditional', 'branch', 'turn', 'true', 'false', 'particular', 'site', 'turn', 'enable', 'dead', 'code', 'elimination', 'loop', 'invariant', 'code', 'motion', 'induction', 'variable', 'elimination']"
2001,"In the C example in the previous section, optimization opportunities abound. The compiler may follow this sequence of steps:","['example', 'previous', 'section', 'optimization', 'opportunity', 'abound', 'compiler', 'follow', 'sequence', 'step']"
2002,"Complete inline expansion is not always possible, due to recursion: recursively inline expanding the calls will not terminate. There are various solutions, such as expanding a bounded amount, or analyzing the call graph and breaking loops at certain nodes i.e., not expanding some edge in a recursive loop.12 An identical problem occurs in macro expansion, as recursive expansion does not terminate, and is typically resolved by forbidding recursive macros as in C and C++.","['complete', 'inline', 'expansion', 'possible', 'recursion', 'recursively', 'inline', 'expand', 'call', 'terminate', 'solution', 'expand', 'bound', 'analyze', 'graph', 'break', 'loop', 'certain', 'node', 'i.e.', 'expand', 'edge', 'recursive', 'loop', 'identical', 'problem', 'occur', 'macro', 'expansion', 'recursive', 'expansion', 'terminate', 'typically', 'resolve', 'forbid', 'recursive', 'macro', 'c++']"
2003,"Traditionally, in languages such as C, inline expansion was accomplished at the source level using parameterized macros. Use of true inline functions, as are available in C99, provides several benefits over this approach:","['traditionally', 'language', 'inline', 'expansion', 'accomplish', 'source', 'level', 'parameterized', 'macro', 'use', 'true', 'inline', 'function', 'available', 'c99', 'provide', 'benefit', 'approach']"
2004,Many compilers can also inline expand some recursive functions;13 recursive macros are typically illegal.,"['compiler', 'inline', 'expand', 'recursive', 'functions', 'recursive', 'macro', 'typically', 'illegal']"
2005,"Bjarne Stroustrup, the designer of C++, likes to emphasize that macros should be avoided wherever possible, and advocates extensive use of inline functions.","['bjarne', 'stroustrup', 'designer', 'c++', 'like', 'emphasize', 'macros', 'avoid', 'possible', 'advocate', 'extensive', 'use', 'inline', 'function']"
2006,"Many compilers aggressively inline functions wherever it is beneficial to do so. Although it can lead to larger executables, aggressive inlining has nevertheless become more and more desirable as memory capacity has increased faster than CPU speed. Inlining is a critical optimization in functional languages and object-oriented programming languages, which rely on it to provide enough context for their typically small functions to make classical optimizations effective.","['compiler', 'aggressively', 'inline', 'function', 'beneficial', 'lead', 'large', 'executable', 'aggressive', 'inlining', 'desirable', 'memory', 'capacity', 'increase', 'fast', 'cpu', 'speed', 'inline', 'critical', 'optimization', 'functional', 'language', 'object', 'orient', 'programming', 'language', 'rely', 'provide', 'context', 'typically', 'small', 'function', 'classical', 'optimization', 'effective']"
2007,"Many languages, including Java and functional languages, do not provide language constructs for inline functions, but their compilers or interpreters often do perform aggressive inline expansion.4 Other languages provide constructs for explicit hints, generally as compiler directives pragmas.","['language', 'include', 'java', 'functional', 'language', 'provide', 'language', 'construct', 'inline', 'function', 'compiler', 'interpreter', 'perform', 'aggressive', 'inline', 'expansion', 'language', 'provide', 'construct', 'explicit', 'hint', 'generally', 'compiler', 'directive', 'pragma']"
2008,"In the Ada programming language, there exists a pragma for inline functions.","['ada', 'programming', 'language', 'exist', 'pragma', 'inline', 'function']"
2009,Functions in Common Lisp may be defined as inline by the inline declaration as such:14,"['function', 'common', 'lisp', 'define', 'inline', 'inline', 'declaration', 'such']"
2010,The Haskell compiler GHC tries to inline functions or values that are small enough but inlining may be noted explicitly using a language pragma:15,"['haskell', 'compiler', 'ghc', 'try', 'inline', 'function', 'value', 'small', 'inline', 'note', 'explicitly', 'language', 'pragma']"
2011,"C and C++ have an inline keyword, which functions both as a compiler directive—specifying that inlining is desired but not required—and also changes the visibility and linking behavior. The visibility change is necessary to allow the function to be inlined via the standard C toolchain, where compilation of individual files rather, translation units is followed by linking: for the linker to be able to inline functions, they must be specified in the header to be visible and marked inline to avoid ambiguity from multiple definitions.","['c++', 'inline', 'keyword', 'function', 'compiler', 'directive', 'specify', 'inline', 'desire', 'require', 'change', 'visibility', 'link', 'behavior', 'visibility', 'change', 'necessary', 'allow', 'function', 'inline', 'standard', 'toolchain', 'compilation', 'individual', 'file', 'translation', 'unit', 'follow', 'link', 'linker', 'able', 'inline', 'function', 'specify', 'header', 'visible', 'marked', 'inline', 'avoid', 'ambiguity', 'multiple', 'definition']"
2012,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2013,"In object-oriented programming OOP, an inner class or nested class is a class declared entirely within the body of another class or interface. It is distinguished from a subclass.","['object', 'orient', 'programming', 'oop', 'inner', 'class', 'nested', 'class', 'class', 'declare', 'entirely', 'body', 'class', 'interface', 'distinguish', 'subclass']"
2014,"An instance of a normal or top-level class can exist on its own. By contrast, an instance of an inner class cannot be instantiated without being bound to a top-level class.","['instance', 'normal', 'level', 'class', 'exist', 'contrast', 'instance', 'inner', 'class', 'instantiate', 'bind', 'level', 'class']"
2015,"Let us take the abstract notion of a Car with four Wheels. Our Wheels have a specific feature that relies on being part of our Car. This notion does not represent the Wheels as Wheels in a more general form that could be part of any vehicle. Instead, it represents them as specific to a Car. We can model this notion using inner classes as follows:","['let', 'abstract', 'notion', 'car', 'wheel', 'wheel', 'specific', 'feature', 'rely', 'car', 'notion', 'represent', 'wheels', 'wheel', 'general', 'form', 'vehicle', 'instead', 'represent', 'specific', 'car', 'model', 'notion', 'inner', 'class', 'follow']"
2016,"We have the top-level class Car. Instances of class Car are composed of four instances of the class Wheel. This particular implementation of Wheel is specific to a car, so the code does not model the general notion of a wheel that would be better represented as a top-level class. Therefore, it is semantically connected to the class Car and the code of Wheel is in some way coupled to its outer class, being a composition unit of a car. The wheel for a particular car is unique to that car, but for generalization, the wheel is an aggregation unit to the car.","['level', 'class', 'car', 'instance', 'class', 'car', 'compose', 'instance', 'class', 'wheel', 'particular', 'implementation', 'wheel', 'specific', 'car', 'code', 'model', 'general', 'notion', 'wheel', 'well', 'represent', 'level', 'class', 'semantically', 'connect', 'class', 'car', 'code', 'wheel', 'way', 'couple', 'outer', 'class', 'composition', 'unit', 'car', 'wheel', 'particular', 'car', 'unique', 'car', 'generalization', 'wheel', 'aggregation', 'unit', 'car']"
2017,"Inner classes provide a mechanism to accurately model this connection. We can refer to our Wheel class as Car.Wheel, Car being the top-level class and Wheel being the inner class.","['inner', 'class', 'provide', 'mechanism', 'accurately', 'model', 'connection', 'refer', 'wheel', 'class', 'car', 'wheel', 'car', 'level', 'class', 'wheel', 'inner', 'class']"
2018,Inner classes therefore allow for the object orientation of certain parts of the program that would otherwise not be encapsulated into a class.,"['inner', 'class', 'allow', 'object', 'orientation', 'certain', 'part', 'program', 'encapsulate', 'class']"
2019,"Larger segments of code within a class might be better modeled or refactored as a separate top-level class, rather than an inner class. This would make the code more general in its application and therefore more re-usable but potentially might be premature generalization. This may prove more effective, if code has many inner classes with the shared functionality.","['large', 'segment', 'code', 'class', 'well', 'model', 'refactore', 'separate', 'level', 'class', 'inner', 'class', 'code', 'general', 'application', 'usable', 'potentially', 'premature', 'generalization', 'prove', 'effective', 'code', 'inner', 'class', 'share', 'functionality']"
2020,In Java there are four types of nested class:,"['java', 'type', 'nested', 'class']"
2021,"Inner class – The following categories are called inner classes. Each instance of these classes has a reference to an enclosing instance i.e. an instance of the enclosing class, except for local and anonymous classes declared in static context. Hence, they can implicitly refer to instance variables and methods of the enclosing class. The enclosing instance reference can be explicitly obtained via EnclosingClassName.this. Inner classes may not have static variables or methods, except for compile-time constant variables. When they are created, they must have a reference to an instance of the enclosing class; which means they must either be created within an instance method or constructor of the enclosing class, or for member and anonymous classes be created using the syntax enclosingInstance.new InnerClass.1","['inner', 'class', 'follow', 'category', 'call', 'inner', 'class', 'instance', 'class', 'reference', 'enclose', 'instance', 'i.e.', 'instance', 'enclose', 'class', 'local', 'anonymous', 'class', 'declare', 'static', 'context', 'implicitly', 'refer', 'instance', 'variable', 'method', 'enclosing', 'class', 'enclose', 'instance', 'reference', 'explicitly', 'obtain', 'enclosingclassname.this', 'inner', 'class', 'static', 'variable', 'method', 'compile', 'time', 'constant', 'variable', 'create', 'reference', 'instance', 'enclosing', 'class', 'mean', 'create', 'instance', 'method', 'constructor', 'enclosing', 'class', 'member', 'anonymous', 'class', 'create', 'syntax', 'enclosinginstance.new', 'innerclass']"
2022,"Local inner classes are often used in Java to define callbacks for GUI code. Components can then share an object that implements an event handling interface or extends an abstract adapter class, containing the code to be executed when a given event is triggered.","['local', 'inner', 'class', 'java', 'define', 'callback', 'gui', 'code', 'component', 'share', 'object', 'implement', 'event', 'handle', 'interface', 'extend', 'abstract', 'adapter', 'class', 'contain', 'code', 'execute', 'give', 'event', 'trigger']"
2023,Anonymous inner classes are also used where the event handling code is only used by one component and therefore does not need a named reference.,"['anonymous', 'inner', 'class', 'event', 'handle', 'code', 'component', 'need', 'name', 'reference']"
2024,This avoids a large monolithic actionPerformedActionEvent method with multiple if-else branches to identify the source of the event. This type of code is often considered messycitation needed and the inner class variations are considered to be better in all regards.citation needed,"['avoid', 'large', 'monolithic', 'actionperformedactionevent', 'method', 'multiple', 'branch', 'identify', 'source', 'event', 'type', 'code', 'consider', 'messycitation', 'need', 'inner', 'class', 'variation', 'consider', 'well', 'regards.citation', 'need']"
2025,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2026,"In a computer system, any time a new context is created based on some model, it is said that the model has been instantiated. In practice, this instance usually has a data structure in common with other instances, but the values stored in the instances are separate. Changing the values in one instance will then not interfere with the values of some other instance. A compute instance can be software or hardware which can run code, for example a CPU, GPU or a virtual machine.citation needed","['computer', 'system', 'time', 'new', 'context', 'create', 'base', 'model', 'say', 'model', 'instantiate', 'practice', 'instance', 'usually', 'data', 'structure', 'common', 'instance', 'value', 'store', 'instance', 'separate', 'change', 'value', 'instance', 'interfere', 'value', 'instance', 'compute', 'instance', 'software', 'hardware', 'run', 'code', 'example', 'cpu', 'gpu', 'virtual', 'machine.citation', 'need']"
2027,"In computer graphics, a polygonal model can be instantiated in order to be drawn several times in different locations in a scene. This is a technique that can be used to improve the performance of rendering, since the work needed to display each instance overlaps.","['computer', 'graphic', 'polygonal', 'model', 'instantiate', 'order', 'draw', 'time', 'different', 'location', 'scene', 'technique', 'improve', 'performance', 'rendering', 'work', 'need', 'display', 'instance', 'overlap']"
2028,"In object-oriented programming OOP, an instance is a concrete occurrence of any object, existing usually during the runtime of a computer program. Formally, ""instance"" is synonymous with ""object"" as they are each a particular value realization, and these may be called an instance object; ""instance"" emphasizes the distinct identity of the object. The creation of an instance is called instantiation.","['object', 'orient', 'programming', 'oop', 'instance', 'concrete', 'occurrence', 'object', 'exist', 'usually', 'runtime', 'computer', 'program', 'formally', 'instance', 'synonymous', 'object', 'particular', 'value', 'realization', 'call', 'instance', 'object', 'instance', 'emphasize', 'distinct', 'identity', 'object', 'creation', 'instance', 'call', 'instantiation']"
2029,"An object may be varied in a number of ways. Each realized variation of that object is an instance of its class. That is, it is a member of a given class that has specified values rather than variables. In a non-programming context, you could think of ""dog"" as a type and your particular dog as an instance of that class.1","['object', 'varied', 'number', 'way', 'realize', 'variation', 'object', 'instance', 'class', 'member', 'give', 'class', 'specify', 'value', 'variable', 'non', 'programming', 'context', 'think', 'dog', 'type', 'particular', 'dog', 'instance', 'class']"
2030,"In class-based programming, objects are created from classes by subroutines called constructors, and destroyed by destructors. An object is an instance of a class, and may be called a class instance or class object; instantiation is then also known as construction. Not all classes can be instantiated – abstract classes cannot be instantiated, while classes that can be instantiated are called concrete classes. In prototype-based programming, instantiation is instead done by copying cloning a prototype instance.","['class', 'base', 'programming', 'object', 'create', 'class', 'subroutine', 'call', 'constructor', 'destroy', 'destructor', 'object', 'instance', 'class', 'call', 'class', 'instance', 'class', 'object', 'instantiation', 'know', 'construction', 'class', 'instantiate', 'abstract', 'class', 'instantiate', 'class', 'instantiate', 'call', 'concrete', 'class', 'prototype', 'base', 'programming', 'instantiation', 'instead', 'copy', 'clone', 'prototype', 'instance']"
2031,"In the context of POSIX-oriented operating systems, the term ""program instance"" typically refers to any executing process instantiated from that program via system calls, e.g. fork and exec; that is, each executing process in the OS is an instance of some program which it has been instantiated from.2","['context', 'posix', 'orient', 'operating', 'system', 'term', 'program', 'instance', 'typically', 'refer', 'executing', 'process', 'instantiate', 'program', 'system', 'call', 'e.g.', 'fork', 'exec', 'executing', 'process', 'instance', 'program', 'instantiate', 'from']"
2032,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2033,"A method in object-oriented programming OOP is a procedure associated with a message and an object. An object consists of state data and behavior; these compose an interface, which specifies how the object may be utilized by any of its various consumers. A method is a behavior of an object parametrized by a consumer.","['method', 'object', 'orient', 'programming', 'oop', 'procedure', 'associate', 'message', 'object', 'object', 'consist', 'state', 'datum', 'behavior', 'compose', 'interface', 'specify', 'object', 'utilize', 'consumer', 'method', 'behavior', 'object', 'parametrize', 'consumer']"
2034,"Data is represented as properties of the object, and behaviors are represented as methods. For example, a Window object could have methods such as open and close, while its state whether it is open or closed at any given point in time would be a property.","['datum', 'represent', 'property', 'object', 'behavior', 'represent', 'method', 'example', 'window', 'object', 'method', 'open', 'close', 'state', 'open', 'close', 'give', 'point', 'time', 'property']"
2035,"In class-based programming, methods are defined within a class, and objects are instances of a given class. One of the most important capabilities that a method provides is method overriding - the same name e.g., area can be used for multiple different kinds of classes. This allows the sending objects to invoke behaviors and to delegate the implementation of those behaviors to the receiving object. A method in Java programming sets the behavior of a class object. For example, an object can send an area message to another object and the appropriate formula is invoked whether the receiving object is a rectangle, circle, triangle, etc.","['class', 'base', 'programming', 'method', 'define', 'class', 'object', 'instance', 'give', 'class', 'important', 'capability', 'method', 'provide', 'method', 'override', 'e.g.', 'area', 'multiple', 'different', 'kind', 'class', 'allow', 'send', 'object', 'invoke', 'behavior', 'delegate', 'implementation', 'behavior', 'receiving', 'object', 'method', 'java', 'programming', 'set', 'behavior', 'class', 'object', 'example', 'object', 'send', 'area', 'message', 'object', 'appropriate', 'formula', 'invoke', 'receiving', 'object', 'rectangle', 'circle', 'triangle', 'etc']"
2036,Methods also provide the interface that other classes use to access and modify the properties of an object; this is known as encapsulation. Encapsulation and overriding are the two primary distinguishing features between methods and procedure calls.1,"['method', 'provide', 'interface', 'class', 'use', 'access', 'modify', 'property', 'object', 'know', 'encapsulation', 'encapsulation', 'override', 'primary', 'distinguish', 'feature', 'method', 'procedure', 'calls']"
2037,"Method overriding and overloading are two of the most significant ways that a method differs from a conventional procedure or function call. Overriding refers to a subclass redefining the implementation of a method of its superclass. For example, findArea may be a method defined on a shape class,2 triangle, etc. would each define the appropriate formula to calculate their area. The idea is to look at objects as ""black boxes"" so that changes to the internals of the object can be made with minimal impact on the other objects that use it. This is known as encapsulation and is meant to make code easier to maintain and re-use.","['method', 'override', 'overloading', 'significant', 'way', 'method', 'differ', 'conventional', 'procedure', 'function', 'override', 'refer', 'subclass', 'redefine', 'implementation', 'method', 'superclass', 'example', 'findarea', 'method', 'define', 'shape', 'class', 'triangle', 'etc', 'define', 'appropriate', 'formula', 'calculate', 'area', 'idea', 'look', 'object', 'black', 'box', 'change', 'internal', 'object', 'minimal', 'impact', 'object', 'use', 'know', 'encapsulation', 'mean', 'code', 'easy', 'maintain', 'use']"
2038,"Method overloading, on the other hand, refers to differentiating the code used to handle a message based on the parameters of the method. If one views the receiving object as the first parameter in any method then overriding is just a special case of overloading where the selection is based only on the first argument. The following simple Java example illustrates the difference:","['method', 'overloading', 'hand', 'refer', 'differentiate', 'code', 'handle', 'message', 'base', 'parameter', 'method', 'view', 'receiving', 'object', 'parameter', 'method', 'override', 'special', 'case', 'overload', 'selection', 'base', 'argument', 'follow', 'simple', 'java', 'example', 'illustrate', 'difference']"
2039,"Accessor methods are used to read the data values of an object. Mutator methods are used to modify the data of an object. Manager methods are used to initialize and destroy objects of a class, e.g. constructors and destructors.","['accessor', 'method', 'read', 'datum', 'value', 'object', 'mutator', 'method', 'modify', 'datum', 'object', 'manager', 'method', 'initialize', 'destroy', 'object', 'class', 'e.g.', 'constructor', 'destructor']"
2040,"These methods provide an abstraction layer that facilitates encapsulation and modularity. For example, if a bank-account class provides a getBalance accessor method to retrieve the current balance rather than directly accessing the balance data fields, then later revisions of the same code can implement a more complex mechanism for balance retrieval e.g., a database fetch, without the dependent code needing to be changed. The concepts of encapsulation and modularity are not unique to object-oriented programming. Indeed, in many ways the object-oriented approach is simply the logical extension of previous paradigms such as abstract data types and structured programming.3","['method', 'provide', 'abstraction', 'layer', 'facilitate', 'encapsulation', 'modularity', 'example', 'bank', 'account', 'class', 'provide', 'getbalance', 'accessor', 'method', 'retrieve', 'current', 'balance', 'directly', 'access', 'balance', 'datum', 'field', 'later', 'revision', 'code', 'implement', 'complex', 'mechanism', 'balance', 'retrieval', 'e.g.', 'database', 'fetch', 'dependent', 'code', 'need', 'change', 'concept', 'encapsulation', 'modularity', 'unique', 'object', 'orient', 'programming', 'way', 'object', 'orient', 'approach', 'simply', 'logical', 'extension', 'previous', 'paradigms', 'abstract', 'datum', 'type', 'structure', 'programming']"
2041,"A constructor is a method that is called at the beginning of an object's lifetime to create and initialize the object, a process called construction or instantiation. Initialization may include an acquisition of resources. Constructors may have parameters but usually do not return values in most languages. See the following example in Java:","['constructor', 'method', 'call', 'beginning', 'object', 'lifetime', 'create', 'initialize', 'object', 'process', 'call', 'construction', 'instantiation', 'initialization', 'include', 'acquisition', 'resource', 'constructor', 'parameter', 'usually', 'return', 'value', 'language', 'follow', 'example', 'java']"
2042,"A destructor is a method that is called automatically at the end of an object's lifetime, a process called destruction. Destruction in most languages does not allow destructor method arguments nor return values. Destruction can be implemented so as to perform cleanup chores and other tasks at object destruction.","['destructor', 'method', 'call', 'automatically', 'end', 'object', 'lifetime', 'process', 'call', 'destruction', 'destruction', 'language', 'allow', 'destructor', 'method', 'argument', 'return', 'value', 'destruction', 'implement', 'perform', 'cleanup', 'chore', 'task', 'object', 'destruction']"
2043,"In garbage-collected languages, such as Java, C#, and Python, destructors are known as finalizers. They have a similar purpose and function to destructors, but because of the differences between languages that utilize garbage-collection and languages with manual memory management, the sequence in which they are called is different.","['garbage', 'collect', 'language', 'java', 'python', 'destructor', 'know', 'finalizer', 'similar', 'purpose', 'function', 'destructor', 'difference', 'language', 'utilize', 'garbage', 'collection', 'language', 'manual', 'memory', 'management', 'sequence', 'call', 'different']"
2044,An abstract method is one with only a signature and no implementation body. It is often used to specify that a subclass must provide an implementation of the method. Abstract methods are used to specify interfaces in some programming languages.4,"['abstract', 'method', 'signature', 'implementation', 'body', 'specify', 'subclass', 'provide', 'implementation', 'method', 'abstract', 'method', 'specify', 'interface', 'programming', 'languages']"
2045,The following Java code shows an abstract class that needs to be extended:,"['follow', 'java', 'code', 'show', 'abstract', 'class', 'need', 'extend']"
2046,The following subclass extends the main class:,"['following', 'subclass', 'extend', 'main', 'class']"
2047,"If a subclass provides an implementation for an abstract method, another subclass can make it abstract again. This is called reabstraction.","['subclass', 'provide', 'implementation', 'abstract', 'method', 'subclass', 'abstract', 'call', 'reabstraction']"
2048,"In practice, this is rarely used.","['practice', 'rarely']"
2049,"In C#, a virtual method can be overridden with an abstract method. This also applies to Java, where all non-private methods are virtual.","['virtual', 'method', 'overridden', 'abstract', 'method', 'apply', 'java', 'non', 'private', 'method', 'virtual']"
2050,"Interfaces' default methods can also be reabstracted, requiring subclasses to implement them. This also applies to Java.","['interface', 'default', 'method', 'reabstracte', 'require', 'subclass', 'implement', 'apply', 'java']"
2051,"Class methods are methods that are called on a class rather than an instance. They are typically used as part of an object meta-model. I.e, for each class, defined an instance of the class object in the meta-model is created. Meta-model protocols allow classes to be created and deleted. In this sense, they provide the same functionality as constructors and destructors described above. But in some languages such as the Common Lisp Object System CLOS the meta-model allows the developer to dynamically alter the object model at run time: e.g., to create new classes, redefine the class hierarchy, modify properties, etc.","['class', 'method', 'method', 'call', 'class', 'instance', 'typically', 'object', 'meta', 'model', 'i.e', 'class', 'define', 'instance', 'class', 'object', 'meta', 'model', 'create', 'meta', 'model', 'protocol', 'allow', 'class', 'create', 'delete', 'sense', 'provide', 'functionality', 'constructor', 'destructor', 'describe', 'language', 'common', 'lisp', 'object', 'system', 'clos', 'meta', 'model', 'allow', 'developer', 'dynamically', 'alter', 'object', 'model', 'run', 'time', 'e.g.', 'create', 'new', 'class', 'redefine', 'class', 'hierarchy', 'modify', 'property', 'etc']"
2052,"Special methods are very language-specific and a language may support none, some, or all of the special methods defined here. A language's compiler may automatically generate default special methods or a programmer may be allowed to optionally define special methods. Most special methods cannot be directly called, but rather the compiler generates code to call them at appropriate times.","['special', 'method', 'language', 'specific', 'language', 'support', 'special', 'method', 'define', 'language', 'compiler', 'automatically', 'generate', 'default', 'special', 'method', 'programmer', 'allow', 'optionally', 'define', 'special', 'method', 'special', 'method', 'directly', 'call', 'compiler', 'generate', 'code', 'appropriate', 'time']"
2053,"Static methods are meant to be relevant to all the instances of a class rather than to any specific instance. They are similar to static variables in that sense. An example would be a static method to sum the values of all the variables of every instance of a class. For example, if there were a Product class it might have a static method to compute the average price of all products.","['static', 'method', 'mean', 'relevant', 'instance', 'class', 'specific', 'instance', 'similar', 'static', 'variable', 'sense', 'example', 'static', 'method', 'sum', 'value', 'variable', 'instance', 'class', 'example', 'product', 'class', 'static', 'method', 'compute', 'average', 'price', 'product']"
2054,"In Java, a commonly used static method is:","['java', 'commonly', 'static', 'method']"
2055,This static method has no owning object and does not run on an instance. It receives all information from its arguments.2,"['static', 'method', 'own', 'object', 'run', 'instance', 'receive', 'information', 'arguments']"
2056,"A static method can be invoked even if no instances of the class exist yet. Static methods are called ""static"" because they are resolved at compile time based on the class they are called on and not dynamically as in the case with instance methods, which are resolved polymorphically based on the runtime type of the object.","['static', 'method', 'invoke', 'instance', 'class', 'exist', 'static', 'method', 'call', 'static', 'resolve', 'compile', 'time', 'base', 'class', 'call', 'dynamically', 'case', 'instance', 'method', 'resolve', 'polymorphically', 'base', 'runtime', 'type', 'object']"
2057,Copy-assignment operators define actions to be performed by the compiler when a class object is assigned to a class object of the same type.,"['copy', 'assignment', 'operator', 'define', 'action', 'perform', 'compiler', 'class', 'object', 'assign', 'class', 'object', 'type']"
2058,Operator methods define or redefine operator symbols and define the operations to be performed with the symbol and the associated method parameters. C++ example:,"['operator', 'method', 'define', 'redefine', 'operator', 'symbol', 'define', 'operation', 'perform', 'symbol', 'associate', 'method', 'parameter', 'c++', 'example']"
2059,"Some procedural languages were extended with object-oriented capabilities to leverage the large skill sets and legacy code for those languages but still provide the benefits of object-oriented development. Perhaps the most well-known example is C++, an object-oriented extension of the C programming language. Due to the design requirements to add the object-oriented paradigm on to an existing procedural language, message passing in C++ has some unique capabilities and terminologies. For example, in C++ a method is known as a member function. C++ also has the concept of virtual functions which are member functions that can be overridden in derived classes and allow for dynamic dispatch.","['procedural', 'language', 'extend', 'object', 'orient', 'capability', 'leverage', 'large', 'skill', 'set', 'legacy', 'code', 'language', 'provide', 'benefit', 'object', 'orient', 'development', 'know', 'example', 'c++', 'object', 'orient', 'extension', 'programming', 'language', 'design', 'requirement', 'add', 'object', 'orient', 'paradigm', 'exist', 'procedural', 'language', 'message', 'pass', 'c++', 'unique', 'capability', 'terminology', 'example', 'c++', 'method', 'know', 'member', 'function', 'c++', 'concept', 'virtual', 'function', 'member', 'function', 'overridden', 'derive', 'class', 'allow', 'dynamic', 'dispatch']"
2060,"Virtual functions are the means by which a C++ class can achieve polymorphic behavior. Non-virtual member functions, or regular methods, are those that do not participate in polymorphism.","['virtual', 'function', 'mean', 'c++', 'class', 'achieve', 'polymorphic', 'behavior', 'non', 'virtual', 'member', 'function', 'regular', 'method', 'participate', 'polymorphism']"
2061,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2062,"In class-based, object-oriented programming, an instance variable is a variable defined in a class i.e. a member variable, for which each instantiated object of the class has a separate copy, or instance. An instance variable has similarities with a class variable,1 but is non-static. An instance variable is a variable which is declared in a class but outside of constructors, methods, or blocks. Instance variables are created when an object is instantiated, and are accessible to all the constructors, methods, or blocks in the class. Access modifiers can be given to the instance variable.","['class', 'base', 'object', 'orient', 'programming', 'instance', 'variable', 'variable', 'define', 'class', 'i.e.', 'member', 'variable', 'instantiate', 'object', 'class', 'separate', 'copy', 'instance', 'instance', 'variable', 'similarity', 'class', 'variable', 'non', 'static', 'instance', 'variable', 'variable', 'declare', 'class', 'outside', 'constructor', 'method', 'block', 'instance', 'variable', 'create', 'object', 'instantiate', 'accessible', 'constructor', 'method', 'block', 'class', 'access', 'modifier', 'give', 'instance', 'variable']"
2063,"An instance variable is not a class variable although there are similarities. It is a type of class attribute or class property, field, or data member. The same dichotomy between instance and class members applies to methods ""member functions"" as well; a class may have both instance methods and class methods.","['instance', 'variable', 'class', 'variable', 'similarity', 'type', 'class', 'attribute', 'class', 'property', 'field', 'data', 'member', 'dichotomy', 'instance', 'class', 'member', 'apply', 'method', 'member', 'function', 'class', 'instance', 'method', 'class', 'method']"
2064,Each instance variable lives in memory for the lifetime of the object it is owned by.2,"['instance', 'variable', 'live', 'memory', 'lifetime', 'object', 'own', 'by']"
2065,"Variables are properties an object knows about itself. All instances of an object have their own copies of instance variables, even if the value is the same from one object to another. One object instance can change values of its instance variables without affecting all other instances. Instance variables can be used by all methods of a class unless the method is declared as static.3","['variable', 'property', 'object', 'know', 'instance', 'object', 'copy', 'instance', 'variable', 'value', 'object', 'object', 'instance', 'change', 'value', 'instance', 'variable', 'affect', 'instance', 'instance', 'variable', 'method', 'class', 'method', 'declare', 'static']"
2066,"In this C++ example, the instance variable Request::number is a copy of the class variable Request::count1 where each instance constructed is assigned a sequential value of count1 before it is incremented. Since number is an instance variable, each Request object contains its own distinct value; in contrast, there is only one object Request::count1 available to all instances with the same value.","['c++', 'example', 'instance', 'variable', 'request::number', 'copy', 'class', 'variable', 'request::count1', 'instance', 'construct', 'assign', 'sequential', 'value', 'count1', 'incremente', 'number', 'instance', 'variable', 'request', 'object', 'contain', 'distinct', 'value', 'contrast', 'object', 'request::count1', 'available', 'instance', 'value']"
2067,This computer-programming-related article is a stub. You can help Wikipedia by expanding it.,"['computer', 'programming', 'relate', 'article', 'stub', 'help', 'wikipedia', 'expand']"
2068,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2069,"The Unified Modeling Language UML is a general-purpose, developmental modeling language in the field of software engineering that is intended to provide a standard way to visualize the design of a system.1","['unified', 'modeling', 'language', 'uml', 'general', 'purpose', 'developmental', 'modeling', 'language', 'field', 'software', 'engineering', 'intend', 'provide', 'standard', 'way', 'visualize', 'design', 'system']"
2070,"The creation of UML was originally motivated by the desire to standardize the disparate notational systems and approaches to software design. It was developed at Rational Software in 1994–1995, with further development led by them through 1996.1","['creation', 'uml', 'originally', 'motivate', 'desire', 'standardize', 'disparate', 'notational', 'system', 'approach', 'software', 'design', 'develop', 'rational', 'software', '1994–1995', 'development', 'lead', '1996']"
2071,"In 1997, UML was adopted as a standard by the Object Management Group OMG, and has been managed by this organization ever since. In 2005, UML was also published by the International Organization for Standardization ISO as an approved ISO standard.2 Since then the standard has been periodically revised to cover the latest revision of UML.3 In software engineering, most practitioners do not use UML, but instead produce informal hand drawn diagrams; these diagrams, however, often include elements from UML.4: 536","['1997', 'uml', 'adopt', 'standard', 'object', 'management', 'group', 'omg', 'manage', 'organization', '2005', 'uml', 'publish', 'international', 'organization', 'standardization', 'iso', 'approve', 'iso', 'standard', 'standard', 'periodically', 'revise', 'cover', 'late', 'revision', 'uml', 'software', 'engineering', 'practitioner', 'use', 'uml', 'instead', 'produce', 'informal', 'hand', 'draw', 'diagram', 'diagram', 'include', 'element', 'uml', '536']"
2072,UML has been evolving since the second half of the 1990s and has its roots in the object-oriented programming methods developed in the late 1980s and early 1990s. The timeline see image shows the highlights of the history of object-oriented modeling methods and notation.,"['uml', 'evolve', 'second', 'half', '1990', 'root', 'object', 'orient', 'programming', 'method', 'develop', 'late', '1980', 'early', '1990', 'timeline', 'image', 'show', 'highlight', 'history', 'object', 'orient', 'modeling', 'method', 'notation']"
2073,"It is originally based on the notations of the Booch method, the object-modeling technique OMT and object-oriented software engineering OOSE, which it has integrated into a single language.5","['originally', 'base', 'notation', 'booch', 'method', 'object', 'modeling', 'technique', 'omt', 'object', 'orient', 'software', 'engineering', 'oose', 'integrate', 'single', 'language']"
2074,"Rational Software Corporation hired James Rumbaugh from General Electric in 1994 and after that the company became the source for two of the most popular object-oriented modeling approaches of the day:6 Rumbaugh's object-modeling technique OMT and Grady Booch's method. They were soon assisted in their efforts by Ivar Jacobson, the creator of the object-oriented software engineering OOSE method, who joined them at Rational in 1995.1","['rational', 'software', 'corporation', 'hire', 'james', 'rumbaugh', 'general', 'electric', '1994', 'company', 'source', 'popular', 'object', 'orient', 'modeling', 'approach', 'day', 'rumbaugh', 'object', 'modeling', 'technique', 'omt', 'grady', 'booch', 'method', 'soon', 'assist', 'effort', 'ivar', 'jacobson', 'creator', 'object', 'orient', 'software', 'engineering', 'oose', 'method', 'join', 'rational', '1995']"
2075,"Under the technical leadership of those three Rumbaugh, Jacobson and Booch, a consortium called the UML Partners was organized in 1996 to complete the Unified Modeling Language UML specification, and propose it to the Object Management Group OMG for standardization. The partnership also contained additional interested parties for example HP, DEC, IBM and Microsoft. The UML Partners' UML 1.0 draft was proposed to the OMG in January 1997 by the consortium. During the same month the UML Partners formed a group, designed to define the exact meaning of language constructs, chaired by Cris Kobryn and administered by Ed Eykholt, to finalize the specification and integrate it with other standardization efforts. The result of this work, UML 1.1, was submitted to the OMG in August 1997 and adopted by the OMG in November 1997.17","['technical', 'leadership', 'rumbaugh', 'jacobson', 'booch', 'consortium', 'call', 'uml', 'partners', 'organize', '1996', 'complete', 'unified', 'modeling', 'language', 'uml', 'specification', 'propose', 'object', 'management', 'group', 'omg', 'standardization', 'partnership', 'contain', 'additional', 'interested', 'party', 'example', 'dec', 'ibm', 'microsoft', 'uml', 'partners', 'uml', '1', 'draft', 'propose', 'omg', 'january', '1997', 'consortium', 'month', 'uml', 'partners', 'form', 'group', 'design', 'define', 'exact', 'meaning', 'language', 'construct', 'chair', 'cris', 'kobryn', 'administer', 'eykholt', 'finalize', 'specification', 'integrate', 'standardization', 'effort', 'result', 'work', 'uml', '1', 'submit', 'omg', 'august', '1997', 'adopt', 'omg', 'november', '1997']"
2076,"After the first release a task force was formed1 to improve the language, which released several minor revisions, 1.3, 1.4, and 1.5.8","['release', 'task', 'force', 'formed1', 'improve', 'language', 'release', 'minor', 'revision', '1', '1', '1']"
2077,The standards it produced as well as the original standard have been noted as being ambiguous and inconsistent.9,"['standard', 'produce', 'original', 'standard', 'note', 'ambiguous', 'inconsistent']"
2078,"As with database Chen, Bachman, and ISO ER diagrams, class models are specified to use ""look-across"" cardinalities, even though several authors Merise,10 Elmasri & Navathe11 amongst others12 prefer same-side or ""look-here"" for roles and both minimum and maximum cardinalities. Recent researchers Feinerer,13 Dullea et al.14 have shown that the ""look-across"" technique used by UML and ER diagrams is less effective and less coherent when applied to n-ary relationships of order strictly greater than 2.","['database', 'chen', 'bachman', 'iso', 'diagram', 'class', 'model', 'specify', 'use', 'look', 'cardinality', 'author', 'merise', 'elmasri', 'navathe11', 'others12', 'prefer', 'look', 'role', 'minimum', 'maximum', 'cardinality', 'recent', 'researcher', 'feinerer', 'dullea', 'al', 'show', 'look', 'technique', 'uml', 'diagram', 'effective', 'coherent', 'apply', 'ary', 'relationship', 'order', 'strictly', 'great']"
2079,"Feinerer says: ""Problems arise if we operate under the look-across semantics as used for UML associations. Hartmann15 investigates this situation and shows how and why different transformations fail."", and: ""As we will see on the next few pages, the look-across interpretation introduces several difficulties which prevent the extension of simple mechanisms from binary to n-ary associations.""","['feinerer', 'say', 'problem', 'arise', 'operate', 'look', 'semantic', 'uml', 'association', 'hartmann15', 'investigate', 'situation', 'show', 'different', 'transformation', 'fail', 'page', 'look', 'interpretation', 'introduce', 'difficulty', 'prevent', 'extension', 'simple', 'mechanism', 'binary', 'ary', 'association']"
2080,"UML 2.0 major revision replaced version 1.5 in 2005, which was developed with an enlarged consortium to improve the language further to reflect new experience on usage of its features.16","['uml', '2', 'major', 'revision', 'replace', 'version', '1', '2005', 'develop', 'enlarge', 'consortium', 'improve', 'language', 'reflect', 'new', 'experience', 'usage', 'features']"
2081,"Although UML 2.1 was never released as a formal specification, versions 2.1.1 and 2.1.2 appeared in 2007, followed by UML 2.2 in February 2009. UML 2.3 was formally released in May 2010.17 UML 2.4.1 was formally released in August 2011.17 UML 2.5 was released in October 2012 as an ""In progress"" version and was officially released in June 2015.17 Formal version 2.5.1 was adopted in December 2017.18","['uml', '2', 'release', 'formal', 'specification', 'version', '2', '2', 'appear', '2007', 'follow', 'uml', '2', 'february', '2009', 'uml', '2', 'formally', 'release', '2010', 'uml', '2', 'formally', 'release', 'august', '2011', 'uml', '2', 'release', 'october', '2012', 'progress', 'version', 'officially', 'release', 'june', '2015', 'formal', 'version', '2', 'adopt', 'december', '2017']"
2082,There are four parts to the UML 2.x specification:,"['part', 'uml', '2.x', 'specification']"
2083,"Until UML 2.4.1, the latest versions of these standards were:19","['uml', '2', 'late', 'version', 'standard', 'were']"
2084,"Since version 2.5, the UML Specification has been simplified without Superstructure and Infrastructure, and the latest versions of these standards are now:20","['version', '2', 'uml', 'specification', 'simplify', 'superstructure', 'infrastructure', 'late', 'version', 'standard', 'now']"
2085,"It continues to be updated and improved by the revision task force, who resolve any issues with the language.21","['continue', 'update', 'improve', 'revision', 'task', 'force', 'resolve', 'issue', 'language']"
2086,"UML offers a way to visualize a system's architectural blueprints in a diagram, including elements such as:5","['uml', 'offer', 'way', 'visualize', 'system', 'architectural', 'blueprint', 'diagram', 'include', 'element', 'as']"
2087,"Although originally intended for object-oriented design documentation, UML has been extended to a larger set of design documentation as listed above,22 and been found useful in many contexts.23","['originally', 'intend', 'object', 'orient', 'design', 'documentation', 'uml', 'extend', 'large', 'set', 'design', 'documentation', 'list', 'above', 'find', 'useful', 'contexts']"
2088,"UML is not a development method by itself;24 however, it was designed to be compatible with the leading object-oriented software development methods of its time, for example OMT, Booch method, Objectory and especially RUP that it was originally intended to be used with when work began at Rational Software.","['uml', 'development', 'method', 'itself', 'design', 'compatible', 'lead', 'object', 'orient', 'software', 'development', 'method', 'time', 'example', 'omt', 'booch', 'method', 'objectory', 'especially', 'rup', 'originally', 'intend', 'work', 'begin', 'rational', 'software']"
2089,It is important to distinguish between the UML model and the set of diagrams of a system. A diagram is a partial graphic representation of a system's model. The set of diagrams need not completely cover the model and deleting a diagram does not change the model. The model may also contain documentation that drives the model elements and diagrams such as written use cases.,"['important', 'distinguish', 'uml', 'model', 'set', 'diagram', 'system', 'diagram', 'partial', 'graphic', 'representation', 'system', 'model', 'set', 'diagram', 'need', 'completely', 'cover', 'model', 'delete', 'diagram', 'change', 'model', 'model', 'contain', 'documentation', 'drive', 'model', 'element', 'diagram', 'write', 'use', 'case']"
2090,UML diagrams represent two different views of a system model:25,"['uml', 'diagram', 'represent', 'different', 'view', 'system', 'model']"
2091,UML models can be exchanged among UML tools by using the XML Metadata Interchange XMI format.,"['uml', 'model', 'exchange', 'uml', 'tool', 'xml', 'metadata', 'interchange', 'xmi', 'format']"
2092,"In UML, one of the key tools for behavior modeling is the use-case model, caused by OOSE. Use cases are a way of specifying required usages of a system. Typically, they are used to capture the requirements of a system, that is, what a system is supposed to do.26","['uml', 'key', 'tool', 'behavior', 'modeling', 'use', 'case', 'model', 'cause', 'oose', 'use', 'case', 'way', 'specify', 'require', 'usage', 'system', 'typically', 'capture', 'requirement', 'system', 'system', 'suppose', 'do']"
2093,"UML 2 has many types of diagrams, which are divided into two categories.5 Some types represent structural information, and the rest represent general types of behavior, including a few that represent different aspects of interactions. These diagrams can be categorized hierarchically as shown in the following class diagram:5","['uml', 'type', 'diagram', 'divide', 'categories', 'type', 'represent', 'structural', 'information', 'rest', 'represent', 'general', 'type', 'behavior', 'include', 'represent', 'different', 'aspect', 'interaction', 'diagram', 'categorize', 'hierarchically', 'show', 'follow', 'class', 'diagram']"
2094,"These diagrams may all contain comments or notes explaining usage, constraint, or intent.","['diagram', 'contain', 'comment', 'note', 'explain', 'usage', 'constraint', 'intent']"
2095,"Structure diagrams represent the static aspects of the system. It emphasizes the things that must be present in the system being modeled. Since structure diagrams represent the structure, they are used extensively in documenting the software architecture of software systems. For example, the component diagram describes how a software system is split up into components and shows the dependencies among these components.","['structure', 'diagram', 'represent', 'static', 'aspect', 'system', 'emphasize', 'thing', 'present', 'system', 'model', 'structure', 'diagram', 'represent', 'structure', 'extensively', 'document', 'software', 'architecture', 'software', 'system', 'example', 'component', 'diagram', 'describe', 'software', 'system', 'split', 'component', 'show', 'dependency', 'component']"
2096,"Behavior diagrams represent the dynamic aspect of the system. It emphasizes what must happen in the system being modeled. Since behavior diagrams illustrate the behavior of a system, they are used extensively to describe the functionality of software systems. As an example, the activity diagram describes the business and operational step-by-step activities of the components in a system.","['behavior', 'diagram', 'represent', 'dynamic', 'aspect', 'system', 'emphasize', 'happen', 'system', 'model', 'behavior', 'diagram', 'illustrate', 'behavior', 'system', 'extensively', 'describe', 'functionality', 'software', 'system', 'example', 'activity', 'diagram', 'describe', 'business', 'operational', 'step', 'step', 'activity', 'component', 'system']"
2097,"Interaction diagrams, a subset of behavior diagrams, emphasize the flow of control and data among the things in the system being modeled. For example, the sequence diagram shows how objects communicate with each other regarding a sequence of messages.","['interaction', 'diagram', 'subset', 'behavior', 'diagram', 'emphasize', 'flow', 'control', 'datum', 'thing', 'system', 'model', 'example', 'sequence', 'diagram', 'show', 'object', 'communicate', 'sequence', 'message']"
2098,"The Object Management Group OMG has developed a metamodeling architecture to define the UML, called the Meta-Object Facility.27 MOF is designed as a four-layered architecture, as shown in the image at right. It provides a meta-meta model at the top, called the M3 layer. This M3-model is the language used by Meta-Object Facility to build metamodels, called M2-models.","['object', 'management', 'group', 'omg', 'develop', 'metamodeling', 'architecture', 'define', 'uml', 'call', 'meta', 'object', 'facility', 'mof', 'design', 'layer', 'architecture', 'show', 'image', 'right', 'provide', 'meta', 'meta', 'model', 'call', 'layer', 'model', 'language', 'meta', 'object', 'facility', 'build', 'metamodel', 'call', 'model']"
2099,"The most prominent example of a Layer 2 Meta-Object Facility model is the UML metamodel, which describes the UML itself. These M2-models describe elements of the M1-layer, and thus M1-models. These would be, for example, models written in UML. The last layer is the M0-layer or data layer. It is used to describe runtime instances of the system.28","['prominent', 'example', 'layer', 'meta', 'object', 'facility', 'model', 'uml', 'metamodel', 'describe', 'uml', 'model', 'describe', 'element', 'layer', 'model', 'example', 'model', 'write', 'uml', 'layer', 'layer', 'data', 'layer', 'describe', 'runtime', 'instance', 'system']"
2100,"The meta-model can be extended using a mechanism called stereotyping. This has been criticized as being insufficient/untenable by Brian Henderson-Sellers and Cesar Gonzalez-Perez in ""Uses and Abuses of the Stereotype Mechanism in UML 1.x and 2.0"".29","['meta', 'model', 'extend', 'mechanism', 'call', 'stereotype', 'criticize', 'insufficient', 'untenable', 'brian', 'henderson', 'sellers', 'cesar', 'gonzalez', 'perez', 'uses', 'abuse', 'stereotype', 'mechanism', 'uml', '1.x', '2']"
2101,UML has been marketed for many contexts.2330,"['uml', 'market', 'contexts']"
2102,"It has been treated, at times, as a design silver bullet, which leads to problems. UML misuse includes overuse designing every part of the system with it, which is unnecessary and assuming that novices can design with it.31","['treat', 'time', 'design', 'silver', 'bullet', 'lead', 'problem', 'uml', 'misuse', 'include', 'overuse', 'designing', 'system', 'unnecessary', 'assume', 'novice', 'design', 'it']"
2103,"It is considered a large language, with many constructs. Some people including Jacobson feel that UML's size hinders learning and therefore, using it.32","['consider', 'large', 'language', 'construct', 'people', 'include', 'jacobson', 'feel', 'uml', 'size', 'hinder', 'learning', 'it']"
2104,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2105,"In computing, an interface is a shared boundary across which two or more separate components of a computer system exchange information. The exchange can be between software, computer hardware, peripheral devices, humans, and combinations of these.1 Some computer hardware devices, such as a touchscreen, can both send and receive data through the interface, while others such as a mouse or microphone may only provide an interface to send data to a given system.2","['computing', 'interface', 'share', 'boundary', 'separate', 'component', 'computer', 'system', 'exchange', 'information', 'exchange', 'software', 'computer', 'hardware', 'peripheral', 'device', 'human', 'combination', 'these', 'computer', 'hardware', 'device', 'touchscreen', 'send', 'receive', 'datum', 'interface', 'mouse', 'microphone', 'provide', 'interface', 'send', 'datum', 'give', 'system']"
2106,"Hardware interfaces exist in many components, such as the various buses, storage devices, other I/O devices, etc. A hardware interface is described by the mechanical, electrical, and logical signals at the interface and the protocol for sequencing them sometimes called signaling.3 A standard interface, such as SCSI, decouples the design and introduction of computing hardware, such as I/O devices, from the design and introduction of other components of a computing system, thereby allowing users and manufacturers great flexibility in the implementation of computing systems.3 Hardware interfaces can be parallel with several electrical connections carrying parts of the data simultaneously or serial where data are sent one bit at a time.4","['hardware', 'interface', 'exist', 'component', 'bus', 'storage', 'device', 'device', 'etc', 'hardware', 'interface', 'describe', 'mechanical', 'electrical', 'logical', 'signal', 'interface', 'protocol', 'sequence', 'call', 'signaling', 'standard', 'interface', 'scsi', 'decouple', 'design', 'introduction', 'computing', 'hardware', 'device', 'design', 'introduction', 'component', 'computing', 'system', 'allow', 'user', 'manufacturer', 'great', 'flexibility', 'implementation', 'compute', 'systems', 'hardware', 'interface', 'parallel', 'electrical', 'connection', 'carry', 'part', 'datum', 'simultaneously', 'serial', 'datum', 'send', 'bit', 'time']"
2107,"A software interface may refer to a wide range of different types of interface at different ""levels"". For example, an operating system may interface with pieces of hardware. Applications or programs running on the operating system may need to interact via data streams, filters, and pipelines.5 In object oriented programs, objects within an application may need to interact via methods.6","['software', 'interface', 'refer', 'wide', 'range', 'different', 'type', 'interface', 'different', 'level', 'example', 'operate', 'system', 'interface', 'piece', 'hardware', 'application', 'program', 'run', 'operating', 'system', 'need', 'interact', 'datum', 'stream', 'filter', 'pipelines', 'object', 'orient', 'program', 'object', 'application', 'need', 'interact', 'methods']"
2108,"A key principle of design is to prohibit access to all resources by default, allowing access only through well-defined entry points, i.e., interfaces.7 Software interfaces provide access to computer resources such as memory, CPU, storage, etc. of the underlying computer system; direct access i.e., not through well-designed interfaces to such resources by software can have major ramifications—sometimes disastrous ones—for functionality and stability.citation needed","['key', 'principle', 'design', 'prohibit', 'access', 'resource', 'default', 'allow', 'access', 'define', 'entry', 'point', 'i.e.', 'interfaces', 'software', 'interface', 'provide', 'access', 'computer', 'resource', 'memory', 'cpu', 'storage', 'etc', 'underlying', 'computer', 'system', 'direct', 'access', 'i.e.', 'design', 'interface', 'resource', 'software', 'major', 'ramification', 'disastrous', 'one', 'functionality', 'stability.citation', 'need']"
2109,"Interfaces between software components can provide constants, data types, types of procedures, exception specifications, and method signatures. Sometimes, public variables are also defined as part of an interface.8","['interface', 'software', 'component', 'provide', 'constant', 'datum', 'type', 'type', 'procedure', 'exception', 'specification', 'method', 'signature', 'public', 'variable', 'define', 'interface']"
2110,"The interface of a software module A is deliberately defined separately from the implementation of that module. The latter contains the actual code of the procedures and methods described in the interface, as well as other ""private"" variables, procedures, etc. Another software module B, for example the client to A, that interacts with A is forced to do so only through the published interface. One practical advantage of this arrangement is that replacing the implementation of A with another implementation of the same interface should not cause B to fail—how A internally meets the requirements of the interface is not relevant to B, which is only concerned with the specifications of the interface. See also Liskov substitution principle.citation needed","['interface', 'software', 'module', 'deliberately', 'define', 'separately', 'implementation', 'module', 'contain', 'actual', 'code', 'procedure', 'method', 'describe', 'interface', 'private', 'variable', 'procedure', 'etc', 'software', 'module', 'example', 'client', 'interact', 'force', 'publish', 'interface', 'practical', 'advantage', 'arrangement', 'replace', 'implementation', 'implementation', 'interface', 'cause', 'fail', 'internally', 'meet', 'requirement', 'interface', 'relevant', 'concerned', 'specification', 'interface', 'liskov', 'substitution', 'principle.citation', 'need']"
2111,"In some object-oriented languages, especially those without full multiple inheritance, the term interface is used to define an abstract type that contains no data but defines behaviours as method signatures. A class having code and data for all the methods corresponding to that interface and declaring so is said to implement that interface.9 Furthermore, even in single-inheritance-languages, one can implement multiple interfaces, and hence can be of different types at the same time.10","['object', 'orient', 'language', 'especially', 'multiple', 'inheritance', 'term', 'interface', 'define', 'abstract', 'type', 'contain', 'datum', 'define', 'behaviour', 'method', 'signature', 'class', 'have', 'code', 'datum', 'method', 'correspond', 'interface', 'declare', 'say', 'implement', 'interface', 'furthermore', 'single', 'inheritance', 'language', 'implement', 'multiple', 'interface', 'different', 'type', 'time']"
2112,"An interface is thus a type definition; anywhere an object can be exchanged for example, in a function or method call the type of the object to be exchanged can be defined in terms of one of its implemented interfaces or base-classes rather than specifying the specific class. This approach means that any class that implements that interface can be used.citation needed For example, a dummy implementation may be used to allow development to progress before the final implementation is available. In another case, a fake or mock implementation may be substituted during testing. Such stub implementations are replaced by real code later in the development process.","['interface', 'type', 'definition', 'object', 'exchange', 'example', 'function', 'method', 'type', 'object', 'exchange', 'define', 'term', 'implement', 'interface', 'base', 'class', 'specify', 'specific', 'class', 'approach', 'mean', 'class', 'implement', 'interface', 'used.citation', 'need', 'example', 'dummy', 'implementation', 'allow', 'development', 'progress', 'final', 'implementation', 'available', 'case', 'fake', 'mock', 'implementation', 'substitute', 'testing', 'stub', 'implementation', 'replace', 'real', 'code', 'later', 'development', 'process']"
2113,"Usually a method defined in an interface contains no code and thus cannot itself be called; it must be implemented by non-abstract code to be run when it is invoked.citation needed An interface called ""Stack"" might define two methods: push and pop. It can be implemented in different ways, for example, FastStack and GenericStack—the first being fast, working with a data structure of fixed size, and the second using a data structure that can be resized, but at the cost of somewhat lower speed.","['usually', 'method', 'define', 'interface', 'contain', 'code', 'call', 'implement', 'non', 'abstract', 'code', 'run', 'invoked.citation', 'need', 'interface', 'call', 'stack', 'define', 'method', 'push', 'pop', 'implement', 'different', 'way', 'example', 'faststack', 'genericstack', 'fast', 'work', 'data', 'structure', 'fix', 'size', 'second', 'data', 'structure', 'resize', 'cost', 'somewhat', 'low', 'speed']"
2114,"Though interfaces can contain many methods they may contain only one or even none at all. For example, the Java language defines the interface Readable that has the single read method; various implementations are used for different purposes, including BufferedReader, FileReader, InputStreamReader, PipedReader, and StringReader. Marker interfaces like Serializable contain no methods at all and serve to provide run-time information to generic processing using Reflection.11","['interface', 'contain', 'method', 'contain', 'example', 'java', 'language', 'define', 'interface', 'readable', 'single', 'read', 'method', 'implementation', 'different', 'purpose', 'include', 'bufferedreader', 'filereader', 'inputstreamreader', 'pipedreader', 'stringreader', 'marker', 'interface', 'like', 'serializable', 'contain', 'method', 'serve', 'provide', 'run', 'time', 'information', 'generic', 'processing', 'reflection']"
2115,"The use of interfaces allows for a programming style called programming to the interface. The idea behind this approach is to base programming logic on the interfaces of the objects used, rather than on internal implementation details. Programming to the interface reduces dependency on implementation specifics and makes code more reusable.12","['use', 'interface', 'allow', 'programming', 'style', 'call', 'programming', 'interface', 'idea', 'approach', 'base', 'programming', 'logic', 'interface', 'object', 'internal', 'implementation', 'detail', 'program', 'interface', 'reduce', 'dependency', 'implementation', 'specific', 'make', 'code', 'reusable']"
2116,"Pushing this idea to the extreme, inversion of control leaves the context to inject the code with the specific implementations of the interface that will be used to perform the work.","['push', 'idea', 'extreme', 'inversion', 'control', 'leave', 'context', 'inject', 'code', 'specific', 'implementation', 'interface', 'perform', 'work']"
2117,"A user interface is a point of interaction between a computer and humans; it includes any number of modalities of interaction such as graphics, sound, position, movement, etc. where data is transferred between the user and the computer system.","['user', 'interface', 'point', 'interaction', 'computer', 'human', 'include', 'number', 'modality', 'interaction', 'graphic', 'sound', 'position', 'movement', 'etc', 'datum', 'transfer', 'user', 'computer', 'system']"
2118,"In software engineering, inversion of control IoC is a design pattern in which custom-written portions of a computer program receive the flow of control from a generic framework. A software architecture with this design inverts control as compared to traditional procedural programming: in traditional programming, the custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks, but with inversion of control, it is the framework that calls into the custom, or task-specific, code.","['software', 'engineering', 'inversion', 'control', 'ioc', 'design', 'pattern', 'custom', 'write', 'portion', 'computer', 'program', 'receive', 'flow', 'control', 'generic', 'framework', 'software', 'architecture', 'design', 'invert', 'control', 'compare', 'traditional', 'procedural', 'programming', 'traditional', 'programming', 'custom', 'code', 'express', 'purpose', 'program', 'call', 'reusable', 'library', 'care', 'generic', 'task', 'inversion', 'control', 'framework', 'call', 'custom', 'task', 'specific', 'code']"
2119,"Inversion of control is used to increase modularity of the program and make it extensible,1 and has applications in object-oriented programming and other programming paradigms. The term was used by Michael Mattsson in a thesis,2 taken from there3 by Stefano Mazzocchi and popularized by him in 1999 in a defunct Apache Software Foundation project, Avalon, then further popularized in 2004 by Robert C. Martin and Martin Fowler.","['inversion', 'control', 'increase', 'modularity', 'program', 'extensible', 'application', 'object', 'orient', 'programming', 'programming', 'paradigm', 'term', 'michael', 'mattsson', 'thesis', 'take', 'there3', 'stefano', 'mazzocchi', 'popularize', '1999', 'defunct', 'apache', 'software', 'foundation', 'project', 'avalon', 'popularize', '2004', 'robert', 'martin', 'martin', 'fowler']"
2120,"The term is related to, but different from, the dependency inversion principle, which concerns itself with decoupling dependencies between high-level and low-level layers through shared abstractions. The general concept is also related to event-driven programming in that it is often implemented using IoC so that the custom code is commonly only concerned with the handling of events, whereas the event loop and dispatch of events/messages is handled by the framework or the runtime environment.","['term', 'relate', 'different', 'dependency', 'inversion', 'principle', 'concern', 'decouple', 'dependency', 'high', 'level', 'low', 'level', 'layer', 'share', 'abstraction', 'general', 'concept', 'relate', 'event', 'drive', 'programming', 'implement', 'ioc', 'custom', 'code', 'commonly', 'concerned', 'handling', 'event', 'event', 'loop', 'dispatch', 'event', 'message', 'handle', 'framework', 'runtime', 'environment']"
2121,"As an example, with traditional programming, the main function of an application might make function calls into a menu library to display a list of available commands and query the user to select one.4 The library thus would return the chosen option as the value of the function call, and the main function uses this value to execute the associated command. This style was common in text based interfaces. For example, an email client may show a screen with commands to load new mail, answer the current mail, create new mail, etc., and the program execution would block until the user presses a key to select a command.","['example', 'traditional', 'programming', 'main', 'function', 'application', 'function', 'call', 'menu', 'library', 'display', 'list', 'available', 'command', 'query', 'user', 'select', 'one', 'library', 'return', 'choose', 'option', 'value', 'function', 'main', 'function', 'use', 'value', 'execute', 'associated', 'command', 'style', 'common', 'text', 'base', 'interface', 'example', 'email', 'client', 'screen', 'command', 'load', 'new', 'mail', 'answer', 'current', 'mail', 'create', 'new', 'mail', 'etc', 'program', 'execution', 'block', 'user', 'press', 'key', 'select', 'command']"
2122,"With inversion of control, on the other hand, the program would be written using a software framework that knows common behavioral and graphical elements, such as windowing systems, menus, controlling the mouse, and so on. The custom code ""fills in the blanks"" for the framework, such as supplying a table of menu items and registering a code subroutine for each item, but it is the framework that monitors the user's actions and invokes the subroutine when a menu item is selected. In the mail client example, the framework could follow both the keyboard and mouse inputs and call the command invoked by the user by either means, and at the same time monitor the network interface to find out if new messages arrive and refresh the screen when some network activity is detected. The same framework could be used as the skeleton for a spreadsheet program or a text editor. Conversely, the framework knows nothing about Web browsers, spreadsheets or text editors; implementing their functionality takes custom code.","['inversion', 'control', 'hand', 'program', 'write', 'software', 'framework', 'know', 'common', 'behavioral', 'graphical', 'element', 'windowe', 'system', 'menu', 'control', 'mouse', 'custom', 'code', 'fill', 'blank', 'framework', 'supply', 'table', 'menu', 'item', 'register', 'code', 'subroutine', 'item', 'framework', 'monitor', 'user', 'action', 'invoke', 'subroutine', 'menu', 'item', 'select', 'mail', 'client', 'example', 'framework', 'follow', 'keyboard', 'mouse', 'input', 'command', 'invoke', 'user', 'mean', 'time', 'monitor', 'network', 'interface', 'find', 'new', 'message', 'arrive', 'refresh', 'screen', 'network', 'activity', 'detect', 'framework', 'skeleton', 'spreadsheet', 'program', 'text', 'editor', 'conversely', 'framework', 'know', 'web', 'browser', 'spreadsheet', 'text', 'editor', 'implement', 'functionality', 'take', 'custom', 'code']"
2123,"Inversion of control carries the strong connotation that the reusable code and the problem-specific code are developed independently even though they operate together in an application. Callbacks, schedulers, event loops, dependency injection, and the template method are examples of design patterns that follow the inversion of control principle, although the term is most commonly used in the context of object-oriented programming.","['inversion', 'control', 'carry', 'strong', 'connotation', 'reusable', 'code', 'problem', 'specific', 'code', 'develop', 'independently', 'operate', 'application', 'callback', 'scheduler', 'event', 'loop', 'dependency', 'injection', 'template', 'method', 'example', 'design', 'pattern', 'follow', 'inversion', 'control', 'principle', 'term', 'commonly', 'context', 'object', 'orient', 'programming']"
2124,Inversion of control serves the following design purposes:,"['inversion', 'control', 'serve', 'follow', 'design', 'purpose']"
2125,"Inversion of control is sometimes facetiously referred to as the ""Hollywood Principle: Don't call us, we'll call you"".","['inversion', 'control', 'facetiously', 'refer', 'hollywood', 'principle']"
2126,"Inversion of control is not a new term in computer science. Martin Fowler traces the etymology of the phrase back to 1988,5 but it is closely related to the concept of program inversion described by Michael Jackson in his Jackson Structured Programming methodology in the 1970s.6 A bottom-up parser can be seen as an inversion of a top-down parser: in the one case, the control lies with the parser, while in the other case, it lies with the receiving application.","['inversion', 'control', 'new', 'term', 'computer', 'science', 'martin', 'fowler', 'trace', 'etymology', 'phrase', '1988', 'closely', 'relate', 'concept', 'program', 'inversion', 'describe', 'michael', 'jackson', 'jackson', 'structured', 'programming', 'methodology', '1970s', 'parser', 'see', 'inversion', 'parser', 'case', 'control', 'lie', 'parser', 'case', 'lie', 'receiving', 'application']"
2127,"Dependency injection is a specific type of IoC.4 A service locator such as the Java Naming and Directory Interface JNDI is similar. In an article by Loek Bergman,7 it is presented as an architectural principle.","['dependency', 'injection', 'specific', 'type', 'ioc', 'service', 'locator', 'java', 'naming', 'directory', 'interface', 'jndi', 'similar', 'article', 'loek', 'bergman', 'present', 'architectural', 'principle']"
2128,"In an article by Robert C. Martin,8 the dependency inversion principle and abstraction by layering come together. His reason to use the term ""inversion"" is in comparison with traditional software development methods. He describes the decoupling of services by the abstraction of layers when he is talking about dependency inversion. The principle is used to find out where system borders are in the design of the abstraction layers.","['article', 'robert', 'martin', 'dependency', 'inversion', 'principle', 'abstraction', 'layering', 'come', 'reason', 'use', 'term', 'inversion', 'comparison', 'traditional', 'software', 'development', 'method', 'describe', 'decoupling', 'service', 'abstraction', 'layer', 'talk', 'dependency', 'inversion', 'principle', 'find', 'system', 'border', 'design', 'abstraction', 'layer']"
2129,"In traditional programming, the flow of the business logic is determined by objects that are statically bound to one another. With inversion of control, the flow depends on the object graph that is built up during program execution. Such a dynamic flow is made possible by object interactions that are defined through abstractions. This run-time binding is achieved by mechanisms such as dependency injection or a service locator. In IoC, the code could also be linked statically during compilation, but finding the code to execute by reading its description from external configuration instead of with a direct reference in the code itself.","['traditional', 'programming', 'flow', 'business', 'logic', 'determine', 'object', 'statically', 'bind', 'inversion', 'control', 'flow', 'depend', 'object', 'graph', 'build', 'program', 'execution', 'dynamic', 'flow', 'possible', 'object', 'interaction', 'define', 'abstraction', 'run', 'time', 'binding', 'achieve', 'mechanism', 'dependency', 'injection', 'service', 'locator', 'ioc', 'code', 'link', 'statically', 'compilation', 'find', 'code', 'execute', 'read', 'description', 'external', 'configuration', 'instead', 'direct', 'reference', 'code']"
2130,"In dependency injection, a dependent object or module is coupled to the object it needs at run time. Which particular object will satisfy the dependency during program execution typically cannot be known at compile time using static analysis. While described in terms of object interaction here, the principle can apply to other programming methodologies besides object-oriented programming.","['dependency', 'injection', 'dependent', 'object', 'module', 'couple', 'object', 'need', 'run', 'time', 'particular', 'object', 'satisfy', 'dependency', 'program', 'execution', 'typically', 'know', 'compile', 'time', 'static', 'analysis', 'describe', 'term', 'object', 'interaction', 'principle', 'apply', 'programming', 'methodology', 'object', 'orient', 'programming']"
2131,"In order for the running program to bind objects to one another, the objects must possess compatible interfaces. For example, class A may delegate behavior to interface I which is implemented by class B; the program instantiates A and B, and then injects B into A.","['order', 'run', 'program', 'bind', 'object', 'object', 'possess', 'compatible', 'interface', 'example', 'class', 'delegate', 'behavior', 'interface', 'implement', 'class', 'program', 'instantiate', 'inject']"
2132,"In object-oriented programming, there are several basic techniques to implement inversion of control. These are:","['object', 'orient', 'programming', 'basic', 'technique', 'implement', 'inversion', 'control']"
2133,"In an original article by Martin Fowler,9 the first three different techniques are discussed. In a description about inversion of control types,10 the last one is mentioned. Often the contextualized lookup will be accomplished using a service locator.","['original', 'article', 'martin', 'fowler', 'different', 'technique', 'discuss', 'description', 'inversion', 'control', 'types', 'mention', 'contextualized', 'lookup', 'accomplish', 'service', 'locator']"
2134,Most frameworks such as .NET or Enterprise Java display this pattern:,"['framework', '.net', 'enterprise', 'java', 'display', 'pattern']"
2135,"This basic outline in Java gives an example of code following the IoC methodology. It is important, however, that in the ServerFacade a lot of assumptions are made about the data returned by the data access object DAO.","['basic', 'outline', 'java', 'give', 'example', 'code', 'follow', 'ioc', 'methodology', 'important', 'serverfacade', 'lot', 'assumption', 'datum', 'return', 'datum', 'access', 'object', 'dao']"
2136,"Although all these assumptions might be valid at some time, they couple the implementation of the ServerFacade to the DAO implementation. Designing the application in the manner of inversion of control would hand over the control completely to the DAO object. The code would then become","['assumption', 'valid', 'time', 'couple', 'implementation', 'serverfacade', 'dao', 'implementation', 'design', 'application', 'manner', 'inversion', 'control', 'hand', 'control', 'completely', 'dao', 'object', 'code']"
2137,The example shows that the way the method respondToRequest is constructed determines if IoC is used. It is the way that parameters are used that define IoC. This resembles the message-passing style that some object-oriented programming languages use.,"['example', 'show', 'way', 'method', 'respondtorequest', 'construct', 'determine', 'ioc', 'way', 'parameter', 'define', 'ioc.', 'resemble', 'message', 'pass', 'style', 'object', 'orient', 'programming', 'language', 'use']"
2138,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2139,"In computer programming, an iterator is an object that enables a programmer to traverse a container, particularly lists.123 Various types of iterators are often provided via a container's interface. Though the interface and semantics of a given iterator are fixed, iterators are often implemented in terms of the structures underlying a container implementation and are often tightly coupled to the container to enable the operational semantics of the iterator. An iterator performs traversal and also gives access to data elements in a container, but does not itself perform iteration i.e., not without some significant liberty taken with that concept or with trivial use of the terminologycitation needed.","['computer', 'programming', 'iterator', 'object', 'enable', 'programmer', 'traverse', 'container', 'particularly', 'lists', 'type', 'iterator', 'provide', 'container', 'interface', 'interface', 'semantic', 'give', 'iterator', 'fix', 'iterator', 'implement', 'term', 'structure', 'underlie', 'container', 'implementation', 'tightly', 'couple', 'container', 'enable', 'operational', 'semantic', 'iterator', 'iterator', 'perform', 'traversal', 'give', 'access', 'data', 'element', 'container', 'perform', 'iteration', 'i.e.', 'significant', 'liberty', 'take', 'concept', 'trivial', 'use', 'terminologycitation', 'need']"
2140,An iterator is behaviorally similar to a database cursor. Iterators date to the CLU programming language in 1974.,"['iterator', 'behaviorally', 'similar', 'database', 'cursor', 'iterator', 'date', 'clu', 'programming', 'language', '1974']"
2141,"Internal iterators are higher order functions often taking anonymous functions, but not necessarily such as map, reduce etc., implementing the traversal across a container, applying the given function to every element in turn. An example might be Python's map function:","['internal', 'iterator', 'high', 'order', 'function', 'take', 'anonymous', 'function', 'necessarily', 'map', 'reduce', 'etc', 'implement', 'traversal', 'container', 'apply', 'give', 'function', 'element', 'turn', 'example', 'python', 'map', 'function']"
2142,"An external iterator may be thought of as a type of pointer that has two primary operations: referencing one particular element in the object collection called element access, and modifying itself so it points to the next element called element traversal.4 There must also be a way to create an iterator so it points to some first element as well as some way to determine when the iterator has exhausted all of the elements in the container. Depending on the language and intended use, iterators may also provide additional operations or exhibit different behaviors.","['external', 'iterator', 'think', 'type', 'pointer', 'primary', 'operation', 'reference', 'particular', 'element', 'object', 'collection', 'call', 'element', 'access', 'modify', 'point', 'element', 'call', 'element', 'traversal', 'way', 'create', 'iterator', 'point', 'element', 'way', 'determine', 'iterator', 'exhaust', 'element', 'container', 'depend', 'language', 'intended', 'use', 'iterator', 'provide', 'additional', 'operation', 'exhibit', 'different', 'behavior']"
2143,"The primary purpose of an iterator is to allow a user to process every element of a container while isolating the user from the internal structure of the container.2 This allows the container to store elements in any manner it wishes while allowing the user to treat it as if it were a simple sequence or list. An iterator class is usually designed in tight coordination with the corresponding container class. Usually, the container provides the methods for creating iterators.","['primary', 'purpose', 'iterator', 'allow', 'user', 'process', 'element', 'container', 'isolate', 'user', 'internal', 'structure', 'container', 'allow', 'container', 'store', 'element', 'manner', 'wish', 'allow', 'user', 'treat', 'simple', 'sequence', 'list', 'iterator', 'class', 'usually', 'design', 'tight', 'coordination', 'corresponding', 'container', 'class', 'usually', 'container', 'provide', 'method', 'create', 'iterator']"
2144,"A loop counter is sometimes also referred to as a loop iterator. A loop counter, however, only provides the traversal functionality and not the element access functionality.","['loop', 'counter', 'refer', 'loop', 'iterator', 'loop', 'counter', 'provide', 'traversal', 'functionality', 'element', 'access', 'functionality']"
2145,"One way of implementing iterators is to use a restricted form of coroutine, known as a generator. By contrast with a subroutine, a generator coroutine can yield values to its caller multiple times, instead of returning just once. Most iterators are naturally expressible as generators, but because generators preserve their local state between invocations, they're particularly well-suited for complicated, stateful iterators, such as tree traversers. There are subtle differences and distinctions in the use of the terms ""generator"" and ""iterator"", which vary between authors and languages.5 In Python, a generator is an iterator constructor: a function that returns an iterator. An example of a Python generator returning an iterator for the Fibonacci numbers using Python's yield statement follows:","['way', 'implement', 'iterator', 'use', 'restricted', 'form', 'coroutine', 'know', 'generator', 'contrast', 'subroutine', 'generator', 'coroutine', 'yield', 'value', 'caller', 'multiple', 'time', 'instead', 'return', 'iterator', 'naturally', 'expressible', 'generator', 'generator', 'preserve', 'local', 'state', 'invocation', 'particularly', 'suit', 'complicated', 'stateful', 'iterator', 'tree', 'traverser', 'subtle', 'difference', 'distinction', 'use', 'term', 'generator', 'iterator', 'vary', 'author', 'languages', 'python', 'generator', 'iterator', 'constructor', 'function', 'return', 'iterator', 'example', 'python', 'generator', 'return', 'iterator', 'fibonacci', 'number', 'python', 'yield', 'statement', 'follow']"
2146,"Some object-oriented languages such as C#, C++ later versions, Delphi later versions, Go, Java later versions, Lua, Perl, Python, Ruby provide an intrinsic way of iterating through the elements of a container object without the introduction of an explicit iterator object. An actual iterator object may exist in reality, but if it does it is not exposed within the source code of the language.46","['object', 'orient', 'language', 'c++', 'later', 'version', 'delphi', 'later', 'version', 'java', 'late', 'version', 'lua', 'perl', 'python', 'ruby', 'provide', 'intrinsic', 'way', 'iterate', 'element', 'container', 'object', 'introduction', 'explicit', 'iterator', 'object', 'actual', 'iterator', 'object', 'exist', 'reality', 'expose', 'source', 'code', 'language']"
2147,"Implicit iterators are often manifested by a ""foreach"" statement or equivalent, such as in the following Python example:","['implicit', 'iterator', 'manifest', 'foreach', 'statement', 'equivalent', 'follow', 'python', 'example']"
2148,"In Python, an iterable is an object which can be converted to an iterator, which is then iterated through during the for loop; this is done implicitly.","['python', 'iterable', 'object', 'convert', 'iterator', 'iterate', 'loop', 'implicitly']"
2149,"Or other times they may be created by the collection object itself, as in this Ruby example:","['time', 'create', 'collection', 'object', 'ruby', 'example']"
2150,"This iteration style is sometimes called ""internal iteration"" because its code fully executes within the context of the iterable object that controls all aspects of iteration, and the programmer only provides the operation to execute at each step using an anonymous function.","['iteration', 'style', 'call', 'internal', 'iteration', 'code', 'fully', 'execute', 'context', 'iterable', 'object', 'control', 'aspect', 'iteration', 'programmer', 'provide', 'operation', 'execute', 'step', 'anonymous', 'function']"
2151,"Languages that support list comprehensions or similar constructs may also make use of implicit iterators during the construction of the result list, as in Python:","['language', 'support', 'list', 'comprehension', 'similar', 'construct', 'use', 'implicit', 'iterator', 'construction', 'result', 'list', 'python']"
2152,"Sometimes the implicit hidden nature is only partial. The C++ language has a few function templates for implicit iteration, such as for_each. These functions still require explicit iterator objects as their initial input, but the subsequent iteration does not expose an iterator object to the user.","['implicit', 'hidden', 'nature', 'partial', 'c++', 'language', 'function', 'template', 'implicit', 'iteration', 'for_each', 'function', 'require', 'explicit', 'iterator', 'object', 'initial', 'input', 'subsequent', 'iteration', 'expose', 'iterator', 'object', 'user']"
2153,"Iterators are a useful abstraction of input streams – they provide a potentially infinite iterable but not necessarily indexable object. Several languages, such as Perl and Python, implement streams as iterators. In Python, iterators are objects representing streams of data.7 Alternative implementations of stream include data-driven languages, such as AWK and sed.","['iterator', 'useful', 'abstraction', 'input', 'stream', 'provide', 'potentially', 'infinite', 'iterable', 'necessarily', 'indexable', 'object', 'language', 'perl', 'python', 'implement', 'stream', 'iterator', 'python', 'iterator', 'object', 'represent', 'stream', 'data', 'alternative', 'implementation', 'stream', 'include', 'data', 'drive', 'language', 'awk', 'se']"
2154,"In procedural languages it is common to use the subscript operator and a loop counter to loop through all the elements in a sequence such as an array. Although indexing may also be used with some object-oriented containers, the use of iterators may have some advantages:8","['procedural', 'language', 'common', 'use', 'subscript', 'operator', 'loop', 'counter', 'loop', 'element', 'sequence', 'array', 'indexing', 'object', 'orient', 'container', 'use', 'iterator', 'advantages']"
2155,"The ability of a container to be modified while iterating through its elements has become necessary in modern object-oriented programming, where the interrelationships between objects and the effects of operations may not be obvious. By using an iterator one is isolated from these sorts of consequences. This assertion must however be taken with a grain of salt, because more often than not, for efficiency reasons, the iterator implementation is so tightly bound to the container that it does preclude modification of the underlying container without invalidating itself.","['ability', 'container', 'modify', 'iterate', 'element', 'necessary', 'modern', 'object', 'orient', 'programming', 'interrelationship', 'object', 'effect', 'operation', 'obvious', 'iterator', 'isolate', 'sort', 'consequence', 'assertion', 'take', 'grain', 'salt', 'efficiency', 'reason', 'iterator', 'implementation', 'tightly', 'bind', 'container', 'preclude', 'modification', 'underlie', 'container', 'invalidate']"
2156,"For containers that may move around their data in memory, the only way to not invalidate the iterator is, for the container, to somehow keep track of all the currently alive iterators and update them on the fly. Since the number of iterators at a given time may be arbitrarily large in comparison to the size of the tied container, updating them all will drastically impair the complexity guarantee on the container's operations.","['container', 'datum', 'memory', 'way', 'invalidate', 'iterator', 'container', 'track', 'currently', 'alive', 'iterator', 'update', 'fly', 'number', 'iterator', 'give', 'time', 'arbitrarily', 'large', 'comparison', 'size', 'tie', 'container', 'update', 'drastically', 'impair', 'complexity', 'guarantee', 'container', 'operation']"
2157,"An alternative way to keep the number of updates bound relatively to the container size would be to use a kind of handle mechanism, that is a collection of indirect pointers to the container's elements that must be updated with the container, and let the iterators point to these handles instead of directly to the data elements. But this approach will negatively impact the iterator performance, since it must effectuate a double pointer following to access the actual data element. This is usually not desirable, because many algorithms using the iterators invoke the iterators data access operation more often than the advance method. It is therefore especially important to have iterators with very efficient data access.","['alternative', 'way', 'number', 'update', 'bind', 'relatively', 'container', 'size', 'use', 'kind', 'handle', 'mechanism', 'collection', 'indirect', 'pointer', 'container', 'element', 'update', 'container', 'let', 'iterator', 'point', 'handle', 'instead', 'directly', 'data', 'element', 'approach', 'negatively', 'impact', 'iterator', 'performance', 'effectuate', 'double', 'pointer', 'follow', 'access', 'actual', 'datum', 'element', 'usually', 'desirable', 'algorithm', 'iterator', 'invoke', 'iterator', 'data', 'access', 'operation', 'advance', 'method', 'especially', 'important', 'iterator', 'efficient', 'data', 'access']"
2158,"All in all, this is always a trade-off between security iterators remain always valid and efficiency. Most of the time, the added security is not worth the efficiency price to pay for it. Using an alternative container for example a singly linked list instead of a vector would be a better choice globally more efficient if the stability of the iterators is needed.","['trade', 'security', 'iterator', 'remain', 'valid', 'efficiency', 'time', 'add', 'security', 'worth', 'efficiency', 'price', 'pay', 'alternative', 'container', 'example', 'singly', 'link', 'list', 'instead', 'vector', 'well', 'choice', 'globally', 'efficient', 'stability', 'iterator', 'need']"
2159,Iterators can be categorised according to their functionality. Here is a non-exhaustive list of iterator categories:910,"['iterator', 'categorise', 'accord', 'functionality', 'non', 'exhaustive', 'list', 'iterator', 'categories']"
2160,Different languages or libraries used with these languages define iterator types. Some of them are12,"['different', 'language', 'library', 'language', 'define', 'iterator', 'type', 'are12']"
2161,"Iterators in the .NET Framework are called ""enumerators"" and represented by the IEnumerator interface. IEnumerator provides a MoveNext method, which advances to the next element and indicates whether the end of the collection has been reached; a Current property, to obtain the value of the element currently being pointed at; and an optional Reset method, to rewind the enumerator back to its initial position. The enumerator initially points to a special value before the first element, so a call to MoveNext is required to begin iterating.","['iterator', '.net', 'framework', 'call', 'enumerator', 'represent', 'ienumerator', 'interface', 'ienumerator', 'provide', 'movenext', 'method', 'advance', 'element', 'indicate', 'end', 'collection', 'reach', 'current', 'property', 'obtain', 'value', 'element', 'currently', 'point', 'optional', 'reset', 'method', 'rewind', 'enumerator', 'initial', 'position', 'enumerator', 'initially', 'point', 'special', 'value', 'element', 'movenext', 'require', 'begin', 'iterate']"
2162,"Enumerators are typically obtained by calling the GetEnumerator method of an object implementing the IEnumerable interface. Container classes typically implement this interface. However, the foreach statement in C# can operate on any object providing such a method, even if it doesn't implement IEnumerable duck typing. Both interfaces were expanded into generic versions in .NET 2.0.","['enumerator', 'typically', 'obtain', 'call', 'getenumerator', 'method', 'object', 'implement', 'ienumerable', 'interface', 'container', 'class', 'typically', 'implement', 'interface', 'foreach', 'statement', 'operate', 'object', 'provide', 'method', 'implement', 'ienumerable', 'duck', 'typing', 'interface', 'expand', 'generic', 'version', '.net', '2']"
2163,The following shows a simple use of iterators in C# 2.0:,"['follow', 'show', 'simple', 'use', 'iterator', '2']"
2164,"C# 2.0 also supports generators: a method that is declared as returning IEnumerator or IEnumerable, but uses the ""yield return"" statement to produce a sequence of elements instead of returning an object instance, will be transformed by the compiler into a new class implementing the appropriate interface.","['2', 'support', 'generator', 'method', 'declare', 'return', 'ienumerator', 'ienumerable', 'use', 'yield', 'return', 'statement', 'produce', 'sequence', 'element', 'instead', 'return', 'object', 'instance', 'transform', 'compiler', 'new', 'class', 'implement', 'appropriate', 'interface']"
2165,"The C++ language makes wide use of iterators in its Standard Library and describes several categories of iterators differing in the repertoire of operations they allow. These include forward iterators, bidirectional iterators, and random access iterators, in order of increasing possibilities. All of the standard container template types provide iterators of one of these categories. Iterators generalize pointers to elements of an array which indeed can be used as iterators, and their syntax is designed to resemble that of C pointer arithmetic, where the * and -> operators are used to reference the element to which the iterator points and pointer arithmetic operators like ++ are used to modify iterators in the traversal of a container.","['c++', 'language', 'make', 'wide', 'use', 'iterator', 'standard', 'library', 'describe', 'category', 'iterator', 'differ', 'repertoire', 'operation', 'allow', 'include', 'forward', 'iterator', 'bidirectional', 'iterator', 'random', 'access', 'iterator', 'order', 'increase', 'possibility', 'standard', 'container', 'template', 'type', 'provide', 'iterator', 'category', 'iterator', 'generalize', 'pointer', 'element', 'array', 'iterator', 'syntax', 'design', 'resemble', 'pointer', 'arithmetic', 'operator', 'reference', 'element', 'iterator', 'point', 'pointer', 'arithmetic', 'operator', 'like', 'modify', 'iterator', 'traversal', 'container']"
2166,"Traversal using iterators usually involves a single varying iterator, and two fixed iterators that serve to delimit a range to be traversed. The distance between the limiting iterators, in terms of the number of applications of the operator ++ needed to transform the lower limit into the upper one, equals the number of items in the designated range; the number of distinct iterator values involved is one more than that. By convention, the lower limiting iterator ""points to"" the first element in the range, while the upper limiting iterator does not point to any element in the range, but rather just beyond the end of the range. For traversal of an entire container, the begin method provides the lower limit, and end the upper limit. The latter does not reference any element of the container at all but is a valid iterator value that can be compared against.","['traversal', 'iterator', 'usually', 'involve', 'single', 'vary', 'iterator', 'fixed', 'iterator', 'serve', 'delimit', 'range', 'traverse', 'distance', 'limit', 'iterator', 'term', 'number', 'application', 'operator', 'need', 'transform', 'low', 'limit', 'upper', 'equal', 'number', 'item', 'designate', 'range', 'number', 'distinct', 'iterator', 'value', 'involve', 'convention', 'low', 'limit', 'iterator', 'point', 'element', 'range', 'upper', 'limiting', 'iterator', 'point', 'element', 'range', 'end', 'range', 'traversal', 'entire', 'container', 'begin', 'method', 'provide', 'low', 'limit', 'end', 'upper', 'limit', 'reference', 'element', 'container', 'valid', 'iterator', 'value', 'compare']"
2167,The following example shows a typical use of an iterator.,"['follow', 'example', 'show', 'typical', 'use', 'iterator']"
2168,"Iterator types are separate from the container types they are used with, though the two are often used in concert. The category of the iterator and thus the operations defined for it usually depends on the type of container, with for instance arrays or vectors providing random access iterators, but sets which use a linked structure as implementation only providing bidirectional iterators. One same container type can have more than one associated iterator type; for instance the std::vector<T> container type allows traversal either using raw pointers to its elements of type *<T>, or values of a special type std::vector<T>::iterator, and yet another type is provided for ""reverse iterators"", whose operations are defined in such a way that an algorithm performing a usual forward traversal will actually do traversal in reverse order when called with reverse iterators. Most containers also provide a separate const_iterator type, for which operations that would allow changing the values pointed to are intentionally not defined.","['iterator', 'type', 'separate', 'container', 'type', 'concert', 'category', 'iterator', 'operation', 'define', 'usually', 'depend', 'type', 'container', 'instance', 'array', 'vector', 'provide', 'random', 'access', 'iterator', 'set', 'use', 'link', 'structure', 'implementation', 'provide', 'bidirectional', 'iterator', 'container', 'type', 'associate', 'iterator', 'type', 'instance', 'std::vector', 'container', 'type', 'allow', 'traversal', 'raw', 'pointer', 'element', 'type', 'value', 'special', 'type', 'std::vector', 't>::iterator', 'type', 'provide', 'reverse', 'iterator', 'operation', 'define', 'way', 'algorithm', 'perform', 'usual', 'forward', 'traversal', 'actually', 'traversal', 'reverse', 'order', 'call', 'reverse', 'iterator', 'container', 'provide', 'separate', 'const_iterator', 'type', 'operation', 'allow', 'change', 'value', 'point', 'intentionally', 'define']"
2169,"Simple traversal of a container object or a range of its elements including modification of those elements unless a const_iterator is used can be done using iterators alone. But container types may also provide methods like insert or erase that modify the structure of the container itself; these are methods of the container class, but in addition require one or more iterator values to specify the desired operation. While it is possible to have multiple iterators pointing into the same container simultaneously, structure-modifying operations may invalidate certain iterator values the standard specifies for each case whether this may be so; using an invalidated iterator is an error that will lead to undefined behavior, and such errors need not be signaled by the run time system.","['simple', 'traversal', 'container', 'object', 'range', 'element', 'include', 'modification', 'element', 'const_iterator', 'iterator', 'container', 'type', 'provide', 'method', 'like', 'insert', 'erase', 'modify', 'structure', 'container', 'method', 'container', 'class', 'addition', 'require', 'iterator', 'value', 'specify', 'desire', 'operation', 'possible', 'multiple', 'iterator', 'point', 'container', 'simultaneously', 'structure', 'modifying', 'operation', 'invalidate', 'certain', 'iterator', 'value', 'standard', 'specifie', 'case', 'invalidated', 'iterator', 'error', 'lead', 'undefined', 'behavior', 'error', 'need', 'signal', 'run', 'time', 'system']"
2170,"Implicit iteration is also partially supported by C++ through the use of standard function templates, such as std::for_each, std::copy and std::accumulate.","['implicit', 'iteration', 'partially', 'support', 'c++', 'use', 'standard', 'function', 'template', 'std::for_each', 'std::copy', 'std::accumulate']"
2171,"When used they must be initialized with existing iterators, usually begin and end, that define the range over which iteration occurs. But no explicit iterator object is subsequently exposed as the iteration proceeds. This example shows the use of for_each.","['initialize', 'exist', 'iterator', 'usually', 'begin', 'end', 'define', 'range', 'iteration', 'occur', 'explicit', 'iterator', 'object', 'subsequently', 'expose', 'iteration', 'proceed', 'example', 'show', 'use', 'for_each']"
2172,"The same can be achieved using std::copy, passing a std::ostream_iterator value as third iterator:","['achieve', 'std::copy', 'pass', 'std::ostream_iterator', 'value', 'iterator']"
2173,"Since C++11, lambda function syntax can be used to specify to operation to be iterated inline, avoiding the need to define a named function. Here is an example of for-each iteration using a lambda function:","['c++11', 'lambda', 'function', 'syntax', 'specify', 'operation', 'iterate', 'inline', 'avoid', 'need', 'define', 'name', 'function', 'example', 'iteration', 'lambda', 'function']"
2174,"Introduced in the Java JDK 1.2 release, the java.util.Iterator interface allows the iteration of container classes. Each Iterator provides a next and hasNext method, and may optionally support a remove method. Iterators are created by the corresponding container class, typically by a method named iterator.15","['introduce', 'java', 'jdk', '1', 'release', 'java.util', 'iterator', 'interface', 'allow', 'iteration', 'container', 'class', 'iterator', 'provide', 'hasnext', 'method', 'optionally', 'support', 'remove', 'method', 'iterator', 'create', 'corresponding', 'container', 'class', 'typically', 'method', 'name', 'iterator']"
2175,The next method advances the iterator and returns the value pointed to by the iterator. The first element is obtained upon the first call to next. To determine when all the elements in the container have been visited the hasNext test method is used. The following example shows a simple use of iterators:,"['method', 'advance', 'iterator', 'return', 'value', 'point', 'iterator', 'element', 'obtain', 'determine', 'element', 'container', 'visit', 'hasnext', 'test', 'method', 'follow', 'example', 'show', 'simple', 'use', 'iterator']"
2176,"To show that hasNext can be called repeatedly, we use it to insert commas between the elements but not after the last element.","['hasnext', 'call', 'repeatedly', 'use', 'insert', 'comma', 'element', 'element']"
2177,"This approach does not properly separate the advance operation from the actual data access. If the data element must be used more than once for each advance, it needs to be stored in a temporary variable. When an advance is needed without data access i.e. to skip a given data element, the access is nonetheless performed, though the returned value is ignored in this case.","['approach', 'properly', 'separate', 'advance', 'operation', 'actual', 'data', 'access', 'data', 'element', 'advance', 'need', 'store', 'temporary', 'variable', 'advance', 'need', 'datum', 'access', 'i.e.', 'skip', 'give', 'data', 'element', 'access', 'nonetheless', 'perform', 'returned', 'value', 'ignore', 'case']"
2178,"For collection types that support it, the remove method of the iterator removes the most recently visited element from the container while keeping the iterator usable. Adding or removing elements by calling the methods of the container also from the same thread makes the iterator unusable. An attempt to get the next element throws the exception. An exception is also thrown if there are no more elements remaining hasNext has previously returned false.","['collection', 'type', 'support', 'remove', 'method', 'iterator', 'remove', 'recently', 'visit', 'element', 'container', 'keep', 'iterator', 'usable', 'add', 'remove', 'element', 'call', 'method', 'container', 'thread', 'make', 'iterator', 'unusable', 'attempt', 'element', 'throw', 'exception', 'exception', 'throw', 'element', 'remain', 'hasnext', 'previously', 'return', 'false']"
2179,"Additionally, for java.util.List there is a java.util.ListIterator with a similar API but that allows forward and backward iteration, provides its current index in the list and allows setting of the list element at its position.","['additionally', 'java.util', 'list', 'java.util', 'listiterator', 'similar', 'api', 'allow', 'forward', 'backward', 'iteration', 'provide', 'current', 'index', 'list', 'allow', 'setting', 'list', 'element', 'position']"
2180,"The J2SE 5.0 release of Java introduced the Iterable interface to support an enhanced for foreach loop for iterating over collections and arrays. Iterable defines the iterator method that returns an Iterator. Using the enhanced for loop, the preceding example can be rewritten as","['j2se', '5', 'release', 'java', 'introduce', 'iterable', 'interface', 'support', 'enhance', 'foreach', 'loop', 'iterate', 'collection', 'array', 'iterable', 'define', 'iterator', 'method', 'return', 'iterator', 'enhance', 'loop', 'precede', 'example', 'rewrite']"
2181,Some containers also use the older since 1.0 Enumeration class. It provides hasMoreElements and nextElement methods but has no methods to modify the container.,"['container', 'use', 'old', '1', 'enumeration', 'class', 'provide', 'hasmoreelement', 'nextelement', 'method', 'method', 'modify', 'container']"
2182,"In Scala, iterators have a rich set of methods similar to collections, and can be used directly in for loops. Indeed, both iterators and collections inherit from a common base trait - scala.collection.TraversableOnce. However, because of the rich set of methods available in the Scala collections library, such as map, collect, filter etc., it is often not necessary to deal with iterators directly when programming in Scala.","['scala', 'iterator', 'rich', 'set', 'method', 'similar', 'collection', 'directly', 'loop', 'iterator', 'collection', 'inherit', 'common', 'base', 'trait', 'scala.collection', 'traversableonce', 'rich', 'set', 'method', 'available', 'scala', 'collection', 'library', 'map', 'collect', 'filter', 'etc', 'necessary', 'deal', 'iterator', 'directly', 'program', 'scala']"
2183,"Java iterators and collections can be automatically converted into Scala iterators and collections, respectively, simply by adding the single line","['java', 'iterator', 'collection', 'automatically', 'convert', 'scala', 'iterator', 'collection', 'respectively', 'simply', 'add', 'single', 'line']"
2184,"to the file. The JavaConversions object provides implicit conversions to do this. Implicit conversions are a feature of Scala: methods that, when visible in the current scope, automatically insert calls to themselves into relevant expressions at the appropriate place to make them typecheck when they otherwise wouldn't.","['file', 'javaconversions', 'object', 'provide', 'implicit', 'conversion', 'implicit', 'conversion', 'feature', 'scala', 'method', 'visible', 'current', 'scope', 'automatically', 'insert', 'call', 'relevant', 'expression', 'appropriate', 'place', 'typecheck']"
2185,"MATLAB supports both external and internal implicit iteration using either ""native"" arrays or cell arrays. In the case of external iteration where the onus is on the user to advance the traversal and request next elements, one can define a set of elements within an array storage structure and traverse the elements using the for-loop construct. For example,","['matlab', 'support', 'external', 'internal', 'implicit', 'iteration', 'native', 'array', 'cell', 'array', 'case', 'external', 'iteration', 'onus', 'user', 'advance', 'traversal', 'request', 'element', 'define', 'set', 'element', 'array', 'storage', 'structure', 'traverse', 'element', 'loop', 'construct', 'example']"
2186,traverses an array of integers using the for keyword.,"['traverse', 'array', 'integer', 'keyword']"
2187,"In the case of internal iteration where the user can supply an operation to the iterator to perform over every element of a collection, many built-in operators and MATLAB functions are overloaded to execute over every element of an array and return a corresponding output array implicitly. Furthermore, the arrayfun and cellfun functions can be leveraged for performing custom or user defined operations over ""native"" arrays and cell arrays respectively. For example,","['case', 'internal', 'iteration', 'user', 'supply', 'operation', 'iterator', 'perform', 'element', 'collection', 'build', 'operator', 'matlab', 'function', 'overload', 'execute', 'element', 'array', 'return', 'corresponding', 'output', 'array', 'implicitly', 'furthermore', 'arrayfun', 'cellfun', 'function', 'leverage', 'perform', 'custom', 'user', 'define', 'operation', 'native', 'array', 'cell', 'array', 'respectively', 'example']"
2188,defines a primary function simpleFun that implicitly applies custom subfunction myCustomFun to each element of an array using built-in function arrayfun.,"['define', 'primary', 'function', 'simplefun', 'implicitly', 'apply', 'custom', 'subfunction', 'mycustomfun', 'element', 'array', 'build', 'function', 'arrayfun']"
2189,"Alternatively, it may be desirable to abstract the mechanisms of the array storage container from the user by defining a custom object-oriented MATLAB implementation of the Iterator Pattern. Such an implementation supporting external iteration is demonstrated in MATLAB Central File Exchange item Design Pattern: Iterator Behavioral. This is written in the new class-definition syntax introduced with MATLAB software version 7.6 R2008a and features a one-dimensional cell array realization of the List Abstract Data Type ADT as the mechanism for storing a heterogeneous in data type set of elements. It provides the functionality for explicit forward List traversal with the hasNext, next and reset methods for use in a while-loop.","['alternatively', 'desirable', 'abstract', 'mechanism', 'array', 'storage', 'container', 'user', 'define', 'custom', 'object', 'orient', 'matlab', 'implementation', 'iterator', 'pattern', 'implementation', 'support', 'external', 'iteration', 'demonstrate', 'matlab', 'central', 'file', 'exchange', 'item', 'design', 'pattern', 'iterator', 'behavioral', 'write', 'new', 'class', 'definition', 'syntax', 'introduce', 'matlab', 'software', 'version', '7', 'r2008a', 'feature', 'dimensional', 'cell', 'array', 'realization', 'list', 'abstract', 'data', 'type', 'adt', 'mechanism', 'store', 'heterogeneous', 'data', 'type', 'set', 'element', 'provide', 'functionality', 'explicit', 'forward', 'list', 'traversal', 'hasnext', 'reset', 'method', 'use', 'loop']"
2190,"PHP's foreach loop was introduced in version 4.0 and made compatible with objects as values in 4.0 Beta 4.16 However, support for iterators was added in PHP 5 through the introduction of the internal17 Traversable interface.18 The two main interfaces for implementation in PHP scripts that enable objects to be iterated via the foreach loop are Iterator and IteratorAggregate. The latter does not require the implementing class to declare all required methods, instead it implements an accessor method getIterator that returns an instance of Traversable. The Standard PHP Library provides several classes to work with special iterators.19 PHP also supports Generators since 5.5.20","['php', 'foreach', 'loop', 'introduce', 'version', '4', 'compatible', 'object', 'value', '4', 'beta', '4', 'support', 'iterator', 'add', 'php', 'introduction', 'internal17', 'traversable', 'interface', 'main', 'interface', 'implementation', 'php', 'script', 'enable', 'object', 'iterate', 'foreach', 'loop', 'iterator', 'iteratoraggregate', 'require', 'implement', 'class', 'declare', 'require', 'method', 'instead', 'implement', 'accessor', 'method', 'getiterator', 'return', 'instance', 'traversable', 'standard', 'php', 'library', 'provide', 'class', 'work', 'special', 'iterators', 'php', 'support', 'generators', '5']"
2191,"The simplest implementation is by wrapping an array, this can be useful for type hinting and information hiding.","['simple', 'implementation', 'wrap', 'array', 'useful', 'type', 'hinting', 'information', 'hiding']"
2192,All methods of the example class are used during the execution of a complete foreach loop foreach $iterator as $key => $current . The iterator's methods are executed in the following order:,"['method', 'example', 'class', 'execution', 'complete', 'foreach', 'loop', 'foreach', 'iterator', 'key', 'current', 'iterator', 'method', 'execute', 'follow', 'order']"
2193,"The next example illustrates a PHP class that implements the Traversable interface, which could be wrapped in an IteratorIterator class to act upon the data before it is returned to the foreach loop. The usage together with the MYSQLI_USE_RESULT constant allows PHP scripts to iterate result sets with billions of rows with very little memory usage. These features are not exclusive to PHP nor to its MySQL class implementations e.g. the PDOStatement class implements the Traversable interface as well.","['example', 'illustrate', 'php', 'class', 'implement', 'traversable', 'interface', 'wrap', 'iteratoriterator', 'class', 'act', 'datum', 'return', 'foreach', 'loop', 'usage', 'mysqli_use_result', 'constant', 'allow', 'php', 'script', 'iterate', 'result', 'set', 'billion', 'row', 'little', 'memory', 'usage', 'feature', 'exclusive', 'php', 'mysql', 'class', 'implementation', 'e.g.', 'pdostatement', 'class', 'implement', 'traversable', 'interface']"
2194,"Iterators in Python are a fundamental part of the language and in many cases go unseen as they are implicitly used in the for foreach statement, in list comprehensions, and in generator expressions. All of Python's standard built-in collection types support iteration, as well as many classes that are part of the standard library. The following example shows typical implicit iteration over a sequence:","['iterator', 'python', 'fundamental', 'language', 'case', 'unseen', 'implicitly', 'foreach', 'statement', 'list', 'comprehension', 'generator', 'expression', 'python', 'standard', 'build', 'collection', 'type', 'support', 'iteration', 'class', 'standard', 'library', 'follow', 'example', 'show', 'typical', 'implicit', 'iteration', 'sequence']"
2195,"Python dictionaries a form of associative array can also be directly iterated over, when the dictionary keys are returned; or the items method of a dictionary can be iterated over where it yields corresponding key,value pairs as a tuple:","['python', 'dictionarie', 'form', 'associative', 'array', 'directly', 'iterate', 'dictionary', 'key', 'return', 'item', 'method', 'dictionary', 'iterate', 'yield', 'correspond', 'key', 'value', 'pair', 'tuple']"
2196,"Iterators however can be used and defined explicitly. For any iterable sequence type or class, the built-in function iter is used to create an iterator object. The iterator object can then be iterated with the next function, which uses the __next__ method internally, which returns the next element in the container. The previous statement applies to Python 3.x. In Python 2.x, the next method is equivalent. A StopIteration exception will be raised when no more elements are left. The following example shows an equivalent iteration over a sequence using explicit iterators:","['iterator', 'define', 'explicitly', 'iterable', 'sequence', 'type', 'class', 'build', 'function', 'iter', 'create', 'iterator', 'object', 'iterator', 'object', 'iterate', 'function', 'use', 'method', 'internally', 'return', 'element', 'container', 'previous', 'statement', 'apply', 'python', '3.x', 'python', '2.x', 'method', 'equivalent', 'stopiteration', 'exception', 'raise', 'element', 'leave', 'follow', 'example', 'show', 'equivalent', 'iteration', 'sequence', 'explicit', 'iterator']"
2197,Any user-defined class can support standard iteration either implicit or explicit by defining an __iter__ method that returns an iterator object. The iterator object then needs to define a __next__ method that returns the next element.,"['user', 'define', 'class', 'support', 'standard', 'iteration', 'implicit', 'explicit', 'define', 'iter', 'method', 'return', 'iterator', 'object', 'iterator', 'object', 'need', 'define', 'method', 'return', 'element']"
2198,Python's generators implement this iteration protocol.,"['python', 'generator', 'implement', 'iteration', 'protocol']"
2199,"Iterators in Raku are a fundamental part of the language, although usually users don't have to care about iterators. Their usage is hidden behind iteration APIs such as the for statement, map, grep, list indexing with .$idx, etc.","['iterator', 'raku', 'fundamental', 'language', 'usually', 'user', 'care', 'iterator', 'usage', 'hide', 'iteration', 'api', 'statement', 'map', 'grep', 'list', 'indexing', '.$idx', 'etc']"
2200,The following example shows typical implicit iteration over a collection of values:,"['follow', 'example', 'show', 'typical', 'implicit', 'iteration', 'collection', 'value']"
2201,Raku hashes can also be directly iterated over; this yields key-value Pair objects. The kv method can be invoked on the hash to iterate over the key and values; the keys method to iterate over the hash's keys; and the values method to iterate over the hash's values.,"['raku', 'hash', 'directly', 'iterate', 'yield', 'key', 'value', 'pair', 'object', 'method', 'invoke', 'hash', 'iterate', 'key', 'value', 'key', 'method', 'iterate', 'hash', 'key', 'value', 'method', 'iterate', 'hash', 'value']"
2202,"Iterators however can be used and defined explicitly. For any iterable type, there are several methods that control different aspects of the iteration process. For example, the iterator method is supposed to return an Iterator object, and the pull-one method is supposed to produce and return the next value if possible, or return the sentinel value IterationEnd if no more values could be produced. The following example shows an equivalent iteration over a collection using explicit iterators:","['iterator', 'define', 'explicitly', 'iterable', 'type', 'method', 'control', 'different', 'aspect', 'iteration', 'process', 'example', 'iterator', 'method', 'suppose', 'return', 'iterator', 'object', 'pull', 'method', 'suppose', 'produce', 'return', 'value', 'possible', 'return', 'sentinel', 'value', 'iterationend', 'value', 'produce', 'follow', 'example', 'show', 'equivalent', 'iteration', 'collection', 'explicit', 'iterator']"
2203,"All iterable types in Raku compose the Iterable role, Iterator role, or both. The Iterable is quite simple and only requires the iterator to be implemented by the composing class. The Iterator is more complex and provides a series of methods such as pull-one, which allows for a finer operation of iteration in several contexts such as adding or eliminating items, or skipping over them to access other items. Thus, any user-defined class can support standard iteration by composing these roles and implementing the iterator and/or pull-one methods.","['iterable', 'type', 'raku', 'compose', 'iterable', 'role', 'iterator', 'role', 'iterable', 'simple', 'require', 'iterator', 'implement', 'compose', 'class', 'iterator', 'complex', 'provide', 'series', 'method', 'pull', 'allow', 'finer', 'operation', 'iteration', 'context', 'add', 'eliminate', 'item', 'skip', 'access', 'item', 'user', 'define', 'class', 'support', 'standard', 'iteration', 'compose', 'role', 'implement', 'iterator', 'pull', 'method']"
2204,The DNA class represents a DNA strand and implements the iterator by composing the Iterable role. The DNA strand is split into a group of trinucleotides when iterated over:,"['dna', 'class', 'represent', 'dna', 'strand', 'implement', 'iterator', 'compose', 'iterable', 'role', 'dna', 'strand', 'split', 'group', 'trinucleotide', 'iterate']"
2205,The Repeater class composes both the Iterable and Iterator roles:,"['repeater', 'class', 'compose', 'iterable', 'iterator', 'role']"
2206,"Ruby implements iterators quite differently; all iterations are done by means of passing callback closures to container methods - this way Ruby not only implements basic iteration but also several patterns of iteration like function mapping, filters and reducing. Ruby also supports an alternative syntax for the basic iterating method each, the following three examples are equivalent:","['ruby', 'implement', 'iterator', 'differently', 'iteration', 'mean', 'pass', 'callback', 'closure', 'container', 'method', 'way', 'ruby', 'implement', 'basic', 'iteration', 'pattern', 'iteration', 'like', 'function', 'mapping', 'filter', 'reduce', 'ruby', 'support', 'alternative', 'syntax', 'basic', 'iterating', 'method', 'follow', 'example', 'equivalent']"
2207,"Ruby can also iterate over fixed lists by using Enumerators and either calling their #next method or doing a for each on them, as above.","['ruby', 'iterate', 'fix', 'list', 'enumerator', 'call', 'method']"
2208,"With Rust one can iterate on element of vectors, or create own iterators. Each iterator has adapters map, filter, skip, take, ....","['rust', 'iterate', 'element', 'vector', 'create', 'iterator', 'iterator', 'adapter', 'map', 'filter', 'skip']"
2209,Below the fibonacci function returns a custom iterator.,"['fibonacci', 'function', 'return', 'custom', 'iterator']"
2210,"In computing, late binding or dynamic linkage1—though not an identical process to dynamically linking imported code libraries—is a computer programming mechanism in which the method being called upon an object, or the function being called with arguments, is looked up by name at runtime. In other words, a name is associated with a particular operation or object at runtime, rather than during compilation. The name dynamic binding is sometimes used,2 but is more commonly used to refer to dynamic scope.","['computing', 'late', 'binding', 'dynamic', 'linkage1', 'identical', 'process', 'dynamically', 'link', 'import', 'code', 'library', 'computer', 'programming', 'mechanism', 'method', 'call', 'object', 'function', 'call', 'argument', 'look', 'runtime', 'word', 'associate', 'particular', 'operation', 'object', 'runtime', 'compilation', 'dynamic', 'binding', 'used', 'commonly', 'refer', 'dynamic', 'scope']"
2211,"With early binding, or static binding, in an object-oriented language, the compilation phase fixes all types of variables and expressions. This is usually stored in the compiled program as an offset in a virtual method table ""v-table"".3 In contrast, with late binding, the compiler does not read enough information to verify the method exists or bind its slot on the v-table. Instead, the method is looked up by name at runtime.","['early', 'binding', 'static', 'binding', 'object', 'orient', 'language', 'compilation', 'phase', 'fix', 'type', 'variable', 'expression', 'usually', 'store', 'compile', 'program', 'offset', 'virtual', 'method', 'table', 'table', 'contrast', 'late', 'bind', 'compiler', 'read', 'information', 'verify', 'method', 'exist', 'bind', 'slot', 'table', 'instead', 'method', 'look', 'runtime']"
2212,"The primary advantage of using late binding in Component Object Model COM programming is that it does not require the compiler to reference the libraries that contain the object at compile time. This makes the compilation process more resistant to version conflicts, in which the class's v-table may be accidentally modified. This is not a concern in just-in-time compilation-compiled platforms such as .NET or Java, because the v-table is created at runtime by the virtual machine against the libraries as they are being loaded into the running application.4","['primary', 'advantage', 'late', 'binding', 'component', 'object', 'model', 'com', 'programming', 'require', 'compiler', 'reference', 'library', 'contain', 'object', 'compile', 'time', 'make', 'compilation', 'process', 'resistant', 'version', 'conflict', 'class', 'table', 'accidentally', 'modify', 'concern', 'time', 'compilation', 'compile', 'platform', '.net', 'java', 'table', 'create', 'runtime', 'virtual', 'machine', 'library', 'load', 'running', 'application']"
2213,"The term ""late binding"" dates back to at least the 1960s, where it can be found in Communications of the ACM. The term was widely used to describe calling conventions in languages like Lisp, though usually with negative connotations about performance.5","['term', 'late', 'bind', 'date', '1960', 'find', 'communication', 'acm', 'term', 'widely', 'describe', 'call', 'convention', 'language', 'like', 'lisp', 'usually', 'negative', 'connotation', 'performance']"
2214,"In the 1980s Smalltalk popularized object-oriented programming OOP and with it late binding. Alan Kay once said, ""OOP to me means only messaging, local retention, and protection and hiding of state-process, and extreme late-binding of all things. It can be done in Smalltalk and in LISP. There are possibly other systems in which this is possible, but I'm not aware of them.""6","['1980', 'smalltalk', 'popularize', 'object', 'orient', 'programming', 'oop', 'late', 'bind', 'alan', 'kay', 'say', 'oop', 'mean', 'message', 'local', 'retention', 'protection', 'hiding', 'state', 'process', 'extreme', 'late', 'binding', 'thing', 'smalltalk', 'lisp', 'possibly', 'system', 'possible', 'aware']"
2215,"In the early to mid-1990s, Microsoft heavily promoted its COM standard as a binary interface between different OOP programming languages. COM programming equally promoted early and late binding, with many languages supporting both at the syntax level.","['early', 'mid-1990', 'microsoft', 'heavily', 'promote', 'com', 'standard', 'binary', 'interface', 'different', 'oop', 'programming', 'language', 'com', 'programming', 'equally', 'promote', 'early', 'late', 'bind', 'language', 'support', 'syntax', 'level']"
2216,"In 2000, Alex Martelli coined the term ""duck typing"" to refer to a similar concept, but with a different emphasis. While late binding generally focuses on implementation details, duck typing focuses on the ability to ignore types and concentrate on the methods an object currently has.","['2000', 'alex', 'martelli', 'coin', 'term', 'duck', 'typing', 'refer', 'similar', 'concept', 'different', 'emphasis', 'late', 'bind', 'generally', 'focus', 'implementation', 'detail', 'duck', 'typing', 'focus', 'ability', 'ignore', 'type', 'concentrate', 'method', 'object', 'currently']"
2217,"In most dynamically-typed languages, the list of methods on an object can be altered at runtime. This requires late binding.","['dynamically', 'type', 'language', 'list', 'method', 'object', 'alter', 'runtime', 'require', 'late', 'bind']"
2218,"In Lisp, late bound global function calls are efficiently looked up at runtime via a symbol's function cell. These function bindings are mutable.","['lisp', 'late', 'bind', 'global', 'function', 'call', 'efficiently', 'look', 'runtime', 'symbol', 'function', 'cell', 'function', 'binding', 'mutable']"
2219,Example using an interactive Clozure Common Lisp session:,"['example', 'interactive', 'clozure', 'common', 'lisp', 'session']"
2220,"In C++, late binding also called ""dynamic binding"" refers to what normally happens when the virtual keyword is used in a method's declaration. C++ then creates a so-called virtual table, which is a look-up table for such functions that will always be consulted when they are called.7 Usually, the ""late binding"" term is used in favor of ""dynamic dispatch"".","['c++', 'late', 'binding', 'call', 'dynamic', 'binding', 'refer', 'normally', 'happen', 'virtual', 'keyword', 'method', 'declaration', 'c++', 'create', 'call', 'virtual', 'table', 'look', 'table', 'function', 'consult', 'called', 'usually', 'late', 'bind', 'term', 'favor', 'dynamic', 'dispatch']"
2221,In COM programming a late-bound method call is performed using the IDispatch interface. Some COM-based languages such as Visual Basic 6 have syntactical support for calling this interface.8 This is done by defining the variable's type as Object. Others such as C++ require that you explicitly call GetIDsOfNames to look up a method and Invoke to call it.,"['com', 'program', 'late', 'bind', 'method', 'perform', 'idispatch', 'interface', 'com', 'base', 'language', 'visual', 'basic', 'syntactical', 'support', 'call', 'interface', 'define', 'variable', 'type', 'object', 'c++', 'require', 'explicitly', 'getidsofname', 'look', 'method', 'invoke']"
2222,"In .NET, late binding refers to overriding a virtual method like C++ or implementing an interface. The compiler builds virtual tables for every virtual or interface method call which is used at run-time to determine the implementation to execute.","['.net', 'late', 'bind', 'refer', 'override', 'virtual', 'method', 'like', 'c++', 'implement', 'interface', 'compiler', 'build', 'virtual', 'table', 'virtual', 'interface', 'method', 'run', 'time', 'determine', 'implementation', 'execute']"
2223,"Also like COM and Java, the Common Language Runtime provides reflection APIs that can make late binding calls. The use of these calls varies by language.","['like', 'com', 'java', 'common', 'language', 'runtime', 'provide', 'reflection', 'api', 'late', 'bind', 'call', 'use', 'call', 'vary', 'language']"
2224,"With C# 4, the language also added the ""dynamic"" pseudo-type. This would be used in place of the Object type to indicate that late binding is desired. The specific late binding mechanism needed is determined at runtime using the Dynamic Language Runtime as a starting point.","['language', 'add', 'dynamic', 'pseudo', 'type', 'place', 'object', 'type', 'indicate', 'late', 'binding', 'desire', 'specific', 'late', 'binding', 'mechanism', 'need', 'determine', 'runtime', 'dynamic', 'language', 'runtime', 'starting', 'point']"
2225,"Visual Basic uses them whenever the variable is of type Object and the compiler directive ""Option Strict Off"" is in force. This is the default setting for a new VB project. Prior to version 9, only .NET and COM objects could be late bound. With VB 10, this has been extended to DLR-based objects.","['visual', 'basic', 'use', 'variable', 'type', 'object', 'compiler', 'directive', 'option', 'strict', 'force', 'default', 'setting', 'new', 'project', 'prior', 'version', '.net', 'com', 'object', 'late', 'bind', 'extend', 'dlr', 'base', 'object']"
2226,There are three definitions for late binding in Java.,"['definition', 'late', 'binding', 'java']"
2227,"Early documents on Java discussed how classes were not linked together at compile time. While types are statically checked at compile time, different implementations for classes could be swapped out just prior to runtime simply by overwriting the class file. As long as the new class definition had the same class and method names, the code would still work. In this sense it is similar to the traditional definition of late binding.","['early', 'document', 'java', 'discuss', 'class', 'link', 'compile', 'time', 'type', 'statically', 'check', 'compile', 'time', 'different', 'implementation', 'class', 'swap', 'prior', 'runtime', 'simply', 'overwrite', 'class', 'file', 'long', 'new', 'class', 'definition', 'class', 'method', 'name', 'code', 'work', 'sense', 'similar', 'traditional', 'definition', 'late', 'bind']"
2228,"Currently, it is popular to use the term late binding in Java programming as a synonym for dynamic dispatch. Specifically, this refers to Java's single dispatch mechanism used with virtual methods.","['currently', 'popular', 'use', 'term', 'late', 'bind', 'java', 'programming', 'synonym', 'dynamic', 'dispatch', 'specifically', 'refer', 'java', 'single', 'dispatch', 'mechanism', 'virtual', 'method']"
2229,"Finally, Java can use late binding using its reflection APIs and type introspection much in the same way it is done in COM and .NET programming. Generally speaking those who only program in Java do not call this late binding. Likewise the use of ""duck typing"" techniques is frowned upon in Java programming, with abstract interfaces used instead.","['finally', 'java', 'use', 'late', 'binding', 'reflection', 'api', 'type', 'introspection', 'way', 'com', '.net', 'programming', 'generally', 'speak', 'program', 'java', 'late', 'bind', 'likewise', 'use', 'duck', 'typing', 'technique', 'frown', 'java', 'programming', 'abstract', 'interface', 'instead']"
2230,"Oracle, the current owner of Java, has been known to use the term late binding in the ""duck typing"" sense when discussing both Java and other languages in the same documentation.9","['oracle', 'current', 'owner', 'java', 'know', 'use', 'term', 'late', 'bind', 'duck', 'typing', 'sense', 'discuss', 'java', 'language', 'documentation']"
2231,"When using early binding between Ada and a database-stored procedure, a timestamp is checked to verify that the stored procedure has not changed since the code was compiled. This allows for faster executions and prevents the application from running against the wrong version of a stored procedure.10","['early', 'binding', 'ada', 'database', 'store', 'procedure', 'timestamp', 'check', 'verify', 'store', 'procedure', 'change', 'code', 'compile', 'allow', 'fast', 'execution', 'prevent', 'application', 'run', 'wrong', 'version', 'store', 'procedure']"
2232,"When using late binding the timestamp check is not performed, and the stored procedure is executed via an anonymous PL/SQL block. While this can be slower, it removes the need to recompile all of the client applications when a stored procedure changes.","['late', 'bind', 'timestamp', 'check', 'perform', 'stored', 'procedure', 'execute', 'anonymous', 'sql', 'block', 'slow', 'remove', 'need', 'recompile', 'client', 'application', 'store', 'procedure', 'change']"
2233,"This distinction appears to be unique to PL/SQL and Ada. Other languages that can call PL/SQL procedures, as well as other database engines, only use late binding.","['distinction', 'appear', 'unique', 'sql', 'ada', 'language', 'sql', 'procedure', 'database', 'engine', 'use', 'late', 'bind']"
2234,"Late binding has poorer performance than an early bound method call. Under most implementations, the correct method address must be looked up by name with each call, requiring relatively expensive dictionary search and possibly overload resolution logic, yet it is generally negligible on modern computers.","['late', 'binding', 'poor', 'performance', 'early', 'bind', 'method', 'implementation', 'correct', 'method', 'address', 'look', 'require', 'relatively', 'expensive', 'dictionary', 'search', 'possibly', 'overload', 'resolution', 'logic', 'generally', 'negligible', 'modern', 'computer']"
2235,"For some compilers, late binding may prevent the use of static type checking. When making a late bound call, the compiler has to assume that the method exists. This means a simple spelling error can cause a run-time error to be thrown. The exact exception varies by language, but it is usually named something like ""Method Not Found"" or ""Method Missing"". Modern compilers avoid this by ensuring that every possible call must have an implementation during compilation.","['compiler', 'late', 'binding', 'prevent', 'use', 'static', 'type', 'checking', 'make', 'late', 'bind', 'compiler', 'assume', 'method', 'exist', 'mean', 'simple', 'spelling', 'error', 'cause', 'run', 'time', 'error', 'throw', 'exact', 'exception', 'vary', 'language', 'usually', 'name', 'like', 'method', 'find', 'method', 'missing', 'modern', 'compiler', 'avoid', 'ensure', 'possible', 'implementation', 'compilation']"
2236,"Late binding may prevent forms of static analysis needed by an integrated development environment IDE. For example, an IDE's ""go to definition"" feature may not function on a late-bound call, if the IDE has no way to know which class the call may refer to. A modern IDE easily solves this especially for object-oriented languages since a late-bound method always specifies an interface or base class, which is where ""go to definition"" leads, and ""find all references"" can be used to find all implementations or overrides.","['late', 'bind', 'prevent', 'form', 'static', 'analysis', 'need', 'integrate', 'development', 'environment', 'ide', 'example', 'ide', 'definition', 'feature', 'function', 'late', 'bind', 'ide', 'way', 'know', 'class', 'refer', 'modern', 'ide', 'easily', 'solve', 'especially', 'object', 'orient', 'language', 'late', 'bind', 'method', 'specify', 'interface', 'base', 'class', 'definition', 'lead', 'find', 'reference', 'find', 'implementation', 'override']"
2237,"A similar problem is that possible lack of typing information may prevent the creation of dependency graphs. However, other programming methods such as abstract interfaces can result in the same problems. A modern IDE can create such dependency graphs as easily as it handles ""find all references"".","['similar', 'problem', 'possible', 'lack', 'type', 'information', 'prevent', 'creation', 'dependency', 'graph', 'programming', 'method', 'abstract', 'interface', 'result', 'problem', 'modern', 'ide', 'create', 'dependency', 'graph', 'easily', 'handles', 'find', 'reference']"
2238,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2239,"The Liskov substitution principle LSP is a particular definition of a subtyping relation, called strong behavioral subtyping, that was initially introduced by Barbara Liskov in a 1987 conference keynote address titled Data abstraction and hierarchy. It is based on the concept of ""substitutability"" – a principle in object-oriented programming stating that an object such as a class may be replaced by a sub-object such as a class that extends the first class without breaking the program. It is a semantic rather than merely syntactic relation, because it intends to guarantee semantic interoperability of types in a hierarchy, object types in particular. Barbara Liskov and Jeannette Wing described the principle succinctly in a 1994 paper as follows:1","['liskov', 'substitution', 'principle', 'lsp', 'particular', 'definition', 'subtype', 'relation', 'call', 'strong', 'behavioral', 'subtyping', 'initially', 'introduce', 'barbara', 'liskov', '1987', 'conference', 'keynote', 'address', 'title', 'data', 'abstraction', 'hierarchy', 'base', 'concept', 'substitutability', 'principle', 'object', 'orient', 'programming', 'state', 'object', 'class', 'replace', 'sub', 'object', 'class', 'extend', 'class', 'break', 'program', 'semantic', 'merely', 'syntactic', 'relation', 'intend', 'guarantee', 'semantic', 'interoperability', 'type', 'hierarchy', 'object', 'type', 'particular', 'barbara', 'liskov', 'jeannette', 'wing', 'describe', 'principle', 'succinctly', '1994', 'paper', 'follows']"
2240,Subtype Requirement: Let ϕ x \displaystyle \phi x be a property provable about objects x \displaystyle x of type T. Then ϕ y \displaystyle \phi y should be true for objects y \displaystyle y of type S where S is a subtype of T.,"['subtype', 'requirement', 'let', 'property', 'provable', 'object', 'type', 'true', 'object', 'type', 'subtype']"
2241,"That is, if S subtypes T, what holds for T-objects holds for S-objects. In the same paper, Liskov and Wing detailed their notion of behavioral subtyping in an extension of Hoare logic, which bears a certain resemblance to Bertrand Meyer's design by contract in that it considers the interaction of subtyping with preconditions, postconditions and invariants.","['subtype', 'hold', 'object', 'hold', 'object', 'paper', 'liskov', 'wing', 'detail', 'notion', 'behavioral', 'subtype', 'extension', 'hoare', 'logic', 'bear', 'certain', 'resemblance', 'bertrand', 'meyer', 'design', 'contract', 'consider', 'interaction', 'subtype', 'precondition', 'postcondition', 'invariant']"
2242,"Liskov's notion of a behavioural subtype defines a notion of substitutability for objects; that is, if S is a subtype of T, then objects of type T in a program may be replaced with objects of type S without altering any of the desirable properties of that program e.g. correctness.","['liskov', 'notion', 'behavioural', 'subtype', 'define', 'notion', 'substitutability', 'object', 'subtype', 'object', 'type', 'program', 'replace', 'object', 'type', 'alter', 'desirable', 'property', 'program', 'e.g.', 'correctness']"
2243,"Behavioural subtyping is a stronger notion than typical subtyping of functions defined in type theory, which relies only on the contravariance of parameter types and covariance of the return type. Behavioural subtyping is undecidable in general: if q is the property ""method for x always terminates"", then it is impossible for a program e.g. a compiler to verify that it holds true for some subtype S of T, even if q does hold for T. Nonetheless, the principle is useful in reasoning about the design of class hierarchies.","['behavioural', 'subtype', 'strong', 'notion', 'typical', 'subtyping', 'function', 'define', 'type', 'theory', 'rely', 'contravariance', 'parameter', 'type', 'covariance', 'return', 'type', 'behavioural', 'subtype', 'undecidable', 'general', 'property', 'method', 'terminate', 'impossible', 'program', 'e.g.', 'compiler', 'verify', 'hold', 'true', 'subtype', 'hold', 'nonetheless', 'principle', 'useful', 'reasoning', 'design', 'class', 'hierarchy']"
2244,Liskov substitution principle imposes some standard requirements on signatures that have been adopted in newer object-oriented programming languages usually at the level of classes rather than types; see nominal vs. structural subtyping for the distinction:,"['liskov', 'substitution', 'principle', 'impose', 'standard', 'requirement', 'signature', 'adopt', 'new', 'object', 'orient', 'programming', 'language', 'usually', 'level', 'class', 'type', 'nominal', 'vs.', 'structural', 'subtype', 'distinction']"
2245,"In addition to the signature requirements, the subtype must meet a number of behavioural conditions. These are detailed in a terminology resembling that of design by contract methodology, leading to some restrictions on how contracts can interact with inheritance:","['addition', 'signature', 'requirement', 'subtype', 'meet', 'number', 'behavioural', 'condition', 'detail', 'terminology', 'resemble', 'design', 'contract', 'methodology', 'lead', 'restriction', 'contract', 'interact', 'inheritance']"
2246,"The rules on pre- and postconditions are identical to those introduced by Bertrand Meyer in his 1988 book Object-Oriented Software Construction. Both Meyer, and later Pierre America, who was the first to use the term behavioral subtyping, gave proof-theoretic definitions of some behavioral subtyping notions, but their definitions did not take into account aliasing that may occur in programming languages that support references or pointers. Taking aliasing into account was the major improvement made by Liskov and Wing 1994, and a key ingredient is the history constraint. Under the definitions of Meyer and America, a mutable point would be a behavioral subtype of an immutable point, whereas Liskov substitution principle forbids this.","['rule', 'pre-', 'postcondition', 'identical', 'introduce', 'bertrand', 'meyer', '1988', 'book', 'object', 'oriented', 'software', 'construction', 'meyer', 'later', 'pierre', 'america', 'use', 'term', 'behavioral', 'subtyping', 'give', 'proof', 'theoretic', 'definition', 'behavioral', 'subtype', 'notion', 'definition', 'account', 'aliasing', 'occur', 'programming', 'language', 'support', 'reference', 'pointer', 'take', 'aliase', 'account', 'major', 'improvement', 'liskov', 'wing', '1994', 'key', 'ingredient', 'history', 'constraint', 'definition', 'meyer', 'america', 'mutable', 'point', 'behavioral', 'subtype', 'immutable', 'point', 'liskov', 'substitution', 'principle', 'forbid']"
2247,"While widely used, the characterization of behavioral subtyping as the ability to substitute subtype objects for supertype objects has been said to be flawedcitation needed. It makes no mention of specifications, so it invites an incorrect reading where the implementation of the supertype is compared to the implementation of the subtype. This is problematic for several reasons, one being that it does not support the common case where the supertype is abstract and has no implementation. Also, more subtly, in the context of object-oriented imperative programming it is difficult to define precisely what it means to universally or existentially quantify over objects of a given type, or to substitute one object for another.2 When applying subtyping, generally we are not substituting subtype objects for supertype objects, we are simply using subtype objects as supertype objects. That is, it is the same objects, the subtype objects, that are also supertype objects.","['widely', 'characterization', 'behavioral', 'subtype', 'ability', 'substitute', 'subtype', 'object', 'supertype', 'object', 'say', 'flawedcitation', 'need', 'make', 'mention', 'specification', 'invite', 'incorrect', 'reading', 'implementation', 'supertype', 'compare', 'implementation', 'subtype', 'problematic', 'reason', 'support', 'common', 'case', 'supertype', 'abstract', 'implementation', 'subtly', 'context', 'object', 'orient', 'imperative', 'programming', 'difficult', 'define', 'precisely', 'mean', 'universally', 'existentially', 'quantify', 'object', 'give', 'type', 'substitute', 'object', 'another', 'apply', 'subtype', 'generally', 'substitute', 'subtype', 'object', 'supertype', 'object', 'simply', 'subtype', 'object', 'supertype', 'object', 'object', 'subtype', 'object', 'supertype', 'object']"
2248,"In an interview in 2016, Liskov herself explains that what she presented in her keynote address was an ""informal rule"", that Jeannette Wing later proposed that they ""try to figure out precisely what this means"", which led to their joint publication1 on behavioral subtyping, and indeed that ""technically, it's called behavioral subtyping"".3 During the interview, she does not use substitution terminology to discuss the concepts.","['interview', '2016', 'liskov', 'explain', 'present', 'keynote', 'address', 'informal', 'rule', 'jeannette', 'wing', 'later', 'propose', 'try', 'figure', 'precisely', 'mean', 'lead', 'joint', 'publication1', 'behavioral', 'subtyping', 'technically', 'call', 'behavioral', 'subtyping', 'interview', 'use', 'substitution', 'terminology', 'discuss', 'concept']"
2249,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2250,"In object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state member variables and implementations of behavior member functions or methods.12 In many languages, the class name is used as the name for the class the template itself, the name for the default constructor of the class a subroutine that creates objects, and as the type of objects generated by instantiating the class; these distinct concepts are easily conflated.2 Although, to the point of conflation, one could argue that is a feature inherent in a language because of its polymorphic nature and why these languages are so powerful, dynamic and adaptable for use compared to languages without polymorphism present. Thus they can model dynamic systems i.e. the real world, machine learning, AI more easily.","['object', 'orient', 'programming', 'class', 'extensible', 'program', 'code', 'template', 'create', 'object', 'provide', 'initial', 'value', 'state', 'member', 'variable', 'implementation', 'behavior', 'member', 'function', 'methods', 'language', 'class', 'class', 'template', 'default', 'constructor', 'class', 'subroutine', 'create', 'object', 'type', 'object', 'generate', 'instantiate', 'class', 'distinct', 'concept', 'easily', 'conflated', 'point', 'conflation', 'argue', 'feature', 'inherent', 'language', 'polymorphic', 'nature', 'language', 'powerful', 'dynamic', 'adaptable', 'use', 'compare', 'language', 'polymorphism', 'present', 'model', 'dynamic', 'system', 'i.e.', 'real', 'world', 'machine', 'learning', 'easily']"
2251,"When an object is created by a constructor of the class, the resulting object is called an instance of the class, and the member variables specific to the object are called instance variables, to contrast with the class variables shared across the class.","['object', 'create', 'constructor', 'class', 'result', 'object', 'call', 'instance', 'class', 'member', 'variable', 'specific', 'object', 'call', 'instance', 'variable', 'contrast', 'class', 'variable', 'share', 'class']"
2252,"In certain languages, classes are, as a matter of fact, only a compile-time feature new classes cannot be declared at run-time, while in other languages classes are first-class citizens, and are generally themselves objects typically of type .mw-parser-output .monospacedfont-family:monospace,monospaceClass or similar. In these languages, a class that creates classes within itself is called a metaclass.","['certain', 'language', 'class', 'matter', 'fact', 'compile', 'time', 'feature', 'new', 'class', 'declare', 'run', 'time', 'language', 'class', 'class', 'citizen', 'generally', 'object', 'typically', 'type', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospaceclass', 'similar', 'language', 'class', 'create', 'class', 'call', 'metaclass']"
2253,"In its most casual usage, people often refer to the ""class"" of an object, but narrowly speaking objects have type: the interface, namely the types of member variables, the signatures of member functions methods, and properties these satisfy. At the same time, a class has an implementation specifically the implementation of the methods, and can create objects of a given type, with a given implementation.3 In the terms of type theory, a class is an implementation‍—‌a concrete data structure and collection of subroutines‍—‌while a type is an interface. Different concrete classes can produce objects of the same abstract type depending on type system; for example, the type Stack might be implemented with two classes – SmallStack fast for small stacks, but scales poorly and ScalableStack scales well but high overhead for small stacks. Similarly, a given class may have several different constructors.","['casual', 'usage', 'people', 'refer', 'class', 'object', 'narrowly', 'speak', 'object', 'type', 'interface', 'type', 'member', 'variable', 'signature', 'member', 'function', 'method', 'property', 'satisfy', 'time', 'class', 'implementation', 'specifically', 'implementation', 'method', 'create', 'object', 'give', 'type', 'give', 'implementation', 'term', 'type', 'theory', 'class', 'implementation\u200d—\u200ca', 'concrete', 'data', 'structure', 'collection', 'subroutines\u200d—\u200cwhile', 'type', 'interface', 'different', 'concrete', 'class', 'produce', 'object', 'abstract', 'type', 'depend', 'type', 'system', 'example', 'type', 'stack', 'implement', 'class', 'smallstack', 'fast', 'small', 'stack', 'scale', 'poorly', 'scalablestack', 'scale', 'high', 'overhead', 'small', 'stack', 'similarly', 'give', 'class', 'different', 'constructor']"
2254,"Class types generally represent nouns, such as a person, place or thing, or something nominalized, and a class represents an implementation of these. For example, a Banana type might represent the properties and functionality of bananas in general, while the ABCBanana and XYZBanana classes would represent ways of producing bananas say, banana suppliers or data structures and functions to represent and draw bananas in a video game. The ABCBanana class could then produce particular bananas: instances of the ABCBanana class would be objects of type Banana. Often only a single implementation of a type is given, in which case the class name is often identical with the type name.","['class', 'type', 'generally', 'represent', 'noun', 'person', 'place', 'thing', 'nominalize', 'class', 'represent', 'implementation', 'example', 'banana', 'type', 'represent', 'property', 'functionality', 'banana', 'general', 'abcbanana', 'xyzbanana', 'class', 'represent', 'way', 'produce', 'banana', 'banana', 'supplier', 'datum', 'structure', 'function', 'represent', 'draw', 'banana', 'video', 'game', 'abcbanana', 'class', 'produce', 'particular', 'banana', 'instance', 'abcbanana', 'class', 'object', 'type', 'banana', 'single', 'implementation', 'type', 'give', 'case', 'class', 'identical', 'type']"
2255,"Classes are composed from structural and behavioral constituents.1 Programming languages that include classes as a programming construct offer support, for various class-related features, and the syntax required to use these features varies greatly from one programming language to another.","['class', 'compose', 'structural', 'behavioral', 'constituents', 'programming', 'language', 'include', 'class', 'programming', 'construct', 'offer', 'support', 'class', 'relate', 'feature', 'syntax', 'require', 'use', 'feature', 'vary', 'greatly', 'programming', 'language']"
2256,"A class contains data field descriptions or properties, fields, data members, or attributes. These are usually field types and names that will be associated with state variables at program run time; these state variables either belong to the class or specific instances of the class. In most languages, the structure defined by the class determines the layout of the memory used by its instances. Other implementations are possible: for example, objects in Python use associative key-value containers.4","['class', 'contain', 'data', 'field', 'description', 'property', 'field', 'datum', 'member', 'attribute', 'usually', 'field', 'type', 'name', 'associate', 'state', 'variable', 'program', 'run', 'time', 'state', 'variable', 'belong', 'class', 'specific', 'instance', 'class', 'language', 'structure', 'define', 'class', 'determine', 'layout', 'memory', 'instance', 'implementation', 'possible', 'example', 'object', 'python', 'use', 'associative', 'key', 'value', 'containers']"
2257,"Some programming languages such as Eiffel support specification of invariants as part of the definition of the class, and enforce them through the type system. Encapsulation of state is necessary for being able to enforce the invariants of the class.","['programming', 'language', 'eiffel', 'support', 'specification', 'invariant', 'definition', 'class', 'enforce', 'type', 'system', 'encapsulation', 'state', 'necessary', 'able', 'enforce', 'invariant', 'class']"
2258,"The behavior of class or its instances is defined using methods. Methods are subroutines with the ability to operate on objects or classes. These operations may alter the state of an object or simply provide ways of accessing it.5 Many kinds of methods exist, but support for them varies across languages. Some types of methods are created and called by programmer code, while other special methods—such as constructors, destructors, and conversion operators—are created and called by compiler-generated code. A language may also allow the programmer to define and call these special methods.67","['behavior', 'class', 'instance', 'define', 'method', 'method', 'subroutine', 'ability', 'operate', 'object', 'class', 'operation', 'alter', 'state', 'object', 'simply', 'provide', 'way', 'access', 'it', 'kind', 'method', 'exist', 'support', 'vary', 'language', 'type', 'method', 'create', 'call', 'programmer', 'code', 'special', 'method', 'constructor', 'destructor', 'conversion', 'operator', 'create', 'call', 'compiler', 'generate', 'code', 'language', 'allow', 'programmer', 'define', 'special', 'methods']"
2259,"Every class implements or realizes an interface by providing structure and behavior. Structure consists of data and state, and behavior consists of code that specifies how methods are implemented.8 There is a distinction between the definition of an interface and the implementation of that interface; however, this line is blurred in many programming languages because class declarations both define and implement an interface. Some languages, however, provide features that separate interface and implementation. For example, an abstract class can define an interface without providing implementation.","['class', 'implement', 'realize', 'interface', 'provide', 'structure', 'behavior', 'structure', 'consist', 'datum', 'state', 'behavior', 'consist', 'code', 'specify', 'method', 'implemented', 'distinction', 'definition', 'interface', 'implementation', 'interface', 'line', 'blur', 'programming', 'language', 'class', 'declaration', 'define', 'implement', 'interface', 'language', 'provide', 'feature', 'separate', 'interface', 'implementation', 'example', 'abstract', 'class', 'define', 'interface', 'provide', 'implementation']"
2260,Languages that support class inheritance also allow classes to inherit interfaces from the classes that they are derived from.,"['language', 'support', 'class', 'inheritance', 'allow', 'class', 'inherit', 'interface', 'class', 'derive']"
2261,"For example, if ""class A"" inherits from ""class B"" and if ""class B"" implements the interface ""interface B"" then ""class A"" also inherits the functionalityconstants and methods declaration provided by ""interface B"".","['example', 'class', 'inherit', 'class', 'class', 'implement', 'interface', 'interface', 'class', 'inherit', 'functionalityconstant', 'method', 'declaration', 'provide', 'interface']"
2262,"In languages that support access specifiers, the interface of a class is considered to be the set of public members of the class, including both methods and attributes via implicit getter and setter methods; any private members or internal data structures are not intended to be depended on by external code and thus are not part of the interface.","['language', 'support', 'access', 'specifier', 'interface', 'class', 'consider', 'set', 'public', 'member', 'class', 'include', 'method', 'attribute', 'implicit', 'getter', 'setter', 'method', 'private', 'member', 'internal', 'datum', 'structure', 'intend', 'depend', 'external', 'code', 'interface']"
2263,Object-oriented programming methodology dictates that the operations of any interface of a class are to be independent of each other. It results in a layered design where clients of an interface use the methods declared in the interface. An interface places no requirements for clients to invoke the operations of one interface in any particular order. This approach has the benefit that client code can assume that the operations of an interface are available for use whenever the client has access to the object.9citation needed,"['object', 'orient', 'programming', 'methodology', 'dictate', 'operation', 'interface', 'class', 'independent', 'result', 'layered', 'design', 'client', 'interface', 'use', 'method', 'declare', 'interface', 'interface', 'place', 'requirement', 'client', 'invoke', 'operation', 'interface', 'particular', 'order', 'approach', 'benefit', 'client', 'code', 'assume', 'operation', 'interface', 'available', 'use', 'client', 'access', 'objectcitation', 'need']"
2264,"The buttons on the front of your television set are the interface between you and the electrical wiring on the other side of its plastic casing. You press the ""power"" button to toggle the television on and off. In this example, your particular television is the instance, each method is represented by a button, and all the buttons together compose the interface other television sets that are the same model as yours would have the same interface. In its most common form, an interface is a specification of a group of related methods without any associated implementation of the methods.","['button', 'television', 'set', 'interface', 'electrical', 'wiring', 'plastic', 'casing', 'press', 'power', 'button', 'toggle', 'television', 'example', 'particular', 'television', 'instance', 'method', 'represent', 'button', 'button', 'compose', 'interface', 'television', 'set', 'model', 'interface', 'common', 'form', 'interface', 'specification', 'group', 'related', 'method', 'associate', 'implementation', 'method']"
2265,"A television set also has a myriad of attributes, such as size and whether it supports colour, which together comprise its structure. A class represents the full description of a television, including its attributes structure and buttons interface.","['television', 'set', 'myriad', 'attribute', 'size', 'support', 'colour', 'comprise', 'structure', 'class', 'represent', 'description', 'television', 'include', 'attribute', 'structure', 'button', 'interface']"
2266,"Getting the total number of televisions manufactured could be a static method of the television class. This method is clearly associated with the class, yet is outside the domain of each individual instance of the class. A static method that finds a particular instance out of the set of all television objects is another example.","['get', 'total', 'number', 'television', 'manufacture', 'static', 'method', 'television', 'class', 'method', 'clearly', 'associate', 'class', 'outside', 'domain', 'individual', 'instance', 'class', 'static', 'method', 'find', 'particular', 'instance', 'set', 'television', 'object', 'example']"
2267,The following is a common set of access specifiers:10,"['follow', 'common', 'set', 'access', 'specifiers']"
2268,"Although many object-oriented languages support the above access specifiers, their semantics may differ.","['object', 'orient', 'language', 'support', 'access', 'specifier', 'semantic', 'differ']"
2269,"Object-oriented design uses the access specifiers in conjunction with careful design of public method implementations to enforce class invariants—constraints on the state of the objects. A common usage of access specifiers is to separate the internal data of a class from its interface: the internal structure is made private, while public accessor methods can be used to inspect or alter such private data.","['object', 'orient', 'design', 'use', 'access', 'specifier', 'conjunction', 'careful', 'design', 'public', 'method', 'implementation', 'enforce', 'class', 'invariant', 'constraint', 'state', 'object', 'common', 'usage', 'access', 'specifier', 'separate', 'internal', 'datum', 'class', 'interface', 'internal', 'structure', 'private', 'public', 'accessor', 'method', 'inspect', 'alter', 'private', 'datum']"
2270,"Access specifiers do not necessarily control visibility, in that even private members may be visible to client external code. In some languages, an inaccessible but visible member may be referred to at run-time for example, by a pointer returned from a member function, but an attempt to use it by referring to the name of the member from client code will be prevented by the type checker.11","['access', 'specifier', 'necessarily', 'control', 'visibility', 'private', 'member', 'visible', 'client', 'external', 'code', 'language', 'inaccessible', 'visible', 'member', 'refer', 'run', 'time', 'example', 'pointer', 'return', 'member', 'function', 'attempt', 'use', 'refer', 'member', 'client', 'code', 'prevent', 'type', 'checker']"
2271,"The various object-oriented programming languages enforce member accessibility and visibility to various degrees, and depending on the language's type system and compilation policies, enforced at either compile-time or run-time. For example, the Java language does not allow client code that accesses the private data of a class to compile. 12 In the C++ language, private methods are visible, but not accessible in the interface; however, they may be made invisible by explicitly declaring fully abstract classes that represent the interfaces of the class.13","['object', 'orient', 'programming', 'language', 'enforce', 'member', 'accessibility', 'visibility', 'degree', 'depend', 'language', 'type', 'system', 'compilation', 'policy', 'enforce', 'compile', 'time', 'run', 'time', 'example', 'java', 'language', 'allow', 'client', 'code', 'access', 'private', 'datum', 'class', 'compile', 'c++', 'language', 'private', 'method', 'visible', 'accessible', 'interface', 'invisible', 'explicitly', 'declare', 'fully', 'abstract', 'class', 'represent', 'interface', 'class']"
2272,Some languages feature other accessibility schemes:,"['language', 'feature', 'accessibility', 'scheme']"
2273,"In addition to the design of standalone classes, programming languages may support more advanced class design based upon relationships between classes. The inter-class relationship design capabilities commonly provided are compositional and hierarchical.","['addition', 'design', 'standalone', 'class', 'programming', 'language', 'support', 'advanced', 'class', 'design', 'base', 'relationship', 'class', 'inter', 'class', 'relationship', 'design', 'capability', 'commonly', 'provide', 'compositional', 'hierarchical']"
2274,"Classes can be composed of other classes, thereby establishing a compositional relationship between the enclosing class and its embedded classes. Compositional relationship between classes is also commonly known as a has-a relationship.16 For example, a class ""Car"" could be composed of and contain a class ""Engine"". Therefore, a Car has an Engine. One aspect of composition is containment, which is the enclosure of component instances by the instance that has them. If an enclosing object contains component instances by value, the components and their enclosing object have a similar lifetime. If the components are contained by reference, they may not have a similar lifetime.17 For example, in Objective-C 2.0:","['class', 'compose', 'class', 'establish', 'compositional', 'relationship', 'enclose', 'class', 'embed', 'class', 'compositional', 'relationship', 'class', 'commonly', 'know', 'relationship', 'example', 'class', 'car', 'compose', 'contain', 'class', 'engine', 'car', 'engine', 'aspect', 'composition', 'containment', 'enclosure', 'component', 'instance', 'instance', 'enclose', 'object', 'contain', 'component', 'instance', 'value', 'component', 'enclose', 'object', 'similar', 'lifetime', 'component', 'contain', 'reference', 'similar', 'lifetime', 'example', 'objective', '2']"
2275,"This Car class has an instance of NSString a string object, Engine, and NSArray an array object.","['car', 'class', 'instance', 'nsstring', 'string', 'object', 'engine', 'nsarray', 'array', 'object']"
2276,"Classes can be derived from one or more existing classes, thereby establishing a hierarchical relationship between the derived-from classes base classes, parent classes or .mw-parser-output .vanchor>:target~.vanchor-textbackground-color:#b1d2ffsuperclasses and the derived class child class or subclass . The relationship of the derived class to the derived-from classes is commonly known as an is-a relationship.18 For example, a class 'Button' could be derived from a class 'Control'. Therefore, a Button is a Control. Structural and behavioral members of the parent classes are inherited by the child class. Derived classes can define additional structural members data fields and behavioral members methods in addition to those that they inherit and are therefore specializations of their superclasses. Also, derived classes can override inherited methods if the language allows.","['class', 'derive', 'exist', 'class', 'establish', 'hierarchical', 'relationship', 'derive', 'class', 'base', 'class', 'parent', 'class', '.mw', 'parser', 'output', '.vanchor>:target~.vanchor', 'textbackground', 'color:#b1d2ffsuperclasse', 'derive', 'class', 'child', 'class', 'subclass', 'relationship', 'derive', 'class', 'derive', 'class', 'commonly', 'know', 'relationship', 'example', 'class', 'button', 'derive', 'class', 'control', 'button', 'control', 'structural', 'behavioral', 'member', 'parent', 'class', 'inherit', 'child', 'class', 'derive', 'class', 'define', 'additional', 'structural', 'member', 'datum', 'field', 'behavioral', 'member', 'method', 'addition', 'inherit', 'specialization', 'superclass', 'derive', 'class', 'override', 'inherit', 'method', 'language', 'allow']"
2277,"Not all languages support multiple inheritance. For example, Java allows a class to implement multiple interfaces, but only inherit from one class.19 If multiple inheritance is allowed, the hierarchy is a directed acyclic graph or DAG for short, otherwise it is a tree. The hierarchy has classes as nodes and inheritance relationships as links. Classes in the same level are more likely to be associated than classes in different levels. The levels of this hierarchy are called layers or levels of abstraction.","['language', 'support', 'multiple', 'inheritance', 'example', 'java', 'allow', 'class', 'implement', 'multiple', 'interface', 'inherit', 'class', 'multiple', 'inheritance', 'allow', 'hierarchy', 'directed', 'acyclic', 'graph', 'dag', 'short', 'tree', 'hierarchy', 'class', 'node', 'inheritance', 'relationship', 'link', 'class', 'level', 'likely', 'associate', 'class', 'different', 'level', 'level', 'hierarchy', 'call', 'layer', 'level', 'abstraction']"
2278,"Example Simplified Objective-C 2.0 code, from iPhone SDK:","['example', 'simplified', 'objective', '2', 'code', 'iphone', 'sdk']"
2279,"In this example, a UITableView is a UIScrollView is a UIView is a UIResponder is an NSObject.","['example', 'uitableview', 'uiscrollview', 'uiview', 'uiresponder', 'nsobject']"
2280,"Conceptually, a superclass is a superset of its subclasses. For example, a common class hierarchy would involve GraphicObject as a superclass of Rectangle and Ellipse, while Square would be a subclass of Rectangle. These are all subset relations in set theory as well, i.e., all squares are rectangles but not all rectangles are squares.","['conceptually', 'superclass', 'superset', 'subclass', 'example', 'common', 'class', 'hierarchy', 'involve', 'graphicobject', 'superclass', 'rectangle', 'ellipse', 'square', 'subclass', 'rectangle', 'subset', 'relation', 'set', 'theory', 'i.e.', 'square', 'rectangle', 'rectangle', 'square']"
2281,"A common conceptual error is to mistake a part of relation with a subclass. For example, a car and truck are both kinds of vehicles and it would be appropriate to model them as subclasses of a vehicle class. However, it would be an error to model the component parts of the car as subclass relations. For example, a car is composed of an engine and body, but it would not be appropriate to model engine or body as a subclass of car.","['common', 'conceptual', 'error', 'mistake', 'relation', 'subclass', 'example', 'car', 'truck', 'kind', 'vehicle', 'appropriate', 'model', 'subclass', 'vehicle', 'class', 'error', 'model', 'component', 'part', 'car', 'subclass', 'relation', 'example', 'car', 'compose', 'engine', 'body', 'appropriate', 'model', 'engine', 'body', 'subclass', 'car']"
2282,"In object-oriented modeling these kinds of relations are typically modeled as object properties. In this example, the Car class would have a property called parts. parts would be typed to hold a collection of objects, such as instances of Body, Engine, Tires, etc. Object modeling languages such as UML include capabilities to model various aspects of ""part of"" and other kinds of relations – data such as the cardinality of the objects, constraints on input and output values, etc. This information can be utilized by developer tools to generate additional code beside the basic data definitions for the objects, such as error checking on get and set methods.20","['object', 'orient', 'model', 'kind', 'relation', 'typically', 'model', 'object', 'property', 'example', 'car', 'class', 'property', 'call', 'part', 'part', 'type', 'hold', 'collection', 'object', 'instance', 'body', 'engine', 'tires', 'etc', 'object', 'modeling', 'language', 'uml', 'include', 'capability', 'model', 'aspect', 'kind', 'relation', 'datum', 'cardinality', 'object', 'constraint', 'input', 'output', 'value', 'etc', 'information', 'utilize', 'developer', 'tool', 'generate', 'additional', 'code', 'basic', 'datum', 'definition', 'object', 'error', 'checking', 'set', 'methods']"
2283,"One important question when modeling and implementing a system of object classes is whether a class can have one or more superclasses. In the real world with actual sets it would be rare to find sets that didn't intersect with more than one other set. However, while some systems such as Flavors and CLOS provide a capability for more than one parent to do so at run time introduces complexity that many in the object-oriented community consider antithetical to the goals of using object classes in the first place. Understanding which class will be responsible for handling a message can get complex when dealing with more than one superclass. If used carelessly this feature can introduce some of the same system complexity and ambiguity classes were designed to avoid.21","['important', 'question', 'model', 'implement', 'system', 'object', 'class', 'class', 'superclass', 'real', 'world', 'actual', 'set', 'rare', 'find', 'set', 'intersect', 'set', 'system', 'flavors', 'clos', 'provide', 'capability', 'parent', 'run', 'time', 'introduce', 'complexity', 'object', 'orient', 'community', 'consider', 'antithetical', 'goal', 'object', 'class', 'place', 'understand', 'class', 'responsible', 'handle', 'message', 'complex', 'deal', 'superclass', 'carelessly', 'feature', 'introduce', 'system', 'complexity', 'ambiguity', 'class', 'design', 'avoid']"
2284,"Most modern object-oriented languages such as Smalltalk and Java require single inheritance at run time. For these languages, multiple inheritance may be useful for modeling but not for an implementation.","['modern', 'object', 'orient', 'language', 'smalltalk', 'java', 'require', 'single', 'inheritance', 'run', 'time', 'language', 'multiple', 'inheritance', 'useful', 'modeling', 'implementation']"
2285,"However, semantic web application objects do have multiple superclasses. The volatility of the Internet requires this level of flexibility and the technology standards such as the Web Ontology Language OWL are designed to support it.","['semantic', 'web', 'application', 'object', 'multiple', 'superclass', 'volatility', 'internet', 'require', 'level', 'flexibility', 'technology', 'standard', 'web', 'ontology', 'language', 'owl', 'design', 'support']"
2286,"A similar issue is whether or not the class hierarchy can be modified at run time. Languages such as Flavors, CLOS, and Smalltalk all support this feature as part of their meta-object protocols. Since classes are themselves first-class objects, it is possible to have them dynamically alter their structure by sending them the appropriate messages. Other languages that focus more on strong typing such as Java and C++ do not allow the class hierarchy to be modified at run time. Semantic web objects have the capability for run time changes to classes. The rational is similar to the justification for allowing multiple superclasses, that the Internet is so dynamic and flexible that dynamic changes to the hierarchy are required to manage this volatility.22","['similar', 'issue', 'class', 'hierarchy', 'modify', 'run', 'time', 'language', 'flavors', 'clos', 'smalltalk', 'support', 'feature', 'meta', 'object', 'protocol', 'class', 'class', 'object', 'possible', 'dynamically', 'alter', 'structure', 'send', 'appropriate', 'message', 'language', 'focus', 'strong', 'typing', 'java', 'c++', 'allow', 'class', 'hierarchy', 'modify', 'run', 'time', 'semantic', 'web', 'object', 'capability', 'run', 'time', 'change', 'class', 'rational', 'similar', 'justification', 'allow', 'multiple', 'superclass', 'internet', 'dynamic', 'flexible', 'dynamic', 'change', 'hierarchy', 'require', 'manage', 'volatility']"
2287,"Although class-based languages are commonly assumed to support inheritance, inheritance is not an intrinsic aspect of the concept of classes. Some languages, often referred to as ""object-based languages"", support classes yet do not support inheritance. Examples of object-based languages include earlier versions of Visual Basic.","['class', 'base', 'language', 'commonly', 'assume', 'support', 'inheritance', 'inheritance', 'intrinsic', 'aspect', 'concept', 'class', 'language', 'refer', 'object', 'base', 'language', 'support', 'class', 'support', 'inheritance', 'example', 'object', 'base', 'language', 'include', 'early', 'version', 'visual', 'basic']"
2288,"In object-oriented analysis and in UML, an association between two classes represents a collaboration between the classes or their corresponding instances. Associations have direction; for example, a bi-directional association between two classes indicates that both of the classes are aware of their relationship.23 Associations may be labeled according to their name or purpose.24","['object', 'orient', 'analysis', 'uml', 'association', 'class', 'represent', 'collaboration', 'class', 'correspond', 'instance', 'association', 'direction', 'example', 'directional', 'association', 'class', 'indicate', 'class', 'aware', 'relationship', 'associations', 'label', 'accord', 'purpose']"
2289,"An association role is given end of an association and describes the role of the corresponding class. For example, a ""subscriber"" role describes the way instances of the class ""Person"" participate in a ""subscribes-to"" association with the class ""Magazine"". Also, a ""Magazine"" has the ""subscribed magazine"" role in the same association. Association role multiplicity describes how many instances correspond to each instance of the other class of the association. Common multiplicities are ""0..1"", ""1..1"", ""1..*"" and ""0..*"", where the ""*"" specifies any number of instances.23","['association', 'role', 'give', 'end', 'association', 'describe', 'role', 'corresponding', 'class', 'example', 'subscriber', 'role', 'describe', 'way', 'instance', 'class', 'person', 'participate', 'subscribes', 'association', 'class', 'magazine', 'magazine', 'subscribe', 'magazine', 'role', 'association', 'association', 'role', 'multiplicity', 'describe', 'instance', 'correspond', 'instance', 'class', 'association', 'common', 'multiplicity', 'specify', 'number', 'instances']"
2290,"There are many categories of classes, some of which overlap.","['category', 'class', 'overlap']"
2291,"In a language that supports inheritance, an abstract class, or abstract base class ABC, is a class that cannot be instantiated because it is either labeled as abstract or it simply specifies abstract methods or virtual methods. An abstract class may provide implementations of some methods, and may also specify virtual methods via signatures that are to be implemented by direct or indirect descendants of the abstract class. Before a class derived from an abstract class can be instantiated, all abstract methods of its parent classes must be implemented by some class in the derivation chain.25","['language', 'support', 'inheritance', 'abstract', 'class', 'abstract', 'base', 'class', 'abc', 'class', 'instantiate', 'label', 'abstract', 'simply', 'specify', 'abstract', 'method', 'virtual', 'method', 'abstract', 'class', 'provide', 'implementation', 'method', 'specify', 'virtual', 'method', 'signature', 'implement', 'direct', 'indirect', 'descendant', 'abstract', 'class', 'class', 'derive', 'abstract', 'class', 'instantiate', 'abstract', 'method', 'parent', 'class', 'implement', 'class', 'derivation', 'chain']"
2292,"Most object-oriented programming languages allow the programmer to specify which classes are considered abstract and will not allow these to be instantiated. For example, in Java, C# and PHP, the keyword abstract is used.2627 In C++, an abstract class is a class having at least one abstract method given by the appropriate syntax in that language a pure virtual function in C++ parlance.25","['object', 'orient', 'programming', 'language', 'allow', 'programmer', 'specify', 'class', 'consider', 'abstract', 'allow', 'instantiate', 'example', 'java', 'php', 'keyword', 'abstract', 'used', 'c++', 'abstract', 'class', 'class', 'have', 'abstract', 'method', 'give', 'appropriate', 'syntax', 'language', 'pure', 'virtual', 'function', 'c++', 'parlance']"
2293,"A class consisting of only virtual methods is called a Pure Abstract Base Class or Pure ABC in C++ and is also known as an interface by users of the language.13 Other languages, notably Java and C#, support a variant of abstract classes called an interface via a keyword in the language. In these languages, multiple inheritance is not allowed, but a class can implement multiple interfaces. Such a class can only contain abstract publicly accessible methods.192829","['class', 'consist', 'virtual', 'method', 'call', 'pure', 'abstract', 'base', 'class', 'pure', 'abc', 'c++', 'know', 'interface', 'user', 'language', 'language', 'notably', 'java', 'support', 'variant', 'abstract', 'class', 'call', 'interface', 'keyword', 'language', 'language', 'multiple', 'inheritance', 'allow', 'class', 'implement', 'multiple', 'interface', 'class', 'contain', 'abstract', 'publicly', 'accessible', 'methods']"
2294,"A concrete class is a class that can be instantiated, as opposed to abstract classes, which cannot.","['concrete', 'class', 'class', 'instantiate', 'oppose', 'abstract', 'class']"
2295,"In some languages, classes can be declared in scopes other than the global scope. There are various types of such classes.","['language', 'class', 'declare', 'scope', 'global', 'scope', 'type', 'class']"
2296,"An inner class is a class defined within another class. The relationship between an inner class and its containing class can also be treated as another type of class association. An inner class is typically neither associated with instances of the enclosing class nor instantiated along with its enclosing class. Depending on language, it may or may not be possible to refer to the class from outside the enclosing class. A related concept is inner types, also known as inner data type or nested type, which is a generalization of the concept of inner classes. C++ is an example of a language that supports both inner classes and inner types via typedef declarations.3031","['inner', 'class', 'class', 'define', 'class', 'relationship', 'inner', 'class', 'contain', 'class', 'treat', 'type', 'class', 'association', 'inner', 'class', 'typically', 'associate', 'instance', 'enclosing', 'class', 'instantiate', 'enclose', 'class', 'depend', 'language', 'possible', 'refer', 'class', 'outside', 'enclosing', 'class', 'related', 'concept', 'inner', 'type', 'know', 'inner', 'datum', 'type', 'nested', 'type', 'generalization', 'concept', 'inner', 'class', 'c++', 'example', 'language', 'support', 'inner', 'class', 'inner', 'type', 'typedef', 'declarations']"
2297,"Another type is a local class, which is a class defined within a procedure or function. This limits references to the class name to within the scope where the class is declared. Depending on the semantic rules of the language, there may be additional restrictions on local classes compared to non-local ones. One common restriction is to disallow local class methods to access local variables of the enclosing function. For example, in C++, a local class may refer to static variables declared within its enclosing function, but may not access the function's automatic variables.32","['type', 'local', 'class', 'class', 'define', 'procedure', 'function', 'limit', 'reference', 'class', 'scope', 'class', 'declare', 'depend', 'semantic', 'rule', 'language', 'additional', 'restriction', 'local', 'class', 'compare', 'non', 'local', 'one', 'common', 'restriction', 'disallow', 'local', 'class', 'method', 'access', 'local', 'variable', 'enclosing', 'function', 'example', 'c++', 'local', 'class', 'refer', 'static', 'variable', 'declare', 'enclose', 'function', 'access', 'function', 'automatic', 'variables']"
2298,Metaclasses are classes whose instances are classes.33 A metaclass describes a common structure of a collection of classes and can implement a design pattern or describe particular kinds of classes. Metaclasses are often used to describe frameworks.34,"['metaclasse', 'class', 'instance', 'classes', 'metaclass', 'describe', 'common', 'structure', 'collection', 'class', 'implement', 'design', 'pattern', 'describe', 'particular', 'kind', 'class', 'metaclasse', 'describe', 'frameworks']"
2299,"In some languages, such as Python, Ruby or Smalltalk, a class is also an object; thus each class is an instance of a unique metaclass that is built into the language. 4 35 36 The Common Lisp Object System CLOS provides metaobject protocols MOPs to implement those classes and metaclasses. 37","['language', 'python', 'ruby', 'smalltalk', 'class', 'object', 'class', 'instance', 'unique', 'metaclass', 'build', 'language', 'common', 'lisp', 'object', 'system', 'clos', 'provide', 'metaobject', 'protocol', 'mop', 'implement', 'class', 'metaclasse']"
2300,"Non-subclassable classes allow programmers to design classes and hierarchies of classes where at some level in the hierarchy, further derivation is prohibited a stand-alone class may be also designated as non-subclassable, preventing the formation of any hierarchy. Contrast this to abstract classes, which imply, encourage, and require derivation in order to be used at all. A non-subclassable class is implicitly concrete.","['non', 'subclassable', 'class', 'allow', 'programmer', 'design', 'class', 'hierarchy', 'class', 'level', 'hierarchy', 'derivation', 'prohibit', 'stand', 'class', 'designate', 'non', 'subclassable', 'prevent', 'formation', 'hierarchy', 'contrast', 'abstract', 'class', 'imply', 'encourage', 'require', 'derivation', 'order', 'non', 'subclassable', 'class', 'implicitly', 'concrete']"
2301,"A non-subclassable class is created by declaring the class as sealed in C# or as final in Java or PHP.383940 For example, Java's String class is designated as final.41","['non', 'subclassable', 'class', 'create', 'declare', 'class', 'seal', 'final', 'java', 'php', 'example', 'java', 'string', 'class', 'designate', 'final']"
2302,Non-subclassable classes may allow a compiler in compiled languages to perform optimizations that are not available for subclassable classes. 42,"['non', 'subclassable', 'class', 'allow', 'compiler', 'compile', 'language', 'perform', 'optimization', 'available', 'subclassable', 'class']"
2303,"An open class is one that can be changed. Typically, an executable program cannot be changed by customers. Developers can often change some classes, but typically cannot change standard or built-in ones. In Ruby, all classes are open. In Python, classes can be created at runtime, and all can be modified afterwards.43 Objective-C categories permit the programmer to add methods to an existing class without the need to recompile that class or even have access to its source code.","['open', 'class', 'change', 'typically', 'executable', 'program', 'change', 'customer', 'developer', 'change', 'class', 'typically', 'change', 'standard', 'build', 'one', 'ruby', 'class', 'open', 'python', 'class', 'create', 'runtime', 'modify', 'afterwards', 'objective', 'category', 'permit', 'programmer', 'add', 'method', 'exist', 'class', 'need', 'recompile', 'class', 'access', 'source', 'code']"
2304,"Some languages have special support for mixins, though in any language with multiple inheritance a mixin is simply a class that does not represent an is-a-type-of relationship. Mixins are typically used to add the same methods to multiple classes; for example, a class UnicodeConversionMixin might provide a method called unicode_to_ascii when included in classes FileReader and WebPageScraper that do not share a common parent.","['language', 'special', 'support', 'mixin', 'language', 'multiple', 'inheritance', 'mixin', 'simply', 'class', 'represent', 'type', 'relationship', 'mixin', 'typically', 'add', 'method', 'multiple', 'class', 'example', 'class', 'unicodeconversionmixin', 'provide', 'method', 'call', 'unicode_to_ascii', 'include', 'class', 'filereader', 'webpagescraper', 'share', 'common', 'parent']"
2305,"In languages supporting the feature, a partial class is a class whose definition may be split into multiple pieces, within a single source-code file or across multiple files.44 The pieces are merged at compile-time, making compiler output the same as for a non-partial class.","['language', 'support', 'feature', 'partial', 'class', 'class', 'definition', 'split', 'multiple', 'piece', 'single', 'source', 'code', 'file', 'multiple', 'files', 'piece', 'merge', 'compile', 'time', 'make', 'compiler', 'output', 'non', 'partial', 'class']"
2306,"The primary motivation for introduction of partial classes is to facilitate the implementation of code generators, such as visual designers.44 It is otherwise a challenge or compromise to develop code generators that can manage the generated code when it is interleaved within developer-written code. Using partial classes, a code generator can process a separate file or coarse-grained partial class within a file, and is thus alleviated from intricately interjecting generated code via extensive parsing, increasing compiler efficiency and eliminating the potential risk of corrupting developer code. In a simple implementation of partial classes, the compiler can perform a phase of precompilation where it ""unifies"" all the parts of a partial class. Then, compilation can proceed as usual.","['primary', 'motivation', 'introduction', 'partial', 'class', 'facilitate', 'implementation', 'code', 'generator', 'visual', 'designers', 'challenge', 'compromise', 'develop', 'code', 'generator', 'manage', 'generate', 'code', 'interleave', 'developer', 'write', 'code', 'partial', 'class', 'code', 'generator', 'process', 'separate', 'file', 'coarse', 'grain', 'partial', 'class', 'file', 'alleviate', 'intricately', 'interject', 'generate', 'code', 'extensive', 'parsing', 'increase', 'compiler', 'efficiency', 'eliminate', 'potential', 'risk', 'corrupt', 'developer', 'code', 'simple', 'implementation', 'partial', 'class', 'compiler', 'perform', 'phase', 'precompilation', 'unify', 'part', 'partial', 'class', 'compilation', 'proceed', 'usual']"
2307,Other benefits and effects of the partial class feature include:,"['benefit', 'effect', 'partial', 'class', 'feature', 'include']"
2308,"Partial classes have existed in Smalltalk under the name of Class Extensions for considerable time. With the arrival of the .NET framework 2, Microsoft introduced partial classes, supported in both C# 2.0 and Visual Basic 2005. WinRT also supports partial classes.","['partial', 'class', 'exist', 'smalltalk', 'class', 'extensions', 'considerable', 'time', 'arrival', '.net', 'framework', 'microsoft', 'introduce', 'partial', 'class', 'support', '2', 'visual', 'basic', '2005', 'winrt', 'support', 'partial', 'class']"
2309,"This simple example, written in Visual Basic .NET, shows how parts of the same class are defined in two different files.","['simple', 'example', 'write', 'visual', 'basic', '.net', 'show', 'part', 'class', 'define', 'different', 'file']"
2310,"When compiled, the result is the same as if the two files were written as one, like this:","['compile', 'result', 'file', 'write', 'like']"
2311,"In Objective-C, partial classes, also known as categories, may even spread over multiple libraries and executables, like the following example. But a key difference is that Objective-C's categories can overwrite definitions in another interface declaration, and that categories aren't equal to original class definition the first requires the last.45 Instead, .NET partial class can't have conflicting definitions, and all partial definitions are equal to the others.44","['objective', 'partial', 'class', 'know', 'category', 'spread', 'multiple', 'library', 'executable', 'like', 'follow', 'example', 'key', 'difference', 'objective', 'category', 'overwrite', 'definition', 'interface', 'declaration', 'category', 'equal', 'original', 'class', 'definition', 'require', 'last', 'instead', '.net', 'partial', 'class', 'conflicting', 'definition', 'partial', 'definition', 'equal', 'others']"
2312,"In user-supplied library, a separate binary from Foundation framework, header file NSData+base64.h:","['user', 'supply', 'library', 'separate', 'binary', 'foundation', 'framework', 'header', 'file', 'nsdata+base64.h']"
2313,"And in an app, yet another separate binary file, source code file main.m:","['app', 'separate', 'binary', 'file', 'source', 'code', 'file', 'main.m']"
2314,The dispatcher will find both methods called over the NSData instance and invoke both of them correctly.,"['dispatcher', 'find', 'method', 'call', 'nsdata', 'instance', 'invoke', 'correctly']"
2315,"Uninstantiable classes allow programmers to group together per-class fields and methods that are accessible at runtime without an instance of the class. Indeed, instantiation is prohibited for this kind of class.","['uninstantiable', 'class', 'allow', 'programmer', 'group', 'class', 'field', 'method', 'accessible', 'runtime', 'instance', 'class', 'instantiation', 'prohibit', 'kind', 'class']"
2316,"For example, in C#, a class marked ""static"" can not be instantiated, can only have static members fields, methods, other, may not have instance constructors, and is sealed. 46","['example', 'class', 'mark', 'static', 'instantiate', 'static', 'member', 'field', 'method', 'instance', 'constructor', 'seal']"
2317,An unnamed class or anonymous class is a class that is not bound to a name or identifier upon definition.4748 This is analogous to named versus unnamed functions.,"['unnamed', 'class', 'anonymous', 'class', 'class', 'bind', 'identifi', 'definition', 'analogous', 'name', 'versus', 'unnamed', 'function']"
2318,The benefits of organizing software into object classes fall into three categories:49,"['benefit', 'organize', 'software', 'object', 'class', 'fall', 'categories']"
2319,"Object classes facilitate rapid development because they lessen the semantic gap between the code and the users. System analysts can talk to both developers and users using essentially the same vocabulary, talking about accounts, customers, bills, etc. Object classes often facilitate rapid development because most object-oriented environments come with powerful debugging and testing tools. Instances of classes can be inspected at run time to verify that the system is performing as expected. Also, rather than get dumps of core memory, most object-oriented environments have interpreted debugging capabilities so that the developer can analyze exactly where in the program the error occurred and can see which methods were called to which arguments and with what arguments.50","['object', 'class', 'facilitate', 'rapid', 'development', 'lessen', 'semantic', 'gap', 'code', 'user', 'system', 'analyst', 'talk', 'developer', 'user', 'essentially', 'vocabulary', 'talk', 'account', 'customer', 'bill', 'etc', 'object', 'class', 'facilitate', 'rapid', 'development', 'object', 'orient', 'environment', 'come', 'powerful', 'debug', 'testing', 'tool', 'instance', 'class', 'inspect', 'run', 'time', 'verify', 'system', 'perform', 'expect', 'dump', 'core', 'memory', 'object', 'orient', 'environment', 'interpret', 'debug', 'capability', 'developer', 'analyze', 'exactly', 'program', 'error', 'occur', 'method', 'call', 'argument', 'arguments']"
2320,Object classes facilitate ease of maintenance via encapsulation. When developers need to change the behavior of an object they can localize the change to just that object and its component parts. This reduces the potential for unwanted side effects from maintenance enhancements.,"['object', 'class', 'facilitate', 'ease', 'maintenance', 'encapsulation', 'developer', 'need', 'change', 'behavior', 'object', 'localize', 'change', 'object', 'component', 'part', 'reduce', 'potential', 'unwanted', 'effect', 'maintenance', 'enhancement']"
2321,Software re-use is also a major benefit of using Object classes. Classes facilitate re-use via inheritance and interfaces. When a new behavior is required it can often be achieved by creating a new class and having that class inherit the default behaviors and data of its superclass and then tailor some aspect of the behavior or data accordingly. Re-use via interfaces also known as methods occurs when another object wants to invoke rather than create a new kind of some object class. This method for re-use removes many of the common errors that can make their way into software when one program re-uses code from another.51,"['software', 'use', 'major', 'benefit', 'object', 'class', 'class', 'facilitate', 'use', 'inheritance', 'interface', 'new', 'behavior', 'require', 'achieve', 'create', 'new', 'class', 'have', 'class', 'inherit', 'default', 'behavior', 'datum', 'superclass', 'tailor', 'aspect', 'behavior', 'data', 'accordingly', 'use', 'interface', 'know', 'method', 'occur', 'object', 'want', 'invoke', 'create', 'new', 'kind', 'object', 'class', 'method', 'use', 'remove', 'common', 'error', 'way', 'software', 'program', 'use', 'code', 'another']"
2322,"As a data type, a class is usually considered as a compile-time construct.52 A language or library may also support prototype or factory metaobjects that represent run-time information about classes, or even represent metadata that provides access to reflection facilities and ability to manipulate data structure formats at run-time. Many languages distinguish this kind of run-time type information about classes from a class on the basis that the information is not needed at run-time. Some dynamic languages do not make strict distinctions between run-time and compile-time constructs, and therefore may not distinguish between metaobjects and classes.","['data', 'type', 'class', 'usually', 'consider', 'compile', 'time', 'construct', 'language', 'library', 'support', 'prototype', 'factory', 'metaobject', 'represent', 'run', 'time', 'information', 'class', 'represent', 'metadata', 'provide', 'access', 'reflection', 'facility', 'ability', 'manipulate', 'data', 'structure', 'format', 'run', 'time', 'language', 'distinguish', 'kind', 'run', 'time', 'type', 'information', 'class', 'class', 'basis', 'information', 'need', 'run', 'time', 'dynamic', 'language', 'strict', 'distinction', 'run', 'time', 'compile', 'time', 'construct', 'distinguish', 'metaobject', 'class']"
2323,"For example, if Human is a metaobject representing the class Person, then instances of class Person can be created by using the facilities of the Human metaobject.","['example', 'human', 'metaobject', 'represent', 'class', 'person', 'instance', 'class', 'person', 'create', 'facility', 'human', 'metaobject']"
2324,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2325,"In computing, an attribute is a specification that defines a property of an object, element, or file. It may also refer to or set the specific value for a given instance of such. For clarity, attributes should more correctly be considered metadata. An attribute is frequently and generally a property of a property. However, in actual usage, the term attribute can and is often treated as equivalent to a property depending on the technology being discussed. An attribute of an object usually consists of a name and a value; of an element, a type or class name; of a file, a name and extension.","['computing', 'attribute', 'specification', 'define', 'property', 'object', 'element', 'file', 'refer', 'set', 'specific', 'value', 'give', 'instance', 'clarity', 'attribute', 'correctly', 'consider', 'metadata', 'attribute', 'frequently', 'generally', 'property', 'property', 'actual', 'usage', 'term', 'attribute', 'treat', 'equivalent', 'property', 'depend', 'technology', 'discuss', 'attribute', 'object', 'usually', 'consist', 'value', 'element', 'type', 'class', 'file', 'extension']"
2326,"For example, in computer graphics, line objects can have attributes such as thickness with real values, color with descriptive values such as brown or green or values defined in a certain color model, such as RGB, dashing attributes, etc. A circle object can be defined in similar attributes plus an origin and radius. In reference to computer systems, attributes are defined particularly for read or write attributes for specific read or write.","['example', 'computer', 'graphic', 'line', 'object', 'attribute', 'thickness', 'real', 'value', 'color', 'descriptive', 'value', 'brown', 'green', 'value', 'define', 'certain', 'color', 'model', 'rgb', 'dash', 'attribute', 'etc', 'circle', 'object', 'define', 'similar', 'attribute', 'plus', 'origin', 'radius', 'reference', 'computer', 'system', 'attribute', 'define', 'particularly', 'read', 'write', 'attribute', 'specific', 'read', 'write']"
2327,"If the element in question could be considered a property CUSTOMER_NAME of another entity let's say CUSTOMER, the element can have zero or more attributes properties of its own CUSTOMER_NAME is of TYPE = ""KINDOFTEXT"".","['element', 'question', 'consider', 'property', 'customer_name', 'entity', 'let', 'customer', 'element', 'zero', 'attribute', 'property', 'customer_name', 'type', 'kindoftext']"
2328,"In the C# programming language, attributes are metadata attached to a field or a block of code like assemblies, members and types, and are equivalent to annotations in Java. Attributes are accessible to both the compiler and programmatically through reflection.","['programming', 'language', 'attribute', 'metadata', 'attach', 'field', 'block', 'code', 'like', 'assembly', 'member', 'type', 'equivalent', 'annotation', 'java', 'attribute', 'accessible', 'compiler', 'programmatically', 'reflection']"
2329,Users of the language see many examples where attributes are used to address cross-cutting concerns and other mechanistic or platform uses. This creates the false impression that this is their sole intended purpose.,"['user', 'language', 'example', 'attribute', 'address', 'cross', 'cut', 'concern', 'mechanistic', 'platform', 'use', 'create', 'false', 'impression', 'sole', 'intend', 'purpose']"
2330,"Their specific use as metadata is left to the developer and can cover a wide range of types of information about any given application, classes and members that is not instance-specific. The decision to expose any given attribute as a property is also left to the developer as is the decision to use them as part of a larger application framework.","['specific', 'use', 'metadata', 'leave', 'developer', 'cover', 'wide', 'range', 'type', 'information', 'give', 'application', 'class', 'member', 'instance', 'specific', 'decision', 'expose', 'give', 'attribute', 'property', 'leave', 'developer', 'decision', 'use', 'large', 'application', 'framework']"
2331,"Attributes are implemented as classes that are derived from System.Attribute. They are often used by the CLR services, like COM interoperability, remoting, serialisation and can be queried at runtime.","['attribute', 'implement', 'class', 'derive', 'system', 'attribute', 'clr', 'service', 'like', 'com', 'interoperability', 'remoting', 'serialisation', 'query', 'runtime']"
2332,The example shows how attributes are defined in C#:,"['example', 'show', 'attribute', 'define']"
2333,Positional parameters like first parameter of type string above are parameters of the attribute's constructor. Name parameters like the Boolean parameter in the example are a property of the attribute and should be a constant value.1,"['positional', 'parameter', 'like', 'parameter', 'type', 'string', 'parameter', 'attribute', 'constructor', 'parameter', 'like', 'boolean', 'parameter', 'example', 'property', 'attribute', 'constant', 'value']"
2334,"Attributes should be contrasted against XML documentation that also defines metadata, but is not included in the compiled assembly and therefore cannot be accessed programmatically.","['attribute', 'contrast', 'xml', 'documentation', 'define', 'metadata', 'include', 'compile', 'assembly', 'access', 'programmatically']"
2335,Display the checked attribute and property of a checkbox as it changes.,"['display', 'check', 'attribute', 'property', 'checkbox', 'change']"
2336,"On many post-relational or multi-valued databases systems, relative to SQL, tables are files, rows are items, and columns are attributes. Both in the database and code, attribute is synonymous with property and variable although attributes can be further defined to contain values and subvalues.","['post', 'relational', 'multi', 'value', 'database', 'system', 'relative', 'sql', 'table', 'file', 'row', 'item', 'column', 'attribute', 'database', 'code', 'attribute', 'synonymous', 'property', 'variable', 'attribute', 'define', 'contain', 'value', 'subvalue']"
2337,The first of these databases was the Pick operating system. Two current platforms include Rocket U2's Universe and InterSystems’ Caché.,"['database', 'pick', 'operating', 'system', 'current', 'platform', 'include', 'rocket', 'universe', 'intersystems', 'caché']"
2338,"In XML, an attribute is a markup construct consisting of a name/value pair that exists within a start-tag or empty-element tag. Markup languages, such as HTML and XML, use attributes to describe data and the formatting of data.","['xml', 'attribute', 'markup', 'construct', 'consist', 'value', 'pair', 'exist', 'start', 'tag', 'element', 'tag', 'markup', 'language', 'html', 'xml', 'use', 'attribute', 'describe', 'datum', 'formatting', 'datum']"
2339,"A good example is the process of XML assigning values to properties elements. Note that the element's value is found before the separate end tag, not in the element itself. The element itself may have a number of attributes set NAME = ""IAMAPROPERTY"".","['good', 'example', 'process', 'xml', 'assign', 'value', 'property', 'element', 'note', 'element', 'value', 'find', 'separate', 'end', 'tag', 'element', 'element', 'number', 'attribute', 'set', 'iamaproperty']"
2340,"If the element in question could be considered a property CUSTOMER_NAME of another entity let's say CUSTOMER, the element can have zero or more attributes properties of its own CUSTOMER_NAME is of TYPE = ""KINDOFTEXT"".","['element', 'question', 'consider', 'property', 'customer_name', 'entity', 'let', 'customer', 'element', 'zero', 'attribute', 'property', 'customer_name', 'type', 'kindoftext']"
2341,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2342,"A method in object-oriented programming OOP is a procedure associated with a message and an object. An object consists of state data and behavior; these compose an interface, which specifies how the object may be utilized by any of its various consumers. A method is a behavior of an object parametrized by a consumer.","['method', 'object', 'orient', 'programming', 'oop', 'procedure', 'associate', 'message', 'object', 'object', 'consist', 'state', 'datum', 'behavior', 'compose', 'interface', 'specify', 'object', 'utilize', 'consumer', 'method', 'behavior', 'object', 'parametrize', 'consumer']"
2343,"Data is represented as properties of the object, and behaviors are represented as methods. For example, a Window object could have methods such as open and close, while its state whether it is open or closed at any given point in time would be a property.","['datum', 'represent', 'property', 'object', 'behavior', 'represent', 'method', 'example', 'window', 'object', 'method', 'open', 'close', 'state', 'open', 'close', 'give', 'point', 'time', 'property']"
2344,"In class-based programming, methods are defined within a class, and objects are instances of a given class. One of the most important capabilities that a method provides is method overriding - the same name e.g., area can be used for multiple different kinds of classes. This allows the sending objects to invoke behaviors and to delegate the implementation of those behaviors to the receiving object. A method in Java programming sets the behavior of a class object. For example, an object can send an area message to another object and the appropriate formula is invoked whether the receiving object is a rectangle, circle, triangle, etc.","['class', 'base', 'programming', 'method', 'define', 'class', 'object', 'instance', 'give', 'class', 'important', 'capability', 'method', 'provide', 'method', 'override', 'e.g.', 'area', 'multiple', 'different', 'kind', 'class', 'allow', 'send', 'object', 'invoke', 'behavior', 'delegate', 'implementation', 'behavior', 'receiving', 'object', 'method', 'java', 'programming', 'set', 'behavior', 'class', 'object', 'example', 'object', 'send', 'area', 'message', 'object', 'appropriate', 'formula', 'invoke', 'receiving', 'object', 'rectangle', 'circle', 'triangle', 'etc']"
2345,Methods also provide the interface that other classes use to access and modify the properties of an object; this is known as encapsulation. Encapsulation and overriding are the two primary distinguishing features between methods and procedure calls.1,"['method', 'provide', 'interface', 'class', 'use', 'access', 'modify', 'property', 'object', 'know', 'encapsulation', 'encapsulation', 'override', 'primary', 'distinguish', 'feature', 'method', 'procedure', 'calls']"
2346,"Method overriding and overloading are two of the most significant ways that a method differs from a conventional procedure or function call. Overriding refers to a subclass redefining the implementation of a method of its superclass. For example, findArea may be a method defined on a shape class,2 triangle, etc. would each define the appropriate formula to calculate their area. The idea is to look at objects as ""black boxes"" so that changes to the internals of the object can be made with minimal impact on the other objects that use it. This is known as encapsulation and is meant to make code easier to maintain and re-use.","['method', 'override', 'overloading', 'significant', 'way', 'method', 'differ', 'conventional', 'procedure', 'function', 'override', 'refer', 'subclass', 'redefine', 'implementation', 'method', 'superclass', 'example', 'findarea', 'method', 'define', 'shape', 'class', 'triangle', 'etc', 'define', 'appropriate', 'formula', 'calculate', 'area', 'idea', 'look', 'object', 'black', 'box', 'change', 'internal', 'object', 'minimal', 'impact', 'object', 'use', 'know', 'encapsulation', 'mean', 'code', 'easy', 'maintain', 'use']"
2347,"Method overloading, on the other hand, refers to differentiating the code used to handle a message based on the parameters of the method. If one views the receiving object as the first parameter in any method then overriding is just a special case of overloading where the selection is based only on the first argument. The following simple Java example illustrates the difference:","['method', 'overloading', 'hand', 'refer', 'differentiate', 'code', 'handle', 'message', 'base', 'parameter', 'method', 'view', 'receiving', 'object', 'parameter', 'method', 'override', 'special', 'case', 'overload', 'selection', 'base', 'argument', 'follow', 'simple', 'java', 'example', 'illustrate', 'difference']"
2348,"Accessor methods are used to read the data values of an object. Mutator methods are used to modify the data of an object. Manager methods are used to initialize and destroy objects of a class, e.g. constructors and destructors.","['accessor', 'method', 'read', 'datum', 'value', 'object', 'mutator', 'method', 'modify', 'datum', 'object', 'manager', 'method', 'initialize', 'destroy', 'object', 'class', 'e.g.', 'constructor', 'destructor']"
2349,"These methods provide an abstraction layer that facilitates encapsulation and modularity. For example, if a bank-account class provides a getBalance accessor method to retrieve the current balance rather than directly accessing the balance data fields, then later revisions of the same code can implement a more complex mechanism for balance retrieval e.g., a database fetch, without the dependent code needing to be changed. The concepts of encapsulation and modularity are not unique to object-oriented programming. Indeed, in many ways the object-oriented approach is simply the logical extension of previous paradigms such as abstract data types and structured programming.3","['method', 'provide', 'abstraction', 'layer', 'facilitate', 'encapsulation', 'modularity', 'example', 'bank', 'account', 'class', 'provide', 'getbalance', 'accessor', 'method', 'retrieve', 'current', 'balance', 'directly', 'access', 'balance', 'datum', 'field', 'later', 'revision', 'code', 'implement', 'complex', 'mechanism', 'balance', 'retrieval', 'e.g.', 'database', 'fetch', 'dependent', 'code', 'need', 'change', 'concept', 'encapsulation', 'modularity', 'unique', 'object', 'orient', 'programming', 'way', 'object', 'orient', 'approach', 'simply', 'logical', 'extension', 'previous', 'paradigms', 'abstract', 'datum', 'type', 'structure', 'programming']"
2350,"A constructor is a method that is called at the beginning of an object's lifetime to create and initialize the object, a process called construction or instantiation. Initialization may include an acquisition of resources. Constructors may have parameters but usually do not return values in most languages. See the following example in Java:","['constructor', 'method', 'call', 'beginning', 'object', 'lifetime', 'create', 'initialize', 'object', 'process', 'call', 'construction', 'instantiation', 'initialization', 'include', 'acquisition', 'resource', 'constructor', 'parameter', 'usually', 'return', 'value', 'language', 'follow', 'example', 'java']"
2351,"A destructor is a method that is called automatically at the end of an object's lifetime, a process called destruction. Destruction in most languages does not allow destructor method arguments nor return values. Destruction can be implemented so as to perform cleanup chores and other tasks at object destruction.","['destructor', 'method', 'call', 'automatically', 'end', 'object', 'lifetime', 'process', 'call', 'destruction', 'destruction', 'language', 'allow', 'destructor', 'method', 'argument', 'return', 'value', 'destruction', 'implement', 'perform', 'cleanup', 'chore', 'task', 'object', 'destruction']"
2352,"In garbage-collected languages, such as Java, C#, and Python, destructors are known as finalizers. They have a similar purpose and function to destructors, but because of the differences between languages that utilize garbage-collection and languages with manual memory management, the sequence in which they are called is different.","['garbage', 'collect', 'language', 'java', 'python', 'destructor', 'know', 'finalizer', 'similar', 'purpose', 'function', 'destructor', 'difference', 'language', 'utilize', 'garbage', 'collection', 'language', 'manual', 'memory', 'management', 'sequence', 'call', 'different']"
2353,An abstract method is one with only a signature and no implementation body. It is often used to specify that a subclass must provide an implementation of the method. Abstract methods are used to specify interfaces in some programming languages.4,"['abstract', 'method', 'signature', 'implementation', 'body', 'specify', 'subclass', 'provide', 'implementation', 'method', 'abstract', 'method', 'specify', 'interface', 'programming', 'languages']"
2354,The following Java code shows an abstract class that needs to be extended:,"['follow', 'java', 'code', 'show', 'abstract', 'class', 'need', 'extend']"
2355,The following subclass extends the main class:,"['following', 'subclass', 'extend', 'main', 'class']"
2356,"If a subclass provides an implementation for an abstract method, another subclass can make it abstract again. This is called reabstraction.","['subclass', 'provide', 'implementation', 'abstract', 'method', 'subclass', 'abstract', 'call', 'reabstraction']"
2357,"In practice, this is rarely used.","['practice', 'rarely']"
2358,"In C#, a virtual method can be overridden with an abstract method. This also applies to Java, where all non-private methods are virtual.","['virtual', 'method', 'overridden', 'abstract', 'method', 'apply', 'java', 'non', 'private', 'method', 'virtual']"
2359,"Interfaces' default methods can also be reabstracted, requiring subclasses to implement them. This also applies to Java.","['interface', 'default', 'method', 'reabstracte', 'require', 'subclass', 'implement', 'apply', 'java']"
2360,"Class methods are methods that are called on a class rather than an instance. They are typically used as part of an object meta-model. I.e, for each class, defined an instance of the class object in the meta-model is created. Meta-model protocols allow classes to be created and deleted. In this sense, they provide the same functionality as constructors and destructors described above. But in some languages such as the Common Lisp Object System CLOS the meta-model allows the developer to dynamically alter the object model at run time: e.g., to create new classes, redefine the class hierarchy, modify properties, etc.","['class', 'method', 'method', 'call', 'class', 'instance', 'typically', 'object', 'meta', 'model', 'i.e', 'class', 'define', 'instance', 'class', 'object', 'meta', 'model', 'create', 'meta', 'model', 'protocol', 'allow', 'class', 'create', 'delete', 'sense', 'provide', 'functionality', 'constructor', 'destructor', 'describe', 'language', 'common', 'lisp', 'object', 'system', 'clos', 'meta', 'model', 'allow', 'developer', 'dynamically', 'alter', 'object', 'model', 'run', 'time', 'e.g.', 'create', 'new', 'class', 'redefine', 'class', 'hierarchy', 'modify', 'property', 'etc']"
2361,"Special methods are very language-specific and a language may support none, some, or all of the special methods defined here. A language's compiler may automatically generate default special methods or a programmer may be allowed to optionally define special methods. Most special methods cannot be directly called, but rather the compiler generates code to call them at appropriate times.","['special', 'method', 'language', 'specific', 'language', 'support', 'special', 'method', 'define', 'language', 'compiler', 'automatically', 'generate', 'default', 'special', 'method', 'programmer', 'allow', 'optionally', 'define', 'special', 'method', 'special', 'method', 'directly', 'call', 'compiler', 'generate', 'code', 'appropriate', 'time']"
2362,"Static methods are meant to be relevant to all the instances of a class rather than to any specific instance. They are similar to static variables in that sense. An example would be a static method to sum the values of all the variables of every instance of a class. For example, if there were a Product class it might have a static method to compute the average price of all products.","['static', 'method', 'mean', 'relevant', 'instance', 'class', 'specific', 'instance', 'similar', 'static', 'variable', 'sense', 'example', 'static', 'method', 'sum', 'value', 'variable', 'instance', 'class', 'example', 'product', 'class', 'static', 'method', 'compute', 'average', 'price', 'product']"
2363,"In Java, a commonly used static method is:","['java', 'commonly', 'static', 'method']"
2364,This static method has no owning object and does not run on an instance. It receives all information from its arguments.2,"['static', 'method', 'own', 'object', 'run', 'instance', 'receive', 'information', 'arguments']"
2365,"A static method can be invoked even if no instances of the class exist yet. Static methods are called ""static"" because they are resolved at compile time based on the class they are called on and not dynamically as in the case with instance methods, which are resolved polymorphically based on the runtime type of the object.","['static', 'method', 'invoke', 'instance', 'class', 'exist', 'static', 'method', 'call', 'static', 'resolve', 'compile', 'time', 'base', 'class', 'call', 'dynamically', 'case', 'instance', 'method', 'resolve', 'polymorphically', 'base', 'runtime', 'type', 'object']"
2366,Copy-assignment operators define actions to be performed by the compiler when a class object is assigned to a class object of the same type.,"['copy', 'assignment', 'operator', 'define', 'action', 'perform', 'compiler', 'class', 'object', 'assign', 'class', 'object', 'type']"
2367,Operator methods define or redefine operator symbols and define the operations to be performed with the symbol and the associated method parameters. C++ example:,"['operator', 'method', 'define', 'redefine', 'operator', 'symbol', 'define', 'operation', 'perform', 'symbol', 'associate', 'method', 'parameter', 'c++', 'example']"
2368,"Some procedural languages were extended with object-oriented capabilities to leverage the large skill sets and legacy code for those languages but still provide the benefits of object-oriented development. Perhaps the most well-known example is C++, an object-oriented extension of the C programming language. Due to the design requirements to add the object-oriented paradigm on to an existing procedural language, message passing in C++ has some unique capabilities and terminologies. For example, in C++ a method is known as a member function. C++ also has the concept of virtual functions which are member functions that can be overridden in derived classes and allow for dynamic dispatch.","['procedural', 'language', 'extend', 'object', 'orient', 'capability', 'leverage', 'large', 'skill', 'set', 'legacy', 'code', 'language', 'provide', 'benefit', 'object', 'orient', 'development', 'know', 'example', 'c++', 'object', 'orient', 'extension', 'programming', 'language', 'design', 'requirement', 'add', 'object', 'orient', 'paradigm', 'exist', 'procedural', 'language', 'message', 'pass', 'c++', 'unique', 'capability', 'terminology', 'example', 'c++', 'method', 'know', 'member', 'function', 'c++', 'concept', 'virtual', 'function', 'member', 'function', 'overridden', 'derive', 'class', 'allow', 'dynamic', 'dispatch']"
2369,"Virtual functions are the means by which a C++ class can achieve polymorphic behavior. Non-virtual member functions, or regular methods, are those that do not participate in polymorphism.","['virtual', 'function', 'mean', 'c++', 'class', 'achieve', 'polymorphic', 'behavior', 'non', 'virtual', 'member', 'function', 'regular', 'method', 'participate', 'polymorphism']"
2370,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2371,"In object-oriented programming OOP, an inner class or nested class is a class declared entirely within the body of another class or interface. It is distinguished from a subclass.","['object', 'orient', 'programming', 'oop', 'inner', 'class', 'nested', 'class', 'class', 'declare', 'entirely', 'body', 'class', 'interface', 'distinguish', 'subclass']"
2372,"An instance of a normal or top-level class can exist on its own. By contrast, an instance of an inner class cannot be instantiated without being bound to a top-level class.","['instance', 'normal', 'level', 'class', 'exist', 'contrast', 'instance', 'inner', 'class', 'instantiate', 'bind', 'level', 'class']"
2373,"Let us take the abstract notion of a Car with four Wheels. Our Wheels have a specific feature that relies on being part of our Car. This notion does not represent the Wheels as Wheels in a more general form that could be part of any vehicle. Instead, it represents them as specific to a Car. We can model this notion using inner classes as follows:","['let', 'abstract', 'notion', 'car', 'wheel', 'wheel', 'specific', 'feature', 'rely', 'car', 'notion', 'represent', 'wheels', 'wheel', 'general', 'form', 'vehicle', 'instead', 'represent', 'specific', 'car', 'model', 'notion', 'inner', 'class', 'follow']"
2374,"We have the top-level class Car. Instances of class Car are composed of four instances of the class Wheel. This particular implementation of Wheel is specific to a car, so the code does not model the general notion of a wheel that would be better represented as a top-level class. Therefore, it is semantically connected to the class Car and the code of Wheel is in some way coupled to its outer class, being a composition unit of a car. The wheel for a particular car is unique to that car, but for generalization, the wheel is an aggregation unit to the car.","['level', 'class', 'car', 'instance', 'class', 'car', 'compose', 'instance', 'class', 'wheel', 'particular', 'implementation', 'wheel', 'specific', 'car', 'code', 'model', 'general', 'notion', 'wheel', 'well', 'represent', 'level', 'class', 'semantically', 'connect', 'class', 'car', 'code', 'wheel', 'way', 'couple', 'outer', 'class', 'composition', 'unit', 'car', 'wheel', 'particular', 'car', 'unique', 'car', 'generalization', 'wheel', 'aggregation', 'unit', 'car']"
2375,"Inner classes provide a mechanism to accurately model this connection. We can refer to our Wheel class as Car.Wheel, Car being the top-level class and Wheel being the inner class.","['inner', 'class', 'provide', 'mechanism', 'accurately', 'model', 'connection', 'refer', 'wheel', 'class', 'car', 'wheel', 'car', 'level', 'class', 'wheel', 'inner', 'class']"
2376,Inner classes therefore allow for the object orientation of certain parts of the program that would otherwise not be encapsulated into a class.,"['inner', 'class', 'allow', 'object', 'orientation', 'certain', 'part', 'program', 'encapsulate', 'class']"
2377,"Larger segments of code within a class might be better modeled or refactored as a separate top-level class, rather than an inner class. This would make the code more general in its application and therefore more re-usable but potentially might be premature generalization. This may prove more effective, if code has many inner classes with the shared functionality.","['large', 'segment', 'code', 'class', 'well', 'model', 'refactore', 'separate', 'level', 'class', 'inner', 'class', 'code', 'general', 'application', 'usable', 'potentially', 'premature', 'generalization', 'prove', 'effective', 'code', 'inner', 'class', 'share', 'functionality']"
2378,In Java there are four types of nested class:,"['java', 'type', 'nested', 'class']"
2379,"Inner class – The following categories are called inner classes. Each instance of these classes has a reference to an enclosing instance i.e. an instance of the enclosing class, except for local and anonymous classes declared in static context. Hence, they can implicitly refer to instance variables and methods of the enclosing class. The enclosing instance reference can be explicitly obtained via EnclosingClassName.this. Inner classes may not have static variables or methods, except for compile-time constant variables. When they are created, they must have a reference to an instance of the enclosing class; which means they must either be created within an instance method or constructor of the enclosing class, or for member and anonymous classes be created using the syntax enclosingInstance.new InnerClass.1","['inner', 'class', 'follow', 'category', 'call', 'inner', 'class', 'instance', 'class', 'reference', 'enclose', 'instance', 'i.e.', 'instance', 'enclose', 'class', 'local', 'anonymous', 'class', 'declare', 'static', 'context', 'implicitly', 'refer', 'instance', 'variable', 'method', 'enclosing', 'class', 'enclose', 'instance', 'reference', 'explicitly', 'obtain', 'enclosingclassname.this', 'inner', 'class', 'static', 'variable', 'method', 'compile', 'time', 'constant', 'variable', 'create', 'reference', 'instance', 'enclosing', 'class', 'mean', 'create', 'instance', 'method', 'constructor', 'enclosing', 'class', 'member', 'anonymous', 'class', 'create', 'syntax', 'enclosinginstance.new', 'innerclass']"
2380,"Local inner classes are often used in Java to define callbacks for GUI code. Components can then share an object that implements an event handling interface or extends an abstract adapter class, containing the code to be executed when a given event is triggered.","['local', 'inner', 'class', 'java', 'define', 'callback', 'gui', 'code', 'component', 'share', 'object', 'implement', 'event', 'handle', 'interface', 'extend', 'abstract', 'adapter', 'class', 'contain', 'code', 'execute', 'give', 'event', 'trigger']"
2381,Anonymous inner classes are also used where the event handling code is only used by one component and therefore does not need a named reference.,"['anonymous', 'inner', 'class', 'event', 'handle', 'code', 'component', 'need', 'name', 'reference']"
2382,This avoids a large monolithic actionPerformedActionEvent method with multiple if-else branches to identify the source of the event. This type of code is often considered messycitation needed and the inner class variations are considered to be better in all regards.citation needed,"['avoid', 'large', 'monolithic', 'actionperformedactionevent', 'method', 'multiple', 'branch', 'identify', 'source', 'event', 'type', 'code', 'consider', 'messycitation', 'need', 'inner', 'class', 'variation', 'consider', 'well', 'regards.citation', 'need']"
2383,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2384,"In computer science, message passing is a technique for invoking behavior i.e., running a program on a computer. The invoking program sends a message to a process which may be an actor or object and relies on that process and its supporting infrastructure to then select and run some appropriate code. Message passing differs from conventional programming where a process, subroutine, or function is directly invoked by name. Message passing is key to some models of concurrency and object-oriented programming.","['computer', 'science', 'message', 'passing', 'technique', 'invoke', 'behavior', 'i.e.', 'run', 'program', 'computer', 'invoke', 'program', 'send', 'message', 'process', 'actor', 'object', 'rely', 'process', 'support', 'infrastructure', 'select', 'run', 'appropriate', 'code', 'message', 'pass', 'differ', 'conventional', 'programming', 'process', 'subroutine', 'function', 'directly', 'invoke', 'message', 'passing', 'key', 'model', 'concurrency', 'object', 'orient', 'programming']"
2385,"Message passing is ubiquitous in modern computer software.citation needed It is used as a way for the objects that make up a program to work with each other and as a means for objects and systems running on different computers e.g., the Internet to interact. Message passing may be implemented by various mechanisms, including channels.","['message', 'passing', 'ubiquitous', 'modern', 'computer', 'software.citation', 'need', 'way', 'object', 'program', 'work', 'mean', 'object', 'system', 'run', 'different', 'computer', 'e.g.', 'internet', 'interact', 'message', 'passing', 'implement', 'mechanism', 'include', 'channel']"
2386,"Message passing is a technique for invoking behavior i.e., running a program on a computer. In contrast to the traditional technique of calling a program by name, message passing uses an object model to distinguish the general function from the specific implementations. The invoking program sends a message and relies on the object to select and execute the appropriate code. The justifications for using an intermediate layer essentially falls into two categories: encapsulation and distribution.","['message', 'passing', 'technique', 'invoke', 'behavior', 'i.e.', 'run', 'program', 'computer', 'contrast', 'traditional', 'technique', 'call', 'program', 'message', 'passing', 'use', 'object', 'model', 'distinguish', 'general', 'function', 'specific', 'implementation', 'invoke', 'program', 'send', 'message', 'rely', 'object', 'select', 'execute', 'appropriate', 'code', 'justification', 'intermediate', 'layer', 'essentially', 'fall', 'category', 'encapsulation', 'distribution']"
2387,"Encapsulation is the idea that software objects should be able to invoke services on other objects without knowing or caring about how those services are implemented. Encapsulation can reduce the amount of coding logic and make systems more maintainable. E.g., rather than having IF-THEN statements that determine which subroutine or function to call a developer can just send a message to the object and the object will select the appropriate code based on its type.","['encapsulation', 'idea', 'software', 'object', 'able', 'invoke', 'service', 'object', 'know', 'care', 'service', 'implement', 'encapsulation', 'reduce', 'code', 'logic', 'system', 'maintainable', 'e.g.', 'have', 'statement', 'determine', 'subroutine', 'function', 'developer', 'send', 'message', 'object', 'object', 'select', 'appropriate', 'code', 'base', 'type']"
2388,"One of the first examples of how this can be used was in the domain of computer graphics. There are various complexities involved in manipulating graphic objects. For example, simply using the right formula to compute the area of an enclosed shape will vary depending on if the shape is a triangle, rectangle, ellipse, or circle. In traditional computer programming this would result in long IF-THEN statements testing what sort of object the shape was and calling the appropriate code. The object-oriented way to handle this is to define a class called Shape with subclasses such as Rectangle and Ellipse which in turn have subclasses Square and Circle and then to simply send a message to any Shape asking it to compute its area. Each Shape object will then invoke the subclass's method with the formula appropriate for that kind of object.1","['example', 'domain', 'computer', 'graphic', 'complexity', 'involve', 'manipulate', 'graphic', 'object', 'example', 'simply', 'right', 'formula', 'compute', 'area', 'enclose', 'shape', 'vary', 'depend', 'shape', 'triangle', 'rectangle', 'ellipse', 'circle', 'traditional', 'computer', 'programming', 'result', 'long', 'statement', 'test', 'sort', 'object', 'shape', 'call', 'appropriate', 'code', 'object', 'orient', 'way', 'handle', 'define', 'class', 'call', 'shape', 'subclass', 'rectangle', 'ellipse', 'turn', 'subclass', 'square', 'circle', 'simply', 'send', 'message', 'shape', 'ask', 'compute', 'area', 'shape', 'object', 'invoke', 'subclass', 'method', 'formula', 'appropriate', 'kind', 'object']"
2389,"Distributed message passing provides developers with a layer of the architecture that provides common services to build systems made up of sub-systems that run on disparate computers in different locations and at different times. When a distributed object is sending a message, the messaging layer can take care of issues such as:","['distribute', 'message', 'pass', 'provide', 'developer', 'layer', 'architecture', 'provide', 'common', 'service', 'build', 'system', 'sub', 'system', 'run', 'disparate', 'computer', 'different', 'location', 'different', 'time', 'distribute', 'object', 'send', 'message', 'message', 'layer', 'care', 'issue']"
2390,Synchronous message passing occurs between objects that are running at the same time. It is used by object-oriented programming languages such as Java and Smalltalk.,"['synchronous', 'message', 'pass', 'occur', 'object', 'run', 'time', 'object', 'orient', 'programming', 'language', 'java', 'smalltalk']"
2391,"Synchronous messaging is analogous to a synchronous function call; just as the function caller waits until the function completes, the sending process waits until the receiving process completes. This can make synchronous communication unworkable for some applications. For example, large, distributed systems may not perform well enough to be usable. Such large, distributed systems may need to operate while some of their subsystems are down for maintenance, etc.","['synchronous', 'messaging', 'analogous', 'synchronous', 'function', 'function', 'caller', 'wait', 'function', 'complete', 'send', 'process', 'wait', 'receiving', 'process', 'complete', 'synchronous', 'communication', 'unworkable', 'application', 'example', 'large', 'distribute', 'system', 'perform', 'usable', 'large', 'distribute', 'system', 'need', 'operate', 'subsystem', 'maintenance', 'etc']"
2392,Imagine a busy business office having 100 desktop computers that send emails to each other using synchronous message passing exclusively. One worker turning off their computer can cause the other 99 computers to freeze until the worker turns their computer back on to process a single email.,"['imagine', 'busy', 'business', 'office', 'have', '100', 'desktop', 'computer', 'send', 'email', 'synchronous', 'message', 'pass', 'exclusively', 'worker', 'turn', 'computer', 'cause', 'computer', 'freeze', 'worker', 'turn', 'computer', 'process', 'single', 'email']"
2393,"With asynchronous message passing the receiving object can be down or busy when the requesting object sends the message. Continuing the function call analogy, it is like a function call that returns immediately, without waiting for the called function to complete. Messages are sent to a queue where they are stored until the receiving process requests them. The receiving process processes its messages and sends results to a queue for pickup by the original process or some designated next process.3","['asynchronous', 'message', 'pass', 'receiving', 'object', 'busy', 'request', 'object', 'send', 'message', 'continue', 'function', 'analogy', 'like', 'function', 'return', 'immediately', 'wait', 'call', 'function', 'complete', 'message', 'send', 'queue', 'store', 'receiving', 'process', 'request', 'receiving', 'process', 'process', 'message', 'send', 'result', 'queue', 'pickup', 'original', 'process', 'designate', 'process']"
2394,"Asynchronous messaging requires additional capabilities for storing and retransmitting data for systems that may not run concurrently, and are generally handled by an intermediary level of software often called middleware; a common type being Message-oriented middleware MOM.","['asynchronous', 'messaging', 'require', 'additional', 'capability', 'store', 'retransmit', 'datum', 'system', 'run', 'concurrently', 'generally', 'handle', 'intermediary', 'level', 'software', 'call', 'middleware', 'common', 'type', 'message', 'orient', 'middleware', 'mom']"
2395,"The buffer required in asynchronous communication can cause problems when it is full. A decision has to be made whether to block the sender or whether to discard future messages. A blocked sender may lead to deadlock. If messages are dropped, communication is no longer reliable.","['buffer', 'require', 'asynchronous', 'communication', 'cause', 'problem', 'decision', 'block', 'sender', 'discard', 'future', 'message', 'blocked', 'sender', 'lead', 'deadlock', 'message', 'drop', 'communication', 'long', 'reliable']"
2396,"Synchronous communication can be built on top of asynchronous communication by using a Synchronizer. For example, the α-Synchronizer works by ensuring that the sender always waits for an acknowledgement message from the receiver. The sender only sends the next message after the acknowledgement has been received. On the other hand, asynchronous communication can also be built on top of synchronous communication. For example, modern microkernels generally only provide a synchronous messaging primitivecitation needed and asynchronous messaging can be implemented on top by using helper threads.","['synchronous', 'communication', 'build', 'asynchronous', 'communication', 'synchronizer', 'example', 'synchronizer', 'work', 'ensure', 'sender', 'wait', 'acknowledgement', 'message', 'receiver', 'sender', 'send', 'message', 'acknowledgement', 'receive', 'hand', 'asynchronous', 'communication', 'build', 'synchronous', 'communication', 'example', 'modern', 'microkernel', 'generally', 'provide', 'synchronous', 'messaging', 'primitivecitation', 'need', 'asynchronous', 'messaging', 'implement', 'helper', 'thread']"
2397,"Message-passing systems use either distributed or local objects. With distributed objects the sender and receiver may be on different computers, running different operating systems, using different programming languages, etc. In this case the bus layer takes care of details about converting data from one system to another, sending and receiving data across the network, etc. The Remote Procedure Call RPC protocol in Unix was an early example of this. Note that with this type of message passing it is not a requirement that sender nor receiver use object-oriented programming. Procedural language systems can be wrapped and treated as large grained objects capable of sending and receiving messages.4","['message', 'pass', 'system', 'use', 'distribute', 'local', 'object', 'distribute', 'object', 'sender', 'receiver', 'different', 'computer', 'run', 'different', 'operating', 'system', 'different', 'programming', 'language', 'etc', 'case', 'bus', 'layer', 'take', 'care', 'detail', 'convert', 'datum', 'system', 'send', 'receive', 'datum', 'network', 'etc', 'remote', 'procedure', 'rpc', 'protocol', 'unix', 'early', 'example', 'note', 'type', 'message', 'pass', 'requirement', 'sender', 'receiver', 'use', 'object', 'orient', 'programming', 'procedural', 'language', 'system', 'wrap', 'treat', 'large', 'grain', 'object', 'capable', 'send', 'receive', 'messages']"
2398,"Examples of systems that support distributed objects are: Emerald, ONC RPC, CORBA, Java RMI, DCOM, SOAP, .NET Remoting, CTOS, QNX Neutrino RTOS, OpenBinder and D-Bus. Distributed object systems have been called ""shared nothing"" systems because the message passing abstraction hides underlying state changes that may be used in the implementation of sending messages.","['example', 'system', 'support', 'distribute', 'object', 'emerald', 'onc', 'rpc', 'corba', 'java', 'rmi', 'dcom', 'soap', '.net', 'remoting', 'ctos', 'qnx', 'neutrino', 'rtos', 'openbinder', 'bus', 'distribute', 'object', 'system', 'call', 'share', 'system', 'message', 'pass', 'abstraction', 'hide', 'underlie', 'state', 'change', 'implementation', 'send', 'message']"
2399,"Distributed, or asynchronous, message-passing has additional overhead compared to calling a procedure. In message-passing, arguments must be copied to the new message. Some arguments can contain megabytes of data, all of which must be copied and transmitted to the receiving object.","['distribute', 'asynchronous', 'message', 'passing', 'additional', 'overhead', 'compare', 'call', 'procedure', 'message', 'pass', 'argument', 'copy', 'new', 'message', 'argument', 'contain', 'megabyte', 'datum', 'copy', 'transmit', 'receiving', 'object']"
2400,"Traditional procedure calls differ from message-passing in terms of memory usage, transfer time and locality. Arguments are passed to the receiver typically by general purpose registers requiring no additional storage nor transfer time, or in a parameter list containing the arguments' addresses a few bits. Address-passing is not possible for distributed systems since the systems use separate address spaces.","['traditional', 'procedure', 'call', 'differ', 'message', 'passing', 'term', 'memory', 'usage', 'transfer', 'time', 'locality', 'argument', 'pass', 'receiver', 'typically', 'general', 'purpose', 'register', 'require', 'additional', 'storage', 'transfer', 'time', 'parameter', 'list', 'contain', 'argument', 'address', 'bit', 'address', 'passing', 'possible', 'distribute', 'system', 'system', 'use', 'separate', 'address', 'space']"
2401,Web browsers and web servers are examples of processes that communicate by message-passing. A URL is an example of referencing a resource without exposing process internals.,"['web', 'browser', 'web', 'server', 'example', 'process', 'communicate', 'message', 'passing', 'url', 'example', 'reference', 'resource', 'expose', 'process', 'internal']"
2402,"A subroutine call or method invocation will not exit until the invoked computation has terminated. Asynchronous message-passing, by contrast, can result in a response arriving a significant time after the request message was sent.","['subroutine', 'method', 'invocation', 'exit', 'invoke', 'computation', 'terminate', 'asynchronous', 'message', 'passing', 'contrast', 'result', 'response', 'arrive', 'significant', 'time', 'request', 'message', 'send']"
2403,"A message-handler will, in general, process 5 messages from more than one sender. This means its state can change for reasons unrelated to the behavior of a single sender or client process. This is in contrast to the typical behavior of an object upon which methods are being invoked: the latter is expected to remain in the same state between method invocations. In other words, the message-handler behaves analogously to a volatile object.","['message', 'handler', 'general', 'process', 'message', 'sender', 'mean', 'state', 'change', 'reason', 'unrelated', 'behavior', 'single', 'sender', 'client', 'process', 'contrast', 'typical', 'behavior', 'object', 'method', 'invoke', 'expect', 'remain', 'state', 'method', 'invocation', 'word', 'message', 'handler', 'behave', 'analogously', 'volatile', 'object']"
2404,"The prominent mathematical models of message passing are the Actor model and Pi calculus.67 In mathematical terms a message is the single means to pass control to an object. If the object responds to the message, it has a method for that message.","['prominent', 'mathematical', 'model', 'message', 'passing', 'actor', 'model', 'calculus', 'mathematical', 'term', 'message', 'single', 'mean', 'pass', 'control', 'object', 'object', 'respond', 'message', 'method', 'message']"
2405,"Alan Kay has argued that message passing is more important than objects in OOP, and that objects themselves are often over-emphasized. The live distributed objects programming model builds upon this observation; it uses the concept of a distributed data flow to characterize the behavior of a complex distributed system in terms of message patterns, using high-level, functional-style specifications.8","['alan', 'kay', 'argue', 'message', 'pass', 'important', 'object', 'oop', 'object', 'emphasize', 'live', 'distribute', 'object', 'programming', 'model', 'build', 'observation', 'use', 'concept', 'distribute', 'data', 'flow', 'characterize', 'behavior', 'complex', 'distribute', 'system', 'term', 'message', 'pattern', 'high', 'level', 'functional', 'style', 'specifications']"
2406,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2407,"In object-oriented programming, a metaclass is a class whose instances are classes. Just as an ordinary class defines the behavior of certain objects, a metaclass defines the behavior of certain classes and their instances. Not all object-oriented programming languages support metaclasses. Among those that do, the extent to which metaclasses can override any given aspect of class behavior varies. Metaclasses can be implemented by having classes be first-class citizens, in which case a metaclass is simply an object that constructs classes. Each language has its own metaobject protocol, a set of rules that govern how objects, classes, and metaclasses interact.1","['object', 'orient', 'programming', 'metaclass', 'class', 'instance', 'class', 'ordinary', 'class', 'define', 'behavior', 'certain', 'object', 'metaclass', 'define', 'behavior', 'certain', 'class', 'instance', 'object', 'orient', 'programming', 'language', 'support', 'metaclasse', 'extent', 'metaclasse', 'override', 'give', 'aspect', 'class', 'behavior', 'vary', 'metaclasse', 'implement', 'have', 'class', 'class', 'citizen', 'case', 'metaclass', 'simply', 'object', 'construct', 'class', 'language', 'metaobject', 'protocol', 'set', 'rule', 'govern', 'object', 'class', 'metaclasse', 'interact']"
2408,"In Python, the builtin class type is a metaclass.234 Consider this simple Python class:","['python', 'builtin', 'class', 'type', 'metaclass', 'consider', 'simple', 'python', 'class']"
2409,"At run time, Car itself is an instance of type. The source code of the Car class, shown above, does not include such details as the size in bytes of Car objects, their binary layout in memory, how they are allocated, that the __init__ method is automatically called each time a Car is created, and so on. These details come into play not only when a new Car object is created, but also each time any attribute of a Car is accessed. In languages without metaclasses, these details are defined by the language specification and can't be overridden. In Python, the metaclass - type - controls these details of Car's behavior. They can be overridden by using a different metaclass instead of type.","['run', 'time', 'car', 'instance', 'type', 'source', 'code', 'car', 'class', 'show', 'include', 'detail', 'size', 'byte', 'car', 'object', 'binary', 'layout', 'memory', 'allocate', 'init', 'method', 'automatically', 'call', 'time', 'car', 'create', 'detail', 'come', 'play', 'new', 'car', 'object', 'create', 'time', 'attribute', 'car', 'access', 'language', 'metaclasse', 'detail', 'define', 'language', 'specification', 'overridden', 'python', 'metaclass', 'type', 'control', 'detail', 'car', 'behavior', 'overridden', 'different', 'metaclass', 'instead', 'type']"
2410,"The above example contains some redundant code to do with the four attributes make, model, year, and color. It is possible to eliminate some of this redundancy using a metaclass. In Python, a metaclass is most easily defined as a subclass of type.","['example', 'contain', 'redundant', 'code', 'attribute', 'model', 'year', 'color', 'possible', 'eliminate', 'redundancy', 'metaclass', 'python', 'metaclass', 'easily', 'define', 'subclass', 'type']"
2411,This metaclass only overrides object creation. All other aspects of class and object behavior are still handled by type.,"['metaclass', 'override', 'object', 'creation', 'aspect', 'class', 'object', 'behavior', 'handle', 'type']"
2412,"Now the class Car can be rewritten to use this metaclass. In Python 3 this is done by providing a ""keyword argument"" metaclass to the class definition:","['class', 'car', 'rewrite', 'use', 'metaclass', 'python', 'provide', 'keyword', 'argument', 'metaclass', 'class', 'definition']"
2413,"The resulting object Car can be instantiated as usual, but can contain any number of keyword arguments:","['result', 'object', 'car', 'instantiate', 'usual', 'contain', 'number', 'keyword', 'argument']"
2414,"In Smalltalk, everything is an object. Additionally, Smalltalk is a class based system, which means that every object has a class that defines the structure of that object i.e. the instance variables the object has and the messages an object understands. Together this implies that a class in Smalltalk is an object and that, therefore a class needs to be an instance of a class called metaclass.","['smalltalk', 'object', 'additionally', 'smalltalk', 'class', 'base', 'system', 'mean', 'object', 'class', 'define', 'structure', 'object', 'i.e.', 'instance', 'variable', 'object', 'message', 'object', 'understand', 'imply', 'class', 'smalltalk', 'object', 'class', 'need', 'instance', 'class', 'call', 'metaclass']"
2415,"As an example, a car object c is an instance of the class Car. In turn, the class Car is again an object and as such an instance of the metaclass of Car called Car class. Note the blank in the name of the metaclass. The name of the metaclass is the Smalltalk expression that, when evaluated, results in the metaclass object. Thus evaluating Car class results in the metaclass object for Car whose name is Car class one can confirm this by evaluating Car class name which returns the name of the metaclass of Car.","['example', 'car', 'object', 'instance', 'class', 'car', 'turn', 'class', 'car', 'object', 'instance', 'metaclass', 'car', 'call', 'car', 'class', 'note', 'blank', 'metaclass', 'metaclass', 'smalltalk', 'expression', 'evaluate', 'result', 'metaclass', 'object', 'evaluate', 'car', 'class', 'result', 'metaclass', 'object', 'car', 'car', 'class', 'confirm', 'evaluate', 'car', 'class', 'return', 'metaclass', 'car']"
2416,"Class methods actually belong to the metaclass, just as instance methods actually belong to the class. When a message is sent to the object 2, the search for the method starts in Integer. If it is not found it proceeds up the superclass chain, stopping at Object whether it is found or not.","['class', 'method', 'actually', 'belong', 'metaclass', 'instance', 'method', 'actually', 'belong', 'class', 'message', 'send', 'object', 'search', 'method', 'start', 'integer', 'find', 'proceed', 'superclass', 'chain', 'stop', 'object', 'find']"
2417,"When a message is sent to Integer the search for the method starts in Integer class and proceeds up the superclass chain to Object class. Note that, so far, the metaclass inheritance chain exactly follows that of the class inheritance chain. But the metaclass chain extends further because Object class is the subclass of Class. All metaclasses are subclasses of Class.","['message', 'send', 'integer', 'search', 'method', 'start', 'integer', 'class', 'proceed', 'superclass', 'chain', 'object', 'class', 'note', 'far', 'metaclass', 'inheritance', 'chain', 'exactly', 'follow', 'class', 'inheritance', 'chain', 'metaclass', 'chain', 'extend', 'object', 'class', 'subclass', 'class', 'metaclasse', 'subclass', 'class']"
2418,"In early Smalltalks, there was only one metaclass called Class. This implied that the methods all classes have were the same, in particular the method to create new objects, i.e., new. To allow classes to have their own methods and their own instance variables called class instance variables and should not be confused with class variables, Smalltalk-80 introduced for each class C their own metaclass C class. This means that each metaclass is effectively a singleton class.","['early', 'smalltalks', 'metaclass', 'call', 'class', 'imply', 'method', 'class', 'particular', 'method', 'create', 'new', 'object', 'i.e.', 'new', 'allow', 'class', 'method', 'instance', 'variable', 'call', 'class', 'instance', 'variable', 'confuse', 'class', 'variable', 'smalltalk-80', 'introduce', 'class', 'metaclass', 'class', 'mean', 'metaclass', 'effectively', 'singleton', 'class']"
2419,"Since there is no requirement that metaclasses behave differently from each other, all metaclasses are instances of only one class called Metaclass. The metaclass of Metaclass is called Metaclass class which again is an instance of class Metaclass.","['requirement', 'metaclasse', 'behave', 'differently', 'metaclasse', 'instance', 'class', 'call', 'metaclass', 'metaclass', 'metaclass', 'call', 'metaclass', 'class', 'instance', 'class', 'metaclass']"
2420,"In Smalltalk-80, every class except Object has a superclass. The abstract superclass of all metaclasses is Class, which describes the general nature of classes.","['smalltalk-80', 'class', 'object', 'superclass', 'abstract', 'superclass', 'metaclasse', 'class', 'describe', 'general', 'nature', 'class']"
2421,"The superclass hierarchy for metaclasses parallels that for classes, except for class Object. ALL metaclasses are subclasses of Class, therefore:","['superclass', 'hierarchy', 'metaclasse', 'parallel', 'class', 'class', 'object', 'metaclasse', 'subclass', 'class']"
2422,"Like conjoined twins, classes and metaclasses are born together. Metaclass has an instance variable thisClass, which points to its conjoined class. Note that the usual Smalltalk class browser does not show metaclasses as separate classes. Instead the class browser allows to edit the class together with its metaclass at the same time.","['like', 'conjoined', 'twin', 'class', 'metaclasse', 'bear', 'metaclass', 'instance', 'variable', 'thisclas', 'point', 'conjoined', 'class', 'note', 'usual', 'smalltalk', 'class', 'browser', 'metaclasse', 'separate', 'class', 'instead', 'class', 'browser', 'allow', 'edit', 'class', 'metaclass', 'time']"
2423,The names of classes in the metaclass hierarchy are easily confused with the concepts of the same name. For instance:,"['name', 'class', 'metaclass', 'hierarchy', 'easily', 'confused', 'concept', 'instance']"
2424,"Four classes provide the facilities to describe new classes. Their inheritance hierarchy from Object, and the main facilities they provide are:","['class', 'provide', 'facility', 'describe', 'new', 'class', 'inheritance', 'hierarchy', 'object', 'main', 'facility', 'provide']"
2425,"Ruby purifies the Smalltalk-80 concept of metaclasses by introducing eigenclasses, removing the Metaclass class, and unredefining the class-of map. The change can be schematized as follows:5","['ruby', 'purify', 'smalltalk-80', 'concept', 'metaclasse', 'introduce', 'eigenclasse', 'remove', 'metaclass', 'class', 'unredefine', 'class', 'map', 'change', 'schematize', 'follows']"
2426,"Note in particular the correspondence between Smalltalk's implicit metaclasses and Ruby's eigenclasses of classes. The Ruby eigenclass model makes the concept of implicit metaclasses fully uniform: every object x has its own meta-object, called the eigenclass of x, which is one meta-level higher than x. The ""higher order"" eigenclasses usually exist purely conceptually – they do not contain any methods or store any other data in most Ruby programs.6","['note', 'particular', 'correspondence', 'smalltalk', 'implicit', 'metaclasse', 'ruby', 'eigenclasse', 'class', 'ruby', 'eigenclass', 'model', 'make', 'concept', 'implicit', 'metaclasse', 'fully', 'uniform', 'object', 'meta', 'object', 'call', 'eigenclass', 'meta', 'level', 'high', 'high', 'order', 'eigenclasse', 'usually', 'exist', 'purely', 'conceptually', 'contain', 'method', 'store', 'datum', 'ruby', 'programs']"
2427,"The following diagrams show a sample core structure of Smalltalk-80 and Ruby in comparison.7 In both languages, the structure consists of a built-in part which contains the circular objects i.e. objects that appear in a cycle formed by a combination of blue or green links and a user-part which has four explicit objects: classes A and B and terminal objects u and v. Green links show the child→parent relation of inheritance with the implicit upward direction, blue links show the complementary member→container relation of instantiation a blue link from x points to the least actual container of x that is the start point for the method lookup when a method is invoked on x. Gray nodes display the eigenclasses resp. implicit metaclasses in the case of Smalltalk-80.","['follow', 'diagram', 'sample', 'core', 'structure', 'smalltalk-80', 'ruby', 'comparison', 'language', 'structure', 'consist', 'build', 'contain', 'circular', 'object', 'i.e.', 'object', 'appear', 'cycle', 'form', 'combination', 'blue', 'green', 'link', 'user', 'explicit', 'object', 'class', 'terminal', 'object', 'green', 'link', 'child→parent', 'relation', 'inheritance', 'implicit', 'upward', 'direction', 'blue', 'link', 'complementary', 'member→container', 'relation', 'instantiation', 'blue', 'link', 'point', 'actual', 'container', 'start', 'point', 'method', 'lookup', 'method', 'invoke', 'gray', 'node', 'display', 'eigenclasse', 'resp', 'implicit', 'metaclasse', 'case', 'smalltalk-80']"
2428,The diagram on the right also provides a picture of lazy evaluation of eigenclasses in Ruby. The v object can have its eigenclass evaluated allocated as a consequence of adding singleton methods to v.,"['diagram', 'right', 'provide', 'picture', 'lazy', 'evaluation', 'eigenclasse', 'ruby', 'object', 'eigenclass', 'evaluate', 'allocate', 'consequence', 'add', 'singleton', 'method']"
2429,"According to the Ruby's introspection method named class, the class of every class and of every eigenclass is constantly the Class class denoted by c in the diagram. Class, and Struct are the only classes that have classes as instances.8disputed – discuss Subclassing of Class is disallowed. Following the standard definition of metaclasses we can conclude that Class and Struct are the only metaclasses in Ruby. This seems to contradict the correspondence between Ruby and Smalltalk, since in Smalltalk-80, every class has its own metaclass. The discrepancy is based on the disagreement between the class introspection method in Ruby and Smalltalk. While the map x ↦ x.class coincides on terminal objects, it differs in the restriction to classes. As already mentioned above, for a class x, the Ruby expression x.class evaluates constantly to Class. In Smalltalk-80, if x is a class then the expression x class corresponds to the Ruby's x.singleton_class – which evaluates to the eigenclass of x.","['accord', 'ruby', 'introspection', 'method', 'name', 'class', 'class', 'class', 'eigenclass', 'constantly', 'class', 'class', 'denote', 'diagram', 'class', 'struct', 'class', 'class', 'instancesdispute', 'discuss', 'subclassing', 'class', 'disallow', 'follow', 'standard', 'definition', 'metaclasse', 'conclude', 'class', 'struct', 'metaclasse', 'ruby', 'contradict', 'correspondence', 'ruby', 'smalltalk', 'smalltalk-80', 'class', 'metaclass', 'discrepancy', 'base', 'disagreement', 'class', 'introspection', 'method', 'ruby', 'smalltalk', 'map', 'x.class', 'coincide', 'terminal', 'object', 'differ', 'restriction', 'class', 'mention', 'class', 'ruby', 'expression', 'x.class', 'evaluate', 'constantly', 'class', 'smalltalk-80', 'class', 'expression', 'class', 'correspond', 'ruby', 'x.singleton_class', 'evaluate', 'eigenclass']"
2430,"Metaclasses in Objective-C are almost the same as those in Smalltalk-80—not surprising since Objective-C borrows a lot from Smalltalk. Like Smalltalk, in Objective-C, the instance variables and methods are defined by an object's class. A class is an object, hence it is an instance of a metaclass.","['metaclasse', 'objective', 'smalltalk-80', 'surprising', 'objective', 'borrow', 'lot', 'smalltalk', 'like', 'smalltalk', 'objective', 'instance', 'variable', 'method', 'define', 'object', 'class', 'class', 'object', 'instance', 'metaclass']"
2431,"Like Smalltalk, in Objective-C, class methods are simply methods called on the class object, hence a class's class methods must be defined as instance methods in its metaclass. Because different classes can have different sets of class methods, each class must have its own separate metaclass. Classes and metaclasses are always created as a pair: the runtime has functions objc_allocateClassPair and objc_registerClassPair to create and register class-metaclass pairs, respectively.","['like', 'smalltalk', 'objective', 'class', 'method', 'simply', 'method', 'call', 'class', 'object', 'class', 'class', 'method', 'define', 'instance', 'method', 'metaclass', 'different', 'class', 'different', 'set', 'class', 'method', 'class', 'separate', 'metaclass', 'class', 'metaclasse', 'create', 'pair', 'runtime', 'function', 'objc_allocateclasspair', 'objc_registerclasspair', 'create', 'register', 'class', 'metaclass', 'pair', 'respectively']"
2432,"There are no names for the metaclasses; however, a pointer to any class object can be referred to with the generic type Class similar to the type id being used for a pointer to any object.","['name', 'metaclasse', 'pointer', 'class', 'object', 'refer', 'generic', 'type', 'class', 'similar', 'type', 'pointer', 'object']"
2433,"Because class methods are inherited through inheritance, like Smalltalk, metaclasses must follow an inheritance scheme paralleling that of classes e.g. if class A's parent class is class B, then A's metaclass's parent class is B's metaclass, except that of the root class.","['class', 'method', 'inherit', 'inheritance', 'like', 'smalltalk', 'metaclasse', 'follow', 'inheritance', 'scheme', 'parallel', 'class', 'e.g.', 'class', 'parent', 'class', 'class', 'metaclass', 'parent', 'class', 'metaclass', 'root', 'class']"
2434,"Unlike Smalltalk, the metaclass of the root class inherits from the root class usually NSObject using the Cocoa framework itself. This ensures that all class objects are ultimately instances of the root class, so that you can use the instance methods of the root class, usually useful utility methods for objects, on class objects themselves.","['unlike', 'smalltalk', 'metaclass', 'root', 'class', 'inherit', 'root', 'class', 'usually', 'nsobject', 'cocoa', 'framework', 'ensure', 'class', 'object', 'ultimately', 'instance', 'root', 'class', 'use', 'instance', 'method', 'root', 'class', 'usually', 'useful', 'utility', 'method', 'object', 'class', 'object']"
2435,"Since metaclass objects do not behave differently you cannot add class methods for a metaclass, so metaclass objects all have the same methods, they are all instances of the same class—the metaclass of the root class unlike Smalltalk. Thus, the metaclass of the root class is an instance of itself. The reason for this is that all metaclasses inherit from root class; hence, they must inherit the class methods of the root class.9","['metaclass', 'object', 'behave', 'differently', 'add', 'class', 'method', 'metaclass', 'metaclass', 'object', 'method', 'instance', 'class', 'metaclass', 'root', 'class', 'unlike', 'smalltalk', 'metaclass', 'root', 'class', 'instance', 'reason', 'metaclasse', 'inherit', 'root', 'class', 'inherit', 'class', 'method', 'root', 'class']"
2436,The following are some of the most prominent programming languages that support metaclasses.,"['follow', 'prominent', 'programming', 'language', 'support', 'metaclasse']"
2437,"Some less widespread languages that support metaclasses include OpenJava, OpenC++, OpenAda, CorbaScript, ObjVLisp, Object-Z, MODEL-K, XOTcl, and MELDC. Several of these languages date from the early 1990s and are of academic interest.11","['widespread', 'language', 'support', 'metaclasse', 'include', 'openjava', 'openc++', 'openada', 'corbascript', 'objvlisp', 'object', 'model', 'xotcl', 'meldc', 'language', 'date', 'early', '1990', 'academic', 'interest']"
2438,"Logtalk, an object-oriented extension of Prolog, also supports metaclasses.","['logtalk', 'object', 'orient', 'extension', 'prolog', 'support', 'metaclasse']"
2439,Resource Description Framework RDF and Unified Modeling Language UML both support metaclasses.,"['resource', 'description', 'framework', 'rdf', 'unified', 'modeling', 'language', 'uml', 'support', 'metaclasse']"
2440,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2441,"Metaprogramming is a programming technique in which computer programs have the ability to treat other programs as their data. It means that a program can be designed to read, generate, analyze or transform other programs, and even modify itself while running.12 In some cases, this allows programmers to minimize the number of lines of code to express a solution, in turn reducing development time.3 It also allows programs a greater flexibility to efficiently handle new situations without recompilation.","['metaprogramming', 'programming', 'technique', 'computer', 'program', 'ability', 'treat', 'program', 'datum', 'mean', 'program', 'design', 'read', 'generate', 'analyze', 'transform', 'program', 'modify', 'running', 'case', 'allow', 'programmer', 'minimize', 'number', 'line', 'code', 'express', 'solution', 'turn', 'reduce', 'development', 'time', 'allow', 'program', 'great', 'flexibility', 'efficiently', 'handle', 'new', 'situation', 'recompilation']"
2442,"Metaprogramming can be used to move computations from run-time to compile-time, to generate code using compile time computations, and to enable self-modifying code. The ability of a programming language to be its own metalanguage is called reflection.4 Reflection is a valuable language feature to facilitate metaprogramming.","['metaprogramming', 'computation', 'run', 'time', 'compile', 'time', 'generate', 'code', 'compile', 'time', 'computation', 'enable', 'self', 'modifying', 'code', 'ability', 'programming', 'language', 'metalanguage', 'call', 'reflection', 'reflection', 'valuable', 'language', 'feature', 'facilitate', 'metaprogramme']"
2443,Metaprogramming was popular in the 1970s and 1980s using list processing languages such as LISP. LISP hardware machines were popular in the 1980s and enabled applications that could process code. They were frequently used for artificial intelligence applications.,"['metaprogramming', 'popular', '1970', '1980', 'list', 'processing', 'language', 'lisp', 'lisp', 'hardware', 'machine', 'popular', '1980', 'enable', 'application', 'process', 'code', 'frequently', 'artificial', 'intelligence', 'application']"
2444,"Metaprogramming enables developers to write programs and develop code that falls under the generic programming paradigm. Having the programming language itself as a first-class data type as in Lisp, Prolog, SNOBOL, or Rebol is also very useful; this is known as homoiconicity. Generic programming invokes a metaprogramming facility within a language by allowing one to write code without the concern of specifying data types since they can be supplied as parameters when used.","['metaprogramming', 'enable', 'developer', 'write', 'program', 'develop', 'code', 'fall', 'generic', 'programming', 'paradigm', 'have', 'programming', 'language', 'class', 'datum', 'type', 'lisp', 'prolog', 'snobol', 'rebol', 'useful', 'know', 'homoiconicity', 'generic', 'programming', 'invoke', 'metaprogramming', 'facility', 'language', 'allow', 'write', 'code', 'concern', 'specify', 'data', 'type', 'supply', 'parameter']"
2445,Metaprogramming usually works in one of three ways.5,"['metaprogramme', 'usually', 'work', 'ways']"
2446,"Lisp is probably the quintessential language with metaprogramming facilities, both because of its historical precedence and because of the simplicity and power of its metaprogramming. In Lisp metaprogramming, the unquote operator typically a comma introduces code that is evaluated at program definition time rather than at run time; see Self-evaluating forms and quoting in Lisp. The metaprogramming language is thus identical to the host programming language, and existing Lisp routines can be directly reused for metaprogramming, if desired. This approach has been implemented in other languages by incorporating an interpreter in the program, which works directly with the program's data. There are implementations of this kind for some common high-level languages, such as RemObjects’ Pascal Script for Object Pascal.","['lisp', 'probably', 'quintessential', 'language', 'metaprogramme', 'facility', 'historical', 'precedence', 'simplicity', 'power', 'metaprogramming', 'lisp', 'metaprogramming', 'unquote', 'operator', 'typically', 'comma', 'introduce', 'code', 'evaluate', 'program', 'definition', 'time', 'run', 'time', 'self', 'evaluate', 'form', 'quote', 'lisp', 'metaprogramming', 'language', 'identical', 'host', 'programming', 'language', 'exist', 'lisp', 'routine', 'directly', 'reuse', 'metaprogramme', 'desire', 'approach', 'implement', 'language', 'incorporate', 'interpreter', 'program', 'work', 'directly', 'program', 'datum', 'implementation', 'kind', 'common', 'high', 'level', 'language', 'remobjects', 'pascal', 'script', 'object', 'pascal']"
2447,"A simple example of a metaprogram is this POSIX Shell script, which is an example of generative programming:","['simple', 'example', 'metaprogram', 'posix', 'shell', 'script', 'example', 'generative', 'programming']"
2448,"This script or program generates a new 993-line program that prints out the numbers 1–992. This is only an illustration of how to use code to write more code; it is not the most efficient way to print out a list of numbers. Nonetheless, a programmer can write and execute this metaprogram in less than a minute, and will have generated over 1000 lines of code in that amount of time.","['script', 'program', 'generate', 'new', '993', 'line', 'program', 'print', 'number', '1–992', 'illustration', 'use', 'code', 'write', 'code', 'efficient', 'way', 'print', 'list', 'number', 'nonetheless', 'programmer', 'write', 'execute', 'metaprogram', 'minute', 'generate', '1000', 'line', 'code', 'time']"
2449,A quine is a special kind of metaprogram that produces its own source code as its output. Quines are generally of recreational or theoretical interest only.,"['quine', 'special', 'kind', 'metaprogram', 'produce', 'source', 'code', 'output', 'quine', 'generally', 'recreational', 'theoretical', 'interest']"
2450,"Not all metaprogramming involves generative programming. If programs are modifiable at runtime or if incremental compilation is available such as in C#, Forth, Frink, Groovy, JavaScript, Lisp, Elixir, Lua, Nim, Perl, PHP, Python, REBOL, Ruby, Rust, SAS, Smalltalk, and Tcl, then techniques can be used to perform metaprogramming without actually generating source code.","['metaprogramme', 'involve', 'generative', 'programming', 'program', 'modifiable', 'runtime', 'incremental', 'compilation', 'available', 'forth', 'frink', 'groovy', 'javascript', 'lisp', 'elixir', 'lua', 'nim', 'perl', 'php', 'python', 'rebol', 'ruby', 'rust', 'sas', 'smalltalk', 'tcl', 'technique', 'perform', 'metaprogramme', 'actually', 'generate', 'source', 'code']"
2451,"One style of generative approach is to employ domain-specific languages DSLs. A fairly common example of using DSLs involves generative metaprogramming: lex and yacc, two tools used to generate lexical analyzers and parsers, let the user describe the language using regular expressions and context-free grammars, and embed the complex algorithms required to efficiently parse the language.","['style', 'generative', 'approach', 'employ', 'domain', 'specific', 'language', 'dsl', 'fairly', 'common', 'example', 'dsl', 'involve', 'generative', 'metaprogramming', 'lex', 'yacc', 'tool', 'generate', 'lexical', 'analyzer', 'parser', 'let', 'user', 'describe', 'language', 'regular', 'expression', 'context', 'free', 'grammar', 'embed', 'complex', 'algorithm', 'require', 'efficiently', 'parse', 'language']"
2452,One usage of metaprogramming is to instrument programs in order to do dynamic program analysis.,"['usage', 'metaprogramme', 'instrument', 'program', 'order', 'dynamic', 'program', 'analysis']"
2453,"Metaprogramming can be used to weave behavioral changes in a program, as done in aspect-oriented programming. For instance, metaprogramming can be used to inject feature flags or to explore possible patches for fixing bugs.8","['metaprogramming', 'weave', 'behavioral', 'change', 'program', 'aspect', 'orient', 'programming', 'instance', 'metaprogramme', 'inject', 'feature', 'flag', 'explore', 'possible', 'patch', 'fix', 'bugs']"
2454,"Some argue that there is a sharp learning curve to make complete use of metaprogramming features.9 Since metaprogramming gives more flexibility and configurability at runtime, misuse or incorrect use of the metaprogramming can result in unwarranted and unexpected errors that can be extremely difficult to debug to an average developer. It can introduce risks in the system and make it more vulnerable if not used with care. Some of the common problems which can occur due to wrong use of metaprogramming are inability of the compiler to identify missing configuration parameters, invalid or incorrect data can result in unknown exception or different results.10 Due to this, some believe9 that only high-skilled developers should work on developing features which exercise metaprogramming in a language or platform and average developers must learn how to use these features as part of convention.","['argue', 'sharp', 'learning', 'curve', 'complete', 'use', 'metaprogramme', 'features', 'metaprogramme', 'give', 'flexibility', 'configurability', 'runtime', 'misuse', 'incorrect', 'use', 'metaprogramming', 'result', 'unwarranted', 'unexpected', 'error', 'extremely', 'difficult', 'debug', 'average', 'developer', 'introduce', 'risk', 'system', 'vulnerable', 'care', 'common', 'problem', 'occur', 'wrong', 'use', 'metaprogramme', 'inability', 'compiler', 'identify', 'miss', 'configuration', 'parameter', 'invalid', 'incorrect', 'datum', 'result', 'unknown', 'exception', 'different', 'results', 'believe9', 'high', 'skilled', 'developer', 'work', 'develop', 'feature', 'exercise', 'metaprogramme', 'language', 'platform', 'average', 'developer', 'learn', 'use', 'feature', 'convention']"
2455,The IBM/360 and derivatives had powerful macro assembler facilities that were often used to generate complete assembly language programscitation needed or sections of programs for different operating systems for instance. Macros provided with CICS transaction processing system had assembler macros that generated COBOL statements as a pre-processing step.,"['derivative', 'powerful', 'macro', 'assembler', 'facility', 'generate', 'complete', 'assembly', 'language', 'programscitation', 'need', 'section', 'program', 'different', 'operating', 'system', 'instance', 'macros', 'provide', 'cics', 'transaction', 'processing', 'system', 'assembler', 'macros', 'generate', 'cobol', 'statement', 'pre', 'processing', 'step']"
2456,"Other assemblers, such as MASM, also support macros.","['assembler', 'masm', 'support', 'macros']"
2457,Metaclasses are provided by the following programming languages:,"['metaclasse', 'provide', 'follow', 'programming', 'language']"
2458,"Usage of dependent types allows proving that generated code is never invalid.16 However, this approach is bleeding-edge and is rarely found outside of research programming languages.","['usage', 'dependent', 'type', 'allow', 'prove', 'generate', 'code', 'invalid', 'approach', 'bleed', 'edge', 'rarely', 'find', 'outside', 'research', 'programming', 'language']"
2459,The list of notable metaprogramming systems is maintained at List of Program Transformation Systems.,"['list', 'notable', 'metaprogramming', 'system', 'maintain', 'list', 'program', 'transformation', 'systems']"
2460,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2461,"A method in object-oriented programming OOP is a procedure associated with a message and an object. An object consists of state data and behavior; these compose an interface, which specifies how the object may be utilized by any of its various consumers. A method is a behavior of an object parametrized by a consumer.","['method', 'object', 'orient', 'programming', 'oop', 'procedure', 'associate', 'message', 'object', 'object', 'consist', 'state', 'datum', 'behavior', 'compose', 'interface', 'specify', 'object', 'utilize', 'consumer', 'method', 'behavior', 'object', 'parametrize', 'consumer']"
2462,"Data is represented as properties of the object, and behaviors are represented as methods. For example, a Window object could have methods such as open and close, while its state whether it is open or closed at any given point in time would be a property.","['datum', 'represent', 'property', 'object', 'behavior', 'represent', 'method', 'example', 'window', 'object', 'method', 'open', 'close', 'state', 'open', 'close', 'give', 'point', 'time', 'property']"
2463,"In class-based programming, methods are defined within a class, and objects are instances of a given class. One of the most important capabilities that a method provides is method overriding - the same name e.g., area can be used for multiple different kinds of classes. This allows the sending objects to invoke behaviors and to delegate the implementation of those behaviors to the receiving object. A method in Java programming sets the behavior of a class object. For example, an object can send an area message to another object and the appropriate formula is invoked whether the receiving object is a rectangle, circle, triangle, etc.","['class', 'base', 'programming', 'method', 'define', 'class', 'object', 'instance', 'give', 'class', 'important', 'capability', 'method', 'provide', 'method', 'override', 'e.g.', 'area', 'multiple', 'different', 'kind', 'class', 'allow', 'send', 'object', 'invoke', 'behavior', 'delegate', 'implementation', 'behavior', 'receiving', 'object', 'method', 'java', 'programming', 'set', 'behavior', 'class', 'object', 'example', 'object', 'send', 'area', 'message', 'object', 'appropriate', 'formula', 'invoke', 'receiving', 'object', 'rectangle', 'circle', 'triangle', 'etc']"
2464,Methods also provide the interface that other classes use to access and modify the properties of an object; this is known as encapsulation. Encapsulation and overriding are the two primary distinguishing features between methods and procedure calls.1,"['method', 'provide', 'interface', 'class', 'use', 'access', 'modify', 'property', 'object', 'know', 'encapsulation', 'encapsulation', 'override', 'primary', 'distinguish', 'feature', 'method', 'procedure', 'calls']"
2465,"Method overriding and overloading are two of the most significant ways that a method differs from a conventional procedure or function call. Overriding refers to a subclass redefining the implementation of a method of its superclass. For example, findArea may be a method defined on a shape class,2 triangle, etc. would each define the appropriate formula to calculate their area. The idea is to look at objects as ""black boxes"" so that changes to the internals of the object can be made with minimal impact on the other objects that use it. This is known as encapsulation and is meant to make code easier to maintain and re-use.","['method', 'override', 'overloading', 'significant', 'way', 'method', 'differ', 'conventional', 'procedure', 'function', 'override', 'refer', 'subclass', 'redefine', 'implementation', 'method', 'superclass', 'example', 'findarea', 'method', 'define', 'shape', 'class', 'triangle', 'etc', 'define', 'appropriate', 'formula', 'calculate', 'area', 'idea', 'look', 'object', 'black', 'box', 'change', 'internal', 'object', 'minimal', 'impact', 'object', 'use', 'know', 'encapsulation', 'mean', 'code', 'easy', 'maintain', 'use']"
2466,"Method overloading, on the other hand, refers to differentiating the code used to handle a message based on the parameters of the method. If one views the receiving object as the first parameter in any method then overriding is just a special case of overloading where the selection is based only on the first argument. The following simple Java example illustrates the difference:","['method', 'overloading', 'hand', 'refer', 'differentiate', 'code', 'handle', 'message', 'base', 'parameter', 'method', 'view', 'receiving', 'object', 'parameter', 'method', 'override', 'special', 'case', 'overload', 'selection', 'base', 'argument', 'follow', 'simple', 'java', 'example', 'illustrate', 'difference']"
2467,"Accessor methods are used to read the data values of an object. Mutator methods are used to modify the data of an object. Manager methods are used to initialize and destroy objects of a class, e.g. constructors and destructors.","['accessor', 'method', 'read', 'datum', 'value', 'object', 'mutator', 'method', 'modify', 'datum', 'object', 'manager', 'method', 'initialize', 'destroy', 'object', 'class', 'e.g.', 'constructor', 'destructor']"
2468,"These methods provide an abstraction layer that facilitates encapsulation and modularity. For example, if a bank-account class provides a getBalance accessor method to retrieve the current balance rather than directly accessing the balance data fields, then later revisions of the same code can implement a more complex mechanism for balance retrieval e.g., a database fetch, without the dependent code needing to be changed. The concepts of encapsulation and modularity are not unique to object-oriented programming. Indeed, in many ways the object-oriented approach is simply the logical extension of previous paradigms such as abstract data types and structured programming.3","['method', 'provide', 'abstraction', 'layer', 'facilitate', 'encapsulation', 'modularity', 'example', 'bank', 'account', 'class', 'provide', 'getbalance', 'accessor', 'method', 'retrieve', 'current', 'balance', 'directly', 'access', 'balance', 'datum', 'field', 'later', 'revision', 'code', 'implement', 'complex', 'mechanism', 'balance', 'retrieval', 'e.g.', 'database', 'fetch', 'dependent', 'code', 'need', 'change', 'concept', 'encapsulation', 'modularity', 'unique', 'object', 'orient', 'programming', 'way', 'object', 'orient', 'approach', 'simply', 'logical', 'extension', 'previous', 'paradigms', 'abstract', 'datum', 'type', 'structure', 'programming']"
2469,"A constructor is a method that is called at the beginning of an object's lifetime to create and initialize the object, a process called construction or instantiation. Initialization may include an acquisition of resources. Constructors may have parameters but usually do not return values in most languages. See the following example in Java:","['constructor', 'method', 'call', 'beginning', 'object', 'lifetime', 'create', 'initialize', 'object', 'process', 'call', 'construction', 'instantiation', 'initialization', 'include', 'acquisition', 'resource', 'constructor', 'parameter', 'usually', 'return', 'value', 'language', 'follow', 'example', 'java']"
2470,"A destructor is a method that is called automatically at the end of an object's lifetime, a process called destruction. Destruction in most languages does not allow destructor method arguments nor return values. Destruction can be implemented so as to perform cleanup chores and other tasks at object destruction.","['destructor', 'method', 'call', 'automatically', 'end', 'object', 'lifetime', 'process', 'call', 'destruction', 'destruction', 'language', 'allow', 'destructor', 'method', 'argument', 'return', 'value', 'destruction', 'implement', 'perform', 'cleanup', 'chore', 'task', 'object', 'destruction']"
2471,"In garbage-collected languages, such as Java, C#, and Python, destructors are known as finalizers. They have a similar purpose and function to destructors, but because of the differences between languages that utilize garbage-collection and languages with manual memory management, the sequence in which they are called is different.","['garbage', 'collect', 'language', 'java', 'python', 'destructor', 'know', 'finalizer', 'similar', 'purpose', 'function', 'destructor', 'difference', 'language', 'utilize', 'garbage', 'collection', 'language', 'manual', 'memory', 'management', 'sequence', 'call', 'different']"
2472,An abstract method is one with only a signature and no implementation body. It is often used to specify that a subclass must provide an implementation of the method. Abstract methods are used to specify interfaces in some programming languages.4,"['abstract', 'method', 'signature', 'implementation', 'body', 'specify', 'subclass', 'provide', 'implementation', 'method', 'abstract', 'method', 'specify', 'interface', 'programming', 'languages']"
2473,The following Java code shows an abstract class that needs to be extended:,"['follow', 'java', 'code', 'show', 'abstract', 'class', 'need', 'extend']"
2474,The following subclass extends the main class:,"['following', 'subclass', 'extend', 'main', 'class']"
2475,"If a subclass provides an implementation for an abstract method, another subclass can make it abstract again. This is called reabstraction.","['subclass', 'provide', 'implementation', 'abstract', 'method', 'subclass', 'abstract', 'call', 'reabstraction']"
2476,"In practice, this is rarely used.","['practice', 'rarely']"
2477,"In C#, a virtual method can be overridden with an abstract method. This also applies to Java, where all non-private methods are virtual.","['virtual', 'method', 'overridden', 'abstract', 'method', 'apply', 'java', 'non', 'private', 'method', 'virtual']"
2478,"Interfaces' default methods can also be reabstracted, requiring subclasses to implement them. This also applies to Java.","['interface', 'default', 'method', 'reabstracte', 'require', 'subclass', 'implement', 'apply', 'java']"
2479,"Class methods are methods that are called on a class rather than an instance. They are typically used as part of an object meta-model. I.e, for each class, defined an instance of the class object in the meta-model is created. Meta-model protocols allow classes to be created and deleted. In this sense, they provide the same functionality as constructors and destructors described above. But in some languages such as the Common Lisp Object System CLOS the meta-model allows the developer to dynamically alter the object model at run time: e.g., to create new classes, redefine the class hierarchy, modify properties, etc.","['class', 'method', 'method', 'call', 'class', 'instance', 'typically', 'object', 'meta', 'model', 'i.e', 'class', 'define', 'instance', 'class', 'object', 'meta', 'model', 'create', 'meta', 'model', 'protocol', 'allow', 'class', 'create', 'delete', 'sense', 'provide', 'functionality', 'constructor', 'destructor', 'describe', 'language', 'common', 'lisp', 'object', 'system', 'clos', 'meta', 'model', 'allow', 'developer', 'dynamically', 'alter', 'object', 'model', 'run', 'time', 'e.g.', 'create', 'new', 'class', 'redefine', 'class', 'hierarchy', 'modify', 'property', 'etc']"
2480,"Special methods are very language-specific and a language may support none, some, or all of the special methods defined here. A language's compiler may automatically generate default special methods or a programmer may be allowed to optionally define special methods. Most special methods cannot be directly called, but rather the compiler generates code to call them at appropriate times.","['special', 'method', 'language', 'specific', 'language', 'support', 'special', 'method', 'define', 'language', 'compiler', 'automatically', 'generate', 'default', 'special', 'method', 'programmer', 'allow', 'optionally', 'define', 'special', 'method', 'special', 'method', 'directly', 'call', 'compiler', 'generate', 'code', 'appropriate', 'time']"
2481,"Static methods are meant to be relevant to all the instances of a class rather than to any specific instance. They are similar to static variables in that sense. An example would be a static method to sum the values of all the variables of every instance of a class. For example, if there were a Product class it might have a static method to compute the average price of all products.","['static', 'method', 'mean', 'relevant', 'instance', 'class', 'specific', 'instance', 'similar', 'static', 'variable', 'sense', 'example', 'static', 'method', 'sum', 'value', 'variable', 'instance', 'class', 'example', 'product', 'class', 'static', 'method', 'compute', 'average', 'price', 'product']"
2482,"In Java, a commonly used static method is:","['java', 'commonly', 'static', 'method']"
2483,This static method has no owning object and does not run on an instance. It receives all information from its arguments.2,"['static', 'method', 'own', 'object', 'run', 'instance', 'receive', 'information', 'arguments']"
2484,"A static method can be invoked even if no instances of the class exist yet. Static methods are called ""static"" because they are resolved at compile time based on the class they are called on and not dynamically as in the case with instance methods, which are resolved polymorphically based on the runtime type of the object.","['static', 'method', 'invoke', 'instance', 'class', 'exist', 'static', 'method', 'call', 'static', 'resolve', 'compile', 'time', 'base', 'class', 'call', 'dynamically', 'case', 'instance', 'method', 'resolve', 'polymorphically', 'base', 'runtime', 'type', 'object']"
2485,Copy-assignment operators define actions to be performed by the compiler when a class object is assigned to a class object of the same type.,"['copy', 'assignment', 'operator', 'define', 'action', 'perform', 'compiler', 'class', 'object', 'assign', 'class', 'object', 'type']"
2486,Operator methods define or redefine operator symbols and define the operations to be performed with the symbol and the associated method parameters. C++ example:,"['operator', 'method', 'define', 'redefine', 'operator', 'symbol', 'define', 'operation', 'perform', 'symbol', 'associate', 'method', 'parameter', 'c++', 'example']"
2487,"Some procedural languages were extended with object-oriented capabilities to leverage the large skill sets and legacy code for those languages but still provide the benefits of object-oriented development. Perhaps the most well-known example is C++, an object-oriented extension of the C programming language. Due to the design requirements to add the object-oriented paradigm on to an existing procedural language, message passing in C++ has some unique capabilities and terminologies. For example, in C++ a method is known as a member function. C++ also has the concept of virtual functions which are member functions that can be overridden in derived classes and allow for dynamic dispatch.","['procedural', 'language', 'extend', 'object', 'orient', 'capability', 'leverage', 'large', 'skill', 'set', 'legacy', 'code', 'language', 'provide', 'benefit', 'object', 'orient', 'development', 'know', 'example', 'c++', 'object', 'orient', 'extension', 'programming', 'language', 'design', 'requirement', 'add', 'object', 'orient', 'paradigm', 'exist', 'procedural', 'language', 'message', 'pass', 'c++', 'unique', 'capability', 'terminology', 'example', 'c++', 'method', 'know', 'member', 'function', 'c++', 'concept', 'virtual', 'function', 'member', 'function', 'overridden', 'derive', 'class', 'allow', 'dynamic', 'dispatch']"
2488,"Virtual functions are the means by which a C++ class can achieve polymorphic behavior. Non-virtual member functions, or regular methods, are those that do not participate in polymorphism.","['virtual', 'function', 'mean', 'c++', 'class', 'achieve', 'polymorphic', 'behavior', 'non', 'virtual', 'member', 'function', 'regular', 'method', 'participate', 'polymorphism']"
2489,"In object-oriented programming languages, a mixin or mix-in1234 is a class that contains methods for use by other classes without having to be the parent class of those other classes. How those other classes gain access to the mixin's methods depends on the language. Mixins are sometimes described as being ""included"" rather than ""inherited"".","['object', 'orient', 'programming', 'language', 'mixin', 'mix', 'in1234', 'class', 'contain', 'method', 'use', 'class', 'have', 'parent', 'class', 'class', 'class', 'gain', 'access', 'mixin', 'method', 'depend', 'language', 'mixin', 'describe', 'include', 'inherit']"
2490,"Mixins encourage code reuse and can be used to avoid the inheritance ambiguity that multiple inheritance can cause5 the ""diamond problem"", or to work around lack of support for multiple inheritance in a language. A mixin can also be viewed as an interface with implemented methods. This pattern is an example of enforcing the dependency inversion principle.","['mixin', 'encourage', 'code', 'reuse', 'avoid', 'inheritance', 'ambiguity', 'multiple', 'inheritance', 'cause5', 'diamond', 'problem', 'work', 'lack', 'support', 'multiple', 'inheritance', 'language', 'mixin', 'view', 'interface', 'implement', 'method', 'pattern', 'example', 'enforce', 'dependency', 'inversion', 'principle']"
2491,"Mixins first appeared in Symbolics's object-oriented Flavors system developed by Howard Cannon, which was an approach to object-orientation used in Lisp Machine Lisp. The name was inspired by Steve's Ice Cream Parlor in Somerville, Massachusetts:1 The owner of the ice cream shop offered a basic flavor of ice cream vanilla, chocolate, etc. and blended in a combination of extra items nuts, cookies, fudge, etc. and called the item a ""mix-in"", his own trademarked term at the time.2","['mixin', 'appear', 'symbolics', 'object', 'orient', 'flavor', 'system', 'develop', 'howard', 'cannon', 'approach', 'object', 'orientation', 'lisp', 'machine', 'lisp', 'inspire', 'steve', 'ice', 'cream', 'parlor', 'somerville', 'massachusetts', 'owner', 'ice', 'cream', 'shop', 'offer', 'basic', 'flavor', 'ice', 'cream', 'vanilla', 'chocolate', 'etc', 'blend', 'combination', 'extra', 'item', 'nuts', 'cookie', 'fudge', 'etc', 'call', 'item', 'mix', 'trademark', 'term', 'time']"
2492,"Mixins are a language concept that allows a programmer to inject some code into a class. Mixin programming is a style of software development, in which units of functionality are created in a class and then mixed in with other classes.6","['mixin', 'language', 'concept', 'allow', 'programmer', 'inject', 'code', 'class', 'mixin', 'programming', 'style', 'software', 'development', 'unit', 'functionality', 'create', 'class', 'mix', 'classes']"
2493,"A mixin class acts as the parent class, containing the desired functionality. A subclass can then inherit or simply reuse this functionality, but not as a means of specialization. Typically, the mixin will export the desired functionality to a child class, without creating a rigid, single ""is a"" relationship. Here lies the important difference between the concepts of mixins and inheritance, in that the child class can still inherit all the features of the parent class, but, the semantics about the child ""being a kind of"" the parent need not be necessarily applied.","['mixin', 'class', 'act', 'parent', 'class', 'contain', 'desire', 'functionality', 'subclass', 'inherit', 'simply', 'reuse', 'functionality', 'means', 'specialization', 'typically', 'mixin', 'export', 'desire', 'functionality', 'child', 'class', 'create', 'rigid', 'single', 'relationship', 'lie', 'important', 'difference', 'concept', 'mixin', 'inheritance', 'child', 'class', 'inherit', 'feature', 'parent', 'class', 'semantic', 'child', 'kind', 'parent', 'need', 'necessarily', 'apply']"
2494,"In Simula, classes are defined in a block in which attributes, methods and class initialization are all defined together; thus all the methods that can be invoked on a class are defined together, and the definition of the class is complete.","['simula', 'class', 'define', 'block', 'attribute', 'method', 'class', 'initialization', 'define', 'method', 'invoke', 'class', 'define', 'definition', 'class', 'complete']"
2495,"In Flavors, a mixin is a class from which another class can inherit slot definitions and methods. The mixin usually does not have direct instances. Since a Flavor can inherit from more than one other Flavor, it can inherit from one or more mixins. Note that the original Flavors did not use generic functions.","['flavors', 'mixin', 'class', 'class', 'inherit', 'slot', 'definition', 'method', 'mixin', 'usually', 'direct', 'instance', 'flavor', 'inherit', 'flavor', 'inherit', 'mixin', 'note', 'original', 'flavors', 'use', 'generic', 'function']"
2496,"In New Flavors a successor of Flavors and CLOS, methods are organized in ""generic functions"". These generic functions are functions that are defined in multiple cases methods by class dispatch and method combinations.","['new', 'flavors', 'successor', 'flavors', 'clos', 'method', 'organize', 'generic', 'function', 'generic', 'function', 'function', 'define', 'multiple', 'case', 'method', 'class', 'dispatch', 'method', 'combination']"
2497,"CLOS and Flavors allow mixin methods to add behavior to existing methods: :before and :after daemons, whoppers and wrappers in Flavors. CLOS added :around methods and the ability to call shadowed methods via CALL-NEXT-METHOD. So, for example, a stream-lock-mixin can add locking around existing methods of a stream class. In Flavors one would write a wrapper or a whopper and in CLOS one would use an :around method. Both CLOS and Flavors allow the computed reuse via method combinations. :before, :after and :around methods are a feature of the standard method combination. Other method combinations are provided.","['clos', 'flavors', 'allow', 'mixin', 'method', 'add', 'behavior', 'exist', 'method', 'daemon', 'whopper', 'wrapper', 'flavors', 'clos', 'add', 'method', 'ability', 'shadowed', 'method', 'method', 'example', 'stream', 'lock', 'mixin', 'add', 'lock', 'exist', 'method', 'stream', 'class', 'flavors', 'write', 'wrapper', 'whopper', 'clos', 'use', 'method', 'clos', 'flavors', 'allow', 'compute', 'reuse', 'method', 'combination', 'method', 'feature', 'standard', 'method', 'combination', 'method', 'combination', 'provide']"
2498,"An example is the + method combination, where the resulting values of each of the applicable methods of a generic function are arithmetically added to compute the return value. This is used, for example, with the border-mixin for graphical objects. A graphical object may have a generic width function. The border-mixin would add a border around an object and has a method computing its width. A new class bordered-button that is both a graphical object and uses the border mixin would compute its width by calling all applicable width methods—via the + method combination. All return values are added and create the combined width of the object.","['example', 'method', 'combination', 'result', 'value', 'applicable', 'method', 'generic', 'function', 'arithmetically', 'add', 'compute', 'return', 'value', 'example', 'border', 'mixin', 'graphical', 'object', 'graphical', 'object', 'generic', 'width', 'function', 'border', 'mixin', 'add', 'border', 'object', 'method', 'compute', 'width', 'new', 'class', 'border', 'button', 'graphical', 'object', 'use', 'border', 'mixin', 'compute', 'width', 'call', 'applicable', 'width', 'method', 'method', 'combination', 'return', 'value', 'add', 'create', 'combine', 'width', 'object']"
2499,"In an OOPSLA 90 paper,10 Gilad Bracha and William Cook reinterpret different inheritance mechanisms found in Smalltalk, Beta and CLOS as special forms of a mixin inheritance.","['oopsla', 'paper', 'gilad', 'bracha', 'william', 'cook', 'reinterpret', 'different', 'inheritance', 'mechanism', 'find', 'smalltalk', 'beta', 'clos', 'special', 'form', 'mixin', 'inheritance']"
2500,"Other than Flavors and CLOS a part of Common Lisp, some languages that use mixins are:","['flavors', 'clos', 'common', 'lisp', 'language', 'use', 'mixin']"
2501,"Some languages do not support mixins on the language level, but can easily mimic them by copying methods from one object to another at runtime, thereby ""borrowing"" the mixin's methods. This is also possible with statically typed languages, but it requires constructing a new object with the extended set of methods.","['language', 'support', 'mixin', 'language', 'level', 'easily', 'mimic', 'copy', 'method', 'object', 'runtime', 'borrow', 'mixin', 'method', 'possible', 'statically', 'type', 'language', 'require', 'construct', 'new', 'object', 'extend', 'set', 'method']"
2502,"Other languages that do not support mixins can support them in a round-about way via other language constructs. For example, Visual Basic .NET and C# support the addition of extension methods on interfaces, meaning any class implementing an interface with extension methods defined will have the extension methods available as pseudo-members.","['language', 'support', 'mixin', 'support', 'round', 'way', 'language', 'construct', 'example', 'visual', 'basic', '.net', 'support', 'addition', 'extension', 'method', 'interface', 'mean', 'class', 'implement', 'interface', 'extension', 'method', 'define', 'extension', 'method', 'available', 'pseudo', 'member']"
2503,Common Lisp provides mixins in CLOS Common Lisp Object System similar to Flavors.,"['common', 'lisp', 'provide', 'mixin', 'clos', 'common', 'lisp', 'object', 'system', 'similar', 'flavors']"
2504,object-width is a generic function with one argument that uses the + method combination. This combination determines that all applicable methods for a generic function will be called and the results will be added.,"['object', 'width', 'generic', 'function', 'argument', 'use', 'method', 'combination', 'combination', 'determine', 'applicable', 'method', 'generic', 'function', 'call', 'result', 'add']"
2505,button is a class with one slot for the button text.,"['button', 'class', 'slot', 'button', 'text']"
2506,There is a method for objects of class button that computes the width based on the length of the button text. + is the method qualifier for the method combination of the same name.,"['method', 'object', 'class', 'button', 'compute', 'width', 'base', 'length', 'button', 'text', 'method', 'qualifi', 'method', 'combination']"
2507,"A border-mixin class. The naming is just a convention. There are no superclasses, and no slots.","['border', 'mixin', 'class', 'naming', 'convention', 'superclass', 'slot']"
2508,There is a method computing the width of the border. Here it is just 4.,"['method', 'compute', 'width', 'border']"
2509,bordered-button is a class inheriting from both border-mixin and button.,"['border', 'button', 'class', 'inheriting', 'border', 'mixin', 'button']"
2510,We can now compute the width of a button. Calling object-width computes 80. The result is the result of the single applicable method: the method object-width for the class button.,"['compute', 'width', 'button', 'call', 'object', 'width', 'compute', 'result', 'result', 'single', 'applicable', 'method', 'method', 'object', 'width', 'class', 'button']"
2511,We can also compute the width of a bordered-button. Calling object-width computes 84. The result is the sum of the results of the two applicable methods: the method object-width for the class button and the method object-width for the class border-mixin.,"['compute', 'width', 'border', 'button', 'call', 'object', 'width', 'compute', 'result', 'sum', 'result', 'applicable', 'method', 'method', 'object', 'width', 'class', 'button', 'method', 'object', 'width', 'class', 'border', 'mixin']"
2512,"In Python, an example of the mixin concept is found in the SocketServer module,17 which has both a UDPServer class and a TCPServer class. They act as servers for UDP and TCP socket servers, respectively. Additionally, there are two mixin classes: ForkingMixIn and ThreadingMixIn. Normally, all new connections are handled within the same process. By extending TCPServer with the ThreadingMixIn as follows:","['python', 'example', 'mixin', 'concept', 'find', 'socketserver', 'module', 'udpserver', 'class', 'tcpserver', 'class', 'act', 'server', 'udp', 'tcp', 'socket', 'server', 'respectively', 'additionally', 'mixin', 'class', 'forkingmixin', 'threadingmixin', 'normally', 'new', 'connection', 'handle', 'process', 'extend', 'tcpserver', 'threadingmixin', 'follow']"
2513,"the ThreadingMixIn class adds functionality to the TCP server such that each new connection creates a new thread. Using the same method, a ThreadingUDPServer can be created without having to duplicate the code in ThreadingMixIn. Alternatively, using the ForkingMixIn would cause the process to be forked for each new connection. Clearly, the functionality to create a new thread or fork a process is not terribly useful as a stand-alone class.","['threadingmixin', 'class', 'add', 'functionality', 'tcp', 'server', 'new', 'connection', 'create', 'new', 'thread', 'method', 'threadingudpserver', 'create', 'have', 'duplicate', 'code', 'threadingmixin', 'alternatively', 'forkingmixin', 'cause', 'process', 'fork', 'new', 'connection', 'clearly', 'functionality', 'create', 'new', 'thread', 'fork', 'process', 'terribly', 'useful', 'stand', 'class']"
2514,"In this usage example, the mixins provide alternative underlying functionality without affecting the functionality as a socket server.","['usage', 'example', 'mixin', 'provide', 'alternative', 'underlying', 'functionality', 'affect', 'functionality', 'socket', 'server']"
2515,Most of the Ruby world is based around mixins via Modules. The concept of mixins is implemented in Ruby by the keyword include to which we pass the name of the module as parameter.,"['ruby', 'world', 'base', 'mixin', 'module', 'concept', 'mixin', 'implement', 'ruby', 'keyword', 'include', 'pass', 'module', 'parameter']"
2516,"It is technically possible to add behavior to an object by binding functions to keys in the object. However, this lack of separation between state and behavior has drawbacks:","['technically', 'possible', 'add', 'behavior', 'object', 'bind', 'function', 'key', 'object', 'lack', 'separation', 'state', 'behavior', 'drawback']"
2517,An extend function is used to mix the behavior in:19,"['extend', 'function', 'mix', 'behavior', 'in']"
2518,The pure function and delegation based Flight-Mixin Approach,"['pure', 'function', 'delegation', 'base', 'flight', 'mixin', 'approach']"
2519,Even though the firstly described approach is mostly widespread the next one is closer to what JavaScript's language core fundamentally offers - Delegation.,"['firstly', 'describe', 'approach', 'widespread', 'close', 'javascript', 'language', 'core', 'fundamentally', 'offer', 'delegation']"
2520,Two function object based patterns already do the trick without the need of a third party's implementation of extend.,"['function', 'object', 'base', 'pattern', 'trick', 'need', 'party', 'implementation', 'extend']"
2521,"In the Curl web-content language, multiple inheritance is used as classes with no instances may implement methods. Common mixins include all skinnable ControlUIs inheriting from SkinnableControlUI, user interface delegate objects that require dropdown menus inheriting from StandardBaseDropdownUI and such explicitly named mixin classes as FontGraphicMixin, FontVisualMixin and NumericAxisMixin-of class. Version 7.0 added library access so that mixins do not need to be in the same package or be public abstract. Curl constructors are factories that facilitates using multiple-inheritance without explicit declaration of either interfaces or mixins.citation needed","['curl', 'web', 'content', 'language', 'multiple', 'inheritance', 'class', 'instance', 'implement', 'method', 'common', 'mixin', 'include', 'skinnable', 'controluis', 'inheriting', 'skinnablecontrolui', 'user', 'interface', 'delegate', 'object', 'require', 'dropdown', 'menus', 'inheriting', 'standardbasedropdownui', 'explicitly', 'name', 'mixin', 'class', 'fontgraphicmixin', 'fontvisualmixin', 'numericaxismixin', 'class', 'version', '7', 'add', 'library', 'access', 'mixin', 'need', 'package', 'public', 'abstract', 'curl', 'constructor', 'factory', 'facilitate', 'multiple', 'inheritance', 'explicit', 'declaration', 'interface', 'mixins.citation', 'need']"
2522,Java 8 introduces a new feature in the form of default methods for interfaces.20 Basically it allows a method to be defined in an interface with application in the scenario when a new method is to be added to an interface after the interface class programming setup is done. To add a new function to the interface means to implement the method at every class which uses the interface. Default methods help in this case where they can be introduced to an interface any time and have an implemented structure which is then used by the associated classes. Hence default methods add the ability to applying the mixin concept in Java.,"['java', 'introduce', 'new', 'feature', 'form', 'default', 'method', 'interfaces', 'basically', 'allow', 'method', 'define', 'interface', 'application', 'scenario', 'new', 'method', 'add', 'interface', 'interface', 'class', 'programming', 'setup', 'add', 'new', 'function', 'interface', 'mean', 'implement', 'method', 'class', 'use', 'interface', 'default', 'method', 'help', 'case', 'introduce', 'interface', 'time', 'implement', 'structure', 'associate', 'class', 'default', 'method', 'add', 'ability', 'apply', 'mixin', 'concept', 'java']"
2523,"Interfaces combined with aspect-oriented programming can also produce full-fledged mixins in languages that support such features, such as C# or Java. Additionally, through the use of the marker interface pattern, generic programming, and extension methods, C# 3.0 has the ability to mimic mixins. With Dart 2.7 and C# 3.0 came the introduction of extension methods which can be applied, not only to classe, but also to interfaces. Extension Methods provide additional functionality on an existing class without modifying the class. It then becomes possible to create a static helper class for specific functionality that defines the extension methods. Because the classes implement the interface even if the actual interface doesn’t contain any methods or properties to implement it will pick up all the extension methods also.3421 C# 8.0 adds the feature of default interface methods.2223","['interface', 'combine', 'aspect', 'orient', 'programming', 'produce', 'fledge', 'mixin', 'language', 'support', 'feature', 'java', 'additionally', 'use', 'marker', 'interface', 'pattern', 'generic', 'programming', 'extension', 'method', '3', 'ability', 'mimic', 'mixin', 'dart', '2', '3', 'come', 'introduction', 'extension', 'method', 'apply', 'classe', 'interface', 'extension', 'methods', 'provide', 'additional', 'functionality', 'exist', 'class', 'modify', 'class', 'possible', 'create', 'static', 'helper', 'class', 'specific', 'functionality', 'define', 'extension', 'method', 'class', 'implement', 'interface', 'actual', 'interface', 'contain', 'method', 'property', 'implement', 'pick', 'extension', 'method', 'also', '8', 'add', 'feature', 'default', 'interface', 'methods']"
2524,ECMAScript in most cases implemented as JavaScript does not need to mimic object composition by stepwise copying fields from one object to another. It natively24 supports Trait and mixin2526 based object composition via function objects that implement additional behavior and then are delegated via call or apply to objects that are in need of such new functionality.,"['ecmascript', 'case', 'implement', 'javascript', 'need', 'mimic', 'object', 'composition', 'stepwise', 'copying', 'field', 'object', 'natively24', 'support', 'trait', 'mixin2526', 'base', 'object', 'composition', 'function', 'object', 'implement', 'additional', 'behavior', 'delegate', 'apply', 'object', 'need', 'new', 'functionality']"
2525,"Scala has a rich type system and Traits are a part of it which helps implement mixin behaviour. As their name reveals, Traits are usually used to represent a distinct feature or aspect that is normally orthogonal to the responsibility of a concrete type or at least of a certain instance.27 For example, the ability to sing is modeled as such an orthogonal feature: it could be applied to Birds, Persons, etc.","['scala', 'rich', 'type', 'system', 'trait', 'help', 'implement', 'mixin', 'behaviour', 'reveal', 'trait', 'usually', 'represent', 'distinct', 'feature', 'aspect', 'normally', 'orthogonal', 'responsibility', 'concrete', 'type', 'certain', 'instance', 'example', 'ability', 'sing', 'model', 'orthogonal', 'feature', 'apply', 'birds', 'persons', 'etc']"
2526,"Here, Bird has mixed in all methods of the trait into its own definition as if class Bird had defined method sing on its own.","['bird', 'mix', 'method', 'trait', 'definition', 'class', 'bird', 'define', 'method', 'sing']"
2527,"As extends is also used to inherit from a super class, in case of a trait extends is used if no super class is inherited and only for mixin in the first trait. All following traits are mixed in using keyword with.","['extend', 'inherit', 'super', 'class', 'case', 'trait', 'extend', 'super', 'class', 'inherit', 'mixin', 'trait', 'follow', 'trait', 'mixed', 'keyword']"
2528,"Scala allows mixing in a trait creating an anonymous type when creating a new instance of a class. In the case of a Person class instance, not all instances can sing. This feature comes use then:","['scala', 'allow', 'mix', 'trait', 'create', 'anonymous', 'type', 'create', 'new', 'instance', 'class', 'case', 'person', 'class', 'instance', 'instance', 'sing', 'feature', 'come', 'use']"
2529,"Rust makes extensive use of mixins via traits. Traits, like in Scala, allow users to implement behaviours for a defined type. They are also used for generics and dynamic dispatch, which allow for types with same traits to be used interchangeably statically or dynamically at runtime respectively.28","['rust', 'make', 'extensive', 'use', 'mixin', 'trait', 'trait', 'like', 'scala', 'allow', 'user', 'implement', 'behaviour', 'define', 'type', 'generic', 'dynamic', 'dispatch', 'allow', 'type', 'trait', 'interchangeably', 'statically', 'dynamically', 'runtime', 'respectively']"
2530,Mixin can be achieved in Swift by using a language feature called Default implementation in Protocol Extension.,"['mixin', 'achieve', 'swift', 'language', 'feature', 'call', 'default', 'implementation', 'protocol', 'extension']"
2531,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2532,"In object-oriented programming, mock objects are simulated objects that mimic the behaviour of real objects in controlled ways, most often as part of a software testing initiative. A programmer typically creates a mock object to test the behaviour of some other object, in much the same way that a car designer uses a crash test dummy to simulate the dynamic behaviour of a human in vehicle impacts. The technique is also applicable in generic programming.","['object', 'orient', 'programming', 'mock', 'object', 'simulate', 'object', 'mimic', 'behaviour', 'real', 'object', 'control', 'way', 'software', 'testing', 'initiative', 'programmer', 'typically', 'create', 'mock', 'object', 'test', 'behaviour', 'object', 'way', 'car', 'designer', 'use', 'crash', 'test', 'dummy', 'simulate', 'dynamic', 'behaviour', 'human', 'vehicle', 'impact', 'technique', 'applicable', 'generic', 'programming']"
2533,"In a unit test, mock objects can simulate the behavior of complex, real objects and are therefore useful when a real object is impractical or impossible to incorporate into a unit test. If an object has any of the following characteristics, it may be useful to use a mock object in its place:","['unit', 'test', 'mock', 'object', 'simulate', 'behavior', 'complex', 'real', 'object', 'useful', 'real', 'object', 'impractical', 'impossible', 'incorporate', 'unit', 'test', 'object', 'follow', 'characteristic', 'useful', 'use', 'mock', 'object', 'place']"
2534,"For example, an alarm clock program which causes a bell to ring at a certain time might get the current time from a time service. To test this, the test must wait until the alarm time to know whether it has rung the bell correctly. If a mock time service is used in place of the real time service, it can be programmed to provide the bell-ringing time or any other time regardless of the real time, so that the alarm clock program can be tested in isolation.","['example', 'alarm', 'clock', 'program', 'cause', 'bell', 'ring', 'certain', 'time', 'current', 'time', 'time', 'service', 'test', 'test', 'wait', 'alarm', 'time', 'know', 'ring', 'bell', 'correctly', 'mock', 'time', 'service', 'place', 'real', 'time', 'service', 'program', 'provide', 'bell', 'ring', 'time', 'time', 'regardless', 'real', 'time', 'alarm', 'clock', 'program', 'test', 'isolation']"
2535,"Mock objects have the same interface as the real objects they mimic, allowing a client object to remain unaware of whether it is using a real object or a mock object. Many available mock object frameworks allow the programmer to specify which, and in what order, methods will be invoked on a mock object and what parameters will be passed to them, as well as what values will be returned. Thus, the behavior of a complex object such as a network socket can be mimicked by a mock object, allowing the programmer to discover whether the object being tested responds appropriately to the wide variety of states such mock objects may be in.","['mock', 'object', 'interface', 'real', 'object', 'mimic', 'allow', 'client', 'object', 'remain', 'unaware', 'real', 'object', 'mock', 'object', 'available', 'mock', 'object', 'framework', 'allow', 'programmer', 'specify', 'order', 'method', 'invoke', 'mock', 'object', 'parameter', 'pass', 'value', 'return', 'behavior', 'complex', 'object', 'network', 'socket', 'mimic', 'mock', 'object', 'allow', 'programmer', 'discover', 'object', 'test', 'respond', 'appropriately', 'wide', 'variety', 'state', 'mock', 'object']"
2536,"Classification between mocks, fakes, and stubs is highly inconsistent across the literature.123456 Consistent among the literature, though, is that they all represent a production object in a testing environment by exposing the same interface.","['classification', 'mock', 'fake', 'stub', 'highly', 'inconsistent', 'literature', 'consistent', 'literature', 'represent', 'production', 'object', 'testing', 'environment', 'expose', 'interface']"
2537,"Which out of mock, fake, or stub is the simplest is inconsistent, but the simplest always returns pre-arranged responses as in a method stub. On the other side of the spectrum, the most complex object will fully simulate a production object with complete logic, exceptions, etc. Whether or not any of the mock, fake, or stub trio fits such a definition is, again, inconsistent across the literature.","['mock', 'fake', 'stub', 'simple', 'inconsistent', 'simple', 'return', 'pre', 'arranged', 'response', 'method', 'stub', 'spectrum', 'complex', 'object', 'fully', 'simulate', 'production', 'object', 'complete', 'logic', 'exception', 'etc', 'mock', 'fake', 'stub', 'trio', 'fit', 'definition', 'inconsistent', 'literature']"
2538,"For example, a mock, fake, or stub method implementation between the two ends of the complexity spectrum might contain assertions to examine the context of each call. For example, a mock object might assert the order in which its methods are called, or assert consistency of data across method calls.","['example', 'mock', 'fake', 'stub', 'method', 'implementation', 'end', 'complexity', 'spectrum', 'contain', 'assertion', 'examine', 'context', 'example', 'mock', 'object', 'assert', 'order', 'method', 'call', 'assert', 'consistency', 'datum', 'method', 'call']"
2539,"In the book The Art of Unit Testing7 mocks are described as a fake object that helps decide whether a test failed or passed by verifying whether an interaction with an object occurred. Everything else is defined as a stub. In that book, fakes are anything that is not real, which, based on their usage, can be either stubs or mocks.","['book', 'art', 'unit', 'testing7', 'mock', 'describe', 'fake', 'object', 'help', 'decide', 'test', 'fail', 'pass', 'verify', 'interaction', 'object', 'occur', 'define', 'stub', 'book', 'fake', 'real', 'base', 'usage', 'stub', 'mock']"
2540,"Consider an example where an authorization subsystem has been mocked. The mock object implements an isUserAllowedtask : Task : boolean8 method to match that in the real authorization class. Many advantages follow if it also exposes an isAllowed : boolean property, which is not present in the real class. This allows test code to easily set the expectation that a user will, or will not, be granted permission in the next call and therefore to readily test the behavior of the rest of the system in either case.","['consider', 'example', 'authorization', 'subsystem', 'mock', 'mock', 'object', 'implement', 'isuserallowedtask', 'task', 'boolean8', 'method', 'match', 'real', 'authorization', 'class', 'advantage', 'follow', 'expose', 'isallowe', 'boolean', 'property', 'present', 'real', 'class', 'allow', 'test', 'code', 'easily', 'set', 'expectation', 'user', 'grant', 'permission', 'readily', 'test', 'behavior', 'rest', 'system', 'case']"
2541,"Similarly, mock-only settings could ensure that subsequent calls to the sub-system will cause it to throw an exception, hang without responding, or return null etc. Thus it is possible to develop and test client behaviors for realistic fault conditions in back-end sub-systems as well as for their expected responses. Without such a simple and flexible mock system, testing each of these situations may be too laborious for them to be given proper consideration.","['similarly', 'mock', 'setting', 'ensure', 'subsequent', 'call', 'sub', 'system', 'cause', 'throw', 'exception', 'hang', 'respond', 'return', 'null', 'etc', 'possible', 'develop', 'test', 'client', 'behavior', 'realistic', 'fault', 'condition', 'end', 'sub', 'system', 'expect', 'response', 'simple', 'flexible', 'mock', 'system', 'test', 'situation', 'laborious', 'give', 'proper', 'consideration']"
2542,"A mock database object's saveperson : Person method may not contain much if any implementation code. It might check the existence and perhaps the validity of the Person object passed in for saving see fake vs. mock discussion above, but beyond that there might be no other implementation.","['mock', 'database', 'object', 'saveperson', 'person', 'method', 'contain', 'implementation', 'code', 'check', 'existence', 'validity', 'person', 'object', 'pass', 'save', 'fake', 'vs.', 'mock', 'discussion', 'implementation']"
2543,"This is a missed opportunity. The mock method could add an entry to a public log string. The entry need be no more than ""Person saved"",9: 146–7 or it may include some details from the person object instance, such as a name or ID. If the test code also checks the final contents of the log string after various series of operations involving the mock database then it is possible to verify that in each case exactly the expected number of database saves have been performed. This can find otherwise invisible performance-sapping bugs, for example, where a developer, nervous of losing data, has coded repeated calls to save where just one would have sufficed.","['miss', 'opportunity', 'mock', 'method', 'add', 'entry', 'public', 'log', 'string', 'entry', 'need', 'person', 'saved', '146–7', 'include', 'detail', 'person', 'object', 'instance', 'test', 'code', 'check', 'final', 'content', 'log', 'string', 'series', 'operation', 'involve', 'mock', 'database', 'possible', 'verify', 'case', 'exactly', 'expected', 'number', 'database', 'save', 'perform', 'find', 'invisible', 'performance', 'sap', 'bug', 'example', 'developer', 'nervous', 'lose', 'datum', 'code', 'repeat', 'call', 'save', 'suffice']"
2544,"Programmers working with the test-driven development TDD method make use of mock objects when writing software. Mock objects meet the interface requirements of, and stand in for, more complex real ones; thus they allow programmers to write and unit-test functionality in one area without calling complex underlying or collaborating classes.9: 144–5 Using mock objects allows developers to focus their tests on the behavior of the system under test without worrying about its dependencies. For example, testing a complex algorithm based on multiple objects being in particular states can be clearly expressed using mock objects in place of real objects.","['programmer', 'work', 'test', 'drive', 'development', 'tdd', 'method', 'use', 'mock', 'object', 'write', 'software', 'mock', 'object', 'meet', 'interface', 'requirement', 'stand', 'complex', 'real', 'one', 'allow', 'programmer', 'write', 'unit', 'test', 'functionality', 'area', 'call', 'complex', 'underlie', 'collaborate', 'classes', '144–5', 'mock', 'object', 'allow', 'developer', 'focus', 'test', 'behavior', 'system', 'test', 'worry', 'dependency', 'example', 'test', 'complex', 'algorithm', 'base', 'multiple', 'object', 'particular', 'state', 'clearly', 'express', 'mock', 'object', 'place', 'real', 'object']"
2545,"Apart from complexity issues and the benefits gained from this separation of concerns, there are practical speed issues involved. Developing a realistic piece of software using TDD may easily involve several hundred unit tests. If many of these induce communication with databases, web services and other out-of-process or networked systems, then the suite of unit tests will quickly become too slow to be run regularly. This in turn leads to bad habits and a reluctance by the developer to maintain the basic tenets of TDD.","['apart', 'complexity', 'issue', 'benefit', 'gain', 'separation', 'concern', 'practical', 'speed', 'issue', 'involve', 'develop', 'realistic', 'piece', 'software', 'tdd', 'easily', 'involve', 'unit', 'test', 'induce', 'communication', 'database', 'web', 'service', 'process', 'networked', 'system', 'suite', 'unit', 'test', 'quickly', 'slow', 'run', 'regularly', 'turn', 'lead', 'bad', 'habit', 'reluctance', 'developer', 'maintain', 'basic', 'tenet', 'tdd']"
2546,"When mock objects are replaced by real ones, the end-to-end functionality will need further testing. These will be integration tests rather than unit tests.","['mock', 'object', 'replace', 'real', 'one', 'end', 'end', 'functionality', 'need', 'testing', 'integration', 'test', 'unit', 'test']"
2547,"The use of mock objects can closely couple the unit tests to the implementation of the code that is being tested. For example, many mock object frameworks allow the developer to check the order of and number of times that mock object methods were invoked by the real object being tested; subsequent refactoring of the code that is being tested could therefore cause the test to fail even though all mocked object methods still obey the contract of the previous implementation. This illustrates that unit tests should test a method's external behavior rather than its internal implementation. Over-use of mock objects as part of a suite of unit tests can result in a dramatic increase in the amount of maintenance that needs to be performed on the tests themselves during system evolution as refactoring takes place. The improper maintenance of such tests during evolution could allow bugs to be missed that would otherwise be caught by unit tests that use instances of real classes. Conversely, simply mocking one method might require far less configuration than setting up an entire real class and therefore reduce maintenance needs.","['use', 'mock', 'object', 'closely', 'couple', 'unit', 'test', 'implementation', 'code', 'test', 'example', 'mock', 'object', 'framework', 'allow', 'developer', 'check', 'order', 'number', 'time', 'mock', 'object', 'method', 'invoke', 'real', 'object', 'test', 'subsequent', 'refactoring', 'code', 'test', 'cause', 'test', 'fail', 'mock', 'object', 'method', 'obey', 'contract', 'previous', 'implementation', 'illustrate', 'unit', 'test', 'test', 'method', 'external', 'behavior', 'internal', 'implementation', 'use', 'mock', 'object', 'suite', 'unit', 'test', 'result', 'dramatic', 'increase', 'maintenance', 'need', 'perform', 'test', 'system', 'evolution', 'refactoring', 'take', 'place', 'improper', 'maintenance', 'test', 'evolution', 'allow', 'bug', 'miss', 'catch', 'unit', 'test', 'use', 'instance', 'real', 'class', 'conversely', 'simply', 'mock', 'method', 'require', 'far', 'configuration', 'set', 'entire', 'real', 'class', 'reduce', 'maintenance', 'need']"
2548,"Mock objects have to accurately model the behavior of the object they are mocking, which can be difficult to achieve if the object being mocked comes from another developer or project or if it has not even been written yet. If the behavior is not modelled correctly then the unit tests may register a pass even though a failure would occur at run time under the same conditions that the unit test is exercising, thus rendering the unit test inaccurate.10","['mock', 'object', 'accurately', 'model', 'behavior', 'object', 'mock', 'difficult', 'achieve', 'object', 'mock', 'come', 'developer', 'project', 'write', 'behavior', 'model', 'correctly', 'unit', 'test', 'register', 'pass', 'failure', 'occur', 'run', 'time', 'condition', 'unit', 'test', 'exercise', 'render', 'unit', 'test', 'inaccurate']"
2549,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2550,Model–view–controller MVC is a software architectural pattern1 commonly used for developing user interfaces that divide the related program logic into three interconnected elements. This is done to separate internal representations of information from the ways information is presented to and accepted from the user.23,"['model', 'view', 'controller', 'mvc', 'software', 'architectural', 'pattern1', 'commonly', 'develop', 'user', 'interface', 'divide', 'related', 'program', 'logic', 'interconnected', 'element', 'separate', 'internal', 'representation', 'information', 'way', 'information', 'present', 'accept', 'user']"
2551,"Traditionally used for desktop graphical user interfaces GUIs, this pattern became popular for designing web applications.4 Popular programming languages have MVC frameworks that facilitate the implementation of the pattern.","['traditionally', 'desktop', 'graphical', 'user', 'interface', 'gui', 'pattern', 'popular', 'designing', 'web', 'applications', 'popular', 'programming', 'language', 'mvc', 'framework', 'facilitate', 'implementation', 'pattern']"
2552,"One of the seminal insights in the early development of graphical user interfaces, MVC became one of the first approaches to describe and implement software constructs in terms of their responsibilities.5","['seminal', 'insight', 'early', 'development', 'graphical', 'user', 'interface', 'mvc', 'approach', 'describe', 'implement', 'software', 'construct', 'term', 'responsibilities']"
2553,"Trygve Reenskaug created MVC while working on Smalltalk-79 as a visiting scientist at the Xerox Palo Alto Research Center PARC in the late 1970s.678: 330 He wanted a pattern that could be used to structure any program where users interact with a large, convoluted data set. His design initially had four parts: Model, View, Thing, and Editor. After discussing it with the other Smalltalk developers, he and the rest of the group settled on Model, View, and Controller instead.6","['trygve', 'reenskaug', 'create', 'mvc', 'work', 'smalltalk-79', 'visit', 'scientist', 'xerox', 'palo', 'alto', 'research', 'center', 'parc', 'late', '1970s', '330', 'want', 'pattern', 'structure', 'program', 'user', 'interact', 'large', 'convoluted', 'datum', 'set', 'design', 'initially', 'part', 'model', 'view', 'thing', 'editor', 'discuss', 'smalltalk', 'developer', 'rest', 'group', 'settle', 'model', 'view', 'controller', 'instead']"
2554,"In their final design, a Model represents some part of the program purely and intuitively. A View is a visual representation of a Model, retrieving data from the Model to display to the user and passing requests back and forth between the user and the Model. A Controller is an organizational part of the user interface that lays out and coordinates multiple Views on the screen, and which receives user input and sends the appropriate messages to its underlying Views. This design also includes an Editor as a specialized kind of Controller used to modify a particular View, and which is created through that View.6","['final', 'design', 'model', 'represent', 'program', 'purely', 'intuitively', 'view', 'visual', 'representation', 'model', 'retrieve', 'datum', 'model', 'display', 'user', 'pass', 'request', 'forth', 'user', 'model', 'controller', 'organizational', 'user', 'interface', 'lay', 'coordinate', 'multiple', 'view', 'screen', 'receive', 'user', 'input', 'send', 'appropriate', 'message', 'underlie', 'view', 'design', 'include', 'editor', 'specialized', 'kind', 'controller', 'modify', 'particular', 'view', 'create', 'view']"
2555,"Smalltalk-80 supports a version of MVC that evolved from this one.6 It provides abstract View and Controller classes as well as various concrete subclasses of each that represent different generic widgets. In this scheme, a View represents some way of displaying information to the user, and a Controller represents some way for the user to interact with a View. A View is also coupled to a model object, but the structure of that object is left up to the application programmer. The Smalltalk-80 environment also includes an ""MVC Inspector,"" a development tool for viewing the structure of a given model, view, and controller side-by-side. 9","['smalltalk-80', 'support', 'version', 'mvc', 'evolve', 'one', 'provide', 'abstract', 'view', 'controller', 'class', 'concrete', 'subclass', 'represent', 'different', 'generic', 'widget', 'scheme', 'view', 'represent', 'way', 'display', 'information', 'user', 'controller', 'represent', 'way', 'user', 'interact', 'view', 'view', 'couple', 'model', 'object', 'structure', 'object', 'leave', 'application', 'programmer', 'smalltalk-80', 'environment', 'include', 'mvc', 'inspector', 'development', 'tool', 'view', 'structure', 'give', 'model', 'view', 'controller']"
2556,"In 1988, an article in The Journal of Object Technology JOT by two ex-PARC employees presented MVC as a general ""programming paradigm and methodology"" for Smalltalk-80 developers. However, their scheme differed from both Reenskaug et al.'s and that presented by the Smalltalk-80 reference books. They defined a view as covering any graphical concern, with a controller being a more abstract, generally invisible object that receives user input and interacts with one or many views and only one model.10","['1988', 'article', 'journal', 'object', 'technology', 'jot', 'parc', 'employee', 'present', 'mvc', 'general', 'programming', 'paradigm', 'methodology', 'smalltalk-80', 'developer', 'scheme', 'differ', 'reenskaug', 'present', 'smalltalk-80', 'reference', 'book', 'define', 'view', 'cover', 'graphical', 'concern', 'controller', 'abstract', 'generally', 'invisible', 'object', 'receive', 'user', 'input', 'interact', 'view', 'model']"
2557,"The MVC pattern subsequently evolved,11 giving rise to variants such as hierarchical model–view–controller HMVC, model–view–adapter MVA, model–view–presenter MVP, model–view–viewmodel MVVM, and others that adapted MVC to different contexts.","['mvc', 'pattern', 'subsequently', 'evolved', 'give', 'rise', 'variant', 'hierarchical', 'model', 'view', 'controller', 'hmvc', 'model', 'view', 'adapter', 'mva', 'model', 'view', 'presenter', 'mvp', 'model', 'view', 'viewmodel', 'mvvm', 'adapt', 'mvc', 'different', 'context']"
2558,"The use of the MVC pattern in web applications grew after the introduction of NeXT's WebObjects in 1996, which was originally written in Objective-C that borrowed heavily from Smalltalk and helped enforce MVC principles. Later, the MVC pattern became popular with Java developers when WebObjects was ported to Java. Later frameworks for Java, such as Spring released in October 2002, continued the strong bond between Java and MVC.","['use', 'mvc', 'pattern', 'web', 'application', 'grow', 'introduction', 'webobjects', '1996', 'originally', 'write', 'objective', 'borrow', 'heavily', 'smalltalk', 'help', 'enforce', 'mvc', 'principle', 'later', 'mvc', 'pattern', 'popular', 'java', 'developer', 'webobjects', 'port', 'java', 'later', 'framework', 'java', 'spring', 'release', 'october', '2002', 'continue', 'strong', 'bond', 'java', 'mvc']"
2559,"In 2003, Martin Fowler published Patterns of Enterprise Application Architecture, which presented MVC as a pattern where an ""input controller"" receives a request, sends the appropriate messages to a model object, takes a response from the model object, and passes the response to the appropriate view for display.8: 56 This is close to the approach taken by the Ruby on Rails framework August 2004, which has the client send requests to the server via an in-browser view, where they are handled by a controller, which then communicates with the appropriate model objects.12 The Django framework July 2005, for Python put forward a similar ""MTV"" Model Template View take on the pattern, in which a view retrieves data from models and passes it to templates for display.13 Both Rails and Django debuted with a strong emphasis on rapid deployment, which increased MVC's popularity outside the traditional enterprise environment in which it has long been popular.","['2003', 'martin', 'fowler', 'publish', 'patterns', 'enterprise', 'application', 'architecture', 'present', 'mvc', 'pattern', 'input', 'controller', 'receive', 'request', 'send', 'appropriate', 'message', 'model', 'object', 'take', 'response', 'model', 'object', 'pass', 'response', 'appropriate', 'view', 'display', 'close', 'approach', 'take', 'ruby', 'rail', 'framework', 'august', '2004', 'client', 'send', 'request', 'server', 'browser', 'view', 'handle', 'controller', 'communicate', 'appropriate', 'model', 'objects', 'django', 'framework', 'july', '2005', 'python', 'forward', 'similar', 'mtv', 'model', 'template', 'view', 'pattern', 'view', 'retrieve', 'datum', 'model', 'pass', 'template', 'display', 'rails', 'django', 'debut', 'strong', 'emphasis', 'rapid', 'deployment', 'increase', 'mvc', 'popularity', 'outside', 'traditional', 'enterprise', 'environment', 'long', 'popular']"
2560,"The central component of the pattern. It is the application's dynamic data structure, independent of the user interface.14 It directly manages the data, logic and rules of the application. In Smalltalk-80, the design of a model type is left entirely to the programmer.15 With WebObjects, Rails, and Django, a model type typically represents a table in the application's database.161718","['central', 'component', 'pattern', 'application', 'dynamic', 'datum', 'structure', 'independent', 'user', 'interface', 'directly', 'manage', 'datum', 'logic', 'rule', 'application', 'smalltalk-80', 'design', 'model', 'type', 'leave', 'entirely', 'programmer', 'webobjects', 'rails', 'django', 'model', 'type', 'typically', 'represent', 'table', 'application', 'database']"
2561,"Any representation of information such as a chart, diagram or table. Multiple views of the same information are possible, such as a bar chart for management and a tabular view for accountants.","['representation', 'information', 'chart', 'diagram', 'table', 'multiple', 'view', 'information', 'possible', 'bar', 'chart', 'management', 'tabular', 'view', 'accountant']"
2562,"In Smalltalk-80, a view is just a visual representation of a model, and does not handle user input.19 With WebObjects, a view represents a complete user interface element such as a menu or button, and does receive input from the user.20 In both Smalltalk-80 and WebObjects, however, views are meant to be general-purpose and composable.2122","['smalltalk-80', 'view', 'visual', 'representation', 'model', 'handle', 'user', 'input', 'webobjects', 'view', 'represent', 'complete', 'user', 'interface', 'element', 'menu', 'button', 'receive', 'input', 'user', 'smalltalk-80', 'webobjects', 'view', 'mean', 'general', 'purpose', 'composable']"
2563,"With Rails and Django, the role of the view is played by HTML templates, so in their scheme a view specifies an in-browser user interface rather than representing a user interface widget directly.2324 Django opts to call this kind of object a ""template"" in light of this.25 This approach puts relatively less emphasis on small, composable views; a typical Rails view has a one-to-one relationship with a controller action.26","['rail', 'django', 'role', 'view', 'play', 'html', 'template', 'scheme', 'view', 'specify', 'browser', 'user', 'interface', 'represent', 'user', 'interface', 'widget', 'directly', 'django', 'opt', 'kind', 'object', 'template', 'light', 'this', 'approach', 'put', 'relatively', 'emphasis', 'small', 'composable', 'view', 'typical', 'rail', 'view', 'relationship', 'controller', 'action']"
2564,"Smalltalk-80 views communicate with both a model and a controller,27 whereas with WebObjects, a view talks only to a controller, which then talks to a model.28 With Rails and Django, a view/template is used by a controller/view when preparing a response to the client.2930","['smalltalk-80', 'view', 'communicate', 'model', 'controller', 'webobjects', 'view', 'talk', 'controller', 'talk', 'model', 'rails', 'django', 'view', 'template', 'controller', 'view', 'prepare', 'response', 'client']"
2565,Accepts input and converts it to commands for the model or view.31,"['accept', 'input', 'convert', 'command', 'model', 'view']"
2566,"A Smalltalk-80 controller handles user input events, such as button presses or mouse movement.32 At any given time, each controller has one associated view and model, although one model object may hear from many different controllers. Only one controller, the ""active"" controller, receives user input at any given time; a global window manager object is responsible for setting the current active controller. If user input prompts a change in a model, the controller will signal the model to change, but the model is then responsible for telling its views to update.33","['smalltalk-80', 'controller', 'handle', 'user', 'input', 'event', 'button', 'press', 'mouse', 'movement', 'give', 'time', 'controller', 'associate', 'view', 'model', 'model', 'object', 'hear', 'different', 'controller', 'controller', 'active', 'controller', 'receive', 'user', 'input', 'give', 'time', 'global', 'window', 'manager', 'object', 'responsible', 'set', 'current', 'active', 'controller', 'user', 'input', 'prompt', 'change', 'model', 'controller', 'signal', 'model', 'change', 'model', 'responsible', 'tell', 'view', 'update']"
2567,"In WebObjects, the views handle user input, and the controller mediates between the views and the models. There may be only one controller per application, or one controller per window. Much of the application-specific logic is found in the controller.34","['webobjects', 'view', 'handle', 'user', 'input', 'controller', 'mediate', 'view', 'model', 'controller', 'application', 'controller', 'window', 'application', 'specific', 'logic', 'find', 'controller']"
2568,"In Rails, requests arriving at the on-server application from the client are sent to a ""router,"" which maps the request to a specific method of a specific controller. Within that method, the controller interacts with the request data and any relevant model objects and prepares a response using a view. Conventionally, each model type has an associated controller; for example, if the application had a Client model, it would typically have an associated Clients controller as well. However, developers are free to make other kinds of controllers if they wish.35","['rail', 'request', 'arrive', 'server', 'application', 'client', 'send', 'router', 'map', 'request', 'specific', 'method', 'specific', 'controller', 'method', 'controller', 'interact', 'request', 'datum', 'relevant', 'model', 'object', 'prepare', 'response', 'view', 'conventionally', 'model', 'type', 'associated', 'controller', 'example', 'application', 'client', 'model', 'typically', 'associated', 'clients', 'controller', 'developer', 'free', 'kind', 'controller', 'wish']"
2569,"Django calls the object playing this role a ""view"" instead of a controller.30 A Django view is a function that receives a web request and returns a web response. It may use templates to create the response.36","['django', 'call', 'object', 'play', 'role', 'view', 'instead', 'controller', 'django', 'view', 'function', 'receive', 'web', 'request', 'return', 'web', 'response', 'use', 'template', 'create', 'response']"
2570,"In addition to dividing the application into these components, the model–view–controller design defines the interactions between them.37","['addition', 'divide', 'application', 'component', 'model', 'view', 'controller', 'design', 'define', 'interaction', 'them']"
2571,"As with other software patterns, MVC expresses the ""core of the solution"" to a problem while allowing it to be adapted for each system.38 Particular MVC designs can vary significantly from the traditional description here.39","['software', 'pattern', 'mvc', 'express', 'core', 'solution', 'problem', 'allow', 'adapt', 'system', 'particular', 'mvc', 'design', 'vary', 'significantly', 'traditional', 'description', 'here']"
2572,"As Alan Kay wrote in 2003 the original motivation behind the MVC was to allow creation of a graphical interface for any object.40 That was outlined in detail in Richard Pawson's book called ""Naked Objects"".40","['alan', 'kay', 'write', '2003', 'original', 'motivation', 'mvc', 'allow', 'creation', 'graphical', 'interface', 'object', 'outline', 'detail', 'richard', 'pawson', 'book', 'call', 'naked', 'objects']"
2573,"Trygve Reenskaug, originator of MVC at PARC, has written that ""MVC was conceived as a general solution to the problem of users controlling a large and complex data set.""6","['trygve', 'reenskaug', 'originator', 'mvc', 'parc', 'write', 'mvc', 'conceive', 'general', 'solution', 'problem', 'user', 'control', 'large', 'complex', 'datum', 'set']"
2574,"In their 1991 guide Inside Smalltalk, Carleton University computer science professors Wilf LaLonde and John Pugh described the advantages of Smalltalk-80-style MVC as:","['1991', 'guide', 'inside', 'smalltalk', 'carleton', 'university', 'computer', 'science', 'professor', 'wilf', 'lalonde', 'john', 'pugh', 'describe', 'advantage', 'smalltalk-80', 'style', 'mvc']"
2575,"Although originally developed for desktop computing, MVC has been widely adopted as a design for World Wide Web applications in major programming languages. Several web frameworks have been created that enforce the pattern. These software frameworks vary in their interpretations, mainly in the way that the MVC responsibilities are divided between the client and server.42","['originally', 'develop', 'desktop', 'computing', 'mvc', 'widely', 'adopt', 'design', 'world', 'wide', 'web', 'application', 'major', 'programming', 'language', 'web', 'framework', 'create', 'enforce', 'pattern', 'software', 'framework', 'vary', 'interpretation', 'mainly', 'way', 'mvc', 'responsibility', 'divide', 'client', 'server']"
2576,"Some web MVC frameworks take a thin client approach that places almost the entire model, view and controller logic on the server. In this approach, the client sends either hyperlink requests or form submissions to the controller and then receives a complete and updated web page or other document from the view; the model exists entirely on the server.42","['web', 'mvc', 'framework', 'thin', 'client', 'approach', 'place', 'entire', 'model', 'view', 'controller', 'logic', 'server', 'approach', 'client', 'send', 'hyperlink', 'request', 'form', 'submission', 'controller', 'receive', 'complete', 'update', 'web', 'page', 'document', 'view', 'model', 'exist', 'entirely', 'server']"
2577,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2578,"Modular programming is a software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules, such that each contains everything necessary to execute only one aspect of the desired functionality.","['modular', 'programming', 'software', 'design', 'technique', 'emphasize', 'separate', 'functionality', 'program', 'independent', 'interchangeable', 'module', 'contain', 'necessary', 'execute', 'aspect', 'desire', 'functionality']"
2579,"A module interface expresses the elements that are provided and required by the module. The elements defined in the interface are detectable by other modules. The implementation contains the working code that corresponds to the elements declared in the interface. Modular programming is closely related to structured programming and object-oriented programming, all having the same goal of facilitating construction of large software programs and systems by decomposition into smaller pieces, and all originating around the 1960s. While the historical usage of these terms has been inconsistent, ""modular programming"" now refers to the high-level decomposition of the code of an entire program into pieces: structured programming to the low-level code use of structured control flow, and object-oriented programming to the data use of objects, a kind of data structure.","['module', 'interface', 'express', 'element', 'provide', 'require', 'module', 'element', 'define', 'interface', 'detectable', 'module', 'implementation', 'contain', 'working', 'code', 'correspond', 'element', 'declare', 'interface', 'modular', 'programming', 'closely', 'relate', 'structured', 'programming', 'object', 'orient', 'programming', 'have', 'goal', 'facilitate', 'construction', 'large', 'software', 'program', 'system', 'decomposition', 'small', 'piece', 'originate', '1960', 'historical', 'usage', 'term', 'inconsistent', 'modular', 'programming', 'refer', 'high', 'level', 'decomposition', 'code', 'entire', 'program', 'piece', 'structured', 'programming', 'low', 'level', 'code', 'use', 'structured', 'control', 'flow', 'object', 'orient', 'programming', 'datum', 'use', 'object', 'kind', 'data', 'structure']"
2580,"In object-oriented programming, the use of interfaces as an architectural pattern to construct modules is known as interface-based programming.citation needed","['object', 'orient', 'programming', 'use', 'interface', 'architectural', 'pattern', 'construct', 'module', 'know', 'interface', 'base', 'programming.citation', 'need']"
2581,"Modular programming, in the form of subsystems particularly for I/O and software libraries, dates to early software systems, where it was used for code reuse. Modular programming per se, with a goal of modularity, developed in the late 1960s and 1970s, as a larger-scale analog of the concept of structured programming 1960s. The term ""modular programming"" dates at least to the National Symposium on Modular Programming, organized at the Information and Systems Institute in July 1968 by Larry Constantine; other key concepts were information hiding 1972 and separation of concerns SoC, 1974.","['modular', 'programming', 'form', 'subsystem', 'particularly', 'software', 'library', 'date', 'early', 'software', 'system', 'code', 'reuse', 'modular', 'programming', 'goal', 'modularity', 'develop', 'late', '1960', '1970', 'large', 'scale', 'analog', 'concept', 'structured', 'programming', '1960', 'term', 'modular', 'programming', 'date', 'national', 'symposium', 'modular', 'programming', 'organize', 'information', 'systems', 'institute', 'july', '1968', 'larry', 'constantine', 'key', 'concept', 'information', 'hide', '1972', 'separation', 'concern', 'soc', '1974']"
2582,"Modules were not included in the original specification for ALGOL 68 1968, but were included as extensions in early implementations, ALGOL 68-R 1970 and ALGOL 68C 1970, and later formalized.1 One of the first languages designed from the start for modular programming was the short-lived Modula 1975, by Niklaus Wirth. Another early modular language was Mesa 1970s, by Xerox PARC, and Wirth drew on Mesa as well as the original Modula in its successor, Modula-2 1978, which influenced later languages, particularly through its successor, Modula-3 1980s. Modula's use of dot-qualified names, like M.a to refer to object a from module M, coincides with notation to access a field of a record and similarly for attributes or methods of objects, and is now widespread, seen in C#, Dart, Go, Java, OCaml, and Python, among others. Modular programming became widespread from the 1980s: the original Pascal language 1970 did not include modules, but later versions, notably UCSD Pascal 1978 and Turbo Pascal 1983 included them in the form of ""units"", as did the Pascal-influenced Ada 1980. The Extended Pascal ISO 10206:1990 standard kept closer to Modula2 in its modular support. Standard ML 19842 has one of the most complete module systems, including functors parameterized modules to map between modules.","['module', 'include', 'original', 'specification', 'algol', '1968', 'include', 'extension', 'early', 'implementation', 'algol', '1970', 'algol', '68c', '1970', 'later', 'formalized', 'language', 'design', 'start', 'modular', 'programming', 'short', 'live', 'modula', '1975', 'niklaus', 'wirth', 'early', 'modular', 'language', 'mesa', '1970s', 'xerox', 'parc', 'wirth', 'draw', 'mesa', 'original', 'modula', 'successor', 'modula-2', '1978', 'influence', 'later', 'language', 'particularly', 'successor', 'modula-3', '1980', 'modula', 'use', 'dot', 'qualify', 'name', 'like', 'm.a', 'refer', 'object', 'module', 'coincide', 'notation', 'access', 'field', 'record', 'similarly', 'attribute', 'method', 'object', 'widespread', 'see', 'dart', 'java', 'ocaml', 'python', 'modular', 'programming', 'widespread', '1980', 'original', 'pascal', 'language', '1970', 'include', 'module', 'later', 'version', 'notably', 'ucsd', 'pascal', '1978', 'turbo', 'pascal', '1983', 'include', 'form', 'unit', 'pascal', 'influence', 'ada', '1980', 'extended', 'pascal', 'iso', '10206', 'standard', 'keep', 'close', 'modula2', 'modular', 'support', 'standard', '19842', 'complete', 'module', 'system', 'include', 'functor', 'parameterized', 'module', 'map', 'module']"
2583,"In the 1980s and 1990s, modular programming was overshadowed by and often conflated with object-oriented programming, particularly due to the popularity of C++ and Java. For example, the C family of languages had support for objects and classes in C++ originally C with Classes, 1980 and Objective-C 1983, only supporting modules 30 years or more later. Java 1995 supports modules in the form of packages, though the primary unit of code organization is a class. However, Python 1991 prominently used both modules and objects from the start, using modules as the primary unit of code organization and ""packages"" as a larger-scale unit; and Perl 5 1994 includes support for both modules and objects, with a vast array of modules being available from CPAN 1993. OCaml 1996 followed ML by supporting modules and functors.","['1980', '1990s', 'modular', 'programming', 'overshadow', 'conflate', 'object', 'orient', 'programming', 'particularly', 'popularity', 'c++', 'java', 'example', 'family', 'language', 'support', 'object', 'class', 'c++', 'originally', 'class', '1980', 'objective', '1983', 'support', 'module', 'year', 'later', 'java', '1995', 'support', 'module', 'form', 'package', 'primary', 'unit', 'code', 'organization', 'class', 'python', '1991', 'prominently', 'module', 'object', 'start', 'module', 'primary', 'unit', 'code', 'organization', 'package', 'large', 'scale', 'unit', 'perl', '1994', 'include', 'support', 'module', 'object', 'vast', 'array', 'module', 'available', 'cpan', '1993', 'ocaml', '1996', 'follow', 'support', 'module', 'functor']"
2584,"Modular programming is now widespread, and found in virtually all major languages developed since the 1990s. The relative importance of modules varies between languages, and in class-based object-oriented languages there is still overlap and confusion with classes as a unit of organization and encapsulation, but these are both well-established as distinct concepts.","['modular', 'programming', 'widespread', 'find', 'virtually', 'major', 'language', 'develop', '1990s', 'relative', 'importance', 'module', 'varie', 'language', 'class', 'base', 'object', 'orient', 'language', 'overlap', 'confusion', 'class', 'unit', 'organization', 'encapsulation', 'establish', 'distinct', 'concept']"
2585,"The term assembly as in .NET languages like C#, F# or Visual Basic .NET or package as in Dart, Go or Java is sometimes used instead of module. In other implementations, these are distinct concepts; in Python a package is a collection of modules, while in Java 9 the introduction of the new module concept a collection of packages with enhanced access control was implemented.","['term', 'assembly', '.net', 'language', 'like', 'visual', 'basic', '.net', 'package', 'dart', 'java', 'instead', 'module', 'implementation', 'distinct', 'concept', 'python', 'package', 'collection', 'module', 'java', 'introduction', 'new', 'module', 'concept', 'collection', 'package', 'enhance', 'access', 'control', 'implement']"
2586,"Furthermore, the term ""package"" has other uses in software for example .NET NuGet packages. A component is a similar concept, but typically refers to a higher level; a component is a piece of a whole system, while a module is a piece of an individual program. The scale of the term ""module"" varies significantly between languages; in Python it is very small-scale and each file is a module, while in Java 9 it is planned to be large-scale, where a module is a collection of packages, which are in turn collections of files.","['furthermore', 'term', 'package', 'use', 'software', 'example', '.net', 'nuget', 'package', 'component', 'similar', 'concept', 'typically', 'refer', 'high', 'level', 'component', 'piece', 'system', 'module', 'piece', 'individual', 'program', 'scale', 'term', 'module', 'vary', 'significantly', 'language', 'python', 'small', 'scale', 'file', 'module', 'java', 'plan', 'large', 'scale', 'module', 'collection', 'package', 'turn', 'collection', 'file']"
2587,"Other terms for modules include unit, used in Pascal dialects.","['term', 'module', 'include', 'unit', 'pascal', 'dialect']"
2588,"Languages that formally support the module concept include Ada, Algol, BlitzMax, C++, C#, Clojure, COBOL, Common_Lisp, D, Dart, eC, Erlang, Elixir, Elm, F, F#, Fortran, Go, Haskell, IBM/360 Assembler, Control Language CL, IBM RPG, Java,a Julia, MATLAB, ML, Modula, Modula-2, Modula-3, Morpho, NEWP, Oberon, Oberon-2, Objective-C, OCaml, several derivatives of Pascal Component Pascal, Object Pascal, Turbo Pascal, UCSD Pascal, Perl, PHP, PL/I, PureBasic, Python, R, Ruby,4 Rust, JavaScript,5 Visual Basic .NET and WebDNA.","['language', 'formally', 'support', 'module', 'concept', 'include', 'ada', 'algol', 'blitzmax', 'c++', 'clojure', 'cobol', 'common_lisp', 'dart', 'erlang', 'elixir', 'elm', 'fortran', 'haskell', 'assembler', 'control', 'language', 'ibm', 'rpg', 'java', 'julia', 'matlab', 'modula', 'modula-2', 'modula-3', 'morpho', 'newp', 'oberon', 'oberon-2', 'objective', 'ocaml', 'derivative', 'pascal', 'component', 'pascal', 'object', 'pascal', 'turbo', 'pascal', 'ucsd', 'pascal', 'perl', 'php', 'purebasic', 'python', 'ruby', 'rust', 'javascript', 'visual', 'basic', '.net', 'webdna']"
2589,"Conspicuous examples of languages that lack support for modules are C and have been C++ and Pascal in their original form, C and C++ do, however, allow separate compilation and declarative interfaces to be specified using header files. Modules were added to Objective-C in iOS 7 2013; to C++ with C++20,6 and Pascal was superseded by Modula and Oberon, which included modules from the start, and various derivatives that included modules. JavaScript has had native modules since ECMAScript 2015.","['conspicuous', 'example', 'language', 'lack', 'support', 'module', 'c++', 'pascal', 'original', 'form', 'c++', 'allow', 'separate', 'compilation', 'declarative', 'interface', 'specify', 'header', 'file', 'module', 'add', 'objective', 'ios', '2013', 'c++', 'c++20', 'pascal', 'supersede', 'modula', 'oberon', 'include', 'module', 'start', 'derivative', 'include', 'module', 'javascript', 'native', 'module', 'ecmascript', '2015']"
2590,"Modular programming can be performed even where the programming language lacks explicit syntactic features to support named modules, like, for example, in C. This is done by using existing language features, together with, for example, coding conventions, programming idioms and the physical code structure. IBM i also uses modules when programming in the Integrated Language Environment ILE.","['modular', 'programming', 'perform', 'programming', 'language', 'lack', 'explicit', 'syntactic', 'feature', 'support', 'name', 'module', 'like', 'example', 'exist', 'language', 'feature', 'example', 'code', 'convention', 'programming', 'idiom', 'physical', 'code', 'structure', 'ibm', 'use', 'module', 'program', 'integrated', 'language', 'environment', 'ile']"
2591,"With modular programming, concerns are separated such that modules perform logically discrete functions, interacting through well-defined interfaces. Often modules form a directed acyclic graph DAG; in this case a cyclic dependency between modules is seen as indicating that these should be a single module. In the case where modules do form a DAG they can be arranged as a hierarchy, where the lowest-level modules are independent, depending on no other modules, and higher-level modules depend on lower-level ones. A particular program or library is a top-level module of its own hierarchy, but can in turn be seen as a lower-level module of a higher-level program, library, or system.","['modular', 'programming', 'concern', 'separate', 'module', 'perform', 'logically', 'discrete', 'function', 'interact', 'define', 'interface', 'module', 'form', 'direct', 'acyclic', 'graph', 'dag', 'case', 'cyclic', 'dependency', 'module', 'see', 'indicate', 'single', 'module', 'case', 'module', 'form', 'dag', 'arrange', 'hierarchy', 'low', 'level', 'module', 'independent', 'depend', 'module', 'high', 'level', 'module', 'depend', 'low', 'level', 'one', 'particular', 'program', 'library', 'level', 'module', 'hierarchy', 'turn', 'see', 'low', 'level', 'module', 'high', 'level', 'program', 'library', 'system']"
2592,"When creating a modular system, instead of creating a monolithic application where the smallest component is the whole, several smaller modules are written separately so when they are composed together, they construct the executable application program. Typically these are also compiled separately, via separate compilation, and then linked by a linker. A just-in-time compiler may perform some of this construction ""on-the-fly"" at run time.","['create', 'modular', 'system', 'instead', 'create', 'monolithic', 'application', 'small', 'component', 'small', 'module', 'write', 'separately', 'compose', 'construct', 'executable', 'application', 'program', 'typically', 'compile', 'separately', 'separate', 'compilation', 'link', 'linker', 'time', 'compiler', 'perform', 'construction', 'fly', 'run', 'time']"
2593,These independent functions are commonly classified as either program control functions or specific task functions. Program control functions are designed to work for one program. Specific task functions are closely prepared to be applicable for various programs.,"['independent', 'function', 'commonly', 'classify', 'program', 'control', 'function', 'specific', 'task', 'function', 'program', 'control', 'function', 'design', 'work', 'program', 'specific', 'task', 'function', 'closely', 'prepared', 'applicable', 'program']"
2594,"This makes modular designed systems, if built correctly, far more reusable than a traditional monolithic design, since all or many of these modules may then be reused without change in other projects. This also facilitates the ""breaking down"" of projects into several smaller projects. Theoretically, a modularized software project will be more easily assembled by large teams, since no team members are creating the whole system, or even need to know about the system as a whole. They can focus just on the assigned smaller task.","['make', 'modular', 'design', 'system', 'build', 'correctly', 'far', 'reusable', 'traditional', 'monolithic', 'design', 'module', 'reuse', 'change', 'project', 'facilitate', 'break', 'project', 'small', 'project', 'theoretically', 'modularize', 'software', 'project', 'easily', 'assemble', 'large', 'team', 'team', 'member', 'create', 'system', 'need', 'know', 'system', 'focus', 'assign', 'small', 'task']"
2595,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2596,"Multiple dispatch or multimethods is a feature of some programming languages in which a function or method can be dynamically dispatched based on the run-time dynamic type or, in the more general case, some other attribute of more than one of its arguments.1 This is a generalization of single-dispatch polymorphism where a function or method call is dynamically dispatched based on the derived type of the object on which the method has been called. Multiple dispatch routes the dynamic dispatch to the implementing function or method using the combined characteristics of one or more arguments.","['multiple', 'dispatch', 'multimethod', 'feature', 'programming', 'language', 'function', 'method', 'dynamically', 'dispatch', 'base', 'run', 'time', 'dynamic', 'type', 'general', 'case', 'attribute', 'arguments', 'generalization', 'single', 'dispatch', 'polymorphism', 'function', 'method', 'dynamically', 'dispatch', 'base', 'derive', 'type', 'object', 'method', 'call', 'multiple', 'dispatch', 'route', 'dynamic', 'dispatch', 'implement', 'function', 'method', 'combined', 'characteristic', 'argument']"
2597,"Developers of computer software typically organize source code into named blocks variously called subroutines, procedures, subprograms, functions, or methods. The code in the function is executed by calling it – executing a piece of code that references its name. This transfers control temporarily to the called function; when the function's execution has completed, control is typically transferred back to the instruction in the caller that follows the reference.","['developer', 'computer', 'software', 'typically', 'organize', 'source', 'code', 'name', 'block', 'variously', 'call', 'subroutine', 'procedure', 'subprograms', 'function', 'method', 'code', 'function', 'execute', 'call', 'execute', 'piece', 'code', 'reference', 'transfer', 'control', 'temporarily', 'call', 'function', 'function', 'execution', 'complete', 'control', 'typically', 'transfer', 'instruction', 'caller', 'follow', 'reference']"
2598,"Function names are usually selected so as to be descriptive of the function's purpose. It is sometimes desirable to give several functions the same name, often because they perform conceptually similar tasks, but operate on different types of input data. In such cases, the name reference at the function call site is not sufficient for identifying the block of code to be executed. Instead, the number and type of the arguments to the function call are also used to select among several function implementations.","['function', 'name', 'usually', 'select', 'descriptive', 'function', 'purpose', 'desirable', 'function', 'perform', 'conceptually', 'similar', 'task', 'operate', 'different', 'type', 'input', 'datum', 'case', 'reference', 'function', 'site', 'sufficient', 'identify', 'block', 'code', 'execute', 'instead', 'number', 'type', 'argument', 'function', 'select', 'function', 'implementation']"
2599,"In more conventional, i.e., single-dispatch object-oriented programming languages, when invoking a method sending a message in Smalltalk, calling a member function in C++, one of its arguments is treated specially and used to determine which of the potentially many classes of methods of that name is to be applied. In many languages, the special argument is indicated syntactically; for example, a number of programming languages put the special argument before a dot in making a method call: special.methodother, arguments, here, so that lion.sound would produce a roar, whereas sparrow.sound would produce a chirp.","['conventional', 'i.e.', 'single', 'dispatch', 'object', 'orient', 'programming', 'language', 'invoke', 'method', 'send', 'message', 'smalltalk', 'call', 'member', 'function', 'c++', 'argument', 'treat', 'specially', 'determine', 'potentially', 'class', 'method', 'apply', 'language', 'special', 'argument', 'indicate', 'syntactically', 'example', 'number', 'programming', 'language', 'special', 'argument', 'dot', 'make', 'method', 'special.methodother', 'argument', 'lion.sound', 'produce', 'roar', 'sparrow.sound', 'produce', 'chirp']"
2600,"In contrast, in languages with multiple dispatch, the selected method is simply the one whose arguments match the number and type of the function call. There is no special argument that owns the function/method carried out in a particular call.","['contrast', 'language', 'multiple', 'dispatch', 'select', 'method', 'simply', 'argument', 'match', 'number', 'type', 'function', 'special', 'argument', 'own', 'function', 'method', 'carry', 'particular']"
2601,The Common Lisp Object System CLOS is an early and well-known example of multiple dispatch. Another notable example of the use of multiple dispatch is the Julia programming language.,"['common', 'lisp', 'object', 'system', 'clos', 'early', 'know', 'example', 'multiple', 'dispatch', 'notable', 'example', 'use', 'multiple', 'dispatch', 'julia', 'programming', 'language']"
2602,"Multiple dispatch should be distinguished from function overloading, in which static typing information, such as a term's declared or inferred type or base type in a language with subtyping is used to determine which of several possibilities will be used at a given call site, and that determination is made at compile or link time or some other time before program execution starts and is thereafter invariant for a given deployment or run of the program. Many languages such as C++ offer robust function overloading but do not offer dynamic multiple dispatch C++ only permits dynamic single dispatch through use of virtual functions.","['multiple', 'dispatch', 'distinguish', 'function', 'overloading', 'static', 'type', 'information', 'term', 'declare', 'infer', 'type', 'base', 'type', 'language', 'subtyping', 'determine', 'possibility', 'give', 'site', 'determination', 'compile', 'link', 'time', 'time', 'program', 'execution', 'start', 'invariant', 'give', 'deployment', 'run', 'program', 'language', 'c++', 'offer', 'robust', 'function', 'overloading', 'offer', 'dynamic', 'multiple', 'dispatch', 'c++', 'permit', 'dynamic', 'single', 'dispatch', 'use', 'virtual', 'function']"
2603,"When working with languages that can discriminate data types at compile time, selecting among the alternatives can occur then. The act of creating such alternative functions for compile time selection is usually referred to as overloading a function.","['work', 'language', 'discriminate', 'datum', 'type', 'compile', 'time', 'select', 'alternative', 'occur', 'act', 'create', 'alternative', 'function', 'compile', 'time', 'selection', 'usually', 'refer', 'overload', 'function']"
2604,"In programming languages that defer data type identification until run time i.e., late binding, selection among alternative functions must occur then, based on the dynamically determined types of function arguments. Functions whose alternative implementations are selected in this manner are referred to most generally as multimethods.","['programming', 'language', 'defer', 'data', 'type', 'identification', 'run', 'time', 'i.e.', 'late', 'bind', 'selection', 'alternative', 'function', 'occur', 'base', 'dynamically', 'determined', 'type', 'function', 'argument', 'function', 'alternative', 'implementation', 'select', 'manner', 'refer', 'generally', 'multimethod']"
2605,"There is some run-time cost associated with dynamically dispatching function calls. In some languages,citation needed the distinction between overloading and multimethods can be blurred, with the compiler determining whether compile time selection can be applied to a given function call, or whether slower run time dispatch is needed.","['run', 'time', 'cost', 'associate', 'dynamically', 'dispatch', 'function', 'call', 'language', 'citation', 'need', 'distinction', 'overloading', 'multimethod', 'blur', 'compiler', 'determine', 'compile', 'time', 'selection', 'apply', 'give', 'function', 'slow', 'run', 'time', 'dispatch', 'need']"
2606,"There are several known issues with dynamic-dispatch, both single and multiple. While many of these issues are solved for single-dispatch, which has been a standard feature in object-oriented programming languages for decades, these issues become more complicated in the multiple-dispatch case.","['know', 'issue', 'dynamic', 'dispatch', 'single', 'multiple', 'issue', 'solve', 'single', 'dispatch', 'standard', 'feature', 'object', 'orient', 'programming', 'language', 'decade', 'issue', 'complicated', 'multiple', 'dispatch', 'case']"
2607,"In most popular programming language, source code is delivered and deployed in granules of functionality which we will here call packages; actual terminology for this concept varies between language. Each package may contain multiple type, value, and function definitions, packages are often compiled separately in languages with a compliation step, and a non-cyclical dependency relationship may exist. A complete program is a set of packages, with a main package which may depend on several other packages, and the whole program consisting of the transitive closure of the dependency relationship.","['popular', 'programming', 'language', 'source', 'code', 'deliver', 'deploy', 'granule', 'functionality', 'package', 'actual', 'terminology', 'concept', 'vary', 'language', 'package', 'contain', 'multiple', 'type', 'value', 'function', 'definition', 'package', 'compile', 'separately', 'language', 'compliation', 'step', 'non', 'cyclical', 'dependency', 'relationship', 'exist', 'complete', 'program', 'set', 'package', 'main', 'package', 'depend', 'package', 'program', 'consist', 'transitive', 'closure', 'dependency', 'relationship']"
2608,"The so-called expression problem relates to the ability for code in a depending package to extend behaviors functions or datatypes defined in a base package from within an including package, without modifying the source to the base package. Traditional single-dispatch OO languages make it trivial to add new datatypes but not new functions; traditional functional languages tend to have the opposite effect, and multiple dispatch, if implemented correctly, allows both. It is desirable for an implementation of multiple dispatch to have the following properties:","['call', 'expression', 'problem', 'relate', 'ability', 'code', 'depending', 'package', 'extend', 'behavior', 'function', 'datatype', 'define', 'base', 'package', 'include', 'package', 'modify', 'source', 'base', 'package', 'traditional', 'single', 'dispatch', 'language', 'trivial', 'add', 'new', 'datatype', 'new', 'function', 'traditional', 'functional', 'language', 'tend', 'opposite', 'effect', 'multiple', 'dispatch', 'implement', 'correctly', 'allow', 'desirable', 'implementation', 'multiple', 'dispatch', 'following', 'property']"
2609,"It is generally desirable that for any given invocation of a multi-method, there be at most one ""best"" candidate among implementation cases of the multi-method, and/or that if there is not, that this be resolved in a predictable and deterministic fashion, including failure. Non-deterministic behavior is undesirable. Assuming a set of types with a non-circular subtyping relationship, one can define that one implementation of a multi-method is ""better"" more specific if all dynamically-dispatched arguments in the first are subtypes of all dynamically-dispatched arguments specified in the second, and at least one is a struct subtype. With single dispatch and in the absence of multiple inheritance, this condition is trivially satisfied, but with multiple dispatch, it is possible for two or more candidates to satisfy a given actual argument list, but neither is more specific than the other one dynamic argument being the subtype in one case, another being the subtype in the other case. This particularly can happen if two different packages, neither depending on the other, both extend some multi-method with implementations concerning each package's types, and then a third package that includes both possibly indirectly then invokes the multi-method using arguments from both packages.","['generally', 'desirable', 'give', 'invocation', 'multi', 'method', 'good', 'candidate', 'implementation', 'case', 'multi', 'method', 'resolve', 'predictable', 'deterministic', 'fashion', 'include', 'failure', 'non', 'deterministic', 'behavior', 'undesirable', 'assume', 'set', 'type', 'non', 'circular', 'subtype', 'relationship', 'define', 'implementation', 'multi', 'method', 'well', 'specific', 'dynamically', 'dispatch', 'argument', 'subtype', 'dynamically', 'dispatch', 'argument', 'specify', 'second', 'struct', 'subtype', 'single', 'dispatch', 'absence', 'multiple', 'inheritance', 'condition', 'trivially', 'satisfied', 'multiple', 'dispatch', 'possible', 'candidate', 'satisfy', 'give', 'actual', 'argument', 'list', 'specific', 'dynamic', 'argument', 'subtype', 'case', 'subtype', 'case', 'particularly', 'happen', 'different', 'package', 'depend', 'extend', 'multi', 'method', 'implementation', 'concern', 'package', 'type', 'package', 'include', 'possibly', 'indirectly', 'invoke', 'multi', 'method', 'argument', 'package']"
2610,"Efficient implementation of single-dispatch, including in programming languages that are separately compiled to object code and linked with a low-level not-language-aware linker, including dynamically at program load/start time or even under the direction of the application code, are well known. The ""vtable"" method developed in C++ and other early OO languages where each class has an array of function pointers corresponding to that class's virtual functions is nearly as fast as a static method call, requiring O1 overhead and only one additional memory lookup even in the un-optimized case. However, the vtable method uses the function name and not the argument type as its lookup key, and does not scale to the multiple dispatch case. It also depends on the object-oriented paradigm of methods being features of classes, not standalone entities independent of any particular datatype.","['efficient', 'implementation', 'single', 'dispatch', 'include', 'programming', 'language', 'separately', 'compile', 'object', 'code', 'link', 'low', 'level', 'language', 'aware', 'linker', 'include', 'dynamically', 'program', 'load', 'start', 'time', 'direction', 'application', 'code', 'know', 'vtable', 'method', 'develop', 'c++', 'early', 'language', 'class', 'array', 'function', 'pointer', 'correspond', 'class', 'virtual', 'function', 'nearly', 'fast', 'static', 'method', 'require', 'overhead', 'additional', 'memory', 'lookup', 'optimize', 'case', 'vtable', 'method', 'use', 'function', 'argument', 'type', 'lookup', 'key', 'scale', 'multiple', 'dispatch', 'case', 'depend', 'object', 'orient', 'paradigm', 'method', 'feature', 'class', 'standalone', 'entity', 'independent', 'particular', 'datatype']"
2611,Efficient implementation of multiple-dispatch remains an ongoing research problem.,"['efficient', 'implementation', 'multiple', 'dispatch', 'remain', 'ongoing', 'research', 'problem']"
2612,"To estimate how often multiple dispatch is used in practice, Muschevici et al.2 studied programs that use dynamic dispatch. They analyzed nine applications, mostly compilers, written in six different languages: Common Lisp Object System, Dylan, Cecil, MultiJava, Diesel, and Nice. Their results show that 13–32% of generic functions use the dynamic type of one argument, while 2.7–6.5% of them use the dynamic type of multiple arguments. The remaining 65–93% of generic functions have one concrete method overrider, and thus are not considered to use the dynamic types of their arguments. Further, the study reports that 2–20% of generic functions had two and 3–6% had three concrete function implementations. The numbers decrease rapidly for functions with more concrete overriders.","['estimate', 'multiple', 'dispatch', 'practice', 'muschevici', 'al', 'study', 'program', 'use', 'dynamic', 'dispatch', 'analyze', 'application', 'compiler', 'write', 'different', 'language', 'common', 'lisp', 'object', 'system', 'dylan', 'cecil', 'multijava', 'diesel', 'nice', 'result', '13–32', 'generic', 'function', 'use', 'dynamic', 'type', 'argument', '2–6', 'use', 'dynamic', 'type', 'multiple', 'argument', 'remain', '65–93', 'generic', 'function', 'concrete', 'method', 'overrider', 'consider', 'use', 'dynamic', 'type', 'argument', 'study', 'report', '2–20', 'generic', 'function', '3–6', 'concrete', 'function', 'implementation', 'number', 'decrease', 'rapidly', 'function', 'concrete', 'overrider']"
2613,"Multiple dispatch is used much more heavily in Julia, where multiple dispatch was a central design concept from the origin of the language: collecting the same statistics as Muschevici on the average number of methods per generic function, it was found that the Julia standard library uses more than double the amount of overloading than in the other languages analyzed by Muschevici, and more than 10 times in the case of binary operators.3","['multiple', 'dispatch', 'heavily', 'julia', 'multiple', 'dispatch', 'central', 'design', 'concept', 'origin', 'language', 'collect', 'statistic', 'muschevici', 'average', 'number', 'method', 'generic', 'function', 'find', 'julia', 'standard', 'library', 'use', 'double', 'overload', 'language', 'analyze', 'muschevici', 'time', 'case', 'binary', 'operators']"
2614,"The data from these papers is summarized in the following table, where the dispatch ratio DR is the average number of methods per generic function; the choice ratio CR is the mean of the square of the number of methods to better measure the frequency of functions with a large number of methods;23 and the degree of specialization DoS is the average number of type-specialized arguments per method i.e., the number of arguments that are dispatched on:","['datum', 'paper', 'summarize', 'follow', 'table', 'dispatch', 'ratio', 'average', 'number', 'method', 'generic', 'function', 'choice', 'ratio', 'mean', 'square', 'number', 'method', 'well', 'measure', 'frequency', 'function', 'large', 'number', 'methods', 'degree', 'specialization', 'dos', 'average', 'number', 'type', 'specialize', 'argument', 'method', 'i.e.', 'number', 'argument', 'dispatch']"
2615,"The theory of multiple dispatching languages was first developed by Castagna et al., by defining a model for overloaded functions with late binding.45 It yielded the first formalization of the problem of covariance and contravariance of object-oriented languages6 and a solution to the problem of binary methods.7","['theory', 'multiple', 'dispatching', 'language', 'develop', 'castagna', 'define', 'model', 'overloaded', 'function', 'late', 'binding', 'yield', 'formalization', 'problem', 'covariance', 'contravariance', 'object', 'orient', 'languages6', 'solution', 'problem', 'binary', 'methods']"
2616,"Distinguishing multiple and single dispatch may be made clearer by an example. Imagine a game that has, among its user-visible objects, spaceships and asteroids. When two objects collide, the program may need to do different things according to what has just hit what.","['distinguish', 'multiple', 'single', 'dispatch', 'clear', 'example', 'imagine', 'game', 'user', 'visible', 'object', 'spaceship', 'asteroid', 'object', 'collide', 'program', 'need', 'different', 'thing', 'accord', 'hit']"
2617,"C# introduced support for dynamic multimethods in version 48 April 2010 using the 'dynamic' keyword. The following example demonstrates multimethods. Like many other statically-typed languages, C# also supports static method overloading.9 Microsoft expects that developers will choose static typing over dynamic typing in most scenarios.10 The 'dynamic' keyword supports interoperability with COM objects and dynamically-typed .NET languages.","['introduce', 'support', 'dynamic', 'multimethod', 'version', 'april', '2010', 'dynamic', 'keyword', 'follow', 'example', 'demonstrate', 'multimethod', 'like', 'statically', 'type', 'language', 'support', 'static', 'method', 'overloading', 'microsoft', 'expect', 'developer', 'choose', 'static', 'typing', 'dynamic', 'typing', 'scenarios', 'dynamic', 'keyword', 'support', 'interoperability', 'com', 'object', 'dynamically', 'type', '.net', 'language']"
2618,The example below uses features introduced in C# 9 and C# 10.,"['example', 'use', 'feature', 'introduce']"
2619,"Groovy is a general purpose Java compatible/interusable JVM language, which, contrary to Java, uses late binding / multiple dispatch.11","['groovy', 'general', 'purpose', 'java', 'compatible', 'interusable', 'jvm', 'language', 'contrary', 'java', 'use', 'late', 'bind', 'multiple', 'dispatch']"
2620,"In a language with multiple dispatch, such as Common Lisp, it might look more like this Common Lisp example shown:","['language', 'multiple', 'dispatch', 'common', 'lisp', 'look', 'like', 'common', 'lisp', 'example', 'show']"
2621,"and similarly for the other methods. Explicit testing and ""dynamic casting"" are not used.","['similarly', 'method', 'explicit', 'testing', 'dynamic', 'casting']"
2622,"In the presence of multiple dispatch, the traditional idea of methods as being defined in classes and contained in objects becomes less appealing—each collide-with method above is attached to two different classes, not one. Hence, the special syntax for method invocation generally disappears, so that method invocation looks exactly like ordinary function invocation, and methods are grouped not in classes but in generic functions.","['presence', 'multiple', 'dispatch', 'traditional', 'idea', 'method', 'define', 'class', 'contain', 'object', 'appealing', 'collide', 'method', 'attach', 'different', 'class', 'special', 'syntax', 'method', 'invocation', 'generally', 'disappear', 'method', 'invocation', 'look', 'exactly', 'like', 'ordinary', 'function', 'invocation', 'method', 'group', 'class', 'generic', 'function']"
2623,"Julia has built-in multiple dispatch, and it is central to the language design.3 The Julia version of the example above might look like:","['julia', 'build', 'multiple', 'dispatch', 'central', 'language', 'design', 'julia', 'version', 'example', 'look', 'like']"
2624,"Raku, like Perl, uses proven ideas from other languages, and type systems have shown themselves to offer compelling advantages in compiler-side code analysis and powerful user-side semantics via multiple dispatch.","['raku', 'like', 'perl', 'use', 'prove', 'idea', 'language', 'type', 'system', 'show', 'offer', 'compelling', 'advantage', 'compiler', 'code', 'analysis', 'powerful', 'user', 'semantic', 'multiple', 'dispatch']"
2625,"It has both multimethods, and multisubs. Since most operators are subroutines, it also has multiple dispatched operators.","['multimethod', 'multisub', 'operator', 'subroutine', 'multiple', 'dispatch', 'operator']"
2626,"Along with the usual type constraints, it also has where constraints that allow making very specialized subroutines.","['usual', 'type', 'constraint', 'constraint', 'allow', 'make', 'specialized', 'subroutine']"
2627,"In languages that do not support multiple dispatch at the language definition or syntactic level, it is often possible to add multiple dispatch using a library extension. JavaScript and TypeScript do not support multimethods at the syntax level, but it is possible to add multiple dispatch via a library. For example, the multimethod package12 provides an implementation of multiple dispatch, generic functions.","['language', 'support', 'multiple', 'dispatch', 'language', 'definition', 'syntactic', 'level', 'possible', 'add', 'multiple', 'dispatch', 'library', 'extension', 'javascript', 'typescript', 'support', 'multimethod', 'syntax', 'level', 'possible', 'add', 'multiple', 'dispatch', 'library', 'example', 'multimethod', 'package12', 'provide', 'implementation', 'multiple', 'dispatch', 'generic', 'function']"
2628,"Multiple dispatch can be added to Python using a library extension. For example, using the module multimethod.py13 and also with the module multimethods.py14 which provides CLOS-style multimethods for Python without changing the underlying syntax or keywords of the language.","['multiple', 'dispatch', 'add', 'python', 'library', 'extension', 'example', 'module', 'multimethod.py13', 'module', 'multimethods.py14', 'provide', 'clos', 'style', 'multimethod', 'python', 'change', 'underlie', 'syntax', 'keyword', 'language']"
2629,"Functionally, this is very similar to the CLOS example, but the syntax is conventional Python.","['functionally', 'similar', 'clos', 'example', 'syntax', 'conventional', 'python']"
2630,"Using Python 2.4 decorators, Guido van Rossum produced a sample implementation of multimethods15 with a simplified syntax:","['python', '2', 'decorator', 'guido', 'van', 'rossum', 'produce', 'sample', 'implementation', 'multimethods15', 'simplified', 'syntax']"
2631,and then it goes on to define the multimethod decorator.,"['go', 'define', 'multimethod', 'decorator']"
2632,The PEAK-Rules package provides multiple dispatch with a syntax similar to the above example.16 It was later replaced by PyProtocols.17,"['peak', 'rules', 'package', 'provide', 'multiple', 'dispatch', 'syntax', 'similar', 'example', 'later', 'replace', 'pyprotocols']"
2633,The Reg library also supports multiple and predicate dispatch.18,"['reg', 'library', 'support', 'multiple', 'predicate', 'dispatch']"
2634,"C does not have dynamic dispatch, so it must be implemented manually in some form. Often an enum is used to identify the subtype of an object. Dynamic dispatch can be done by looking up this value in a function pointer branch table. Here is a simple example in C:","['dynamic', 'dispatch', 'implement', 'manually', 'form', 'enum', 'identify', 'subtype', 'object', 'dynamic', 'dispatch', 'look', 'value', 'function', 'pointer', 'branch', 'table', 'simple', 'example']"
2635,"With the C Object System library,19 C does support dynamic dispatch similar to CLOS. It is fully extensible and does not need any manual handling of the methods. Dynamic message methods are dispatched by the dispatcher of COS, which is faster than Objective-C. Here is an example in COS:","['object', 'system', 'library', 'support', 'dynamic', 'dispatch', 'similar', 'clos', 'fully', 'extensible', 'need', 'manual', 'handling', 'method', 'dynamic', 'message', 'method', 'dispatch', 'dispatcher', 'cos', 'fast', 'objective', 'example', 'cos']"
2636,"As of 2021update, C++ natively supports only single dispatch, though adding multi-methods multiple dispatch was proposed by Bjarne Stroustrup and collaborators in 2007.20 The methods of working around this limit are analogous: use either the visitor pattern, dynamic cast or a library:","['2021update', 'c++', 'natively', 'support', 'single', 'dispatch', 'add', 'multi', 'method', 'multiple', 'dispatch', 'propose', 'bjarne', 'stroustrup', 'collaborator', '2007', 'method', 'work', 'limit', 'analogous', 'use', 'visitor', 'pattern', 'dynamic', 'cast', 'library']"
2637,"The YOMM2 library21 provides a fast, orthogonal implementation of open multimethods.","['yomm2', 'library21', 'provide', 'fast', 'orthogonal', 'implementation', 'open', 'multimethod']"
2638,"The syntax for declaring open methods is inspired by a proposal for a native C++ implementation. The library requires that the user registers all the classes used as virtual arguments and their sub-classes, but does not require any modifications to existing code. Methods are implemented as ordinary inline C++ functions; they can be overloaded and they can be passed by pointer. There is no limit on the number of virtual arguments, and they can be arbitrarily mixed with non-virtual arguments.","['syntax', 'declare', 'open', 'method', 'inspire', 'proposal', 'native', 'c++', 'implementation', 'library', 'require', 'user', 'register', 'class', 'virtual', 'argument', 'sub', 'class', 'require', 'modification', 'exist', 'code', 'method', 'implement', 'ordinary', 'inline', 'c++', 'function', 'overload', 'pass', 'pointer', 'limit', 'number', 'virtual', 'argument', 'arbitrarily', 'mix', 'non', 'virtual', 'argument']"
2639,"The library uses a combination of techniques compressed dispatch tables, collision free integer hash table to implement method calls in constant time, while mitigating memory usage. Dispatching a call to an open method with a single virtual argument takes only 15–30% more time than calling an ordinary virtual member function, when a modern optimizing compiler is used.","['library', 'use', 'combination', 'technique', 'compress', 'dispatch', 'table', 'collision', 'free', 'integer', 'hash', 'table', 'implement', 'method', 'call', 'constant', 'time', 'mitigate', 'memory', 'usage', 'dispatch', 'open', 'method', 'single', 'virtual', 'argument', 'take', '15–30', 'time', 'call', 'ordinary', 'virtual', 'member', 'function', 'modern', 'optimizing', 'compiler']"
2640,The Asteroids example can be implemented as follows:,"['asteroids', 'example', 'implement', 'follow']"
2641,"Stroustrup mentions in The Design and Evolution of C++ that he liked the concept of multimethods and considered implementing it in C++ but claims to have been unable to find an efficient sample implementation comparable to virtual functions and resolve some possible type ambiguity problems. He then states that although the feature would still be nice to have, that it can be approximately implemented using double dispatch or a type based lookup table as outlined in the C/C++ example above so is a low priority feature for future language revisions.22","['stroustrup', 'mention', 'design', 'evolution', 'c++', 'like', 'concept', 'multimethod', 'consider', 'implement', 'c++', 'claim', 'unable', 'find', 'efficient', 'sample', 'implementation', 'comparable', 'virtual', 'function', 'resolve', 'possible', 'type', 'ambiguity', 'problem', 'state', 'feature', 'nice', 'approximately', 'implement', 'double', 'dispatch', 'type', 'base', 'lookup', 'table', 'outline', 'c++', 'example', 'low', 'priority', 'feature', 'future', 'language', 'revisions']"
2642,"As of 2021update, as do many other object-oriented programming languages, D natively supports only single dispatch. However, it is possible to emulate open multimethods as a library function in D. The openmethods library23 is an example.","['2021update', 'object', 'orient', 'programming', 'language', 'natively', 'support', 'single', 'dispatch', 'possible', 'emulate', 'open', 'multimethod', 'library', 'function', 'openmethod', 'library23', 'example']"
2643,"In a language with only single dispatch, such as Java, multiple dispatch can be emulated with multiple levels of single dispatch:","['language', 'single', 'dispatch', 'java', 'multiple', 'dispatch', 'emulate', 'multiple', 'level', 'single', 'dispatch']"
2644,Run time instanceof checks at one or both levels can also be used.,"['run', 'time', 'instanceof', 'check', 'level']"
2645,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2646,"Multiple inheritance is a feature of some object-oriented computer programming languages in which an object or class can inherit features from more than one parent object or parent class. It is distinct from single inheritance, where an object or class may only inherit from one particular object or class.","['multiple', 'inheritance', 'feature', 'object', 'orient', 'computer', 'programming', 'language', 'object', 'class', 'inherit', 'feature', 'parent', 'object', 'parent', 'class', 'distinct', 'single', 'inheritance', 'object', 'class', 'inherit', 'particular', 'object', 'class']"
2647,"Multiple inheritance has been a controversial issue for many years,12 with opponents pointing to its increased complexity and ambiguity in situations such as the ""diamond problem"", where it may be ambiguous as to which parent class a particular feature is inherited from if more than one parent class implements said feature. This can be addressed in various ways, including using virtual inheritance.3 Alternate methods of object composition not based on inheritance such as mixins and traits have also been proposed to address the ambiguity.","['multiple', 'inheritance', 'controversial', 'issue', 'years', 'opponent', 'point', 'increase', 'complexity', 'ambiguity', 'situation', 'diamond', 'problem', 'ambiguous', 'parent', 'class', 'particular', 'feature', 'inherit', 'parent', 'class', 'implement', 'say', 'feature', 'address', 'way', 'include', 'virtual', 'inheritance', 'alternate', 'method', 'object', 'composition', 'base', 'inheritance', 'mixin', 'trait', 'propose', 'address', 'ambiguity']"
2648,"In object-oriented programming OOP, inheritance describes a relationship between two classes in which one class the child class subclasses the parent class. The child inherits methods and attributes of the parent, allowing for shared functionality. For example, one might create a variable class Mammal with features such as eating, reproducing, etc.; then define a child class Cat that inherits those features without having to explicitly program them, while adding new features like chasing mice.","['object', 'orient', 'programming', 'oop', 'inheritance', 'describe', 'relationship', 'class', 'class', 'child', 'class', 'subclasse', 'parent', 'class', 'child', 'inherit', 'method', 'attribute', 'parent', 'allow', 'share', 'functionality', 'example', 'create', 'variable', 'class', 'mammal', 'feature', 'eat', 'reproducing', 'etc', 'define', 'child', 'class', 'cat', 'inherit', 'feature', 'have', 'explicitly', 'program', 'add', 'new', 'feature', 'like', 'chase', 'mouse']"
2649,"Multiple inheritance allows programmers to use more than one totally orthogonal hierarchy simultaneously, such as allowing Cat to inherit from Cartoon character and Pet and Mammal and access features from within all of those classes.","['multiple', 'inheritance', 'allow', 'programmer', 'use', 'totally', 'orthogonal', 'hierarchy', 'simultaneously', 'allow', 'cat', 'inherit', 'cartoon', 'character', 'pet', 'mammal', 'access', 'feature', 'class']"
2650,"Languages that support multiple inheritance include: C++, Common Lisp via Common Lisp Object System CLOS, EuLisp via The EuLisp Object System TELOS, Curl, Dylan, Eiffel, Logtalk, Object REXX, Scala via use of mixin classes, OCaml, Perl, POP-11, Python, R, Raku, and Tcl built-in from 8.6 or via Incremental Tcl Incr Tcl in earlier versions45.","['language', 'support', 'multiple', 'inheritance', 'include', 'c++', 'common', 'lisp', 'common', 'lisp', 'object', 'system', 'clos', 'eulisp', 'eulisp', 'object', 'system', 'telos', 'curl', 'dylan', 'eiffel', 'logtalk', 'object', 'rexx', 'scala', 'use', 'mixin', 'class', 'ocaml', 'perl', 'pop-11', 'python', 'raku', 'tcl', 'build', '8', 'incremental', 'tcl', 'incr', 'tcl', 'early', 'versions45']"
2651,"IBM System Object Model SOM runtime supports multiple inheritance, and any programming language targeting SOM can implement new SOM classes inherited from multiple bases.","['ibm', 'system', 'object', 'model', 'som', 'runtime', 'support', 'multiple', 'inheritance', 'programming', 'language', 'target', 'som', 'implement', 'new', 'som', 'class', 'inherit', 'multiple', 'basis']"
2652,"Some object-oriented languages, such as Swift, Java, Fortran since its 2003 revision, C#, and Ruby implement single inheritance, although protocols, or interfaces, provide some of the functionality of true multiple inheritance.","['object', 'orient', 'language', 'swift', 'java', 'fortran', '2003', 'revision', 'ruby', 'implement', 'single', 'inheritance', 'protocol', 'interface', 'provide', 'functionality', 'true', 'multiple', 'inheritance']"
2653,PHP uses traits classes to inherit specific method implementations. Ruby uses modules to inherit multiple methods.,"['php', 'use', 'trait', 'class', 'inherit', 'specific', 'method', 'implementation', 'ruby', 'use', 'module', 'inherit', 'multiple', 'method']"
2654,"The ""diamond problem"" sometimes referred to as the ""Deadly Diamond of Death""6 is an ambiguity that arises when two classes B and C inherit from A, and class D inherits from both B and C. If there is a method in A that B and C have overridden, and D does not override it, then which version of the method does D inherit: that of B, or that of C?","['diamond', 'problem', 'refer', 'deadly', 'diamond', 'death', 'ambiguity', 'arise', 'class', 'inherit', 'class', 'inherit', 'method', 'overridden', 'override', 'version', 'method', 'inherit']"
2655,"For example, in the context of GUI software development, a class Button may inherit from both classes Rectangle for appearance and Clickable for functionality/input handling, and classes Rectangle and Clickable both inherit from the Object class. Now if the equals method is called for a Button object and there is no such method in the Button class but there is an overridden equals method in Rectangle or Clickable or both, which method should be eventually called?","['example', 'context', 'gui', 'software', 'development', 'class', 'button', 'inherit', 'class', 'rectangle', 'appearance', 'clickable', 'functionality', 'input', 'handling', 'class', 'rectangle', 'clickable', 'inherit', 'object', 'class', 'equal', 'method', 'call', 'button', 'object', 'method', 'button', 'class', 'overridden', 'equal', 'method', 'rectangle', 'clickable', 'method', 'eventually', 'call']"
2656,"It is called the ""diamond problem"" because of the shape of the class inheritance diagram in this situation. In this case, class A is at the top, both B and C separately beneath it, and D joins the two together at the bottom to form a diamond shape.","['call', 'diamond', 'problem', 'shape', 'class', 'inheritance', 'diagram', 'situation', 'case', 'class', 'separately', 'beneath', 'join', 'form', 'diamond', 'shape']"
2657,Languages have different ways of dealing with these problems of repeated inheritance.,"['language', 'different', 'way', 'deal', 'problem', 'repeat', 'inheritance']"
2658,"Languages that allow only single inheritance, where a class can only derive from one base class, do not have the diamond problem. The reason for this is that such languages have at most one implementation of any method at any level in the inheritance chain regardless of the repetition or placement of methods. Typically these languages allow classes to implement multiple protocols, called interfaces in Java. These protocols define methods but do not provide concrete implementations. This strategy has been used by ActionScript, C#, D, Java, Nemerle, Object Pascal, Objective-C, Smalltalk, Swift and PHP.13 All these languages allow classes to implement multiple protocols.","['language', 'allow', 'single', 'inheritance', 'class', 'derive', 'base', 'class', 'diamond', 'problem', 'reason', 'language', 'implementation', 'method', 'level', 'inheritance', 'chain', 'regardless', 'repetition', 'placement', 'method', 'typically', 'language', 'allow', 'class', 'implement', 'multiple', 'protocol', 'call', 'interface', 'java', 'protocol', 'define', 'method', 'provide', 'concrete', 'implementation', 'strategy', 'actionscript', 'java', 'nemerle', 'object', 'pascal', 'objective', 'smalltalk', 'swift', 'php', 'language', 'allow', 'class', 'implement', 'multiple', 'protocol']"
2659,"Moreover, Ada, C#, Java, Object Pascal, Objective-C, Swift and PHP allow multiple-inheritance of interfaces called protocols in Objective-C and Swift. Interfaces are like abstract base classes that specify method signatures without implementing any behaviour. ""Pure"" interfaces such as the ones in Java up to version 7 do not permit any implementation or instance data in the interface. Nevertheless, even when several interfaces declare the same method signature, as soon as that method is implemented defined anywhere in the inheritance chain, it overrides any implementation of that method in the chain above it in its superclasses. Hence, at any given level in the inheritance chain, there can be at most one implementation of any method. Thus, single-inheritance method implementation does not exhibit the Diamond Problem even with multiple-inheritance of interfaces. With the introduction of default implementation for interfaces in Java 8 and C# 8, it is still possible to generate a Diamond Problem, although this will only appear as a compile-time error.","['ada', 'java', 'object', 'pascal', 'objective', 'swift', 'php', 'allow', 'multiple', 'inheritance', 'interface', 'call', 'protocol', 'objective', 'swift', 'interface', 'like', 'abstract', 'base', 'class', 'specify', 'method', 'signature', 'implement', 'behaviour', 'pure', 'interface', 'one', 'java', 'version', 'permit', 'implementation', 'instance', 'datum', 'interface', 'interface', 'declare', 'method', 'signature', 'soon', 'method', 'implement', 'define', 'inheritance', 'chain', 'override', 'implementation', 'method', 'chain', 'superclass', 'give', 'level', 'inheritance', 'chain', 'implementation', 'method', 'single', 'inheritance', 'method', 'implementation', 'exhibit', 'diamond', 'problem', 'multiple', 'inheritance', 'interface', 'introduction', 'default', 'implementation', 'interface', 'java', 'possible', 'generate', 'diamond', 'problem', 'appear', 'compile', 'time', 'error']"
2660,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2661,"In software engineering, multitier architecture often referred to as n-tier architecture is a client–server architecture in which presentation, application processing and data management functions are physically separated. The most widespread use of multitier architecture is the three-tier architecture.","['software', 'engineering', 'multiti', 'architecture', 'refer', 'tier', 'architecture', 'client', 'server', 'architecture', 'presentation', 'application', 'processing', 'data', 'management', 'function', 'physically', 'separate', 'widespread', 'use', 'multiti', 'architecture', 'tier', 'architecture']"
2662,"N-tier application architecture provides a model by which developers can create flexible and reusable applications. By segregating an application into tiers, developers acquire the option of modifying or adding a specific tier, instead of reworking the entire application. A three-tier architecture is typically composed of a presentation tier, a logic tier, and a data tier.","['tier', 'application', 'architecture', 'provide', 'model', 'developer', 'create', 'flexible', 'reusable', 'application', 'segregate', 'application', 'tier', 'developer', 'acquire', 'option', 'modifying', 'add', 'specific', 'tier', 'instead', 'rework', 'entire', 'application', 'tier', 'architecture', 'typically', 'compose', 'presentation', 'tier', 'logic', 'tier', 'data', 'tier']"
2663,"While the concepts of layer and tier are often used interchangeably, one fairly common point of view is that there is indeed a difference. This view holds that a layer is a logical structuring mechanism for the conceptual elements that make up the software solution, while a tier is a physical structuring mechanism for the hardware elements that make up the system infrastructure.12 For example, a three-layer solution could easily be deployed on a single tier, such in the case of an extreme database-centric architecture called RDBMS-only architecture3 or in a personal workstation.4","['concept', 'layer', 'tier', 'interchangeably', 'fairly', 'common', 'point', 'view', 'difference', 'view', 'hold', 'layer', 'logical', 'structuring', 'mechanism', 'conceptual', 'element', 'software', 'solution', 'tier', 'physical', 'structuring', 'mechanism', 'hardware', 'element', 'system', 'infrastructure', 'example', 'layer', 'solution', 'easily', 'deploy', 'single', 'tier', 'case', 'extreme', 'database', 'centric', 'architecture', 'call', 'rdbms', 'architecture3', 'personal', 'workstation']"
2664,"The ""Layers"" architectural pattern have been described in various publications.5","['layers', 'architectural', 'pattern', 'describe', 'publications']"
2665,"In a logical multilayer architecture for an information system with an object-oriented design, the following four are the most common:","['logical', 'multilayer', 'architecture', 'information', 'system', 'object', 'orient', 'design', 'follow', 'common']"
2666,"The book Domain Driven Design describes some common uses for the above four layers, although its primary focus is the domain layer.9","['book', 'domain', 'driven', 'design', 'describe', 'common', 'use', 'layer', 'primary', 'focus', 'domain', 'layer']"
2667,"If the application architecture has no explicit distinction between the business layer and the presentation layer i.e., the presentation layer is considered part of the business layer, then a traditional client-server two-tier model has been implemented.citation needed","['application', 'architecture', 'explicit', 'distinction', 'business', 'layer', 'presentation', 'layer', 'i.e.', 'presentation', 'layer', 'consider', 'business', 'layer', 'traditional', 'client', 'server', 'tier', 'model', 'implemented.citation', 'need']"
2668,"The more usual convention is that the application layer or service layer is considered a sublayer of the business layer, typically encapsulating the API definition surfacing the supported business functionality. The application/business layers can, in fact, be further subdivided to emphasize additional sublayers of distinct responsibility. For example, if the model–view–presenter pattern is used, the presenter sublayer might be used as an additional layer between the user interface layer and the business/application layer as represented by the model sublayer.citation needed","['usual', 'convention', 'application', 'layer', 'service', 'layer', 'consider', 'sublayer', 'business', 'layer', 'typically', 'encapsulate', 'api', 'definition', 'surface', 'support', 'business', 'functionality', 'application', 'business', 'layer', 'fact', 'subdivide', 'emphasize', 'additional', 'sublayer', 'distinct', 'responsibility', 'example', 'model', 'view', 'presenter', 'pattern', 'presenter', 'sublayer', 'additional', 'layer', 'user', 'interface', 'layer', 'business', 'application', 'layer', 'represent', 'model', 'sublayer.citation', 'need']"
2669,"Some also identify a separate layer called the business infrastructure layer BI, located between the business layers and the infrastructure layers. It's also sometimes called the ""low-level business layer"" or the ""business services layer"". This layer is very general and can be used in several application tiers e.g. a CurrencyConverter.10","['identify', 'separate', 'layer', 'call', 'business', 'infrastructure', 'layer', 'locate', 'business', 'layer', 'infrastructure', 'layer', 'call', 'low', 'level', 'business', 'layer', 'business', 'service', 'layer', 'layer', 'general', 'application', 'tier', 'e.g.', 'currencyconverter']"
2670,"The infrastructure layer can be partitioned into different levels high-level or low-level technical services.10 Developers often focus on the persistence data access capabilities of the infrastructure layer and therefore only talk about the persistence layer or the data access layer instead of an infrastructure layer or technical services layer. In other words, the other kind of technical services is not always explicitly thought of as part of any particular layer.citation needed","['infrastructure', 'layer', 'partition', 'different', 'level', 'high', 'level', 'low', 'level', 'technical', 'services', 'developers', 'focus', 'persistence', 'datum', 'access', 'capability', 'infrastructure', 'layer', 'talk', 'persistence', 'layer', 'data', 'access', 'layer', 'instead', 'infrastructure', 'layer', 'technical', 'service', 'layer', 'word', 'kind', 'technical', 'service', 'explicitly', 'think', 'particular', 'layer.citation', 'need']"
2671,"A layer is on top of another, because it depends on it. Every layer can exist without the layers above it, and requires the layers below it to function. Another common view is that layers do not always strictly depend on only the adjacent layer below. For example, in a relaxed layered system as opposed to a strict layered system a layer can also depend on all the layers below it.5","['layer', 'depend', 'layer', 'exist', 'layer', 'require', 'layer', 'function', 'common', 'view', 'layer', 'strictly', 'depend', 'adjacent', 'layer', 'example', 'relaxed', 'layered', 'system', 'oppose', 'strict', 'layered', 'system', 'layer', 'depend', 'layer', 'it']"
2672,"Three-tier architecture is a client-server software architecture pattern in which the user interface presentation, functional process logic ""business rules"", computer data storage and data access are developed and maintained as independent modules, most often on separate platforms.11 It was developed by John J. Donovan in Open Environment Corporation OEC, a tools company he founded in Cambridge, Massachusetts.","['tier', 'architecture', 'client', 'server', 'software', 'architecture', 'pattern', 'user', 'interface', 'presentation', 'functional', 'process', 'logic', 'business', 'rule', 'computer', 'datum', 'storage', 'data', 'access', 'develop', 'maintain', 'independent', 'module', 'separate', 'platforms', 'develop', 'john', 'donovan', 'open', 'environment', 'corporation', 'oec', 'tool', 'company', 'found', 'cambridge', 'massachusetts']"
2673,"Apart from the usual advantages of modular software with well-defined interfaces, the three-tier architecture is intended to allow any of the three tiers to be upgraded or replaced independently in response to changes in requirements or technology. For example, a change of operating system in the presentation tier would only affect the user interface code.","['apart', 'usual', 'advantage', 'modular', 'software', 'define', 'interface', 'tier', 'architecture', 'intend', 'allow', 'tier', 'upgrade', 'replace', 'independently', 'response', 'change', 'requirement', 'technology', 'example', 'change', 'operate', 'system', 'presentation', 'tier', 'affect', 'user', 'interface', 'code']"
2674,"Typically, the user interface runs on a desktop PC or workstation and uses a standard graphical user interface, functional process logic that may consist of one or more separate modules running on a workstation or application server, and an RDBMS on a database server or mainframe that contains the computer data storage logic. The middle tier may be multitiered itself in which case the overall architecture is called an ""n-tier architecture"".","['typically', 'user', 'interface', 'run', 'desktop', 'workstation', 'use', 'standard', 'graphical', 'user', 'interface', 'functional', 'process', 'logic', 'consist', 'separate', 'module', 'run', 'workstation', 'application', 'server', 'rdbms', 'database', 'server', 'mainframe', 'contain', 'computer', 'datum', 'storage', 'logic', 'middle', 'tier', 'multitiere', 'case', 'overall', 'architecture', 'call', 'tier', 'architecture']"
2675,"In the web development field, three-tier is often used to refer to websites, commonly electronic commerce websites, which are built using three tiers:","['web', 'development', 'field', 'tier', 'refer', 'website', 'commonly', 'electronic', 'commerce', 'website', 'build', 'tier']"
2676,"Data transfer between tiers is part of the architecture. Protocols involved may include one or more of SNMP, CORBA, Java RMI, .NET Remoting, Windows Communication Foundation, sockets, UDP, web services or other standard or proprietary protocols. Often middleware is used to connect the separate tiers. Separate tiers often but not necessarily run on separate physical servers, and each tier may itself run on a cluster.","['datum', 'transfer', 'tier', 'architecture', 'protocol', 'involve', 'include', 'snmp', 'corba', 'java', 'rmi', '.net', 'remoting', 'windows', 'communication', 'foundation', 'socket', 'udp', 'web', 'service', 'standard', 'proprietary', 'protocol', 'middleware', 'connect', 'separate', 'tier', 'separate', 'tier', 'necessarily', 'run', 'separate', 'physical', 'server', 'tier', 'run', 'cluster']"
2677,"The end-to-end traceability of data flows through n-tier systems is a challenging task which becomes more important when systems increase in complexity. The Application Response Measurement defines concepts and APIs for measuring performance and correlating transactions between tiers. Generally, the term ""tiers"" is used to describe physical distribution of components of a system on separate servers, computers, or networks processing nodes. A three-tier architecture then will have three processing nodes. The term ""layers"" refers to a logical grouping of components which may or may not be physically located on one processing node.","['end', 'end', 'traceability', 'datum', 'flow', 'tier', 'system', 'challenging', 'task', 'important', 'system', 'increase', 'complexity', 'application', 'response', 'measurement', 'define', 'concept', 'api', 'measure', 'performance', 'correlating', 'transaction', 'tier', 'generally', 'term', 'tier', 'describe', 'physical', 'distribution', 'component', 'system', 'separate', 'server', 'computer', 'network', 'processing', 'node', 'tier', 'architecture', 'processing', 'node', 'term', 'layer', 'refer', 'logical', 'grouping', 'component', 'physically', 'locate', 'processing', 'node']"
2678,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2679,"In object-oriented and functional programming, an immutable object unchangeable1 object is an object whose state cannot be modified after it is created.2 This is in contrast to a mutable object changeable object, which can be modified after it is created. 3 In some cases, an object is considered immutable even if some internally used attributes change, but the object's state appears unchanging from an external point of view. For example, an object that uses memoization to cache the results of expensive computations could still be considered an immutable object.","['object', 'orient', 'functional', 'programming', 'immutable', 'object', 'unchangeable1', 'object', 'object', 'state', 'modify', 'created', 'contrast', 'mutable', 'object', 'changeable', 'object', 'modify', 'create', 'case', 'object', 'consider', 'immutable', 'internally', 'attribute', 'change', 'object', 'state', 'appear', 'unchanging', 'external', 'point', 'view', 'example', 'object', 'use', 'memoization', 'cache', 'result', 'expensive', 'computation', 'consider', 'immutable', 'object']"
2680,Strings and other concrete objects are typically expressed as immutable objects to improve readability and runtime efficiency in object-oriented programming. Immutable objects are also useful because they are inherently thread-safe.2 Other benefits are that they are simpler to understand and reason about and offer higher security than mutable objects.2,"['string', 'concrete', 'object', 'typically', 'express', 'immutable', 'object', 'improve', 'readability', 'runtime', 'efficiency', 'object', 'orient', 'programming', 'immutable', 'object', 'useful', 'inherently', 'thread', 'safe', 'benefit', 'simple', 'understand', 'reason', 'offer', 'high', 'security', 'mutable', 'objects']"
2681,"In imperative programming, values held in program variables whose content never changes are known as constants to differentiate them from variables that could be altered during execution. Examples include conversion factors from meters to feet, or the value of pi to several decimal places.","['imperative', 'programming', 'value', 'hold', 'program', 'variable', 'content', 'change', 'know', 'constant', 'differentiate', 'variable', 'alter', 'execution', 'example', 'include', 'conversion', 'factor', 'meter', 'foot', 'value', 'decimal', 'place']"
2682,"Read-only fields may be calculated when the program runs unlike constants, which are known beforehand, but never change after they are initialized.","['read', 'field', 'calculate', 'program', 'run', 'unlike', 'constant', 'know', 'change', 'initialize']"
2683,"Sometimes, one talks of certain fields of an object being immutable. This means that there is no way to change those parts of the object state, even though other parts of the object may be changeable weakly immutable. If all fields are immutable, then the object is immutable. If the whole object cannot be extended by another class, the object is called strongly immutable.4 This might, for example, help to explicitly enforce certain invariants about certain data in the object staying the same through the lifetime of the object. In some languages, this is done with a keyword e.g. const in C++, final in Java that designates the field as immutable. Some languages reverse it: in OCaml, fields of an object or record are by default immutable, and must be explicitly marked with mutable to be so.","['talk', 'certain', 'field', 'object', 'immutable', 'mean', 'way', 'change', 'part', 'object', 'state', 'part', 'object', 'changeable', 'weakly', 'immutable', 'field', 'immutable', 'object', 'immutable', 'object', 'extend', 'class', 'object', 'call', 'strongly', 'immutable', 'example', 'help', 'explicitly', 'enforce', 'certain', 'invariant', 'certain', 'datum', 'object', 'stay', 'lifetime', 'object', 'language', 'keyword', 'e.g.', 'const', 'c++', 'final', 'java', 'designate', 'field', 'immutable', 'language', 'reverse', 'ocaml', 'field', 'object', 'record', 'default', 'immutable', 'explicitly', 'mark', 'mutable']"
2684,"In most object-oriented languages, objects can be referred to using references. Some examples of such languages are Java, C++, C#, VB.NET, and many scripting languages, such as Perl, Python, and Ruby. In this case, it matters whether the state of an object can vary when objects are shared via references.","['object', 'orient', 'language', 'object', 'refer', 'reference', 'example', 'language', 'java', 'c++', 'vb.net', 'scripting', 'language', 'perl', 'python', 'ruby', 'case', 'matter', 'state', 'object', 'vary', 'object', 'share', 'reference']"
2685,"If an object is known to be immutable, it is preferred to create a reference of it instead of copying the entire object. This is done to conserve memory by preventing data duplication and avoid calls to constructors and destructors; it also results in a potential boost in execution speed.","['object', 'know', 'immutable', 'preferred', 'create', 'reference', 'instead', 'copy', 'entire', 'object', 'conserve', 'memory', 'prevent', 'data', 'duplication', 'avoid', 'call', 'constructor', 'destructor', 'result', 'potential', 'boost', 'execution', 'speed']"
2686,"The reference copying technique is much more difficult to use for mutable objects, because if any user of a mutable object reference changes it, all other users of that reference see the change. If this is not the intended effect, it can be difficult to notify the other users to have them respond correctly. In these situations, defensive copying of the entire object rather than the reference is usually an easy but costly solution. The observer pattern is an alternative technique for handling changes to mutable objects.","['reference', 'copying', 'technique', 'difficult', 'use', 'mutable', 'object', 'user', 'mutable', 'object', 'reference', 'change', 'user', 'reference', 'change', 'intend', 'effect', 'difficult', 'notify', 'user', 'respond', 'correctly', 'situation', 'defensive', 'copying', 'entire', 'object', 'reference', 'usually', 'easy', 'costly', 'solution', 'observer', 'pattern', 'alternative', 'technique', 'handle', 'change', 'mutable', 'object']"
2687,"A technique that blends the advantages of mutable and immutable objects, and is supported directly in almost all modern hardware, is copy-on-write COW. Using this technique, when a user asks the system to copy an object, it instead merely creates a new reference that still points to the same object. As soon as a user attempts to modify the object through a particular reference, the system makes a real copy, applies the modification to that, and sets the reference to refer to the new copy. The other users are unaffected, because they still refer to the original object. Therefore, under COW, all users appear to have a mutable version of their objects, although in the case that users do not modify their objects, the space-saving and speed advantages of immutable objects are preserved. Copy-on-write is popular in virtual memory systems because it allows them to save memory space while still correctly handling anything an application program might do.","['technique', 'blend', 'advantage', 'mutable', 'immutable', 'object', 'support', 'directly', 'modern', 'hardware', 'copy', 'write', 'cow', 'technique', 'user', 'ask', 'system', 'copy', 'object', 'instead', 'merely', 'create', 'new', 'reference', 'point', 'object', 'soon', 'user', 'attempt', 'modify', 'object', 'particular', 'reference', 'system', 'make', 'real', 'copy', 'apply', 'modification', 'set', 'reference', 'refer', 'new', 'copy', 'user', 'unaffected', 'refer', 'original', 'object', 'cow', 'user', 'appear', 'mutable', 'version', 'object', 'case', 'user', 'modify', 'object', 'space', 'save', 'speed', 'advantage', 'immutable', 'object', 'preserve', 'copy', 'write', 'popular', 'virtual', 'memory', 'system', 'allow', 'save', 'memory', 'space', 'correctly', 'handle', 'application', 'program']"
2688,"The practice of always using references in place of copies of equal objects is known as interning. If interning is used, two objects are considered equal if and only if their references, typically represented as pointers or integers, are equal. Some languages do this automatically: for example, Python automatically interns short strings. If the algorithm that implements interning is guaranteed to do so in every case that it is possible, then comparing objects for equality is reduced to comparing their pointers – a substantial gain in speed in most applications. Even if the algorithm is not guaranteed to be comprehensive, there still exists the possibility of a fast path case improvement when the objects are equal and use the same reference. Interning is generally only useful for immutable objects.","['practice', 'reference', 'place', 'copy', 'equal', 'object', 'know', 'intern', 'intern', 'object', 'consider', 'equal', 'reference', 'typically', 'represent', 'pointer', 'integer', 'equal', 'language', 'automatically', 'example', 'python', 'automatically', 'intern', 'short', 'string', 'algorithm', 'implement', 'intern', 'guarantee', 'case', 'possible', 'compare', 'object', 'equality', 'reduce', 'compare', 'pointer', 'substantial', 'gain', 'speed', 'application', 'algorithm', 'guarantee', 'comprehensive', 'exist', 'possibility', 'fast', 'path', 'case', 'improvement', 'object', 'equal', 'use', 'reference', 'intern', 'generally', 'useful', 'immutable', 'object']"
2689,Immutable objects can be useful in multi-threaded applications. Multiple threads can act on data represented by immutable objects without concern of the data being changed by other threads. Immutable objects are therefore considered more thread-safe than mutable objects.,"['immutable', 'object', 'useful', 'multi', 'threaded', 'application', 'multiple', 'thread', 'act', 'datum', 'represent', 'immutable', 'object', 'concern', 'datum', 'change', 'thread', 'immutable', 'object', 'consider', 'thread', 'safe', 'mutable', 'object']"
2690,"Immutability does not imply that the object as stored in the computer's memory is unwriteable. Rather, immutability is a compile-time construct that indicates what a programmer can do through the normal interface of the object, not necessarily what they can absolutely do for instance, by circumventing the type system or violating const correctness in C or C++.","['immutability', 'imply', 'object', 'store', 'computer', 'memory', 'unwriteable', 'immutability', 'compile', 'time', 'construct', 'indicate', 'programmer', 'normal', 'interface', 'object', 'necessarily', 'absolutely', 'instance', 'circumvent', 'type', 'system', 'violate', 'const', 'correctness', 'c++']"
2691,"In Python, Java and the .NET Framework, strings are immutable objects. Both Java and the .NET Framework have mutable versions of string. In Java these are StringBuffer and StringBuilder mutable versions of Java String and in .NET this is StringBuilder mutable version of .Net String. Python 3 has a mutable string bytes variant, named bytearray.5","['python', 'java', '.net', 'framework', 'string', 'immutable', 'object', 'java', '.net', 'framework', 'mutable', 'version', 'string', 'java', 'stringbuffer', 'stringbuilder', 'mutable', 'version', 'java', 'string', '.net', 'stringbuilder', 'mutable', 'version', '.net', 'string', 'python', 'mutable', 'string', 'byte', 'variant', 'name', 'bytearray']"
2692,"Additionally, all of the primitive wrapper classes in Java are immutable.","['additionally', 'primitive', 'wrapper', 'class', 'java', 'immutable']"
2693,Similar patterns are the Immutable Interface and Immutable Wrapper.,"['similar', 'pattern', 'immutable', 'interface', 'immutable', 'wrapper']"
2694,"In pure functional programming languages it is not possible to create mutable objects without extending the language e.g. via a mutable references library or a foreign function interface, so all objects are immutable.","['pure', 'functional', 'programming', 'language', 'possible', 'create', 'mutable', 'object', 'extend', 'language', 'e.g.', 'mutable', 'reference', 'library', 'foreign', 'function', 'interface', 'object', 'immutable']"
2695,"In Ada, any object is declared either variable i.e. mutable; typically the implicit default, or constant i.e. immutable via the constant keyword.","['ada', 'object', 'declare', 'variable', 'i.e.', 'mutable', 'typically', 'implicit', 'default', 'constant', 'i.e.', 'immutable', 'constant', 'keyword']"
2696,"Subprogram parameters are immutable in the in mode, and mutable in the in out and out modes.","['subprogram', 'parameter', 'immutable', 'mode', 'mutable', 'mode']"
2697,"In C# you can enforce immutability of the fields of a class with the readonly statement. By enforcing all the fields as immutable, you obtain an immutable type.","['enforce', 'immutability', 'field', 'class', 'readonly', 'statement', 'enforce', 'field', 'immutable', 'obtain', 'immutable', 'type']"
2698,"In C++, a const-correct implementation of Cart would allow the user to create instances of the class and then use them as either const immutable or mutable, as desired, by providing two different versions of the items method. Notice that in C++ it is not necessary — and in fact impossible — to provide a specialized constructor for const instances.","['c++', 'const', 'correct', 'implementation', 'cart', 'allow', 'user', 'create', 'instance', 'class', 'use', 'const', 'immutable', 'mutable', 'desire', 'provide', 'different', 'version', 'item', 'method', 'notice', 'c++', 'necessary', 'fact', 'impossible', 'provide', 'specialized', 'constructor', 'const', 'instance']"
2699,"Note that, when there is a data member that is a pointer or reference to another object, then it is possible to mutate the object pointed to or referenced only within a non-const method.","['note', 'data', 'member', 'pointer', 'reference', 'object', 'possible', 'mutate', 'object', 'point', 'reference', 'non', 'const', 'method']"
2700,"C++ also provides abstract as opposed to bitwise immutability via the mutable keyword, which lets a member variable be changed from within a const method.","['c++', 'provide', 'abstract', 'oppose', 'bitwise', 'immutability', 'mutable', 'keyword', 'let', 'member', 'variable', 'change', 'const', 'method']"
2701,"In D, there exist two type qualifiers, const and immutable, for variables that cannot be changed.6 Unlike C++'s const, Java's final, and C#'s readonly, they are transitive and recursively apply to anything reachable through references of such a variable. The difference between const and immutable is what they apply to: const is a property of the variable: there might legally exist mutable references to referred value, i.e. the value can actually change. In contrast, immutable is a property of the referred value: the value and anything transitively reachable from it cannot change without breaking the type system, leading to undefined behavior. Any reference of that value must be marked const or immutable. Basically for any unqualified type T, constT is the disjoint union of T mutable and immutableT.","['exist', 'type', 'qualifier', 'const', 'immutable', 'variable', 'changed', 'unlike', 'c++', 'const', 'java', 'final', 'readonly', 'transitive', 'recursively', 'apply', 'reachable', 'reference', 'variable', 'difference', 'const', 'immutable', 'apply', 'const', 'property', 'variable', 'legally', 'exist', 'mutable', 'reference', 'refer', 'value', 'i.e.', 'value', 'actually', 'change', 'contrast', 'immutable', 'property', 'refer', 'value', 'value', 'transitively', 'reachable', 'change', 'break', 'type', 'system', 'lead', 'undefined', 'behavior', 'reference', 'value', 'mark', 'const', 'immutable', 'basically', 'unqualified', 'type', 'constt', 'disjoint', 'union', 'mutable', 'immutablet.']"
2702,"For a mutable C object, its mField can be written to. For a constC object, mField cannot be modified, it inherits const; iField is still immutable as it is the stronger guarantee. For an immutableC, all fields are immutable.","['mutable', 'object', 'mfield', 'write', 'constc', 'object', 'mfield', 'modify', 'inherit', 'const', 'ifield', 'immutable', 'strong', 'guarantee', 'immutablec', 'field', 'immutable']"
2703,"Inside the braces, c might refer to the same object as m, so mutations to m could indirectly change c as well. Also, c might refer to the same object as i, but since the value then is immutable, there are no changes. However, m and i cannot legally refer to the same object.","['inside', 'brace', 'refer', 'object', 'mutation', 'indirectly', 'change', 'refer', 'object', 'value', 'immutable', 'change', 'legally', 'refer', 'object']"
2704,"In the language of guarantees, mutable has no guarantees the function might change the object, const is an outward-only guarantee that the function will not change anything, and immutable is a bidirectional guarantee the function will not change the value and the caller must not change it.","['language', 'guarantee', 'mutable', 'guarantee', 'function', 'change', 'object', 'const', 'outward', 'guarantee', 'function', 'change', 'immutable', 'bidirectional', 'guarantee', 'function', 'change', 'value', 'caller', 'change']"
2705,Values that are const or immutable must be initialized by direct assignment at the point of declaration or by a constructor.,"['value', 'const', 'immutable', 'initialize', 'direct', 'assignment', 'point', 'declaration', 'constructor']"
2706,"Because const parameters forget if the value was mutable or not, a similar construct, inout, acts, in a sense, as a variable for mutability information. A function of type constS functionconstT returns constS typed values for mutable, const and immutable arguments. In contrast, a function of type inoutS functioninoutT returns S for mutable T arguments, constS for constT values, and immutableS for immutableT values.","['const', 'parameter', 'forget', 'value', 'mutable', 'similar', 'construct', 'inout', 'act', 'sense', 'variable', 'mutability', 'information', 'function', 'type', 'consts', 'functionconstt', 'return', 'consts', 'type', 'value', 'mutable', 'const', 'immutable', 'argument', 'contrast', 'function', 'type', 'inouts', 'functioninoutt', 'return', 'mutable', 'argument', 'consts', 'constt', 'value', 'immutables', 'immutablet', 'value']"
2707,"Casting immutable values to mutable inflicts undefined behavior upon change, even if the original value comes from a mutable origin. Casting mutable values to immutable can be legal when there remain no mutable references afterward. ""An expression may be converted from mutable ... to immutable if the expression is unique and all expressions it transitively refers to are either unique or immutable.""6 If the compiler cannot prove uniqueness, the casting can be done explicitly and it is up to the programmer to ensure that no mutable references exist.","['cast', 'immutable', 'value', 'mutable', 'inflict', 'undefined', 'behavior', 'change', 'original', 'value', 'come', 'mutable', 'origin', 'cast', 'mutable', 'value', 'immutable', 'legal', 'remain', 'mutable', 'reference', 'afterward', 'expression', 'convert', 'mutable', 'immutable', 'expression', 'unique', 'expression', 'transitively', 'refer', 'unique', 'immutable', 'compiler', 'prove', 'uniqueness', 'casting', 'explicitly', 'programmer', 'ensure', 'mutable', 'reference', 'exist']"
2708,"The type string is an alias for immutablechar, i.e. a typed slice of memory of immutable characters.7 Making substrings is cheap, as it just copies and modifies a pointer and a length filed, and safe, as the underlying data cannot be changed. Objects of type constchar can refer to strings, but also to mutable buffers.","['type', 'string', 'alias', 'immutablechar', 'i.e.', 'type', 'slice', 'memory', 'immutable', 'characters', 'make', 'substring', 'cheap', 'copy', 'modify', 'pointer', 'length', 'file', 'safe', 'underlie', 'datum', 'change', 'object', 'type', 'constchar', 'refer', 'string', 'mutable', 'buffer']"
2709,"Making a shallow copy of a const or immutable value removes the outer layer of immutability: Copying an immutable string immutablechar returns a string immutablechar. The immutable pointer and length are being copied and the copies are mutable. The referred data has not been copied and keeps its qualifier, in the example immutable. It can be stripped by making a depper copy, e.g. using the dup function.","['make', 'shallow', 'copy', 'const', 'immutable', 'value', 'remove', 'outer', 'layer', 'immutability', 'copy', 'immutable', 'string', 'immutablechar', 'return', 'string', 'immutablechar', 'immutable', 'pointer', 'length', 'copy', 'copy', 'mutable', 'refer', 'data', 'copy', 'keep', 'qualifi', 'example', 'immutable', 'strip', 'make', 'depper', 'copy', 'e.g.', 'dup', 'function']"
2710,A classic example of an immutable object is an instance of the Java String class,"['classic', 'example', 'immutable', 'object', 'instance', 'java', 'string', 'class']"
2711,"The method toLowerCase does not change the data ""ABC"" that s contains. Instead, a new String object is instantiated and given the data ""abc"" during its construction. A reference to this String object is returned by the toLowerCase method. To make the String s contain the data ""abc"", a different approach is needed:","['method', 'tolowercase', 'change', 'datum', 'abc', 'contain', 'instead', 'new', 'string', 'object', 'instantiate', 'give', 'datum', 'abc', 'construction', 'reference', 'string', 'object', 'return', 'tolowercase', 'method', 'string', 'contain', 'datum', 'abc', 'different', 'approach', 'need']"
2712,"Now the String s references a new String object that contains ""abc"". There is nothing in the syntax of the declaration of the class String that enforces it as immutable; rather, none of the String class's methods ever affect the data that a String object contains, thus making it immutable.","['string', 'reference', 'new', 'string', 'object', 'contain', 'abc', 'syntax', 'declaration', 'class', 'string', 'enforce', 'immutable', 'string', 'class', 'method', 'affect', 'datum', 'string', 'object', 'contain', 'make', 'immutable']"
2713,"The keyword final detailed article is used in implementing immutable primitive types and object references,8 but it cannot, by itself, make the objects themselves immutable. See below examples:","['keyword', 'final', 'detailed', 'article', 'implement', 'immutable', 'primitive', 'type', 'object', 'references', 'object', 'immutable', 'example']"
2714,"Primitive type variables int, long, short, etc. can be reassigned after being defined. This can be prevented by using final.","['primitive', 'type', 'variable', 'int', 'long', 'short', 'etc', 'reassign', 'define', 'prevent', 'final']"
2715,Reference types cannot be made immutable just by using the final keyword. final only prevents reassignment.,"['reference', 'type', 'immutable', 'final', 'keyword', 'final', 'prevent', 'reassignment']"
2716,"Primitive wrappers Integer, Long, Short, Double, Float, Character, Byte, Boolean are also all immutable. Immutable classes can be implemented by following a few simple guidelines.9","['primitive', 'wrapper', 'integer', 'long', 'short', 'double', 'float', 'character', 'byte', 'boolean', 'immutable', 'immutable', 'class', 'implement', 'follow', 'simple', 'guidelines']"
2717,"In JavaScript, all primitive types Undefined, Null, Boolean, Number, BigInt, String, Symbol are immutable, but custom objects are generally mutable.","['javascript', 'primitive', 'type', 'undefined', 'null', 'boolean', 'number', 'bigint', 'string', 'symbol', 'immutable', 'custom', 'object', 'generally', 'mutable']"
2718,"To simulate immutability in an object, one may define properties as read-only writable: false.","['simulate', 'immutability', 'object', 'define', 'property', 'read', 'writable', 'false']"
2719,"However, the approach above still lets new properties be added. Alternatively, one may use Object.freeze to make existing objects immutable.","['approach', 'let', 'new', 'property', 'add', 'alternatively', 'use', 'object.freeze', 'exist', 'object', 'immutable']"
2720,"With the implementation of ECMA262, JavaScript has the ability to create immutable references that cannot be reassigned. However, using a const declaration doesn't mean that value of the read-only reference is immutable, just that the name cannot be assigned to a new value.","['implementation', 'ecma262', 'javascript', 'ability', 'create', 'immutable', 'reference', 'reassign', 'const', 'declaration', 'mean', 'value', 'read', 'reference', 'immutable', 'assign', 'new', 'value']"
2721,"The use of immutable state has become a rising trend in JavaScript since the introduction of React, which favours Flux-like state management patterns such as Redux.10","['use', 'immutable', 'state', 'rise', 'trend', 'javascript', 'introduction', 'react', 'favour', 'flux', 'like', 'state', 'management', 'pattern', 'redux']"
2722,"In Perl, one can create an immutable class with the Moo library by simply declaring all the attributes read only:","['perl', 'create', 'immutable', 'class', 'moo', 'library', 'simply', 'declare', 'attribute', 'read']"
2723,"Creating an immutable class used to require two steps: first, creating accessors either automatically or manually that prevent modification of object attributes, and secondly, preventing direct modification of the instance data of instances of that class this was usually stored in a hash reference, and could be locked with Hash::Util's lock_hash function:","['create', 'immutable', 'class', 'require', 'step', 'create', 'accessor', 'automatically', 'manually', 'prevent', 'modification', 'object', 'attribute', 'secondly', 'prevent', 'direct', 'modification', 'instance', 'datum', 'instance', 'class', 'usually', 'store', 'hash', 'reference', 'lock', 'hash::util', 'lock_hash', 'function']"
2724,"Or, with a manually written accessor:","['manually', 'write', 'accessor']"
2725,"In Python, some built-in types numbers, booleans, strings, tuples, frozensets are immutable, but custom classes are generally mutable. To simulate immutability in a class, one could override attribute setting and deletion to raise exceptions:","['python', 'build', 'type', 'number', 'boolean', 'string', 'tuple', 'frozenset', 'immutable', 'custom', 'class', 'generally', 'mutable', 'simulate', 'immutability', 'class', 'override', 'attribute', 'setting', 'deletion', 'raise', 'exception']"
2726,"The standard library helpers collections.namedtuple and typing.NamedTuple, available from Python 3.6 onward, create simple immutable classes. The following example is roughly equivalent to the above, plus some tuple-like features:","['standard', 'library', 'helper', 'collections.namedtuple', 'type', 'namedtuple', 'available', 'python', '3', 'onward', 'create', 'simple', 'immutable', 'class', 'follow', 'example', 'roughly', 'equivalent', 'plus', 'tuple', 'like', 'feature']"
2727,"Introduced in Python 3.7, dataclasses allow developers to emulate immutability with frozen instances. If a frozen dataclass is built, dataclasses will override __setattr__ and __delattr__ to raise FrozenInstanceError if invoked.","['introduce', 'python', '3', 'dataclasse', 'allow', 'developer', 'emulate', 'immutability', 'frozen', 'instance', 'frozen', 'dataclass', 'build', 'dataclasse', 'override', 'setattr', 'delattr', 'raise', 'frozeninstanceerror', 'invoke']"
2728,"Racket substantially diverges from other Scheme implementations by making its core pair type ""cons cells"" immutable. Instead, it provides a parallel mutable pair type, via mcons, mcar, set-mcar! etc. In addition, many immutable types are supported, for example, immutable strings and vectors, and these are used extensively. New structs are immutable by default, unless a field is specifically declared mutable, or the whole struct:","['racket', 'substantially', 'diverge', 'scheme', 'implementation', 'make', 'core', 'pair', 'type', 'con', 'cell', 'immutable', 'instead', 'provide', 'parallel', 'mutable', 'pair', 'type', 'mcon', 'mcar', 'set', 'mcar', 'etc', 'addition', 'immutable', 'type', 'support', 'example', 'immutable', 'string', 'vector', 'extensively', 'new', 'struct', 'immutable', 'default', 'field', 'specifically', 'declare', 'mutable', 'struct']"
2729,"The language also supports immutable hash tables, implemented functionally, and immutable dictionaries.","['language', 'support', 'immutable', 'hash', 'table', 'implement', 'functionally', 'immutable', 'dictionary']"
2730,"Rust's ownership system allows developers to declare immutable variables, and pass immutable references. By default, all variables and references are immutable. Mutable variables and references are explicitly created with the mut keyword.","['rust', 'ownership', 'system', 'allow', 'developer', 'declare', 'immutable', 'variable', 'pass', 'immutable', 'reference', 'default', 'variable', 'reference', 'immutable', 'mutable', 'variable', 'reference', 'explicitly', 'create', 'mut', 'keyword']"
2731,Constant items in Rust are always immutable.,"['constant', 'item', 'rust', 'immutable']"
2732,"In Scala, any entity narrowly, a binding can be defined as mutable or immutable: in the declaration, one can use val value for immutable entities and var variable for mutable ones. Note that even though an immutable binding can not be reassigned, it may still refer to a mutable object and it is still possible to call mutating methods on that object: the binding is immutable, but the underlying object may be mutable.","['scala', 'entity', 'narrowly', 'binding', 'define', 'mutable', 'immutable', 'declaration', 'use', 'val', 'value', 'immutable', 'entity', 'var', 'variable', 'mutable', 'one', 'note', 'immutable', 'binding', 'reassign', 'refer', 'mutable', 'object', 'possible', 'mutating', 'method', 'object', 'binding', 'immutable', 'underlying', 'object', 'mutable']"
2733,"For example, the following code snippet:","['example', 'follow', 'code', 'snippet']"
2734,defines an immutable entity maxValue the integer type is inferred at compile-time and a mutable entity named currentValue.,"['define', 'immutable', 'entity', 'maxvalue', 'integer', 'type', 'infer', 'compile', 'time', 'mutable', 'entity', 'name', 'currentvalue']"
2735,"By default, collection classes such as List and Map are immutable, so update-methods return a new instance rather than mutating an existing one. While this may sound inefficient, the implementation of these classes and their guarantees of immutability mean that the new instance can re-use existing nodes, which, especially in the case of creating copies, is very efficient.11better source needed","['default', 'collection', 'class', 'list', 'map', 'immutable', 'update', 'method', 'return', 'new', 'instance', 'mutate', 'exist', 'sound', 'inefficient', 'implementation', 'class', 'guarantee', 'immutability', 'mean', 'new', 'instance', 'use', 'exist', 'node', 'especially', 'case', 'create', 'copy', 'efficientbetter', 'source', 'need']"
2736,This article contains some material from the Perl Design Patterns Book,"['article', 'contain', 'material', 'perl', 'design', 'patterns', 'book']"
2737,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2738,"In computer science, a mutator method is a method used to control changes to a variable. They are also widely known as setter methods. Often a setter is accompanied by a getter together also known as accessors, which returns the value of the private member variable.","['computer', 'science', 'mutator', 'method', 'method', 'control', 'change', 'variable', 'widely', 'know', 'setter', 'method', 'setter', 'accompany', 'getter', 'know', 'accessor', 'return', 'value', 'private', 'member', 'variable']"
2739,"The mutator method is most often used in object-oriented programming, in keeping with the principle of encapsulation. According to this principle, member variables of a class are made private to hide and protect them from other code, and can only be modified by a public member function the mutator method, which takes the desired new value as a parameter, optionally validates it, and modifies the private member variable. Mutator methods can be compared to assignment operator overloading but they typically appear at different levels of the object hierarchy.","['mutator', 'method', 'object', 'orient', 'programming', 'keep', 'principle', 'encapsulation', 'accord', 'principle', 'member', 'variable', 'class', 'private', 'hide', 'protect', 'code', 'modify', 'public', 'member', 'function', 'mutator', 'method', 'take', 'desire', 'new', 'value', 'parameter', 'optionally', 'validate', 'modify', 'private', 'member', 'variable', 'mutator', 'method', 'compare', 'assignment', 'operator', 'overloading', 'typically', 'appear', 'different', 'level', 'object', 'hierarchy']"
2740,"Mutator methods may also be used in non-object-oriented environments. In this case, a reference to the variable to be modified is passed to the mutator, along with the new value. In this scenario, the compiler cannot restrict code from bypassing the mutator method and changing the variable directly. The responsibility falls to the developers to ensure the variable is only modified through the mutator method and not modified directly.","['mutator', 'method', 'non', 'object', 'orient', 'environment', 'case', 'reference', 'variable', 'modify', 'pass', 'mutator', 'new', 'value', 'scenario', 'compiler', 'restrict', 'code', 'bypass', 'mutator', 'method', 'change', 'variable', 'directly', 'responsibility', 'fall', 'developer', 'ensure', 'variable', 'modify', 'mutator', 'method', 'modify', 'directly']"
2741,"In programming languages that support them, properties offer a convenient alternative without giving up the utility of encapsulation.","['programming', 'language', 'support', 'property', 'offer', 'convenient', 'alternative', 'give', 'utility', 'encapsulation']"
2742,"In the examples below, a fully implemented mutator method can also validate the input data or take further action such as triggering an event.","['example', 'fully', 'implement', 'mutator', 'method', 'validate', 'input', 'datum', 'action', 'trigger', 'event']"
2743,"The alternative to defining mutator and accessor methods, or property blocks, is to give the instance variable some visibility other than private and access it directly from outside the objects. Much finer control of access rights can be defined using mutators and accessors. For example, a parameter may be made read-only simply by defining an accessor but not a mutator. The visibility of the two methods may be different; it is often useful for the accessor to be public while the mutator remains protected, package-private or internal.","['alternative', 'define', 'mutator', 'accessor', 'method', 'property', 'block', 'instance', 'variable', 'visibility', 'private', 'access', 'directly', 'outside', 'object', 'finer', 'control', 'access', 'right', 'define', 'mutator', 'accessor', 'example', 'parameter', 'read', 'simply', 'define', 'accessor', 'mutator', 'visibility', 'method', 'different', 'useful', 'accessor', 'public', 'mutator', 'remains', 'protect', 'package', 'private', 'internal']"
2744,"The block where the mutator is defined provides an opportunity for validation or preprocessing of incoming data. If all external access is guaranteed to come through the mutator, then these steps cannot be bypassed. For example, if a date is represented by separate private year, month and day variables, then incoming dates can be split by the setDate mutator while for consistency the same private instance variables are accessed by setYear and setMonth. In all cases month values outside of 1 - 12 can be rejected by the same code.","['block', 'mutator', 'define', 'provide', 'opportunity', 'validation', 'preprocessing', 'incoming', 'datum', 'external', 'access', 'guarantee', 'come', 'mutator', 'step', 'bypass', 'example', 'date', 'represent', 'separate', 'private', 'year', 'month', 'day', 'variable', 'incoming', 'date', 'split', 'setdate', 'mutator', 'consistency', 'private', 'instance', 'variable', 'access', 'setyear', 'setmonth', 'case', 'month', 'value', 'outside', 'reject', 'code']"
2745,Accessors conversely allow for synthesis of useful data representations from internal variables while keeping their structure encapsulated and hidden from outside modules. A monetary getAmount accessor may build a string from a numeric variable with the number of decimal places defined by a hidden currency parameter.,"['accessor', 'conversely', 'allow', 'synthesis', 'useful', 'datum', 'representation', 'internal', 'variable', 'keep', 'structure', 'encapsulate', 'hide', 'outside', 'module', 'monetary', 'getamount', 'accessor', 'build', 'string', 'numeric', 'variable', 'number', 'decimal', 'place', 'define', 'hide', 'currency', 'parameter']"
2746,"Modern programming languages often offer the ability to generate the boilerplate for mutators and accessors in a single line—as for example C#'s public string Name get; set; and Ruby's attr_accessor :name. In these cases, no code blocks are created for validation, preprocessing or synthesis. These simplified accessors still retain the advantage of encapsulation over simple public instance variables, but it is common that, as system designs progress, the software is maintained and requirements change, the demands on the data become more sophisticated. Many automatic mutators and accessors eventually get replaced by separate blocks of code. The benefit of automatically creating them in the early days of the implementation is that the public interface of the class remains identical whether or not greater sophistication is added, requiring no extensive refactoring if it is.1","['modern', 'programming', 'language', 'offer', 'ability', 'generate', 'boilerplate', 'mutator', 'accessor', 'single', 'line', 'example', 'public', 'string', 'set', 'ruby', 'attr_accessor', 'case', 'code', 'block', 'create', 'validation', 'preprocesse', 'synthesis', 'simplified', 'accessor', 'retain', 'advantage', 'encapsulation', 'simple', 'public', 'instance', 'variable', 'common', 'system', 'design', 'progress', 'software', 'maintain', 'requirement', 'change', 'demand', 'datum', 'sophisticated', 'automatic', 'mutator', 'accessor', 'eventually', 'replace', 'separate', 'block', 'code', 'benefit', 'automatically', 'create', 'early', 'day', 'implementation', 'public', 'interface', 'class', 'remain', 'identical', 'great', 'sophistication', 'add', 'require', 'extensive', 'refactoring', 'is']"
2747,"Manipulation of parameters that have mutators and accessors from inside the class where they are defined often requires some additional thought. In the early days of an implementation, when there is little or no additional code in these blocks, it makes no difference if the private instance variable is accessed directly or not. As validation, cross-validation, data integrity checks, preprocessing or other sophistication is added, subtle bugs may appear where some internal access makes use of the newer code while in other places it is bypassed.","['manipulation', 'parameter', 'mutator', 'accessor', 'inside', 'class', 'define', 'require', 'additional', 'thought', 'early', 'day', 'implementation', 'little', 'additional', 'code', 'block', 'make', 'difference', 'private', 'instance', 'variable', 'access', 'directly', 'validation', 'cross', 'validation', 'datum', 'integrity', 'check', 'preprocesse', 'sophistication', 'add', 'subtle', 'bug', 'appear', 'internal', 'access', 'make', 'use', 'new', 'code', 'place', 'bypass']"
2748,"Accessor functions can be less efficient than directly fetching or storing data fields due to the extra steps involved,2 however such functions are often inlined which eliminates the overhead of a function call.","['accessor', 'function', 'efficient', 'directly', 'fetch', 'store', 'datum', 'field', 'extra', 'step', 'involved', 'function', 'inline', 'eliminate', 'overhead', 'function']"
2749,"This example illustrates the C# idea of properties, which are a special type of class member. Unlike Java, no explicit methods are defined; a public 'property' contains the logic to handle the actions. Note use of the built-in undeclared variable value.","['example', 'illustrate', 'idea', 'property', 'special', 'type', 'class', 'member', 'unlike', 'java', 'explicit', 'method', 'define', 'public', 'property', 'contain', 'logic', 'handle', 'action', 'note', 'use', 'build', 'undeclared', 'variable', 'value']"
2750,"In later C# versions .NET Framework 3.5 and above, this example may be abbreviated as follows, without declaring the private variable name.","['later', 'version', '.net', 'framework', '3', 'example', 'abbreviate', 'follow', 'declare', 'private', 'variable']"
2751,"Using the abbreviated syntax means that the underlying variable is no longer available from inside the class. As a result, the set portion of the property must be present for assignment. Access can be restricted with a set-specific access modifier.","['abbreviated', 'syntax', 'mean', 'underlie', 'variable', 'long', 'available', 'inside', 'class', 'result', 'set', 'portion', 'property', 'present', 'assignment', 'access', 'restrict', 'set', 'specific', 'access', 'modifier']"
2752,"In Common Lisp Object System, slot specifications within class definitions may specify any of the :reader, :writer and :accessor options even multiple times to define reader methods, setter methods and accessor methods a reader method and the respective setf method.3 Slots are always directly accessible through their names with the use of with-slots and slot-value, and the slot accessor options define specialized methods that use slot-value.4","['common', 'lisp', 'object', 'system', 'slot', 'specification', 'class', 'definition', 'specify', 'reader', 'writer', 'accessor', 'option', 'multiple', 'time', 'define', 'reader', 'method', 'setter', 'method', 'accessor', 'method', 'reader', 'method', 'respective', 'setf', 'method', 'slots', 'directly', 'accessible', 'name', 'use', 'slot', 'slot', 'value', 'slot', 'accessor', 'option', 'define', 'specialized', 'method', 'use', 'slot', 'value']"
2753,"CLOS itself has no notion of properties, although the MetaObject Protocol extension specifies means to access a slot's reader and writer function names, including the ones generated with the :accessor option.5","['clos', 'notion', 'property', 'metaobject', 'protocol', 'extension', 'specifie', 'mean', 'access', 'slot', 'reader', 'writer', 'function', 'name', 'include', 'one', 'generate', 'accessor', 'option']"
2754,The following example shows a definition of a student class using these slot options and direct slot access:,"['follow', 'example', 'show', 'definition', 'student', 'class', 'slot', 'option', 'direct', 'slot', 'access']"
2755,D supports a getter and setter function syntax. In version 2 of the language getter and setter class/struct methods should have the @property attribute.67,"['support', 'getter', 'setter', 'function', 'syntax', 'version', 'language', 'getter', 'setter', 'class', 'struct', 'method', '@property', 'attribute']"
2756,A Student instance can be used like this:,"['student', 'instance', 'like']"
2757,This is a simple class in Delphi language which illustrates the concept of public property for accessing a private field.,"['simple', 'class', 'delphi', 'language', 'illustrate', 'concept', 'public', 'property', 'access', 'private', 'field']"
2758,"In this example of a simple class representing a student with only the name stored, one can see the variable name is private, i.e. only visible from the Student class, and the ""setter"" and ""getter"" are public, namely the ""getName"" and ""setNamename"" methods.","['example', 'simple', 'class', 'represent', 'student', 'store', 'variable', 'private', 'i.e.', 'visible', 'student', 'class', 'setter', 'getter', 'public', 'getname', 'setnamename', 'method']"
2759,In this example constructor-function Student is used to create objects representing a student with only the name stored.,"['example', 'constructor', 'function', 'student', 'create', 'object', 'represent', 'student', 'store']"
2760,Or using a deprecated way to define accessors in Web browsers:8,"['deprecate', 'way', 'define', 'accessor', 'web', 'browsers']"
2761,Or using prototypes for inheritance and ES6 accessor syntax:,"['prototype', 'inheritance', 'es6', 'accessor', 'syntax']"
2762,"Using traditional Objective-C 1.0 syntax, with manual reference counting as the one working on GNUstep on Ubuntu 12.04:","['traditional', 'objective', '1', 'syntax', 'manual', 'reference', 'counting', 'work', 'gnustep', 'ubuntu', '12']"
2763,"Using newer Objective-C 2.0 syntax as used in Mac OS X 10.6, iOS 4 and Xcode 3.2, generating the same code as described above:","['new', 'objective', '2', 'syntax', 'mac', '10', 'ios', 'xcode', '3', 'generate', 'code', 'describe']"
2764,"And starting with OS X 10.8 and iOS 6, while using Xcode 4.4 and up, syntax can be even simplified:","['start', '10', 'ios', 'xcode', '4', 'syntax', 'simplify']"
2765,"Or, using the Moose Object System:","['moose', 'object', 'system']"
2766,"PHP defines the ""magic methods"" __getand__set for properties of objects.9","['php', 'define', 'magic', 'method', 'getand__set', 'property', 'objects']"
2767,"In this example of a simple class representing a student with only the name stored, one can see the variable name is private, i.e. only visible from the Student class, and the ""setter"" and ""getter"" is public, namely the getName and setName'name' methods.","['example', 'simple', 'class', 'represent', 'student', 'store', 'variable', 'private', 'i.e.', 'visible', 'student', 'class', 'setter', 'getter', 'public', 'getname', ""setname'name"", 'method']"
2768,"This example uses a Python class with one variable, a getter, and a setter.","['example', 'use', 'python', 'class', 'variable', 'getter', 'setter']"
2769,"In Racket, the object system is a way to organize code that comes in addition to modules and units. As in the rest of the language, the object system has first-class values and lexical scope is used to control access to objects and methods.","['racket', 'object', 'system', 'way', 'organize', 'code', 'come', 'addition', 'module', 'unit', 'rest', 'language', 'object', 'system', 'class', 'value', 'lexical', 'scope', 'control', 'access', 'object', 'method']"
2770,"Struct definitions are an alternative way to define new types of values, with mutators being present when explicitly required:","['struct', 'definition', 'alternative', 'way', 'define', 'new', 'type', 'value', 'mutator', 'present', 'explicitly', 'require']"
2771,"In Ruby, individual accessor and mutator methods may be defined, or the metaprogramming constructs attr_reader or attr_accessor may be used both to declare a private variable in a class and to provide either read-only or read-write public access to it respectively.","['ruby', 'individual', 'accessor', 'mutator', 'method', 'define', 'metaprogramming', 'construct', 'attr_reader', 'attr_accessor', 'declare', 'private', 'variable', 'class', 'provide', 'read', 'read', 'write', 'public', 'access', 'respectively']"
2772,Defining individual accessor and mutator methods creates space for pre-processing or validation of the data,"['define', 'individual', 'accessor', 'mutator', 'method', 'create', 'space', 'pre', 'processing', 'validation', 'datum']"
2773,Read-only simple public access to implied @name variable,"['read', 'simple', 'public', 'access', 'imply', '@name', 'variable']"
2774,Read-write simple public access to implied @name variable,"['read', 'write', 'simple', 'public', 'access', 'imply', '@name', 'variable']"
2775,"This example illustrates the VB.NET idea of properties, which are used in classes. Similar to C#, there is an explicit use of the Get and Set methods.","['example', 'illustrate', 'vb.net', 'idea', 'property', 'class', 'similar', 'explicit', 'use', 'set', 'method']"
2776,"In VB.NET 2010, Auto Implemented properties can be utilized to create a property without having to use the Get and Set syntax. Note that a hidden variable is created by the compiler, called _name, to correspond with the Property name. Using another variable within the class named _name would result in an error. Privileged access to the underlying variable is available from within the class.","['vb.net', '2010', 'auto', 'implement', 'property', 'utilize', 'create', 'property', 'have', 'use', 'set', 'syntax', 'note', 'hide', 'variable', 'create', 'compiler', 'call', 'correspond', 'property', 'variable', 'class', 'name', 'result', 'error', 'privileged', 'access', 'underlie', 'variable', 'available', 'class']"
2777,"In compiler construction, name mangling also called name decoration is a technique used to solve various problems caused by the need to resolve unique names for programming entities in many modern programming languages.","['compiler', 'construction', 'mangling', 'call', 'decoration', 'technique', 'solve', 'problem', 'cause', 'need', 'resolve', 'unique', 'name', 'programming', 'entity', 'modern', 'programming', 'language']"
2778,"It provides a way of encoding additional information in the name of a function, structure, class or another datatype in order to pass more semantic information from the compiler to the linker.","['provide', 'way', 'encode', 'additional', 'information', 'function', 'structure', 'class', 'datatype', 'order', 'pass', 'semantic', 'information', 'compiler', 'linker']"
2779,"The need for name mangling arises where the language allows different entities to be named with the same identifier as long as they occupy a different namespace typically defined by a module, class, or explicit namespace directive or have different signatures such as in function overloading. It is required in these use cases because each signature might require different, specialized calling convention in the machine code.","['need', 'mangling', 'arise', 'language', 'allow', 'different', 'entity', 'name', 'identifier', 'long', 'occupy', 'different', 'namespace', 'typically', 'define', 'module', 'class', 'explicit', 'namespace', 'directive', 'different', 'signature', 'function', 'overloading', 'require', 'use', 'case', 'signature', 'require', 'different', 'specialized', 'call', 'convention', 'machine', 'code']"
2780,"Any object code produced by compilers is usually linked with other pieces of object code produced by the same or another compiler by a type of program called a linker. The linker needs a great deal of information on each program entity. For example, to correctly link a function it needs its name, the number of arguments and their types, and so on.","['object', 'code', 'produce', 'compiler', 'usually', 'link', 'piece', 'object', 'code', 'produce', 'compiler', 'type', 'program', 'call', 'linker', 'linker', 'need', 'great', 'deal', 'information', 'program', 'entity', 'example', 'correctly', 'link', 'function', 'need', 'number', 'argument', 'type']"
2781,"The simple programming languages of the 1970s, like C, only distinguished subroutines by their name, ignoring other information including parameter and return types. Later programming languages, like C++, defined stricter requirements for routines to be considered ""equal"", such as the parameter types, return type, and calling convention of a function. These requirements enable method overloading and detection of some bugs such as using different definitions of a function when compiling different source files. These stricter requirements needed to work with existing tools and conventions; therefore, additional requirements were encoded in the name of the symbol, since that was the only information the traditional linker had about a symbol.","['simple', 'programming', 'language', '1970', 'like', 'distinguished', 'subroutine', 'ignore', 'information', 'include', 'parameter', 'return', 'type', 'later', 'programming', 'language', 'like', 'c++', 'define', 'strict', 'requirement', 'routine', 'consider', 'equal', 'parameter', 'type', 'return', 'type', 'call', 'convention', 'function', 'requirement', 'enable', 'method', 'overloading', 'detection', 'bug', 'different', 'definition', 'function', 'compile', 'different', 'source', 'file', 'strict', 'requirement', 'need', 'work', 'exist', 'tool', 'convention', 'additional', 'requirement', 'encode', 'symbol', 'information', 'traditional', 'linker', 'symbol']"
2782,"Another use of name mangling is for detecting additional non-signature related changes, such as function purity, or whether it can potentially throw an exception or trigger garbage collection. An example of a language doing this is D.12 These are more of a simplified error checking. For example, functions int f; and int gint pure; could be compiled into one object file, but then their signatures changed to float f; int gint; and used to compile other source calling it. At link time the linker will detect there is no function fint and return an error. Similarly, the linker will not be able to detect that the return type of f is different, and return an error. Otherwise, incompatible calling conventions would be used, and most likely produce the wrong result or crash the program. Mangling doesn't usually capture every detail of the calling process. For example, it doesn't fully prevent errors like changes of data members of a struct or class. For example, struct S ; void fS could be compiled into one object file, then the definition for S changed to be struct S int x; ; and used in the compilation of a call to fS. In such cases, the compiler will usually use a different calling convention, but in both cases f will mangle to the same name, so the linker will not detect this problem, and the result will usually be a crash or data- or memory corruption at runtime.","['use', 'mangling', 'detect', 'additional', 'non', 'signature', 'relate', 'change', 'function', 'purity', 'potentially', 'throw', 'exception', 'trigger', 'garbage', 'collection', 'example', 'language', 'd', 'simplified', 'error', 'checking', 'example', 'function', 'int', 'int', 'gint', 'pure', 'compile', 'object', 'file', 'signature', 'change', 'float', 'int', 'gint', 'compile', 'source', 'call', 'link', 'time', 'linker', 'detect', 'function', 'fint', 'return', 'error', 'similarly', 'linker', 'able', 'detect', 'return', 'type', 'different', 'return', 'error', 'incompatible', 'calling', 'convention', 'likely', 'produce', 'wrong', 'result', 'crash', 'program', 'mangling', 'usually', 'capture', 'detail', 'calling', 'process', 'example', 'fully', 'prevent', 'error', 'like', 'change', 'datum', 'member', 'struct', 'class', 'example', 'struct', 'void', 'compile', 'object', 'file', 'definition', 'change', 'struct', 'int', 'compilation', 'fs.', 'case', 'compiler', 'usually', 'use', 'different', 'call', 'convention', 'case', 'mangle', 'linker', 'detect', 'problem', 'result', 'usually', 'crash', 'data-', 'memory', 'corruption', 'runtime']"
2783,"Although name mangling is not generally required or used by languages that do not support function overloading, like C and classic Pascal, they use it in some cases to provide additional information about a function. For example, compilers targeted at Microsoft Windows platforms support a variety of calling conventions, which determine the manner in which parameters are sent to subroutines and results are returned. Because the different calling conventions are incompatible with one another, compilers mangle symbols with codes detailing which convention should be used to call the specific routine.","['mangling', 'generally', 'require', 'language', 'support', 'function', 'overloading', 'like', 'classic', 'pascal', 'use', 'case', 'provide', 'additional', 'information', 'function', 'example', 'compiler', 'target', 'microsoft', 'windows', 'platform', 'support', 'variety', 'call', 'convention', 'determine', 'manner', 'parameter', 'send', 'subroutine', 'result', 'return', 'different', 'calling', 'convention', 'incompatible', 'compiler', 'mangle', 'symbol', 'code', 'detail', 'convention', 'specific', 'routine']"
2784,"The mangling scheme was established by Microsoft and has been informally followed by other compilers including Digital Mars, Borland, and GNU GCC when compiling code for the Windows platforms. The scheme even applies to other languages, such as Pascal, D, Delphi, Fortran, and C#. This allows subroutines written in those languages to call, or be called by, existing Windows libraries using a calling convention different from their default.","['mangle', 'scheme', 'establish', 'microsoft', 'informally', 'follow', 'compiler', 'include', 'digital', 'mars', 'borland', 'gnu', 'gcc', 'compile', 'code', 'windows', 'platform', 'scheme', 'apply', 'language', 'pascal', 'delphi', 'fortran', 'allow', 'subroutine', 'write', 'language', 'call', 'exist', 'windows', 'library', 'call', 'convention', 'different', 'default']"
2785,When compiling the following C examples:,"['compile', 'follow', 'example']"
2786,"In the stdcall and fastcall mangling schemes, the function is encoded as _name@X and @name@X respectively, where X is the number of bytes, in decimal, of the arguments in the parameter list including those passed in registers, for fastcall. In the case of cdecl, the function name is merely prefixed by an underscore.","['stdcall', 'fastcall', 'mangle', 'scheme', 'function', 'encode', 'name@x', '@name@x', 'respectively', 'number', 'byte', 'decimal', 'argument', 'parameter', 'list', 'include', 'pass', 'register', 'fastcall', 'case', 'cdecl', 'function', 'merely', 'prefix', 'underscore']"
2787,"The 64-bit convention on Windows Microsoft C has no leading underscore. This difference may in some rare cases lead to unresolved externals when porting such code to 64 bits. For example, Fortran code can use 'alias' to link against a C method by name as follows:","['bit', 'convention', 'windows', 'microsoft', 'lead', 'underscore', 'difference', 'rare', 'case', 'lead', 'unresolved', 'external', 'port', 'code', 'bit', 'example', 'fortran', 'code', 'use', 'alia', 'link', 'method', 'follow']"
2788,"This will compile and link fine under 32 bits, but generate an unresolved external _f under 64 bits. One workaround for this is not to use 'alias' at all in which the method names typically need to be capitalized in C and Fortran. Another is to use the BIND option:","['compile', 'link', 'fine', 'bit', 'generate', 'unresolved', 'external', 'bit', 'workaround', 'use', 'alias', 'method', 'name', 'typically', 'need', 'capitalize', 'fortran', 'use', 'bind', 'option']"
2789,"In C, most compilers also mangle static functions and variables and in C++ functions and variables declared static or put in the anonymous namespace in translation units using the same mangling rules as for their non-static versions. If functions with the same name and parameters for C++ are also defined and used in different translation units, it will also mangle to the same name, potentially leading to a clash. However, they will not be equivalent if they are called in their respective translation units. Compilers are usually free to emit arbitrary mangling for these functions, because it is illegal to access these from other translation units directly, so they will never need linking between different object code linking of them is never needed. To prevent linking conflicts, compilers will use standard mangling, but will use so-called 'local' symbols. When linking many such translation units there might be multiple definitions of a function with the same name, but resulting code will only call one or another depending on which translation unit it came from. This is usually done using the relocation mechanism.","['compiler', 'mangle', 'static', 'function', 'variable', 'c++', 'function', 'variable', 'declare', 'static', 'anonymous', 'namespace', 'translation', 'unit', 'mangling', 'rule', 'non', 'static', 'version', 'function', 'parameter', 'c++', 'define', 'different', 'translation', 'unit', 'mangle', 'potentially', 'lead', 'clash', 'equivalent', 'call', 'respective', 'translation', 'unit', 'compiler', 'usually', 'free', 'emit', 'arbitrary', 'mangling', 'function', 'illegal', 'access', 'translation', 'unit', 'directly', 'need', 'link', 'different', 'object', 'code', 'linking', 'need', 'prevent', 'link', 'conflict', 'compiler', 'use', 'standard', 'mangling', 'use', 'call', 'local', 'symbol', 'link', 'translation', 'unit', 'multiple', 'definition', 'function', 'result', 'code', 'depend', 'translation', 'unit', 'come', 'usually', 'relocation', 'mechanism']"
2790,"C++ compilers are the most widespread users of name mangling. The first C++ compilers were implemented as translators to C source code, which would then be compiled by a C compiler to object code; because of this, symbol names had to conform to C identifier rules. Even later, with the emergence of compilers that produced machine code or assembly directly, the system's linker generally did not support C++ symbols, and mangling was still required.","['c++', 'compiler', 'widespread', 'user', 'mangling', 'c++', 'compiler', 'implement', 'translator', 'source', 'code', 'compile', 'compiler', 'object', 'code', 'symbol', 'name', 'conform', 'identifi', 'rule', 'later', 'emergence', 'compiler', 'produce', 'machine', 'code', 'assembly', 'directly', 'system', 'linker', 'generally', 'support', 'c++', 'symbol', 'mangling', 'require']"
2791,"The C++ language does not define a standard decoration scheme, so each compiler uses its own. C++ also has complex language features, such as classes, templates, namespaces, and operator overloading, that alter the meaning of specific symbols based on context or usage. Meta-data about these features can be disambiguated by mangling decorating the name of a symbol. Because the name-mangling systems for such features are not standardized across compilers, few linkers can link object code that was produced by different compilers.","['c++', 'language', 'define', 'standard', 'decoration', 'scheme', 'compiler', 'use', 'c++', 'complex', 'language', 'feature', 'class', 'template', 'namespace', 'operator', 'overloading', 'alter', 'meaning', 'specific', 'symbol', 'base', 'context', 'usage', 'meta', 'datum', 'feature', 'disambiguate', 'mangle', 'decorate', 'symbol', 'mangle', 'system', 'feature', 'standardize', 'compiler', 'linker', 'link', 'object', 'code', 'produce', 'different', 'compiler']"
2792,A single C++ translation unit might define two functions named f:,"['single', 'c++', 'translation', 'unit', 'define', 'function', 'name']"
2793,"These are distinct functions, with no relation to each other apart from the name. The C++ compiler will therefore encode the type information in the symbol name, the result being something resembling:","['distinct', 'function', 'relation', 'apart', 'c++', 'compiler', 'encode', 'type', 'information', 'symbol', 'result', 'resemble']"
2794,"Even though its name is unique, g is still mangled: name mangling applies to all C++ symbols those not in an extern ""C"" block.","['unique', 'mangle', 'mangling', 'apply', 'c++', 'symbol', 'extern', 'block']"
2795,"The mangled symbols in this example, in the comments below the respective identifier name, are those produced by the GNU GCC 3.x compilers, according to the IA-64 Itanium ABI:","['mangle', 'symbol', 'example', 'comment', 'respective', 'identifier', 'produce', 'gnu', 'gcc', '3.x', 'compiler', 'accord', 'ia-64', 'itanium', 'abi']"
2796,"All mangled symbols begin with _Z note that an identifier beginning with an underscore followed by a capital letter is a reserved identifier in C, so conflict with user identifiers is avoided; for nested names including both namespaces and classes, this is followed by N, then a series of <length, id> pairs the length being the length of the next identifier, and finally E. For example, wikipedia::article::format becomes:","['mangle', 'symbol', 'begin', 'note', 'identifier', 'beginning', 'underscore', 'follow', 'capital', 'letter', 'reserved', 'identifier', 'conflict', 'user', 'identifier', 'avoid', 'nested', 'name', 'include', 'namespace', 'class', 'follow', 'series', 'length', 'pair', 'length', 'length', 'identifier', 'finally', 'example', 'wikipedia::article::format']"
2797,"For functions, this is then followed by the type information; as format is a void function, this is simply v; hence:","['function', 'follow', 'type', 'information', 'format', 'void', 'function', 'simply']"
2798,"For print_to, the standard type std::ostream which is a .mw-parser-output .monospacedfont-family:monospace,monospacetypedef for std::basic_ostream<char, std::char_traits<char> > is used, which has the special alias So; a reference to this type is therefore RSo, with the complete name for the function being:","['print_to', 'standard', 'type', 'std::ostream', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacetypedef', 'std::basic_ostream', 'char', 'std::char_trait', 'char', 'special', 'alias', 'reference', 'type', 'rso', 'complete', 'function']"
2799,"There isn't a standardized scheme by which even trivial C++ identifiers are mangled, and consequently different compilers or even different versions of the same compiler, or the same compiler on different platforms mangle public symbols in radically different and thus totally incompatible ways. Consider how different C++ compilers mangle the same functions:","['standardized', 'scheme', 'trivial', 'c++', 'identifier', 'mangle', 'consequently', 'different', 'compiler', 'different', 'version', 'compiler', 'compiler', 'different', 'platform', 'mangle', 'public', 'symbol', 'radically', 'different', 'totally', 'incompatible', 'way', 'consider', 'different', 'c++', 'compiler', 'mangle', 'function']"
2800,The job of the common C++ idiom:,"['job', 'common', 'c++', 'idiom']"
2801,"is to ensure that the symbols within are ""unmangled"" – that the compiler emits a binary file with their names undecorated, as a C compiler would do. As C language definitions are unmangled, the C++ compiler needs to avoid mangling references to these identifiers.","['ensure', 'symbol', 'unmangled', 'compiler', 'emit', 'binary', 'file', 'name', 'undecorated', 'compiler', 'language', 'definition', 'unmangled', 'c++', 'compiler', 'need', 'avoid', 'mangle', 'reference', 'identifier']"
2802,"For example, the standard strings library, <string.h>, usually contains something resembling:","['example', 'standard', 'string', 'library', 'string.h', 'usually', 'contain', 'resemble']"
2803,"uses the correct, unmangled strcmp and memset. If the extern ""C"" had not been used, the SunPro C++ compiler would produce code equivalent to:","['use', 'correct', 'unmangled', 'strcmp', 'memset', 'extern', 'sunpro', 'c++', 'compiler', 'produce', 'code', 'equivalent']"
2804,"Since those symbols do not exist in the C runtime library e.g. libc, link errors would result.","['symbol', 'exist', 'runtime', 'library', 'e.g.', 'libc', 'link', 'error', 'result']"
2805,"It would seem that standardized name mangling in the C++ language would lead to greater interoperability between compiler implementations. However, such a standardization by itself would not suffice to guarantee C++ compiler interoperability and it might even create a false impression that interoperability is possible and safe when it isn't. Name mangling is only one of several application binary interface ABI details that need to be decided and observed by a C++ implementation. Other ABI aspects like exception handling, virtual table layout, structure, and stack frame padding also cause differing C++ implementations to be incompatible. Further, requiring a particular form of mangling would cause issues for systems where implementation limits e.g., length of symbols dictate a particular mangling scheme. A standardized requirement for name mangling would also prevent an implementation where mangling was not required at all — for example, a linker that understood the C++ language.","['standardized', 'mangling', 'c++', 'language', 'lead', 'great', 'interoperability', 'compiler', 'implementation', 'standardization', 'suffice', 'guarantee', 'c++', 'compiler', 'interoperability', 'create', 'false', 'impression', 'interoperability', 'possible', 'safe', 'mangling', 'application', 'binary', 'interface', 'abi', 'detail', 'need', 'decide', 'observe', 'c++', 'implementation', 'abi', 'aspect', 'like', 'exception', 'handling', 'virtual', 'table', 'layout', 'structure', 'stack', 'frame', 'padding', 'cause', 'differ', 'c++', 'implementation', 'incompatible', 'require', 'particular', 'form', 'mangle', 'cause', 'issue', 'system', 'implementation', 'limit', 'e.g.', 'length', 'symbol', 'dictate', 'particular', 'mangling', 'scheme', 'standardized', 'requirement', 'mangling', 'prevent', 'implementation', 'mangle', 'require', 'example', 'linker', 'understand', 'c++', 'language']"
2806,"The C++ standard therefore does not attempt to standardize name mangling. On the contrary, the Annotated C++ Reference Manual also known as ARM, .mw-parser-output cite.citationfont-style:inherit;word-wrap:break-word.mw-parser-output .citation qquotes:""\""""""\""""""'""""'"".mw-parser-output .citation:targetbackground-color:rgba0,127,255,0.133.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free abackground:url""//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg""right 0.1em center/9px no-repeat.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackground:url""//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg""right 0.1em center/9px no-repeat.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription abackground:url""//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg""right 0.1em center/9px no-repeat.mw-parser-output .cs1-ws-icon abackground:url""//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg""right 0.1em center/12px no-repeat.mw-parser-output .cs1-codecolor:inherit;background:inherit;border:none;padding:inherit.mw-parser-output .cs1-hidden-errordisplay:none;color:#d33.mw-parser-output .cs1-visible-errorcolor:#d33.mw-parser-output .cs1-maintdisplay:none;color:#3a3;margin-left:0.3em.mw-parser-output .cs1-formatfont-size:95%.mw-parser-output .cs1-kern-leftpadding-left:0.2em.mw-parser-output .cs1-kern-rightpadding-right:0.2em.mw-parser-output .citation .mw-selflinkfont-weight:inheritISBN 0-201-51459-1, section 7.2.1c actively encourages the use of different mangling schemes to prevent linking when other aspects of the ABI are incompatible.","['c++', 'standard', 'attempt', 'standardize', 'mangling', 'contrary', 'annotated', 'c++', 'reference', 'manual', 'know', 'arm', '.mw', 'parser', 'output', 'cite.citationfont', 'style', 'inherit', 'wrap', 'break', 'word.mw', 'parser', 'output', '.citation', 'parser', 'output', '.citation', 'targetbackground', 'color', 'rgba0.mw', 'parser', 'output', '.id', 'lock', 'free', 'a,.mw', 'parser', 'output', '.citation', '.cs1', 'lock', 'free', 'abackground', 'wikipedia', 'lock', 'green.svg', '0em', 'repeat.mw', 'parser', 'output', '.id', 'lock', 'limit', 'a,.mw', 'parser', 'output', '.id', 'lock', 'registration', 'a,.mw', 'parser', 'output', '.citation', '.cs1', 'lock', 'limit', 'a,.mw', 'parser', 'output', '.citation', '.cs1', 'lock', 'registration', 'abackground', 'wikipedia', 'commons', 'lock', 'gray', 'alt-2.svg', '0em', 'repeat.mw', 'parser', 'output', '.id', 'lock', 'subscription', 'a,.mw', 'parser', 'output', '.citation', '.cs1', 'lock', 'subscription', 'abackground', 'wikipedia', 'commons', 'lock', 'red', 'alt-2.svg', '0em', 'repeat.mw', 'parser', 'output', '.cs1', 'icon', 'abackground', 'wikipedia', 'wikisource', 'logo.svg', '0em', 'repeat.mw', 'parser', 'output', '.cs1', 'codecolor', 'inherit', 'inherit', 'none', 'inherit.mw', 'parser', 'output', '.cs1', 'hide', 'errordisplay', 'none', 'parser', 'output', '.cs1', 'visible', 'errorcolor:#d33.mw', 'parser', 'output', '.cs1', 'maintdisplay', 'none', 'leftem.mw', 'parser', 'output', '.cs1', 'formatfont', 'size', 'parser', 'output', '.cs1', 'kern', 'leftpadde', 'leftem.mw', 'parser', 'output', '.cs1', 'kern', 'rightpadding', 'rightem.mw', 'parser', 'output', '.citation', '.mw', 'selflinkfont', 'weight', 'inheritisbn', '201', '51459', 'section', '7c', 'actively', 'encourage', 'use', 'different', 'mangle', 'scheme', 'prevent', 'link', 'aspect', 'abi', 'incompatible']"
2807,"Nevertheless, as detailed in the section above, on some platforms6 the full C++ ABI has been standardized, including name mangling.","['detail', 'section', 'platforms6', 'c++', 'abi', 'standardize', 'include', 'mangling']"
2808,"Because C++ symbols are routinely exported from DLL and shared object files, the name mangling scheme is not merely a compiler-internal matter. Different compilers or different versions of the same compiler, in many cases produce such binaries under different name decoration schemes, meaning that symbols are frequently unresolved if the compilers used to create the library and the program using it employed different schemes. For example, if a system with multiple C++ compilers installed e.g., GNU GCC and the OS vendor's compiler wished to install the Boost C++ Libraries, it would have to be compiled multiple times once for GCC and once for the vendor compiler.","['c++', 'symbol', 'routinely', 'export', 'dll', 'share', 'object', 'file', 'mangle', 'scheme', 'merely', 'compiler', 'internal', 'matter', 'different', 'compiler', 'different', 'version', 'compiler', 'case', 'produce', 'binary', 'different', 'decoration', 'scheme', 'mean', 'symbol', 'frequently', 'unresolved', 'compiler', 'create', 'library', 'program', 'employ', 'different', 'scheme', 'example', 'system', 'multiple', 'c++', 'compiler', 'instal', 'e.g.', 'gnu', 'gcc', 'vendor', 'compiler', 'wish', 'install', 'boost', 'c++', 'libraries', 'compile', 'multiple', 'time', 'gcc', 'vendor', 'compiler']"
2809,"It is good for safety purposes that compilers producing incompatible object codes codes based on different ABIs, regarding e.g., classes and exceptions use different name mangling schemes. This guarantees that these incompatibilities are detected at the linking phase, not when executing the software which could lead to obscure bugs and serious stability issues.","['good', 'safety', 'purpose', 'compiler', 'produce', 'incompatible', 'object', 'code', 'code', 'base', 'different', 'abi', 'e.g.', 'class', 'exception', 'use', 'different', 'mangle', 'scheme', 'guarantee', 'incompatibility', 'detect', 'link', 'phase', 'execute', 'software', 'lead', 'obscure', 'bug', 'stability', 'issue']"
2810,"For this reason, name decoration is an important aspect of any C++-related ABI.","['reason', 'decoration', 'important', 'aspect', 'c++-related', 'abi']"
2811,"There are instances, particularly in large, complex code bases, where it can be difficult or impractical to map the mangled name emitted within a linker error message back to the particular corresponding token/variable-name in the source. This problem can make identifying the relevant source files very difficult for build or test engineers even if only one compiler and linker are in use. Demanglers including those within the linker error reporting mechanisms sometimes help but the mangling mechanism itself may discard critical disambiguating information.","['instance', 'particularly', 'large', 'complex', 'code', 'basis', 'difficult', 'impractical', 'map', 'mangle', 'emit', 'linker', 'error', 'message', 'particular', 'corresponding', 'token', 'variable', 'source', 'problem', 'identify', 'relevant', 'source', 'file', 'difficult', 'build', 'test', 'engineer', 'compiler', 'linker', 'use', 'demangler', 'include', 'linker', 'error', 'reporting', 'mechanism', 'help', 'mangle', 'mechanism', 'discard', 'critical', 'disambiguating', 'information']"
2812,"In Java, the signature of a method or a class contains its name and the types of its method arguments and return value, where applicable. The format of signatures is documented, as the language, compiler, and .class file format were all designed together and had object-orientation and universal interoperability in mind from the start.","['java', 'signature', 'method', 'class', 'contain', 'type', 'method', 'argument', 'return', 'value', 'applicable', 'format', 'signature', 'document', 'language', 'compiler', '.class', 'file', 'format', 'design', 'object', 'orientation', 'universal', 'interoperability', 'mind', 'start']"
2813,"The scope of anonymous classes is confined to their parent class, so the compiler must produce a ""qualified"" public name for the inner class, to avoid conflict where other classes with the same name inner or not exist in the same namespace. Similarly, anonymous classes must have ""fake"" public names generated for them as the concept of anonymous classes only exists in the compiler, not the runtime. So, compiling the following java program","['scope', 'anonymous', 'class', 'confine', 'parent', 'class', 'compiler', 'produce', 'qualified', 'public', 'inner', 'class', 'avoid', 'conflict', 'class', 'inner', 'exist', 'namespace', 'similarly', 'anonymous', 'class', 'fake', 'public', 'name', 'generate', 'concept', 'anonymous', 'class', 'exist', 'compiler', 'runtime', 'compile', 'follow', 'java', 'program']"
2814,"All of these class names are valid as $ symbols are permitted in the JVM specification and these names are ""safe"" for the compiler to generate, as the Java language definition advises not to use $ symbols in normal java class definitions.","['class', 'name', 'valid', 'symbol', 'permit', 'jvm', 'specification', 'name', 'safe', 'compiler', 'generate', 'java', 'language', 'definition', 'advise', 'use', 'symbol', 'normal', 'java', 'class', 'definition']"
2815,"Name resolution in Java is further complicated at runtime, as fully qualified class names are unique only inside a specific classloader instance. Classloaders are ordered hierarchically and each Thread in the JVM has a so-called context class loader, so in cases where two different classloader instances contain classes with the same name, the system first tries to load the class using the root or system classloader and then goes down the hierarchy to the context class loader.","['resolution', 'java', 'complicate', 'runtime', 'fully', 'qualified', 'class', 'name', 'unique', 'inside', 'specific', 'classloader', 'instance', 'classloader', 'order', 'hierarchically', 'thread', 'jvm', 'call', 'context', 'class', 'loader', 'case', 'different', 'classloader', 'instance', 'contain', 'class', 'system', 'try', 'load', 'class', 'root', 'system', 'classloader', 'go', 'hierarchy', 'context', 'class', 'loader']"
2816,"Java's native method support allows Java language programs to call out to programs written in another language generally either C or C++. There are two name-resolution concerns here, neither of which is implemented in a particularly standard manner:","['java', 'native', 'method', 'support', 'allow', 'java', 'language', 'program', 'program', 'write', 'language', 'generally', 'c++', 'resolution', 'concern', 'implement', 'particularly', 'standard', 'manner']"
2817,"In Python, mangling is used for class attributes that one does not want subclasses to use8 which are designated as such by giving them a name with two or more leading underscores and no more than one trailing underscore. For example, __thing will be mangled, as will ___thing and __thing_, but __thing__ and __thing___ will not. Python's runtime does not restrict access to such attributes, the mangling only prevents name collisions if a derived class defines an attribute with the same name.","['python', 'mangling', 'class', 'attribute', 'want', 'subclass', 'use8', 'designate', 'give', 'lead', 'underscore', 'trailing', 'underscore', 'example', 'thing', 'mangle', 'thing', 'thing', 'thing', 'thing', 'python', 'runtime', 'restrict', 'access', 'attribute', 'mangle', 'prevent', 'collision', 'derive', 'class', 'define', 'attribute']"
2818,"On encountering name mangled attributes, Python transforms these names by prepending a single underscore and the name of the enclosing class, for example:","['encounter', 'mangle', 'attribute', 'python', 'transform', 'name', 'prepende', 'single', 'underscore', 'enclose', 'class', 'example']"
2819,"To avoid name mangling in Pascal, use:","['avoid', 'mangling', 'pascal', 'use']"
2820,"Free Pascal supports function and operator overloading, thus it also uses name mangling to support these features. On the other hand, Free Pascal is capable of calling symbols defined in external modules created with another language and exporting its own symbols to be called by another language. For further information, consult Chapter 6.2 and 7.1 of Free Pascal Programmer's Guide.","['free', 'pascal', 'support', 'function', 'operator', 'overloading', 'use', 'mangle', 'support', 'feature', 'hand', 'free', 'pascal', 'capable', 'call', 'symbol', 'define', 'external', 'module', 'create', 'language', 'export', 'symbol', 'call', 'language', 'information', 'consult', 'chapter', '6', '7', 'free', 'pascal', 'programmer', 'guide']"
2821,"Name mangling is also necessary in Fortran compilers, originally because the language is case insensitive. Further mangling requirements were imposed later in the evolution of the language because of the addition of modules and other features in the Fortran 90 standard. The case mangling, especially, is a common issue that must be dealt with in order to call Fortran libraries, such as LAPACK, from other languages, such as C.","['mangling', 'necessary', 'fortran', 'compiler', 'originally', 'language', 'case', 'insensitive', 'mangle', 'requirement', 'impose', 'later', 'evolution', 'language', 'addition', 'module', 'feature', 'fortran', 'standard', 'case', 'mangling', 'especially', 'common', 'issue', 'deal', 'order', 'fortran', 'library', 'lapack', 'language']"
2822,"Because of the case insensitivity, the name of a subroutine or function FOO must be converted to a standardized case and format by the compiler so that it will be linked in the same way regardless of case. Different compilers have implemented this in various ways, and no standardization has occurred. The AIX and HP-UX Fortran compilers convert all identifiers to lower case foo, while the Cray and Unicos Fortran compilers converted identifiers to all upper case FOO. The GNU g77 compiler converts identifiers to lower case plus an underscore foo_, except that identifiers already containing an underscore FOO_BAR have two underscores appended foo_bar__, following a convention established by f2c. Many other compilers, including SGI's IRIX compilers, GNU Fortran, and Intel's Fortran compiler except on Microsoft Windows, convert all identifiers to lower case plus an underscore foo_ and foo_bar_, respectively. On Microsoft Windows, the Intel Fortran compiler defaults to uppercase without an underscore.9","['case', 'insensitivity', 'subroutine', 'function', 'foo', 'convert', 'standardized', 'case', 'format', 'compiler', 'link', 'way', 'regardless', 'case', 'different', 'compiler', 'implement', 'way', 'standardization', 'occur', 'aix', 'fortran', 'compiler', 'convert', 'identifier', 'low', 'case', 'foo', 'cray', 'unicos', 'fortran', 'compiler', 'convert', 'identifier', 'upper', 'case', 'foo', 'gnu', 'g77', 'compiler', 'convert', 'identifier', 'low', 'case', 'plus', 'underscore', 'foo', 'identifier', 'contain', 'underscore', 'foo_bar', 'underscore', 'append', 'foo_bar', 'follow', 'convention', 'establish', 'f2c', 'compiler', 'include', 'sgi', 'irix', 'compiler', 'gnu', 'fortran', 'intel', 'fortran', 'compiler', 'microsoft', 'windows', 'convert', 'identifier', 'low', 'case', 'plus', 'underscore', 'foo', 'foo_bar', 'respectively', 'microsoft', 'windows', 'intel', 'fortran', 'compiler', 'default', 'uppercase', 'underscore']"
2823,"Identifiers in Fortran 90 modules must be further mangled, because the same procedure name may occur in different modules. Since the Fortran 2003 Standard requires that module procedure names not conflict with other external symbols,10 compilers tend to use the module name and the procedure name, with a distinct marker in between. For example:","['identifier', 'fortran', 'module', 'mangle', 'procedure', 'occur', 'different', 'module', 'fortran', '2003', 'standard', 'require', 'module', 'procedure', 'name', 'conflict', 'external', 'symbols', 'compiler', 'tend', 'use', 'module', 'procedure', 'distinct', 'marker', 'example']"
2824,"In this module, the name of the function will be mangled as __m_MOD_five e.g., GNU Fortran, m_MP_five_ e.g., Intel's ifort, m.five_ e.g., Oracle's sun95, etc. Since Fortran does not allow overloading the name of a procedure, but uses generic interface blocks and generic type-bound procedures instead, the mangled names do not need to incorporate clues about the arguments.","['module', 'function', 'mangle', 'm_mod_five', 'e.g.', 'gnu', 'fortran', 'm_mp_five', 'e.g.', 'intel', 'ifort', 'm.five', 'e.g.', 'oracle', 'sun95', 'etc', 'fortran', 'allow', 'overload', 'procedure', 'use', 'generic', 'interface', 'block', 'generic', 'type', 'bind', 'procedure', 'instead', 'mangle', 'name', 'need', 'incorporate', 'clue', 'argument']"
2825,"The Fortran 2003 BIND option overrides any name mangling done by the compiler, as shown above.","['fortran', '2003', 'bind', 'option', 'override', 'mangling', 'compiler', 'show']"
2826,"Function names are mangled by default in Rust. However, this can be disabled by the #no_mangle function attribute. This attribute can be used to export functions to C, C++, or Objective-C.11 Additionally, along with the #start function attribute or the #no_main crate attribute, it allows the user to define a C-style entry point for the program.12","['function', 'name', 'mangle', 'default', 'rust', 'disable', 'no_mangle', 'function', 'attribute', 'attribute', 'export', 'function', 'c++', 'objective', 'c', 'additionally', 'start', 'function', 'attribute', 'no_main', 'crate', 'attribute', 'allow', 'user', 'define', 'style', 'entry', 'point', 'program']"
2827,Rust has used many versions of symbol mangling schemes that can be selected at compile time with an -Z symbol-mangling-version option. The following manglers are defined:,"['rust', 'version', 'symbol', 'mangle', 'scheme', 'select', 'compile', 'time', 'symbol', 'mangle', 'version', 'option', 'follow', 'mangler', 'define']"
2828,Examples are provided in the Rust symbol-names tests.15,"['example', 'provide', 'rust', 'symbol', 'name', 'tests']"
2829,"Essentially two forms of method exist in Objective-C, the class ""static"" method, and the instance method. A method declaration in Objective-C is of the following form:","['essentially', 'form', 'method', 'exist', 'objective', 'class', 'static', 'method', 'instance', 'method', 'method', 'declaration', 'objective', 'following', 'form']"
2830,"Class methods are signified by +, instance methods use -. A typical class method declaration may then look like:","['class', 'method', 'signify', 'instance', 'method', 'use', 'typical', 'class', 'method', 'declaration', 'look', 'like']"
2831,With instance methods looking like this:,"['instance', 'method', 'look', 'like']"
2832,"Each of these method declarations have a specific internal representation. When compiled, each method is named according to the following scheme for class methods:","['method', 'declaration', 'specific', 'internal', 'representation', 'compile', 'method', 'name', 'accord', 'follow', 'scheme', 'class', 'method']"
2833,"The colons in the Objective-C syntax are translated to underscores. So, the Objective-C class method + id initWithX: int number andY: int number;, if belonging to the Point class would translate as _c_Point_initWithX_andY_, and the instance method belonging to the same class - id value; would translate to _i_Point_value.","['colon', 'objective', 'syntax', 'translate', 'underscore', 'objective', 'class', 'method', 'initwithx', 'int', 'number', 'andy', 'int', 'number', 'belong', 'point', 'class', 'translate', 'c_point_initwithx_andy', 'instance', 'method', 'belong', 'class', 'value', 'translate', 'i_point_value']"
2834,"Each of the methods of a class are labeled in this way. However, in order to look up a method that a class may respond to would be tedious if all methods are represented in this fashion. Each of the methods is assigned a unique symbol such as an integer. Such a symbol is known as a selector. In Objective-C, one can manage selectors directly — they have a specific type in Objective-C — SEL.","['method', 'class', 'label', 'way', 'order', 'look', 'method', 'class', 'respond', 'tedious', 'method', 'represent', 'fashion', 'method', 'assign', 'unique', 'symbol', 'integer', 'symbol', 'know', 'selector', 'objective', 'manage', 'selector', 'directly', 'specific', 'type', 'objective', 'sel']"
2835,"During compilation, a table is built that maps the textual representation, such as _i_Point_value, to selectors which are given a type SEL. Managing selectors is more efficient than manipulating the textual representation of a method. Note that a selector only matches a method's name, not the class it belongs to — different classes can have different implementations of a method with the same name. Because of this, implementations of a method are given a specific identifier too, these are known as implementation pointers, and are also given a type, IMP.","['compilation', 'table', 'build', 'map', 'textual', 'representation', 'i_point_value', 'selector', 'give', 'type', 'sel', 'manage', 'selector', 'efficient', 'manipulate', 'textual', 'representation', 'method', 'note', 'selector', 'match', 'method', 'class', 'belong', 'different', 'class', 'different', 'implementation', 'method', 'implementation', 'method', 'give', 'specific', 'identifier', 'know', 'implementation', 'pointer', 'give', 'type', 'imp']"
2836,"Message sends are encoded by the compiler as calls to the id objc_msgSend id receiver, SEL selector, ... function, or one of its cousins, where receiver is the receiver of the message, and SEL determines the method to call. Each class has its own table that maps selectors to their implementations — the implementation pointer specifies where in memory the actual implementation of the method resides. There are separate tables for class and instance methods. Apart from being stored in the SEL to IMP lookup tables, the functions are essentially anonymous.","['message', 'send', 'encode', 'compiler', 'call', 'objc_msgsend', 'receiver', 'sel', 'selector', 'function', 'cousin', 'receiver', 'receiver', 'message', 'sel', 'determine', 'method', 'class', 'table', 'map', 'selector', 'implementation', 'implementation', 'pointer', 'specifie', 'memory', 'actual', 'implementation', 'method', 'reside', 'separate', 'table', 'class', 'instance', 'method', 'apart', 'store', 'sel', 'imp', 'lookup', 'table', 'function', 'essentially', 'anonymous']"
2837,The SEL value for a selector does not vary between classes. This enables polymorphism.,"['sel', 'value', 'selector', 'vary', 'class', 'enable', 'polymorphism']"
2838,"The Objective-C runtime maintains information about the argument and return types of methods. However, this information is not part of the name of the method, and can vary from class to class.","['objective', 'runtime', 'maintain', 'information', 'argument', 'return', 'type', 'method', 'information', 'method', 'vary', 'class', 'class']"
2839,"Since Objective-C does not support namespaces, there is no need for the mangling of class names that do appear as symbols in generated binaries.","['objective', 'support', 'namespace', 'need', 'mangling', 'class', 'name', 'appear', 'symbol', 'generate', 'binary']"
2840,"Swift keeps metadata about functions and more in the mangled symbols referring to them. This metadata includes the function's name, attributes, module name, parameter types, return type, and more. For example:","['swift', 'keep', 'metadata', 'function', 'mangle', 'symbol', 'refer', 'metadata', 'include', 'function', 'attribute', 'module', 'parameter', 'type', 'return', 'type', 'example']"
2841,"The mangled name for a method func calculatex: int -> int of a MyClass class in module test is _TFC4test7MyClass9calculatefS0_FT1xSi_Si, for 2014 Swift. The components and their meanings are as follows:16","['mangle', 'method', 'func', 'calculatex', 'int', 'int', 'myclass', 'class', 'module', 'test', 'tfc4test7myclass9calculatefs0_ft1xsi_si', '2014', 'swift', 'component', 'meaning', 'follows']"
2842,Mangling for versions since Swift 4.0 is documented officially. It retains some similarity to Itanium.17,"['mangle', 'version', 'swift', '4', 'document', 'officially', 'retain', 'similarity', 'itanium']"
2843,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2844,"In computing, a namespace is a set of signs names that are used to identify and refer to objects of various kinds. A namespace ensures that all of a given set of objects have unique names so that they can be easily identified.","['computing', 'namespace', 'set', 'sign', 'name', 'identify', 'refer', 'object', 'kind', 'namespace', 'ensure', 'give', 'set', 'object', 'unique', 'name', 'easily', 'identify']"
2845,"Namespaces are commonly structured as hierarchies to allow reuse of names in different contexts. As an analogy, consider a system of naming of people where each person has a given name, as well as a family name shared with their relatives. If the first names of family members are unique only within each family, then each person can be uniquely identified by the combination of first name and family name; there is only one Jane Doe, though there may be many Janes. Within the namespace of the Doe family, just ""Jane"" suffices to unambiguously designate this person, while within the ""global"" namespace of all people, the full name must be used.","['namespace', 'commonly', 'structure', 'hierarchy', 'allow', 'reuse', 'name', 'different', 'context', 'analogy', 'consider', 'system', 'naming', 'people', 'person', 'give', 'family', 'share', 'relative', 'name', 'family', 'member', 'unique', 'family', 'person', 'uniquely', 'identify', 'combination', 'family', 'jane', 'doe', 'janes', 'namespace', 'doe', 'family', 'jane', 'suffice', 'unambiguously', 'designate', 'person', 'global', 'namespace', 'people']"
2846,"Prominent examples for namespaces include file systems, which assign names to files.1 Some programming languages organize their variables and subroutines in namespaces.234 Computer networks and distributed systems assign names to resources, such as computers, printers, websites, and remote files. Operating systems can partition kernel resources by isolated namespaces to support virtualization containers.","['prominent', 'example', 'namespace', 'include', 'file', 'system', 'assign', 'name', 'files', 'programming', 'language', 'organize', 'variable', 'subroutine', 'namespaces', 'computer', 'network', 'distribute', 'system', 'assign', 'name', 'resource', 'computer', 'printer', 'website', 'remote', 'file', 'operate', 'system', 'partition', 'kernel', 'resource', 'isolated', 'namespace', 'support', 'virtualization', 'container']"
2847,"Similarly, hierarchical file systems organize files in directories. Each directory is a separate namespace, so that the directories ""letters"" and ""invoices"" may both contain a file ""to_jane"".","['similarly', 'hierarchical', 'file', 'system', 'organize', 'file', 'directory', 'directory', 'separate', 'namespace', 'directory', 'letter', 'invoice', 'contain', 'file', 'to_jane']"
2848,"In computer programming, namespaces are typically employed for the purpose of grouping symbols and identifiers around a particular functionality and to avoid name collisions between multiple identifiers that share the same name.","['computer', 'programming', 'namespace', 'typically', 'employ', 'purpose', 'group', 'symbol', 'identifier', 'particular', 'functionality', 'avoid', 'collision', 'multiple', 'identifier', 'share']"
2849,"In networking, the Domain Name System organizes websites and other resources into hierarchical namespaces.","['network', 'domain', 'system', 'organize', 'website', 'resource', 'hierarchical', 'namespace']"
2850,Element names are defined by the developer. This often results in a conflict when trying to mix XML documents from different XML applications.,"['element', 'name', 'define', 'developer', 'result', 'conflict', 'try', 'mix', 'xml', 'document', 'different', 'xml', 'application']"
2851,This XML carries HTML table information:,"['xml', 'carry', 'html', 'table', 'information']"
2852,This XML carries information about a table i.e. a piece of furniture:,"['xml', 'carry', 'information', 'table', 'i.e.', 'piece', 'furniture']"
2853,"If these XML fragments were added together, there would be a name conflict. Both contain a <table>...</table> element, but the elements have different content and meaning.","['xml', 'fragment', 'add', 'conflict', 'contain', 'table>', 'element', 'element', 'different', 'content', 'meaning']"
2854,An XML parser will not know how to handle these differences.,"['xml', 'parser', 'know', 'handle', 'difference']"
2855,Name conflicts in XML can easily be avoided using a name prefix.,"['conflict', 'xml', 'easily', 'avoid', 'prefix']"
2856,"The following XML distinguishes between information about the HTML table and furniture by prefixing ""h"" and ""f"" at the beginning of the elements.","['following', 'xml', 'distinguishe', 'information', 'html', 'table', 'furniture', 'prefix', 'beginning', 'element']"
2857,A name in a namespace consists of a namespace name and a local name.56 The namespace name is usually applied as a prefix to the local name.,"['namespace', 'consist', 'namespace', 'local', 'name', 'namespace', 'usually', 'apply', 'prefix', 'local']"
2858,"When local names are used by themselves, name resolution is used to decide which if any particular name is alluded to by some particular local name.","['local', 'name', 'resolution', 'decide', 'particular', 'allude', 'particular', 'local']"
2859,"Delegation of responsibilities between parties is important in real-world applications, such as the structure of the World Wide Web. Namespaces allow delegation of identifier assignment to multiple name issuing organisations whilst retaining global uniqueness.8 A central Registration authority registers the assigned namespace names allocated. Each namespace name is allocated to an organisation which is subsequently responsible for the assignment of names in their allocated namespace. This organisation may be a name issuing organisation that assign the names themselves, or another Registration authority which further delegates parts of their namespace to different organisations.","['delegation', 'responsibility', 'party', 'important', 'real', 'world', 'application', 'structure', 'world', 'wide', 'web', 'namespace', 'allow', 'delegation', 'identifier', 'assignment', 'multiple', 'issue', 'organisation', 'whilst', 'retain', 'global', 'uniqueness', 'central', 'registration', 'authority', 'register', 'assign', 'namespace', 'name', 'allocate', 'namespace', 'allocate', 'organisation', 'subsequently', 'responsible', 'assignment', 'name', 'allocate', 'namespace', 'organisation', 'issue', 'organisation', 'assign', 'name', 'registration', 'authority', 'delegate', 'part', 'namespace', 'different', 'organisation']"
2860,A naming scheme that allows subdelegation of namespaces to third parties is a hierarchical namespace.,"['naming', 'scheme', 'allow', 'subdelegation', 'namespace', 'party', 'hierarchical', 'namespace']"
2861,A hierarchy is recursive if the syntax for the namespace names is the same for each subdelegation. An example of a recursive hierarchy is the Domain name system.,"['hierarchy', 'recursive', 'syntax', 'namespace', 'name', 'subdelegation', 'example', 'recursive', 'hierarchy', 'domain', 'system']"
2862,An example of a non-recursive hierarchy are Uniform Resource Name representing an Internet Assigned Numbers Authority IANA number.,"['example', 'non', 'recursive', 'hierarchy', 'uniform', 'resource', 'represent', 'internet', 'assigned', 'numbers', 'authority', 'iana', 'number']"
2863,"A namespace name may provide context scope in computer science to a name, and the terms are sometimes used interchangeably. However, the context of a name may also be provided by other factors, such as the location where it occurs or the syntax of the name.","['namespace', 'provide', 'context', 'scope', 'computer', 'science', 'term', 'interchangeably', 'context', 'provide', 'factor', 'location', 'occur', 'syntax']"
2864,"For many programming languages, namespace is a context for their identifiers. In an operating system, an example of namespace is a directory. Each name in a directory uniquely identifies one file or subdirectory.9","['programming', 'language', 'namespace', 'context', 'identifier', 'operating', 'system', 'example', 'namespace', 'directory', 'directory', 'uniquely', 'identify', 'file', 'subdirectory']"
2865,"As a rule, names in a namespace cannot have more than one meaning; that is, different meanings cannot share the same name in the same namespace. A namespace is also called a context, because the same name in different namespaces can have different meanings, each one appropriate for its namespace.","['rule', 'name', 'namespace', 'meaning', 'different', 'meaning', 'share', 'namespace', 'namespace', 'call', 'context', 'different', 'namespace', 'different', 'meaning', 'appropriate', 'namespace']"
2866,Following are other characteristics of namespaces:,"['follow', 'characteristic', 'namespace']"
2867,"As well as its abstract language technical usage as described above, some languages have a specific keyword used for explicit namespace control, amongst other uses. Below is an example of a namespace in C++:","['abstract', 'language', 'technical', 'usage', 'describe', 'language', 'specific', 'keyword', 'explicit', 'namespace', 'control', 'use', 'example', 'namespace', 'c++']"
2868,"A namespace in computer science sometimes also called a name scope is an abstract container or environment created to hold a logical grouping of unique identifiers or symbols i.e. names. An identifier defined in a namespace is associated only with that namespace. The same identifier can be independently defined in multiple namespaces. That is, an identifier defined in one namespace may or may not have the same meaning as the same identifier defined in another namespace. Languages that support namespaces specify the rules that determine to which namespace an identifier not its definition belongs.10","['namespace', 'computer', 'science', 'call', 'scope', 'abstract', 'container', 'environment', 'create', 'hold', 'logical', 'grouping', 'unique', 'identifier', 'symbol', 'i.e.', 'name', 'identifier', 'define', 'namespace', 'associate', 'namespace', 'identifier', 'independently', 'define', 'multiple', 'namespace', 'identifier', 'define', 'namespace', 'meaning', 'identifier', 'define', 'namespace', 'language', 'support', 'namespace', 'specify', 'rule', 'determine', 'namespace', 'identifier', 'definition', 'belongs']"
2869,"This concept can be illustrated with an analogy. Imagine that two companies, X and Y, each assign ID numbers to their employees. X should not have two employees with the same ID number, and likewise for Y; but it is not a problem for the same ID number to be used at both companies. For example, if Bill works for company X and Jane works for company Y, then it is not a problem for each of them to be employee #123. In this analogy, the ID number is the identifier, and the company serves as the namespace. It does not cause problems for the same identifier to identify a different person in each namespace.","['concept', 'illustrate', 'analogy', 'imagine', 'company', 'assign', 'number', 'employee', 'employee', 'number', 'likewise', 'problem', 'number', 'company', 'example', 'bill', 'work', 'company', 'jane', 'work', 'company', 'problem', 'employee', '123', 'analogy', 'number', 'identifier', 'company', 'serve', 'namespace', 'cause', 'problem', 'identifier', 'identify', 'different', 'person', 'namespace']"
2870,"In large computer programs or documents it is common to have hundreds or thousands of identifiers. Namespaces or a similar technique, see Emulating namespaces provide a mechanism for hiding local identifiers. They provide a means of grouping logically related identifiers into corresponding namespaces, thereby making the system more modular.","['large', 'computer', 'program', 'document', 'common', 'hundred', 'thousand', 'identifier', 'namespace', 'similar', 'technique', 'emulating', 'namespace', 'provide', 'mechanism', 'hide', 'local', 'identifier', 'provide', 'means', 'group', 'logically', 'relate', 'identifier', 'corresponding', 'namespace', 'make', 'system', 'modular']"
2871,"Data storage devices and many modern programming languages support namespaces. Storage devices use directories or folders as namespaces. This allows two files with the same name to be stored on the device so long as they are stored in different directories. In some programming languages e.g. C++, Python, the identifiers naming namespaces are themselves associated with an enclosing namespace. Thus, in these languages namespaces can nest, forming a namespace tree. At the root of this tree is the unnamed global namespace.","['datum', 'storage', 'device', 'modern', 'programming', 'language', 'support', 'namespace', 'storage', 'device', 'use', 'directory', 'folder', 'namespace', 'allow', 'file', 'store', 'device', 'long', 'store', 'different', 'directory', 'programming', 'language', 'e.g.', 'c++', 'python', 'identifier', 'name', 'namespace', 'associate', 'enclosing', 'namespace', 'language', 'namespace', 'nest', 'form', 'namespace', 'tree', 'root', 'tree', 'unnamed', 'global', 'namespace']"
2872,It is possible to use anonymous structs as namespaces in C since C99.,"['possible', 'use', 'anonymous', 'struct', 'namespace', 'c99']"
2873,"In C++, a namespace is defined with a namespace block.11","['c++', 'namespace', 'define', 'namespace', 'block']"
2874,"Within this block, identifiers can be used exactly as they are declared. Outside of this block, the namespace specifier must be prefixed. For example, outside of namespace abc, bar must be written abc::bar to be accessed. C++ includes another construct that makes this verbosity unnecessary. By adding the line","['block', 'identifier', 'exactly', 'declare', 'outside', 'block', 'namespace', 'specifier', 'prefix', 'example', 'outside', 'namespace', 'abc', 'bar', 'write', 'abc::bar', 'access', 'c++', 'include', 'construct', 'make', 'verbosity', 'unnecessary', 'add', 'line']"
2875,"to a piece of code, the prefix abc:: is no longer needed.","['piece', 'code', 'prefix', 'abc', 'long', 'need']"
2876,Identifiers that are not explicitly declared within a namespace are considered to be in the global namespace.,"['identifier', 'explicitly', 'declare', 'namespace', 'consider', 'global', 'namespace']"
2877,"These identifiers can be used exactly as they are declared, or, since the global namespace is unnamed, the namespace specifier :: can be prefixed. For example, foo can also be written ::foo.","['identifier', 'exactly', 'declare', 'global', 'namespace', 'unnamed', 'namespace', 'specifier', 'prefix', 'example', 'foo', 'write', 'foo']"
2878,"Namespace resolution in C++ is hierarchical. This means that within the hypothetical namespace food::soup, the identifier chicken refers to food::soup::chicken. If food::soup::chicken doesn't exist, it then refers to food::chicken. If neither food::soup::chicken nor food::chicken exist, chicken refers to ::chicken, an identifier in the global namespace.","['namespace', 'resolution', 'c++', 'hierarchical', 'mean', 'hypothetical', 'namespace', 'food::soup', 'identifi', 'chicken', 'refer', 'food::soup::chicken', 'food::soup::chicken', 'exist', 'refer', 'food::chicken', 'food::soup::chicken', 'food::chicken', 'exist', 'chicken', 'refer', 'chicken', 'identifier', 'global', 'namespace']"
2879,"Namespaces in C++ are most often used to avoid naming collisions. Although namespaces are used extensively in recent C++ code, most older code does not use this facility because it did not exist in early versions of the language. For example, the entire C++ Standard Library is defined within namespace std, but before standardization many components were originally in the global namespace. A programmer can insert the using directive to bypass namespace resolution requirements and obtain backwards compatibility with older code that expects all identifiers to be in the global namespace. However the use of the using directive for reasons other than backwards compatibility e.g., convenience is considered to be against good code practices.","['namespace', 'c++', 'avoid', 'name', 'collision', 'namespace', 'extensively', 'recent', 'c++', 'code', 'old', 'code', 'use', 'facility', 'exist', 'early', 'version', 'language', 'example', 'entire', 'c++', 'standard', 'library', 'define', 'namespace', 'std', 'standardization', 'component', 'originally', 'global', 'namespace', 'programmer', 'insert', 'directive', 'bypass', 'namespace', 'resolution', 'requirement', 'obtain', 'backwards', 'compatibility', 'old', 'code', 'expect', 'identifier', 'global', 'namespace', 'use', 'directive', 'reason', 'backwards', 'compatibility', 'e.g.', 'convenience', 'consider', 'good', 'code', 'practice']"
2880,"In Java, the idea of a namespace is embodied in Java packages. All code belongs to a package, although that package need not be explicitly named. Code from other packages is accessed by prefixing the package name before the appropriate identifier, for example class String in package java.lang can be referred to as java.lang.String this is known as the fully qualified class name. Like C++, Java offers a construct that makes it unnecessary to type the package name import. However, certain features such as reflection require the programmer to use the fully qualified name.","['java', 'idea', 'namespace', 'embody', 'java', 'package', 'code', 'belong', 'package', 'package', 'need', 'explicitly', 'name', 'code', 'package', 'access', 'prefix', 'package', 'appropriate', 'identifier', 'example', 'class', 'string', 'package', 'java.lang', 'refer', 'java.lang', 'string', 'know', 'fully', 'qualified', 'class', 'like', 'c++', 'java', 'offer', 'construct', 'make', 'unnecessary', 'type', 'package', 'import', 'certain', 'feature', 'reflection', 'require', 'programmer', 'use', 'fully', 'qualified']"
2881,"Unlike C++, namespaces in Java are not hierarchical as far as the syntax of the language is concerned. However, packages are named in a hierarchical manner. For example, all packages beginning with java are a part of the Java platform—the package java.lang contains classes core to the language, and java.lang.reflect contains core classes specifically relating to reflection.","['unlike', 'c++', 'namespace', 'java', 'hierarchical', 'far', 'syntax', 'language', 'concern', 'package', 'name', 'hierarchical', 'manner', 'example', 'package', 'begin', 'java', 'java', 'platform', 'package', 'java.lang', 'contain', 'class', 'core', 'language', 'java.lang.reflect', 'contain', 'core', 'class', 'specifically', 'relate', 'reflection']"
2882,"In Java and Ada, C#, and others, namespaces/packages express semantic categories of code. For example, in C#, namespace System contains code provided by the system the .NET Framework. How specific these categories are and how deep the hierarchies go differ from language to language.","['java', 'ada', 'namespace', 'package', 'express', 'semantic', 'category', 'code', 'example', 'namespace', 'system', 'contain', 'code', 'provide', 'system', '.net', 'framework', 'specific', 'category', 'deep', 'hierarchy', 'differ', 'language', 'language']"
2883,"Function and class scopes can be viewed as implicit namespaces that are inextricably linked with visibility, accessibility, and object lifetime.","['function', 'class', 'scope', 'view', 'implicit', 'namespace', 'inextricably', 'link', 'visibility', 'accessibility', 'object', 'lifetime']"
2884,"Namespaces are heavily used in C# language. All .NET Framework classes are organized in namespaces, to be used more clearly and to avoid chaos. Furthermore, custom namespaces are extensively used by programmers, both to organize their work and to avoid naming collisions. When referencing a class, one should specify either its fully qualified name, which means namespace followed by the class name,","['namespace', 'heavily', 'language', '.net', 'framework', 'class', 'organize', 'namespace', 'clearly', 'avoid', 'chaos', 'furthermore', 'custom', 'namespace', 'extensively', 'programmer', 'organize', 'work', 'avoid', 'name', 'collision', 'reference', 'class', 'specify', 'fully', 'qualified', 'mean', 'namespace', 'follow', 'class']"
2885,"or add a using statement. This, eliminates the need to mention the complete name of all classes in that namespace.","['add', 'statement', 'eliminate', 'need', 'mention', 'complete', 'class', 'namespace']"
2886,"In the above examples, System is a namespace, and Console and Convert are classes defined within System.","['example', 'system', 'namespace', 'console', 'convert', 'class', 'define', 'system']"
2887,"In Python, namespaces are defined by the individual modules, and since modules can be contained in hierarchical packages, then namespaces are hierarchical too.1213 In general when a module is imported then the names defined in the module are defined via that module's namespace, and are accessed in from the calling modules by using the fully qualified name.","['python', 'namespace', 'define', 'individual', 'module', 'module', 'contain', 'hierarchical', 'package', 'namespace', 'hierarchical', 'too', 'general', 'module', 'import', 'name', 'define', 'module', 'define', 'module', 'namespace', 'access', 'call', 'module', 'fully', 'qualified']"
2888,"The from ... import ... statement can be used to insert the relevant names directly into the calling module's namespace, and those names can be accessed from the calling module without the qualified name:","['import', 'statement', 'insert', 'relevant', 'name', 'directly', 'call', 'module', 'namespace', 'name', 'access', 'call', 'module', 'qualified']"
2889,Since this directly imports names without qualification it can overwrite existing names with no warnings.,"['directly', 'import', 'name', 'qualification', 'overwrite', 'exist', 'name', 'warning']"
2890,"A special form of the statement is from ... import * which imports all names defined in the named package directly in the calling module's namespace. Use of this form of import, although supported within the language, is generally discouraged as it pollutes the namespace of the calling module and will cause already defined names to be overwritten in the case of name clashes.14","['special', 'form', 'statement', 'import', 'import', 'name', 'define', 'name', 'package', 'directly', 'call', 'module', 'namespace', 'use', 'form', 'import', 'support', 'language', 'generally', 'discourage', 'pollute', 'namespace', 'call', 'module', 'cause', 'define', 'name', 'overwrite', 'case', 'clashes']"
2891,Python also supports import x as y as a way of providing an alias or alternative name for use by the calling module:,"['python', 'support', 'import', 'way', 'provide', 'alias', 'alternative', 'use', 'calling', 'module']"
2892,"In XML, the XML namespace specification enables the names of elements and attributes in an XML document to be unique, similar to the role of namespaces in programming languages. Using XML namespaces, XML documents may contain element or attribute names from more than one XML vocabulary.","['xml', 'xml', 'namespace', 'specification', 'enable', 'name', 'element', 'attribute', 'xml', 'document', 'unique', 'similar', 'role', 'namespace', 'programming', 'language', 'xml', 'namespace', 'xml', 'document', 'contain', 'element', 'attribute', 'name', 'xml', 'vocabulary']"
2893,"Namespaces were introduced into PHP from version 5.3 onwards. Naming collision of classes, functions and variables can be avoided. In PHP, a namespace is defined with a namespace block.","['namespace', 'introduce', 'php', 'version', '5', 'onwards', 'name', 'collision', 'class', 'function', 'variable', 'avoid', 'php', 'namespace', 'define', 'namespace', 'block']"
2894,We can reference a PHP namespace with the following different ways:,"['reference', 'php', 'namespace', 'follow', 'different', 'way']"
2895,"In programming languages lacking language support for namespaces, namespaces can be emulated to some extent by using an identifier naming convention. For example, C libraries such as libpng often use a fixed prefix for all functions and variables that are part of their exposed interface. Libpng exposes identifiers such as:","['programming', 'language', 'lack', 'language', 'support', 'namespace', 'namespace', 'emulate', 'extent', 'identifier', 'name', 'convention', 'example', 'librarie', 'libpng', 'use', 'fix', 'prefix', 'function', 'variable', 'expose', 'interface', 'libpng', 'expose', 'identifier']"
2896,"This naming convention provides reasonable assurance that the identifiers are unique and can therefore be used in larger programs without naming collisions.15 Likewise, many packages originally written in Fortran e.g., BLAS, LAPACK reserve the first few letters of a function's name to indicate which group it belongs to.","['name', 'convention', 'provide', 'reasonable', 'assurance', 'identifier', 'unique', 'large', 'program', 'name', 'collisions', 'likewise', 'package', 'originally', 'write', 'fortran', 'e.g.', 'blas', 'lapack', 'reserve', 'letter', 'function', 'indicate', 'group', 'belong']"
2897,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2898,"In software design, the Java Native Interface JNI is a foreign function interface programming framework that enables Java code running in a Java virtual machine JVM to call and be called by1 native applications programs specific to a hardware and operating system platform and libraries written in other languages such as C, C++ and assembly.","['software', 'design', 'java', 'native', 'interface', 'jni', 'foreign', 'function', 'interface', 'programming', 'framework', 'enable', 'java', 'code', 'run', 'java', 'virtual', 'machine', 'jvm', 'call', 'by1', 'native', 'application', 'program', 'specific', 'hardware', 'operating', 'system', 'platform', 'library', 'write', 'language', 'c++', 'assembly']"
2899,"JNI enables programmers to write native methods to handle situations when an application cannot be written entirely in the Java programming language, e.g. when the standard Java class library does not support the platform-specific features or program library. It is also used to modify an existing application written in another programming language to be accessible to Java applications. Many of the standard library classes depend on JNI to provide functionality to the developer and the user, e.g. file I/O and sound capabilities. Including performance- and platform-sensitive API implementations in the standard library allows all Java applications to access this functionality in a safe and platform-independent manner.","['jni', 'enable', 'programmer', 'write', 'native', 'method', 'handle', 'situation', 'application', 'write', 'entirely', 'java', 'programming', 'language', 'e.g.', 'standard', 'java', 'class', 'library', 'support', 'platform', 'specific', 'feature', 'program', 'library', 'modify', 'exist', 'application', 'write', 'programming', 'language', 'accessible', 'java', 'application', 'standard', 'library', 'class', 'depend', 'jni', 'provide', 'functionality', 'developer', 'user', 'e.g.', 'file', 'sound', 'capability', 'include', 'performance-', 'platform', 'sensitive', 'api', 'implementation', 'standard', 'library', 'allow', 'java', 'application', 'access', 'functionality', 'safe', 'platform', 'independent', 'manner']"
2900,The JNI framework lets a native method use Java objects in the same way that Java code uses these objects. A native method can create Java objects and then inspect and use these objects to perform its tasks. A native method can also inspect and use objects created by Java application code.,"['jni', 'framework', 'let', 'native', 'method', 'use', 'java', 'object', 'way', 'java', 'code', 'use', 'object', 'native', 'method', 'create', 'java', 'object', 'inspect', 'use', 'object', 'perform', 'task', 'native', 'method', 'inspect', 'use', 'object', 'create', 'java', 'application', 'code']"
2901,Only applications and signed applets can invoke JNI.,"['application', 'sign', 'applet', 'invoke', 'jni']"
2902,An application that relies on JNI loses the platform portability Java offers a partial workaround is to write a separate implementation of JNI code for each platform and have Java detect the operating system and load the correct one at runtime.,"['application', 'rely', 'jni', 'lose', 'platform', 'portability', 'java', 'offer', 'partial', 'workaround', 'write', 'separate', 'implementation', 'jni', 'code', 'platform', 'java', 'detect', 'operating', 'system', 'load', 'correct', 'runtime']"
2903,"Not only can native code interface with Java, it can also draw on a Java Canvas, which is possible with the Java AWT Native Interface. The process is almost the same, with just a few changes. The Java AWT Native Interface is only available since J2SE 1.3.","['native', 'code', 'interface', 'java', 'draw', 'java', 'canvas', 'possible', 'java', 'awt', 'native', 'interface', 'process', 'change', 'java', 'awt', 'native', 'interface', 'available', 'j2se', '1']"
2904,"JNI also allows direct access to assembly code, without even going through a C bridge.2 Accessing Java applications from assembly is possible in the same way.3","['jni', 'allow', 'direct', 'access', 'assembly', 'code', 'go', 'bridge', 'accessing', 'java', 'application', 'assembly', 'possible', 'way']"
2905,"In the JNI framework, native functions are implemented in separate .c or .cpp files. C++ provides a slightly simpler interface with JNI. When the JVM invokes the function, it passes a JNIEnv pointer, a jobject pointer, and any Java arguments declared by the Java method. For example, the following converts a Java string to a native string:","['jni', 'framework', 'native', 'function', 'implement', 'separate', '.cpp', 'file', 'c++', 'provide', 'slightly', 'simple', 'interface', 'jni', 'jvm', 'invoke', 'function', 'pass', 'jnienv', 'pointer', 'jobject', 'pointer', 'java', 'argument', 'declare', 'java', 'method', 'example', 'follow', 'convert', 'java', 'string', 'native', 'string']"
2906,"The env pointer is a structure that contains the interface to the JVM. It includes all of the functions necessary to interact with the JVM and to work with Java objects. Example JNI functions are converting native arrays to/from Java arrays, converting native strings to/from Java strings, instantiating objects, throwing exceptions, etc. Basically, anything that Java code can do can be done using JNIEnv, albeit with considerably less ease.","['env', 'pointer', 'structure', 'contain', 'interface', 'jvm', 'include', 'function', 'necessary', 'interact', 'jvm', 'work', 'java', 'object', 'example', 'jni', 'function', 'convert', 'native', 'array', 'java', 'array', 'convert', 'native', 'string', 'java', 'string', 'instantiate', 'object', 'throw', 'exception', 'etc', 'basically', 'java', 'code', 'jnienv', 'albeit', 'considerably', 'ease']"
2907,The argument obj is a reference to the Java object inside which this native method has been declared.,"['argument', 'obj', 'reference', 'java', 'object', 'inside', 'native', 'method', 'declare']"
2908,"Native data types can be mapped to/from Java data types. For compound types such as objects, arrays and strings the native code must explicitly convert the data by calling methods in the JNIEnv.","['native', 'datum', 'type', 'map', 'java', 'datum', 'type', 'compound', 'type', 'object', 'array', 'string', 'native', 'code', 'explicitly', 'convert', 'datum', 'call', 'method', 'jnienv']"
2909,"A JNI environment pointer .mw-parser-output .monospacedfont-family:monospace,monospaceJNIEnv* is passed as an argument for each native function mapped to a Java method, allowing for interaction with the JNI environment within the native method. This JNI interface pointer can be stored, but remains valid only in the current thread. Other threads must first call AttachCurrentThread to attach themselves to the VM and obtain a JNI interface pointer. Once attached, a native thread works like a regular Java thread running within a native method. The native thread remains attached to the VM until it calls DetachCurrentThread to detach itself.4","['jni', 'environment', 'pointer', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacejnienv', 'pass', 'argument', 'native', 'function', 'map', 'java', 'method', 'allow', 'interaction', 'jni', 'environment', 'native', 'method', 'jni', 'interface', 'pointer', 'store', 'remain', 'valid', 'current', 'thread', 'thread', 'attachcurrentthread', 'attach', 'obtain', 'jni', 'interface', 'pointer', 'attach', 'native', 'thread', 'work', 'like', 'regular', 'java', 'thread', 'run', 'native', 'method', 'native', 'thread', 'remain', 'attach', 'call', 'detachcurrentthread', 'detach', 'itself']"
2910,"The JNI framework does not provide any automatic garbage collection for non-JVM memory resources allocated by code executing on the native side. Consequently, native side code such as assembly language assumes the responsibility for explicitly releasing any such memory resources that the native code acquires.","['jni', 'framework', 'provide', 'automatic', 'garbage', 'collection', 'non', 'jvm', 'memory', 'resource', 'allocate', 'code', 'executing', 'native', 'consequently', 'native', 'code', 'assembly', 'language', 'assume', 'responsibility', 'explicitly', 'release', 'memory', 'resource', 'native', 'code', 'acquire']"
2911,"On Linux and Solaris platforms, if the native code registers itself as a signal handler, it could intercept signals intended for the JVM. A chain of responsibility can be used to allow native code to better inter-operate with the JVM. On Windows platforms, Structured Exception Handling SEH may be employed to wrap native code in SEH try/catch blocks so as to capture machine CPU/FPU generated software interrupts such as NULL pointer access violations and divide-by-zero operations, and to handle these situations before the interrupt is propagated back up into the JVM i.e. Java side code, in all likelihood resulting in an unhandled exception.original research?","['linux', 'solaris', 'platform', 'native', 'code', 'register', 'signal', 'handler', 'intercept', 'signal', 'intend', 'jvm', 'chain', 'responsibility', 'allow', 'native', 'code', 'well', 'inter', 'operate', 'jvm', 'windows', 'platform', 'structured', 'exception', 'handle', 'seh', 'employ', 'wrap', 'native', 'code', 'seh', 'try', 'catch', 'block', 'capture', 'machine', 'cpu', 'fpu', 'generate', 'software', 'interrupt', 'null', 'pointer', 'access', 'violation', 'divide', 'zero', 'operation', 'handle', 'situation', 'interrupt', 'propagate', 'jvm', 'i.e.', 'java', 'code', 'likelihood', 'result', 'unhandle', 'exception.original', 'research']"
2912,"The encoding used for the NewStringUTF, GetStringUTFLength, GetStringUTFChars, ReleaseStringUTFChars and GetStringUTFRegion functions is ""modified UTF-8"",5 which is not valid UTF-8 for all inputs, but a different encoding really. The null character U+0000 and codepoints not on the Basic Multilingual Plane greater than or equal to U+10000, i.e. those represented as surrogate pairs in UTF-16 are encoded differently in modified UTF-8. Many programs actually use these functions incorrectly and treat the UTF-8 strings returned or passed into the functions as standard UTF-8 strings instead of modified UTF-8 strings. Programs should use the NewString, GetStringLength, GetStringChars, ReleaseStringChars, GetStringRegion, GetStringCritical and ReleaseStringCritical functions, which use UTF-16LE encoding on little-endian architectures and UTF-16BE on big-endian architectures, and then use a UTF-16 to UTF-8 conversion routine.original research?","['encoding', 'newstringutf', 'getstringutflength', 'getstringutfchar', 'releasestringutfchar', 'getstringutfregion', 'function', 'modify', 'utf-8', 'valid', 'utf-8', 'input', 'different', 'encoding', 'null', 'character', 'u+0000', 'codepoint', 'basic', 'multilingual', 'plane', 'great', 'equal', 'u+10000', 'i.e.', 'represent', 'surrogate', 'pair', 'utf-16', 'encode', 'differently', 'modify', 'utf-8', 'program', 'actually', 'use', 'function', 'incorrectly', 'treat', 'utf-8', 'string', 'return', 'pass', 'function', 'standard', 'utf-8', 'string', 'instead', 'modify', 'utf-8', 'string', 'program', 'use', 'newstring', 'getstringlength', 'getstringchar', 'releasestringchars', 'getstringregion', 'getstringcritical', 'releasestringcritical', 'function', 'use', 'utf-16le', 'encode', 'little', 'endian', 'architecture', 'utf-16be', 'big', 'endian', 'architecture', 'use', 'utf-16', 'utf-8', 'conversion', 'routine.original', 'research']"
2913,The following table shows the mapping of types between Java JNI and native code.,"['following', 'table', 'show', 'mapping', 'type', 'java', 'jni', 'native', 'code']"
2914,"In addition, the signature ""L fully-qualified-class ;"" would mean the class uniquely specified by that name; e.g., the signature ""Ljava/lang/String;"" refers to the class java.lang.String. Also, prefixing to the signature makes the array of that type; for example, I means the int array type. Finally, a void signature uses the V code.","['addition', 'signature', 'fully', 'qualify', 'class', 'mean', 'class', 'uniquely', 'specify', 'e.g.', 'signature', 'ljava', 'lang', 'string', 'refer', 'class', 'java.lang', 'string', 'prefix', 'signature', 'make', 'array', 'type', 'example', 'mean', 'int', 'array', 'type', 'finally', 'void', 'signature', 'use', 'code']"
2915,"These types are interchangeable. One can use jint where you normally use an int, and vice versa, without any typecasting required. However, mapping between Java Strings and arrays to native strings and arrays is different. If a jstring is used where a char * would be, the code could crash the JVM.original research?","['type', 'interchangeable', 'use', 'jint', 'normally', 'use', 'int', 'vice', 'versa', 'typecasting', 'require', 'mapping', 'java', 'strings', 'array', 'native', 'string', 'array', 'different', 'jstring', 'char', 'code', 'crash', 'jvm.original', 'research']"
2916,JNI incurs considerable overhead and performance loss under certain circumstances:6,"['jni', 'incur', 'considerable', 'overhead', 'performance', 'loss', 'certain', 'circumstances']"
2917,"Microsoft's proprietary implementation of a Java Virtual Machine Visual J++ had a similar mechanism for calling native code from Java, called the Raw Native Interface RNI. In addition, it had an easy way to call existing native code that wasn't itself aware of Java, such as but not limited to the Windows API, called J/Direct. However, following the Sun–Microsoft litigation about this implementation, Visual J++ is no longer maintained.","['microsoft', 'proprietary', 'implementation', 'java', 'virtual', 'machine', 'visual', 'j++', 'similar', 'mechanism', 'call', 'native', 'code', 'java', 'call', 'raw', 'native', 'interface', 'rni', 'addition', 'easy', 'way', 'exist', 'native', 'code', 'aware', 'java', 'limit', 'windows', 'api', 'call', 'direct', 'follow', 'sun', 'microsoft', 'litigation', 'implementation', 'visual', 'j++', 'long', 'maintain']"
2918,"RNI was less clumsy to use than JNI, because no bookkeeping with a Java environment pointer was needed. Instead, all Java objects could be accessed directly. To facilitate this, a tool was used that generated header files from Java classes. Similarly, J/Direct was easier to use than using the necessary intermediate native library and JNI.","['rni', 'clumsy', 'use', 'jni', 'bookkeeping', 'java', 'environment', 'pointer', 'need', 'instead', 'java', 'object', 'access', 'directly', 'facilitate', 'tool', 'generate', 'header', 'file', 'java', 'class', 'similarly', 'direct', 'easy', 'use', 'necessary', 'intermediate', 'native', 'library', 'jni']"
2919,Java Native Access JNA is a community-developed library that provides Java programs easy access to native shared libraries without using JNI.,"['java', 'native', 'access', 'jna', 'community', 'develop', 'library', 'provide', 'java', 'program', 'easy', 'access', 'native', 'share', 'library', 'jni']"
2920,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2921,"In object-oriented programming OOP, an inner class or nested class is a class declared entirely within the body of another class or interface. It is distinguished from a subclass.","['object', 'orient', 'programming', 'oop', 'inner', 'class', 'nested', 'class', 'class', 'declare', 'entirely', 'body', 'class', 'interface', 'distinguish', 'subclass']"
2922,"An instance of a normal or top-level class can exist on its own. By contrast, an instance of an inner class cannot be instantiated without being bound to a top-level class.","['instance', 'normal', 'level', 'class', 'exist', 'contrast', 'instance', 'inner', 'class', 'instantiate', 'bind', 'level', 'class']"
2923,"Let us take the abstract notion of a Car with four Wheels. Our Wheels have a specific feature that relies on being part of our Car. This notion does not represent the Wheels as Wheels in a more general form that could be part of any vehicle. Instead, it represents them as specific to a Car. We can model this notion using inner classes as follows:","['let', 'abstract', 'notion', 'car', 'wheel', 'wheel', 'specific', 'feature', 'rely', 'car', 'notion', 'represent', 'wheels', 'wheel', 'general', 'form', 'vehicle', 'instead', 'represent', 'specific', 'car', 'model', 'notion', 'inner', 'class', 'follow']"
2924,"We have the top-level class Car. Instances of class Car are composed of four instances of the class Wheel. This particular implementation of Wheel is specific to a car, so the code does not model the general notion of a wheel that would be better represented as a top-level class. Therefore, it is semantically connected to the class Car and the code of Wheel is in some way coupled to its outer class, being a composition unit of a car. The wheel for a particular car is unique to that car, but for generalization, the wheel is an aggregation unit to the car.","['level', 'class', 'car', 'instance', 'class', 'car', 'compose', 'instance', 'class', 'wheel', 'particular', 'implementation', 'wheel', 'specific', 'car', 'code', 'model', 'general', 'notion', 'wheel', 'well', 'represent', 'level', 'class', 'semantically', 'connect', 'class', 'car', 'code', 'wheel', 'way', 'couple', 'outer', 'class', 'composition', 'unit', 'car', 'wheel', 'particular', 'car', 'unique', 'car', 'generalization', 'wheel', 'aggregation', 'unit', 'car']"
2925,"Inner classes provide a mechanism to accurately model this connection. We can refer to our Wheel class as Car.Wheel, Car being the top-level class and Wheel being the inner class.","['inner', 'class', 'provide', 'mechanism', 'accurately', 'model', 'connection', 'refer', 'wheel', 'class', 'car', 'wheel', 'car', 'level', 'class', 'wheel', 'inner', 'class']"
2926,Inner classes therefore allow for the object orientation of certain parts of the program that would otherwise not be encapsulated into a class.,"['inner', 'class', 'allow', 'object', 'orientation', 'certain', 'part', 'program', 'encapsulate', 'class']"
2927,"Larger segments of code within a class might be better modeled or refactored as a separate top-level class, rather than an inner class. This would make the code more general in its application and therefore more re-usable but potentially might be premature generalization. This may prove more effective, if code has many inner classes with the shared functionality.","['large', 'segment', 'code', 'class', 'well', 'model', 'refactore', 'separate', 'level', 'class', 'inner', 'class', 'code', 'general', 'application', 'usable', 'potentially', 'premature', 'generalization', 'prove', 'effective', 'code', 'inner', 'class', 'share', 'functionality']"
2928,In Java there are four types of nested class:,"['java', 'type', 'nested', 'class']"
2929,"Inner class – The following categories are called inner classes. Each instance of these classes has a reference to an enclosing instance i.e. an instance of the enclosing class, except for local and anonymous classes declared in static context. Hence, they can implicitly refer to instance variables and methods of the enclosing class. The enclosing instance reference can be explicitly obtained via EnclosingClassName.this. Inner classes may not have static variables or methods, except for compile-time constant variables. When they are created, they must have a reference to an instance of the enclosing class; which means they must either be created within an instance method or constructor of the enclosing class, or for member and anonymous classes be created using the syntax enclosingInstance.new InnerClass.1","['inner', 'class', 'follow', 'category', 'call', 'inner', 'class', 'instance', 'class', 'reference', 'enclose', 'instance', 'i.e.', 'instance', 'enclose', 'class', 'local', 'anonymous', 'class', 'declare', 'static', 'context', 'implicitly', 'refer', 'instance', 'variable', 'method', 'enclosing', 'class', 'enclose', 'instance', 'reference', 'explicitly', 'obtain', 'enclosingclassname.this', 'inner', 'class', 'static', 'variable', 'method', 'compile', 'time', 'constant', 'variable', 'create', 'reference', 'instance', 'enclosing', 'class', 'mean', 'create', 'instance', 'method', 'constructor', 'enclosing', 'class', 'member', 'anonymous', 'class', 'create', 'syntax', 'enclosinginstance.new', 'innerclass']"
2930,"Local inner classes are often used in Java to define callbacks for GUI code. Components can then share an object that implements an event handling interface or extends an abstract adapter class, containing the code to be executed when a given event is triggered.","['local', 'inner', 'class', 'java', 'define', 'callback', 'gui', 'code', 'component', 'share', 'object', 'implement', 'event', 'handle', 'interface', 'extend', 'abstract', 'adapter', 'class', 'contain', 'code', 'execute', 'give', 'event', 'trigger']"
2931,Anonymous inner classes are also used where the event handling code is only used by one component and therefore does not need a named reference.,"['anonymous', 'inner', 'class', 'event', 'handle', 'code', 'component', 'need', 'name', 'reference']"
2932,This avoids a large monolithic actionPerformedActionEvent method with multiple if-else branches to identify the source of the event. This type of code is often considered messycitation needed and the inner class variations are considered to be better in all regards.citation needed,"['avoid', 'large', 'monolithic', 'actionperformedactionevent', 'method', 'multiple', 'branch', 'identify', 'source', 'event', 'type', 'code', 'consider', 'messycitation', 'need', 'inner', 'class', 'variation', 'consider', 'well', 'regards.citation', 'need']"
2933,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2934,"In computer science, an object can be a variable, a data structure, a function, or a method. As regions of memory, they contain value and are referenced by identifiers.","['computer', 'science', 'object', 'variable', 'data', 'structure', 'function', 'method', 'region', 'memory', 'contain', 'value', 'reference', 'identifier']"
2935,"In the object-oriented programming paradigm, object can be a combination of variables, functions, and data structures; in particular in class-based variations of the paradigm it refers to a particular instance of a class.","['object', 'orient', 'programming', 'paradigm', 'object', 'combination', 'variable', 'function', 'data', 'structure', 'particular', 'class', 'base', 'variation', 'paradigm', 'refer', 'particular', 'instance', 'class']"
2936,"In the relational model of database management, an object can be a table or column, or an association between data and a database entity such as relating a person's age to a specific person.1","['relational', 'model', 'database', 'management', 'object', 'table', 'column', 'association', 'datum', 'database', 'entity', 'relate', 'person', 'age', 'specific', 'person']"
2937,"An important distinction in programming languages is the difference between an object-oriented language and an object-based language. A language is usually considered object-based if it includes the basic capabilities for an object: identity, properties, and attributes. A language is considered object-oriented if it is object-based and also has the capability of polymorphism, inheritance, encapsulation, and, possibly, composition. Polymorphism refers to the ability to overload the name of a function with multiple behaviors based on which objects are passed to it. Conventional message passing discriminates only on the first object and considers that to be ""sending a message"" to that object. However, some object-oriented programming languages such as Flavors and the Common Lisp Object System CLOS enable discriminating on more than the first parameter of the function.2 Inheritance is the ability to subclass an object class, to create a new class that is a subclass of an existing one and inherits all the data constraints and behaviors of its parents but also adds new and/or changes one or more of them.34","['important', 'distinction', 'programming', 'language', 'difference', 'object', 'orient', 'language', 'object', 'base', 'language', 'language', 'usually', 'consider', 'object', 'base', 'include', 'basic', 'capability', 'object', 'identity', 'property', 'attribute', 'language', 'consider', 'object', 'orient', 'object', 'base', 'capability', 'polymorphism', 'inheritance', 'encapsulation', 'possibly', 'composition', 'polymorphism', 'refer', 'ability', 'overload', 'function', 'multiple', 'behavior', 'base', 'object', 'pass', 'conventional', 'message', 'pass', 'discriminate', 'object', 'consider', 'send', 'message', 'object', 'object', 'orient', 'programming', 'language', 'flavor', 'common', 'lisp', 'object', 'system', 'clos', 'enable', 'discriminate', 'parameter', 'function', 'inheritance', 'ability', 'subclass', 'object', 'class', 'create', 'new', 'class', 'subclass', 'exist', 'inherit', 'datum', 'constraint', 'behavior', 'parent', 'add', 'new', 'change', 'them']"
2938,Object-oriented programming is an approach to designing modular reusable software systems. The object-oriented approach is an evolution of good design practices that go back to the very beginning of computer programming. Object-orientation is simply the logical extension of older techniques such as structured programming and abstract data types. An object is an abstract data type with the addition of polymorphism and inheritance.,"['object', 'orient', 'programming', 'approach', 'design', 'modular', 'reusable', 'software', 'system', 'object', 'orient', 'approach', 'evolution', 'good', 'design', 'practice', 'beginning', 'computer', 'programming', 'object', 'orientation', 'simply', 'logical', 'extension', 'old', 'technique', 'structured', 'programming', 'abstract', 'data', 'type', 'object', 'abstract', 'data', 'type', 'addition', 'polymorphism', 'inheritance']"
2939,"Rather than structure programs as code and data, an object-oriented system integrates the two using the concept of an ""object"". An object has state data and behavior code. Objects can correspond to things found in the real world. So for example, a graphics program will have objects such as circle, square, menu. An online shopping system will have objects such as shopping cart, customer, product. The shopping system will support behaviors such as place order, make payment, and offer discount. The objects are designed as class hierarchies. So for example with the shopping system there might be high level classes such as electronics product, kitchen product, and book. There may be further refinements for example under electronic products: CD Player, DVD player, etc. These classes and subclasses correspond to sets and subsets in mathematical logic.56","['structure', 'program', 'code', 'datum', 'object', 'orient', 'system', 'integrate', 'concept', 'object', 'object', 'state', 'datum', 'behavior', 'code', 'object', 'correspond', 'thing', 'find', 'real', 'world', 'example', 'graphic', 'program', 'object', 'circle', 'square', 'menu', 'online', 'shopping', 'system', 'object', 'shopping', 'cart', 'customer', 'product', 'shopping', 'system', 'support', 'behavior', 'place', 'order', 'payment', 'offer', 'discount', 'object', 'design', 'class', 'hierarchy', 'example', 'shopping', 'system', 'high', 'level', 'class', 'electronic', 'product', 'kitchen', 'product', 'book', 'refinement', 'example', 'electronic', 'product', 'player', 'dvd', 'player', 'etc', 'class', 'subclass', 'correspond', 'set', 'subset', 'mathematical', 'logic']"
2940,An important concept for objects is the design pattern. A design pattern provides a reusable template to address a common problem. The following object descriptions are examples of some of the most common design patterns for objects.7,"['important', 'concept', 'object', 'design', 'pattern', 'design', 'pattern', 'provide', 'reusable', 'template', 'address', 'common', 'problem', 'follow', 'object', 'description', 'example', 'common', 'design', 'pattern', 'objects']"
2941,"The object-oriented approach is not just a programming model. It can be used equally well as an interface definition language for distributed systems. The objects in a distributed computing model tend to be larger grained, longer lasting, and more service-oriented than programming objects.","['object', 'orient', 'approach', 'programming', 'model', 'equally', 'interface', 'definition', 'language', 'distribute', 'system', 'object', 'distribute', 'computing', 'model', 'tend', 'large', 'grain', 'long', 'last', 'service', 'orient', 'programming', 'object']"
2942,"A standard method to package distributed objects is via an Interface Definition Language IDL. An IDL shields the client of all of the details of the distributed server object. Details such as which computer the object resides on, what programming language it uses, what operating system, and other platform-specific issues. The IDL is also usually part of a distributed environment that provides services such as transactions and persistence to all objects in a uniform manner. Two of the most popular standards for distributed objects are the Object Management Group's CORBA standard and Microsoft's DCOM.8","['standard', 'method', 'package', 'distribute', 'object', 'interface', 'definition', 'language', 'idl', 'idl', 'shield', 'client', 'detail', 'distribute', 'server', 'object', 'detail', 'computer', 'object', 'reside', 'programming', 'language', 'use', 'operating', 'system', 'platform', 'specific', 'issue', 'idl', 'usually', 'distribute', 'environment', 'provide', 'service', 'transaction', 'persistence', 'object', 'uniform', 'manner', 'popular', 'standard', 'distribute', 'object', 'object', 'management', 'group', 'corba', 'standard', 'microsoft', 'dcom']"
2943,"In addition to distributed objects, a number of other extensions to the basic concept of an object have been proposed to enable distributed computing:","['addition', 'distribute', 'object', 'number', 'extension', 'basic', 'concept', 'object', 'propose', 'enable', 'distribute', 'computing']"
2944,"Some of these extensions, such as distributed objects and protocol objects, are domain-specific terms for special types of ""ordinary"" objects used in a certain context such as remote method invocation or protocol composition. Others, such as replicated objects and live distributed objects, are more non-standard, in that they abandon the usual case that an object resides in a single location at a time, and apply the concept to groups of entities replicas that might span across multiple locations, might have only weakly consistent state, and whose membership might dynamically change.","['extension', 'distribute', 'object', 'protocol', 'object', 'domain', 'specific', 'term', 'special', 'type', 'ordinary', 'object', 'certain', 'context', 'remote', 'method', 'invocation', 'protocol', 'composition', 'replicate', 'object', 'live', 'distribute', 'object', 'non', 'standard', 'abandon', 'usual', 'case', 'object', 'reside', 'single', 'location', 'time', 'apply', 'concept', 'group', 'entity', 'replica', 'span', 'multiple', 'location', 'weakly', 'consistent', 'state', 'membership', 'dynamically', 'change']"
2945,"The Semantic Web is essentially a distributed-objects framework. Two key technologies in the Semantic Web are the Web Ontology Language OWL and the Resource Description Framework RDF. RDF provides the capability to define basic objects—names, properties, attributes, relations—that are accessible via the Internet. OWL adds a richer object model, based on set theory, that provides additional modeling capabilities such as multiple inheritance.","['semantic', 'web', 'essentially', 'distribute', 'object', 'framework', 'key', 'technology', 'semantic', 'web', 'web', 'ontology', 'language', 'owl', 'resource', 'description', 'framework', 'rdf', 'rdf', 'provide', 'capability', 'define', 'basic', 'object', 'name', 'property', 'attribute', 'relation', 'accessible', 'internet', 'owl', 'add', 'rich', 'object', 'model', 'base', 'set', 'theory', 'provide', 'additional', 'modeling', 'capability', 'multiple', 'inheritance']"
2946,OWL objects are not like standard large-grained distributed objects accessed via an Interface Definition Language. Such an approach would not be appropriate for the Internet because the Internet is constantly evolving and standardization on one set of interfaces is difficult to achieve. OWL objects tend to be similar to the kinds of objects used to define application domain models in programming languages such as Java and C++.,"['owl', 'object', 'like', 'standard', 'large', 'grain', 'distribute', 'object', 'access', 'interface', 'definition', 'language', 'approach', 'appropriate', 'internet', 'internet', 'constantly', 'evolve', 'standardization', 'set', 'interface', 'difficult', 'achieve', 'owl', 'object', 'tend', 'similar', 'kind', 'object', 'define', 'application', 'domain', 'model', 'programming', 'language', 'java', 'c++']"
2947,"However, there are important distinctions between OWL objects and traditional object-oriented programming objects. Traditional objects get compiled into static hierarchies usually with single inheritance, but OWL objects are dynamic. An OWL object can change its structure at run time and can become an instance of new or different classes.","['important', 'distinction', 'owl', 'object', 'traditional', 'object', 'orient', 'programming', 'object', 'traditional', 'object', 'compile', 'static', 'hierarchy', 'usually', 'single', 'inheritance', 'owl', 'object', 'dynamic', 'owl', 'object', 'change', 'structure', 'run', 'time', 'instance', 'new', 'different', 'class']"
2948,"Another critical difference is the way the model treats information that is currently not in the system. Programming objects and most database systems use the ""closed-world assumption"". If a fact is not known to the system that fact is assumed to be false. Semantic Web objects use the open-world assumption, a statement is only considered false if there is actual relevant information that it is false, otherwise it is assumed to be unknown, neither true nor false.","['critical', 'difference', 'way', 'model', 'treat', 'information', 'currently', 'system', 'programming', 'object', 'database', 'system', 'use', 'closed', 'world', 'assumption', 'fact', 'know', 'system', 'fact', 'assume', 'false', 'semantic', 'web', 'object', 'use', 'open', 'world', 'assumption', 'statement', 'consider', 'false', 'actual', 'relevant', 'information', 'false', 'assume', 'unknown', 'true', 'false']"
2949,OWL objects are actually most like objects in artificial intelligence frame languages such as KL-ONE and Loom.,"['owl', 'object', 'actually', 'like', 'object', 'artificial', 'intelligence', 'frame', 'language', 'loom']"
2950,The following table contrasts traditional objects from Object-Oriented programming languages such as Java or C++ with Semantic Web Objects:1011,"['following', 'table', 'contrast', 'traditional', 'object', 'object', 'orient', 'programming', 'language', 'java', 'c++', 'semantic', 'web', 'objects']"
2951,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2952,"In computer science, boxing a.k.a. wrapping is the transformation of placing a primitive type within an object so that the value can be used as a reference. Unboxing is the reverse transformation of extracting the primitive value from its wrapper object. Autoboxing is the term for automatically applying boxing and/or unboxing transformations as needed.","['computer', 'science', 'box', 'a.k.a', 'wrapping', 'transformation', 'place', 'primitive', 'type', 'object', 'value', 'reference', 'unbox', 'reverse', 'transformation', 'extract', 'primitive', 'value', 'wrapper', 'object', 'autoboxe', 'term', 'automatically', 'apply', 'boxing', 'unbox', 'transformation', 'need']"
2953,"Boxing's most prominent use is in Java where there is a distinction between reference and value types for reasons such as runtime efficiency and syntax and semantic issues. In Java, a LinkedList can only store values of type Object. One might desire to have a LinkedList of int, but this is not directly possible. Instead Java defines primitive wrapper classes corresponding to each primitive type: Integer and int, Character and char, Float and float, etc. One can then define a LinkedList using the boxed type Integer and insert int values into the list by boxing them as Integer objects. Using generic parameterized types introduced in J2SE 5.0, this type is represented as LinkedList<Integer>.","['boxing', 'prominent', 'use', 'java', 'distinction', 'reference', 'value', 'type', 'reason', 'runtime', 'efficiency', 'syntax', 'semantic', 'issue', 'java', 'linkedlist', 'store', 'value', 'type', 'object', 'desire', 'linkedlist', 'int', 'directly', 'possible', 'instead', 'java', 'define', 'primitive', 'wrapper', 'class', 'correspond', 'primitive', 'type', 'integer', 'int', 'character', 'char', 'float', 'float', 'etc', 'define', 'linkedlist', 'boxed', 'type', 'integer', 'insert', 'int', 'value', 'list', 'box', 'integer', 'object', 'generic', 'parameterize', 'type', 'introduce', 'j2se', '5', 'type', 'represent', 'linkedlist', 'integer']"
2954,"On the other hand, C# has no primitive wrapper classes, but allows boxing of any value type, returning a generic Object reference. In Objective-C, any primitive value can be prefixed by a @ to make an NSNumber out of it e.g. @123 or @123. This allows for adding them in any of the standard collections, such as an NSArray.","['hand', 'primitive', 'wrapper', 'class', 'allow', 'boxing', 'value', 'type', 'return', 'generic', 'object', 'reference', 'objective', 'primitive', 'value', 'prefix', 'nsnumber', 'e.g.', '@123', '@123', 'allow', 'add', 'standard', 'collection', 'nsarray']"
2955,"Haskell has little or no notion of reference type, but still uses the term ""boxed"" for the runtime system's uniform pointer-to-tagged union representation.1","['haskell', 'little', 'notion', 'reference', 'type', 'use', 'term', 'box', 'runtime', 'system', 'uniform', 'pointer', 'tag', 'union', 'representation']"
2956,"The boxed object is always a copy of the value object, and is usually immutable. Unboxing the object also returns a copy of the stored value. Repeated boxing and unboxing of objects can have a severe performance impact, because boxing dynamically allocates new objects and unboxing if the boxed value is no longer used then makes them eligible for garbage collection. However, modern garbage collectors such as the default Java HotSpot garbage collector can more efficiently collect short-lived objects, so if the boxed objects are short-lived, the performance impact may not be severe.","['boxed', 'object', 'copy', 'value', 'object', 'usually', 'immutable', 'unbox', 'object', 'return', 'copy', 'store', 'value', 'repeat', 'boxing', 'unbox', 'object', 'severe', 'performance', 'impact', 'box', 'dynamically', 'allocate', 'new', 'object', 'unbox', 'boxed', 'value', 'long', 'make', 'eligible', 'garbage', 'collection', 'modern', 'garbage', 'collector', 'default', 'java', 'hotspot', 'garbage', 'collector', 'efficiently', 'collect', 'short', 'live', 'object', 'boxed', 'object', 'short', 'live', 'performance', 'impact', 'severe']"
2957,"In some languages, there is a direct equivalence between an unboxed primitive type and a reference to an immutable, boxed object type. In fact, it is possible to substitute all the primitive types in a program with boxed object types. Whereas assignment from one primitive to another will copy its value, assignment from one reference to a boxed object to another will copy the reference value to refer to the same object as the first reference. However, this will not cause any problems, because the objects are immutable, so there is semantically no real difference between two references to the same object or to different objects unless you look at physical equality. For all operations other than assignment, such as arithmetic, comparison, and logical operators, one can unbox the boxed type, perform the operation, and re-box the result as needed. Thus, it is possible to not store primitive types at all.","['language', 'direct', 'equivalence', 'unboxed', 'primitive', 'type', 'reference', 'immutable', 'boxed', 'object', 'type', 'fact', 'possible', 'substitute', 'primitive', 'type', 'program', 'box', 'object', 'type', 'assignment', 'primitive', 'copy', 'value', 'assignment', 'reference', 'box', 'object', 'copy', 'reference', 'value', 'refer', 'object', 'reference', 'cause', 'problem', 'object', 'immutable', 'semantically', 'real', 'difference', 'reference', 'object', 'different', 'object', 'look', 'physical', 'equality', 'operation', 'assignment', 'arithmetic', 'comparison', 'logical', 'operator', 'unbox', 'boxed', 'type', 'perform', 'operation', 'box', 'result', 'need', 'possible', 'store', 'primitive', 'type']"
2958,Autoboxing is the term for getting a reference type out of a value type just through type conversion either implicit or explicit. The compiler automatically supplies the extra source code that creates the object.,"['autoboxe', 'term', 'get', 'reference', 'type', 'value', 'type', 'type', 'conversion', 'implicit', 'explicit', 'compiler', 'automatically', 'supply', 'extra', 'source', 'code', 'create', 'object']"
2959,"For example, in versions of Java prior to J2SE 5.0, the following code did not compile:","['example', 'version', 'java', 'prior', 'j2se', '5', 'follow', 'code', 'compile']"
2960,"Compilers prior to 5.0 would not accept the last line. Integer are reference objects, on the surface no different from List, Object, and so forth. To convert from an int to an Integer, one had to ""manually"" instantiate the Integer object. As of J2SE 5.0, the compiler will accept the last line, and automatically transform it so that an Integer object is created to store the value 9.2 This means that, from J2SE 5.0 on, something like Integer c = a + b, where a and b are Integer themselves, will compile now - a and b are unboxed, the integer values summed up, and the result is autoboxed into a new Integer, which is finally stored inside variable c. The equality operators cannot be used this way, because the equality operators are already defined for reference types, for equality of the references; to test for equality of the value in a boxed type, one must still manually unbox them and compare the primitives, or use the Objects.equals method.","['compiler', 'prior', '5', 'accept', 'line', 'integer', 'reference', 'object', 'surface', 'different', 'list', 'object', 'forth', 'convert', 'int', 'integer', 'manually', 'instantiate', 'integer', 'object', 'j2se', '5', 'compiler', 'accept', 'line', 'automatically', 'transform', 'integer', 'object', 'create', 'store', 'value', '9', 'mean', 'j2se', '5', 'like', 'integer', 'integer', 'compile', 'unboxed', 'integer', 'value', 'sum', 'result', 'autoboxe', 'new', 'integer', 'finally', 'store', 'inside', 'variable', 'equality', 'operator', 'way', 'equality', 'operator', 'define', 'reference', 'type', 'equality', 'reference', 'test', 'equality', 'value', 'boxed', 'type', 'manually', 'unbox', 'compare', 'primitive', 'use', 'objects.equal', 'method']"
2961,"Another example: J2SE 5.0 allows the programmer to treat a collection such as a LinkedList as if it contained int values instead of Integer objects. This does not contradict what was said above: the collection still only contains references to dynamic objects, and it cannot list primitive types. It cannot be a LinkedList<int>, but it must be a LinkedList<Integer> instead. However, the compiler automatically transforms the code so that the list will ""silently"" receive objects, while the source code only mentions primitive values. For example, the programmer can now write list.add3 and think as if the int 3 were added to the list; but, the compiler will have actually transformed the line into list.addnew Integer3.","['example', 'j2se', '5', 'allow', 'programmer', 'treat', 'collection', 'linkedlist', 'contain', 'int', 'value', 'instead', 'integer', 'object', 'contradict', 'say', 'collection', 'contain', 'reference', 'dynamic', 'object', 'list', 'primitive', 'type', 'linkedlist', 'int', 'linkedlist', 'integer', 'instead', 'compiler', 'automatically', 'transform', 'code', 'list', 'silently', 'receive', 'object', 'source', 'code', 'mention', 'primitive', 'value', 'example', 'programmer', 'write', 'list.add3', 'think', 'int', 'add', 'list', 'compiler', 'actually', 'transform', 'line', 'list.addnew', 'integer3']"
2962,"With automatic unboxing the compiler automatically supplies the extra source code that retrieves the value out of that object, either by invoking some method on that object, or by other means.","['automatic', 'unbox', 'compiler', 'automatically', 'supply', 'extra', 'source', 'code', 'retrieve', 'value', 'object', 'invoke', 'method', 'object', 'mean']"
2963,"For example, in versions of Java prior to J2SE 5.0, the following code did not compile:","['example', 'version', 'java', 'prior', 'j2se', '5', 'follow', 'code', 'compile']"
2964,"C# doesn't support automatic unboxing in the same meaning as Java, because it doesn't have a separate set of primitive types and object types. All types that have both primitive and object version in Java, are automatically implemented by the C# compiler as either primitive value types or object reference types.","['support', 'automatic', 'unboxing', 'meaning', 'java', 'separate', 'set', 'primitive', 'type', 'object', 'type', 'type', 'primitive', 'object', 'version', 'java', 'automatically', 'implement', 'compiler', 'primitive', 'value', 'type', 'object', 'reference', 'type']"
2965,"In both languages, automatic boxing does not downcast automatically, i.e. the following code won't compile:","['language', 'automatic', 'boxing', 'downcast', 'automatically', 'i.e.', 'follow', 'code', 'compile']"
2966,"Modern Object Pascal has yet another way to perform operations on simple types, close to boxing, called type helpers in FreePascal or record helpers in Delphi and FreePascal in Delphi mode. The dialects mentioned are Object Pascal compile-to-native languages, and so miss some of the features that C# and Java can implement. Notably run-time type inference on strongly typed variables. But the feature is related to boxing. It allows the programmer to use constructs like","['modern', 'object', 'pascal', 'way', 'perform', 'operation', 'simple', 'type', 'close', 'boxing', 'call', 'type', 'helper', 'freepascal', 'record', 'helper', 'delphi', 'freepascal', 'delphi', 'mode', 'dialect', 'mention', 'object', 'pascal', 'compile', 'native', 'language', 'miss', 'feature', 'java', 'implement', 'notably', 'run', 'time', 'type', 'inference', 'strongly', 'type', 'variable', 'feature', 'relate', 'box', 'allow', 'programmer', 'use', 'construct', 'like']"
2967,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2968,"OOPSLA Object-Oriented Programming, Systems, Languages & Applications is an annual ACM research conference. OOPSLA mainly takes place in the United States, while the sister conference of OOPSLA, ECOOP, is typically held in Europe. It is operated by the Special Interest Group for Programming Languages SIGPLAN group of the Association for Computing Machinery ACM.","['oopsla', 'object', 'orient', 'programming', 'systems', 'languages', 'applications', 'annual', 'acm', 'research', 'conference', 'oopsla', 'mainly', 'take', 'place', 'united', 'states', 'sister', 'conference', 'oopsla', 'ecoop', 'typically', 'hold', 'europe', 'operate', 'special', 'interest', 'group', 'programming', 'languages', 'sigplan', 'group', 'association', 'computing', 'machinery', 'acm']"
2969,"OOPSLA is an annual conference covering topics related to object-oriented programming systems, languages and applications. Like other conferences, OOPSLA offers various tracks and many simultaneous sessions, and thus has a different meaning to different people. It is an academic conference, and draws doctoral students who present peer-reviewed papers. It also draws a number of non-academic attendees, many of whom present experience reports and conduct panels, workshops and tutorials.","['oopsla', 'annual', 'conference', 'cover', 'topic', 'relate', 'object', 'orient', 'programming', 'system', 'language', 'application', 'like', 'conference', 'oopsla', 'offer', 'track', 'simultaneous', 'session', 'different', 'meaning', 'different', 'people', 'academic', 'conference', 'draw', 'doctoral', 'student', 'present', 'peer', 'review', 'paper', 'draw', 'number', 'non', 'academic', 'attendee', 'present', 'experience', 'report', 'conduct', 'panel', 'workshop', 'tutorial']"
2970,"OOPSLA has been instrumental in helping object-oriented programming develop into a mainstream programming paradigm. It has also helped incubate a number of related topics, including design patterns, refactoring, aspect-oriented programming, model-driven engineering, agile software development, and domain specific languages.","['oopsla', 'instrumental', 'help', 'object', 'orient', 'programming', 'develop', 'mainstream', 'programming', 'paradigm', 'help', 'incubate', 'number', 'related', 'topic', 'include', 'design', 'pattern', 'refactoring', 'aspect', 'orient', 'programming', 'model', 'drive', 'engineering', 'agile', 'software', 'development', 'domain', 'specific', 'language']"
2971,"The first OOPSLA conference was held in Portland, Oregon in 1986. As of 2010, OOPSLA became a part of the SPLASH conference. The website states that ""SPLASH isn't just a new name for our favorite conference—SPLASH has a new charter and mission: To bring together practitioners and researchers who are passionate about software, programming, design, and software engineering to explore the frontiers of software and software practice.""1 SPLASH stands for Systems, Programming, Languages, and Applications: Software for Humanity. OOPSLA will be a premiere research conference for technical papers and presentations within SPLASH. This change was intended to serve as a framework for organizing and streamlining the efforts so that topics that would traditionally be presented at OOPSLA maintain their focus while allowing other conferences within SPLASH to highlight new trends and challenges in the world of software.","['oopsla', 'conference', 'hold', 'portland', 'oregon', '1986', '2010', 'oopsla', 'splash', 'conference', 'website', 'state', 'splash', 'new', 'favorite', 'conference', 'splash', 'new', 'charter', 'mission', 'bring', 'practitioner', 'researcher', 'passionate', 'software', 'programming', 'design', 'software', 'engineering', 'explore', 'frontier', 'software', 'software', 'practice', 'splash', 'stand', 'systems', 'programming', 'languages', 'applications', 'software', 'humanity', 'oopsla', 'premiere', 'research', 'conference', 'technical', 'paper', 'presentation', 'splash', 'change', 'intend', 'serve', 'framework', 'organize', 'streamline', 'effort', 'topic', 'traditionally', 'present', 'oopsla', 'maintain', 'focus', 'allow', 'conference', 'splash', 'highlight', 'new', 'trend', 'challenge', 'world', 'software']"
2972,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2973,"In object-oriented programming, the open–closed principle OCP states ""software entities classes, modules, functions, etc. should be open for extension, but closed for modification"";1 that is, such an entity can allow its behaviour to be extended without modifying its source code.","['object', 'orient', 'programming', 'open', 'closed', 'principle', 'ocp', 'state', 'software', 'entity', 'class', 'module', 'function', 'etc', 'open', 'extension', 'close', 'modification', 'entity', 'allow', 'behaviour', 'extend', 'modify', 'source', 'code']"
2974,"The name open–closed principle has been used in two ways. Both ways use generalizations for instance, inheritance or delegate functions to resolve the apparent dilemma, but the goals, techniques, and results are different.","['open', 'closed', 'principle', 'way', 'way', 'use', 'generalization', 'instance', 'inheritance', 'delegate', 'function', 'resolve', 'apparent', 'dilemma', 'goal', 'technique', 'result', 'different']"
2975,Open–closed principle is one of the five SOLID principles of object-oriented design.,"['open', 'closed', 'principle', 'solid', 'principle', 'object', 'orient', 'design']"
2976,"Bertrand Meyer is generally credited for having originated the term open–closed principle,2 which appeared in his 1988 book Object Oriented Software Construction.1: 23","['bertrand', 'meyer', 'generally', 'credit', 'having', 'originate', 'term', 'open', 'close', 'principle', 'appear', '1988', 'book', 'object', 'oriented', 'software', 'construction']"
2977,"At the time Meyer was writing, adding fields or functions to a library inevitably required changes to any programs depending on that library.citation needed Meyer's proposed solution to this dilemma relied on the notion of object-oriented inheritance specifically implementation inheritance:1: 229","['time', 'meyer', 'write', 'add', 'field', 'function', 'library', 'inevitably', 'require', 'change', 'program', 'depend', 'library.citation', 'need', 'meyer', 'propose', 'solution', 'dilemma', 'rely', 'notion', 'object', 'orient', 'inheritance', 'specifically', 'implementation', 'inheritance', '229']"
2978,"A class is closed, since it may be compiled, stored in a library, baselined, and used by client classes. But it is also open, since any new class may use it as parent, adding new features. When a descendant class is defined, there is no need to change the original or to disturb its clients.","['class', 'close', 'compile', 'store', 'library', 'baseline', 'client', 'class', 'open', 'new', 'class', 'use', 'parent', 'add', 'new', 'feature', 'descendant', 'class', 'define', 'need', 'change', 'original', 'disturb', 'client']"
2979,"During the 1990s, the open–closed principle became popularly redefined to refer to the use of abstracted interfaces, where the implementations can be changed and multiple implementations could be created and polymorphically substituted for each other.","['1990s', 'open', 'closed', 'principle', 'popularly', 'redefine', 'refer', 'use', 'abstracted', 'interface', 'implementation', 'change', 'multiple', 'implementation', 'create', 'polymorphically', 'substitute']"
2980,"In contrast to Meyer's usage, this definition advocates inheritance from abstract base classes. Interface specifications can be reused through inheritance but implementation need not be. The existing interface is closed to modifications and new implementations must, at a minimum, implement that interface.","['contrast', 'meyer', 'usage', 'definition', 'advocate', 'inheritance', 'abstract', 'base', 'class', 'interface', 'specification', 'reuse', 'inheritance', 'implementation', 'need', 'exist', 'interface', 'closed', 'modification', 'new', 'implementation', 'minimum', 'implement', 'interface']"
2981,"Robert C. Martin's 1996 article ""The Open-Closed Principle""2 was one of the seminal writings to take this approach. In 2001 Craig Larman related the open–closed principle to the pattern by Alistair Cockburn called Protected Variations, and to the David Parnas discussion of information hiding.3","['robert', 'martin', '1996', 'article', 'open', 'close', 'principle', 'seminal', 'writing', 'approach', '2001', 'craig', 'larman', 'relate', 'open', 'closed', 'principle', 'pattern', 'alistair', 'cockburn', 'call', 'protected', 'variations', 'david', 'parnas', 'discussion', 'information', 'hiding']"
2982,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
2983,"In mathematics, orthogonality is the generalization of the geometric notion of perpendicularity. By extension, orthogonality is also used to refer to the separation of specific features of a system. The term also has specialized meanings in other fields including art and chemistry.","['mathematic', 'orthogonality', 'generalization', 'geometric', 'notion', 'perpendicularity', 'extension', 'orthogonality', 'refer', 'separation', 'specific', 'feature', 'system', 'term', 'specialized', 'meaning', 'field', 'include', 'art', 'chemistry']"
2984,"The word comes from the Ancient Greek ὀρθός orthós, meaning ""upright"",1 and γωνία gōnía, meaning ""angle"".2","['word', 'come', 'ancient', 'greek', 'ὀρθός', 'orthós', 'mean', 'upright', 'γωνία', 'gōnía', 'mean', 'angle']"
2985,"The Ancient Greek ὀρθογώνιον orthogṓnion and Classical Latin orthogonium originally denoted a rectangle.3 Later, they came to mean a right triangle. In the 12th century, the post-classical Latin word orthogonalis came to mean a right angle or something related to a right angle.4","['ancient', 'greek', 'ὀρθογώνιον', 'orthogṓnion', 'classical', 'latin', 'orthogonium', 'originally', 'denote', 'rectangle', 'later', 'come', 'mean', 'right', 'triangle', '12th', 'century', 'post', 'classical', 'latin', 'word', 'orthogonalis', 'come', 'mean', 'right', 'angle', 'relate', 'right', 'angle']"
2986,"In mathematics, orthogonality is the generalization of the geometric notion of perpendicularity to the linear algebra of bilinear forms.","['mathematic', 'orthogonality', 'generalization', 'geometric', 'notion', 'perpendicularity', 'linear', 'algebra', 'bilinear', 'form']"
2987,"Two elements u and v of a vector space with bilinear form B are orthogonal when Bu, v = 0. Depending on the bilinear form, the vector space may contain nonzero self-orthogonal vectors. In the case of function spaces, families of orthogonal functions are used to form a basis.","['element', 'vector', 'space', 'bilinear', 'form', 'orthogonal', 'depend', 'bilinear', 'form', 'vector', 'space', 'contain', 'nonzero', 'self', 'orthogonal', 'vector', 'case', 'function', 'space', 'family', 'orthogonal', 'function', 'form', 'basis']"
2988,"The concept has been used in the context of orthogonal functions, orthogonal polynomials, and combinatorics.","['concept', 'context', 'orthogonal', 'function', 'orthogonal', 'polynomial', 'combinatoric']"
2989,"In art, the perspective imaginary lines pointing to the vanishing point are referred to as ""orthogonal lines"". The term ""orthogonal line"" often has a quite different meaning in the literature of modern art criticism. Many works by painters such as Piet Mondrian and Burgoyne Diller are noted for their exclusive use of ""orthogonal lines"" — not, however, with reference to perspective, but rather referring to lines that are straight and exclusively horizontal or vertical, forming right angles where they intersect. For example, an essay at the web site of the Thyssen-Bornemisza Museum states that ""Mondrian ... dedicated his entire oeuvre to the investigation of the balance between orthogonal lines and primary colours."" Archived 2009-01-31 at the Wayback Machine","['art', 'perspective', 'imaginary', 'line', 'point', 'vanish', 'point', 'refer', 'orthogonal', 'line', 'term', 'orthogonal', 'line', 'different', 'meaning', 'literature', 'modern', 'art', 'criticism', 'work', 'painter', 'piet', 'mondrian', 'burgoyne', 'diller', 'note', 'exclusive', 'use', 'orthogonal', 'line', 'reference', 'perspective', 'refer', 'line', 'straight', 'exclusively', 'horizontal', 'vertical', 'form', 'right', 'angle', 'intersect', 'example', 'essay', 'web', 'site', 'thyssen', 'bornemisza', 'museum', 'state', 'mondrian', 'dedicate', 'entire', 'oeuvre', 'investigation', 'balance', 'orthogonal', 'line', 'primary', 'colour', 'archive', '2009', 'wayback', 'machine']"
2990,Orthogonality in programming language design is the ability to use various language features in arbitrary combinations with consistent results.6 This usage was introduced by Van Wijngaarden in the design of Algol 68:,"['orthogonality', 'programming', 'language', 'design', 'ability', 'use', 'language', 'feature', 'arbitrary', 'combination', 'consistent', 'results', 'usage', 'introduce', 'van', 'wijngaarden', 'design', 'algol']"
2991,"The number of independent primitive concepts has been minimized in order that the language be easy to describe, to learn, and to implement. On the other hand, these concepts have been applied “orthogonally” in order to maximize the expressive power of the language while trying to avoid deleterious superfluities.7","['number', 'independent', 'primitive', 'concept', 'minimize', 'order', 'language', 'easy', 'describe', 'learn', 'implement', 'hand', 'concept', 'apply', 'orthogonally', 'order', 'maximize', 'expressive', 'power', 'language', 'try', 'avoid', 'deleterious', 'superfluities']"
2992,"Orthogonality is a system design property which guarantees that modifying the technical effect produced by a component of a system neither creates nor propagates side effects to other components of the system. Typically this is achieved through the separation of concerns and encapsulation, and it is essential for feasible and compact designs of complex systems. The emergent behavior of a system consisting of components should be controlled strictly by formal definitions of its logic and not by side effects resulting from poor integration, i.e., non-orthogonal design of modules and interfaces. Orthogonality reduces testing and development time because it is easier to verify designs that neither cause side effects nor depend on them.","['orthogonality', 'system', 'design', 'property', 'guarantee', 'modify', 'technical', 'effect', 'produce', 'component', 'system', 'create', 'propagate', 'effect', 'component', 'system', 'typically', 'achieve', 'separation', 'concern', 'encapsulation', 'essential', 'feasible', 'compact', 'design', 'complex', 'system', 'emergent', 'behavior', 'system', 'consist', 'component', 'control', 'strictly', 'formal', 'definition', 'logic', 'effect', 'result', 'poor', 'integration', 'i.e.', 'non', 'orthogonal', 'design', 'module', 'interface', 'orthogonality', 'reduce', 'testing', 'development', 'time', 'easy', 'verify', 'design', 'cause', 'effect', 'depend']"
2993,"An instruction set is said to be orthogonal if it lacks redundancy i.e., there is only a single instruction that can be used to accomplish a given task8 and is designed such that instructions can use any register in any addressing mode. This terminology results from considering an instruction as a vector whose components are the instruction fields. One field identifies the registers to be operated upon and another specifies the addressing mode. An orthogonal instruction set uniquely encodes all combinations of registers and addressing modes.9","['instruction', 'set', 'say', 'orthogonal', 'lack', 'redundancy', 'i.e.', 'single', 'instruction', 'accomplish', 'give', 'task8', 'design', 'instruction', 'use', 'register', 'address', 'mode', 'terminology', 'result', 'consider', 'instruction', 'vector', 'component', 'instruction', 'field', 'field', 'identify', 'register', 'operate', 'specify', 'address', 'mode', 'orthogonal', 'instruction', 'set', 'uniquely', 'encode', 'combination', 'register', 'address', 'modes']"
2994,"In telecommunications, multiple access schemes are orthogonal when an ideal receiver can completely reject arbitrarily strong unwanted signals from the desired signal using different basis functions. One such scheme is time-division multiple access TDMA, where the orthogonal basis functions are nonoverlapping rectangular pulses ""time slots"".","['telecommunication', 'multiple', 'access', 'scheme', 'orthogonal', 'ideal', 'receiver', 'completely', 'reject', 'arbitrarily', 'strong', 'unwanted', 'signal', 'desire', 'signal', 'different', 'basis', 'function', 'scheme', 'time', 'division', 'multiple', 'access', 'tdma', 'orthogonal', 'basis', 'function', 'nonoverlappe', 'rectangular', 'pulse', 'time', 'slot']"
2995,"Another scheme is orthogonal frequency-division multiplexing OFDM, which refers to the use, by a single transmitter, of a set of frequency multiplexed signals with the exact minimum frequency spacing needed to make them orthogonal so that they do not interfere with each other. Well known examples include a, g, and n versions of 802.11 Wi-Fi; WiMAX; ITU-T G.hn, DVB-T, the terrestrial digital TV broadcast system used in most of the world outside North America; and DMT Discrete Multi Tone, the standard form of ADSL.","['scheme', 'orthogonal', 'frequency', 'division', 'multiplexing', 'ofdm', 'refer', 'use', 'single', 'transmitter', 'set', 'frequency', 'multiplexe', 'signal', 'exact', 'minimum', 'frequency', 'spacing', 'need', 'orthogonal', 'interfere', 'know', 'example', 'include', 'version', '802', 'wimax', 'itu', 'g.hn', 'dvb', 'terrestrial', 'digital', 'broadcast', 'system', 'world', 'outside', 'north', 'america', 'dmt', 'discrete', 'multi', 'tone', 'standard', 'form', 'adsl']"
2996,"In OFDM, the subcarrier frequencies are chosenhow? so that the subcarriers are orthogonal to each other, meaning that crosstalk between the subchannels is eliminated and intercarrier guard bands are not required. This greatly simplifies the design of both the transmitter and the receiver. In conventional FDM, a separate filter for each subchannel is required.","['ofdm', 'subcarri', 'frequency', 'chosenhow', 'subcarrier', 'orthogonal', 'mean', 'crosstalk', 'subchannel', 'eliminate', 'intercarrier', 'guard', 'band', 'require', 'greatly', 'simplify', 'design', 'transmitter', 'receiver', 'conventional', 'fdm', 'separate', 'filter', 'subchannel', 'require']"
2997,"When performing statistical analysis, independent variables that affect a particular dependent variable are said to be orthogonal if they are uncorrelated,10 since the covariance forms an inner product. In this case the same results are obtained for the effect of any of the independent variables upon the dependent variable, regardless of whether one models the effects of the variables individually with simple regression or simultaneously with multiple regression. If correlation is present, the factors are not orthogonal and different results are obtained by the two methods. This usage arises from the fact that if centered by subtracting the expected value the mean, uncorrelated variables are orthogonal in the geometric sense discussed above, both as observed data i.e., vectors and as random variables i.e., density functions. One econometric formalism that is alternative to the maximum likelihood framework, the Generalized Method of Moments, relies on orthogonality conditions. In particular, the Ordinary Least Squares estimator may be easily derived from an orthogonality condition between the explanatory variables and model residuals.","['perform', 'statistical', 'analysis', 'independent', 'variable', 'affect', 'particular', 'dependent', 'variable', 'say', 'orthogonal', 'uncorrelated', 'covariance', 'form', 'inner', 'product', 'case', 'result', 'obtain', 'effect', 'independent', 'variable', 'dependent', 'variable', 'regardless', 'model', 'effect', 'variable', 'individually', 'simple', 'regression', 'simultaneously', 'multiple', 'regression', 'correlation', 'present', 'factor', 'orthogonal', 'different', 'result', 'obtain', 'method', 'usage', 'arise', 'fact', 'center', 'subtract', 'expect', 'value', 'mean', 'uncorrelated', 'variable', 'orthogonal', 'geometric', 'sense', 'discuss', 'observe', 'datum', 'i.e.', 'vector', 'random', 'variable', 'i.e.', 'density', 'function', 'econometric', 'formalism', 'alternative', 'maximum', 'likelihood', 'framework', 'generalized', 'method', 'moments', 'rely', 'orthogonality', 'condition', 'particular', 'ordinary', 'squares', 'estimator', 'easily', 'derive', 'orthogonality', 'condition', 'explanatory', 'variable', 'model', 'residual']"
2998,"In taxonomy, an orthogonal classification is one in which no item is a member of more than one group, that is, the classifications are mutually exclusive.","['taxonomy', 'orthogonal', 'classification', 'item', 'member', 'group', 'classification', 'mutually', 'exclusive']"
2999,"In synthetic organic chemistry orthogonal protection is a strategy allowing the deprotection of functional groups independently of each other. In chemistry and biochemistry, an orthogonal interaction occurs when there are two pairs of substances and each substance can interact with their respective partner, but does not interact with either substance of the other pair. For example, DNA has two orthogonal pairs: cytosine and guanine form a base-pair, and adenine and thymine form another base-pair, but other base-pair combinations are strongly disfavored. As a chemical example, tetrazine reacts with transcyclooctene and azide reacts with cyclooctyne without any cross-reaction, so these are mutually orthogonal reactions, and so, can be performed simultaneously and selectively.11 Bioorthogonal chemistry refers to chemical reactions occurring inside living systems without reacting with naturally present cellular components. In supramolecular chemistry the notion of orthogonality refers to the possibility of two or more supramolecular, often non-covalent, interactions being compatible; reversibly forming without interference from the other.","['synthetic', 'organic', 'chemistry', 'orthogonal', 'protection', 'strategy', 'allow', 'deprotection', 'functional', 'group', 'independently', 'chemistry', 'biochemistry', 'orthogonal', 'interaction', 'occur', 'pair', 'substance', 'substance', 'interact', 'respective', 'partner', 'interact', 'substance', 'pair', 'example', 'dna', 'orthogonal', 'pair', 'cytosine', 'guanine', 'form', 'base', 'pair', 'adenine', 'thymine', 'form', 'base', 'pair', 'base', 'pair', 'combination', 'strongly', 'disfavor', 'chemical', 'example', 'tetrazine', 'react', 'transcyclooctene', 'azide', 'react', 'cyclooctyne', 'cross', 'reaction', 'mutually', 'orthogonal', 'reaction', 'perform', 'simultaneously', 'selectively', 'bioorthogonal', 'chemistry', 'refer', 'chemical', 'reaction', 'occur', 'inside', 'living', 'system', 'react', 'naturally', 'present', 'cellular', 'component', 'supramolecular', 'chemistry', 'notion', 'orthogonality', 'refer', 'possibility', 'supramolecular', 'non', 'covalent', 'interaction', 'compatible', 'reversibly', 'form', 'interference']"
3000,"In analytical chemistry, analyses are ""orthogonal"" if they make a measurement or identification in completely different ways, thus increasing the reliability of the measurement. Orthogonal testing thus can be viewed as ""cross-checking"" of results, and the ""cross"" notion corresponds to the etymologic origin of orthogonality. Orthogonal testing is often required as a part of a new drug application.","['analytical', 'chemistry', 'analysis', 'orthogonal', 'measurement', 'identification', 'completely', 'different', 'way', 'increase', 'reliability', 'measurement', 'orthogonal', 'testing', 'view', 'cross', 'checking', 'result', 'cross', 'notion', 'correspond', 'etymologic', 'origin', 'orthogonality', 'orthogonal', 'testing', 'require', 'new', 'drug', 'application']"
3001,In the field of system reliability orthogonal redundancy is that form of redundancy where the form of backup device or method is completely different from the prone to error device or method. The failure mode of an orthogonally redundant back-up device or method does not intersect with and is completely different from the failure mode of the device or method in need of redundancy to safeguard the total system against catastrophic failure.,"['field', 'system', 'reliability', 'orthogonal', 'redundancy', 'form', 'redundancy', 'form', 'backup', 'device', 'method', 'completely', 'different', 'prone', 'error', 'device', 'method', 'failure', 'mode', 'orthogonally', 'redundant', 'device', 'method', 'intersect', 'completely', 'different', 'failure', 'mode', 'device', 'method', 'need', 'redundancy', 'safeguard', 'total', 'system', 'catastrophic', 'failure']"
3002,"In neuroscience, a sensory map in the brain which has overlapping stimulus coding e.g. location and quality is called an orthogonal map.","['neuroscience', 'sensory', 'map', 'brain', 'overlap', 'stimulus', 'code', 'e.g.', 'location', 'quality', 'call', 'orthogonal', 'map']"
3003,"In board games such as chess which feature a grid of squares, 'orthogonal' is used to mean ""in the same row/'rank' or column/'file'"". This is the counterpart to squares which are ""diagonally adjacent"".12 In the ancient Chinese board game Go a player can capture the stones of an opponent by occupying all orthogonally-adjacent points.","['board', 'game', 'chess', 'feature', 'grid', 'square', 'orthogonal', 'mean', 'counterpart', 'square', 'diagonally', 'adjacent', 'ancient', 'chinese', 'board', 'game', 'player', 'capture', 'stone', 'opponent', 'occupy', 'orthogonally', 'adjacent', 'point']"
3004,"Stereo vinyl records encode both the left and right stereo channels in a single groove. The V-shaped groove in the vinyl has walls that are 90 degrees to each other, with variations in each wall separately encoding one of the two analogue channels that make up the stereo signal. The cartridge senses the motion of the stylus following the groove in two orthogonal directions: 45 degrees from vertical to either side.13 A pure horizontal motion corresponds to a mono signal, equivalent to a stereo signal in which both channels carry identical in-phase signals.","['stereo', 'vinyl', 'record', 'encode', 'left', 'right', 'stereo', 'channel', 'single', 'groove', 'shape', 'groove', 'vinyl', 'wall', 'degree', 'variation', 'wall', 'separately', 'encode', 'analogue', 'channel', 'stereo', 'signal', 'cartridge', 'sense', 'motion', 'stylus', 'follow', 'groove', 'orthogonal', 'direction', 'degree', 'vertical', 'side', 'pure', 'horizontal', 'motion', 'correspond', 'mono', 'signal', 'equivalent', 'stereo', 'signal', 'channel', 'carry', 'identical', 'phase', 'signal']"
3005,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3006,"In computer programming, operator overloading, sometimes termed operator ad hoc polymorphism, is a specific case of polymorphism, where different operators have different implementations depending on their arguments. Operator overloading is generally defined by a programming language, a programmer, or both.","['computer', 'programming', 'operator', 'overloading', 'term', 'operator', 'hoc', 'polymorphism', 'specific', 'case', 'polymorphism', 'different', 'operator', 'different', 'implementation', 'depend', 'argument', 'operator', 'overloading', 'generally', 'define', 'programming', 'language', 'programmer']"
3007,"Operator overloading is syntactic sugar, and is used because it allows programming using notation nearer to the target domain1 and allows user-defined types a similar level of syntactic support as types built into a language. It is common, for example, in scientific computing, where it allows computing representations of mathematical objects to be manipulated with the same syntax as on paper.","['operator', 'overloading', 'syntactic', 'sugar', 'allow', 'programming', 'notation', 'near', 'target', 'domain1', 'allow', 'user', 'define', 'type', 'similar', 'level', 'syntactic', 'support', 'type', 'build', 'language', 'common', 'example', 'scientific', 'computing', 'allow', 'computing', 'representation', 'mathematical', 'object', 'manipulate', 'syntax', 'paper']"
3008,"Operator overloading does not change the expressive power of a language with functions, as it can be emulated using function calls. For example, consider variables a, b and c of some user-defined type, such as matrices:","['operator', 'overloading', 'change', 'expressive', 'power', 'language', 'function', 'emulate', 'function', 'call', 'example', 'consider', 'variable', 'user', 'define', 'type', 'matrix']"
3009,"In a language that supports operator overloading, and with the usual assumption that the '*' operator has higher precedence than the '+' operator, this is a concise way of writing:","['language', 'support', 'operator', 'overloading', 'usual', 'assumption', 'operator', 'high', 'precedence', 'operator', 'concise', 'way', 'writing']"
3010,"However, the former syntax reflects common mathematical usage.","['syntax', 'reflect', 'common', 'mathematical', 'usage']"
3011,"In this case, the addition operator is overloaded to allow addition on a user-defined type Time in C++:","['case', 'addition', 'operator', 'overload', 'allow', 'addition', 'user', 'define', 'type', 'time', 'c++']"
3012,"Addition is a binary operation, which means it has two operands. In C++, the arguments being passed are the operands, and the temp object is the returned value.","['addition', 'binary', 'operation', 'mean', 'operand', 'c++', 'argument', 'pass', 'operand', 'temp', 'object', 'returned', 'value']"
3013,"The operation could also be defined as a class method, replacing lhs by the hidden this argument; However, this forces the left operand to be of type Time:","['operation', 'define', 'class', 'method', 'replace', 'lhs', 'hidden', 'argument', 'force', 'left', 'operand', 'type', 'time']"
3014,Note that a unary operator defined as a class method would receive no apparent argument it only works from this:,"['note', 'unary', 'operator', 'define', 'class', 'method', 'receive', 'apparent', 'argument', 'work']"
3015,The less-than < operator is often overloaded to sort a structure or class:,"['operator', 'overload', 'sort', 'structure', 'class']"
3016,"Like with the previous examples, in the last example operator overloading is done within the class. In C++, after overloading the less-than operator <, standard sorting functions can be used to sort some classes.","['like', 'previous', 'example', 'example', 'operator', 'overloading', 'class', 'c++', 'overload', 'operator', 'standard', 'sort', 'function', 'sort', 'class']"
3017,"Operator overloading has often been criticized2 because it allows programmers to reassign the semantics of operators depending on the types of their operands. For example, the use of the << operator in C++ a << b shifts the bits in the variable a left by b bits if a and b are of an integer type, but if a is an output stream then the above code will attempt to write a b to the stream. Because operator overloading allows the original programmer to change the usual semantics of an operator and to catch any subsequent programmers by surprise, it is considered good practice to use operator overloading with care the creators of Java decided not to use this feature,3 although not necessarily for this reason.","['operator', 'overloading', 'criticized2', 'allow', 'programmer', 'reassign', 'semantic', 'operator', 'depend', 'type', 'operand', 'example', 'use', 'operator', 'c++', 'shift', 'bit', 'variable', 'leave', 'bit', 'integer', 'type', 'output', 'stream', 'code', 'attempt', 'write', 'stream', 'operator', 'overloading', 'allow', 'original', 'programmer', 'change', 'usual', 'semantic', 'operator', 'catch', 'subsequent', 'programmer', 'surprise', 'consider', 'good', 'practice', 'use', 'operator', 'overload', 'care', 'creator', 'java', 'decide', 'use', 'feature', 'necessarily', 'reason']"
3018,"Another, more subtle, issue with operators is that certain rules from mathematics can be wrongly expected or unintentionally assumed. For example, the commutativity of + i.e. that a + b == b + a does not always apply; an example of this occurs when the operands are strings, since + is commonly overloaded to perform a concatenation of strings i.e. ""bird"" + ""song"" yields ""birdsong"", while ""song"" + ""bird"" yields ""songbird"". A typical countercitation needed to this argument comes directly from mathematics: While + is commutative on integers and more generally any complex number, it is not commutative for other ""types"" of variables. In practice, + is not even always associative, for example with floating-point values due to rounding errors. Another example: In mathematics, multiplication is commutative for real and complex numbers but not commutative in matrix multiplication.","['subtle', 'issue', 'operator', 'certain', 'rule', 'mathematic', 'wrongly', 'expect', 'unintentionally', 'assume', 'example', 'commutativity', 'i.e.', 'apply', 'example', 'occur', 'operand', 'string', 'commonly', 'overload', 'perform', 'concatenation', 'string', 'i.e.', 'bird', 'song', 'yield', 'birdsong', 'song', 'bird', 'yield', 'songbird', 'typical', 'countercitation', 'need', 'argument', 'come', 'directly', 'mathematic', 'commutative', 'integer', 'generally', 'complex', 'number', 'commutative', 'type', 'variable', 'practice', 'associative', 'example', 'float', 'point', 'value', 'round', 'error', 'example', 'mathematic', 'multiplication', 'commutative', 'real', 'complex', 'number', 'commutative', 'matrix', 'multiplication']"
3019,A classification of some common programming languages is made according to whether their operators are overloadable by the programmer and whether the operators are limited to a predefined set.,"['classification', 'common', 'programming', 'language', 'accord', 'operator', 'overloadable', 'programmer', 'operator', 'limit', 'predefined', 'set']"
3020,The ALGOL 68 specification allowed operator overloading.44,"['algol', 'specification', 'allow', 'operator', 'overloading']"
3021,"Extract from the ALGOL 68 language specification page 177 where the overloaded operators ¬, =, ≠, and abs are defined:","['extract', 'algol', 'language', 'specification', 'page', '177', 'overloaded', 'operator', 'ab', 'define']"
3022,"Note that no special declaration is needed to overload an operator, and the programmer is free to create new operators. For dyadic operators their priority compared to other operators can be set:","['note', 'special', 'declaration', 'need', 'overload', 'operator', 'programmer', 'free', 'create', 'new', 'operator', 'dyadic', 'operator', 'priority', 'compare', 'operator', 'set']"
3023,"Ada supports overloading of operators from its inception, with the publication of the Ada 83 language standard. However, the language designers chose to preclude the definition of new operators. Only extant operators in the language may be overloaded, by defining new functions with identifiers such as ""+"", ""*"", ""&"" etc. Subsequent revisions of the language in 1995 and 2005 maintain the restriction to overloading of extant operators.","['ada', 'support', 'overloading', 'operator', 'inception', 'publication', 'ada', 'language', 'standard', 'language', 'designer', 'choose', 'preclude', 'definition', 'new', 'operator', 'extant', 'operator', 'language', 'overload', 'define', 'new', 'function', 'identifier', 'etc', 'subsequent', 'revision', 'language', '1995', '2005', 'maintain', 'restriction', 'overload', 'extant', 'operator']"
3024,"In C++, operator overloading is more refined than in ALGOL 68.45","['c++', 'operator', 'overloading', 'refined', 'algol', '68']"
3025,Java language designers at Sun Microsystems chose to omit overloading.464748,"['java', 'language', 'designer', 'sun', 'microsystems', 'choose', 'omit', 'overloading']"
3026,"Python allows operator overloading through the implementation of methods with special names.49 For example, the addition + operator can be overloaded by implementing the method obj.__add__self, other.","['python', 'allow', 'operator', 'overload', 'implementation', 'method', 'special', 'names', 'example', 'addition', 'operator', 'overload', 'implement', 'method', 'obj.__add__self']"
3027,Ruby allows operator overloading as syntactic sugar for simple method calls.,"['ruby', 'allow', 'operator', 'overloading', 'syntactic', 'sugar', 'simple', 'method', 'call']"
3028,"Lua allows operator overloading as syntactic sugar for method calls with the added feature that if the first operand doesn't define that operator, the method for the second operand will be used.","['lua', 'allow', 'operator', 'overload', 'syntactic', 'sugar', 'method', 'call', 'add', 'feature', 'operand', 'define', 'operator', 'method', 'second', 'operand']"
3029,Microsoft added operator overloading to C# in 2001 and to Visual Basic .NET in 2003.,"['microsoft', 'add', 'operator', 'overload', '2001', 'visual', 'basic', '.net', '2003']"
3030,Scala treats all operators as methods and thus allows operator overloading by proxy.,"['scala', 'treat', 'operator', 'method', 'allow', 'operator', 'overload', 'proxy']"
3031,"In Raku, the definition of all operators is delegated to lexical functions, and so, using function definitions, operators can be overloaded or new operators added. For example, the function defined in the Rakudo source for incrementing a Date object with ""+"" is:","['raku', 'definition', 'operator', 'delegate', 'lexical', 'function', 'function', 'definition', 'operator', 'overload', 'new', 'operator', 'add', 'example', 'function', 'define', 'rakudo', 'source', 'incremente', 'date', 'object']"
3032,"Since ""multi"" was used, the function gets added to the list of multidispatch candidates, and ""+"" is only overloaded for the case where the type constraints in the function signature are met. While the capacity for overloading includes +, *, >=, the postfix and term i, and so on, it also allows for overloading various brace operators: ""x, y"", ""x y "", ""x y "", and ""x y "".","['multi', 'function', 'gets', 'add', 'list', 'multidispatch', 'candidate', 'overloaded', 'case', 'type', 'constraint', 'function', 'signature', 'meet', 'capacity', 'overloading', 'include', 'postfix', 'term', 'allow', 'overload', 'brace', 'operator']"
3033,Kotlin has supported operator overloading since its creation.,"['kotlin', 'support', 'operator', 'overloading', 'creation']"
3034,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3035,"In object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state member variables and implementations of behavior member functions or methods.12 In many languages, the class name is used as the name for the class the template itself, the name for the default constructor of the class a subroutine that creates objects, and as the type of objects generated by instantiating the class; these distinct concepts are easily conflated.2 Although, to the point of conflation, one could argue that is a feature inherent in a language because of its polymorphic nature and why these languages are so powerful, dynamic and adaptable for use compared to languages without polymorphism present. Thus they can model dynamic systems i.e. the real world, machine learning, AI more easily.","['object', 'orient', 'programming', 'class', 'extensible', 'program', 'code', 'template', 'create', 'object', 'provide', 'initial', 'value', 'state', 'member', 'variable', 'implementation', 'behavior', 'member', 'function', 'methods', 'language', 'class', 'class', 'template', 'default', 'constructor', 'class', 'subroutine', 'create', 'object', 'type', 'object', 'generate', 'instantiate', 'class', 'distinct', 'concept', 'easily', 'conflated', 'point', 'conflation', 'argue', 'feature', 'inherent', 'language', 'polymorphic', 'nature', 'language', 'powerful', 'dynamic', 'adaptable', 'use', 'compare', 'language', 'polymorphism', 'present', 'model', 'dynamic', 'system', 'i.e.', 'real', 'world', 'machine', 'learning', 'easily']"
3036,"When an object is created by a constructor of the class, the resulting object is called an instance of the class, and the member variables specific to the object are called instance variables, to contrast with the class variables shared across the class.","['object', 'create', 'constructor', 'class', 'result', 'object', 'call', 'instance', 'class', 'member', 'variable', 'specific', 'object', 'call', 'instance', 'variable', 'contrast', 'class', 'variable', 'share', 'class']"
3037,"In certain languages, classes are, as a matter of fact, only a compile-time feature new classes cannot be declared at run-time, while in other languages classes are first-class citizens, and are generally themselves objects typically of type .mw-parser-output .monospacedfont-family:monospace,monospaceClass or similar. In these languages, a class that creates classes within itself is called a metaclass.","['certain', 'language', 'class', 'matter', 'fact', 'compile', 'time', 'feature', 'new', 'class', 'declare', 'run', 'time', 'language', 'class', 'class', 'citizen', 'generally', 'object', 'typically', 'type', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospaceclass', 'similar', 'language', 'class', 'create', 'class', 'call', 'metaclass']"
3038,"In its most casual usage, people often refer to the ""class"" of an object, but narrowly speaking objects have type: the interface, namely the types of member variables, the signatures of member functions methods, and properties these satisfy. At the same time, a class has an implementation specifically the implementation of the methods, and can create objects of a given type, with a given implementation.3 In the terms of type theory, a class is an implementation‍—‌a concrete data structure and collection of subroutines‍—‌while a type is an interface. Different concrete classes can produce objects of the same abstract type depending on type system; for example, the type Stack might be implemented with two classes – SmallStack fast for small stacks, but scales poorly and ScalableStack scales well but high overhead for small stacks. Similarly, a given class may have several different constructors.","['casual', 'usage', 'people', 'refer', 'class', 'object', 'narrowly', 'speak', 'object', 'type', 'interface', 'type', 'member', 'variable', 'signature', 'member', 'function', 'method', 'property', 'satisfy', 'time', 'class', 'implementation', 'specifically', 'implementation', 'method', 'create', 'object', 'give', 'type', 'give', 'implementation', 'term', 'type', 'theory', 'class', 'implementation\u200d—\u200ca', 'concrete', 'data', 'structure', 'collection', 'subroutines\u200d—\u200cwhile', 'type', 'interface', 'different', 'concrete', 'class', 'produce', 'object', 'abstract', 'type', 'depend', 'type', 'system', 'example', 'type', 'stack', 'implement', 'class', 'smallstack', 'fast', 'small', 'stack', 'scale', 'poorly', 'scalablestack', 'scale', 'high', 'overhead', 'small', 'stack', 'similarly', 'give', 'class', 'different', 'constructor']"
3039,"Class types generally represent nouns, such as a person, place or thing, or something nominalized, and a class represents an implementation of these. For example, a Banana type might represent the properties and functionality of bananas in general, while the ABCBanana and XYZBanana classes would represent ways of producing bananas say, banana suppliers or data structures and functions to represent and draw bananas in a video game. The ABCBanana class could then produce particular bananas: instances of the ABCBanana class would be objects of type Banana. Often only a single implementation of a type is given, in which case the class name is often identical with the type name.","['class', 'type', 'generally', 'represent', 'noun', 'person', 'place', 'thing', 'nominalize', 'class', 'represent', 'implementation', 'example', 'banana', 'type', 'represent', 'property', 'functionality', 'banana', 'general', 'abcbanana', 'xyzbanana', 'class', 'represent', 'way', 'produce', 'banana', 'banana', 'supplier', 'datum', 'structure', 'function', 'represent', 'draw', 'banana', 'video', 'game', 'abcbanana', 'class', 'produce', 'particular', 'banana', 'instance', 'abcbanana', 'class', 'object', 'type', 'banana', 'single', 'implementation', 'type', 'give', 'case', 'class', 'identical', 'type']"
3040,"Classes are composed from structural and behavioral constituents.1 Programming languages that include classes as a programming construct offer support, for various class-related features, and the syntax required to use these features varies greatly from one programming language to another.","['class', 'compose', 'structural', 'behavioral', 'constituents', 'programming', 'language', 'include', 'class', 'programming', 'construct', 'offer', 'support', 'class', 'relate', 'feature', 'syntax', 'require', 'use', 'feature', 'vary', 'greatly', 'programming', 'language']"
3041,"A class contains data field descriptions or properties, fields, data members, or attributes. These are usually field types and names that will be associated with state variables at program run time; these state variables either belong to the class or specific instances of the class. In most languages, the structure defined by the class determines the layout of the memory used by its instances. Other implementations are possible: for example, objects in Python use associative key-value containers.4","['class', 'contain', 'data', 'field', 'description', 'property', 'field', 'datum', 'member', 'attribute', 'usually', 'field', 'type', 'name', 'associate', 'state', 'variable', 'program', 'run', 'time', 'state', 'variable', 'belong', 'class', 'specific', 'instance', 'class', 'language', 'structure', 'define', 'class', 'determine', 'layout', 'memory', 'instance', 'implementation', 'possible', 'example', 'object', 'python', 'use', 'associative', 'key', 'value', 'containers']"
3042,"Some programming languages such as Eiffel support specification of invariants as part of the definition of the class, and enforce them through the type system. Encapsulation of state is necessary for being able to enforce the invariants of the class.","['programming', 'language', 'eiffel', 'support', 'specification', 'invariant', 'definition', 'class', 'enforce', 'type', 'system', 'encapsulation', 'state', 'necessary', 'able', 'enforce', 'invariant', 'class']"
3043,"The behavior of class or its instances is defined using methods. Methods are subroutines with the ability to operate on objects or classes. These operations may alter the state of an object or simply provide ways of accessing it.5 Many kinds of methods exist, but support for them varies across languages. Some types of methods are created and called by programmer code, while other special methods—such as constructors, destructors, and conversion operators—are created and called by compiler-generated code. A language may also allow the programmer to define and call these special methods.67","['behavior', 'class', 'instance', 'define', 'method', 'method', 'subroutine', 'ability', 'operate', 'object', 'class', 'operation', 'alter', 'state', 'object', 'simply', 'provide', 'way', 'access', 'it', 'kind', 'method', 'exist', 'support', 'vary', 'language', 'type', 'method', 'create', 'call', 'programmer', 'code', 'special', 'method', 'constructor', 'destructor', 'conversion', 'operator', 'create', 'call', 'compiler', 'generate', 'code', 'language', 'allow', 'programmer', 'define', 'special', 'methods']"
3044,"Every class implements or realizes an interface by providing structure and behavior. Structure consists of data and state, and behavior consists of code that specifies how methods are implemented.8 There is a distinction between the definition of an interface and the implementation of that interface; however, this line is blurred in many programming languages because class declarations both define and implement an interface. Some languages, however, provide features that separate interface and implementation. For example, an abstract class can define an interface without providing implementation.","['class', 'implement', 'realize', 'interface', 'provide', 'structure', 'behavior', 'structure', 'consist', 'datum', 'state', 'behavior', 'consist', 'code', 'specify', 'method', 'implemented', 'distinction', 'definition', 'interface', 'implementation', 'interface', 'line', 'blur', 'programming', 'language', 'class', 'declaration', 'define', 'implement', 'interface', 'language', 'provide', 'feature', 'separate', 'interface', 'implementation', 'example', 'abstract', 'class', 'define', 'interface', 'provide', 'implementation']"
3045,Languages that support class inheritance also allow classes to inherit interfaces from the classes that they are derived from.,"['language', 'support', 'class', 'inheritance', 'allow', 'class', 'inherit', 'interface', 'class', 'derive']"
3046,"For example, if ""class A"" inherits from ""class B"" and if ""class B"" implements the interface ""interface B"" then ""class A"" also inherits the functionalityconstants and methods declaration provided by ""interface B"".","['example', 'class', 'inherit', 'class', 'class', 'implement', 'interface', 'interface', 'class', 'inherit', 'functionalityconstant', 'method', 'declaration', 'provide', 'interface']"
3047,"In languages that support access specifiers, the interface of a class is considered to be the set of public members of the class, including both methods and attributes via implicit getter and setter methods; any private members or internal data structures are not intended to be depended on by external code and thus are not part of the interface.","['language', 'support', 'access', 'specifier', 'interface', 'class', 'consider', 'set', 'public', 'member', 'class', 'include', 'method', 'attribute', 'implicit', 'getter', 'setter', 'method', 'private', 'member', 'internal', 'datum', 'structure', 'intend', 'depend', 'external', 'code', 'interface']"
3048,Object-oriented programming methodology dictates that the operations of any interface of a class are to be independent of each other. It results in a layered design where clients of an interface use the methods declared in the interface. An interface places no requirements for clients to invoke the operations of one interface in any particular order. This approach has the benefit that client code can assume that the operations of an interface are available for use whenever the client has access to the object.9citation needed,"['object', 'orient', 'programming', 'methodology', 'dictate', 'operation', 'interface', 'class', 'independent', 'result', 'layered', 'design', 'client', 'interface', 'use', 'method', 'declare', 'interface', 'interface', 'place', 'requirement', 'client', 'invoke', 'operation', 'interface', 'particular', 'order', 'approach', 'benefit', 'client', 'code', 'assume', 'operation', 'interface', 'available', 'use', 'client', 'access', 'objectcitation', 'need']"
3049,"The buttons on the front of your television set are the interface between you and the electrical wiring on the other side of its plastic casing. You press the ""power"" button to toggle the television on and off. In this example, your particular television is the instance, each method is represented by a button, and all the buttons together compose the interface other television sets that are the same model as yours would have the same interface. In its most common form, an interface is a specification of a group of related methods without any associated implementation of the methods.","['button', 'television', 'set', 'interface', 'electrical', 'wiring', 'plastic', 'casing', 'press', 'power', 'button', 'toggle', 'television', 'example', 'particular', 'television', 'instance', 'method', 'represent', 'button', 'button', 'compose', 'interface', 'television', 'set', 'model', 'interface', 'common', 'form', 'interface', 'specification', 'group', 'related', 'method', 'associate', 'implementation', 'method']"
3050,"A television set also has a myriad of attributes, such as size and whether it supports colour, which together comprise its structure. A class represents the full description of a television, including its attributes structure and buttons interface.","['television', 'set', 'myriad', 'attribute', 'size', 'support', 'colour', 'comprise', 'structure', 'class', 'represent', 'description', 'television', 'include', 'attribute', 'structure', 'button', 'interface']"
3051,"Getting the total number of televisions manufactured could be a static method of the television class. This method is clearly associated with the class, yet is outside the domain of each individual instance of the class. A static method that finds a particular instance out of the set of all television objects is another example.","['get', 'total', 'number', 'television', 'manufacture', 'static', 'method', 'television', 'class', 'method', 'clearly', 'associate', 'class', 'outside', 'domain', 'individual', 'instance', 'class', 'static', 'method', 'find', 'particular', 'instance', 'set', 'television', 'object', 'example']"
3052,The following is a common set of access specifiers:10,"['follow', 'common', 'set', 'access', 'specifiers']"
3053,"Although many object-oriented languages support the above access specifiers, their semantics may differ.","['object', 'orient', 'language', 'support', 'access', 'specifier', 'semantic', 'differ']"
3054,"Object-oriented design uses the access specifiers in conjunction with careful design of public method implementations to enforce class invariants—constraints on the state of the objects. A common usage of access specifiers is to separate the internal data of a class from its interface: the internal structure is made private, while public accessor methods can be used to inspect or alter such private data.","['object', 'orient', 'design', 'use', 'access', 'specifier', 'conjunction', 'careful', 'design', 'public', 'method', 'implementation', 'enforce', 'class', 'invariant', 'constraint', 'state', 'object', 'common', 'usage', 'access', 'specifier', 'separate', 'internal', 'datum', 'class', 'interface', 'internal', 'structure', 'private', 'public', 'accessor', 'method', 'inspect', 'alter', 'private', 'datum']"
3055,"Access specifiers do not necessarily control visibility, in that even private members may be visible to client external code. In some languages, an inaccessible but visible member may be referred to at run-time for example, by a pointer returned from a member function, but an attempt to use it by referring to the name of the member from client code will be prevented by the type checker.11","['access', 'specifier', 'necessarily', 'control', 'visibility', 'private', 'member', 'visible', 'client', 'external', 'code', 'language', 'inaccessible', 'visible', 'member', 'refer', 'run', 'time', 'example', 'pointer', 'return', 'member', 'function', 'attempt', 'use', 'refer', 'member', 'client', 'code', 'prevent', 'type', 'checker']"
3056,"The various object-oriented programming languages enforce member accessibility and visibility to various degrees, and depending on the language's type system and compilation policies, enforced at either compile-time or run-time. For example, the Java language does not allow client code that accesses the private data of a class to compile. 12 In the C++ language, private methods are visible, but not accessible in the interface; however, they may be made invisible by explicitly declaring fully abstract classes that represent the interfaces of the class.13","['object', 'orient', 'programming', 'language', 'enforce', 'member', 'accessibility', 'visibility', 'degree', 'depend', 'language', 'type', 'system', 'compilation', 'policy', 'enforce', 'compile', 'time', 'run', 'time', 'example', 'java', 'language', 'allow', 'client', 'code', 'access', 'private', 'datum', 'class', 'compile', 'c++', 'language', 'private', 'method', 'visible', 'accessible', 'interface', 'invisible', 'explicitly', 'declare', 'fully', 'abstract', 'class', 'represent', 'interface', 'class']"
3057,Some languages feature other accessibility schemes:,"['language', 'feature', 'accessibility', 'scheme']"
3058,"In addition to the design of standalone classes, programming languages may support more advanced class design based upon relationships between classes. The inter-class relationship design capabilities commonly provided are compositional and hierarchical.","['addition', 'design', 'standalone', 'class', 'programming', 'language', 'support', 'advanced', 'class', 'design', 'base', 'relationship', 'class', 'inter', 'class', 'relationship', 'design', 'capability', 'commonly', 'provide', 'compositional', 'hierarchical']"
3059,"Classes can be composed of other classes, thereby establishing a compositional relationship between the enclosing class and its embedded classes. Compositional relationship between classes is also commonly known as a has-a relationship.16 For example, a class ""Car"" could be composed of and contain a class ""Engine"". Therefore, a Car has an Engine. One aspect of composition is containment, which is the enclosure of component instances by the instance that has them. If an enclosing object contains component instances by value, the components and their enclosing object have a similar lifetime. If the components are contained by reference, they may not have a similar lifetime.17 For example, in Objective-C 2.0:","['class', 'compose', 'class', 'establish', 'compositional', 'relationship', 'enclose', 'class', 'embed', 'class', 'compositional', 'relationship', 'class', 'commonly', 'know', 'relationship', 'example', 'class', 'car', 'compose', 'contain', 'class', 'engine', 'car', 'engine', 'aspect', 'composition', 'containment', 'enclosure', 'component', 'instance', 'instance', 'enclose', 'object', 'contain', 'component', 'instance', 'value', 'component', 'enclose', 'object', 'similar', 'lifetime', 'component', 'contain', 'reference', 'similar', 'lifetime', 'example', 'objective', '2']"
3060,"This Car class has an instance of NSString a string object, Engine, and NSArray an array object.","['car', 'class', 'instance', 'nsstring', 'string', 'object', 'engine', 'nsarray', 'array', 'object']"
3061,"Classes can be derived from one or more existing classes, thereby establishing a hierarchical relationship between the derived-from classes base classes, parent classes or .mw-parser-output .vanchor>:target~.vanchor-textbackground-color:#b1d2ffsuperclasses and the derived class child class or subclass . The relationship of the derived class to the derived-from classes is commonly known as an is-a relationship.18 For example, a class 'Button' could be derived from a class 'Control'. Therefore, a Button is a Control. Structural and behavioral members of the parent classes are inherited by the child class. Derived classes can define additional structural members data fields and behavioral members methods in addition to those that they inherit and are therefore specializations of their superclasses. Also, derived classes can override inherited methods if the language allows.","['class', 'derive', 'exist', 'class', 'establish', 'hierarchical', 'relationship', 'derive', 'class', 'base', 'class', 'parent', 'class', '.mw', 'parser', 'output', '.vanchor>:target~.vanchor', 'textbackground', 'color:#b1d2ffsuperclasse', 'derive', 'class', 'child', 'class', 'subclass', 'relationship', 'derive', 'class', 'derive', 'class', 'commonly', 'know', 'relationship', 'example', 'class', 'button', 'derive', 'class', 'control', 'button', 'control', 'structural', 'behavioral', 'member', 'parent', 'class', 'inherit', 'child', 'class', 'derive', 'class', 'define', 'additional', 'structural', 'member', 'datum', 'field', 'behavioral', 'member', 'method', 'addition', 'inherit', 'specialization', 'superclass', 'derive', 'class', 'override', 'inherit', 'method', 'language', 'allow']"
3062,"Not all languages support multiple inheritance. For example, Java allows a class to implement multiple interfaces, but only inherit from one class.19 If multiple inheritance is allowed, the hierarchy is a directed acyclic graph or DAG for short, otherwise it is a tree. The hierarchy has classes as nodes and inheritance relationships as links. Classes in the same level are more likely to be associated than classes in different levels. The levels of this hierarchy are called layers or levels of abstraction.","['language', 'support', 'multiple', 'inheritance', 'example', 'java', 'allow', 'class', 'implement', 'multiple', 'interface', 'inherit', 'class', 'multiple', 'inheritance', 'allow', 'hierarchy', 'directed', 'acyclic', 'graph', 'dag', 'short', 'tree', 'hierarchy', 'class', 'node', 'inheritance', 'relationship', 'link', 'class', 'level', 'likely', 'associate', 'class', 'different', 'level', 'level', 'hierarchy', 'call', 'layer', 'level', 'abstraction']"
3063,"Example Simplified Objective-C 2.0 code, from iPhone SDK:","['example', 'simplified', 'objective', '2', 'code', 'iphone', 'sdk']"
3064,"In this example, a UITableView is a UIScrollView is a UIView is a UIResponder is an NSObject.","['example', 'uitableview', 'uiscrollview', 'uiview', 'uiresponder', 'nsobject']"
3065,"Conceptually, a superclass is a superset of its subclasses. For example, a common class hierarchy would involve GraphicObject as a superclass of Rectangle and Ellipse, while Square would be a subclass of Rectangle. These are all subset relations in set theory as well, i.e., all squares are rectangles but not all rectangles are squares.","['conceptually', 'superclass', 'superset', 'subclass', 'example', 'common', 'class', 'hierarchy', 'involve', 'graphicobject', 'superclass', 'rectangle', 'ellipse', 'square', 'subclass', 'rectangle', 'subset', 'relation', 'set', 'theory', 'i.e.', 'square', 'rectangle', 'rectangle', 'square']"
3066,"A common conceptual error is to mistake a part of relation with a subclass. For example, a car and truck are both kinds of vehicles and it would be appropriate to model them as subclasses of a vehicle class. However, it would be an error to model the component parts of the car as subclass relations. For example, a car is composed of an engine and body, but it would not be appropriate to model engine or body as a subclass of car.","['common', 'conceptual', 'error', 'mistake', 'relation', 'subclass', 'example', 'car', 'truck', 'kind', 'vehicle', 'appropriate', 'model', 'subclass', 'vehicle', 'class', 'error', 'model', 'component', 'part', 'car', 'subclass', 'relation', 'example', 'car', 'compose', 'engine', 'body', 'appropriate', 'model', 'engine', 'body', 'subclass', 'car']"
3067,"In object-oriented modeling these kinds of relations are typically modeled as object properties. In this example, the Car class would have a property called parts. parts would be typed to hold a collection of objects, such as instances of Body, Engine, Tires, etc. Object modeling languages such as UML include capabilities to model various aspects of ""part of"" and other kinds of relations – data such as the cardinality of the objects, constraints on input and output values, etc. This information can be utilized by developer tools to generate additional code beside the basic data definitions for the objects, such as error checking on get and set methods.20","['object', 'orient', 'model', 'kind', 'relation', 'typically', 'model', 'object', 'property', 'example', 'car', 'class', 'property', 'call', 'part', 'part', 'type', 'hold', 'collection', 'object', 'instance', 'body', 'engine', 'tires', 'etc', 'object', 'modeling', 'language', 'uml', 'include', 'capability', 'model', 'aspect', 'kind', 'relation', 'datum', 'cardinality', 'object', 'constraint', 'input', 'output', 'value', 'etc', 'information', 'utilize', 'developer', 'tool', 'generate', 'additional', 'code', 'basic', 'datum', 'definition', 'object', 'error', 'checking', 'set', 'methods']"
3068,"One important question when modeling and implementing a system of object classes is whether a class can have one or more superclasses. In the real world with actual sets it would be rare to find sets that didn't intersect with more than one other set. However, while some systems such as Flavors and CLOS provide a capability for more than one parent to do so at run time introduces complexity that many in the object-oriented community consider antithetical to the goals of using object classes in the first place. Understanding which class will be responsible for handling a message can get complex when dealing with more than one superclass. If used carelessly this feature can introduce some of the same system complexity and ambiguity classes were designed to avoid.21","['important', 'question', 'model', 'implement', 'system', 'object', 'class', 'class', 'superclass', 'real', 'world', 'actual', 'set', 'rare', 'find', 'set', 'intersect', 'set', 'system', 'flavors', 'clos', 'provide', 'capability', 'parent', 'run', 'time', 'introduce', 'complexity', 'object', 'orient', 'community', 'consider', 'antithetical', 'goal', 'object', 'class', 'place', 'understand', 'class', 'responsible', 'handle', 'message', 'complex', 'deal', 'superclass', 'carelessly', 'feature', 'introduce', 'system', 'complexity', 'ambiguity', 'class', 'design', 'avoid']"
3069,"Most modern object-oriented languages such as Smalltalk and Java require single inheritance at run time. For these languages, multiple inheritance may be useful for modeling but not for an implementation.","['modern', 'object', 'orient', 'language', 'smalltalk', 'java', 'require', 'single', 'inheritance', 'run', 'time', 'language', 'multiple', 'inheritance', 'useful', 'modeling', 'implementation']"
3070,"However, semantic web application objects do have multiple superclasses. The volatility of the Internet requires this level of flexibility and the technology standards such as the Web Ontology Language OWL are designed to support it.","['semantic', 'web', 'application', 'object', 'multiple', 'superclass', 'volatility', 'internet', 'require', 'level', 'flexibility', 'technology', 'standard', 'web', 'ontology', 'language', 'owl', 'design', 'support']"
3071,"A similar issue is whether or not the class hierarchy can be modified at run time. Languages such as Flavors, CLOS, and Smalltalk all support this feature as part of their meta-object protocols. Since classes are themselves first-class objects, it is possible to have them dynamically alter their structure by sending them the appropriate messages. Other languages that focus more on strong typing such as Java and C++ do not allow the class hierarchy to be modified at run time. Semantic web objects have the capability for run time changes to classes. The rational is similar to the justification for allowing multiple superclasses, that the Internet is so dynamic and flexible that dynamic changes to the hierarchy are required to manage this volatility.22","['similar', 'issue', 'class', 'hierarchy', 'modify', 'run', 'time', 'language', 'flavors', 'clos', 'smalltalk', 'support', 'feature', 'meta', 'object', 'protocol', 'class', 'class', 'object', 'possible', 'dynamically', 'alter', 'structure', 'send', 'appropriate', 'message', 'language', 'focus', 'strong', 'typing', 'java', 'c++', 'allow', 'class', 'hierarchy', 'modify', 'run', 'time', 'semantic', 'web', 'object', 'capability', 'run', 'time', 'change', 'class', 'rational', 'similar', 'justification', 'allow', 'multiple', 'superclass', 'internet', 'dynamic', 'flexible', 'dynamic', 'change', 'hierarchy', 'require', 'manage', 'volatility']"
3072,"Although class-based languages are commonly assumed to support inheritance, inheritance is not an intrinsic aspect of the concept of classes. Some languages, often referred to as ""object-based languages"", support classes yet do not support inheritance. Examples of object-based languages include earlier versions of Visual Basic.","['class', 'base', 'language', 'commonly', 'assume', 'support', 'inheritance', 'inheritance', 'intrinsic', 'aspect', 'concept', 'class', 'language', 'refer', 'object', 'base', 'language', 'support', 'class', 'support', 'inheritance', 'example', 'object', 'base', 'language', 'include', 'early', 'version', 'visual', 'basic']"
3073,"In object-oriented analysis and in UML, an association between two classes represents a collaboration between the classes or their corresponding instances. Associations have direction; for example, a bi-directional association between two classes indicates that both of the classes are aware of their relationship.23 Associations may be labeled according to their name or purpose.24","['object', 'orient', 'analysis', 'uml', 'association', 'class', 'represent', 'collaboration', 'class', 'correspond', 'instance', 'association', 'direction', 'example', 'directional', 'association', 'class', 'indicate', 'class', 'aware', 'relationship', 'associations', 'label', 'accord', 'purpose']"
3074,"An association role is given end of an association and describes the role of the corresponding class. For example, a ""subscriber"" role describes the way instances of the class ""Person"" participate in a ""subscribes-to"" association with the class ""Magazine"". Also, a ""Magazine"" has the ""subscribed magazine"" role in the same association. Association role multiplicity describes how many instances correspond to each instance of the other class of the association. Common multiplicities are ""0..1"", ""1..1"", ""1..*"" and ""0..*"", where the ""*"" specifies any number of instances.23","['association', 'role', 'give', 'end', 'association', 'describe', 'role', 'corresponding', 'class', 'example', 'subscriber', 'role', 'describe', 'way', 'instance', 'class', 'person', 'participate', 'subscribes', 'association', 'class', 'magazine', 'magazine', 'subscribe', 'magazine', 'role', 'association', 'association', 'role', 'multiplicity', 'describe', 'instance', 'correspond', 'instance', 'class', 'association', 'common', 'multiplicity', 'specify', 'number', 'instances']"
3075,"There are many categories of classes, some of which overlap.","['category', 'class', 'overlap']"
3076,"In a language that supports inheritance, an abstract class, or abstract base class ABC, is a class that cannot be instantiated because it is either labeled as abstract or it simply specifies abstract methods or virtual methods. An abstract class may provide implementations of some methods, and may also specify virtual methods via signatures that are to be implemented by direct or indirect descendants of the abstract class. Before a class derived from an abstract class can be instantiated, all abstract methods of its parent classes must be implemented by some class in the derivation chain.25","['language', 'support', 'inheritance', 'abstract', 'class', 'abstract', 'base', 'class', 'abc', 'class', 'instantiate', 'label', 'abstract', 'simply', 'specify', 'abstract', 'method', 'virtual', 'method', 'abstract', 'class', 'provide', 'implementation', 'method', 'specify', 'virtual', 'method', 'signature', 'implement', 'direct', 'indirect', 'descendant', 'abstract', 'class', 'class', 'derive', 'abstract', 'class', 'instantiate', 'abstract', 'method', 'parent', 'class', 'implement', 'class', 'derivation', 'chain']"
3077,"Most object-oriented programming languages allow the programmer to specify which classes are considered abstract and will not allow these to be instantiated. For example, in Java, C# and PHP, the keyword abstract is used.2627 In C++, an abstract class is a class having at least one abstract method given by the appropriate syntax in that language a pure virtual function in C++ parlance.25","['object', 'orient', 'programming', 'language', 'allow', 'programmer', 'specify', 'class', 'consider', 'abstract', 'allow', 'instantiate', 'example', 'java', 'php', 'keyword', 'abstract', 'used', 'c++', 'abstract', 'class', 'class', 'have', 'abstract', 'method', 'give', 'appropriate', 'syntax', 'language', 'pure', 'virtual', 'function', 'c++', 'parlance']"
3078,"A class consisting of only virtual methods is called a Pure Abstract Base Class or Pure ABC in C++ and is also known as an interface by users of the language.13 Other languages, notably Java and C#, support a variant of abstract classes called an interface via a keyword in the language. In these languages, multiple inheritance is not allowed, but a class can implement multiple interfaces. Such a class can only contain abstract publicly accessible methods.192829","['class', 'consist', 'virtual', 'method', 'call', 'pure', 'abstract', 'base', 'class', 'pure', 'abc', 'c++', 'know', 'interface', 'user', 'language', 'language', 'notably', 'java', 'support', 'variant', 'abstract', 'class', 'call', 'interface', 'keyword', 'language', 'language', 'multiple', 'inheritance', 'allow', 'class', 'implement', 'multiple', 'interface', 'class', 'contain', 'abstract', 'publicly', 'accessible', 'methods']"
3079,"A concrete class is a class that can be instantiated, as opposed to abstract classes, which cannot.","['concrete', 'class', 'class', 'instantiate', 'oppose', 'abstract', 'class']"
3080,"In some languages, classes can be declared in scopes other than the global scope. There are various types of such classes.","['language', 'class', 'declare', 'scope', 'global', 'scope', 'type', 'class']"
3081,"An inner class is a class defined within another class. The relationship between an inner class and its containing class can also be treated as another type of class association. An inner class is typically neither associated with instances of the enclosing class nor instantiated along with its enclosing class. Depending on language, it may or may not be possible to refer to the class from outside the enclosing class. A related concept is inner types, also known as inner data type or nested type, which is a generalization of the concept of inner classes. C++ is an example of a language that supports both inner classes and inner types via typedef declarations.3031","['inner', 'class', 'class', 'define', 'class', 'relationship', 'inner', 'class', 'contain', 'class', 'treat', 'type', 'class', 'association', 'inner', 'class', 'typically', 'associate', 'instance', 'enclosing', 'class', 'instantiate', 'enclose', 'class', 'depend', 'language', 'possible', 'refer', 'class', 'outside', 'enclosing', 'class', 'related', 'concept', 'inner', 'type', 'know', 'inner', 'datum', 'type', 'nested', 'type', 'generalization', 'concept', 'inner', 'class', 'c++', 'example', 'language', 'support', 'inner', 'class', 'inner', 'type', 'typedef', 'declarations']"
3082,"Another type is a local class, which is a class defined within a procedure or function. This limits references to the class name to within the scope where the class is declared. Depending on the semantic rules of the language, there may be additional restrictions on local classes compared to non-local ones. One common restriction is to disallow local class methods to access local variables of the enclosing function. For example, in C++, a local class may refer to static variables declared within its enclosing function, but may not access the function's automatic variables.32","['type', 'local', 'class', 'class', 'define', 'procedure', 'function', 'limit', 'reference', 'class', 'scope', 'class', 'declare', 'depend', 'semantic', 'rule', 'language', 'additional', 'restriction', 'local', 'class', 'compare', 'non', 'local', 'one', 'common', 'restriction', 'disallow', 'local', 'class', 'method', 'access', 'local', 'variable', 'enclosing', 'function', 'example', 'c++', 'local', 'class', 'refer', 'static', 'variable', 'declare', 'enclose', 'function', 'access', 'function', 'automatic', 'variables']"
3083,Metaclasses are classes whose instances are classes.33 A metaclass describes a common structure of a collection of classes and can implement a design pattern or describe particular kinds of classes. Metaclasses are often used to describe frameworks.34,"['metaclasse', 'class', 'instance', 'classes', 'metaclass', 'describe', 'common', 'structure', 'collection', 'class', 'implement', 'design', 'pattern', 'describe', 'particular', 'kind', 'class', 'metaclasse', 'describe', 'frameworks']"
3084,"In some languages, such as Python, Ruby or Smalltalk, a class is also an object; thus each class is an instance of a unique metaclass that is built into the language. 4 35 36 The Common Lisp Object System CLOS provides metaobject protocols MOPs to implement those classes and metaclasses. 37","['language', 'python', 'ruby', 'smalltalk', 'class', 'object', 'class', 'instance', 'unique', 'metaclass', 'build', 'language', 'common', 'lisp', 'object', 'system', 'clos', 'provide', 'metaobject', 'protocol', 'mop', 'implement', 'class', 'metaclasse']"
3085,"Non-subclassable classes allow programmers to design classes and hierarchies of classes where at some level in the hierarchy, further derivation is prohibited a stand-alone class may be also designated as non-subclassable, preventing the formation of any hierarchy. Contrast this to abstract classes, which imply, encourage, and require derivation in order to be used at all. A non-subclassable class is implicitly concrete.","['non', 'subclassable', 'class', 'allow', 'programmer', 'design', 'class', 'hierarchy', 'class', 'level', 'hierarchy', 'derivation', 'prohibit', 'stand', 'class', 'designate', 'non', 'subclassable', 'prevent', 'formation', 'hierarchy', 'contrast', 'abstract', 'class', 'imply', 'encourage', 'require', 'derivation', 'order', 'non', 'subclassable', 'class', 'implicitly', 'concrete']"
3086,"A non-subclassable class is created by declaring the class as sealed in C# or as final in Java or PHP.383940 For example, Java's String class is designated as final.41","['non', 'subclassable', 'class', 'create', 'declare', 'class', 'seal', 'final', 'java', 'php', 'example', 'java', 'string', 'class', 'designate', 'final']"
3087,Non-subclassable classes may allow a compiler in compiled languages to perform optimizations that are not available for subclassable classes. 42,"['non', 'subclassable', 'class', 'allow', 'compiler', 'compile', 'language', 'perform', 'optimization', 'available', 'subclassable', 'class']"
3088,"An open class is one that can be changed. Typically, an executable program cannot be changed by customers. Developers can often change some classes, but typically cannot change standard or built-in ones. In Ruby, all classes are open. In Python, classes can be created at runtime, and all can be modified afterwards.43 Objective-C categories permit the programmer to add methods to an existing class without the need to recompile that class or even have access to its source code.","['open', 'class', 'change', 'typically', 'executable', 'program', 'change', 'customer', 'developer', 'change', 'class', 'typically', 'change', 'standard', 'build', 'one', 'ruby', 'class', 'open', 'python', 'class', 'create', 'runtime', 'modify', 'afterwards', 'objective', 'category', 'permit', 'programmer', 'add', 'method', 'exist', 'class', 'need', 'recompile', 'class', 'access', 'source', 'code']"
3089,"Some languages have special support for mixins, though in any language with multiple inheritance a mixin is simply a class that does not represent an is-a-type-of relationship. Mixins are typically used to add the same methods to multiple classes; for example, a class UnicodeConversionMixin might provide a method called unicode_to_ascii when included in classes FileReader and WebPageScraper that do not share a common parent.","['language', 'special', 'support', 'mixin', 'language', 'multiple', 'inheritance', 'mixin', 'simply', 'class', 'represent', 'type', 'relationship', 'mixin', 'typically', 'add', 'method', 'multiple', 'class', 'example', 'class', 'unicodeconversionmixin', 'provide', 'method', 'call', 'unicode_to_ascii', 'include', 'class', 'filereader', 'webpagescraper', 'share', 'common', 'parent']"
3090,"In languages supporting the feature, a partial class is a class whose definition may be split into multiple pieces, within a single source-code file or across multiple files.44 The pieces are merged at compile-time, making compiler output the same as for a non-partial class.","['language', 'support', 'feature', 'partial', 'class', 'class', 'definition', 'split', 'multiple', 'piece', 'single', 'source', 'code', 'file', 'multiple', 'files', 'piece', 'merge', 'compile', 'time', 'make', 'compiler', 'output', 'non', 'partial', 'class']"
3091,"The primary motivation for introduction of partial classes is to facilitate the implementation of code generators, such as visual designers.44 It is otherwise a challenge or compromise to develop code generators that can manage the generated code when it is interleaved within developer-written code. Using partial classes, a code generator can process a separate file or coarse-grained partial class within a file, and is thus alleviated from intricately interjecting generated code via extensive parsing, increasing compiler efficiency and eliminating the potential risk of corrupting developer code. In a simple implementation of partial classes, the compiler can perform a phase of precompilation where it ""unifies"" all the parts of a partial class. Then, compilation can proceed as usual.","['primary', 'motivation', 'introduction', 'partial', 'class', 'facilitate', 'implementation', 'code', 'generator', 'visual', 'designers', 'challenge', 'compromise', 'develop', 'code', 'generator', 'manage', 'generate', 'code', 'interleave', 'developer', 'write', 'code', 'partial', 'class', 'code', 'generator', 'process', 'separate', 'file', 'coarse', 'grain', 'partial', 'class', 'file', 'alleviate', 'intricately', 'interject', 'generate', 'code', 'extensive', 'parsing', 'increase', 'compiler', 'efficiency', 'eliminate', 'potential', 'risk', 'corrupt', 'developer', 'code', 'simple', 'implementation', 'partial', 'class', 'compiler', 'perform', 'phase', 'precompilation', 'unify', 'part', 'partial', 'class', 'compilation', 'proceed', 'usual']"
3092,Other benefits and effects of the partial class feature include:,"['benefit', 'effect', 'partial', 'class', 'feature', 'include']"
3093,"Partial classes have existed in Smalltalk under the name of Class Extensions for considerable time. With the arrival of the .NET framework 2, Microsoft introduced partial classes, supported in both C# 2.0 and Visual Basic 2005. WinRT also supports partial classes.","['partial', 'class', 'exist', 'smalltalk', 'class', 'extensions', 'considerable', 'time', 'arrival', '.net', 'framework', 'microsoft', 'introduce', 'partial', 'class', 'support', '2', 'visual', 'basic', '2005', 'winrt', 'support', 'partial', 'class']"
3094,"This simple example, written in Visual Basic .NET, shows how parts of the same class are defined in two different files.","['simple', 'example', 'write', 'visual', 'basic', '.net', 'show', 'part', 'class', 'define', 'different', 'file']"
3095,"When compiled, the result is the same as if the two files were written as one, like this:","['compile', 'result', 'file', 'write', 'like']"
3096,"In Objective-C, partial classes, also known as categories, may even spread over multiple libraries and executables, like the following example. But a key difference is that Objective-C's categories can overwrite definitions in another interface declaration, and that categories aren't equal to original class definition the first requires the last.45 Instead, .NET partial class can't have conflicting definitions, and all partial definitions are equal to the others.44","['objective', 'partial', 'class', 'know', 'category', 'spread', 'multiple', 'library', 'executable', 'like', 'follow', 'example', 'key', 'difference', 'objective', 'category', 'overwrite', 'definition', 'interface', 'declaration', 'category', 'equal', 'original', 'class', 'definition', 'require', 'last', 'instead', '.net', 'partial', 'class', 'conflicting', 'definition', 'partial', 'definition', 'equal', 'others']"
3097,"In user-supplied library, a separate binary from Foundation framework, header file NSData+base64.h:","['user', 'supply', 'library', 'separate', 'binary', 'foundation', 'framework', 'header', 'file', 'nsdata+base64.h']"
3098,"And in an app, yet another separate binary file, source code file main.m:","['app', 'separate', 'binary', 'file', 'source', 'code', 'file', 'main.m']"
3099,The dispatcher will find both methods called over the NSData instance and invoke both of them correctly.,"['dispatcher', 'find', 'method', 'call', 'nsdata', 'instance', 'invoke', 'correctly']"
3100,"Uninstantiable classes allow programmers to group together per-class fields and methods that are accessible at runtime without an instance of the class. Indeed, instantiation is prohibited for this kind of class.","['uninstantiable', 'class', 'allow', 'programmer', 'group', 'class', 'field', 'method', 'accessible', 'runtime', 'instance', 'class', 'instantiation', 'prohibit', 'kind', 'class']"
3101,"For example, in C#, a class marked ""static"" can not be instantiated, can only have static members fields, methods, other, may not have instance constructors, and is sealed. 46","['example', 'class', 'mark', 'static', 'instantiate', 'static', 'member', 'field', 'method', 'instance', 'constructor', 'seal']"
3102,An unnamed class or anonymous class is a class that is not bound to a name or identifier upon definition.4748 This is analogous to named versus unnamed functions.,"['unnamed', 'class', 'anonymous', 'class', 'class', 'bind', 'identifi', 'definition', 'analogous', 'name', 'versus', 'unnamed', 'function']"
3103,The benefits of organizing software into object classes fall into three categories:49,"['benefit', 'organize', 'software', 'object', 'class', 'fall', 'categories']"
3104,"Object classes facilitate rapid development because they lessen the semantic gap between the code and the users. System analysts can talk to both developers and users using essentially the same vocabulary, talking about accounts, customers, bills, etc. Object classes often facilitate rapid development because most object-oriented environments come with powerful debugging and testing tools. Instances of classes can be inspected at run time to verify that the system is performing as expected. Also, rather than get dumps of core memory, most object-oriented environments have interpreted debugging capabilities so that the developer can analyze exactly where in the program the error occurred and can see which methods were called to which arguments and with what arguments.50","['object', 'class', 'facilitate', 'rapid', 'development', 'lessen', 'semantic', 'gap', 'code', 'user', 'system', 'analyst', 'talk', 'developer', 'user', 'essentially', 'vocabulary', 'talk', 'account', 'customer', 'bill', 'etc', 'object', 'class', 'facilitate', 'rapid', 'development', 'object', 'orient', 'environment', 'come', 'powerful', 'debug', 'testing', 'tool', 'instance', 'class', 'inspect', 'run', 'time', 'verify', 'system', 'perform', 'expect', 'dump', 'core', 'memory', 'object', 'orient', 'environment', 'interpret', 'debug', 'capability', 'developer', 'analyze', 'exactly', 'program', 'error', 'occur', 'method', 'call', 'argument', 'arguments']"
3105,Object classes facilitate ease of maintenance via encapsulation. When developers need to change the behavior of an object they can localize the change to just that object and its component parts. This reduces the potential for unwanted side effects from maintenance enhancements.,"['object', 'class', 'facilitate', 'ease', 'maintenance', 'encapsulation', 'developer', 'need', 'change', 'behavior', 'object', 'localize', 'change', 'object', 'component', 'part', 'reduce', 'potential', 'unwanted', 'effect', 'maintenance', 'enhancement']"
3106,Software re-use is also a major benefit of using Object classes. Classes facilitate re-use via inheritance and interfaces. When a new behavior is required it can often be achieved by creating a new class and having that class inherit the default behaviors and data of its superclass and then tailor some aspect of the behavior or data accordingly. Re-use via interfaces also known as methods occurs when another object wants to invoke rather than create a new kind of some object class. This method for re-use removes many of the common errors that can make their way into software when one program re-uses code from another.51,"['software', 'use', 'major', 'benefit', 'object', 'class', 'class', 'facilitate', 'use', 'inheritance', 'interface', 'new', 'behavior', 'require', 'achieve', 'create', 'new', 'class', 'have', 'class', 'inherit', 'default', 'behavior', 'datum', 'superclass', 'tailor', 'aspect', 'behavior', 'data', 'accordingly', 'use', 'interface', 'know', 'method', 'occur', 'object', 'want', 'invoke', 'create', 'new', 'kind', 'object', 'class', 'method', 'use', 'remove', 'common', 'error', 'way', 'software', 'program', 'use', 'code', 'another']"
3107,"As a data type, a class is usually considered as a compile-time construct.52 A language or library may also support prototype or factory metaobjects that represent run-time information about classes, or even represent metadata that provides access to reflection facilities and ability to manipulate data structure formats at run-time. Many languages distinguish this kind of run-time type information about classes from a class on the basis that the information is not needed at run-time. Some dynamic languages do not make strict distinctions between run-time and compile-time constructs, and therefore may not distinguish between metaobjects and classes.","['data', 'type', 'class', 'usually', 'consider', 'compile', 'time', 'construct', 'language', 'library', 'support', 'prototype', 'factory', 'metaobject', 'represent', 'run', 'time', 'information', 'class', 'represent', 'metadata', 'provide', 'access', 'reflection', 'facility', 'ability', 'manipulate', 'data', 'structure', 'format', 'run', 'time', 'language', 'distinguish', 'kind', 'run', 'time', 'type', 'information', 'class', 'class', 'basis', 'information', 'need', 'run', 'time', 'dynamic', 'language', 'strict', 'distinction', 'run', 'time', 'compile', 'time', 'construct', 'distinguish', 'metaobject', 'class']"
3108,"For example, if Human is a metaobject representing the class Person, then instances of class Person can be created by using the facilities of the Human metaobject.","['example', 'human', 'metaobject', 'represent', 'class', 'person', 'instance', 'class', 'person', 'create', 'facility', 'human', 'metaobject']"
3109,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3110,"In programming language theory and type theory, polymorphism is the provision of a single interface to entities of different types1 or the use of a single symbol to represent multiple different types.2 The concept is borrowed from a principle in biology where an organism or species can have many different forms or stages.3","['programming', 'language', 'theory', 'type', 'theory', 'polymorphism', 'provision', 'single', 'interface', 'entity', 'different', 'types1', 'use', 'single', 'symbol', 'represent', 'multiple', 'different', 'types', 'concept', 'borrow', 'principle', 'biology', 'organism', 'specie', 'different', 'form', 'stages']"
3111,The most commonly recognized major classes of polymorphism are:,"['commonly', 'recognize', 'major', 'class', 'polymorphism']"
3112,"Interest in polymorphic type systems developed significantly in the 1960s, with practical implementations beginning to appear by the end of the decade. Ad hoc polymorphism and parametric polymorphism were originally described in Christopher Strachey's Fundamental Concepts in Programming Languages,5 where they are listed as ""the two main classes"" of polymorphism. Ad hoc polymorphism was a feature of Algol 68, while parametric polymorphism was the core feature of ML's type system.","['interest', 'polymorphic', 'type', 'system', 'develop', 'significantly', '1960', 'practical', 'implementation', 'begin', 'appear', 'end', 'decade', 'hoc', 'polymorphism', 'parametric', 'polymorphism', 'originally', 'describe', 'christopher', 'strachey', 'fundamental', 'concepts', 'programming', 'languages', 'list', 'main', 'class', 'polymorphism', 'hoc', 'polymorphism', 'feature', 'algol', 'parametric', 'polymorphism', 'core', 'feature', 'type', 'system']"
3113,"In a 1985 paper, Peter Wegner and Luca Cardelli introduced the term inclusion polymorphism to model subtypes and inheritance,2 citing Simula as the first programming language to implement it.","['1985', 'paper', 'peter', 'wegner', 'luca', 'cardelli', 'introduce', 'term', 'inclusion', 'polymorphism', 'model', 'subtype', 'inheritance', 'cite', 'simula', 'programming', 'language', 'implement']"
3114,"Christopher Strachey chose the term ad hoc polymorphism to refer to polymorphic functions that can be applied to arguments of different types, but that behave differently depending on the type of the argument to which they are applied also known as function overloading or operator overloading.5 The term ""ad hoc"" in this context is not intended to be pejorative; it refers simply to the fact that this type of polymorphism is not a fundamental feature of the type system. In the Pascal / Delphi example below, the Add functions seem to work generically over various types when looking at the invocations, but are considered to be two entirely distinct functions by the compiler for all intents and purposes:","['christopher', 'strachey', 'choose', 'term', 'hoc', 'polymorphism', 'refer', 'polymorphic', 'function', 'apply', 'argument', 'different', 'type', 'behave', 'differently', 'depend', 'type', 'argument', 'apply', 'know', 'function', 'overloading', 'operator', 'overloading', 'term', 'hoc', 'context', 'intend', 'pejorative', 'refer', 'simply', 'fact', 'type', 'polymorphism', 'fundamental', 'feature', 'type', 'system', 'pascal', 'delphi', 'example', 'add', 'function', 'work', 'generically', 'type', 'look', 'invocation', 'consider', 'entirely', 'distinct', 'function', 'compiler', 'intent', 'purpose']"
3115,In dynamically typed languages the situation can be more complex as the correct function that needs to be invoked might only be determinable at run time.,"['dynamically', 'type', 'language', 'situation', 'complex', 'correct', 'function', 'need', 'invoke', 'determinable', 'run', 'time']"
3116,"Implicit type conversion has also been defined as a form of polymorphism, referred to as ""coercion polymorphism"".26","['implicit', 'type', 'conversion', 'define', 'form', 'polymorphism', 'refer', 'coercion', 'polymorphism']"
3117,"Parametric polymorphism allows a function or a data type to be written generically, so that it can handle values uniformly without depending on their type.7 Parametric polymorphism is a way to make a language more expressive while still maintaining full static type-safety.","['parametric', 'polymorphism', 'allow', 'function', 'data', 'type', 'write', 'generically', 'handle', 'value', 'uniformly', 'depend', 'type', 'parametric', 'polymorphism', 'way', 'language', 'expressive', 'maintain', 'static', 'type', 'safety']"
3118,The concept of parametric polymorphism applies to both data types and functions. A function that can evaluate to or be applied to values of different types is known as a polymorphic function. A data type that can appear to be of a generalized type e.g. a list with elements of arbitrary type is designated polymorphic data type like the generalized type from which such specializations are made.,"['concept', 'parametric', 'polymorphism', 'apply', 'datum', 'type', 'function', 'function', 'evaluate', 'apply', 'value', 'different', 'type', 'know', 'polymorphic', 'function', 'data', 'type', 'appear', 'generalize', 'type', 'e.g.', 'list', 'element', 'arbitrary', 'type', 'designate', 'polymorphic', 'datum', 'type', 'like', 'generalize', 'type', 'specialization']"
3119,"Parametric polymorphism is ubiquitous in functional programming, where it is often simply referred to as ""polymorphism"". The following example in Haskell shows a parameterized list data type and two parametrically polymorphic functions on them:","['parametric', 'polymorphism', 'ubiquitous', 'functional', 'programming', 'simply', 'refer', 'polymorphism', 'follow', 'example', 'haskell', 'show', 'parameterized', 'list', 'datum', 'type', 'parametrically', 'polymorphic', 'function']"
3120,"Parametric polymorphism is also available in several object-oriented languages. For instance, templates in C++ and D, or under the name generics in C#, Delphi, Java and Go:","['parametric', 'polymorphism', 'available', 'object', 'orient', 'language', 'instance', 'template', 'c++', 'generic', 'delphi', 'java']"
3121,"John C. Reynolds and later Jean-Yves Girard formally developed this notion of polymorphism as an extension to lambda calculus called the polymorphic lambda calculus or System F. Any parametrically polymorphic function is necessarily restricted in what it can do, working on the shape of the data instead of its value, leading to the concept of parametricity.","['john', 'reynolds', 'later', 'jean', 'yves', 'girard', 'formally', 'develop', 'notion', 'polymorphism', 'extension', 'lambda', 'calculus', 'call', 'polymorphic', 'lambda', 'calculus', 'system', 'parametrically', 'polymorphic', 'function', 'necessarily', 'restrict', 'work', 'shape', 'datum', 'instead', 'value', 'lead', 'concept', 'parametricity']"
3122,"Some languages employ the idea of subtyping also called subtype polymorphism or inclusion polymorphism to restrict the range of types that can be used in a particular case of polymorphism. In these languages, subtyping allows a function to be written to take an object of a certain type T, but also work correctly, if passed an object that belongs to a type S that is a subtype of T according to the Liskov substitution principle. This type relation is sometimes written S <: T. Conversely, T is said to be a supertype of S—written T :> S. Subtype polymorphism is usually resolved dynamically see below.","['language', 'employ', 'idea', 'subtype', 'call', 'subtype', 'polymorphism', 'inclusion', 'polymorphism', 'restrict', 'range', 'type', 'particular', 'case', 'polymorphism', 'language', 'subtype', 'allow', 'function', 'write', 'object', 'certain', 'type', 'work', 'correctly', 'pass', 'object', 'belong', 'type', 'subtype', 'accord', 'liskov', 'substitution', 'principle', 'type', 'relation', 'write', 'conversely', 'say', 'supertype', 'write', 'subtype', 'polymorphism', 'usually', 'resolve', 'dynamically']"
3123,"In the following Java example we make cats and dogs subtypes of animals. The procedure letsHear accepts an animal, but will also work correctly if a subtype is passed to it:","['follow', 'java', 'example', 'cat', 'dog', 'subtype', 'animal', 'procedure', 'letshear', 'accept', 'animal', 'work', 'correctly', 'subtype', 'pass']"
3124,"In another example, if Number, Rational, and Integer are types such that Number :> Rational and Number :> Integer, a function written to take a Number will work equally well when passed an Integer or Rational as when passed a Number. The actual type of the object can be hidden from clients into a black box, and accessed via object identity. In fact, if the Number type is abstract, it may not even be possible to get your hands on an object whose most-derived type is Number see abstract data type, abstract class. This particular kind of type hierarchy is known—especially in the context of the Scheme programming language—as a numerical tower, and usually contains many more types.","['example', 'number', 'rational', 'integer', 'type', 'number', 'rational', 'number', 'integer', 'function', 'write', 'number', 'work', 'equally', 'pass', 'integer', 'rational', 'pass', 'number', 'actual', 'type', 'object', 'hide', 'client', 'black', 'box', 'access', 'object', 'identity', 'fact', 'number', 'type', 'abstract', 'possible', 'hand', 'object', 'derive', 'type', 'number', 'abstract', 'datum', 'type', 'abstract', 'class', 'particular', 'kind', 'type', 'hierarchy', 'know', 'especially', 'context', 'scheme', 'programming', 'language', 'numerical', 'tower', 'usually', 'contain', 'type']"
3125,"Object-oriented programming languages offer subtype polymorphism using subclassing also known as inheritance. In typical implementations, each class contains what is called a virtual table—a table of functions that implement the polymorphic part of the class interface—and each object contains a pointer to the ""vtable"" of its class, which is then consulted whenever a polymorphic method is called. This mechanism is an example of:","['object', 'orient', 'programming', 'language', 'offer', 'subtype', 'polymorphism', 'subclasse', 'know', 'inheritance', 'typical', 'implementation', 'class', 'contain', 'call', 'virtual', 'table', 'table', 'function', 'implement', 'polymorphic', 'class', 'interface', 'object', 'contain', 'pointer', 'vtable', 'class', 'consult', 'polymorphic', 'method', 'call', 'mechanism', 'example']"
3126,"The same goes for most other popular object systems. Some, however, such as Common Lisp Object System, provide multiple dispatch, under which method calls are polymorphic in all arguments.","['go', 'popular', 'object', 'system', 'common', 'lisp', 'object', 'system', 'provide', 'multiple', 'dispatch', 'method', 'call', 'polymorphic', 'argument']"
3127,The interaction between parametric polymorphism and subtyping leads to the concepts of variance and bounded quantification.,"['interaction', 'parametric', 'polymorphism', 'subtype', 'lead', 'concept', 'variance', 'bound', 'quantification']"
3128,"Row polymorphism8 is a similar, but distinct concept from subtyping. It deals with structural types. It allows the usage of all values whose types have certain properties, without losing the remaining type information.","['row', 'polymorphism8', 'similar', 'distinct', 'concept', 'subtype', 'deal', 'structural', 'type', 'allow', 'usage', 'value', 'type', 'certain', 'property', 'lose', 'remain', 'type', 'information']"
3129,"A related concept is polytypism or data type genericity. A polytypic function is more general than polymorphic, and in such a function, ""though one can provide fixed ad hoc cases for specific data types, an ad hoc combinator is absent"".9","['related', 'concept', 'polytypism', 'datum', 'type', 'genericity', 'polytypic', 'function', 'general', 'polymorphic', 'function', 'provide', 'fix', 'hoc', 'case', 'specific', 'datum', 'type', 'hoc', 'combinator', 'absent']"
3130,"Polymorphism can be distinguished by when the implementation is selected: statically at compile time or dynamically at run time, typically via a virtual function. This is known respectively as static dispatch and dynamic dispatch, and the corresponding forms of polymorphism are accordingly called static polymorphism and dynamic polymorphism.","['polymorphism', 'distinguish', 'implementation', 'select', 'statically', 'compile', 'time', 'dynamically', 'run', 'time', 'typically', 'virtual', 'function', 'know', 'respectively', 'static', 'dispatch', 'dynamic', 'dispatch', 'correspond', 'form', 'polymorphism', 'accordingly', 'call', 'static', 'polymorphism', 'dynamic', 'polymorphism']"
3131,"Static polymorphism executes faster, because there is no dynamic dispatch overhead, but requires additional compiler support. Further, static polymorphism allows greater static analysis by compilers notably for optimization, source code analysis tools, and human readers programmers. Dynamic polymorphism is more flexible but slower—for example, dynamic polymorphism allows duck typing, and a dynamically linked library may operate on objects without knowing their full type.","['static', 'polymorphism', 'execute', 'fast', 'dynamic', 'dispatch', 'overhead', 'require', 'additional', 'compiler', 'support', 'static', 'polymorphism', 'allow', 'great', 'static', 'analysis', 'compiler', 'notably', 'optimization', 'source', 'code', 'analysis', 'tool', 'human', 'reader', 'programmer', 'dynamic', 'polymorphism', 'flexible', 'slow', 'example', 'dynamic', 'polymorphism', 'allow', 'duck', 'typing', 'dynamically', 'link', 'library', 'operate', 'object', 'know', 'type']"
3132,"Static polymorphism typically occurs in ad hoc polymorphism and parametric polymorphism, whereas dynamic polymorphism is usual for subtype polymorphism. However, it is possible to achieve static polymorphism with subtyping through more sophisticated use of template metaprogramming, namely the curiously recurring template pattern.","['static', 'polymorphism', 'typically', 'occur', 'hoc', 'polymorphism', 'parametric', 'polymorphism', 'dynamic', 'polymorphism', 'usual', 'subtype', 'polymorphism', 'possible', 'achieve', 'static', 'polymorphism', 'subtype', 'sophisticated', 'use', 'template', 'metaprogramming', 'curiously', 'recur', 'template', 'pattern']"
3133,"When polymorphism is exposed via a library, static polymorphism becomes impossible for dynamic libraries as there is no way of knowing what types the parameters are when the shared object is built. While languages like C++ and Rust use monomorphized templates, the Swift programming language makes extensive use of dynamic dispatch to build the application binary interface for these libraries by default. As a result, more code can be shared for a reduced system size at the cost of runtime overhead.10","['polymorphism', 'expose', 'library', 'static', 'polymorphism', 'impossible', 'dynamic', 'library', 'way', 'know', 'type', 'parameter', 'share', 'object', 'build', 'language', 'like', 'c++', 'rust', 'use', 'monomorphize', 'template', 'swift', 'programming', 'language', 'make', 'extensive', 'use', 'dynamic', 'dispatch', 'build', 'application', 'binary', 'interface', 'library', 'default', 'result', 'code', 'share', 'reduced', 'system', 'size', 'cost', 'runtime', 'overhead']"
3134,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3135,"Generic programming is a style of computer programming in which algorithms are written in terms of types to-be-specified-later that are then instantiated when needed for specific types provided as parameters. This approach, pioneered by the ML programming language in 1973,12 permits writing common functions or types that differ only in the set of types on which they operate when used, thus reducing duplication. Such software entities are known as generics in Ada, C#, Delphi, Eiffel, F#, Java, Nim, Python, Go, Rust, Swift, TypeScript and Visual Basic .NET. They are known as parametric polymorphism in ML, Scala, Julia, and Haskell the Haskell community also uses the term ""generic"" for a related but somewhat different concept; templates in C++ and D; and parameterized types in the influential 1994 book Design Patterns.3","['generic', 'programming', 'style', 'computer', 'programming', 'algorithm', 'write', 'term', 'type', 'specify', 'later', 'instantiate', 'need', 'specific', 'type', 'provide', 'parameter', 'approach', 'pioneer', 'programming', 'language', '1973', 'permit', 'write', 'common', 'function', 'type', 'differ', 'set', 'type', 'operate', 'reduce', 'duplication', 'software', 'entity', 'know', 'generic', 'ada', 'delphi', 'eiffel', 'java', 'nim', 'python', 'rust', 'swift', 'typescript', 'visual', 'basic', '.net', 'know', 'parametric', 'polymorphism', 'scala', 'julia', 'haskell', 'haskell', 'community', 'use', 'term', 'generic', 'related', 'somewhat', 'different', 'concept', 'template', 'c++', 'parameterized', 'type', 'influential', '1994', 'book', 'design', 'patterns']"
3136,"The term ""generic programming"" was originally coined by David Musser and Alexander Stepanov4 in a more specific sense than the above, to describe a programming paradigm whereby fundamental requirements on types are abstracted from across concrete examples of algorithms and data structures and formalized as concepts, with generic functions implemented in terms of these concepts, typically using language genericity mechanisms as described above.","['term', 'generic', 'programming', 'originally', 'coin', 'david', 'musser', 'alexander', 'stepanov4', 'specific', 'sense', 'describe', 'programming', 'paradigm', 'fundamental', 'requirement', 'type', 'abstract', 'concrete', 'example', 'algorithm', 'datum', 'structure', 'formalize', 'concept', 'generic', 'function', 'implement', 'term', 'concept', 'typically', 'language', 'genericity', 'mechanism', 'describe']"
3137,"Generic programming is defined in Musser & Stepanov 1989 as follows,","['generic', 'programming', 'define', 'musser', 'stepanov', '1989', 'follow']"
3138,"Generic programming centers around the idea of abstracting from concrete, efficient algorithms to obtain generic algorithms that can be combined with different data representations to produce a wide variety of useful software.","['generic', 'programming', 'center', 'idea', 'abstract', 'concrete', 'efficient', 'algorithm', 'obtain', 'generic', 'algorithm', 'combine', 'different', 'datum', 'representation', 'produce', 'wide', 'variety', 'useful', 'software']"
3139,"The ""generic programming"" paradigm is an approach to software decomposition whereby fundamental requirements on types are abstracted from across concrete examples of algorithms and data structures and formalized as concepts, analogously to the abstraction of algebraic theories in abstract algebra.6 Early examples of this programming approach were implemented in Scheme and Ada,7 although the best known example is the Standard Template Library STL,89 which developed a theory of iterators that is used to decouple sequence data structures and the algorithms operating on them.","['generic', 'programming', 'paradigm', 'approach', 'software', 'decomposition', 'fundamental', 'requirement', 'type', 'abstract', 'concrete', 'example', 'algorithm', 'datum', 'structure', 'formalize', 'concept', 'analogously', 'abstraction', 'algebraic', 'theory', 'abstract', 'algebra', 'early', 'example', 'programming', 'approach', 'implement', 'scheme', 'ada', 'well', 'know', 'example', 'standard', 'template', 'library', 'stl', 'develop', 'theory', 'iterator', 'decouple', 'sequence', 'data', 'structure', 'algorithm', 'operate']"
3140,"For example, given N sequence data structures, e.g. singly linked list, vector etc., and M algorithms to operate on them, e.g. find, sort etc., a direct approach would implement each algorithm specifically for each data structure, giving N × M combinations to implement. However, in the generic programming approach, each data structure returns a model of an iterator concept a simple value type that can be dereferenced to retrieve the current value, or changed to point to another value in the sequence and each algorithm is instead written generically with arguments of such iterators, e.g. a pair of iterators pointing to the beginning and end of the subsequence or range to process. Thus, only N + M data structure-algorithm combinations need be implemented. Several iterator concepts are specified in the STL, each a refinement of more restrictive concepts e.g. forward iterators only provide movement to the next value in a sequence e.g. suitable for a singly linked list or a stream of input data, whereas a random-access iterator also provides direct constant-time access to any element of the sequence e.g. suitable for a vector. An important point is that a data structure will return a model of the most general concept that can be implemented efficiently—computational complexity requirements are explicitly part of the concept definition. This limits the data structures a given algorithm can be applied to and such complexity requirements are a major determinant of data structure choice. Generic programming similarly has been applied in other domains, e.g. graph algorithms.10","['example', 'give', 'sequence', 'datum', 'structure', 'e.g.', 'singly', 'link', 'list', 'vector', 'etc', 'algorithm', 'operate', 'e.g.', 'find', 'sort', 'etc', 'direct', 'approach', 'implement', 'algorithm', 'specifically', 'datum', 'structure', 'give', 'combination', 'implement', 'generic', 'programming', 'approach', 'data', 'structure', 'return', 'model', 'iterator', 'concept', 'simple', 'value', 'type', 'dereference', 'retrieve', 'current', 'value', 'change', 'point', 'value', 'sequence', 'algorithm', 'instead', 'write', 'generically', 'argument', 'iterator', 'e.g.', 'pair', 'iterator', 'point', 'beginning', 'end', 'subsequence', 'range', 'process', 'datum', 'structure', 'algorithm', 'combination', 'need', 'implement', 'iterator', 'concept', 'specify', 'stl', 'refinement', 'restrictive', 'concept', 'e.g.', 'forward', 'iterator', 'provide', 'movement', 'value', 'sequence', 'e.g.', 'suitable', 'singly', 'link', 'list', 'stream', 'input', 'datum', 'random', 'access', 'iterator', 'provide', 'direct', 'constant', 'time', 'access', 'element', 'sequence', 'e.g.', 'suitable', 'vector', 'important', 'point', 'data', 'structure', 'return', 'model', 'general', 'concept', 'implement', 'efficiently', 'computational', 'complexity', 'requirement', 'explicitly', 'concept', 'definition', 'limit', 'datum', 'structure', 'give', 'algorithm', 'apply', 'complexity', 'requirement', 'major', 'determinant', 'data', 'structure', 'choice', 'generic', 'programming', 'similarly', 'apply', 'domain', 'e.g.', 'graph', 'algorithms']"
3141,"Note that although this approach often utilizes language features of compile-time genericity/templates, it is in fact independent of particular language-technical details. Generic programming pioneer Alexander Stepanov wrote,","['note', 'approach', 'utilize', 'language', 'feature', 'compile', 'time', 'genericity', 'template', 'fact', 'independent', 'particular', 'language', 'technical', 'detail', 'generic', 'programming', 'pioneer', 'alexander', 'stepanov', 'write']"
3142,"Generic programming is about abstracting and classifying algorithms and data structures. It gets its inspiration from Knuth and not from type theory. Its goal is the incremental construction of systematic catalogs of useful, efficient and abstract algorithms and data structures. Such an undertaking is still a dream.","['generic', 'programming', 'abstract', 'classify', 'algorithm', 'data', 'structure', 'get', 'inspiration', 'knuth', 'type', 'theory', 'goal', 'incremental', 'construction', 'systematic', 'catalog', 'useful', 'efficient', 'abstract', 'algorithm', 'datum', 'structure', 'undertaking', 'dream']"
3143,I believe that iterator theories are as central to Computer Science as theories of rings or Banach spaces are central to Mathematics.,"['believe', 'iterator', 'theory', 'central', 'computer', 'science', 'theory', 'ring', 'banach', 'space', 'central', 'mathematics']"
3144,"Following Stepanov, we can define generic programming without mentioning language features: Lift algorithms and data structures from concrete examples to their most general and abstract form.","['follow', 'stepanov', 'define', 'generic', 'programming', 'mention', 'language', 'feature', 'lift', 'algorithm', 'datum', 'structure', 'concrete', 'example', 'general', 'abstract', 'form']"
3145,"Other programming paradigms that have been described as generic programming include Datatype generic programming as described in ""Generic Programming – an Introduction"".14 The Scrap your boilerplate approach is a lightweight generic programming approach for Haskell.15","['programming', 'paradigms', 'describe', 'generic', 'programming', 'include', 'datatype', 'generic', 'programming', 'describe', 'generic', 'programming', 'introduction', 'scrap', 'boilerplate', 'approach', 'lightweight', 'generic', 'programming', 'approach', 'haskell']"
3146,"In this article we distinguish the high-level programming paradigms of generic programming, above, from the lower-level programming language genericity mechanisms used to implement them see Programming language support for genericity. For further discussion and comparison of generic programming paradigms, see.16","['article', 'distinguish', 'high', 'level', 'programming', 'paradigm', 'generic', 'programming', 'low', 'level', 'programming', 'language', 'genericity', 'mechanism', 'implement', 'programming', 'language', 'support', 'genericity', 'discussion', 'comparison', 'generic', 'programming', 'paradigms', 'see']"
3147,"Genericity facilities have existed in high-level languages since at least the 1970s in languages such as ML, CLU and Ada, and were subsequently adopted by many object-based and object-oriented languages, including BETA, C++, D, Eiffel, Java, and DEC's now defunct Trellis-Owl language.","['genericity', 'facility', 'exist', 'high', 'level', 'language', '1970', 'language', 'clu', 'ada', 'subsequently', 'adopt', 'object', 'base', 'object', 'orient', 'language', 'include', 'beta', 'c++', 'eiffel', 'java', 'dec', 'defunct', 'trellis', 'owl', 'language']"
3148,"Genericity is implemented and supported differently in various programming languages; the term ""generic"" has also been used differently in various programming contexts. For example, in Forth the compiler can execute code while compiling and one can create new compiler keywords and new implementations for those words on the fly. It has few words that expose the compiler behaviour and therefore naturally offers genericity capacities that, however, are not referred to as such in most Forth texts. Similarly, dynamically typed languages, especially interpreted ones, usually offer genericity by default as both passing values to functions and value assignment are type-indifferent and such behavior is often utilized for abstraction or code terseness, however this is not typically labeled genericity as it's a direct consequence of the dynamic typing system employed by the language.citation needed The term has been used in functional programming, specifically in Haskell-like languages, which use a structural type system where types are always parametric and the actual code on those types is generic. These usages still serve a similar purpose of code-saving and the rendering of an abstraction.","['genericity', 'implement', 'support', 'differently', 'programming', 'language', 'term', 'generic', 'differently', 'programming', 'context', 'example', 'forth', 'compiler', 'execute', 'code', 'compile', 'create', 'new', 'compiler', 'keyword', 'new', 'implementation', 'word', 'fly', 'word', 'expose', 'compiler', 'behaviour', 'naturally', 'offer', 'genericity', 'capacity', 'refer', 'forth', 'text', 'similarly', 'dynamically', 'type', 'language', 'especially', 'interpret', 'one', 'usually', 'offer', 'genericity', 'default', 'pass', 'value', 'function', 'value', 'assignment', 'type', 'indifferent', 'behavior', 'utilize', 'abstraction', 'code', 'terseness', 'typically', 'label', 'genericity', 'direct', 'consequence', 'dynamic', 'typing', 'system', 'employ', 'language.citation', 'need', 'term', 'functional', 'programming', 'specifically', 'haskell', 'like', 'language', 'use', 'structural', 'type', 'system', 'type', 'parametric', 'actual', 'code', 'type', 'generic', 'usage', 'serve', 'similar', 'purpose', 'code', 'saving', 'rendering', 'abstraction']"
3149,"Arrays and structs can be viewed as predefined generic types. Every usage of an array or struct type instantiates a new concrete type, or reuses a previous instantiated type. Array element types and struct element types are parameterized types, which are used to instantiate the corresponding generic type. All this is usually built-in in the compiler and the syntax differs from other generic constructs. Some extensible programming languages try to unify built-in and user defined generic types.","['array', 'struct', 'view', 'predefine', 'generic', 'type', 'usage', 'array', 'struct', 'type', 'instantiate', 'new', 'concrete', 'type', 'reuse', 'previous', 'instantiated', 'type', 'array', 'element', 'type', 'struct', 'element', 'type', 'parameterized', 'type', 'instantiate', 'corresponding', 'generic', 'type', 'usually', 'build', 'compiler', 'syntax', 'differ', 'generic', 'construct', 'extensible', 'programming', 'language', 'try', 'unify', 'build', 'user', 'define', 'generic', 'type']"
3150,"A broad survey of genericity mechanisms in programming languages follows. For a specific survey comparing suitability of mechanisms for generic programming, see.17","['broad', 'survey', 'genericity', 'mechanism', 'programming', 'language', 'follow', 'specific', 'survey', 'compare', 'suitability', 'mechanism', 'generic', 'programming', 'see']"
3151,"When creating container classes in statically typed languages, it is inconvenient to write specific implementations for each datatype contained, especially if the code for each datatype is virtually identical. For example, in C++, this duplication of code can be circumvented by defining a class template:","['create', 'container', 'class', 'statically', 'type', 'language', 'inconvenient', 'write', 'specific', 'implementation', 'datatype', 'contain', 'especially', 'code', 'datatype', 'virtually', 'identical', 'example', 'c++', 'duplication', 'code', 'circumvent', 'define', 'class', 'template']"
3152,"Above, T is a placeholder for whatever type is specified when the list is created. These ""containers-of-type-T"", commonly called templates, allow a class to be reused with different datatypes as long as certain contracts such as subtypes and signature are kept. This genericity mechanism should not be confused with inclusion polymorphism, which is the algorithmic usage of exchangeable sub-classes: for instance, a list of objects of type Moving_Object containing objects of type Animal and Car. Templates can also be used for type-independent functions as in the Swap example below:","['placeholder', 'type', 'specify', 'list', 'create', 'container', 'type', 'commonly', 'call', 'template', 'allow', 'class', 'reuse', 'different', 'datatype', 'long', 'certain', 'contract', 'subtype', 'signature', 'keep', 'genericity', 'mechanism', 'confuse', 'inclusion', 'polymorphism', 'algorithmic', 'usage', 'exchangeable', 'sub', 'class', 'instance', 'list', 'object', 'type', 'moving_object', 'contain', 'object', 'type', 'animal', 'car', 'template', 'type', 'independent', 'function', 'swap', 'example']"
3153,The C++ template construct used above is widely citedcitation needed as the genericity construct that popularized the notion among programmers and language designers and supports many generic programming idioms. The D programming language also offers fully generic-capable templates based on the C++ precedent but with a simplified syntax. The Java programming language has provided genericity facilities syntactically based on C++'s since the introduction of J2SE 5.0.,"['c++', 'template', 'construct', 'widely', 'citedcitation', 'need', 'genericity', 'construct', 'popularize', 'notion', 'programmer', 'language', 'designer', 'support', 'generic', 'programming', 'idiom', 'programming', 'language', 'offer', 'fully', 'generic', 'capable', 'template', 'base', 'c++', 'precedent', 'simplified', 'syntax', 'java', 'programming', 'language', 'provide', 'genericity', 'facility', 'syntactically', 'base', 'c++', 'introduction', 'j2se', '5']"
3154,"C# 2.0, Oxygene 1.5 also known as Chrome and Visual Basic .NET 2005 have constructs that take advantage of the support for generics present in the Microsoft .NET Framework since version 2.0.","['2', 'oxygene', '1', 'know', 'chrome', 'visual', 'basic', '.net', '2005', 'construct', 'advantage', 'support', 'generic', 'present', 'microsoft', '.net', 'framework', 'version', '2']"
3155,"Ada has had generics since it was first designed in 1977–1980. The standard library uses generics to provide many services. Ada 2005 adds a comprehensive generic container library to the standard library, which was inspired by C++'s standard template library.","['ada', 'generic', 'design', '1977–1980', 'standard', 'library', 'use', 'generic', 'provide', 'service', 'ada', '2005', 'add', 'comprehensive', 'generic', 'container', 'library', 'standard', 'library', 'inspire', 'c++', 'standard', 'template', 'library']"
3156,A generic unit is a package or a subprogram that takes one or more generic formal parameters.,"['generic', 'unit', 'package', 'subprogram', 'take', 'generic', 'formal', 'parameter']"
3157,"A generic formal parameter is a value, a variable, a constant, a type, a subprogram, or even an instance of another, designated, generic unit. For generic formal types, the syntax distinguishes between discrete, floating-point, fixed-point, access pointer types, etc. Some formal parameters can have default values.","['generic', 'formal', 'parameter', 'value', 'variable', 'constant', 'type', 'subprogram', 'instance', 'designate', 'generic', 'unit', 'generic', 'formal', 'type', 'syntax', 'distinguishe', 'discrete', 'float', 'point', 'fix', 'point', 'access', 'pointer', 'type', 'etc', 'formal', 'parameter', 'default', 'value']"
3158,"To instantiate a generic unit, the programmer passes actual parameters for each formal. The generic instance then behaves just like any other unit. It is possible to instantiate generic units at run-time, for example inside a loop.","['instantiate', 'generic', 'unit', 'programmer', 'pass', 'actual', 'parameter', 'formal', 'generic', 'instance', 'behave', 'like', 'unit', 'possible', 'instantiate', 'generic', 'unit', 'run', 'time', 'example', 'inside', 'loop']"
3159,The specification of a generic package:,"['specification', 'generic', 'package']"
3160,Using an instance of a generic package:,"['instance', 'generic', 'package']"
3161,"The language syntax allows precise specification of constraints on generic formal parameters. For example, it is possible to specify that a generic formal type will only accept a modular type as the actual. It is also possible to express constraints between generic formal parameters; for example:","['language', 'syntax', 'allow', 'precise', 'specification', 'constraint', 'generic', 'formal', 'parameter', 'example', 'possible', 'specify', 'generic', 'formal', 'type', 'accept', 'modular', 'type', 'actual', 'possible', 'express', 'constraint', 'generic', 'formal', 'parameter', 'example']"
3162,"In this example, Array_Type is constrained by both Index_Type and Element_Type. When instantiating the unit, the programmer must pass an actual array type that satisfies these constraints.","['example', 'array_type', 'constrain', 'index_type', 'element_type', 'instantiate', 'unit', 'programmer', 'pass', 'actual', 'array', 'type', 'satisfy', 'constraint']"
3163,"The disadvantage of this fine-grained control is a complicated syntax, but, because all generic formal parameters are completely defined in the specification, the compiler can instantiate generics without looking at the body of the generic.","['disadvantage', 'fine', 'grain', 'control', 'complicated', 'syntax', 'generic', 'formal', 'parameter', 'completely', 'define', 'specification', 'compiler', 'instantiate', 'generic', 'look', 'body', 'generic']"
3164,"Unlike C++, Ada does not allow specialised generic instances, and requires that all generics be instantiated explicitly. These rules have several consequences:","['unlike', 'c++', 'ada', 'allow', 'specialised', 'generic', 'instance', 'require', 'generic', 'instantiate', 'explicitly', 'rule', 'consequence']"
3165,"C++ uses templates to enable generic programming techniques. The C++ Standard Library includes the Standard Template Library or STL that provides a framework of templates for common data structures and algorithms. Templates in C++ may also be used for template metaprogramming, which is a way of pre-evaluating some of the code at compile-time rather than run-time. Using template specialization, C++ Templates are considered Turing complete.","['c++', 'use', 'template', 'enable', 'generic', 'programming', 'technique', 'c++', 'standard', 'library', 'include', 'standard', 'template', 'library', 'stl', 'provide', 'framework', 'template', 'common', 'datum', 'structure', 'algorithm', 'template', 'c++', 'template', 'metaprogramming', 'way', 'pre', 'evaluate', 'code', 'compile', 'time', 'run', 'time', 'template', 'specialization', 'c++', 'templates', 'consider', 'ture', 'complete']"
3166,"There are many kinds of templates, the most common being function templates and class templates. A function template is a pattern for creating ordinary functions based upon the parameterizing types supplied when instantiated. For example, the C++ Standard Template Library contains the function template maxx, y that creates functions that return either x or y, whichever is larger. max could be defined like this:","['kind', 'template', 'common', 'function', 'template', 'class', 'template', 'function', 'template', 'pattern', 'create', 'ordinary', 'function', 'base', 'parameterizing', 'type', 'supply', 'instantiate', 'example', 'c++', 'standard', 'template', 'library', 'contain', 'function', 'template', 'maxx', 'create', 'function', 'return', 'whichever', 'large', 'max', 'define', 'like']"
3167,"Specializations of this function template, instantiations with specific types, can be called just like an ordinary function:","['specialization', 'function', 'template', 'instantiation', 'specific', 'type', 'call', 'like', 'ordinary', 'function']"
3168,"The compiler examines the arguments used to call max and determines that this is a call to maxint, int. It then instantiates a version of the function where the parameterizing type T is int, making the equivalent of the following function:","['compiler', 'examine', 'argument', 'max', 'determine', 'maxint', 'int', 'instantiate', 'version', 'function', 'parameterizing', 'type', 'int', 'make', 'equivalent', 'follow', 'function']"
3169,"This works whether the arguments x and y are integers, strings, or any other type for which the expression x < y is sensible, or more specifically, for any type for which operator< is defined. Common inheritance is not needed for the set of types that can be used, and so it is very similar to duck typing. A program defining a custom data type can use operator overloading to define the meaning of < for that type, thus allowing its use with the max function template. While this may seem a minor benefit in this isolated example, in the context of a comprehensive library like the STL it allows the programmer to get extensive functionality for a new data type, just by defining a few operators for it. Merely defining < allows a type to be used with the standard sort, stable_sort, and binary_search algorithms or to be put inside data structures such as sets, heaps, and associative arrays.","['work', 'argument', 'integer', 'string', 'type', 'expression', 'sensible', 'specifically', 'type', 'operator', 'define', 'common', 'inheritance', 'need', 'set', 'type', 'similar', 'duck', 'typing', 'program', 'define', 'custom', 'datum', 'type', 'use', 'operator', 'overload', 'define', 'meaning', 'type', 'allow', 'use', 'max', 'function', 'template', 'minor', 'benefit', 'isolated', 'example', 'context', 'comprehensive', 'library', 'like', 'stl', 'allow', 'programmer', 'extensive', 'functionality', 'new', 'data', 'type', 'define', 'operator', 'merely', 'define', 'allow', 'type', 'standard', 'sort', 'stable_sort', 'binary_search', 'algorithm', 'inside', 'data', 'structure', 'set', 'heap', 'associative', 'array']"
3170,"C++ templates are completely type safe at compile time. As a demonstration, the standard type complex does not define the < operator, because there is no strict order on complex numbers. Therefore, maxx, y will fail with a compile error, if x and y are complex values. Likewise, other templates that rely on < cannot be applied to complex data unless a comparison in the form of a functor or function is provided. E.g.: A complex cannot be used as key for a map unless a comparison is provided. Unfortunately, compilers historically generate somewhat esoteric, long, and unhelpful error messages for this sort of error. Ensuring that a certain object adheres to a method protocol can alleviate this issue. Languages which use compare instead of < can also use complex values as keys.","['c++', 'template', 'completely', 'type', 'safe', 'compile', 'time', 'demonstration', 'standard', 'type', 'complex', 'define', 'operator', 'strict', 'order', 'complex', 'number', 'maxx', 'fail', 'compile', 'error', 'complex', 'value', 'likewise', 'template', 'rely', 'apply', 'complex', 'datum', 'comparison', 'form', 'functor', 'function', 'provide', 'e.g.', 'complex', 'key', 'map', 'comparison', 'provide', 'unfortunately', 'compiler', 'historically', 'generate', 'somewhat', 'esoteric', 'long', 'unhelpful', 'error', 'message', 'sort', 'error', 'ensure', 'certain', 'object', 'adhere', 'method', 'protocol', 'alleviate', 'issue', 'language', 'use', 'compare', 'instead', 'use', 'complex', 'value', 'key']"
3171,"Another kind of template, a class template, extends the same concept to classes. A class template specialization is a class. Class templates are often used to make generic containers. For example, the STL has a linked list container. To make a linked list of integers, one writes list<int>. A list of strings is denoted list<string>. A list has a set of standard functions associated with it, that work for any compatible parameterizing types.","['kind', 'template', 'class', 'template', 'extend', 'concept', 'class', 'class', 'template', 'specialization', 'class', 'class', 'template', 'generic', 'container', 'example', 'stl', 'link', 'list', 'container', 'link', 'list', 'integer', 'write', 'list', 'int', 'list', 'string', 'denote', 'list', 'string', 'list', 'set', 'standard', 'function', 'associate', 'work', 'compatible', 'parameterizing', 'type']"
3172,"A powerful feature of C++'s templates is template specialization. This allows alternative implementations to be provided based on certain characteristics of the parameterized type that is being instantiated. Template specialization has two purposes: to allow certain forms of optimization, and to reduce code bloat.","['powerful', 'feature', 'c++', 'template', 'template', 'specialization', 'allow', 'alternative', 'implementation', 'provide', 'base', 'certain', 'characteristic', 'parameterized', 'type', 'instantiate', 'template', 'specialization', 'purpose', 'allow', 'certain', 'form', 'optimization', 'reduce', 'code', 'bloat']"
3173,"For example, consider a sort template function. One of the primary activities that such a function does is to swap or exchange the values in two of the container's positions. If the values are large in terms of the number of bytes it takes to store each of them, then it is often quicker to first build a separate list of pointers to the objects, sort those pointers, and then build the final sorted sequence. If the values are quite small however it is usually fastest to just swap the values in-place as needed. Furthermore, if the parameterized type is already of some pointer-type, then there is no need to build a separate pointer array. Template specialization allows the template creator to write different implementations and to specify the characteristics that the parameterized types must have for each implementation to be used.","['example', 'consider', 'sort', 'template', 'function', 'primary', 'activity', 'function', 'swap', 'exchange', 'value', 'container', 'position', 'value', 'large', 'term', 'number', 'byte', 'take', 'store', 'quick', 'build', 'separate', 'list', 'pointer', 'object', 'sort', 'pointer', 'build', 'final', 'sorted', 'sequence', 'value', 'small', 'usually', 'fast', 'swap', 'value', 'place', 'need', 'furthermore', 'parameterized', 'type', 'pointer', 'type', 'need', 'build', 'separate', 'pointer', 'array', 'template', 'specialization', 'allow', 'template', 'creator', 'write', 'different', 'implementation', 'specify', 'characteristic', 'parameterize', 'type', 'implementation']"
3174,"Unlike function templates, class templates can be partially specialized. That means that an alternate version of the class template code can be provided when some of the template parameters are known, while leaving other template parameters generic. This can be used, for example, to create a default implementation the primary specialization that assumes that copying a parameterizing type is expensive and then create partial specializations for types that are cheap to copy, thus increasing overall efficiency. Clients of such a class template just use specializations of it without needing to know whether the compiler used the primary specialization or some partial specialization in each case. Class templates can also be fully specialized, which means that an alternate implementation can be provided when all of the parameterizing types are known.","['unlike', 'function', 'template', 'class', 'template', 'partially', 'specialize', 'mean', 'alternate', 'version', 'class', 'template', 'code', 'provide', 'template', 'parameter', 'know', 'leave', 'template', 'parameter', 'generic', 'example', 'create', 'default', 'implementation', 'primary', 'specialization', 'assume', 'copy', 'parameterizing', 'type', 'expensive', 'create', 'partial', 'specialization', 'type', 'cheap', 'copy', 'increase', 'overall', 'efficiency', 'client', 'class', 'template', 'use', 'specialization', 'need', 'know', 'compiler', 'primary', 'specialization', 'partial', 'specialization', 'case', 'class', 'template', 'fully', 'specialize', 'mean', 'alternate', 'implementation', 'provide', 'parameterizing', 'type', 'know']"
3175,"Some uses of templates, such as the max function, were previously filled by function-like preprocessor macros a legacy of the C programming language. For example, here is a possible implementation of such macro:","['use', 'template', 'max', 'function', 'previously', 'fill', 'function', 'like', 'preprocessor', 'macros', 'legacy', 'programming', 'language', 'example', 'possible', 'implementation', 'macro']"
3176,"Macros are expanded copy pasted by preprocessor, before compilation proper; templates are actual real functions. Macros are always expanded inline; templates can also be inline functions when the compiler deems it appropriate.","['macros', 'expand', 'copy', 'paste', 'preprocessor', 'compilation', 'proper', 'template', 'actual', 'real', 'function', 'macros', 'expand', 'inline', 'template', 'inline', 'function', 'compiler', 'deem', 'appropriate']"
3177,"However, templates are generally considered an improvement over macros for these purposes. Templates are type-safe. Templates avoid some of the common errors found in code that makes heavy use of function-like macros, such as evaluating parameters with side effects twice. Perhaps most importantly, templates were designed to be applicable to much larger problems than macros.","['template', 'generally', 'consider', 'improvement', 'macros', 'purpose', 'template', 'type', 'safe', 'template', 'avoid', 'common', 'error', 'find', 'code', 'make', 'heavy', 'use', 'function', 'like', 'macros', 'evaluate', 'parameter', 'effect', 'twice', 'importantly', 'template', 'design', 'applicable', 'large', 'problem', 'macros']"
3178,"There are four primary drawbacks to the use of templates: supported features, compiler support, poor error messages usually with pre C++20 SFINAE, and code bloat:","['primary', 'drawback', 'use', 'template', 'support', 'feature', 'compiler', 'support', 'poor', 'error', 'message', 'usually', 'pre', 'c++20', 'sfinae', 'code', 'bloat']"
3179,"So, can derivation be used to reduce the problem of code replicated because templates are used? This would involve deriving a template from an ordinary class. This technique proved successful in curbing code bloat in real use. People who do not use a technique like this have found that replicated code can cost megabytes of code space even in moderate size programs.","['derivation', 'reduce', 'problem', 'code', 'replicate', 'template', 'involve', 'derive', 'template', 'ordinary', 'class', 'technique', 'prove', 'successful', 'curb', 'code', 'bloat', 'real', 'use', 'people', 'use', 'technique', 'like', 'find', 'replicate', 'code', 'cost', 'megabyte', 'code', 'space', 'moderate', 'size', 'program']"
3180,"The extra instantiations generated by templates can also cause some debuggers to have difficulty working gracefully with templates. For example, setting a debug breakpoint within a template from a source file may either miss setting the breakpoint in the actual instantiation desired or may set a breakpoint in every place the template is instantiated.","['extra', 'instantiation', 'generate', 'template', 'cause', 'debugger', 'difficulty', 'work', 'gracefully', 'template', 'example', 'set', 'debug', 'breakpoint', 'template', 'source', 'file', 'miss', 'set', 'breakpoint', 'actual', 'instantiation', 'desire', 'set', 'breakpoint', 'place', 'template', 'instantiate']"
3181,"Also, the implementation source code for the template must be completely available e.g. included in a header to the translation unit source file using it. Templates, including much of the Standard Library, if not included in header files, cannot be compiled. This is in contrast to non-templated code, which may be compiled to binary, providing only a declarations header file for code using it. This may be a disadvantage by exposing the implementing code, which removes some abstractions, and could restrict its use in closed-source projects.citation needed","['implementation', 'source', 'code', 'template', 'completely', 'available', 'e.g.', 'include', 'header', 'translation', 'unit', 'source', 'file', 'template', 'include', 'standard', 'library', 'include', 'header', 'file', 'compile', 'contrast', 'non', 'templated', 'code', 'compile', 'binary', 'provide', 'declaration', 'header', 'file', 'code', 'disadvantage', 'expose', 'implement', 'code', 'remove', 'abstraction', 'restrict', 'use', 'closed', 'source', 'projects.citation', 'need']"
3182,"The D programming language supports templates based in design on C++. Most C++ template idioms will carry over to D without alteration, but D adds some additional functionality:","['programming', 'language', 'support', 'template', 'base', 'design', 'c++', 'c++', 'template', 'idiom', 'carry', 'alteration', 'add', 'additional', 'functionality']"
3183,"Templates in D use a different syntax than in C++: whereas in C++ template parameters are wrapped in angular brackets Template<param1, param2>, D uses an exclamation sign and parentheses: Template!param1, param2. This avoids the C++ parsing difficulties due to ambiguity with comparison operators. If there is only one parameter, the parentheses can be omitted.","['template', 'use', 'different', 'syntax', 'c++', 'c++', 'template', 'parameter', 'wrap', 'angular', 'bracket', 'template', 'param1', 'param2', 'use', 'exclamation', 'sign', 'parenthesis', 'template!param1', 'param2', 'avoid', 'c++', 'parse', 'difficulty', 'ambiguity', 'comparison', 'operator', 'parameter', 'parenthesis', 'omit']"
3184,"Conventionally, D combines the above features to provide compile-time polymorphism using trait-based generic programming. For example, an input range is defined as any type that satisfies the checks performed by isInputRange, which is defined as follows:","['conventionally', 'combine', 'feature', 'provide', 'compile', 'time', 'polymorphism', 'trait', 'base', 'generic', 'programming', 'example', 'input', 'range', 'define', 'type', 'satisfy', 'check', 'perform', 'isinputrange', 'define', 'follow']"
3185,A function that accepts only input ranges can then use the above template in a template constraint:,"['function', 'accept', 'input', 'range', 'use', 'template', 'template', 'constraint']"
3186,"In addition to template metaprogramming, D also provides several features to enable compile-time code generation:","['addition', 'template', 'metaprogramming', 'provide', 'feature', 'enable', 'compile', 'time', 'code', 'generation']"
3187,"Combining the above allows generating code based on existing declarations. For example, D serialization frameworks can enumerate a type's members and generate specialized functions for each serialized type to perform serialization and deserialization. User-defined attributes could further indicate serialization rules.","['combine', 'allow', 'generating', 'code', 'base', 'exist', 'declaration', 'example', 'serialization', 'framework', 'enumerate', 'type', 'member', 'generate', 'specialized', 'function', 'serialize', 'type', 'perform', 'serialization', 'deserialization', 'user', 'define', 'attribute', 'indicate', 'serialization', 'rule']"
3188,"The import expression and compile-time function execution also allow efficiently implementing domain-specific languages. For example, given a function that takes a string containing an HTML template and returns equivalent D source code, it is possible to use it in the following way:","['import', 'expression', 'compile', 'time', 'function', 'execution', 'allow', 'efficiently', 'implement', 'domain', 'specific', 'language', 'example', 'give', 'function', 'take', 'string', 'contain', 'html', 'template', 'return', 'equivalent', 'source', 'code', 'possible', 'use', 'following', 'way']"
3189,"Generic classes have been a part of Eiffel since the original method and language design. The foundation publications of Eiffel,2122 use the term genericity to describe the creation and use of generic classes.","['generic', 'class', 'eiffel', 'original', 'method', 'language', 'design', 'foundation', 'publication', 'eiffel', 'use', 'term', 'genericity', 'describe', 'creation', 'use', 'generic', 'class']"
3190,"Generic classes are declared with their class name and a list of one or more formal generic parameters. In the following code, class LIST has one formal generic parameter G","['generic', 'class', 'declare', 'class', 'list', 'formal', 'generic', 'parameter', 'follow', 'code', 'class', 'list', 'formal', 'generic', 'parameter']"
3191,"The formal generic parameters are placeholders for arbitrary class names that will be supplied when a declaration of the generic class is made, as shown in the two generic derivations below, where ACCOUNT and DEPOSIT are other class names. ACCOUNT and DEPOSIT are considered actual generic parameters as they provide real class names to substitute for G in actual use.","['formal', 'generic', 'parameter', 'placeholder', 'arbitrary', 'class', 'name', 'supply', 'declaration', 'generic', 'class', 'show', 'generic', 'derivation', 'account', 'deposit', 'class', 'name', 'account', 'deposit', 'consider', 'actual', 'generic', 'parameter', 'provide', 'real', 'class', 'name', 'substitute', 'actual', 'use']"
3192,"Within the Eiffel type system, although class LIST G is considered a class, it is not considered a type. However, a generic derivation of LIST G such as LIST ACCOUNT is considered a type.","['eiffel', 'type', 'system', 'class', 'list', 'consider', 'class', 'consider', 'type', 'generic', 'derivation', 'list', 'list', 'account', 'consider', 'type']"
3193,"For the list class shown above, an actual generic parameter substituting for G can be any other available class. To constrain the set of classes from which valid actual generic parameters can be chosen, a generic constraint can be specified. In the declaration of class SORTED_LIST below, the generic constraint dictates that any valid actual generic parameter will be a class that inherits from class COMPARABLE. The generic constraint ensures that elements of a SORTED_LIST can in fact be sorted.","['list', 'class', 'show', 'actual', 'generic', 'parameter', 'substituting', 'available', 'class', 'constrain', 'set', 'class', 'valid', 'actual', 'generic', 'parameter', 'choose', 'generic', 'constraint', 'specify', 'declaration', 'class', 'sorted_list', 'generic', 'constraint', 'dictate', 'valid', 'actual', 'generic', 'parameter', 'class', 'inherit', 'class', 'comparable', 'generic', 'constraint', 'ensure', 'element', 'sorted_list', 'fact', 'sort']"
3194,"Support for the generics, or ""containers-of-type-T"" was added to the Java programming language in 2004 as part of J2SE 5.0. In Java, generics are only checked at compile time for type correctness. The generic type information is then removed via a process called type erasure, to maintain compatibility with old JVM implementations, making it unavailable at runtime. For example, a List<String> is converted to the raw type List. The compiler inserts type casts to convert the elements to the String type when they are retrieved from the list, reducing performance compared to other implementations such as C++ templates.","['support', 'generic', 'container', 'type', 'add', 'java', 'programming', 'language', '2004', 'j2se', '5', 'java', 'generic', 'check', 'compile', 'time', 'type', 'correctness', 'generic', 'type', 'information', 'remove', 'process', 'call', 'type', 'erasure', 'maintain', 'compatibility', 'old', 'jvm', 'implementation', 'make', 'unavailable', 'runtime', 'example', 'list', 'string', 'convert', 'raw', 'type', 'list', 'compiler', 'insert', 'type', 'cast', 'convert', 'element', 'string', 'type', 'retrieve', 'list', 'reduce', 'performance', 'compare', 'implementation', 'c++', 'template']"
3195,"Generics were added as part of .NET Framework 2.0 in November 2005, based on a research prototype from Microsoft Research started in 1999.23 Although similar to generics in Java, .NET generics do not apply type erasure, but implement generics as a first class mechanism in the runtime using reification. This design choice provides additional functionality, such as allowing reflection with preservation of generic types, as well as alleviating some of the limitations of erasure such as being unable to create generic arrays.2425 This also means that there is no performance hit from runtime casts and normally expensive boxing conversions. When primitive and value types are used as generic arguments, they get specialized implementations, allowing for efficient generic collections and methods. As in C++ and Java, nested generic types such as Dictionary<string, List<int>> are valid types, however are advised against for member signatures in code analysis design rules.26","['generic', 'add', '.net', 'framework', '2', 'november', '2005', 'base', 'research', 'prototype', 'microsoft', 'research', 'start', '1999', 'similar', 'generic', 'java', '.net', 'generic', 'apply', 'type', 'erasure', 'implement', 'generic', 'class', 'mechanism', 'runtime', 'reification', 'design', 'choice', 'provide', 'additional', 'functionality', 'allow', 'reflection', 'preservation', 'generic', 'type', 'alleviate', 'limitation', 'erasure', 'unable', 'create', 'generic', 'arrays', 'mean', 'performance', 'hit', 'runtime', 'cast', 'normally', 'expensive', 'boxing', 'conversion', 'primitive', 'value', 'type', 'generic', 'argument', 'specialized', 'implementation', 'allow', 'efficient', 'generic', 'collection', 'method', 'c++', 'java', 'nest', 'generic', 'type', 'dictionary', 'string', 'list', 'int', 'valid', 'type', 'advise', 'member', 'signature', 'code', 'analysis', 'design', 'rules']"
3196,".NET allows six varieties of generic type constraints using the where keyword including restricting generic types to be value types, to be classes, to have constructors, and to implement interfaces.27 Below is an example with an interface constraint:","['.net', 'allow', 'variety', 'generic', 'type', 'constraint', 'keyword', 'include', 'restrict', 'generic', 'type', 'value', 'type', 'class', 'constructor', 'implement', 'interfaces', 'example', 'interface', 'constraint']"
3197,"The MakeAtLeast method allows operation on arrays, with elements of generic type T. The method's type constraint indicates that the method is applicable to any type T that implements the generic IComparable<T> interface. This ensures a compile time error, if the method is called if the type does not support comparison. The interface provides the generic method CompareToT.","['makeatleast', 'method', 'allow', 'operation', 'array', 'element', 'generic', 'type', 'method', 'type', 'constraint', 'indicate', 'method', 'applicable', 'type', 'implement', 'generic', 'icomparable', 'interface', 'ensure', 'compile', 'time', 'error', 'method', 'call', 'type', 'support', 'comparison', 'interface', 'provide', 'generic', 'method', 'comparetot.']"
3198,"The above method could also be written without generic types, simply using the non-generic Array type. However, since arrays are contravariant, the casting would not be type safe, and the compiler would be unable to find certain possible errors that would otherwise be caught when using generic types. In addition, the method would need to access the array items as objects instead, and would require casting to compare two elements. For value types like types such as int this requires a boxing conversion, although this can be worked around using the Comparer<T> class, as is done in the standard collection classes.","['method', 'write', 'generic', 'type', 'simply', 'non', 'generic', 'array', 'type', 'array', 'contravariant', 'casting', 'type', 'safe', 'compiler', 'unable', 'find', 'certain', 'possible', 'error', 'catch', 'generic', 'type', 'addition', 'method', 'need', 'access', 'array', 'item', 'object', 'instead', 'require', 'cast', 'compare', 'element', 'value', 'type', 'like', 'type', 'int', 'require', 'boxing', 'conversion', 'work', 'comparer', 'class', 'standard', 'collection', 'class']"
3199,A notable behavior of static members in a generic .NET class is static member instantiation per run-time type see example below.,"['notable', 'behavior', 'static', 'member', 'generic', '.net', 'class', 'static', 'member', 'instantiation', 'run', 'time', 'type', 'example']"
3200,"Delphi's Object Pascal dialect acquired generics in the Delphi 2007 release, initially only with the now discontinued .NET compiler before being added to the native code in the Delphi 2009 release. The semantics and capabilities of Delphi generics are largely modelled on those had by generics in .NET 2.0, though the implementation is by necessity quite different. Here's a more or less direct translation of the first C# example shown above:","['delphi', 'object', 'pascal', 'dialect', 'acquire', 'generic', 'delphi', '2007', 'release', 'initially', 'discontinue', '.net', 'compiler', 'add', 'native', 'code', 'delphi', '2009', 'release', 'semantic', 'capability', 'delphi', 'generic', 'largely', 'model', 'generic', '.net', '2', 'implementation', 'necessity', 'different', 'direct', 'translation', 'example', 'show']"
3201,"As with C#, methods as well as whole types can have one or more type parameters. In the example, TArray is a generic type defined by the language and MakeAtLeast a generic method. The available constraints are very similar to the available constraints in C#: any value type, any class, a specific class or interface, and a class with a parameterless constructor. Multiple constraints act as an additive union.","['method', 'type', 'type', 'parameter', 'example', 'tarray', 'generic', 'type', 'define', 'language', 'makeatleast', 'generic', 'method', 'available', 'constraint', 'similar', 'available', 'constraint', 'value', 'type', 'class', 'specific', 'class', 'interface', 'class', 'parameterless', 'constructor', 'multiple', 'constraint', 'act', 'additive', 'union']"
3202,"Free Pascal implemented generics before Delphi, and with different syntax and semantics. However, since FPC version 2.6.0, the Delphi-style syntax is available when using the $mode Delphi language mode. Thus, Free Pascal programmers are able to use generics in whichever style they prefer.","['free', 'pascal', 'implement', 'generic', 'delphi', 'different', 'syntax', 'semantic', 'fpc', 'version', '2', 'delphi', 'style', 'syntax', 'available', 'mode', 'delphi', 'language', 'mode', 'free', 'pascal', 'programmer', 'able', 'use', 'generic', 'whichever', 'style', 'prefer']"
3203,"The type class mechanism of Haskell supports generic programming. Six of the predefined type classes in Haskell including Eq, the types that can be compared for equality, and Show, the types whose values can be rendered as strings have the special property of supporting derived instances. This means that a programmer defining a new type can state that this type is to be an instance of one of these special type classes, without providing implementations of the class methods as is usually necessary when declaring class instances. All the necessary methods will be ""derived"" – that is, constructed automatically – based on the structure of the type. For instance, the following declaration of a type of binary trees states that it is to be an instance of the classes Eq and Show:","['type', 'class', 'mechanism', 'haskell', 'support', 'generic', 'programming', 'predefined', 'type', 'class', 'haskell', 'include', 'type', 'compare', 'equality', 'type', 'value', 'render', 'string', 'special', 'property', 'support', 'derive', 'instance', 'mean', 'programmer', 'define', 'new', 'type', 'state', 'type', 'instance', 'special', 'type', 'class', 'provide', 'implementation', 'class', 'method', 'usually', 'necessary', 'declare', 'class', 'instance', 'necessary', 'method', 'derive', 'construct', 'automatically', 'base', 'structure', 'type', 'instance', 'follow', 'declaration', 'type', 'binary', 'tree', 'state', 'instance', 'class']"
3204,This results in an equality function == and a string representation function show being automatically defined for any type of the form BinTree T provided that T itself supports those operations.,"['result', 'equality', 'function', 'string', 'representation', 'function', 'automatically', 'define', 'type', 'form', 'bintree', 'provide', 'support', 'operation']"
3205,"The support for derived instances of Eq and Show makes their methods == and show generic in a qualitatively different way from parametrically polymorphic functions: these ""functions"" more accurately, type-indexed families of functions can be applied to values of various types, and although they behave differently for every argument type, little work is needed to add support for a new type. Ralf Hinze 2004 has shown that a similar effect can be achieved for user-defined type classes by certain programming techniques. Other researchers have proposed approaches to this and other kinds of genericity in the context of Haskell and extensions to Haskell discussed below.","['support', 'derive', 'instance', 'make', 'method', 'generic', 'qualitatively', 'different', 'way', 'parametrically', 'polymorphic', 'function', 'function', 'accurately', 'type', 'index', 'family', 'function', 'apply', 'value', 'type', 'behave', 'differently', 'argument', 'type', 'little', 'work', 'need', 'add', 'support', 'new', 'type', 'ralf', 'hinze', '2004', 'show', 'similar', 'effect', 'achieve', 'user', 'define', 'type', 'class', 'certain', 'programming', 'technique', 'researcher', 'propose', 'approach', 'kind', 'genericity', 'context', 'haskell', 'extension', 'haskell', 'discuss']"
3206,"PolyP was the first generic programming language extension to Haskell. In PolyP, generic functions are called polytypic. The language introduces a special construct in which such polytypic functions can be defined via structural induction over the structure of the pattern functor of a regular datatype. Regular datatypes in PolyP are a subset of Haskell datatypes. A regular datatype t must be of kind * → *, and if a is the formal type argument in the definition, then all recursive calls to t must have the form t a. These restrictions rule out higher-kinded datatypes as well as nested datatypes, where the recursive calls are of a different form. The flatten function in PolyP is here provided as an example:","['polyp', 'generic', 'programming', 'language', 'extension', 'haskell', 'polyp', 'generic', 'function', 'call', 'polytypic', 'language', 'introduce', 'special', 'construct', 'polytypic', 'function', 'define', 'structural', 'induction', 'structure', 'pattern', 'functor', 'regular', 'datatype', 'regular', 'datatype', 'polyp', 'subset', 'haskell', 'datatype', 'regular', 'datatype', 'kind', 'formal', 'type', 'argument', 'definition', 'recursive', 'call', 'form', 'restriction', 'rule', 'higher', 'kinde', 'datatype', 'nested', 'datatype', 'recursive', 'call', 'different', 'form', 'flatten', 'function', 'polyp', 'provide', 'example']"
3207,"Generic Haskell is another extension to Haskell, developed at Utrecht University in the Netherlands. The extensions it provides are:","['generic', 'haskell', 'extension', 'haskell', 'develop', 'utrecht', 'university', 'netherlands', 'extension', 'provide']"
3208,The resulting type-indexed value can be specialized to any type.,"['result', 'type', 'index', 'value', 'specialize', 'type']"
3209,"As an example, the equality function in Generic Haskell:28","['example', 'equality', 'function', 'generic', 'haskell']"
3210,Clean offers generic programming based § PolyP and the § Generic Haskell as supported by the GHC ≥ 6.0. It parametrizes by kind as those but offers overloading.,"['clean', 'offer', 'generic', 'programming', 'base', 'polyp', 'generic', 'haskell', 'support', 'ghc', '6', 'parametrize', 'kind', 'offer', 'overload']"
3211,"Languages in the ML family support generic programming through parametric polymorphism and generic modules called functors. Both Standard ML and OCaml provide functors, which are similar to class templates and to Ada's generic packages. Scheme syntactic abstractions also have a connection to genericity – these are in fact a superset of C++ templates.","['language', 'family', 'support', 'generic', 'programming', 'parametric', 'polymorphism', 'generic', 'module', 'call', 'functor', 'standard', 'ocaml', 'provide', 'functor', 'similar', 'class', 'template', 'ada', 'generic', 'package', 'scheme', 'syntactic', 'abstraction', 'connection', 'genericity', 'fact', 'superset', 'c++', 'template']"
3212,"A Verilog module may take one or more parameters, to which their actual values are assigned upon the instantiation of the module. One example is a generic register array where the array width is given via a parameter. Such an array, combined with a generic wire vector, can make a generic buffer or memory module with an arbitrary bit width out of a single module implementation.29","['verilog', 'module', 'parameter', 'actual', 'value', 'assign', 'instantiation', 'module', 'example', 'generic', 'register', 'array', 'array', 'width', 'give', 'parameter', 'array', 'combine', 'generic', 'wire', 'vector', 'generic', 'buffer', 'memory', 'module', 'arbitrary', 'bit', 'width', 'single', 'module', 'implementation']"
3213,"VHDL, being derived from Ada, also has generic capabilities. 30","['vhdl', 'derive', 'ada', 'generic', 'capability']"
3214,"C supports ""type-generic expressions"" using the _Generic keyword:31","['support', 'type', 'generic', 'expression', 'generic', 'keyword']"
3215,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3216,"David Lorge Parnas born February 10, 1941 is a Canadian early pioneer of software engineering, who developed the concept of information hiding in modular programming, which is an important element of object-oriented programming today. He is also noted for his advocacy of precise documentation.","['david', 'lorge', 'parnas', 'bear', 'february', '1941', 'canadian', 'early', 'pioneer', 'software', 'engineering', 'develop', 'concept', 'information', 'hiding', 'modular', 'programming', 'important', 'element', 'object', 'orient', 'programming', 'today', 'note', 'advocacy', 'precise', 'documentation']"
3217,"Parnas earned his PhD at Carnegie Mellon University in electrical engineering. Parnas also earned a professional engineering license in Canada and was one of the first to apply traditional engineering principles to software design. He worked there as a professor for many years. He also taught at the University of North Carolina at Chapel Hill U.S., at the Department of Computer Science of the Technische Universität Darmstadt Germany, the University of Victoria British Columbia, Canada, Queen's University in Kingston, Ontario, McMaster University in Hamilton, Ontario, and University of Limerick Republic of Ireland.","['parna', 'earn', 'phd', 'carnegie', 'mellon', 'university', 'electrical', 'engineering', 'parna', 'earn', 'professional', 'engineering', 'license', 'canada', 'apply', 'traditional', 'engineering', 'principle', 'software', 'design', 'work', 'professor', 'year', 'teach', 'university', 'north', 'carolina', 'chapel', 'hill', 'u.s.', 'department', 'computer', 'science', 'technische', 'universität', 'darmstadt', 'germany', 'university', 'victoria', 'british', 'columbia', 'canada', 'queen', 'university', 'kingston', 'ontario', 'mcmaster', 'university', 'hamilton', 'ontario', 'university', 'limerick', 'republic', 'ireland']"
3218,David Parnas received a number of awards and honors:,"['david', 'parnas', 'receive', 'number', 'award', 'honor']"
3219,"In modular design, his double dictumcitation needed of high cohesion within modules and loose coupling between modules is fundamental to modular design in software. However, in Parnas's seminal 1972 paper On the Criteria to Be Used in Decomposing Systems into Modules, this dictum is expressed in terms of information hiding, and the terms cohesion and coupling are not used. He never used them. 3","['modular', 'design', 'double', 'dictumcitation', 'need', 'high', 'cohesion', 'module', 'loose', 'coupling', 'module', 'fundamental', 'modular', 'design', 'software', 'parnas', 'seminal', '1972', 'paper', 'criteria', 'decomposing', 'systems', 'modules', 'dictum', 'express', 'term', 'information', 'hiding', 'term', 'cohesion', 'coupling']"
3220,"Dr Parnas took a public stand against the US Strategic Defense Initiative also known as ""Star Wars"" in the mid 1980s, arguing that it would be impossible to write an application of sufficient quality that it could be trusted to prevent a nuclear attack.4 He has also been in the forefront of those urging the professionalization of ""software engineering"" a term that he characterizes as ""an unconsummated marriage"". Dr. Parnas is also a heavy promoter of ethics in the field of software engineering.","['parnas', 'take', 'public', 'stand', 'strategic', 'defense', 'initiative', 'know', 'star', 'wars', 'mid', '1980', 'argue', 'impossible', 'write', 'application', 'sufficient', 'quality', 'trust', 'prevent', 'nuclear', 'attack', 'forefront', 'urge', 'professionalization', 'software', 'engineering', 'term', 'characterize', 'unconsummated', 'marriage', 'dr.', 'parnas', 'heavy', 'promoter', 'ethic', 'field', 'software', 'engineering']"
3221,"Parnas has joined the group of scientists which openly criticize the number-of-publications-based approach towards ranking academic production. On his November 2007 paper Stop the Numbers Game,5 he elaborates on several reasons on why the current number-based academic evaluation system used in many fields by universities all over the world be it either oriented to the amount of publications or the amount of quotations each of those get is flawed and, instead of contributing to scientific progress, it leads to knowledge stagnation.","['parna', 'join', 'group', 'scientist', 'openly', 'criticize', 'number', 'publication', 'base', 'approach', 'rank', 'academic', 'production', 'november', '2007', 'paper', 'stop', 'numbers', 'game', 'elaborate', 'reason', 'current', 'number', 'base', 'academic', 'evaluation', 'system', 'field', 'university', 'world', 'orient', 'publication', 'quotation', 'flawed', 'instead', 'contribute', 'scientific', 'progress', 'lead', 'knowledge', 'stagnation']"
3222,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3223,"In object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state member variables and implementations of behavior member functions or methods.12 In many languages, the class name is used as the name for the class the template itself, the name for the default constructor of the class a subroutine that creates objects, and as the type of objects generated by instantiating the class; these distinct concepts are easily conflated.2 Although, to the point of conflation, one could argue that is a feature inherent in a language because of its polymorphic nature and why these languages are so powerful, dynamic and adaptable for use compared to languages without polymorphism present. Thus they can model dynamic systems i.e. the real world, machine learning, AI more easily.","['object', 'orient', 'programming', 'class', 'extensible', 'program', 'code', 'template', 'create', 'object', 'provide', 'initial', 'value', 'state', 'member', 'variable', 'implementation', 'behavior', 'member', 'function', 'methods', 'language', 'class', 'class', 'template', 'default', 'constructor', 'class', 'subroutine', 'create', 'object', 'type', 'object', 'generate', 'instantiate', 'class', 'distinct', 'concept', 'easily', 'conflated', 'point', 'conflation', 'argue', 'feature', 'inherent', 'language', 'polymorphic', 'nature', 'language', 'powerful', 'dynamic', 'adaptable', 'use', 'compare', 'language', 'polymorphism', 'present', 'model', 'dynamic', 'system', 'i.e.', 'real', 'world', 'machine', 'learning', 'easily']"
3224,"When an object is created by a constructor of the class, the resulting object is called an instance of the class, and the member variables specific to the object are called instance variables, to contrast with the class variables shared across the class.","['object', 'create', 'constructor', 'class', 'result', 'object', 'call', 'instance', 'class', 'member', 'variable', 'specific', 'object', 'call', 'instance', 'variable', 'contrast', 'class', 'variable', 'share', 'class']"
3225,"In certain languages, classes are, as a matter of fact, only a compile-time feature new classes cannot be declared at run-time, while in other languages classes are first-class citizens, and are generally themselves objects typically of type .mw-parser-output .monospacedfont-family:monospace,monospaceClass or similar. In these languages, a class that creates classes within itself is called a metaclass.","['certain', 'language', 'class', 'matter', 'fact', 'compile', 'time', 'feature', 'new', 'class', 'declare', 'run', 'time', 'language', 'class', 'class', 'citizen', 'generally', 'object', 'typically', 'type', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospaceclass', 'similar', 'language', 'class', 'create', 'class', 'call', 'metaclass']"
3226,"In its most casual usage, people often refer to the ""class"" of an object, but narrowly speaking objects have type: the interface, namely the types of member variables, the signatures of member functions methods, and properties these satisfy. At the same time, a class has an implementation specifically the implementation of the methods, and can create objects of a given type, with a given implementation.3 In the terms of type theory, a class is an implementation‍—‌a concrete data structure and collection of subroutines‍—‌while a type is an interface. Different concrete classes can produce objects of the same abstract type depending on type system; for example, the type Stack might be implemented with two classes – SmallStack fast for small stacks, but scales poorly and ScalableStack scales well but high overhead for small stacks. Similarly, a given class may have several different constructors.","['casual', 'usage', 'people', 'refer', 'class', 'object', 'narrowly', 'speak', 'object', 'type', 'interface', 'type', 'member', 'variable', 'signature', 'member', 'function', 'method', 'property', 'satisfy', 'time', 'class', 'implementation', 'specifically', 'implementation', 'method', 'create', 'object', 'give', 'type', 'give', 'implementation', 'term', 'type', 'theory', 'class', 'implementation\u200d—\u200ca', 'concrete', 'data', 'structure', 'collection', 'subroutines\u200d—\u200cwhile', 'type', 'interface', 'different', 'concrete', 'class', 'produce', 'object', 'abstract', 'type', 'depend', 'type', 'system', 'example', 'type', 'stack', 'implement', 'class', 'smallstack', 'fast', 'small', 'stack', 'scale', 'poorly', 'scalablestack', 'scale', 'high', 'overhead', 'small', 'stack', 'similarly', 'give', 'class', 'different', 'constructor']"
3227,"Class types generally represent nouns, such as a person, place or thing, or something nominalized, and a class represents an implementation of these. For example, a Banana type might represent the properties and functionality of bananas in general, while the ABCBanana and XYZBanana classes would represent ways of producing bananas say, banana suppliers or data structures and functions to represent and draw bananas in a video game. The ABCBanana class could then produce particular bananas: instances of the ABCBanana class would be objects of type Banana. Often only a single implementation of a type is given, in which case the class name is often identical with the type name.","['class', 'type', 'generally', 'represent', 'noun', 'person', 'place', 'thing', 'nominalize', 'class', 'represent', 'implementation', 'example', 'banana', 'type', 'represent', 'property', 'functionality', 'banana', 'general', 'abcbanana', 'xyzbanana', 'class', 'represent', 'way', 'produce', 'banana', 'banana', 'supplier', 'datum', 'structure', 'function', 'represent', 'draw', 'banana', 'video', 'game', 'abcbanana', 'class', 'produce', 'particular', 'banana', 'instance', 'abcbanana', 'class', 'object', 'type', 'banana', 'single', 'implementation', 'type', 'give', 'case', 'class', 'identical', 'type']"
3228,"Classes are composed from structural and behavioral constituents.1 Programming languages that include classes as a programming construct offer support, for various class-related features, and the syntax required to use these features varies greatly from one programming language to another.","['class', 'compose', 'structural', 'behavioral', 'constituents', 'programming', 'language', 'include', 'class', 'programming', 'construct', 'offer', 'support', 'class', 'relate', 'feature', 'syntax', 'require', 'use', 'feature', 'vary', 'greatly', 'programming', 'language']"
3229,"A class contains data field descriptions or properties, fields, data members, or attributes. These are usually field types and names that will be associated with state variables at program run time; these state variables either belong to the class or specific instances of the class. In most languages, the structure defined by the class determines the layout of the memory used by its instances. Other implementations are possible: for example, objects in Python use associative key-value containers.4","['class', 'contain', 'data', 'field', 'description', 'property', 'field', 'datum', 'member', 'attribute', 'usually', 'field', 'type', 'name', 'associate', 'state', 'variable', 'program', 'run', 'time', 'state', 'variable', 'belong', 'class', 'specific', 'instance', 'class', 'language', 'structure', 'define', 'class', 'determine', 'layout', 'memory', 'instance', 'implementation', 'possible', 'example', 'object', 'python', 'use', 'associative', 'key', 'value', 'containers']"
3230,"Some programming languages such as Eiffel support specification of invariants as part of the definition of the class, and enforce them through the type system. Encapsulation of state is necessary for being able to enforce the invariants of the class.","['programming', 'language', 'eiffel', 'support', 'specification', 'invariant', 'definition', 'class', 'enforce', 'type', 'system', 'encapsulation', 'state', 'necessary', 'able', 'enforce', 'invariant', 'class']"
3231,"The behavior of class or its instances is defined using methods. Methods are subroutines with the ability to operate on objects or classes. These operations may alter the state of an object or simply provide ways of accessing it.5 Many kinds of methods exist, but support for them varies across languages. Some types of methods are created and called by programmer code, while other special methods—such as constructors, destructors, and conversion operators—are created and called by compiler-generated code. A language may also allow the programmer to define and call these special methods.67","['behavior', 'class', 'instance', 'define', 'method', 'method', 'subroutine', 'ability', 'operate', 'object', 'class', 'operation', 'alter', 'state', 'object', 'simply', 'provide', 'way', 'access', 'it', 'kind', 'method', 'exist', 'support', 'vary', 'language', 'type', 'method', 'create', 'call', 'programmer', 'code', 'special', 'method', 'constructor', 'destructor', 'conversion', 'operator', 'create', 'call', 'compiler', 'generate', 'code', 'language', 'allow', 'programmer', 'define', 'special', 'methods']"
3232,"Every class implements or realizes an interface by providing structure and behavior. Structure consists of data and state, and behavior consists of code that specifies how methods are implemented.8 There is a distinction between the definition of an interface and the implementation of that interface; however, this line is blurred in many programming languages because class declarations both define and implement an interface. Some languages, however, provide features that separate interface and implementation. For example, an abstract class can define an interface without providing implementation.","['class', 'implement', 'realize', 'interface', 'provide', 'structure', 'behavior', 'structure', 'consist', 'datum', 'state', 'behavior', 'consist', 'code', 'specify', 'method', 'implemented', 'distinction', 'definition', 'interface', 'implementation', 'interface', 'line', 'blur', 'programming', 'language', 'class', 'declaration', 'define', 'implement', 'interface', 'language', 'provide', 'feature', 'separate', 'interface', 'implementation', 'example', 'abstract', 'class', 'define', 'interface', 'provide', 'implementation']"
3233,Languages that support class inheritance also allow classes to inherit interfaces from the classes that they are derived from.,"['language', 'support', 'class', 'inheritance', 'allow', 'class', 'inherit', 'interface', 'class', 'derive']"
3234,"For example, if ""class A"" inherits from ""class B"" and if ""class B"" implements the interface ""interface B"" then ""class A"" also inherits the functionalityconstants and methods declaration provided by ""interface B"".","['example', 'class', 'inherit', 'class', 'class', 'implement', 'interface', 'interface', 'class', 'inherit', 'functionalityconstant', 'method', 'declaration', 'provide', 'interface']"
3235,"In languages that support access specifiers, the interface of a class is considered to be the set of public members of the class, including both methods and attributes via implicit getter and setter methods; any private members or internal data structures are not intended to be depended on by external code and thus are not part of the interface.","['language', 'support', 'access', 'specifier', 'interface', 'class', 'consider', 'set', 'public', 'member', 'class', 'include', 'method', 'attribute', 'implicit', 'getter', 'setter', 'method', 'private', 'member', 'internal', 'datum', 'structure', 'intend', 'depend', 'external', 'code', 'interface']"
3236,Object-oriented programming methodology dictates that the operations of any interface of a class are to be independent of each other. It results in a layered design where clients of an interface use the methods declared in the interface. An interface places no requirements for clients to invoke the operations of one interface in any particular order. This approach has the benefit that client code can assume that the operations of an interface are available for use whenever the client has access to the object.9citation needed,"['object', 'orient', 'programming', 'methodology', 'dictate', 'operation', 'interface', 'class', 'independent', 'result', 'layered', 'design', 'client', 'interface', 'use', 'method', 'declare', 'interface', 'interface', 'place', 'requirement', 'client', 'invoke', 'operation', 'interface', 'particular', 'order', 'approach', 'benefit', 'client', 'code', 'assume', 'operation', 'interface', 'available', 'use', 'client', 'access', 'objectcitation', 'need']"
3237,"The buttons on the front of your television set are the interface between you and the electrical wiring on the other side of its plastic casing. You press the ""power"" button to toggle the television on and off. In this example, your particular television is the instance, each method is represented by a button, and all the buttons together compose the interface other television sets that are the same model as yours would have the same interface. In its most common form, an interface is a specification of a group of related methods without any associated implementation of the methods.","['button', 'television', 'set', 'interface', 'electrical', 'wiring', 'plastic', 'casing', 'press', 'power', 'button', 'toggle', 'television', 'example', 'particular', 'television', 'instance', 'method', 'represent', 'button', 'button', 'compose', 'interface', 'television', 'set', 'model', 'interface', 'common', 'form', 'interface', 'specification', 'group', 'related', 'method', 'associate', 'implementation', 'method']"
3238,"A television set also has a myriad of attributes, such as size and whether it supports colour, which together comprise its structure. A class represents the full description of a television, including its attributes structure and buttons interface.","['television', 'set', 'myriad', 'attribute', 'size', 'support', 'colour', 'comprise', 'structure', 'class', 'represent', 'description', 'television', 'include', 'attribute', 'structure', 'button', 'interface']"
3239,"Getting the total number of televisions manufactured could be a static method of the television class. This method is clearly associated with the class, yet is outside the domain of each individual instance of the class. A static method that finds a particular instance out of the set of all television objects is another example.","['get', 'total', 'number', 'television', 'manufacture', 'static', 'method', 'television', 'class', 'method', 'clearly', 'associate', 'class', 'outside', 'domain', 'individual', 'instance', 'class', 'static', 'method', 'find', 'particular', 'instance', 'set', 'television', 'object', 'example']"
3240,The following is a common set of access specifiers:10,"['follow', 'common', 'set', 'access', 'specifiers']"
3241,"Although many object-oriented languages support the above access specifiers, their semantics may differ.","['object', 'orient', 'language', 'support', 'access', 'specifier', 'semantic', 'differ']"
3242,"Object-oriented design uses the access specifiers in conjunction with careful design of public method implementations to enforce class invariants—constraints on the state of the objects. A common usage of access specifiers is to separate the internal data of a class from its interface: the internal structure is made private, while public accessor methods can be used to inspect or alter such private data.","['object', 'orient', 'design', 'use', 'access', 'specifier', 'conjunction', 'careful', 'design', 'public', 'method', 'implementation', 'enforce', 'class', 'invariant', 'constraint', 'state', 'object', 'common', 'usage', 'access', 'specifier', 'separate', 'internal', 'datum', 'class', 'interface', 'internal', 'structure', 'private', 'public', 'accessor', 'method', 'inspect', 'alter', 'private', 'datum']"
3243,"Access specifiers do not necessarily control visibility, in that even private members may be visible to client external code. In some languages, an inaccessible but visible member may be referred to at run-time for example, by a pointer returned from a member function, but an attempt to use it by referring to the name of the member from client code will be prevented by the type checker.11","['access', 'specifier', 'necessarily', 'control', 'visibility', 'private', 'member', 'visible', 'client', 'external', 'code', 'language', 'inaccessible', 'visible', 'member', 'refer', 'run', 'time', 'example', 'pointer', 'return', 'member', 'function', 'attempt', 'use', 'refer', 'member', 'client', 'code', 'prevent', 'type', 'checker']"
3244,"The various object-oriented programming languages enforce member accessibility and visibility to various degrees, and depending on the language's type system and compilation policies, enforced at either compile-time or run-time. For example, the Java language does not allow client code that accesses the private data of a class to compile. 12 In the C++ language, private methods are visible, but not accessible in the interface; however, they may be made invisible by explicitly declaring fully abstract classes that represent the interfaces of the class.13","['object', 'orient', 'programming', 'language', 'enforce', 'member', 'accessibility', 'visibility', 'degree', 'depend', 'language', 'type', 'system', 'compilation', 'policy', 'enforce', 'compile', 'time', 'run', 'time', 'example', 'java', 'language', 'allow', 'client', 'code', 'access', 'private', 'datum', 'class', 'compile', 'c++', 'language', 'private', 'method', 'visible', 'accessible', 'interface', 'invisible', 'explicitly', 'declare', 'fully', 'abstract', 'class', 'represent', 'interface', 'class']"
3245,Some languages feature other accessibility schemes:,"['language', 'feature', 'accessibility', 'scheme']"
3246,"In addition to the design of standalone classes, programming languages may support more advanced class design based upon relationships between classes. The inter-class relationship design capabilities commonly provided are compositional and hierarchical.","['addition', 'design', 'standalone', 'class', 'programming', 'language', 'support', 'advanced', 'class', 'design', 'base', 'relationship', 'class', 'inter', 'class', 'relationship', 'design', 'capability', 'commonly', 'provide', 'compositional', 'hierarchical']"
3247,"Classes can be composed of other classes, thereby establishing a compositional relationship between the enclosing class and its embedded classes. Compositional relationship between classes is also commonly known as a has-a relationship.16 For example, a class ""Car"" could be composed of and contain a class ""Engine"". Therefore, a Car has an Engine. One aspect of composition is containment, which is the enclosure of component instances by the instance that has them. If an enclosing object contains component instances by value, the components and their enclosing object have a similar lifetime. If the components are contained by reference, they may not have a similar lifetime.17 For example, in Objective-C 2.0:","['class', 'compose', 'class', 'establish', 'compositional', 'relationship', 'enclose', 'class', 'embed', 'class', 'compositional', 'relationship', 'class', 'commonly', 'know', 'relationship', 'example', 'class', 'car', 'compose', 'contain', 'class', 'engine', 'car', 'engine', 'aspect', 'composition', 'containment', 'enclosure', 'component', 'instance', 'instance', 'enclose', 'object', 'contain', 'component', 'instance', 'value', 'component', 'enclose', 'object', 'similar', 'lifetime', 'component', 'contain', 'reference', 'similar', 'lifetime', 'example', 'objective', '2']"
3248,"This Car class has an instance of NSString a string object, Engine, and NSArray an array object.","['car', 'class', 'instance', 'nsstring', 'string', 'object', 'engine', 'nsarray', 'array', 'object']"
3249,"Classes can be derived from one or more existing classes, thereby establishing a hierarchical relationship between the derived-from classes base classes, parent classes or .mw-parser-output .vanchor>:target~.vanchor-textbackground-color:#b1d2ffsuperclasses and the derived class child class or subclass . The relationship of the derived class to the derived-from classes is commonly known as an is-a relationship.18 For example, a class 'Button' could be derived from a class 'Control'. Therefore, a Button is a Control. Structural and behavioral members of the parent classes are inherited by the child class. Derived classes can define additional structural members data fields and behavioral members methods in addition to those that they inherit and are therefore specializations of their superclasses. Also, derived classes can override inherited methods if the language allows.","['class', 'derive', 'exist', 'class', 'establish', 'hierarchical', 'relationship', 'derive', 'class', 'base', 'class', 'parent', 'class', '.mw', 'parser', 'output', '.vanchor>:target~.vanchor', 'textbackground', 'color:#b1d2ffsuperclasse', 'derive', 'class', 'child', 'class', 'subclass', 'relationship', 'derive', 'class', 'derive', 'class', 'commonly', 'know', 'relationship', 'example', 'class', 'button', 'derive', 'class', 'control', 'button', 'control', 'structural', 'behavioral', 'member', 'parent', 'class', 'inherit', 'child', 'class', 'derive', 'class', 'define', 'additional', 'structural', 'member', 'datum', 'field', 'behavioral', 'member', 'method', 'addition', 'inherit', 'specialization', 'superclass', 'derive', 'class', 'override', 'inherit', 'method', 'language', 'allow']"
3250,"Not all languages support multiple inheritance. For example, Java allows a class to implement multiple interfaces, but only inherit from one class.19 If multiple inheritance is allowed, the hierarchy is a directed acyclic graph or DAG for short, otherwise it is a tree. The hierarchy has classes as nodes and inheritance relationships as links. Classes in the same level are more likely to be associated than classes in different levels. The levels of this hierarchy are called layers or levels of abstraction.","['language', 'support', 'multiple', 'inheritance', 'example', 'java', 'allow', 'class', 'implement', 'multiple', 'interface', 'inherit', 'class', 'multiple', 'inheritance', 'allow', 'hierarchy', 'directed', 'acyclic', 'graph', 'dag', 'short', 'tree', 'hierarchy', 'class', 'node', 'inheritance', 'relationship', 'link', 'class', 'level', 'likely', 'associate', 'class', 'different', 'level', 'level', 'hierarchy', 'call', 'layer', 'level', 'abstraction']"
3251,"Example Simplified Objective-C 2.0 code, from iPhone SDK:","['example', 'simplified', 'objective', '2', 'code', 'iphone', 'sdk']"
3252,"In this example, a UITableView is a UIScrollView is a UIView is a UIResponder is an NSObject.","['example', 'uitableview', 'uiscrollview', 'uiview', 'uiresponder', 'nsobject']"
3253,"Conceptually, a superclass is a superset of its subclasses. For example, a common class hierarchy would involve GraphicObject as a superclass of Rectangle and Ellipse, while Square would be a subclass of Rectangle. These are all subset relations in set theory as well, i.e., all squares are rectangles but not all rectangles are squares.","['conceptually', 'superclass', 'superset', 'subclass', 'example', 'common', 'class', 'hierarchy', 'involve', 'graphicobject', 'superclass', 'rectangle', 'ellipse', 'square', 'subclass', 'rectangle', 'subset', 'relation', 'set', 'theory', 'i.e.', 'square', 'rectangle', 'rectangle', 'square']"
3254,"A common conceptual error is to mistake a part of relation with a subclass. For example, a car and truck are both kinds of vehicles and it would be appropriate to model them as subclasses of a vehicle class. However, it would be an error to model the component parts of the car as subclass relations. For example, a car is composed of an engine and body, but it would not be appropriate to model engine or body as a subclass of car.","['common', 'conceptual', 'error', 'mistake', 'relation', 'subclass', 'example', 'car', 'truck', 'kind', 'vehicle', 'appropriate', 'model', 'subclass', 'vehicle', 'class', 'error', 'model', 'component', 'part', 'car', 'subclass', 'relation', 'example', 'car', 'compose', 'engine', 'body', 'appropriate', 'model', 'engine', 'body', 'subclass', 'car']"
3255,"In object-oriented modeling these kinds of relations are typically modeled as object properties. In this example, the Car class would have a property called parts. parts would be typed to hold a collection of objects, such as instances of Body, Engine, Tires, etc. Object modeling languages such as UML include capabilities to model various aspects of ""part of"" and other kinds of relations – data such as the cardinality of the objects, constraints on input and output values, etc. This information can be utilized by developer tools to generate additional code beside the basic data definitions for the objects, such as error checking on get and set methods.20","['object', 'orient', 'model', 'kind', 'relation', 'typically', 'model', 'object', 'property', 'example', 'car', 'class', 'property', 'call', 'part', 'part', 'type', 'hold', 'collection', 'object', 'instance', 'body', 'engine', 'tires', 'etc', 'object', 'modeling', 'language', 'uml', 'include', 'capability', 'model', 'aspect', 'kind', 'relation', 'datum', 'cardinality', 'object', 'constraint', 'input', 'output', 'value', 'etc', 'information', 'utilize', 'developer', 'tool', 'generate', 'additional', 'code', 'basic', 'datum', 'definition', 'object', 'error', 'checking', 'set', 'methods']"
3256,"One important question when modeling and implementing a system of object classes is whether a class can have one or more superclasses. In the real world with actual sets it would be rare to find sets that didn't intersect with more than one other set. However, while some systems such as Flavors and CLOS provide a capability for more than one parent to do so at run time introduces complexity that many in the object-oriented community consider antithetical to the goals of using object classes in the first place. Understanding which class will be responsible for handling a message can get complex when dealing with more than one superclass. If used carelessly this feature can introduce some of the same system complexity and ambiguity classes were designed to avoid.21","['important', 'question', 'model', 'implement', 'system', 'object', 'class', 'class', 'superclass', 'real', 'world', 'actual', 'set', 'rare', 'find', 'set', 'intersect', 'set', 'system', 'flavors', 'clos', 'provide', 'capability', 'parent', 'run', 'time', 'introduce', 'complexity', 'object', 'orient', 'community', 'consider', 'antithetical', 'goal', 'object', 'class', 'place', 'understand', 'class', 'responsible', 'handle', 'message', 'complex', 'deal', 'superclass', 'carelessly', 'feature', 'introduce', 'system', 'complexity', 'ambiguity', 'class', 'design', 'avoid']"
3257,"Most modern object-oriented languages such as Smalltalk and Java require single inheritance at run time. For these languages, multiple inheritance may be useful for modeling but not for an implementation.","['modern', 'object', 'orient', 'language', 'smalltalk', 'java', 'require', 'single', 'inheritance', 'run', 'time', 'language', 'multiple', 'inheritance', 'useful', 'modeling', 'implementation']"
3258,"However, semantic web application objects do have multiple superclasses. The volatility of the Internet requires this level of flexibility and the technology standards such as the Web Ontology Language OWL are designed to support it.","['semantic', 'web', 'application', 'object', 'multiple', 'superclass', 'volatility', 'internet', 'require', 'level', 'flexibility', 'technology', 'standard', 'web', 'ontology', 'language', 'owl', 'design', 'support']"
3259,"A similar issue is whether or not the class hierarchy can be modified at run time. Languages such as Flavors, CLOS, and Smalltalk all support this feature as part of their meta-object protocols. Since classes are themselves first-class objects, it is possible to have them dynamically alter their structure by sending them the appropriate messages. Other languages that focus more on strong typing such as Java and C++ do not allow the class hierarchy to be modified at run time. Semantic web objects have the capability for run time changes to classes. The rational is similar to the justification for allowing multiple superclasses, that the Internet is so dynamic and flexible that dynamic changes to the hierarchy are required to manage this volatility.22","['similar', 'issue', 'class', 'hierarchy', 'modify', 'run', 'time', 'language', 'flavors', 'clos', 'smalltalk', 'support', 'feature', 'meta', 'object', 'protocol', 'class', 'class', 'object', 'possible', 'dynamically', 'alter', 'structure', 'send', 'appropriate', 'message', 'language', 'focus', 'strong', 'typing', 'java', 'c++', 'allow', 'class', 'hierarchy', 'modify', 'run', 'time', 'semantic', 'web', 'object', 'capability', 'run', 'time', 'change', 'class', 'rational', 'similar', 'justification', 'allow', 'multiple', 'superclass', 'internet', 'dynamic', 'flexible', 'dynamic', 'change', 'hierarchy', 'require', 'manage', 'volatility']"
3260,"Although class-based languages are commonly assumed to support inheritance, inheritance is not an intrinsic aspect of the concept of classes. Some languages, often referred to as ""object-based languages"", support classes yet do not support inheritance. Examples of object-based languages include earlier versions of Visual Basic.","['class', 'base', 'language', 'commonly', 'assume', 'support', 'inheritance', 'inheritance', 'intrinsic', 'aspect', 'concept', 'class', 'language', 'refer', 'object', 'base', 'language', 'support', 'class', 'support', 'inheritance', 'example', 'object', 'base', 'language', 'include', 'early', 'version', 'visual', 'basic']"
3261,"In object-oriented analysis and in UML, an association between two classes represents a collaboration between the classes or their corresponding instances. Associations have direction; for example, a bi-directional association between two classes indicates that both of the classes are aware of their relationship.23 Associations may be labeled according to their name or purpose.24","['object', 'orient', 'analysis', 'uml', 'association', 'class', 'represent', 'collaboration', 'class', 'correspond', 'instance', 'association', 'direction', 'example', 'directional', 'association', 'class', 'indicate', 'class', 'aware', 'relationship', 'associations', 'label', 'accord', 'purpose']"
3262,"An association role is given end of an association and describes the role of the corresponding class. For example, a ""subscriber"" role describes the way instances of the class ""Person"" participate in a ""subscribes-to"" association with the class ""Magazine"". Also, a ""Magazine"" has the ""subscribed magazine"" role in the same association. Association role multiplicity describes how many instances correspond to each instance of the other class of the association. Common multiplicities are ""0..1"", ""1..1"", ""1..*"" and ""0..*"", where the ""*"" specifies any number of instances.23","['association', 'role', 'give', 'end', 'association', 'describe', 'role', 'corresponding', 'class', 'example', 'subscriber', 'role', 'describe', 'way', 'instance', 'class', 'person', 'participate', 'subscribes', 'association', 'class', 'magazine', 'magazine', 'subscribe', 'magazine', 'role', 'association', 'association', 'role', 'multiplicity', 'describe', 'instance', 'correspond', 'instance', 'class', 'association', 'common', 'multiplicity', 'specify', 'number', 'instances']"
3263,"There are many categories of classes, some of which overlap.","['category', 'class', 'overlap']"
3264,"In a language that supports inheritance, an abstract class, or abstract base class ABC, is a class that cannot be instantiated because it is either labeled as abstract or it simply specifies abstract methods or virtual methods. An abstract class may provide implementations of some methods, and may also specify virtual methods via signatures that are to be implemented by direct or indirect descendants of the abstract class. Before a class derived from an abstract class can be instantiated, all abstract methods of its parent classes must be implemented by some class in the derivation chain.25","['language', 'support', 'inheritance', 'abstract', 'class', 'abstract', 'base', 'class', 'abc', 'class', 'instantiate', 'label', 'abstract', 'simply', 'specify', 'abstract', 'method', 'virtual', 'method', 'abstract', 'class', 'provide', 'implementation', 'method', 'specify', 'virtual', 'method', 'signature', 'implement', 'direct', 'indirect', 'descendant', 'abstract', 'class', 'class', 'derive', 'abstract', 'class', 'instantiate', 'abstract', 'method', 'parent', 'class', 'implement', 'class', 'derivation', 'chain']"
3265,"Most object-oriented programming languages allow the programmer to specify which classes are considered abstract and will not allow these to be instantiated. For example, in Java, C# and PHP, the keyword abstract is used.2627 In C++, an abstract class is a class having at least one abstract method given by the appropriate syntax in that language a pure virtual function in C++ parlance.25","['object', 'orient', 'programming', 'language', 'allow', 'programmer', 'specify', 'class', 'consider', 'abstract', 'allow', 'instantiate', 'example', 'java', 'php', 'keyword', 'abstract', 'used', 'c++', 'abstract', 'class', 'class', 'have', 'abstract', 'method', 'give', 'appropriate', 'syntax', 'language', 'pure', 'virtual', 'function', 'c++', 'parlance']"
3266,"A class consisting of only virtual methods is called a Pure Abstract Base Class or Pure ABC in C++ and is also known as an interface by users of the language.13 Other languages, notably Java and C#, support a variant of abstract classes called an interface via a keyword in the language. In these languages, multiple inheritance is not allowed, but a class can implement multiple interfaces. Such a class can only contain abstract publicly accessible methods.192829","['class', 'consist', 'virtual', 'method', 'call', 'pure', 'abstract', 'base', 'class', 'pure', 'abc', 'c++', 'know', 'interface', 'user', 'language', 'language', 'notably', 'java', 'support', 'variant', 'abstract', 'class', 'call', 'interface', 'keyword', 'language', 'language', 'multiple', 'inheritance', 'allow', 'class', 'implement', 'multiple', 'interface', 'class', 'contain', 'abstract', 'publicly', 'accessible', 'methods']"
3267,"A concrete class is a class that can be instantiated, as opposed to abstract classes, which cannot.","['concrete', 'class', 'class', 'instantiate', 'oppose', 'abstract', 'class']"
3268,"In some languages, classes can be declared in scopes other than the global scope. There are various types of such classes.","['language', 'class', 'declare', 'scope', 'global', 'scope', 'type', 'class']"
3269,"An inner class is a class defined within another class. The relationship between an inner class and its containing class can also be treated as another type of class association. An inner class is typically neither associated with instances of the enclosing class nor instantiated along with its enclosing class. Depending on language, it may or may not be possible to refer to the class from outside the enclosing class. A related concept is inner types, also known as inner data type or nested type, which is a generalization of the concept of inner classes. C++ is an example of a language that supports both inner classes and inner types via typedef declarations.3031","['inner', 'class', 'class', 'define', 'class', 'relationship', 'inner', 'class', 'contain', 'class', 'treat', 'type', 'class', 'association', 'inner', 'class', 'typically', 'associate', 'instance', 'enclosing', 'class', 'instantiate', 'enclose', 'class', 'depend', 'language', 'possible', 'refer', 'class', 'outside', 'enclosing', 'class', 'related', 'concept', 'inner', 'type', 'know', 'inner', 'datum', 'type', 'nested', 'type', 'generalization', 'concept', 'inner', 'class', 'c++', 'example', 'language', 'support', 'inner', 'class', 'inner', 'type', 'typedef', 'declarations']"
3270,"Another type is a local class, which is a class defined within a procedure or function. This limits references to the class name to within the scope where the class is declared. Depending on the semantic rules of the language, there may be additional restrictions on local classes compared to non-local ones. One common restriction is to disallow local class methods to access local variables of the enclosing function. For example, in C++, a local class may refer to static variables declared within its enclosing function, but may not access the function's automatic variables.32","['type', 'local', 'class', 'class', 'define', 'procedure', 'function', 'limit', 'reference', 'class', 'scope', 'class', 'declare', 'depend', 'semantic', 'rule', 'language', 'additional', 'restriction', 'local', 'class', 'compare', 'non', 'local', 'one', 'common', 'restriction', 'disallow', 'local', 'class', 'method', 'access', 'local', 'variable', 'enclosing', 'function', 'example', 'c++', 'local', 'class', 'refer', 'static', 'variable', 'declare', 'enclose', 'function', 'access', 'function', 'automatic', 'variables']"
3271,Metaclasses are classes whose instances are classes.33 A metaclass describes a common structure of a collection of classes and can implement a design pattern or describe particular kinds of classes. Metaclasses are often used to describe frameworks.34,"['metaclasse', 'class', 'instance', 'classes', 'metaclass', 'describe', 'common', 'structure', 'collection', 'class', 'implement', 'design', 'pattern', 'describe', 'particular', 'kind', 'class', 'metaclasse', 'describe', 'frameworks']"
3272,"In some languages, such as Python, Ruby or Smalltalk, a class is also an object; thus each class is an instance of a unique metaclass that is built into the language. 4 35 36 The Common Lisp Object System CLOS provides metaobject protocols MOPs to implement those classes and metaclasses. 37","['language', 'python', 'ruby', 'smalltalk', 'class', 'object', 'class', 'instance', 'unique', 'metaclass', 'build', 'language', 'common', 'lisp', 'object', 'system', 'clos', 'provide', 'metaobject', 'protocol', 'mop', 'implement', 'class', 'metaclasse']"
3273,"Non-subclassable classes allow programmers to design classes and hierarchies of classes where at some level in the hierarchy, further derivation is prohibited a stand-alone class may be also designated as non-subclassable, preventing the formation of any hierarchy. Contrast this to abstract classes, which imply, encourage, and require derivation in order to be used at all. A non-subclassable class is implicitly concrete.","['non', 'subclassable', 'class', 'allow', 'programmer', 'design', 'class', 'hierarchy', 'class', 'level', 'hierarchy', 'derivation', 'prohibit', 'stand', 'class', 'designate', 'non', 'subclassable', 'prevent', 'formation', 'hierarchy', 'contrast', 'abstract', 'class', 'imply', 'encourage', 'require', 'derivation', 'order', 'non', 'subclassable', 'class', 'implicitly', 'concrete']"
3274,"A non-subclassable class is created by declaring the class as sealed in C# or as final in Java or PHP.383940 For example, Java's String class is designated as final.41","['non', 'subclassable', 'class', 'create', 'declare', 'class', 'seal', 'final', 'java', 'php', 'example', 'java', 'string', 'class', 'designate', 'final']"
3275,Non-subclassable classes may allow a compiler in compiled languages to perform optimizations that are not available for subclassable classes. 42,"['non', 'subclassable', 'class', 'allow', 'compiler', 'compile', 'language', 'perform', 'optimization', 'available', 'subclassable', 'class']"
3276,"An open class is one that can be changed. Typically, an executable program cannot be changed by customers. Developers can often change some classes, but typically cannot change standard or built-in ones. In Ruby, all classes are open. In Python, classes can be created at runtime, and all can be modified afterwards.43 Objective-C categories permit the programmer to add methods to an existing class without the need to recompile that class or even have access to its source code.","['open', 'class', 'change', 'typically', 'executable', 'program', 'change', 'customer', 'developer', 'change', 'class', 'typically', 'change', 'standard', 'build', 'one', 'ruby', 'class', 'open', 'python', 'class', 'create', 'runtime', 'modify', 'afterwards', 'objective', 'category', 'permit', 'programmer', 'add', 'method', 'exist', 'class', 'need', 'recompile', 'class', 'access', 'source', 'code']"
3277,"Some languages have special support for mixins, though in any language with multiple inheritance a mixin is simply a class that does not represent an is-a-type-of relationship. Mixins are typically used to add the same methods to multiple classes; for example, a class UnicodeConversionMixin might provide a method called unicode_to_ascii when included in classes FileReader and WebPageScraper that do not share a common parent.","['language', 'special', 'support', 'mixin', 'language', 'multiple', 'inheritance', 'mixin', 'simply', 'class', 'represent', 'type', 'relationship', 'mixin', 'typically', 'add', 'method', 'multiple', 'class', 'example', 'class', 'unicodeconversionmixin', 'provide', 'method', 'call', 'unicode_to_ascii', 'include', 'class', 'filereader', 'webpagescraper', 'share', 'common', 'parent']"
3278,"In languages supporting the feature, a partial class is a class whose definition may be split into multiple pieces, within a single source-code file or across multiple files.44 The pieces are merged at compile-time, making compiler output the same as for a non-partial class.","['language', 'support', 'feature', 'partial', 'class', 'class', 'definition', 'split', 'multiple', 'piece', 'single', 'source', 'code', 'file', 'multiple', 'files', 'piece', 'merge', 'compile', 'time', 'make', 'compiler', 'output', 'non', 'partial', 'class']"
3279,"The primary motivation for introduction of partial classes is to facilitate the implementation of code generators, such as visual designers.44 It is otherwise a challenge or compromise to develop code generators that can manage the generated code when it is interleaved within developer-written code. Using partial classes, a code generator can process a separate file or coarse-grained partial class within a file, and is thus alleviated from intricately interjecting generated code via extensive parsing, increasing compiler efficiency and eliminating the potential risk of corrupting developer code. In a simple implementation of partial classes, the compiler can perform a phase of precompilation where it ""unifies"" all the parts of a partial class. Then, compilation can proceed as usual.","['primary', 'motivation', 'introduction', 'partial', 'class', 'facilitate', 'implementation', 'code', 'generator', 'visual', 'designers', 'challenge', 'compromise', 'develop', 'code', 'generator', 'manage', 'generate', 'code', 'interleave', 'developer', 'write', 'code', 'partial', 'class', 'code', 'generator', 'process', 'separate', 'file', 'coarse', 'grain', 'partial', 'class', 'file', 'alleviate', 'intricately', 'interject', 'generate', 'code', 'extensive', 'parsing', 'increase', 'compiler', 'efficiency', 'eliminate', 'potential', 'risk', 'corrupt', 'developer', 'code', 'simple', 'implementation', 'partial', 'class', 'compiler', 'perform', 'phase', 'precompilation', 'unify', 'part', 'partial', 'class', 'compilation', 'proceed', 'usual']"
3280,Other benefits and effects of the partial class feature include:,"['benefit', 'effect', 'partial', 'class', 'feature', 'include']"
3281,"Partial classes have existed in Smalltalk under the name of Class Extensions for considerable time. With the arrival of the .NET framework 2, Microsoft introduced partial classes, supported in both C# 2.0 and Visual Basic 2005. WinRT also supports partial classes.","['partial', 'class', 'exist', 'smalltalk', 'class', 'extensions', 'considerable', 'time', 'arrival', '.net', 'framework', 'microsoft', 'introduce', 'partial', 'class', 'support', '2', 'visual', 'basic', '2005', 'winrt', 'support', 'partial', 'class']"
3282,"This simple example, written in Visual Basic .NET, shows how parts of the same class are defined in two different files.","['simple', 'example', 'write', 'visual', 'basic', '.net', 'show', 'part', 'class', 'define', 'different', 'file']"
3283,"When compiled, the result is the same as if the two files were written as one, like this:","['compile', 'result', 'file', 'write', 'like']"
3284,"In Objective-C, partial classes, also known as categories, may even spread over multiple libraries and executables, like the following example. But a key difference is that Objective-C's categories can overwrite definitions in another interface declaration, and that categories aren't equal to original class definition the first requires the last.45 Instead, .NET partial class can't have conflicting definitions, and all partial definitions are equal to the others.44","['objective', 'partial', 'class', 'know', 'category', 'spread', 'multiple', 'library', 'executable', 'like', 'follow', 'example', 'key', 'difference', 'objective', 'category', 'overwrite', 'definition', 'interface', 'declaration', 'category', 'equal', 'original', 'class', 'definition', 'require', 'last', 'instead', '.net', 'partial', 'class', 'conflicting', 'definition', 'partial', 'definition', 'equal', 'others']"
3285,"In user-supplied library, a separate binary from Foundation framework, header file NSData+base64.h:","['user', 'supply', 'library', 'separate', 'binary', 'foundation', 'framework', 'header', 'file', 'nsdata+base64.h']"
3286,"And in an app, yet another separate binary file, source code file main.m:","['app', 'separate', 'binary', 'file', 'source', 'code', 'file', 'main.m']"
3287,The dispatcher will find both methods called over the NSData instance and invoke both of them correctly.,"['dispatcher', 'find', 'method', 'call', 'nsdata', 'instance', 'invoke', 'correctly']"
3288,"Uninstantiable classes allow programmers to group together per-class fields and methods that are accessible at runtime without an instance of the class. Indeed, instantiation is prohibited for this kind of class.","['uninstantiable', 'class', 'allow', 'programmer', 'group', 'class', 'field', 'method', 'accessible', 'runtime', 'instance', 'class', 'instantiation', 'prohibit', 'kind', 'class']"
3289,"For example, in C#, a class marked ""static"" can not be instantiated, can only have static members fields, methods, other, may not have instance constructors, and is sealed. 46","['example', 'class', 'mark', 'static', 'instantiate', 'static', 'member', 'field', 'method', 'instance', 'constructor', 'seal']"
3290,An unnamed class or anonymous class is a class that is not bound to a name or identifier upon definition.4748 This is analogous to named versus unnamed functions.,"['unnamed', 'class', 'anonymous', 'class', 'class', 'bind', 'identifi', 'definition', 'analogous', 'name', 'versus', 'unnamed', 'function']"
3291,The benefits of organizing software into object classes fall into three categories:49,"['benefit', 'organize', 'software', 'object', 'class', 'fall', 'categories']"
3292,"Object classes facilitate rapid development because they lessen the semantic gap between the code and the users. System analysts can talk to both developers and users using essentially the same vocabulary, talking about accounts, customers, bills, etc. Object classes often facilitate rapid development because most object-oriented environments come with powerful debugging and testing tools. Instances of classes can be inspected at run time to verify that the system is performing as expected. Also, rather than get dumps of core memory, most object-oriented environments have interpreted debugging capabilities so that the developer can analyze exactly where in the program the error occurred and can see which methods were called to which arguments and with what arguments.50","['object', 'class', 'facilitate', 'rapid', 'development', 'lessen', 'semantic', 'gap', 'code', 'user', 'system', 'analyst', 'talk', 'developer', 'user', 'essentially', 'vocabulary', 'talk', 'account', 'customer', 'bill', 'etc', 'object', 'class', 'facilitate', 'rapid', 'development', 'object', 'orient', 'environment', 'come', 'powerful', 'debug', 'testing', 'tool', 'instance', 'class', 'inspect', 'run', 'time', 'verify', 'system', 'perform', 'expect', 'dump', 'core', 'memory', 'object', 'orient', 'environment', 'interpret', 'debug', 'capability', 'developer', 'analyze', 'exactly', 'program', 'error', 'occur', 'method', 'call', 'argument', 'arguments']"
3293,Object classes facilitate ease of maintenance via encapsulation. When developers need to change the behavior of an object they can localize the change to just that object and its component parts. This reduces the potential for unwanted side effects from maintenance enhancements.,"['object', 'class', 'facilitate', 'ease', 'maintenance', 'encapsulation', 'developer', 'need', 'change', 'behavior', 'object', 'localize', 'change', 'object', 'component', 'part', 'reduce', 'potential', 'unwanted', 'effect', 'maintenance', 'enhancement']"
3294,Software re-use is also a major benefit of using Object classes. Classes facilitate re-use via inheritance and interfaces. When a new behavior is required it can often be achieved by creating a new class and having that class inherit the default behaviors and data of its superclass and then tailor some aspect of the behavior or data accordingly. Re-use via interfaces also known as methods occurs when another object wants to invoke rather than create a new kind of some object class. This method for re-use removes many of the common errors that can make their way into software when one program re-uses code from another.51,"['software', 'use', 'major', 'benefit', 'object', 'class', 'class', 'facilitate', 'use', 'inheritance', 'interface', 'new', 'behavior', 'require', 'achieve', 'create', 'new', 'class', 'have', 'class', 'inherit', 'default', 'behavior', 'datum', 'superclass', 'tailor', 'aspect', 'behavior', 'data', 'accordingly', 'use', 'interface', 'know', 'method', 'occur', 'object', 'want', 'invoke', 'create', 'new', 'kind', 'object', 'class', 'method', 'use', 'remove', 'common', 'error', 'way', 'software', 'program', 'use', 'code', 'another']"
3295,"As a data type, a class is usually considered as a compile-time construct.52 A language or library may also support prototype or factory metaobjects that represent run-time information about classes, or even represent metadata that provides access to reflection facilities and ability to manipulate data structure formats at run-time. Many languages distinguish this kind of run-time type information about classes from a class on the basis that the information is not needed at run-time. Some dynamic languages do not make strict distinctions between run-time and compile-time constructs, and therefore may not distinguish between metaobjects and classes.","['data', 'type', 'class', 'usually', 'consider', 'compile', 'time', 'construct', 'language', 'library', 'support', 'prototype', 'factory', 'metaobject', 'represent', 'run', 'time', 'information', 'class', 'represent', 'metadata', 'provide', 'access', 'reflection', 'facility', 'ability', 'manipulate', 'data', 'structure', 'format', 'run', 'time', 'language', 'distinguish', 'kind', 'run', 'time', 'type', 'information', 'class', 'class', 'basis', 'information', 'need', 'run', 'time', 'dynamic', 'language', 'strict', 'distinction', 'run', 'time', 'compile', 'time', 'construct', 'distinguish', 'metaobject', 'class']"
3296,"For example, if Human is a metaobject representing the class Person, then instances of class Person can be created by using the facilities of the Human metaobject.","['example', 'human', 'metaobject', 'represent', 'class', 'person', 'instance', 'class', 'person', 'create', 'facility', 'human', 'metaobject']"
3297,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3298,"In software engineering, a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design. It is not a finished design that can be transformed directly into source or machine code. Rather, it is a description or template for how to solve a problem that can be used in many different situations. Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system.","['software', 'engineering', 'software', 'design', 'pattern', 'general', 'reusable', 'solution', 'commonly', 'occur', 'problem', 'give', 'context', 'software', 'design', 'finished', 'design', 'transform', 'directly', 'source', 'machine', 'code', 'description', 'template', 'solve', 'problem', 'different', 'situation', 'design', 'pattern', 'formalize', 'good', 'practice', 'programmer', 'use', 'solve', 'common', 'problem', 'design', 'application', 'system']"
3299,"Object-oriented design patterns typically show relationships and interactions between classes or objects, without specifying the final application classes or objects that are involved. Patterns that imply mutable state may be unsuited for functional programming languages. Some patterns can be rendered unnecessary in languages that have built-in support for solving the problem they are trying to solve, and object-oriented patterns are not necessarily suitable for non-object-oriented languages.","['object', 'orient', 'design', 'pattern', 'typically', 'relationship', 'interaction', 'class', 'object', 'specify', 'final', 'application', 'class', 'object', 'involve', 'pattern', 'imply', 'mutable', 'state', 'unsuited', 'functional', 'programming', 'language', 'pattern', 'render', 'unnecessary', 'language', 'build', 'support', 'solve', 'problem', 'try', 'solve', 'object', 'orient', 'pattern', 'necessarily', 'suitable', 'non', 'object', 'orient', 'language']"
3300,Design patterns may be viewed as a structured approach to computer programming intermediate between the levels of a programming paradigm and a concrete algorithm.,"['design', 'pattern', 'view', 'structured', 'approach', 'computer', 'programming', 'intermediate', 'level', 'programming', 'paradigm', 'concrete', 'algorithm']"
3301,"Patterns originated as an architectural concept by Christopher Alexander as early as 1977 c.f. ""The Pattern of Streets,"" JOURNAL OF THE AIP, September, 1977, Vol. 32, No. 3, pp. 273–278. In 1987, Kent Beck and Ward Cunningham began experimenting with the idea of applying patterns to programming – specifically pattern languages – and presented their results at the OOPSLA conference that year.12 In the following years, Beck, Cunningham and others followed up on this work.","['pattern', 'originate', 'architectural', 'concept', 'christopher', 'alexander', 'early', '1977', 'c.f', 'pattern', 'streets', 'journal', 'aip', 'september', '1977', 'vol', '273–278', '1987', 'kent', 'beck', 'ward', 'cunningham', 'begin', 'experiment', 'idea', 'apply', 'pattern', 'programming', 'specifically', 'pattern', 'language', 'present', 'result', 'oopsla', 'conference', 'year', 'following', 'year', 'beck', 'cunningham', 'follow', 'work']"
3302,"Design patterns gained popularity in computer science after the book Design Patterns: Elements of Reusable Object-Oriented Software was published in 1994 by the so-called ""Gang of Four"" Gamma et al., which is frequently abbreviated as ""GoF"". That same year, the first Pattern Languages of Programming Conference was held, and the following year the Portland Pattern Repository was set up for documentation of design patterns. The scope of the term remains a matter of dispute. Notable books in the design pattern genre include:","['design', 'pattern', 'gain', 'popularity', 'computer', 'science', 'book', 'design', 'patterns', 'element', 'reusable', 'object', 'orient', 'software', 'publish', '1994', 'call', 'gang', 'gamma', 'frequently', 'abbreviate', 'gof', 'year', 'pattern', 'languages', 'programming', 'conference', 'hold', 'follow', 'year', 'portland', 'pattern', 'repository', 'set', 'documentation', 'design', 'pattern', 'scope', 'term', 'remain', 'matter', 'dispute', 'notable', 'book', 'design', 'pattern', 'genre', 'include']"
3303,"Although design patterns have been applied practically for a long time, formalization of the concept of design patterns languished for several years.3","['design', 'pattern', 'apply', 'practically', 'long', 'time', 'formalization', 'concept', 'design', 'pattern', 'languish', 'years']"
3304,"Design patterns can speed up the development process by providing tested, proven development paradigms.4 Effective software design requires considering issues that may not become visible until later in the implementation. Freshly written code can often have hidden subtle issues that take time to be detected, issues that sometimes can cause major problems down the road. Reusing design patterns helps to prevent such subtle issues,5 and it also improves code readability for coders and architects who are familiar with the patterns.","['design', 'pattern', 'speed', 'development', 'process', 'provide', 'test', 'prove', 'development', 'paradigms', 'effective', 'software', 'design', 'require', 'consider', 'issue', 'visible', 'later', 'implementation', 'freshly', 'write', 'code', 'hide', 'subtle', 'issue', 'time', 'detect', 'issue', 'cause', 'major', 'problem', 'road', 'reuse', 'design', 'pattern', 'help', 'prevent', 'subtle', 'issues', 'improve', 'code', 'readability', 'coder', 'architect', 'familiar', 'pattern']"
3305,"In order to achieve flexibility, design patterns usually introduce additional levels of indirection, which in some cases may complicate the resulting designs and hurt application performance.","['order', 'achieve', 'flexibility', 'design', 'pattern', 'usually', 'introduce', 'additional', 'level', 'indirection', 'case', 'complicate', 'result', 'design', 'hurt', 'application', 'performance']"
3306,"By definition, a pattern must be programmed anew into each application that uses it. Since some authors see this as a step backward from software reuse as provided by components, researchers have worked to turn patterns into components. Meyer and Arnout were able to provide full or partial componentization of two-thirds of the patterns they attempted.6","['definition', 'pattern', 'program', 'anew', 'application', 'use', 'author', 'step', 'backward', 'software', 'reuse', 'provide', 'component', 'researcher', 'work', 'turn', 'pattern', 'component', 'meyer', 'arnout', 'able', 'provide', 'partial', 'componentization', 'third', 'pattern', 'attempted']"
3307,"Software design techniques are difficult to apply to a broader range of problems.citation needed Design patterns provide general solutions, documented in a format that does not require specifics tied to a particular problem.","['software', 'design', 'technique', 'difficult', 'apply', 'broad', 'range', 'problems.citation', 'need', 'design', 'pattern', 'provide', 'general', 'solution', 'document', 'format', 'require', 'specific', 'tie', 'particular', 'problem']"
3308,"Design patterns are composed of several sections see § Documentation below. Of particular interest are the Structure, Participants, and Collaboration sections. These sections describe a design motif: a prototypical micro-architecture that developers copy and adapt to their particular designs to solve the recurrent problem described by the design pattern. A micro-architecture is a set of program constituents e.g., classes, methods... and their relationships. Developers use the design pattern by introducing in their designs this prototypical micro-architecture, which means that micro-architectures in their designs will have structure and organization similar to the chosen design motif.","['design', 'pattern', 'compose', 'section', 'documentation', 'particular', 'interest', 'structure', 'participants', 'collaboration', 'section', 'section', 'describe', 'design', 'motif', 'prototypical', 'micro', 'architecture', 'developer', 'copy', 'adapt', 'particular', 'design', 'solve', 'recurrent', 'problem', 'describe', 'design', 'pattern', 'micro', 'architecture', 'set', 'program', 'constituent', 'e.g.', 'class', 'method', 'relationship', 'developer', 'use', 'design', 'pattern', 'introduce', 'design', 'prototypical', 'micro', 'architecture', 'mean', 'micro', 'architecture', 'design', 'structure', 'organization', 'similar', 'choose', 'design', 'motif']"
3309,"Efforts have also been made to codify design patterns in particular domains, including use of existing design patterns as well as domain-specific design patterns. Examples include user interface design patterns,7 information visualization,8 secure design,9 ""secure usability"",10 Web design 11 and business model design.12","['effort', 'codify', 'design', 'pattern', 'particular', 'domain', 'include', 'use', 'exist', 'design', 'pattern', 'domain', 'specific', 'design', 'pattern', 'example', 'include', 'user', 'interface', 'design', 'patterns', 'information', 'visualization', 'secure', 'design', 'secure', 'usability', 'web', 'design', 'business', 'model', 'design']"
3310,The annual Pattern Languages of Programming Conference proceedings 13 include many examples of domain-specific patterns.,"['annual', 'pattern', 'languages', 'programming', 'conference', 'proceeding', 'include', 'example', 'domain', 'specific', 'pattern']"
3311,"Design patterns had originally been categorized into 3 sub-classifications based on what kind of problem they solve. Creational patterns provide the capability to create objects based on a required criterion and in a controlled way. Structural patterns are about organizing different classes and objects to form larger structures and provide new functionality. Finally, behavioral patterns are about identifying common communication patterns between objects and realizing these patterns.","['design', 'pattern', 'originally', 'categorize', 'sub', 'classification', 'base', 'kind', 'problem', 'solve', 'creational', 'pattern', 'provide', 'capability', 'create', 'object', 'base', 'require', 'criterion', 'control', 'way', 'structural', 'pattern', 'organize', 'different', 'class', 'object', 'form', 'large', 'structure', 'provide', 'new', 'functionality', 'finally', 'behavioral', 'pattern', 'identify', 'common', 'communication', 'pattern', 'object', 'realize', 'pattern']"
3312,Can be unsafe when implemented in some language/hardware combinations. It can therefore sometimes be considered an anti-pattern.,"['unsafe', 'implement', 'language', 'hardware', 'combination', 'consider', 'anti', 'pattern']"
3313,"The documentation for a design pattern describes the context in which the pattern is used, the forces within the context that the pattern seeks to resolve, and the suggested solution.25 There is no single, standard format for documenting design patterns. Rather, a variety of different formats have been used by different pattern authors. However, according to Martin Fowler, certain pattern forms have become more well-known than others, and consequently become common starting points for new pattern-writing efforts.26 One example of a commonly used documentation format is the one used by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides in their book Design Patterns. It contains the following sections:","['documentation', 'design', 'pattern', 'describe', 'context', 'pattern', 'force', 'context', 'pattern', 'seek', 'resolve', 'suggest', 'solution', 'single', 'standard', 'format', 'document', 'design', 'pattern', 'variety', 'different', 'format', 'different', 'pattern', 'author', 'accord', 'martin', 'fowler', 'certain', 'pattern', 'form', 'know', 'consequently', 'common', 'starting', 'point', 'new', 'pattern', 'writing', 'efforts', 'example', 'commonly', 'documentation', 'format', 'erich', 'gamma', 'richard', 'helm', 'ralph', 'johnson', 'john', 'vlissides', 'book', 'design', 'patterns', 'contain', 'follow', 'section']"
3314,"It has been observed that design patterns may just be a sign that some features are missing in a given programming language Java or C++ for instance. Peter Norvig demonstrates that 16 out of the 23 patterns in the Design Patterns book which is primarily focused on C++ are simplified or eliminated via direct language support in Lisp or Dylan.27 Related observations were made by Hannemann and Kiczales who implemented several of the 23 design patterns using an aspect-oriented programming language AspectJ and showed that code-level dependencies were removed from the implementations of 17 of the 23 design patterns and that aspect-oriented programming could simplify the implementations of design patterns.28 See also Paul Graham's essay ""Revenge of the Nerds"".29","['observe', 'design', 'pattern', 'sign', 'feature', 'miss', 'give', 'programming', 'language', 'java', 'c++', 'instance', 'peter', 'norvig', 'demonstrate', 'pattern', 'design', 'patterns', 'book', 'primarily', 'focus', 'c++', 'simplify', 'eliminate', 'direct', 'language', 'support', 'lisp', 'dylan', 'related', 'observation', 'hannemann', 'kiczales', 'implement', 'design', 'pattern', 'aspect', 'orient', 'programming', 'language', 'aspectj', 'show', 'code', 'level', 'dependency', 'remove', 'implementation', 'design', 'pattern', 'aspect', 'orient', 'programming', 'simplify', 'implementation', 'design', 'patterns', 'paul', 'graham', 'essay', 'revenge', 'nerds']"
3315,Inappropriate use of patterns may unnecessarily increase complexity.30,"['inappropriate', 'use', 'pattern', 'unnecessarily', 'increase', 'complexity']"
3316,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3317,"Modern C++ Design: Generic Programming and Design Patterns Applied is a book written by Andrei Alexandrescu, published in 2001 by Addison-Wesley. It has been regarded as ""one of the most important C++ books"" by Scott Meyers.1","['modern', 'c++', 'design', 'generic', 'programming', 'design', 'patterns', 'applied', 'book', 'write', 'andrei', 'alexandrescu', 'publish', '2001', 'addison', 'wesley', 'regard', 'important', 'c++', 'book', 'scott', 'meyers']"
3318,"The book makes use of and explores a C++ programming technique called template metaprogramming. While Alexandrescu didn't invent the technique, he has popularized it among programmers. His book contains solutions to practical problems which C++ programmers may face. Several phrases from the book are now used within the C++ community as generic terms: modern C++ as opposed to C/C++ style, policy-based design and typelist.","['book', 'make', 'use', 'explore', 'c++', 'programming', 'technique', 'call', 'template', 'metaprogramming', 'alexandrescu', 'invent', 'technique', 'popularize', 'programmer', 'book', 'contain', 'solution', 'practical', 'problem', 'c++', 'programmer', 'face', 'phrase', 'book', 'c++', 'community', 'generic', 'term', 'modern', 'c++', 'oppose', 'c++', 'style', 'policy', 'base', 'design', 'typelist']"
3319,All of the code described in the book is freely available in his library Loki. The book has been republished and translated into several languages since 2001.,"['code', 'describe', 'book', 'freely', 'available', 'library', 'loki', 'book', 'republish', 'translate', 'language', '2001']"
3320,"Policy-based design, also known as policy-based class design or policy-based programming, is the term used in Modern C++ Design for a design approach based on an idiom for C++ known as policies. It has been described as a compile-time variant of the strategy pattern, and has connections with C++ template metaprogramming. It was first popularized in C++ by Andrei Alexandrescu with Modern C++ Design and with his column Generic<Programming> in the C/C++ Users Journal, and it is currently closely associated with C++ and D as it requires a compiler with highly robust support for templates, which was not common before about 2003.","['policy', 'base', 'design', 'know', 'policy', 'base', 'class', 'design', 'policy', 'base', 'programming', 'term', 'modern', 'c++', 'design', 'design', 'approach', 'base', 'idiom', 'c++', 'know', 'policy', 'describe', 'compile', 'time', 'variant', 'strategy', 'pattern', 'connection', 'c++', 'template', 'metaprogramme', 'popularize', 'c++', 'andrei', 'alexandrescu', 'modern', 'c++', 'design', 'column', 'generic', 'programming', 'c++', 'users', 'journal', 'currently', 'closely', 'associate', 'c++', 'require', 'compiler', 'highly', 'robust', 'support', 'template', 'common', '2003']"
3321,"Previous examples of this design approach, based on parameterized generic code, include parametric modules functors of the ML languages,2 and C++ allocators for memory management policy.","['previous', 'example', 'design', 'approach', 'base', 'parameterized', 'generic', 'code', 'include', 'parametric', 'module', 'functor', 'languages', 'c++', 'allocator', 'memory', 'management', 'policy']"
3322,"The central idiom in policy-based design is a class template called the host class, taking several type parameters as input, which are instantiated with types selected by the user called policy classes, each implementing a particular implicit interface called a policy, and encapsulating some orthogonal or mostly orthogonal aspect of the behavior of the instantiated host class. By supplying a host class combined with a set of different, canned implementations for each policy, a library or module can support an exponential number of different behavior combinations, resolved at compile time, and selected by mixing and matching the different supplied policy classes in the instantiation of the host class template. Additionally, by writing a custom implementation of a given policy, a policy-based library can be used in situations requiring behaviors unforeseen by the library implementor. Even in cases where no more than one implementation of each policy will ever be used, decomposing a class into policies can aid the design process, by increasing modularity and highlighting exactly where orthogonal design decisions have been made.","['central', 'idiom', 'policy', 'base', 'design', 'class', 'template', 'call', 'host', 'class', 'take', 'type', 'parameter', 'input', 'instantiate', 'type', 'select', 'user', 'call', 'policy', 'class', 'implement', 'particular', 'implicit', 'interface', 'call', 'policy', 'encapsulate', 'orthogonal', 'orthogonal', 'aspect', 'behavior', 'instantiate', 'host', 'class', 'supply', 'host', 'class', 'combine', 'set', 'different', 'canned', 'implementation', 'policy', 'library', 'module', 'support', 'exponential', 'number', 'different', 'behavior', 'combination', 'resolve', 'compile', 'time', 'select', 'mix', 'match', 'different', 'supply', 'policy', 'class', 'instantiation', 'host', 'class', 'template', 'additionally', 'write', 'custom', 'implementation', 'give', 'policy', 'policy', 'base', 'library', 'situation', 'require', 'behavior', 'unforeseen', 'library', 'implementor', 'case', 'implementation', 'policy', 'decompose', 'class', 'policy', 'aid', 'design', 'process', 'increase', 'modularity', 'highlight', 'exactly', 'orthogonal', 'design', 'decision']"
3323,"While assembling software components out of interchangeable modules is a far from new concept, policy-based design represents an innovation in the way it applies that concept at the relatively low level of defining the behavior of an individual class. Policy classes have some similarity to callbacks, but differ in that, rather than consisting of a single function, a policy class will typically contain several related functions methods, often combined with state variables or other facilities such as nested types. A policy-based host class can be thought of as a type of metafunction, taking a set of behaviors represented by types as input, and returning as output a type representing the result of combining those behaviors into a functioning whole. Unlike MPL metafunctions, however, the output is usually represented by the instantiated host class itself, rather than a nested output type.","['assemble', 'software', 'component', 'interchangeable', 'module', 'far', 'new', 'concept', 'policy', 'base', 'design', 'represent', 'innovation', 'way', 'apply', 'concept', 'relatively', 'low', 'level', 'define', 'behavior', 'individual', 'class', 'policy', 'class', 'similarity', 'callback', 'differ', 'consist', 'single', 'function', 'policy', 'class', 'typically', 'contain', 'relate', 'function', 'method', 'combine', 'state', 'variable', 'facility', 'nested', 'type', 'policy', 'base', 'host', 'class', 'think', 'type', 'metafunction', 'take', 'set', 'behavior', 'represent', 'type', 'input', 'return', 'output', 'type', 'represent', 'result', 'combine', 'behavior', 'function', 'unlike', 'mpl', 'metafunction', 'output', 'usually', 'represent', 'instantiate', 'host', 'class', 'nested', 'output', 'type']"
3324,"A key feature of the policy idiom is that, usually though it is not strictly necessary, the host class will derive from make itself a child class of each of its policy classes using public multiple inheritance. Alternatives are for the host class to merely contain a member variable of each policy class type, or else to inherit the policy classes privately; however inheriting the policy classes publicly has the major advantage that a policy class can add new methods, inherited by the instantiated host class and accessible to its users, which the host class itself need not even know about. A notable feature of this aspect of the policy idiom is that, relative to object-oriented programming, policies invert the relationship between base class and derived class - whereas in OOP interfaces are traditionally represented by abstract base classes and implementations of interfaces by derived classes, in policy-based design the derived host class represents the interfaces and the base policy classes implement them. In the case of policies, the public inheritance does not represent an is-a relationship between the host and the policy classes. While this would traditionally be considered evidence of a design defect in OOP contexts, this doesn't apply in the context of the policy idiom.","['key', 'feature', 'policy', 'idiom', 'usually', 'strictly', 'necessary', 'host', 'class', 'derive', 'child', 'class', 'policy', 'class', 'public', 'multiple', 'inheritance', 'alternative', 'host', 'class', 'merely', 'contain', 'member', 'variable', 'policy', 'class', 'type', 'inherit', 'policy', 'class', 'privately', 'inherit', 'policy', 'class', 'publicly', 'major', 'advantage', 'policy', 'class', 'add', 'new', 'method', 'inherit', 'instantiate', 'host', 'class', 'accessible', 'user', 'host', 'class', 'need', 'know', 'notable', 'feature', 'aspect', 'policy', 'idiom', 'relative', 'object', 'orient', 'programming', 'policy', 'invert', 'relationship', 'base', 'class', 'derive', 'class', 'oop', 'interface', 'traditionally', 'represent', 'abstract', 'base', 'class', 'implementation', 'interface', 'derive', 'class', 'policy', 'base', 'design', 'derive', 'host', 'class', 'represent', 'interface', 'base', 'policy', 'class', 'implement', 'case', 'policy', 'public', 'inheritance', 'represent', 'relationship', 'host', 'policy', 'class', 'traditionally', 'consider', 'evidence', 'design', 'defect', 'oop', 'context', 'apply', 'context', 'policy', 'idiom']"
3325,"A disadvantage of policies in their current incarnation is that the policy interface doesn't have a direct, explicit representation in code, but rather is defined implicitly, via duck typing, and must be documented separately and manually, in comments. The main idea is to use commonality-variability analysis to divide the type into the fixed implementation and interface, the policy-based class, and the different policies. The trick is to know what goes into the main class, and what policies should one create. The article mentioned above gives the following answer: wherever we would need to make a possible limiting design decision, we should postpone that decision, we should delegate it to an appropriately named policy.","['disadvantage', 'policy', 'current', 'incarnation', 'policy', 'interface', 'direct', 'explicit', 'representation', 'code', 'define', 'implicitly', 'duck', 'typing', 'document', 'separately', 'manually', 'comment', 'main', 'idea', 'use', 'commonality', 'variability', 'analysis', 'divide', 'type', 'fix', 'implementation', 'interface', 'policy', 'base', 'class', 'different', 'policy', 'trick', 'know', 'go', 'main', 'class', 'policy', 'create', 'article', 'mention', 'give', 'follow', 'answer', 'need', 'possible', 'limit', 'design', 'decision', 'postpone', 'decision', 'delegate', 'appropriately', 'name', 'policy']"
3326,"Policy classes can contain implementation, type definitions and so forth. Basically, the designer of the main template class will define what the policy classes should provide, what customization points they need to implement.","['policy', 'class', 'contain', 'implementation', 'type', 'definition', 'forth', 'basically', 'designer', 'main', 'template', 'class', 'define', 'policy', 'class', 'provide', 'customization', 'point', 'need', 'implement']"
3327,"It may be a delicate task to create a good set of policies, just the right number e.g., the minimum necessary. The different customization points, which belong together, should go into one policy argument, such as storage policy, validation policy and so forth. Graphic designers are able to give a name to their policies, which represent concepts, and not those which represent operations or minor implementation details.","['delicate', 'task', 'create', 'good', 'set', 'policy', 'right', 'number', 'e.g.', 'minimum', 'necessary', 'different', 'customization', 'point', 'belong', 'policy', 'argument', 'storage', 'policy', 'validation', 'policy', 'forth', 'graphic', 'designer', 'able', 'policy', 'represent', 'concept', 'represent', 'operation', 'minor', 'implementation', 'detail']"
3328,"Policy-based design may incorporate other useful techniques. For example, the template method pattern can be reinterpreted for compile time, so that a main class has a skeleton algorithm, which – at customization points – calls the appropriate functions of some of the policies.","['policy', 'base', 'design', 'incorporate', 'useful', 'technique', 'example', 'template', 'method', 'pattern', 'reinterpret', 'compile', 'time', 'main', 'class', 'skeleton', 'algorithm', 'customization', 'point', 'call', 'appropriate', 'function', 'policy']"
3329,This will be achieved dynamically by concepts3 in future versions of C++.,"['achieve', 'dynamically', 'concepts3', 'future', 'version', 'c++']"
3330,"Presented below is a simple contrived example of a C++ hello world program, where the text to be printed and the method of printing it are decomposed using policies. In this example, HelloWorld is a host class where it takes two policies, one for specifying how a message should be shown and the other for the actual message being printed. Note that the generic implementation is in Run and therefore the code is unable to be compiled unless both policies Print and Message are provided.","['present', 'simple', 'contrived', 'example', 'c++', 'hello', 'world', 'program', 'text', 'print', 'method', 'print', 'decompose', 'policy', 'example', 'helloworld', 'host', 'class', 'take', 'policy', 'specify', 'message', 'show', 'actual', 'message', 'print', 'note', 'generic', 'implementation', 'run', 'code', 'unable', 'compile', 'policy', 'print', 'message', 'provide']"
3331,Designers can easily write more OutputPolicys by adding new classes with the member function Print and take those as new OutputPolicys.,"['designer', 'easily', 'write', 'outputpolicys', 'add', 'new', 'class', 'member', 'function', 'print', 'new', 'outputpolicys']"
3332,Loki is the name of a C++ software library written by Andrei Alexandrescu as part of his book Modern C++ Design.,"['loki', 'c++', 'software', 'library', 'write', 'andrei', 'alexandrescu', 'book', 'modern', 'c++', 'design']"
3333,"The library makes extensive use of C++ template metaprogramming and implements several commonly used tools: typelist, functor, singleton, smart pointer, object factory, visitor and multimethods.","['library', 'make', 'extensive', 'use', 'c++', 'template', 'metaprogramming', 'implement', 'commonly', 'tool', 'typelist', 'functor', 'singleton', 'smart', 'pointer', 'object', 'factory', 'visitor', 'multimethod']"
3334,"Originally the library was only compatible with two of the most standard conforming C++ compilers CodeWarrior and Comeau C/C++: later efforts have made it usable with a wide array of compilers including older Visual C++ 6.0, Borland C++ Builder 6.0, Clang and GCC. Compiler vendors used Loki as a compatibility benchmark, further increasing the number of compliant compilers.4","['originally', 'library', 'compatible', 'standard', 'conform', 'c++', 'compiler', 'codewarrior', 'comeau', 'c++', 'late', 'effort', 'usable', 'wide', 'array', 'compiler', 'include', 'old', 'visual', 'c++', '6', 'borland', 'c++', 'builder', '6', 'clang', 'gcc', 'compiler', 'vendor', 'loki', 'compatibility', 'benchmark', 'increase', 'number', 'compliant', 'compilers']"
3335,"Maintenance and further development of Loki has been continued through an open-source community led by Peter Kümmel and Richard Sposato as a SourceForge project. Ongoing contributions by many people have improved the overall robustness and functionality of the library. Loki is not tied to the book anymore as it already has a lot of new components e.g. StrongPtr, Printf, and Scopeguard. Loki inspired similar tools and functionality now also present in the Boost library collection.citation needed","['maintenance', 'development', 'loki', 'continue', 'open', 'source', 'community', 'lead', 'peter', 'kümmel', 'richard', 'sposato', 'sourceforge', 'project', 'ongoing', 'contribution', 'people', 'improve', 'overall', 'robustness', 'functionality', 'library', 'loki', 'tie', 'book', 'anymore', 'lot', 'new', 'component', 'e.g.', 'strongptr', 'printf', 'scopeguard', 'loki', 'inspire', 'similar', 'tool', 'functionality', 'present', 'boost', 'library', 'collection.citation', 'need']"
3336,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3337,"In programming language theory and type theory, polymorphism is the provision of a single interface to entities of different types1 or the use of a single symbol to represent multiple different types.2 The concept is borrowed from a principle in biology where an organism or species can have many different forms or stages.3","['programming', 'language', 'theory', 'type', 'theory', 'polymorphism', 'provision', 'single', 'interface', 'entity', 'different', 'types1', 'use', 'single', 'symbol', 'represent', 'multiple', 'different', 'types', 'concept', 'borrow', 'principle', 'biology', 'organism', 'specie', 'different', 'form', 'stages']"
3338,The most commonly recognized major classes of polymorphism are:,"['commonly', 'recognize', 'major', 'class', 'polymorphism']"
3339,"Interest in polymorphic type systems developed significantly in the 1960s, with practical implementations beginning to appear by the end of the decade. Ad hoc polymorphism and parametric polymorphism were originally described in Christopher Strachey's Fundamental Concepts in Programming Languages,5 where they are listed as ""the two main classes"" of polymorphism. Ad hoc polymorphism was a feature of Algol 68, while parametric polymorphism was the core feature of ML's type system.","['interest', 'polymorphic', 'type', 'system', 'develop', 'significantly', '1960', 'practical', 'implementation', 'begin', 'appear', 'end', 'decade', 'hoc', 'polymorphism', 'parametric', 'polymorphism', 'originally', 'describe', 'christopher', 'strachey', 'fundamental', 'concepts', 'programming', 'languages', 'list', 'main', 'class', 'polymorphism', 'hoc', 'polymorphism', 'feature', 'algol', 'parametric', 'polymorphism', 'core', 'feature', 'type', 'system']"
3340,"In a 1985 paper, Peter Wegner and Luca Cardelli introduced the term inclusion polymorphism to model subtypes and inheritance,2 citing Simula as the first programming language to implement it.","['1985', 'paper', 'peter', 'wegner', 'luca', 'cardelli', 'introduce', 'term', 'inclusion', 'polymorphism', 'model', 'subtype', 'inheritance', 'cite', 'simula', 'programming', 'language', 'implement']"
3341,"Christopher Strachey chose the term ad hoc polymorphism to refer to polymorphic functions that can be applied to arguments of different types, but that behave differently depending on the type of the argument to which they are applied also known as function overloading or operator overloading.5 The term ""ad hoc"" in this context is not intended to be pejorative; it refers simply to the fact that this type of polymorphism is not a fundamental feature of the type system. In the Pascal / Delphi example below, the Add functions seem to work generically over various types when looking at the invocations, but are considered to be two entirely distinct functions by the compiler for all intents and purposes:","['christopher', 'strachey', 'choose', 'term', 'hoc', 'polymorphism', 'refer', 'polymorphic', 'function', 'apply', 'argument', 'different', 'type', 'behave', 'differently', 'depend', 'type', 'argument', 'apply', 'know', 'function', 'overloading', 'operator', 'overloading', 'term', 'hoc', 'context', 'intend', 'pejorative', 'refer', 'simply', 'fact', 'type', 'polymorphism', 'fundamental', 'feature', 'type', 'system', 'pascal', 'delphi', 'example', 'add', 'function', 'work', 'generically', 'type', 'look', 'invocation', 'consider', 'entirely', 'distinct', 'function', 'compiler', 'intent', 'purpose']"
3342,In dynamically typed languages the situation can be more complex as the correct function that needs to be invoked might only be determinable at run time.,"['dynamically', 'type', 'language', 'situation', 'complex', 'correct', 'function', 'need', 'invoke', 'determinable', 'run', 'time']"
3343,"Implicit type conversion has also been defined as a form of polymorphism, referred to as ""coercion polymorphism"".26","['implicit', 'type', 'conversion', 'define', 'form', 'polymorphism', 'refer', 'coercion', 'polymorphism']"
3344,"Parametric polymorphism allows a function or a data type to be written generically, so that it can handle values uniformly without depending on their type.7 Parametric polymorphism is a way to make a language more expressive while still maintaining full static type-safety.","['parametric', 'polymorphism', 'allow', 'function', 'data', 'type', 'write', 'generically', 'handle', 'value', 'uniformly', 'depend', 'type', 'parametric', 'polymorphism', 'way', 'language', 'expressive', 'maintain', 'static', 'type', 'safety']"
3345,The concept of parametric polymorphism applies to both data types and functions. A function that can evaluate to or be applied to values of different types is known as a polymorphic function. A data type that can appear to be of a generalized type e.g. a list with elements of arbitrary type is designated polymorphic data type like the generalized type from which such specializations are made.,"['concept', 'parametric', 'polymorphism', 'apply', 'datum', 'type', 'function', 'function', 'evaluate', 'apply', 'value', 'different', 'type', 'know', 'polymorphic', 'function', 'data', 'type', 'appear', 'generalize', 'type', 'e.g.', 'list', 'element', 'arbitrary', 'type', 'designate', 'polymorphic', 'datum', 'type', 'like', 'generalize', 'type', 'specialization']"
3346,"Parametric polymorphism is ubiquitous in functional programming, where it is often simply referred to as ""polymorphism"". The following example in Haskell shows a parameterized list data type and two parametrically polymorphic functions on them:","['parametric', 'polymorphism', 'ubiquitous', 'functional', 'programming', 'simply', 'refer', 'polymorphism', 'follow', 'example', 'haskell', 'show', 'parameterized', 'list', 'datum', 'type', 'parametrically', 'polymorphic', 'function']"
3347,"Parametric polymorphism is also available in several object-oriented languages. For instance, templates in C++ and D, or under the name generics in C#, Delphi, Java and Go:","['parametric', 'polymorphism', 'available', 'object', 'orient', 'language', 'instance', 'template', 'c++', 'generic', 'delphi', 'java']"
3348,"John C. Reynolds and later Jean-Yves Girard formally developed this notion of polymorphism as an extension to lambda calculus called the polymorphic lambda calculus or System F. Any parametrically polymorphic function is necessarily restricted in what it can do, working on the shape of the data instead of its value, leading to the concept of parametricity.","['john', 'reynolds', 'later', 'jean', 'yves', 'girard', 'formally', 'develop', 'notion', 'polymorphism', 'extension', 'lambda', 'calculus', 'call', 'polymorphic', 'lambda', 'calculus', 'system', 'parametrically', 'polymorphic', 'function', 'necessarily', 'restrict', 'work', 'shape', 'datum', 'instead', 'value', 'lead', 'concept', 'parametricity']"
3349,"Some languages employ the idea of subtyping also called subtype polymorphism or inclusion polymorphism to restrict the range of types that can be used in a particular case of polymorphism. In these languages, subtyping allows a function to be written to take an object of a certain type T, but also work correctly, if passed an object that belongs to a type S that is a subtype of T according to the Liskov substitution principle. This type relation is sometimes written S <: T. Conversely, T is said to be a supertype of S—written T :> S. Subtype polymorphism is usually resolved dynamically see below.","['language', 'employ', 'idea', 'subtype', 'call', 'subtype', 'polymorphism', 'inclusion', 'polymorphism', 'restrict', 'range', 'type', 'particular', 'case', 'polymorphism', 'language', 'subtype', 'allow', 'function', 'write', 'object', 'certain', 'type', 'work', 'correctly', 'pass', 'object', 'belong', 'type', 'subtype', 'accord', 'liskov', 'substitution', 'principle', 'type', 'relation', 'write', 'conversely', 'say', 'supertype', 'write', 'subtype', 'polymorphism', 'usually', 'resolve', 'dynamically']"
3350,"In the following Java example we make cats and dogs subtypes of animals. The procedure letsHear accepts an animal, but will also work correctly if a subtype is passed to it:","['follow', 'java', 'example', 'cat', 'dog', 'subtype', 'animal', 'procedure', 'letshear', 'accept', 'animal', 'work', 'correctly', 'subtype', 'pass']"
3351,"In another example, if Number, Rational, and Integer are types such that Number :> Rational and Number :> Integer, a function written to take a Number will work equally well when passed an Integer or Rational as when passed a Number. The actual type of the object can be hidden from clients into a black box, and accessed via object identity. In fact, if the Number type is abstract, it may not even be possible to get your hands on an object whose most-derived type is Number see abstract data type, abstract class. This particular kind of type hierarchy is known—especially in the context of the Scheme programming language—as a numerical tower, and usually contains many more types.","['example', 'number', 'rational', 'integer', 'type', 'number', 'rational', 'number', 'integer', 'function', 'write', 'number', 'work', 'equally', 'pass', 'integer', 'rational', 'pass', 'number', 'actual', 'type', 'object', 'hide', 'client', 'black', 'box', 'access', 'object', 'identity', 'fact', 'number', 'type', 'abstract', 'possible', 'hand', 'object', 'derive', 'type', 'number', 'abstract', 'datum', 'type', 'abstract', 'class', 'particular', 'kind', 'type', 'hierarchy', 'know', 'especially', 'context', 'scheme', 'programming', 'language', 'numerical', 'tower', 'usually', 'contain', 'type']"
3352,"Object-oriented programming languages offer subtype polymorphism using subclassing also known as inheritance. In typical implementations, each class contains what is called a virtual table—a table of functions that implement the polymorphic part of the class interface—and each object contains a pointer to the ""vtable"" of its class, which is then consulted whenever a polymorphic method is called. This mechanism is an example of:","['object', 'orient', 'programming', 'language', 'offer', 'subtype', 'polymorphism', 'subclasse', 'know', 'inheritance', 'typical', 'implementation', 'class', 'contain', 'call', 'virtual', 'table', 'table', 'function', 'implement', 'polymorphic', 'class', 'interface', 'object', 'contain', 'pointer', 'vtable', 'class', 'consult', 'polymorphic', 'method', 'call', 'mechanism', 'example']"
3353,"The same goes for most other popular object systems. Some, however, such as Common Lisp Object System, provide multiple dispatch, under which method calls are polymorphic in all arguments.","['go', 'popular', 'object', 'system', 'common', 'lisp', 'object', 'system', 'provide', 'multiple', 'dispatch', 'method', 'call', 'polymorphic', 'argument']"
3354,The interaction between parametric polymorphism and subtyping leads to the concepts of variance and bounded quantification.,"['interaction', 'parametric', 'polymorphism', 'subtype', 'lead', 'concept', 'variance', 'bound', 'quantification']"
3355,"Row polymorphism8 is a similar, but distinct concept from subtyping. It deals with structural types. It allows the usage of all values whose types have certain properties, without losing the remaining type information.","['row', 'polymorphism8', 'similar', 'distinct', 'concept', 'subtype', 'deal', 'structural', 'type', 'allow', 'usage', 'value', 'type', 'certain', 'property', 'lose', 'remain', 'type', 'information']"
3356,"A related concept is polytypism or data type genericity. A polytypic function is more general than polymorphic, and in such a function, ""though one can provide fixed ad hoc cases for specific data types, an ad hoc combinator is absent"".9","['related', 'concept', 'polytypism', 'datum', 'type', 'genericity', 'polytypic', 'function', 'general', 'polymorphic', 'function', 'provide', 'fix', 'hoc', 'case', 'specific', 'datum', 'type', 'hoc', 'combinator', 'absent']"
3357,"Polymorphism can be distinguished by when the implementation is selected: statically at compile time or dynamically at run time, typically via a virtual function. This is known respectively as static dispatch and dynamic dispatch, and the corresponding forms of polymorphism are accordingly called static polymorphism and dynamic polymorphism.","['polymorphism', 'distinguish', 'implementation', 'select', 'statically', 'compile', 'time', 'dynamically', 'run', 'time', 'typically', 'virtual', 'function', 'know', 'respectively', 'static', 'dispatch', 'dynamic', 'dispatch', 'correspond', 'form', 'polymorphism', 'accordingly', 'call', 'static', 'polymorphism', 'dynamic', 'polymorphism']"
3358,"Static polymorphism executes faster, because there is no dynamic dispatch overhead, but requires additional compiler support. Further, static polymorphism allows greater static analysis by compilers notably for optimization, source code analysis tools, and human readers programmers. Dynamic polymorphism is more flexible but slower—for example, dynamic polymorphism allows duck typing, and a dynamically linked library may operate on objects without knowing their full type.","['static', 'polymorphism', 'execute', 'fast', 'dynamic', 'dispatch', 'overhead', 'require', 'additional', 'compiler', 'support', 'static', 'polymorphism', 'allow', 'great', 'static', 'analysis', 'compiler', 'notably', 'optimization', 'source', 'code', 'analysis', 'tool', 'human', 'reader', 'programmer', 'dynamic', 'polymorphism', 'flexible', 'slow', 'example', 'dynamic', 'polymorphism', 'allow', 'duck', 'typing', 'dynamically', 'link', 'library', 'operate', 'object', 'know', 'type']"
3359,"Static polymorphism typically occurs in ad hoc polymorphism and parametric polymorphism, whereas dynamic polymorphism is usual for subtype polymorphism. However, it is possible to achieve static polymorphism with subtyping through more sophisticated use of template metaprogramming, namely the curiously recurring template pattern.","['static', 'polymorphism', 'typically', 'occur', 'hoc', 'polymorphism', 'parametric', 'polymorphism', 'dynamic', 'polymorphism', 'usual', 'subtype', 'polymorphism', 'possible', 'achieve', 'static', 'polymorphism', 'subtype', 'sophisticated', 'use', 'template', 'metaprogramming', 'curiously', 'recur', 'template', 'pattern']"
3360,"When polymorphism is exposed via a library, static polymorphism becomes impossible for dynamic libraries as there is no way of knowing what types the parameters are when the shared object is built. While languages like C++ and Rust use monomorphized templates, the Swift programming language makes extensive use of dynamic dispatch to build the application binary interface for these libraries by default. As a result, more code can be shared for a reduced system size at the cost of runtime overhead.10","['polymorphism', 'expose', 'library', 'static', 'polymorphism', 'impossible', 'dynamic', 'library', 'way', 'know', 'type', 'parameter', 'share', 'object', 'build', 'language', 'like', 'c++', 'rust', 'use', 'monomorphize', 'template', 'swift', 'programming', 'language', 'make', 'extensive', 'use', 'dynamic', 'dispatch', 'build', 'application', 'binary', 'interface', 'library', 'default', 'result', 'code', 'share', 'reduced', 'system', 'size', 'cost', 'runtime', 'overhead']"
3361,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3362,"In computer science, primitive data types are a set of basic data types from which all other data types are constructed.1 Specifically it often refers to the limited set of data representations in use by a particular processor, which all compiled programs must use. Most processors support a similar set of primitive data types, although the specific representations vary.2 More generally, ""primitive data types"" may refer to the standard data types built into a programming language.34 Data types which are not primitive are referred to as derived or composite.3","['computer', 'science', 'primitive', 'datum', 'type', 'set', 'basic', 'datum', 'type', 'datum', 'type', 'constructed', 'specifically', 'refer', 'limited', 'set', 'datum', 'representation', 'use', 'particular', 'processor', 'compile', 'program', 'use', 'processor', 'support', 'similar', 'set', 'primitive', 'datum', 'type', 'specific', 'representation', 'vary', 'generally', 'primitive', 'datum', 'type', 'refer', 'standard', 'datum', 'type', 'build', 'programming', 'language', 'datum', 'type', 'primitive', 'refer', 'derive', 'composite']"
3363,"Primitive types are almost always value types, but composite types may also be value types.5","['primitive', 'type', 'value', 'type', 'composite', 'type', 'value', 'types']"
3364,The Java virtual machine's set of primitive data types is:6,"['java', 'virtual', 'machine', 'set', 'primitive', 'datum', 'type', 'is']"
3365,"These primitive types are in general precisely those supported by computer hardware, except possibly for varying integer sizes or hardware that is missing floating point. Operations on such primitives are usually quite efficient. Primitive data types which are native to the processor have a one-to-one correspondence with objects in the computer's memory, and operations on these types are often the fastest possible in most cases.9 Integer addition, for example, can be performed as a single machine instruction, and some offer specific instructions to process sequences of characters with a single instruction.10 But the choice of primitive data type may affect performance, for example it is faster using SIMD operations and data types to operate on an array of floats.9: 113","['primitive', 'type', 'general', 'precisely', 'support', 'computer', 'hardware', 'possibly', 'vary', 'integer', 'size', 'hardware', 'miss', 'float', 'point', 'operation', 'primitive', 'usually', 'efficient', 'primitive', 'datum', 'type', 'native', 'processor', 'correspondence', 'object', 'computer', 'memory', 'operation', 'type', 'fast', 'possible', 'cases', 'integer', 'addition', 'example', 'perform', 'single', 'machine', 'instruction', 'offer', 'specific', 'instruction', 'process', 'sequence', 'character', 'single', 'instruction', 'choice', 'primitive', 'datum', 'type', 'affect', 'performance', 'example', 'fast', 'simd', 'operation', 'datum', 'type', 'operate', 'array', 'floats', '113']"
3366,"The set of basic C data types is similar to Java's. Minimally, there are four types, char, int, float, and double, but the qualifiers short, long, signed, and unsigned mean that C contains numerous target-dependent integer and floating-point primitive types.11","['set', 'basic', 'datum', 'type', 'similar', 'java', 'minimally', 'type', 'char', 'int', 'float', 'double', 'qualifier', 'short', 'long', 'sign', 'unsigned', 'mean', 'contain', 'numerous', 'target', 'dependent', 'integer', 'float', 'point', 'primitive', 'types']"
3367,An integer data type represents some range of mathematical integers. Integers may be either signed allowing negative values or unsigned non-negative integers only. Common ranges are:,"['integer', 'datum', 'type', 'represent', 'range', 'mathematical', 'integer', 'integer', 'sign', 'allow', 'negative', 'value', 'unsigned', 'non', 'negative', 'integer', 'common', 'range']"
3368,"A floating-point number represents a limited-precision rational number that may have a fractional part. These numbers are stored internally in a format equivalent to scientific notation, typically in binary but sometimes in decimal. Because floating-point numbers have limited precision, only a subset of real or rational numbers are exactly representable; other numbers can be represented only approximately. Many languages have both a single precision often called ""float"" and a double precision type often called ""double"".","['float', 'point', 'number', 'represent', 'limited', 'precision', 'rational', 'number', 'fractional', 'number', 'store', 'internally', 'format', 'equivalent', 'scientific', 'notation', 'typically', 'binary', 'decimal', 'float', 'point', 'number', 'limit', 'precision', 'subset', 'real', 'rational', 'number', 'exactly', 'representable', 'number', 'represent', 'approximately', 'language', 'single', 'precision', 'call', 'float', 'double', 'precision', 'type', 'call', 'double']"
3369,"A boolean type, typically denoted ""bool"" or ""boolean"", is typically a logical type that can have either the value ""true"" or the value ""false"". Although only one bit is necessary to accommodate the value set ""true"" and ""false"", programming languages typically implement boolean types as one or more bytes.","['boolean', 'type', 'typically', 'denote', 'bool', 'boolean', 'typically', 'logical', 'type', 'value', 'true', 'value', 'false', 'bit', 'necessary', 'accommodate', 'value', 'set', 'true', 'false', 'programming', 'language', 'typically', 'implement', 'boolean', 'type', 'byte']"
3370,"Many languages e.g. Java, Pascal and Ada implement booleans adhering to the concept of boolean as a distinct logical type. Some languages, though, may implicitly convert booleans to numeric types at times to give extended semantics to booleans and boolean expressions or to achieve backwards compatibility with earlier versions of the language. For example, early versions of the C programming language that followed ANSI C and its former standards did not have a dedicated boolean type. Instead, numeric values of zero are interpreted as ""false"", and any other value is interpreted as ""true"".13 The newer C99 added a distinct boolean type that can be included with stdbool.h,14 and C++ supports bool as a built-in type and ""true"" and ""false"" as reserved words.15","['language', 'e.g.', 'java', 'pascal', 'ada', 'implement', 'boolean', 'adhere', 'concept', 'boolean', 'distinct', 'logical', 'type', 'language', 'implicitly', 'convert', 'booleans', 'numeric', 'type', 'time', 'extend', 'semantic', 'booleans', 'boolean', 'expression', 'achieve', 'backwards', 'compatibility', 'early', 'version', 'language', 'example', 'early', 'version', 'programming', 'language', 'follow', 'ansi', 'standard', 'dedicated', 'boolean', 'type', 'instead', 'numeric', 'value', 'zero', 'interpret', 'false', 'value', 'interpret', 'true', 'new', 'c99', 'add', 'distinct', 'boolean', 'type', 'include', 'stdbool.h', 'c++', 'support', 'bool', 'build', 'type', 'true', 'false', 'reserve', 'words']"
3371,The XML Schema Definition language provides a set of 19 primitive data types:16,"['xml', 'schema', 'definition', 'language', 'provide', 'set', 'primitive', 'datum', 'types']"
3372,"In JavaScript, there are 7 primitive data types: string, number, bigint, boolean, undefined, symbol, and null. These are not objects and have no methods.18","['javascript', 'primitive', 'datum', 'type', 'string', 'number', 'bigint', 'boolean', 'undefined', 'symbol', 'null', 'object', 'methods']"
3373,"In Visual Basic .NET, the primitive data types consist of 4 integral types, 2 floating-point types, a 16-byte decimal type, a boolean type, a date/time type, a Unicode character type, and a Unicode string type.19","['visual', 'basic', '.net', 'primitive', 'datum', 'type', 'consist', 'integral', 'type', 'float', 'point', 'type', 'byte', 'decimal', 'type', 'boolean', 'type', 'date', 'time', 'type', 'unicode', 'character', 'type', 'unicode', 'string', 'type']"
3374,"In general, data types that can be built into sophisticated programming languages include:","['general', 'datum', 'type', 'build', 'sophisticated', 'programming', 'language', 'include']"
3375,"A character type is a type that can represent all Unicode characters, hence must be at least 21 bits wide. Some languages such as Julia include a true 32-bit Unicode character type as primitive.20 Other languages such as JavaScript, Python, Ruby, and many dialects of BASIC do not have a primitive character type but instead add strings as a primitive data type, typically using the UTF-8 encoding. Strings with a length of one are normally used to represent single characters.","['character', 'type', 'type', 'represent', 'unicode', 'character', 'bit', 'wide', 'language', 'julia', 'include', 'true', 'bit', 'unicode', 'character', 'type', 'primitive', 'language', 'javascript', 'python', 'ruby', 'dialect', 'basic', 'primitive', 'character', 'type', 'instead', 'add', 'string', 'primitive', 'datum', 'type', 'typically', 'utf-8', 'encoding', 'string', 'length', 'normally', 'represent', 'single', 'character']"
3376,"Some languages have ""character"" or ""string"" types that are too small to represent all Unicode characters or strings. These are more properly categorized as integer types. For example C includes a char type, but it is defined to be the smallest addressable unit of memory, which several standards, such as POSIX require to be 8 bits. The recent version of these standards refer to char as a numeric type. char is also used for a 16-bit integer type in Java, but again this is not a Unicode character type.21 Some computer hardware has a few instructions which deal with ""strings"", referring to a sequence of bytes. For example, x86-64 can move, set, search, or compare a sequence of items, where an item could be 1, 2, 4, or 8 bytes long.22","['language', 'character', 'string', 'type', 'small', 'represent', 'unicode', 'character', 'string', 'properly', 'categorize', 'integer', 'type', 'example', 'include', 'char', 'type', 'define', 'small', 'addressable', 'unit', 'memory', 'standard', 'posix', 'require', 'bit', 'recent', 'version', 'standard', 'refer', 'char', 'numeric', 'type', 'char', 'bit', 'integer', 'type', 'java', 'unicode', 'character', 'type', 'computer', 'hardware', 'instruction', 'deal', 'string', 'refer', 'sequence', 'byte', 'example', 'x86', 'set', 'search', 'compare', 'sequence', 'item', 'item', 'byte', 'long']"
3377,"A range numeric data type has its maximum and minimum value embedded in the type. It is included in some languages such as Ada and Pascal. Attempting to store a number outside the range may lead to compiler/runtime errors, or to incorrect calculations due to truncation depending on the language being used. In practice the compiler chooses the most appropriate primitive integer or floating-point type automatically.","['range', 'numeric', 'datum', 'type', 'maximum', 'minimum', 'value', 'embed', 'type', 'include', 'language', 'ada', 'pascal', 'attempt', 'store', 'number', 'outside', 'range', 'lead', 'compiler', 'runtime', 'error', 'incorrect', 'calculation', 'truncation', 'depend', 'language', 'practice', 'compiler', 'choose', 'appropriate', 'primitive', 'integer', 'floating', 'point', 'type', 'automatically']"
3378,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3379,"In software systems, encapsulation refers to the bundling of data with the mechanisms or methods that operate on the data, or the limiting of direct access to some data, such as an object's components.1 Encapsulation allows developers to present a consistent and usable interface which is independent of how a system is implemented internally. As one example, encapsulation can be used to hide the values or state of a structured data object inside a class, preventing direct access to them by clients in a way that could expose hidden implementation details or violate state invariance maintained by the methods.","['software', 'system', 'encapsulation', 'refer', 'bundling', 'datum', 'mechanism', 'method', 'operate', 'datum', 'limiting', 'direct', 'access', 'datum', 'object', 'components', 'encapsulation', 'allow', 'developer', 'present', 'consistent', 'usable', 'interface', 'independent', 'system', 'implement', 'internally', 'example', 'encapsulation', 'hide', 'value', 'state', 'structured', 'datum', 'object', 'inside', 'class', 'prevent', 'direct', 'access', 'client', 'way', 'expose', 'hidden', 'implementation', 'detail', 'violate', 'state', 'invariance', 'maintain', 'method']"
3380,"All object-oriented programming OOP systems support encapsulation, but encapsulation is not unique to OOP. Implementations of abstract data types, modules, and libraries, among other systems, also offer encapsulation. The similarity has been explained by programming language theorists in terms of existential types.2","['object', 'orient', 'programming', 'oop', 'system', 'support', 'encapsulation', 'encapsulation', 'unique', 'oop', 'implementation', 'abstract', 'datum', 'type', 'module', 'library', 'system', 'offer', 'encapsulation', 'similarity', 'explain', 'programming', 'language', 'theorist', 'term', 'existential', 'types']"
3381,"In object-oriented programming languages, and other related fields, encapsulation refers to one of two related but distinct notions, and sometimes to the combination thereof:34","['object', 'orient', 'programming', 'language', 'related', 'field', 'encapsulation', 'refer', 'related', 'distinct', 'notion', 'combination', 'thereof']"
3382,"Some programming language researchers and academics use the first meaning alone or in combination with the second as a distinguishing feature of object-oriented programming, while some programming languages that provide lexical closures view encapsulation as a feature of the language orthogonal to object orientation.","['programming', 'language', 'researcher', 'academic', 'use', 'meaning', 'combination', 'second', 'distinguish', 'feature', 'object', 'orient', 'programming', 'programming', 'language', 'provide', 'lexical', 'closure', 'view', 'encapsulation', 'feature', 'language', 'orthogonal', 'object', 'orientation']"
3383,"The second definition is motivated by the fact that in many object-oriented languages, and other related fields, the components are not hidden automatically and this can be overridden; thus, information hiding is defined as a separate notion by those who prefer the second definition.","['second', 'definition', 'motivate', 'fact', 'object', 'orient', 'language', 'related', 'field', 'component', 'hide', 'automatically', 'overridden', 'information', 'hiding', 'define', 'separate', 'notion', 'prefer', 'second', 'definition']"
3384,"The features of encapsulation are supported using classes in most object-oriented languages, although other alternatives also exist.","['feature', 'encapsulation', 'support', 'class', 'object', 'orient', 'language', 'alternative', 'exist']"
3385,"The authors of Design Patterns discuss the tension between inheritance and encapsulation at length and state that in their experience, designers overuse inheritance. They claim that inheritance often breaks encapsulation, given that inheritance exposes a subclass to the details of its parent's implementation.8 As described by the yo-yo problem, overuse of inheritance and therefore encapsulation, can become too complicated and hard to debug.","['author', 'design', 'patterns', 'discuss', 'tension', 'inheritance', 'encapsulation', 'length', 'state', 'experience', 'designer', 'overuse', 'inheritance', 'claim', 'inheritance', 'break', 'encapsulation', 'give', 'inheritance', 'expose', 'subclass', 'detail', 'parent', 'implementation', 'describe', 'problem', 'overuse', 'inheritance', 'encapsulation', 'complicated', 'hard', 'debug']"
3386,"Under the definition that encapsulation ""can be used to hide data members and member functions"", the internal representation of an object is generally hidden from view outside of the object's definition. Typically, only the object's own methods can directly inspect or manipulate its fields. Hiding the internals of the object protects its integrity by preventing users from setting the internal data of the component into an invalid or inconsistent state. A supposed benefit of encapsulation is that it can reduce system complexity, and thus increase robustness, by allowing the developer to limit the interdependencies between software components.citation needed","['definition', 'encapsulation', 'hide', 'data', 'member', 'member', 'function', 'internal', 'representation', 'object', 'generally', 'hide', 'view', 'outside', 'object', 'definition', 'typically', 'object', 'method', 'directly', 'inspect', 'manipulate', 'field', 'hide', 'internal', 'object', 'protect', 'integrity', 'prevent', 'user', 'set', 'internal', 'datum', 'component', 'invalid', 'inconsistent', 'state', 'supposed', 'benefit', 'encapsulation', 'reduce', 'system', 'complexity', 'increase', 'robustness', 'allow', 'developer', 'limit', 'interdependency', 'software', 'components.citation', 'need']"
3387,"Some languages like Smalltalk and Ruby only allow access via object methods, but most others e.g., C++, C#, Delphi or Java offer the programmer a degree of control over what is hidden, typically via keywords like public and private.6 ISO C++ standard refers to protected, private and public as ""access specifiers"" and that they do not ""hide any information"". Information hiding is accomplished by furnishing a compiled version of the source code that is interfaced via a header file.","['language', 'like', 'smalltalk', 'ruby', 'allow', 'access', 'object', 'method', 'e.g.', 'c++', 'delphi', 'java', 'offer', 'programmer', 'degree', 'control', 'hide', 'typically', 'keyword', 'like', 'public', 'private', 'iso', 'c++', 'standard', 'refer', 'protect', 'private', 'public', 'access', 'specifier', 'hide', 'information', 'information', 'hiding', 'accomplish', 'furnish', 'compile', 'version', 'source', 'code', 'interface', 'header', 'file']"
3388,"Almost always, there is a way to override such protection – usually via reflection API Ruby, Java, C#, etc., sometimes by mechanism like name mangling Python, or special keyword usage like friend in C++. Systems that provide object-level capability-based security adhering to the object-capability model are an exception, and guarantee strong encapsulation.","['way', 'override', 'protection', 'usually', 'reflection', 'api', 'ruby', 'java', 'etc', 'mechanism', 'like', 'mangle', 'python', 'special', 'keyword', 'usage', 'like', 'friend', 'c++', 'systems', 'provide', 'object', 'level', 'capability', 'base', 'security', 'adhere', 'object', 'capability', 'model', 'exception', 'guarantee', 'strong', 'encapsulation']"
3389,"Languages like C++, C#, Java, PHP, Swift, and Delphi offer ways to restrict access to data fields.","['language', 'like', 'c++', 'java', 'php', 'swift', 'delphi', 'offer', 'way', 'restrict', 'access', 'data', 'field']"
3390,Below is an example in C# that shows how access to a data field can be restricted through the use of a private keyword:,"['example', 'show', 'access', 'datum', 'field', 'restrict', 'use', 'private', 'keyword']"
3391,Below is an example in Java:,"['example', 'java']"
3392,"Encapsulation is also possible in non-object-oriented languages. In C, for example, a structure can be declared in the public API via the header file for a set of functions that operate on an item of data containing data members that are not accessible to clients of the API with the extern keyword.910","['encapsulation', 'possible', 'non', 'object', 'orient', 'language', 'example', 'structure', 'declare', 'public', 'api', 'header', 'file', 'set', 'function', 'operate', 'item', 'datum', 'contain', 'datum', 'member', 'accessible', 'client', 'api', 'extern', 'keyword']"
3393,"Clients call the API functions to allocate, operate on, and deallocate objects of an opaque data type. The contents of this type are known and accessible only to the implementation of the API functions; clients cannot directly access its contents. The source code for these functions defines the actual contents of the structure:","['client', 'api', 'function', 'allocate', 'operate', 'deallocate', 'object', 'opaque', 'datum', 'type', 'content', 'type', 'know', 'accessible', 'implementation', 'api', 'function', 'client', 'directly', 'access', 'content', 'source', 'code', 'function', 'define', 'actual', 'content', 'structure']"
3394,"Below is an example of Python, which does not support variable access restrictions. However, the convention is that a variable whose name is prefixed by an underscore should be considered private.11","['example', 'python', 'support', 'variable', 'access', 'restriction', 'convention', 'variable', 'prefix', 'underscore', 'consider', 'private']"
3395,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3396,"Object-oriented programming OOP is a programming paradigm based on the concept of ""objects"", which can contain data and code. The data is in the form of fields often known as attributes or properties, and the code is in the form of procedures often known as methods.","['object', 'orient', 'programming', 'oop', 'programming', 'paradigm', 'base', 'concept', 'object', 'contain', 'datum', 'code', 'data', 'form', 'field', 'know', 'attribute', 'property', 'code', 'form', 'procedure', 'know', 'method']"
3397,"A common feature of objects is that procedures or methods are attached to them and can access and modify the object's data fields. In this brand of OOP, there is usually a special name such as this or self used to refer to the current object. In OOP, computer programs are designed by making them out of objects that interact with one another.12 OOP languages are diverse, but the most popular ones are class-based, meaning that objects are instances of classes, which also determine their types.","['common', 'feature', 'object', 'procedure', 'method', 'attach', 'access', 'modify', 'object', 'datum', 'field', 'brand', 'oop', 'usually', 'special', 'self', 'refer', 'current', 'object', 'oop', 'computer', 'program', 'design', 'make', 'object', 'interact', 'another', 'oop', 'language', 'diverse', 'popular', 'one', 'class', 'base', 'mean', 'object', 'instance', 'class', 'determine', 'type']"
3398,"Many of the most widely used programming languages such as C++, Java, Python, etc. are multi-paradigm and they support object-oriented programming to a greater or lesser degree, typically in combination with imperative, procedural programming.","['widely', 'programming', 'language', 'c++', 'java', 'python', 'etc', 'multi', 'paradigm', 'support', 'object', 'orient', 'programming', 'great', 'less', 'degree', 'typically', 'combination', 'imperative', 'procedural', 'programming']"
3399,"Significant object-oriented languages include: Ada, ActionScript, C++, Common Lisp, C#, Dart, Eiffel, Fortran 2003, Haxe, Java, JavaScript, Kotlin, logo, MATLAB, Objective-C, Object Pascal, Perl, PHP, Python, R, Raku, Ruby, Scala, SIMSCRIPT, Simula, Smalltalk, Swift, Vala and Visual Basic.NET.","['significant', 'object', 'orient', 'language', 'include', 'ada', 'actionscript', 'c++', 'common', 'lisp', 'dart', 'eiffel', 'fortran', '2003', 'haxe', 'java', 'javascript', 'kotlin', 'logo', 'matlab', 'objective', 'object', 'pascal', 'perl', 'php', 'python', 'raku', 'ruby', 'scala', 'simscript', 'simula', 'smalltalk', 'swift', 'vala', 'visual', 'basic', 'net']"
3400,"Terminology invoking ""objects"" and ""oriented"" in the modern sense of object-oriented programming made its first appearance at MIT in the late 1950s and early 1960s. In the environment of the artificial intelligence group, as early as 1960, ""object"" could refer to identified items LISP atoms with properties attributes;34 Alan Kay later cited a detailed understanding of LISP internals as a strong influence on his thinking in 1966.5","['terminology', 'invoke', 'object', 'orient', 'modern', 'sense', 'object', 'orient', 'programming', 'appearance', 'mit', 'late', '1950', 'early', '1960', 'environment', 'artificial', 'intelligence', 'group', 'early', '1960', 'object', 'refer', 'identify', 'item', 'lisp', 'atom', 'property', 'attributes', 'alan', 'kay', 'later', 'cite', 'detailed', 'understanding', 'lisp', 'internal', 'strong', 'influence', 'thinking', '1966']"
3401,"I thought of objects being like biological cells and/or individual computers on a network, only able to communicate with messages so messaging came at the very beginning – it took a while to see how to do messaging in a programming language efficiently enough to be useful.","['think', 'object', 'like', 'biological', 'cell', 'individual', 'computer', 'network', 'able', 'communicate', 'message', 'messaging', 'come', 'beginning', 'take', 'message', 'programming', 'language', 'efficiently', 'useful']"
3402,"Another early MIT example was Sketchpad created by Ivan Sutherland in 1960–1961; in the glossary of the 1963 technical report based on his dissertation about Sketchpad, Sutherland defined notions of ""object"" and ""instance"" with the class concept covered by ""master"" or ""definition"", albeit specialized to graphical interaction.6 Also, an MIT ALGOL version, AED-0, established a direct link between data structures ""plexes"", in that dialect and procedures, prefiguring what were later termed ""messages"", ""methods"", and ""member functions"".78","['early', 'mit', 'example', 'sketchpad', 'create', 'ivan', 'sutherland', '1960–1961', 'glossary', '1963', 'technical', 'report', 'base', 'dissertation', 'sketchpad', 'sutherland', 'define', 'notion', 'object', 'instance', 'class', 'concept', 'cover', 'master', 'definition', 'albeit', 'specialize', 'graphical', 'interaction', 'mit', 'algol', 'version', 'aed-0', 'establish', 'direct', 'link', 'data', 'structure', 'plexe', 'dialect', 'procedure', 'prefigure', 'later', 'term', 'message', 'method', 'member', 'functions']"
3403,"Simula introduced important concepts that are today an essential part of object-oriented programming, such as class and object, inheritance, and dynamic binding.9 The object-oriented Simula programming language was used mainly by researchers involved with physical modelling, such as models to study and improve the movement of ships and their content through cargo ports.9","['simula', 'introduce', 'important', 'concept', 'today', 'essential', 'object', 'orient', 'programming', 'class', 'object', 'inheritance', 'dynamic', 'binding', 'object', 'orient', 'simula', 'programming', 'language', 'mainly', 'researcher', 'involve', 'physical', 'modelling', 'model', 'study', 'improve', 'movement', 'ship', 'content', 'cargo', 'ports']"
3404,"In the 1970s, the first version of the Smalltalk programming language was developed at Xerox PARC by Alan Kay, Dan Ingalls and Adele Goldberg. Smalltalk-72 included a programming environment and was dynamically typed, and at first was interpreted, not compiled. Smalltalk became noted for its application of object orientation at the language-level and its graphical development environment. Smalltalk went through various versions and interest in the language grew.10 While Smalltalk was influenced by the ideas introduced in Simula 67 it was designed to be a fully dynamic system in which classes could be created and modified dynamically.11","['1970', 'version', 'smalltalk', 'programming', 'language', 'develop', 'xerox', 'parc', 'alan', 'kay', 'dan', 'ingalls', 'adele', 'goldberg', 'smalltalk-72', 'include', 'programming', 'environment', 'dynamically', 'type', 'interpret', 'compile', 'smalltalk', 'note', 'application', 'object', 'orientation', 'language', 'level', 'graphical', 'development', 'environment', 'smalltalk', 'go', 'version', 'interest', 'language', 'grew', 'smalltalk', 'influence', 'idea', 'introduce', 'simula', 'design', 'fully', 'dynamic', 'system', 'class', 'create', 'modify', 'dynamically']"
3405,"In the 1970s, Smalltalk influenced the Lisp community to incorporate object-based techniques that were introduced to developers via the Lisp machine. Experimentation with various extensions to Lisp such as LOOPS and Flavors introducing multiple inheritance and mixins eventually led to the Common Lisp Object System, which integrates functional programming and object-oriented programming and allows extension via a Meta-object protocol. In the 1980s, there were a few attempts to design processor architectures that included hardware support for objects in memory but these were not successful. Examples include the Intel iAPX 432 and the Linn Smart Rekursiv.","['1970', 'smalltalk', 'influence', 'lisp', 'community', 'incorporate', 'object', 'base', 'technique', 'introduce', 'developer', 'lisp', 'machine', 'experimentation', 'extension', 'lisp', 'loops', 'flavors', 'introduce', 'multiple', 'inheritance', 'mixin', 'eventually', 'lead', 'common', 'lisp', 'object', 'system', 'integrate', 'functional', 'programming', 'object', 'orient', 'programming', 'allow', 'extension', 'meta', 'object', 'protocol', '1980', 'attempt', 'design', 'processor', 'architecture', 'include', 'hardware', 'support', 'object', 'memory', 'successful', 'example', 'include', 'intel', 'iapx', '432', 'linn', 'smart', 'rekursiv']"
3406,"In 1981, Goldberg edited the August issue of Byte Magazine, introducing Smalltalk and object-oriented programming to a wider audience. In 1986, the Association for Computing Machinery organised the first Conference on Object-Oriented Programming, Systems, Languages, and Applications OOPSLA, which was unexpectedly attended by 1,000 people. In the mid-1980s Objective-C was developed by Brad Cox, who had used Smalltalk at ITT Inc., and Bjarne Stroustrup, who had used Simula for his PhD thesis, eventually went to create the object-oriented C++.10 In 1985, Bertrand Meyer also produced the first design of the Eiffel language. Focused on software quality, Eiffel is a purely object-oriented programming language and a notation supporting the entire software lifecycle. Meyer described the Eiffel software development method, based on a small number of key ideas from software engineering and computer science, in Object-Oriented Software Construction. Essential to the quality focus of Eiffel is Meyer's reliability mechanism, Design by Contract, which is an integral part of both the method and language.","['1981', 'goldberg', 'edit', 'august', 'issue', 'byte', 'magazine', 'introduce', 'smalltalk', 'object', 'orient', 'programming', 'wide', 'audience', '1986', 'association', 'computing', 'machinery', 'organise', 'conference', 'object', 'orient', 'programming', 'systems', 'languages', 'applications', 'oopsla', 'unexpectedly', 'attend', '1', 'people', 'mid-1980', 'objective', 'develop', 'brad', 'cox', 'smalltalk', 'itt', 'inc.', 'bjarne', 'stroustrup', 'simula', 'phd', 'thesis', 'eventually', 'go', 'create', 'object', 'orient', 'c++', '1985', 'bertrand', 'meyer', 'produce', 'design', 'eiffel', 'language', 'focus', 'software', 'quality', 'eiffel', 'purely', 'object', 'orient', 'programming', 'language', 'notation', 'support', 'entire', 'software', 'lifecycle', 'meyer', 'describe', 'eiffel', 'software', 'development', 'method', 'base', 'small', 'number', 'key', 'idea', 'software', 'engineering', 'computer', 'science', 'object', 'orient', 'software', 'construction', 'essential', 'quality', 'focus', 'eiffel', 'meyer', 'reliability', 'mechanism', 'design', 'contract', 'integral', 'method', 'language']"
3407,"In the early and mid-1990s object-oriented programming developed as the dominant programming paradigm when programming languages supporting the techniques became widely available. These included Visual FoxPro 3.0,121314 C++,15 and Delphicitation needed. Its dominance was further enhanced by the rising popularity of graphical user interfaces, which rely heavily upon object-oriented programming techniques. An example of a closely related dynamic GUI library and OOP language can be found in the Cocoa frameworks on Mac OS X, written in Objective-C, an object-oriented, dynamic messaging extension to C based on Smalltalk. OOP toolkits also enhanced the popularity of event-driven programming although this concept is not limited to OOP.","['early', 'mid-1990', 'object', 'orient', 'programming', 'develop', 'dominant', 'programming', 'paradigm', 'programming', 'language', 'support', 'technique', 'widely', 'available', 'include', 'visual', 'foxpro', '3', 'c++', 'delphicitation', 'need', 'dominance', 'enhance', 'rise', 'popularity', 'graphical', 'user', 'interface', 'rely', 'heavily', 'object', 'orient', 'programming', 'technique', 'example', 'closely', 'relate', 'dynamic', 'gui', 'library', 'oop', 'language', 'find', 'cocoa', 'framework', 'mac', 'write', 'objective', 'object', 'orient', 'dynamic', 'messaging', 'extension', 'base', 'smalltalk', 'oop', 'toolkit', 'enhance', 'popularity', 'event', 'drive', 'programming', 'concept', 'limit', 'oop']"
3408,"At ETH Zürich, Niklaus Wirth and his colleagues had also been investigating such topics as data abstraction and modular programming although this had been in common use in the 1960s or earlier. Modula-2 1978 included both, and their succeeding design, Oberon, included a distinctive approach to object orientation, classes, and such.","['eth', 'zürich', 'niklaus', 'wirth', 'colleague', 'investigate', 'topic', 'data', 'abstraction', 'modular', 'programming', 'common', 'use', '1960', 'early', 'modula-2', '1978', 'include', 'succeed', 'design', 'oberon', 'include', 'distinctive', 'approach', 'object', 'orientation', 'class']"
3409,"Object-oriented features have been added to many previously existing languages, including Ada, BASIC, Fortran, Pascal, and COBOL. Adding these features to languages that were not initially designed for them often led to problems with compatibility and maintainability of code.","['object', 'orient', 'feature', 'add', 'previously', 'exist', 'language', 'include', 'ada', 'basic', 'fortran', 'pascal', 'cobol', 'add', 'feature', 'language', 'initially', 'design', 'lead', 'problem', 'compatibility', 'maintainability', 'code']"
3410,"More recently, a number of languages have emerged that are primarily object-oriented, but that are also compatible with procedural methodology. Two such languages are Python and Ruby. Probably the most commercially important recent object-oriented languages are Java, developed by Sun Microsystems, as well as C# and Visual Basic.NET VB.NET, both designed for Microsoft's .NET platform. Each of these two frameworks shows, in its own way, the benefit of using OOP by creating an abstraction from implementation. VB.NET and C# support cross-language inheritance, allowing classes defined in one language to subclass classes defined in the other language.","['recently', 'number', 'language', 'emerge', 'primarily', 'object', 'orient', 'compatible', 'procedural', 'methodology', 'language', 'python', 'ruby', 'probably', 'commercially', 'important', 'recent', 'object', 'orient', 'language', 'java', 'develop', 'sun', 'microsystems', 'visual', 'basic', 'net', 'vb.net', 'design', 'microsoft', '.net', 'platform', 'framework', 'show', 'way', 'benefit', 'oop', 'create', 'abstraction', 'implementation', 'vb.net', 'support', 'cross', 'language', 'inheritance', 'allow', 'class', 'define', 'language', 'subclass', 'class', 'define', 'language']"
3411,"Object-oriented programming uses objects, but not all of the associated techniques and structures are supported directly in languages that claim to support OOP. It performs operations on operands. The features listed below are common among languages considered to be strongly class- and object-oriented or multi-paradigm with OOP support, with notable exceptions mentioned.16171819","['object', 'orient', 'programming', 'use', 'object', 'associate', 'technique', 'structure', 'support', 'directly', 'language', 'claim', 'support', 'oop', 'perform', 'operation', 'operand', 'feature', 'list', 'common', 'language', 'consider', 'strongly', 'class-', 'object', 'orient', 'multi', 'paradigm', 'oop', 'support', 'notable', 'exception', 'mentioned']"
3412,Modular programming support provides the ability to group procedures into files and modules for organizational purposes. Modules are namespaced so identifiers in one module will not conflict with a procedure or variable sharing the same name in another file or module.,"['modular', 'programming', 'support', 'provide', 'ability', 'group', 'procedure', 'file', 'module', 'organizational', 'purpose', 'module', 'namespace', 'identifier', 'module', 'conflict', 'procedure', 'variable', 'sharing', 'file', 'module']"
3413,Languages that support object-oriented programming OOP typically use inheritance for code reuse and extensibility in the form of either classes or prototypes. Those that use classes support two main concepts:,"['language', 'support', 'object', 'orient', 'programming', 'oop', 'typically', 'use', 'inheritance', 'code', 'reuse', 'extensibility', 'form', 'class', 'prototype', 'use', 'class', 'support', 'main', 'concept']"
3414,"Objects sometimes correspond to things found in the real world. For example, a graphics program may have objects such as ""circle"", ""square"", ""menu"". An online shopping system might have objects such as ""shopping cart"", ""customer"", and ""product"".20 Sometimes objects represent more abstract entities, like an object that represents an open file, or an object that provides the service of translating measurements from U.S. customary to metric.","['object', 'correspond', 'thing', 'find', 'real', 'world', 'example', 'graphic', 'program', 'object', 'circle', 'square', 'menu', 'online', 'shopping', 'system', 'object', 'shop', 'cart', 'customer', 'product', 'object', 'represent', 'abstract', 'entity', 'like', 'object', 'represent', 'open', 'file', 'object', 'provide', 'service', 'translate', 'measurement', 'u.s.', 'customary', 'metric']"
3415,"Each object is said to be an instance of a particular class for example, an object with its name field set to ""Mary"" might be an instance of class Employee. Procedures in object-oriented programming are known as methods; variables are also known as fields, members, attributes, or properties. This leads to the following terms:","['object', 'say', 'instance', 'particular', 'class', 'example', 'object', 'field', 'set', 'mary', 'instance', 'class', 'employee', 'procedure', 'object', 'orient', 'programming', 'know', 'method', 'variable', 'know', 'field', 'member', 'attribute', 'property', 'lead', 'follow', 'term']"
3416,"Objects are accessed somewhat like variables with complex internal structure, and in many languages are effectively pointers, serving as actual references to a single instance of said object in memory within a heap or stack. They provide a layer of abstraction which can be used to separate internal from external code. External code can use an object by calling a specific instance method with a certain set of input parameters, read an instance variable, or write to an instance variable. Objects are created by calling a special type of method in the class known as a constructor. A program may create many instances of the same class as it runs, which operate independently. This is an easy way for the same procedures to be used on different sets of data.","['object', 'access', 'somewhat', 'like', 'variable', 'complex', 'internal', 'structure', 'language', 'effectively', 'pointer', 'serve', 'actual', 'reference', 'single', 'instance', 'say', 'object', 'memory', 'heap', 'stack', 'provide', 'layer', 'abstraction', 'separate', 'internal', 'external', 'code', 'external', 'code', 'use', 'object', 'call', 'specific', 'instance', 'method', 'certain', 'set', 'input', 'parameter', 'read', 'instance', 'variable', 'write', 'instance', 'variable', 'object', 'create', 'call', 'special', 'type', 'method', 'class', 'know', 'constructor', 'program', 'create', 'instance', 'class', 'run', 'operate', 'independently', 'easy', 'way', 'procedure', 'different', 'set', 'datum']"
3417,"Object-oriented programming that uses classes is sometimes called class-based programming, while prototype-based programming does not typically use classes. As a result, significantly different yet analogous terminology is used to define the concepts of object and instance.","['object', 'orient', 'programming', 'use', 'class', 'call', 'class', 'base', 'programming', 'prototype', 'base', 'programming', 'typically', 'use', 'class', 'result', 'significantly', 'different', 'analogous', 'terminology', 'define', 'concept', 'object', 'instance']"
3418,In some languages classes and objects can be composed using other concepts like traits and mixins.,"['language', 'class', 'object', 'compose', 'concept', 'like', 'trait', 'mixin']"
3419,"In class-based languages the classes are defined beforehand and the objects are instantiated based on the classes. If two objects apple and orange are instantiated from the class Fruit, they are inherently fruits and it is guaranteed that you may handle them in the same way; e.g. a programmer can expect the existence of the same attributes such as color or sugar_content or is_ripe.","['class', 'base', 'language', 'class', 'define', 'object', 'instantiate', 'base', 'class', 'object', 'apple', 'orange', 'instantiate', 'class', 'fruit', 'inherently', 'fruit', 'guarantee', 'handle', 'way', 'e.g.', 'programmer', 'expect', 'existence', 'attribute', 'color', 'sugar_content', 'is_ripe']"
3420,"In prototype-based languages the objects are the primary entities. No classes even exist. The prototype of an object is just another object to which the object is linked. Every object has one prototype link and only one. New objects can be created based on already existing objects chosen as their prototype. You may call two different objects apple and orange a fruit, if the object fruit exists, and both apple and orange have fruit as their prototype. The idea of the fruit class doesn't exist explicitly, but as the equivalence class of the objects sharing the same prototype. The attributes and methods of the prototype are delegated to all the objects of the equivalence class defined by this prototype. The attributes and methods owned individually by the object may not be shared by other objects of the same equivalence class; e.g. the attribute sugar_content may be unexpectedly not present in apple. Only single inheritance can be implemented through the prototype.","['prototype', 'base', 'language', 'object', 'primary', 'entity', 'class', 'exist', 'prototype', 'object', 'object', 'object', 'link', 'object', 'prototype', 'link', 'new', 'object', 'create', 'base', 'exist', 'object', 'choose', 'prototype', 'different', 'object', 'apple', 'orange', 'fruit', 'object', 'fruit', 'exist', 'apple', 'orange', 'fruit', 'prototype', 'idea', 'fruit', 'class', 'exist', 'explicitly', 'equivalence', 'class', 'object', 'share', 'prototype', 'attribute', 'method', 'prototype', 'delegate', 'object', 'equivalence', 'class', 'define', 'prototype', 'attribute', 'method', 'own', 'individually', 'object', 'share', 'object', 'equivalence', 'class', 'e.g.', 'attribute', 'sugar_content', 'unexpectedly', 'present', 'apple', 'single', 'inheritance', 'implement', 'prototype']"
3421,"It is the responsibility of the object, not any external code, to select the procedural code to execute in response to a method call, typically by looking up the method at run time in a table associated with the object. This feature is known as dynamic dispatch. If the call variability relies on more than the single type of the object on which it is called i.e. at least one other parameter object is involved in the method choice, one speaks of multiple dispatch.","['responsibility', 'object', 'external', 'code', 'select', 'procedural', 'code', 'execute', 'response', 'method', 'typically', 'look', 'method', 'run', 'time', 'table', 'associate', 'object', 'feature', 'know', 'dynamic', 'dispatch', 'variability', 'rely', 'single', 'type', 'object', 'call', 'i.e.', 'parameter', 'object', 'involve', 'method', 'choice', 'speak', 'multiple', 'dispatch']"
3422,A method call is also known as message passing. It is conceptualized as a message the name of the method and its input parameters being passed to the object for dispatch.,"['method', 'know', 'message', 'pass', 'conceptualize', 'message', 'method', 'input', 'parameter', 'pass', 'object', 'dispatch']"
3423,"Data Abstraction is a design pattern in which data are visible only to semantically related functions, so as to prevent misuse. The success of data abstraction leads to frequent incorporation of data hiding as a design principle in object oriented and pure functional programming.","['datum', 'abstraction', 'design', 'pattern', 'datum', 'visible', 'semantically', 'relate', 'function', 'prevent', 'misuse', 'success', 'data', 'abstraction', 'lead', 'frequent', 'incorporation', 'datum', 'hide', 'design', 'principle', 'object', 'orient', 'pure', 'functional', 'programming']"
3424,"If a class does not allow calling code to access internal object data and permits access through methods only, this is a form of information hiding known as abstraction. Some languages Java, for example let classes enforce access restrictions explicitly, for example denoting internal data with the private keyword and designating methods intended for use by code outside the class with the public keyword. Methods may also be designed public, private, or intermediate levels such as protected which allows access from the same class and its subclasses, but not objects of a different class. In other languages like Python this is enforced only by convention for example, private methods may have names that start with an underscore. In C#, Swift & Kotlin languages, internal keyword permits access only to files present in same assembly, package or module as that of the class.21","['class', 'allow', 'call', 'code', 'access', 'internal', 'object', 'datum', 'permit', 'access', 'method', 'form', 'information', 'hiding', 'know', 'abstraction', 'language', 'java', 'example', 'let', 'class', 'enforce', 'access', 'restriction', 'explicitly', 'example', 'denote', 'internal', 'datum', 'private', 'keyword', 'designate', 'method', 'intend', 'use', 'code', 'outside', 'class', 'public', 'keyword', 'method', 'design', 'public', 'private', 'intermediate', 'level', 'protect', 'allow', 'access', 'class', 'subclass', 'object', 'different', 'class', 'language', 'like', 'python', 'enforce', 'convention', 'example', 'private', 'method', 'name', 'start', 'underscore', 'swift', 'kotlin', 'language', 'internal', 'keyword', 'permit', 'access', 'file', 'present', 'assembly', 'package', 'module', 'class']"
3425,"Encapsulation prevents external code from being concerned with the internal workings of an object. This facilitates code refactoring, for example allowing the author of the class to change how objects of that class represent their data internally without changing any external code as long as ""public"" method calls work the same way. It also encourages programmers to put all the code that is concerned with a certain set of data in the same class, which organizes it for easy comprehension by other programmers. Encapsulation is a technique that encourages decoupling.","['encapsulation', 'prevent', 'external', 'code', 'concern', 'internal', 'working', 'object', 'facilitate', 'code', 'refactoring', 'example', 'allow', 'author', 'class', 'change', 'object', 'class', 'represent', 'datum', 'internally', 'change', 'external', 'code', 'long', 'public', 'method', 'call', 'work', 'way', 'encourage', 'programmer', 'code', 'concern', 'certain', 'set', 'datum', 'class', 'organize', 'easy', 'comprehension', 'programmer', 'encapsulation', 'technique', 'encourage', 'decouple']"
3426,"Objects can contain other objects in their instance variables; this is known as object composition. For example, an object in the Employee class might contain either directly or through a pointer an object in the Address class, in addition to its own instance variables like ""first_name"" and ""position"". Object composition is used to represent ""has-a"" relationships: every employee has an address, so every Employee object has access to a place to store an Address object either directly embedded within itself, or at a separate location addressed via a pointer.","['object', 'contain', 'object', 'instance', 'variable', 'know', 'object', 'composition', 'example', 'object', 'employee', 'class', 'contain', 'directly', 'pointer', 'object', 'address', 'class', 'addition', 'instance', 'variable', 'like', 'first_name', 'position', 'object', 'composition', 'represent', 'relationship', 'employee', 'address', 'employee', 'object', 'access', 'place', 'store', 'address', 'object', 'directly', 'embed', 'separate', 'location', 'address', 'pointer']"
3427,"Languages that support classes almost always support inheritance. This allows classes to be arranged in a hierarchy that represents ""is-a-type-of"" relationships. For example, class Employee might inherit from class Person. All the data and methods available to the parent class also appear in the child class with the same names. For example, class Person might define variables ""first_name"" and ""last_name"" with method ""make_full_name"". These will also be available in class Employee, which might add the variables ""position"" and ""salary"". This technique allows easy re-use of the same procedures and data definitions, in addition to potentially mirroring real-world relationships in an intuitive way. Rather than utilizing database tables and programming subroutines, the developer utilizes objects the user may be more familiar with: objects from their application domain.22","['language', 'support', 'class', 'support', 'inheritance', 'allow', 'class', 'arrange', 'hierarchy', 'represent', 'type', 'relationship', 'example', 'class', 'employee', 'inherit', 'class', 'person', 'datum', 'method', 'available', 'parent', 'class', 'appear', 'child', 'class', 'name', 'example', 'class', 'person', 'define', 'variable', 'first_name', 'last_name', 'method', 'make_full_name', 'available', 'class', 'employee', 'add', 'variable', 'position', 'salary', 'technique', 'allow', 'easy', 'use', 'procedure', 'data', 'definition', 'addition', 'potentially', 'mirror', 'real', 'world', 'relationship', 'intuitive', 'way', 'utilize', 'database', 'table', 'programming', 'subroutine', 'developer', 'utilize', 'object', 'user', 'familiar', 'object', 'application', 'domain']"
3428,"Subclasses can override the methods defined by superclasses. Multiple inheritance is allowed in some languages, though this can make resolving overrides complicated. Some languages have special support for mixins, though in any language with multiple inheritance, a mixin is simply a class that does not represent an is-a-type-of relationship. Mixins are typically used to add the same methods to multiple classes. For example, class UnicodeConversionMixin might provide a method unicode_to_ascii when included in class FileReader and class WebPageScraper, which don't share a common parent.","['subclass', 'override', 'method', 'define', 'superclass', 'multiple', 'inheritance', 'allow', 'language', 'resolve', 'override', 'complicated', 'language', 'special', 'support', 'mixin', 'language', 'multiple', 'inheritance', 'mixin', 'simply', 'class', 'represent', 'type', 'relationship', 'mixin', 'typically', 'add', 'method', 'multiple', 'class', 'example', 'class', 'unicodeconversionmixin', 'provide', 'method', 'unicode_to_ascii', 'include', 'class', 'filereader', 'class', 'webpagescraper', 'share', 'common', 'parent']"
3429,"Abstract classes cannot be instantiated into objects; they exist only for the purpose of inheritance into other ""concrete"" classes that can be instantiated. In Java, the final keyword can be used to prevent a class from being subclassed.","['abstract', 'class', 'instantiate', 'object', 'exist', 'purpose', 'inheritance', 'concrete', 'class', 'instantiate', 'java', 'final', 'keyword', 'prevent', 'class', 'subclasse']"
3430,"The doctrine of composition over inheritance advocates implementing has-a relationships using composition instead of inheritance. For example, instead of inheriting from class Person, class Employee could give each Employee object an internal Person object, which it then has the opportunity to hide from external code even if class Person has many public attributes or methods. Some languages, like Go do not support inheritance at all.","['doctrine', 'composition', 'inheritance', 'advocate', 'implement', 'relationship', 'composition', 'instead', 'inheritance', 'example', 'instead', 'inherit', 'class', 'person', 'class', 'employee', 'employee', 'object', 'internal', 'person', 'object', 'opportunity', 'hide', 'external', 'code', 'class', 'person', 'public', 'attribute', 'method', 'language', 'like', 'support', 'inheritance']"
3431,"The ""open/closed principle"" advocates that classes and functions ""should be open for extension, but closed for modification"".","['open', 'closed', 'principle', 'advocate', 'class', 'function', 'open', 'extension', 'close', 'modification']"
3432,Delegation is another language feature that can be used as an alternative to inheritance.,"['delegation', 'language', 'feature', 'alternative', 'inheritance']"
3433,"Subtyping – a form of polymorphism – is when calling code can be independent of which class in the supported hierarchy it is operating on – the parent class or one of its descendants. Meanwhile, the same operation name among objects in an inheritance hierarchy may behave differently.","['subtype', 'form', 'polymorphism', 'call', 'code', 'independent', 'class', 'support', 'hierarchy', 'operate', 'parent', 'class', 'descendant', 'operation', 'object', 'inheritance', 'hierarchy', 'behave', 'differently']"
3434,"For example, objects of type Circle and Square are derived from a common class called Shape. The Draw function for each type of Shape implements what is necessary to draw itself while calling code can remain indifferent to the particular type of Shape being drawn.","['example', 'object', 'type', 'circle', 'square', 'derive', 'common', 'class', 'call', 'shape', 'draw', 'function', 'type', 'shape', 'implement', 'necessary', 'draw', 'call', 'code', 'remain', 'indifferent', 'particular', 'type', 'shape', 'draw']"
3435,This is another type of abstraction that simplifies code external to the class hierarchy and enables strong separation of concerns.,"['type', 'abstraction', 'simplifie', 'code', 'external', 'class', 'hierarchy', 'enable', 'strong', 'separation', 'concern']"
3436,"In languages that support open recursion, object methods can call other methods on the same object including themselves, typically using a special variable or keyword called this or self. This variable is late-bound; it allows a method defined in one class to invoke another method that is defined later, in some subclass thereof.","['language', 'support', 'open', 'recursion', 'object', 'method', 'method', 'object', 'include', 'typically', 'special', 'variable', 'keyword', 'call', 'self', 'variable', 'late', 'bind', 'allow', 'method', 'define', 'class', 'invoke', 'method', 'define', 'later', 'subclass', 'thereof']"
3437,"Simula 1967 is generally accepted as being the first language with the primary features of an object-oriented language. It was created for making simulation programs, in which what came to be called objects were the most important information representation. Smalltalk 1972 to 1980 is another early example, and the one with which much of the theory of OOP was developed. Concerning the degree of object orientation, the following distinctions can be made:","['simula', '1967', 'generally', 'accept', 'language', 'primary', 'feature', 'object', 'orient', 'language', 'create', 'make', 'simulation', 'program', 'come', 'call', 'object', 'important', 'information', 'representation', 'smalltalk', '1972', '1980', 'early', 'example', 'theory', 'oop', 'develop', 'concern', 'degree', 'object', 'orientation', 'following', 'distinction']"
3438,"In recent years, object-oriented programming has become especially popular in dynamic programming languages. Python, PowerShell, Ruby and Groovy are dynamic languages built on OOP principles, while Perl and PHP have been adding object-oriented features since Perl 5 and PHP 4, and ColdFusion since version 6.","['recent', 'year', 'object', 'orient', 'programming', 'especially', 'popular', 'dynamic', 'programming', 'language', 'python', 'powershell', 'ruby', 'groovy', 'dynamic', 'language', 'build', 'oop', 'principle', 'perl', 'php', 'add', 'object', 'orient', 'feature', 'perl', 'php', 'coldfusion', 'version']"
3439,"The Document Object Model of HTML, XHTML, and XML documents on the Internet has bindings to the popular JavaScript/ECMAScript language. JavaScript is perhaps the best known prototype-based programming language, which employs cloning from prototypes rather than inheriting from a class contrast to class-based programming. Another scripting language that takes this approach is Lua.","['document', 'object', 'model', 'html', 'xhtml', 'xml', 'document', 'internet', 'binding', 'popular', 'javascript', 'ecmascript', 'language', 'javascript', 'well', 'know', 'prototype', 'base', 'programming', 'language', 'employ', 'clone', 'prototype', 'inherit', 'class', 'contrast', 'class', 'base', 'programming', 'scripting', 'language', 'take', 'approach', 'lua']"
3440,"The messages that flow between computers to request services in a client-server environment can be designed as the linearizations of objects defined by class objects known to both the client and the server. For example, a simple linearized object would consist of a length field, a code point identifying the class, and a data value. A more complex example would be a command consisting of the length and code point of the command and values consisting of linearized objects representing the command's parameters. Each such command must be directed by the server to an object whose class or superclass recognizes the command and is able to provide the requested service. Clients and servers are best modeled as complex object-oriented structures. Distributed Data Management Architecture DDM took this approach and used class objects to define objects at four levels of a formal hierarchy:","['message', 'flow', 'computer', 'request', 'service', 'client', 'server', 'environment', 'design', 'linearization', 'object', 'define', 'class', 'object', 'know', 'client', 'server', 'example', 'simple', 'linearize', 'object', 'consist', 'length', 'field', 'code', 'point', 'identify', 'class', 'data', 'value', 'complex', 'example', 'command', 'consist', 'length', 'code', 'point', 'command', 'value', 'consist', 'linearize', 'object', 'represent', 'command', 'parameter', 'command', 'direct', 'server', 'object', 'class', 'superclass', 'recognize', 'command', 'able', 'provide', 'request', 'service', 'client', 'server', 'well', 'model', 'complex', 'object', 'orient', 'structure', 'distribute', 'data', 'management', 'architecture', 'ddm', 'take', 'approach', 'class', 'object', 'define', 'object', 'level', 'formal', 'hierarchy']"
3441,The initial version of DDM defined distributed file services. It was later extended to be the foundation of Distributed Relational Database Architecture DRDA.,"['initial', 'version', 'ddm', 'define', 'distribute', 'file', 'service', 'later', 'extended', 'foundation', 'distributed', 'relational', 'database', 'architecture', 'drda']"
3442,"Challenges of object-oriented design are addressed by several approaches. Most common is known as the design patterns codified by Gamma et al.. More broadly, the term ""design patterns"" can be used to refer to any general, repeatable, solution pattern to a commonly occurring problem in software design. Some of these commonly occurring problems have implications and solutions particular to object-oriented development.","['challenge', 'object', 'orient', 'design', 'address', 'approach', 'common', 'know', 'design', 'pattern', 'codify', 'gamma', 'broadly', 'term', 'design', 'pattern', 'refer', 'general', 'repeatable', 'solution', 'pattern', 'commonly', 'occur', 'problem', 'software', 'design', 'commonly', 'occur', 'problem', 'implication', 'solution', 'particular', 'object', 'orient', 'development']"
3443,"It is intuitive to assume that inheritance creates a semantic ""is a"" relationship, and thus to infer that objects instantiated from subclasses can always be safely used instead of those instantiated from the superclass. This intuition is unfortunately false in most OOP languages, in particular in all those that allow mutable objects. Subtype polymorphism as enforced by the type checker in OOP languages with mutable objects cannot guarantee behavioral subtyping in any context. Behavioral subtyping is undecidable in general, so it cannot be implemented by a program compiler. Class or object hierarchies must be carefully designed, considering possible incorrect uses that cannot be detected syntactically. This issue is known as the Liskov substitution principle.","['intuitive', 'assume', 'inheritance', 'create', 'semantic', 'relationship', 'infer', 'object', 'instantiate', 'subclass', 'safely', 'instead', 'instantiate', 'superclass', 'intuition', 'unfortunately', 'false', 'oop', 'language', 'particular', 'allow', 'mutable', 'object', 'subtype', 'polymorphism', 'enforce', 'type', 'checker', 'oop', 'language', 'mutable', 'object', 'guarantee', 'behavioral', 'subtype', 'context', 'behavioral', 'subtype', 'undecidable', 'general', 'implement', 'program', 'compiler', 'class', 'object', 'hierarchy', 'carefully', 'design', 'consider', 'possible', 'incorrect', 'use', 'detect', 'syntactically', 'issue', 'know', 'liskov', 'substitution', 'principle']"
3444,"Design Patterns: Elements of Reusable Object-Oriented Software is an influential book published in 1994 by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, often referred to humorously as the ""Gang of Four"". Along with exploring the capabilities and pitfalls of object-oriented programming, it describes 23 common programming problems and patterns for solving them. As of April 2007, the book was in its 36th printing.","['design', 'patterns', 'element', 'reusable', 'object', 'orient', 'software', 'influential', 'book', 'publish', '1994', 'erich', 'gamma', 'richard', 'helm', 'ralph', 'johnson', 'john', 'vlissides', 'refer', 'humorously', 'gang', 'explore', 'capability', 'pitfall', 'object', 'orient', 'programming', 'describe', 'common', 'programming', 'problem', 'pattern', 'solve', 'april', '2007', 'book', '36th', 'printing']"
3445,The book describes the following patterns:,"['book', 'describe', 'following', 'pattern']"
3446,"Both object-oriented programming and relational database management systems RDBMSs are extremely common in software todayupdate. Since relational databases don't store objects directly though some RDBMSs have object-oriented features to approximate this, there is a general need to bridge the two worlds. The problem of bridging object-oriented programming accesses and data patterns with relational databases is known as object-relational impedance mismatch. There are a number of approaches to cope with this problem, but no general solution without downsides.24 One of the most common approaches is object-relational mapping, as found in IDE languages such as Visual FoxPro and libraries such as Java Data Objects and Ruby on Rails' ActiveRecord.","['object', 'orient', 'programming', 'relational', 'database', 'management', 'system', 'rdbms', 'extremely', 'common', 'software', 'todayupdate', 'relational', 'database', 'store', 'object', 'directly', 'rdbms', 'object', 'orient', 'feature', 'approximate', 'general', 'need', 'bridge', 'world', 'problem', 'bridge', 'object', 'orient', 'programming', 'access', 'datum', 'pattern', 'relational', 'database', 'know', 'object', 'relational', 'impedance', 'mismatch', 'number', 'approach', 'cope', 'problem', 'general', 'solution', 'downsides', 'common', 'approach', 'object', 'relational', 'mapping', 'find', 'ide', 'language', 'visual', 'foxpro', 'library', 'java', 'data', 'objects', 'ruby', 'rails', 'activerecord']"
3447,"There are also object databases that can be used to replace RDBMSs, but these have not been as technically and commercially successful as RDBMSs.","['object', 'database', 'replace', 'rdbms', 'technically', 'commercially', 'successful', 'rdbmss']"
3448,"OOP can be used to associate real-world objects and processes with digital counterparts. However, not everyone agrees that OOP facilitates direct real-world mapping see Criticism section or that real-world mapping is even a worthy goal; Bertrand Meyer argues in Object-Oriented Software Construction25 that a program is not a model of the world but a model of some part of the world; ""Reality is a cousin twice removed"". At the same time, some principal limitations of OOP have been noted.26 For example, the circle-ellipse problem is difficult to handle using OOP's concept of inheritance.","['oop', 'associate', 'real', 'world', 'object', 'process', 'digital', 'counterpart', 'agree', 'oop', 'facilitate', 'direct', 'real', 'world', 'mapping', 'criticism', 'section', 'real', 'world', 'mapping', 'worthy', 'goal', 'bertrand', 'meyer', 'argue', 'object', 'orient', 'software', 'construction25', 'program', 'model', 'world', 'model', 'world', 'reality', 'cousin', 'twice', 'remove', 'time', 'principal', 'limitation', 'oop', 'noted', 'example', 'circle', 'ellipse', 'problem', 'difficult', 'handle', 'oop', 'concept', 'inheritance']"
3449,"However, Niklaus Wirth who popularized the adage now known as Wirth's law: ""Software is getting slower more rapidly than hardware becomes faster"" said of OOP in his paper, ""Good Ideas through the Looking Glass"", ""This paradigm closely reflects the structure of systems 'in the real world', and it is therefore well suited to model complex systems with complex behaviours""27 contrast KISS principle.","['niklaus', 'wirth', 'popularize', 'adage', 'know', 'wirth', 'law', 'software', 'get', 'slow', 'rapidly', 'hardware', 'fast', 'say', 'oop', 'paper', 'good', 'ideas', 'looking', 'glass', 'paradigm', 'closely', 'reflect', 'structure', 'system', 'real', 'world', 'suited', 'model', 'complex', 'system', 'complex', 'behaviours', 'contrast', 'kiss', 'principle']"
3450,Steve Yegge and others noted that natural languages lack the OOP approach of strictly prioritizing things objects/nouns before actions methods/verbs.28 This problem may cause OOP to suffer more convoluted solutions than procedural programming.29,"['steve', 'yegge', 'note', 'natural', 'language', 'lack', 'oop', 'approach', 'strictly', 'prioritize', 'thing', 'object', 'noun', 'action', 'method', 'verbs', 'problem', 'cause', 'oop', 'suffer', 'convoluted', 'solution', 'procedural', 'programming']"
3451,"OOP was developed to increase the reusability and maintainability of source code.30 Transparent representation of the control flow had no priority and was meant to be handled by a compiler. With the increasing relevance of parallel hardware and multithreaded coding, developing transparent control flow becomes more important, something hard to achieve with OOP.31323334","['oop', 'develop', 'increase', 'reusability', 'maintainability', 'source', 'code', 'transparent', 'representation', 'control', 'flow', 'priority', 'mean', 'handle', 'compiler', 'increase', 'relevance', 'parallel', 'hardware', 'multithreaded', 'coding', 'develop', 'transparent', 'control', 'flow', 'important', 'hard', 'achieve', 'oop']"
3452,"Responsibility-driven design defines classes in terms of a contract, that is, a class should be defined around a responsibility and the information that it shares. This is contrasted by Wirfs-Brock and Wilkerson with data-driven design, where classes are defined around the data-structures that must be held. The authors hold that responsibility-driven design is preferable.","['responsibility', 'drive', 'design', 'define', 'class', 'term', 'contract', 'class', 'define', 'responsibility', 'information', 'share', 'contrast', 'wirfs', 'brock', 'wilkerson', 'data', 'drive', 'design', 'class', 'define', 'datum', 'structure', 'hold', 'author', 'hold', 'responsibility', 'drive', 'design', 'preferable']"
3453,SOLID is a mnemonic invented by Michael Feathers which spells out five software engineering design principles:,"['solid', 'mnemonic', 'invent', 'michael', 'feathers', 'spell', 'software', 'engineering', 'design', 'principle']"
3454,GRASP General Responsibility Assignment Software Patterns is another set of guidelines advocated by Craig Larman.,"['grasp', 'general', 'responsibility', 'assignment', 'software', 'patterns', 'set', 'guideline', 'advocate', 'craig', 'larman']"
3455,"The OOP paradigm has been criticised for a number of reasons, including not meeting its stated goals of reusability and modularity,3536 and for overemphasizing one aspect of software design and modeling data/objects at the expense of other important aspects computation/algorithms.3738","['oop', 'paradigm', 'criticise', 'number', 'reason', 'include', 'meet', 'stated', 'goal', 'reusability', 'modularity', 'overemphasize', 'aspect', 'software', 'design', 'model', 'datum', 'object', 'expense', 'important', 'aspect', 'computation', 'algorithms']"
3456,"Luca Cardelli has claimed that OOP code is ""intrinsically less efficient"" than procedural code, that OOP can take longer to compile, and that OOP languages have ""extremely poor modularity properties with respect to class extension and modification"", and tend to be extremely complex.35 The latter point is reiterated by Joe Armstrong, the principal inventor of Erlang, who is quoted as saying:36","['luca', 'cardelli', 'claim', 'oop', 'code', 'intrinsically', 'efficient', 'procedural', 'code', 'oop', 'long', 'compile', 'oop', 'language', 'extremely', 'poor', 'modularity', 'property', 'respect', 'class', 'extension', 'modification', 'tend', 'extremely', 'complex', 'point', 'reiterate', 'joe', 'armstrong', 'principal', 'inventor', 'erlang', 'quote', 'saying']"
3457,The problem with object-oriented languages is they've got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.,"['problem', 'object', 'orient', 'language', 'get', 'implicit', 'environment', 'carry', 'want', 'banana', 'get', 'gorilla', 'hold', 'banana', 'entire', 'jungle']"
3458,A study by Potok et al. has shown no significant difference in productivity between OOP and procedural approaches.39,"['study', 'potok', 'show', 'significant', 'difference', 'productivity', 'oop', 'procedural', 'approaches']"
3459,"Christopher J. Date stated that critical comparison of OOP to other technologies, relational in particular, is difficult because of lack of an agreed-upon and rigorous definition of OOP;40 however, Date and Darwen have proposed a theoretical foundation on OOP that uses OOP as a kind of customizable type system to support RDBMS.41","['christopher', 'date', 'state', 'critical', 'comparison', 'oop', 'technology', 'relational', 'particular', 'difficult', 'lack', 'agree', 'rigorous', 'definition', 'oop', 'date', 'darwen', 'propose', 'theoretical', 'foundation', 'oop', 'use', 'oop', 'kind', 'customizable', 'type', 'system', 'support', 'rdbms']"
3460,"In an article Lawrence Krubner claimed that compared to other languages LISP dialects, functional languages, etc. OOP languages have no unique strengths, and inflict a heavy burden of unneeded complexity.42","['article', 'lawrence', 'krubner', 'claim', 'compare', 'language', 'lisp', 'dialect', 'functional', 'language', 'etc', 'oop', 'language', 'unique', 'strength', 'inflict', 'heavy', 'burden', 'unneeded', 'complexity']"
3461,Alexander Stepanov compares object orientation unfavourably to generic programming:37,"['alexander', 'stepanov', 'compare', 'object', 'orientation', 'unfavourably', 'generic', 'programming']"
3462,I find OOP technically unsound. It attempts to decompose the world in terms of interfaces that vary on a single type. To deal with the real problems you need multisorted algebras — families of interfaces that span multiple types. I find OOP philosophically unsound. It claims that everything is an object. Even if it is true it is not very interesting — saying that everything is an object is saying nothing at all.,"['find', 'oop', 'technically', 'unsound', 'attempt', 'decompose', 'world', 'term', 'interface', 'vary', 'single', 'type', 'deal', 'real', 'problem', 'need', 'multisorted', 'algebra', 'family', 'interface', 'span', 'multiple', 'type', 'find', 'oop', 'philosophically', 'unsound', 'claim', 'object', 'true', 'interesting', 'say', 'object', 'say']"
3463,"Paul Graham has suggested that OOP's popularity within large companies is due to ""large and frequently changing groups of mediocre programmers"". According to Graham, the discipline imposed by OOP prevents any one programmer from ""doing too much damage"".43","['paul', 'graham', 'suggest', 'oop', 'popularity', 'large', 'company', 'large', 'frequently', 'change', 'group', 'mediocre', 'programmer', 'accord', 'graham', 'discipline', 'impose', 'oop', 'prevent', 'programmer', 'damage']"
3464,Leo Brodie has suggested a connection between the standalone nature of objects and a tendency to duplicate code44 in violation of the don't repeat yourself principle45 of software development.,"['leo', 'brodie', 'suggest', 'connection', 'standalone', 'nature', 'object', 'tendency', 'duplicate', 'code44', 'violation', 'repeat', 'principle45', 'software', 'development']"
3465,"Steve Yegge noted that, as opposed to functional programming:46","['steve', 'yegge', 'note', 'oppose', 'functional', 'programming']"
3466,Object Oriented Programming puts the Nouns first and foremost. Why would you go to such lengths to put one part of speech on a pedestal? Why should one kind of concept take precedence over another? It's not as if OOP has suddenly made verbs less important in the way we actually think. It's a strangely skewed perspective.,"['object', 'oriented', 'programming', 'put', 'nouns', 'foremost', 'length', 'speech', 'pedestal', 'kind', 'concept', 'precedence', 'oop', 'suddenly', 'verb', 'important', 'way', 'actually', 'think', 'strangely', 'skewed', 'perspective']"
3467,"Rich Hickey, creator of Clojure, described object systems as overly simplistic models of the real world. He emphasized the inability of OOP to model time properly, which is getting increasingly problematic as software systems become more concurrent.38","['rich', 'hickey', 'creator', 'clojure', 'describe', 'object', 'system', 'overly', 'simplistic', 'model', 'real', 'world', 'emphasize', 'inability', 'oop', 'model', 'time', 'properly', 'get', 'increasingly', 'problematic', 'software', 'system', 'concurrent']"
3468,"Eric S. Raymond, a Unix programmer and open-source software advocate, has been critical of claims that present object-oriented programming as the ""One True Solution"", and has written that object-oriented programming languages tend to encourage thickly layered programs that destroy transparency.47 Raymond compares this unfavourably to the approach taken with Unix and the C programming language.47","['eric', 'raymond', 'unix', 'programmer', 'open', 'source', 'software', 'advocate', 'critical', 'claim', 'present', 'object', 'orient', 'programming', 'true', 'solution', 'write', 'object', 'orient', 'programming', 'language', 'tend', 'encourage', 'thickly', 'layer', 'program', 'destroy', 'transparency', 'raymond', 'compare', 'unfavourably', 'approach', 'take', 'unix', 'programming', 'language']"
3469,"Rob Pike, a programmer involved in the creation of UTF-8 and Go, has called object-oriented programming ""the Roman numerals of computing""48 and has said that OOP languages frequently shift the focus from data structures and algorithms to types.49 Furthermore, he cites an instance of a Java professor whose ""idiomatic"" solution to a problem was to create six new classes, rather than to simply use a lookup table.50","['rob', 'pike', 'programmer', 'involve', 'creation', 'utf-8', 'call', 'object', 'orient', 'programming', 'roman', 'numeral', 'computing', 'say', 'oop', 'language', 'frequently', 'shift', 'focus', 'datum', 'structure', 'algorithm', 'types', 'furthermore', 'cite', 'instance', 'java', 'professor', 'idiomatic', 'solution', 'problem', 'create', 'new', 'class', 'simply', 'use', 'lookup', 'table']"
3470,"Regarding inheritance, Bob Martin states that because they are software, related classes do not necessarily share the relationships of the things they represent.51","['inheritance', 'bob', 'martin', 'state', 'software', 'relate', 'class', 'necessarily', 'share', 'relationship', 'thing', 'represent']"
3471,"Objects are the run-time entities in an object-oriented system. They may represent a person, a place, a bank account, a table of data, or any item that the program has to handle.","['object', 'run', 'time', 'entity', 'object', 'orient', 'system', 'represent', 'person', 'place', 'bank', 'account', 'table', 'datum', 'item', 'program', 'handle']"
3472,There have been several attempts at formalizing the concepts used in object-oriented programming. The following concepts and constructs have been used as interpretations of OOP concepts:,"['attempt', 'formalize', 'concept', 'object', 'orient', 'programming', 'follow', 'concept', 'construct', 'interpretation', 'oop', 'concept']"
3473,"Attempts to find a consensus definition or theory behind objects have not proven very successful however, see Abadi & Cardelli, A Theory of Objects53 for formal definitions of many OOP concepts and constructs, and often diverge widely. For example, some definitions focus on mental activities, and some on program structuring. One of the simpler definitions is that OOP is the act of using ""map"" data structures or arrays that can contain functions and pointers to other maps, all with some syntactic and scoping sugar on top. Inheritance can be performed by cloning the maps sometimes called ""prototyping"".","['attempt', 'find', 'consensus', 'definition', 'theory', 'object', 'prove', 'successful', 'abadi', 'cardelli', 'theory', 'objects53', 'formal', 'definition', 'oop', 'concept', 'construct', 'diverge', 'widely', 'example', 'definition', 'focus', 'mental', 'activity', 'program', 'structure', 'simple', 'definition', 'oop', 'act', 'map', 'datum', 'structure', 'array', 'contain', 'function', 'pointer', 'map', 'syntactic', 'scope', 'sugar', 'inheritance', 'perform', 'clone', 'map', 'call', 'prototype']"
3474,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3475,Programming paradigms are a way to classify programming languages based on their features. Languages can be classified into multiple paradigms.,"['programming', 'paradigm', 'way', 'classify', 'programming', 'language', 'base', 'feature', 'language', 'classify', 'multiple', 'paradigms']"
3476,"Some paradigms are concerned mainly with implications for the execution model of the language, such as allowing side effects, or whether the sequence of operations is defined by the execution model. Other paradigms are concerned mainly with the way that code is organized, such as grouping a code into units along with the state that is modified by the code. Yet others are concerned mainly with the style of syntax and grammar.","['paradigm', 'concern', 'mainly', 'implication', 'execution', 'model', 'language', 'allow', 'effect', 'sequence', 'operation', 'define', 'execution', 'model', 'paradigm', 'concern', 'mainly', 'way', 'code', 'organize', 'group', 'code', 'unit', 'state', 'modify', 'code', 'concern', 'mainly', 'style', 'syntax', 'grammar']"
3477,"Symbolic techniques such as reflection, which allow the program to refer to itself, might also be considered as a programming paradigm. However, this is compatible with the major paradigms and thus is not a real paradigm in its own right.","['symbolic', 'technique', 'reflection', 'allow', 'program', 'refer', 'consider', 'programming', 'paradigm', 'compatible', 'major', 'paradigm', 'real', 'paradigm', 'right']"
3478,"For example, languages that fall into the imperative paradigm have two main features: they state the order in which operations occur, with constructs that explicitly control that order, and they allow side effects, in which state can be modified at one point in time, within one unit of code, and then later read at a different point in time inside a different unit of code. The communication between the units of code is not explicit. Meanwhile, in object-oriented programming, code is organized into objects that contain a state that is only modified by the code that is part of the object. Most object-oriented languages are also imperative languages. In contrast, languages that fit the declarative paradigm do not state the order in which to execute operations. Instead, they supply a number of available operations in the system, along with the conditions under which each is allowed to execute.4 The implementation of the language's execution model tracks which operations are free to execute and chooses the order independently. More at Comparison of multi-paradigm programming languages.","['example', 'language', 'fall', 'imperative', 'paradigm', 'main', 'feature', 'state', 'order', 'operation', 'occur', 'construct', 'explicitly', 'control', 'order', 'allow', 'effect', 'state', 'modify', 'point', 'time', 'unit', 'code', 'later', 'read', 'different', 'point', 'time', 'inside', 'different', 'unit', 'code', 'communication', 'unit', 'code', 'explicit', 'object', 'orient', 'programming', 'code', 'organize', 'object', 'contain', 'state', 'modify', 'code', 'object', 'object', 'orient', 'language', 'imperative', 'language', 'contrast', 'language', 'fit', 'declarative', 'paradigm', 'state', 'order', 'execute', 'operation', 'instead', 'supply', 'number', 'available', 'operation', 'system', 'condition', 'allow', 'execute', 'implementation', 'language', 'execution', 'model', 'track', 'operation', 'free', 'execute', 'choose', 'order', 'independently', 'comparison', 'multi', 'paradigm', 'programming', 'language']"
3479,"Just as software engineering as a process is defined by differing methodologies, so the programming languages as models of computation are defined by differing paradigms. Some languages are designed to support one paradigm Smalltalk supports object-oriented programming, Haskell supports functional programming, while other programming languages support multiple paradigms such as Object Pascal, C++, Java, JavaScript, C#, Scala, Visual Basic, Common Lisp, Scheme, Perl, PHP, Python, Ruby, Oz, and F#. For example, programs written in C++, Object Pascal or PHP can be purely procedural, purely object-oriented, or can contain elements of both or other paradigms. Software designers and programmers decide how to use those paradigm elements.","['software', 'engineering', 'process', 'define', 'differ', 'methodology', 'programming', 'language', 'model', 'computation', 'define', 'differ', 'paradigm', 'language', 'design', 'support', 'paradigm', 'smalltalk', 'support', 'object', 'orient', 'programming', 'haskell', 'support', 'functional', 'programming', 'programming', 'language', 'support', 'multiple', 'paradigm', 'object', 'pascal', 'c++', 'java', 'javascript', 'scala', 'visual', 'basic', 'common', 'lisp', 'scheme', 'perl', 'php', 'python', 'ruby', 'example', 'program', 'write', 'c++', 'object', 'pascal', 'php', 'purely', 'procedural', 'purely', 'object', 'orient', 'contain', 'element', 'paradigms', 'software', 'designer', 'programmer', 'decide', 'use', 'paradigm', 'element']"
3480,"In object-oriented programming, programs are treated as a set of interacting objects. In functional programming, programs are treated as a sequence of stateless function evaluations. When programming computers or systems with many processors, in process-oriented programming, programs are treated as sets of concurrent processes that act on a logical shared data structures.","['object', 'orient', 'programming', 'program', 'treat', 'set', 'interact', 'object', 'functional', 'programming', 'program', 'treat', 'sequence', 'stateless', 'function', 'evaluation', 'programming', 'computer', 'system', 'processor', 'process', 'orient', 'programming', 'program', 'treat', 'set', 'concurrent', 'process', 'act', 'logical', 'share', 'data', 'structure']"
3481,"Many programming paradigms are as well known for the techniques they forbid as for those they enable. For instance, pure functional programming disallows use of side-effects, while structured programming disallows use of the goto statement. Partly for this reason, new paradigms are often regarded as doctrinaire or overly rigid by those accustomed to earlier styles.7 Yet, avoiding certain techniques can make it easier to understand program behavior, and to prove theorems about program correctness.","['programming', 'paradigm', 'know', 'technique', 'forbid', 'enable', 'instance', 'pure', 'functional', 'programming', 'disallow', 'use', 'effect', 'structured', 'programming', 'disallow', 'use', 'goto', 'statement', 'partly', 'reason', 'new', 'paradigm', 'regard', 'doctrinaire', 'overly', 'rigid', 'accustomed', 'early', 'styles', 'avoid', 'certain', 'technique', 'easy', 'understand', 'program', 'behavior', 'prove', 'theorem', 'program', 'correctness']"
3482,"Programming paradigms can also be compared with programming models, which allows invoking an execution model by using only an API. Programming models can also be classified into paradigms based on features of the execution model.","['programming', 'paradigm', 'compare', 'programming', 'model', 'allow', 'invoke', 'execution', 'model', 'api', 'programming', 'model', 'classify', 'paradigm', 'base', 'feature', 'execution', 'model']"
3483,"For parallel computing, using a programming model instead of a language is common. The reason is that details of the parallel hardware leak into the abstractions used to program the hardware. This causes the programmer to have to map patterns in the algorithm onto patterns in the execution model which have been inserted due to leakage of hardware into the abstraction. As a consequence, no one parallel programming language maps well to all computation problems. Thus, it is more convenient to use a base sequential language and insert API calls to parallel execution models via a programming model. Such parallel programming models can be classified according to abstractions that reflect the hardware, such as shared memory, distributed memory with message passing, notions of place visible in the code, and so forth. These can be considered flavors of programming paradigm that apply to only parallel languages and programming models.","['parallel', 'computing', 'programming', 'model', 'instead', 'language', 'common', 'reason', 'detail', 'parallel', 'hardware', 'leak', 'abstraction', 'program', 'hardware', 'cause', 'programmer', 'map', 'pattern', 'algorithm', 'pattern', 'execution', 'model', 'insert', 'leakage', 'hardware', 'abstraction', 'consequence', 'parallel', 'programming', 'language', 'map', 'computation', 'problem', 'convenient', 'use', 'base', 'sequential', 'language', 'insert', 'api', 'call', 'parallel', 'execution', 'model', 'programming', 'model', 'parallel', 'programming', 'model', 'classify', 'accord', 'abstraction', 'reflect', 'hardware', 'share', 'memory', 'distribute', 'memory', 'message', 'passing', 'notion', 'place', 'visible', 'code', 'forth', 'consider', 'flavor', 'programming', 'paradigm', 'apply', 'parallel', 'language', 'programming', 'model']"
3484,"Some programming language researchers criticise the notion of paradigms as a classification of programming languages, e.g. Harper,8 and Krishnamurthi.9 They argue that many programming languages cannot be strictly classified into one paradigm, but rather include features from several paradigms. See Comparison of multi-paradigm programming languages.","['programming', 'language', 'researcher', 'criticise', 'notion', 'paradigms', 'classification', 'programming', 'language', 'e.g.', 'harper', 'krishnamurthi', 'argue', 'programming', 'language', 'strictly', 'classify', 'paradigm', 'include', 'feature', 'paradigm', 'comparison', 'multi', 'paradigm', 'programming', 'language']"
3485,"Different approaches to programming have developed over time, being identified as such either at the time or retrospectively. An early approach consciously identified as such is structured programming, advocated since the mid 1960s. The concept of a ""programming paradigm"" as such dates at least to 1978, in the Turing Award lecture of Robert W. Floyd, entitled The Paradigms of Programming, which cites the notion of paradigm as used by Thomas Kuhn in his The Structure of Scientific Revolutions 1962.10","['different', 'approach', 'programming', 'develop', 'time', 'identify', 'time', 'retrospectively', 'early', 'approach', 'consciously', 'identify', 'structure', 'programming', 'advocate', 'mid', '1960', 'concept', 'programming', 'paradigm', 'date', '1978', 'turing', 'award', 'lecture', 'robert', 'floyd', 'entitle', 'paradigms', 'programming', 'cite', 'notion', 'paradigm', 'thomas', 'kuhn', 'structure', 'scientific', 'revolutions', '1962']"
3486,"The lowest-level programming paradigms are machine code, which directly represents the instructions the contents of program memory as a sequence of numbers, and assembly language where the machine instructions are represented by mnemonics and memory addresses can be given symbolic labels. These are sometimes called first- and second-generation languages.","['low', 'level', 'programming', 'paradigm', 'machine', 'code', 'directly', 'represent', 'instruction', 'content', 'program', 'memory', 'sequence', 'number', 'assembly', 'language', 'machine', 'instruction', 'represent', 'mnemonic', 'memory', 'address', 'give', 'symbolic', 'label', 'call', 'first-', 'second', 'generation', 'language']"
3487,"In the 1960s, assembly languages were developed to support library COPY and quite sophisticated conditional macro generation and preprocessing abilities, CALL to subroutines, external variables and common sections globals, enabling significant code re-use and isolation from hardware specifics via the use of logical operators such as READ/WRITE/GET/PUT. Assembly was, and still is, used for time-critical systems and often in embedded systems as it gives the most direct control of what the machine does.","['1960', 'assembly', 'language', 'develop', 'support', 'library', 'copy', 'sophisticated', 'conditional', 'macro', 'generation', 'preprocesse', 'ability', 'subroutine', 'external', 'variable', 'common', 'section', 'global', 'enable', 'significant', 'code', 'use', 'isolation', 'hardware', 'specific', 'use', 'logical', 'operator', 'read', 'write', 'assembly', 'time', 'critical', 'system', 'embed', 'system', 'give', 'direct', 'control', 'machine']"
3488,"The next advance was the development of procedural languages. These third-generation languages the first described as high-level languages use vocabulary related to the problem being solved. For example,","['advance', 'development', 'procedural', 'language', 'generation', 'language', 'describe', 'high', 'level', 'language', 'use', 'vocabulary', 'relate', 'problem', 'solve', 'example']"
3489,"All these languages follow the procedural paradigm. That is, they describe, step by step, exactly the procedure that should, according to the particular programmer at least, be followed to solve a specific problem. The efficacy and efficiency of any such solution are both therefore entirely subjective and highly dependent on that programmer's experience, inventiveness, and ability.","['language', 'follow', 'procedural', 'paradigm', 'describe', 'step', 'step', 'exactly', 'procedure', 'accord', 'particular', 'programmer', 'follow', 'solve', 'specific', 'problem', 'efficacy', 'efficiency', 'solution', 'entirely', 'subjective', 'highly', 'dependent', 'programmer', 'experience', 'inventiveness', 'ability']"
3490,"Following the widespread use of procedural languages, object-oriented programming OOP languages were created, such as Simula, Smalltalk, C++, Eiffel, Python, PHP, Java, and C#. In these languages, data and methods to manipulate it are kept as one unit called an object. With perfect encapsulation, one of the distinguishing features of OOP, the only way that another object or user would be able to access the data is via the object's methods. Thus, an object's inner workings may be changed without affecting any code that uses the object. There is still some controversy raised by Alexander Stepanov, Richard Stallman11 and other programmers, concerning the efficacy of the OOP paradigm versus the procedural paradigm. The need for every object to have associative methods leads some skeptics to associate OOP with software bloat; an attempt to resolve this dilemma came through polymorphism.","['follow', 'widespread', 'use', 'procedural', 'language', 'object', 'orient', 'programming', 'oop', 'language', 'create', 'simula', 'smalltalk', 'c++', 'eiffel', 'python', 'php', 'java', 'language', 'datum', 'method', 'manipulate', 'keep', 'unit', 'call', 'object', 'perfect', 'encapsulation', 'distinguish', 'feature', 'oop', 'way', 'object', 'user', 'able', 'access', 'datum', 'object', 'method', 'object', 'inner', 'working', 'change', 'affect', 'code', 'use', 'object', 'controversy', 'raise', 'alexander', 'stepanov', 'richard', 'stallman11', 'programmer', 'concern', 'efficacy', 'oop', 'paradigm', 'versus', 'procedural', 'paradigm', 'need', 'object', 'associative', 'method', 'lead', 'skeptic', 'associate', 'oop', 'software', 'bloat', 'attempt', 'resolve', 'dilemma', 'come', 'polymorphism']"
3491,"Because object-oriented programming is considered a paradigm, not a language, it is possible to create even an object-oriented assembler language. High Level Assembly HLA is an example of this that fully supports advanced data types and object-oriented assembly language programming – despite its early origins. Thus, differing programming paradigms can be seen rather like motivational memes of their advocates, rather than necessarily representing progress from one level to the nextcitation needed. Precise comparisons of competing paradigms' efficacy are frequently made more difficult because of new and differing terminology applied to similar entities and processes together with numerous implementation distinctions across languages.","['object', 'orient', 'programming', 'consider', 'paradigm', 'language', 'possible', 'create', 'object', 'orient', 'assembler', 'language', 'high', 'level', 'assembly', 'hla', 'example', 'fully', 'support', 'advanced', 'datum', 'type', 'object', 'orient', 'assembly', 'language', 'programming', 'despite', 'early', 'origin', 'differ', 'programming', 'paradigm', 'see', 'like', 'motivational', 'meme', 'advocate', 'necessarily', 'represent', 'progress', 'level', 'nextcitation', 'need', 'precise', 'comparison', 'compete', 'paradigm', 'efficacy', 'frequently', 'difficult', 'new', 'differing', 'terminology', 'apply', 'similar', 'entity', 'process', 'numerous', 'implementation', 'distinction', 'language']"
3492,"Literate programming, as a form of imperative programming, structures programs as a human-centered web, as in a hypertext essay: documentation is integral to the program, and the program is structured following the logic of prose exposition, rather than compiler convenience.","['literate', 'programming', 'form', 'imperative', 'programming', 'structure', 'program', 'human', 'center', 'web', 'hypertext', 'essay', 'documentation', 'integral', 'program', 'program', 'structure', 'follow', 'logic', 'prose', 'exposition', 'compiler', 'convenience']"
3493,"Independent of the imperative branch, declarative programming paradigms were developed. In these languages, the computer is told what the problem is, not how to solve the problem – the program is structured as a set of properties to find in the expected result, not as a procedure to follow. Given a database or a set of rules, the computer tries to find a solution matching all the desired properties. An archetype of a declarative language is the fourth generation language SQL, and the family of functional languages and logic programming.","['independent', 'imperative', 'branch', 'declarative', 'programming', 'paradigm', 'develop', 'language', 'computer', 'tell', 'problem', 'solve', 'problem', 'program', 'structure', 'set', 'property', 'find', 'expected', 'result', 'procedure', 'follow', 'give', 'database', 'set', 'rule', 'computer', 'try', 'find', 'solution', 'match', 'desire', 'property', 'archetype', 'declarative', 'language', 'fourth', 'generation', 'language', 'sql', 'family', 'functional', 'language', 'logic', 'programming']"
3494,"Functional programming is a subset of declarative programming. Programs written using this paradigm use functions, blocks of code intended to behave like mathematical functions. Functional languages discourage changes in the value of variables through assignment, making a great deal of use of recursion instead.","['functional', 'programming', 'subset', 'declarative', 'programming', 'programs', 'write', 'paradigm', 'use', 'function', 'block', 'code', 'intend', 'behave', 'like', 'mathematical', 'function', 'functional', 'language', 'discourage', 'change', 'value', 'variable', 'assignment', 'make', 'great', 'deal', 'use', 'recursion', 'instead']"
3495,"The logic programming paradigm views computation as automated reasoning over a body of knowledge. Facts about the problem domain are expressed as logic formulas, and programs are executed by applying inference rules over them until an answer to the problem is found, or the set of formulas is proved inconsistent.","['logic', 'programming', 'paradigm', 'view', 'computation', 'automate', 'reasoning', 'body', 'knowledge', 'fact', 'problem', 'domain', 'express', 'logic', 'formula', 'program', 'execute', 'apply', 'inference', 'rule', 'answer', 'problem', 'find', 'set', 'formula', 'prove', 'inconsistent']"
3496,"Symbolic programming is a paradigm that describes programs able to manipulate formulas and program components as data.3 Programs can thus effectively modify themselves, and appear to ""learn"", making them suited for applications such as artificial intelligence, expert systems, natural-language processing and computer games. Languages that support this paradigm include Lisp and Prolog.12","['symbolic', 'programming', 'paradigm', 'describe', 'program', 'able', 'manipulate', 'formula', 'program', 'component', 'data', 'programs', 'effectively', 'modify', 'appear', 'learn', 'make', 'suited', 'application', 'artificial', 'intelligence', 'expert', 'system', 'natural', 'language', 'processing', 'computer', 'game', 'language', 'support', 'paradigm', 'include', 'lisp', 'prolog']"
3497,"Differentiable programming structures programs so that they can be differentiated throughout, usually via automatic differentiation.1314","['differentiable', 'programming', 'structure', 'program', 'differentiate', 'usually', 'automatic', 'differentiation']"
3498,Most programming languages support more than one programming paradigm to allow programmers to use the most suitable programming style and associated language constructs for a given job.15,"['programming', 'language', 'support', 'programming', 'paradigm', 'allow', 'programmer', 'use', 'suitable', 'programming', 'style', 'associate', 'language', 'construct', 'give', 'job']"
3499,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3500,"In software systems, encapsulation refers to the bundling of data with the mechanisms or methods that operate on the data, or the limiting of direct access to some data, such as an object's components.1 Encapsulation allows developers to present a consistent and usable interface which is independent of how a system is implemented internally. As one example, encapsulation can be used to hide the values or state of a structured data object inside a class, preventing direct access to them by clients in a way that could expose hidden implementation details or violate state invariance maintained by the methods.","['software', 'system', 'encapsulation', 'refer', 'bundling', 'datum', 'mechanism', 'method', 'operate', 'datum', 'limiting', 'direct', 'access', 'datum', 'object', 'components', 'encapsulation', 'allow', 'developer', 'present', 'consistent', 'usable', 'interface', 'independent', 'system', 'implement', 'internally', 'example', 'encapsulation', 'hide', 'value', 'state', 'structured', 'datum', 'object', 'inside', 'class', 'prevent', 'direct', 'access', 'client', 'way', 'expose', 'hidden', 'implementation', 'detail', 'violate', 'state', 'invariance', 'maintain', 'method']"
3501,"All object-oriented programming OOP systems support encapsulation, but encapsulation is not unique to OOP. Implementations of abstract data types, modules, and libraries, among other systems, also offer encapsulation. The similarity has been explained by programming language theorists in terms of existential types.2","['object', 'orient', 'programming', 'oop', 'system', 'support', 'encapsulation', 'encapsulation', 'unique', 'oop', 'implementation', 'abstract', 'datum', 'type', 'module', 'library', 'system', 'offer', 'encapsulation', 'similarity', 'explain', 'programming', 'language', 'theorist', 'term', 'existential', 'types']"
3502,"In object-oriented programming languages, and other related fields, encapsulation refers to one of two related but distinct notions, and sometimes to the combination thereof:34","['object', 'orient', 'programming', 'language', 'related', 'field', 'encapsulation', 'refer', 'related', 'distinct', 'notion', 'combination', 'thereof']"
3503,"Some programming language researchers and academics use the first meaning alone or in combination with the second as a distinguishing feature of object-oriented programming, while some programming languages that provide lexical closures view encapsulation as a feature of the language orthogonal to object orientation.","['programming', 'language', 'researcher', 'academic', 'use', 'meaning', 'combination', 'second', 'distinguish', 'feature', 'object', 'orient', 'programming', 'programming', 'language', 'provide', 'lexical', 'closure', 'view', 'encapsulation', 'feature', 'language', 'orthogonal', 'object', 'orientation']"
3504,"The second definition is motivated by the fact that in many object-oriented languages, and other related fields, the components are not hidden automatically and this can be overridden; thus, information hiding is defined as a separate notion by those who prefer the second definition.","['second', 'definition', 'motivate', 'fact', 'object', 'orient', 'language', 'related', 'field', 'component', 'hide', 'automatically', 'overridden', 'information', 'hiding', 'define', 'separate', 'notion', 'prefer', 'second', 'definition']"
3505,"The features of encapsulation are supported using classes in most object-oriented languages, although other alternatives also exist.","['feature', 'encapsulation', 'support', 'class', 'object', 'orient', 'language', 'alternative', 'exist']"
3506,"The authors of Design Patterns discuss the tension between inheritance and encapsulation at length and state that in their experience, designers overuse inheritance. They claim that inheritance often breaks encapsulation, given that inheritance exposes a subclass to the details of its parent's implementation.8 As described by the yo-yo problem, overuse of inheritance and therefore encapsulation, can become too complicated and hard to debug.","['author', 'design', 'patterns', 'discuss', 'tension', 'inheritance', 'encapsulation', 'length', 'state', 'experience', 'designer', 'overuse', 'inheritance', 'claim', 'inheritance', 'break', 'encapsulation', 'give', 'inheritance', 'expose', 'subclass', 'detail', 'parent', 'implementation', 'describe', 'problem', 'overuse', 'inheritance', 'encapsulation', 'complicated', 'hard', 'debug']"
3507,"Under the definition that encapsulation ""can be used to hide data members and member functions"", the internal representation of an object is generally hidden from view outside of the object's definition. Typically, only the object's own methods can directly inspect or manipulate its fields. Hiding the internals of the object protects its integrity by preventing users from setting the internal data of the component into an invalid or inconsistent state. A supposed benefit of encapsulation is that it can reduce system complexity, and thus increase robustness, by allowing the developer to limit the interdependencies between software components.citation needed","['definition', 'encapsulation', 'hide', 'data', 'member', 'member', 'function', 'internal', 'representation', 'object', 'generally', 'hide', 'view', 'outside', 'object', 'definition', 'typically', 'object', 'method', 'directly', 'inspect', 'manipulate', 'field', 'hide', 'internal', 'object', 'protect', 'integrity', 'prevent', 'user', 'set', 'internal', 'datum', 'component', 'invalid', 'inconsistent', 'state', 'supposed', 'benefit', 'encapsulation', 'reduce', 'system', 'complexity', 'increase', 'robustness', 'allow', 'developer', 'limit', 'interdependency', 'software', 'components.citation', 'need']"
3508,"Some languages like Smalltalk and Ruby only allow access via object methods, but most others e.g., C++, C#, Delphi or Java offer the programmer a degree of control over what is hidden, typically via keywords like public and private.6 ISO C++ standard refers to protected, private and public as ""access specifiers"" and that they do not ""hide any information"". Information hiding is accomplished by furnishing a compiled version of the source code that is interfaced via a header file.","['language', 'like', 'smalltalk', 'ruby', 'allow', 'access', 'object', 'method', 'e.g.', 'c++', 'delphi', 'java', 'offer', 'programmer', 'degree', 'control', 'hide', 'typically', 'keyword', 'like', 'public', 'private', 'iso', 'c++', 'standard', 'refer', 'protect', 'private', 'public', 'access', 'specifier', 'hide', 'information', 'information', 'hiding', 'accomplish', 'furnish', 'compile', 'version', 'source', 'code', 'interface', 'header', 'file']"
3509,"Almost always, there is a way to override such protection – usually via reflection API Ruby, Java, C#, etc., sometimes by mechanism like name mangling Python, or special keyword usage like friend in C++. Systems that provide object-level capability-based security adhering to the object-capability model are an exception, and guarantee strong encapsulation.","['way', 'override', 'protection', 'usually', 'reflection', 'api', 'ruby', 'java', 'etc', 'mechanism', 'like', 'mangle', 'python', 'special', 'keyword', 'usage', 'like', 'friend', 'c++', 'systems', 'provide', 'object', 'level', 'capability', 'base', 'security', 'adhere', 'object', 'capability', 'model', 'exception', 'guarantee', 'strong', 'encapsulation']"
3510,"Languages like C++, C#, Java, PHP, Swift, and Delphi offer ways to restrict access to data fields.","['language', 'like', 'c++', 'java', 'php', 'swift', 'delphi', 'offer', 'way', 'restrict', 'access', 'data', 'field']"
3511,Below is an example in C# that shows how access to a data field can be restricted through the use of a private keyword:,"['example', 'show', 'access', 'datum', 'field', 'restrict', 'use', 'private', 'keyword']"
3512,Below is an example in Java:,"['example', 'java']"
3513,"Encapsulation is also possible in non-object-oriented languages. In C, for example, a structure can be declared in the public API via the header file for a set of functions that operate on an item of data containing data members that are not accessible to clients of the API with the extern keyword.910","['encapsulation', 'possible', 'non', 'object', 'orient', 'language', 'example', 'structure', 'declare', 'public', 'api', 'header', 'file', 'set', 'function', 'operate', 'item', 'datum', 'contain', 'datum', 'member', 'accessible', 'client', 'api', 'extern', 'keyword']"
3514,"Clients call the API functions to allocate, operate on, and deallocate objects of an opaque data type. The contents of this type are known and accessible only to the implementation of the API functions; clients cannot directly access its contents. The source code for these functions defines the actual contents of the structure:","['client', 'api', 'function', 'allocate', 'operate', 'deallocate', 'object', 'opaque', 'datum', 'type', 'content', 'type', 'know', 'accessible', 'implementation', 'api', 'function', 'client', 'directly', 'access', 'content', 'source', 'code', 'function', 'define', 'actual', 'content', 'structure']"
3515,"Below is an example of Python, which does not support variable access restrictions. However, the convention is that a variable whose name is prefixed by an underscore should be considered private.11","['example', 'python', 'support', 'variable', 'access', 'restriction', 'convention', 'variable', 'prefix', 'underscore', 'consider', 'private']"
3516,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3517,"Object-oriented programming OOP is a programming paradigm based on the concept of ""objects"", which can contain data and code. The data is in the form of fields often known as attributes or properties, and the code is in the form of procedures often known as methods.","['object', 'orient', 'programming', 'oop', 'programming', 'paradigm', 'base', 'concept', 'object', 'contain', 'datum', 'code', 'data', 'form', 'field', 'know', 'attribute', 'property', 'code', 'form', 'procedure', 'know', 'method']"
3518,"A common feature of objects is that procedures or methods are attached to them and can access and modify the object's data fields. In this brand of OOP, there is usually a special name such as this or self used to refer to the current object. In OOP, computer programs are designed by making them out of objects that interact with one another.12 OOP languages are diverse, but the most popular ones are class-based, meaning that objects are instances of classes, which also determine their types.","['common', 'feature', 'object', 'procedure', 'method', 'attach', 'access', 'modify', 'object', 'datum', 'field', 'brand', 'oop', 'usually', 'special', 'self', 'refer', 'current', 'object', 'oop', 'computer', 'program', 'design', 'make', 'object', 'interact', 'another', 'oop', 'language', 'diverse', 'popular', 'one', 'class', 'base', 'mean', 'object', 'instance', 'class', 'determine', 'type']"
3519,"Many of the most widely used programming languages such as C++, Java, Python, etc. are multi-paradigm and they support object-oriented programming to a greater or lesser degree, typically in combination with imperative, procedural programming.","['widely', 'programming', 'language', 'c++', 'java', 'python', 'etc', 'multi', 'paradigm', 'support', 'object', 'orient', 'programming', 'great', 'less', 'degree', 'typically', 'combination', 'imperative', 'procedural', 'programming']"
3520,"Significant object-oriented languages include: Ada, ActionScript, C++, Common Lisp, C#, Dart, Eiffel, Fortran 2003, Haxe, Java, JavaScript, Kotlin, logo, MATLAB, Objective-C, Object Pascal, Perl, PHP, Python, R, Raku, Ruby, Scala, SIMSCRIPT, Simula, Smalltalk, Swift, Vala and Visual Basic.NET.","['significant', 'object', 'orient', 'language', 'include', 'ada', 'actionscript', 'c++', 'common', 'lisp', 'dart', 'eiffel', 'fortran', '2003', 'haxe', 'java', 'javascript', 'kotlin', 'logo', 'matlab', 'objective', 'object', 'pascal', 'perl', 'php', 'python', 'raku', 'ruby', 'scala', 'simscript', 'simula', 'smalltalk', 'swift', 'vala', 'visual', 'basic', 'net']"
3521,"Terminology invoking ""objects"" and ""oriented"" in the modern sense of object-oriented programming made its first appearance at MIT in the late 1950s and early 1960s. In the environment of the artificial intelligence group, as early as 1960, ""object"" could refer to identified items LISP atoms with properties attributes;34 Alan Kay later cited a detailed understanding of LISP internals as a strong influence on his thinking in 1966.5","['terminology', 'invoke', 'object', 'orient', 'modern', 'sense', 'object', 'orient', 'programming', 'appearance', 'mit', 'late', '1950', 'early', '1960', 'environment', 'artificial', 'intelligence', 'group', 'early', '1960', 'object', 'refer', 'identify', 'item', 'lisp', 'atom', 'property', 'attributes', 'alan', 'kay', 'later', 'cite', 'detailed', 'understanding', 'lisp', 'internal', 'strong', 'influence', 'thinking', '1966']"
3522,"I thought of objects being like biological cells and/or individual computers on a network, only able to communicate with messages so messaging came at the very beginning – it took a while to see how to do messaging in a programming language efficiently enough to be useful.","['think', 'object', 'like', 'biological', 'cell', 'individual', 'computer', 'network', 'able', 'communicate', 'message', 'messaging', 'come', 'beginning', 'take', 'message', 'programming', 'language', 'efficiently', 'useful']"
3523,"Another early MIT example was Sketchpad created by Ivan Sutherland in 1960–1961; in the glossary of the 1963 technical report based on his dissertation about Sketchpad, Sutherland defined notions of ""object"" and ""instance"" with the class concept covered by ""master"" or ""definition"", albeit specialized to graphical interaction.6 Also, an MIT ALGOL version, AED-0, established a direct link between data structures ""plexes"", in that dialect and procedures, prefiguring what were later termed ""messages"", ""methods"", and ""member functions"".78","['early', 'mit', 'example', 'sketchpad', 'create', 'ivan', 'sutherland', '1960–1961', 'glossary', '1963', 'technical', 'report', 'base', 'dissertation', 'sketchpad', 'sutherland', 'define', 'notion', 'object', 'instance', 'class', 'concept', 'cover', 'master', 'definition', 'albeit', 'specialize', 'graphical', 'interaction', 'mit', 'algol', 'version', 'aed-0', 'establish', 'direct', 'link', 'data', 'structure', 'plexe', 'dialect', 'procedure', 'prefigure', 'later', 'term', 'message', 'method', 'member', 'functions']"
3524,"Simula introduced important concepts that are today an essential part of object-oriented programming, such as class and object, inheritance, and dynamic binding.9 The object-oriented Simula programming language was used mainly by researchers involved with physical modelling, such as models to study and improve the movement of ships and their content through cargo ports.9","['simula', 'introduce', 'important', 'concept', 'today', 'essential', 'object', 'orient', 'programming', 'class', 'object', 'inheritance', 'dynamic', 'binding', 'object', 'orient', 'simula', 'programming', 'language', 'mainly', 'researcher', 'involve', 'physical', 'modelling', 'model', 'study', 'improve', 'movement', 'ship', 'content', 'cargo', 'ports']"
3525,"In the 1970s, the first version of the Smalltalk programming language was developed at Xerox PARC by Alan Kay, Dan Ingalls and Adele Goldberg. Smalltalk-72 included a programming environment and was dynamically typed, and at first was interpreted, not compiled. Smalltalk became noted for its application of object orientation at the language-level and its graphical development environment. Smalltalk went through various versions and interest in the language grew.10 While Smalltalk was influenced by the ideas introduced in Simula 67 it was designed to be a fully dynamic system in which classes could be created and modified dynamically.11","['1970', 'version', 'smalltalk', 'programming', 'language', 'develop', 'xerox', 'parc', 'alan', 'kay', 'dan', 'ingalls', 'adele', 'goldberg', 'smalltalk-72', 'include', 'programming', 'environment', 'dynamically', 'type', 'interpret', 'compile', 'smalltalk', 'note', 'application', 'object', 'orientation', 'language', 'level', 'graphical', 'development', 'environment', 'smalltalk', 'go', 'version', 'interest', 'language', 'grew', 'smalltalk', 'influence', 'idea', 'introduce', 'simula', 'design', 'fully', 'dynamic', 'system', 'class', 'create', 'modify', 'dynamically']"
3526,"In the 1970s, Smalltalk influenced the Lisp community to incorporate object-based techniques that were introduced to developers via the Lisp machine. Experimentation with various extensions to Lisp such as LOOPS and Flavors introducing multiple inheritance and mixins eventually led to the Common Lisp Object System, which integrates functional programming and object-oriented programming and allows extension via a Meta-object protocol. In the 1980s, there were a few attempts to design processor architectures that included hardware support for objects in memory but these were not successful. Examples include the Intel iAPX 432 and the Linn Smart Rekursiv.","['1970', 'smalltalk', 'influence', 'lisp', 'community', 'incorporate', 'object', 'base', 'technique', 'introduce', 'developer', 'lisp', 'machine', 'experimentation', 'extension', 'lisp', 'loops', 'flavors', 'introduce', 'multiple', 'inheritance', 'mixin', 'eventually', 'lead', 'common', 'lisp', 'object', 'system', 'integrate', 'functional', 'programming', 'object', 'orient', 'programming', 'allow', 'extension', 'meta', 'object', 'protocol', '1980', 'attempt', 'design', 'processor', 'architecture', 'include', 'hardware', 'support', 'object', 'memory', 'successful', 'example', 'include', 'intel', 'iapx', '432', 'linn', 'smart', 'rekursiv']"
3527,"In 1981, Goldberg edited the August issue of Byte Magazine, introducing Smalltalk and object-oriented programming to a wider audience. In 1986, the Association for Computing Machinery organised the first Conference on Object-Oriented Programming, Systems, Languages, and Applications OOPSLA, which was unexpectedly attended by 1,000 people. In the mid-1980s Objective-C was developed by Brad Cox, who had used Smalltalk at ITT Inc., and Bjarne Stroustrup, who had used Simula for his PhD thesis, eventually went to create the object-oriented C++.10 In 1985, Bertrand Meyer also produced the first design of the Eiffel language. Focused on software quality, Eiffel is a purely object-oriented programming language and a notation supporting the entire software lifecycle. Meyer described the Eiffel software development method, based on a small number of key ideas from software engineering and computer science, in Object-Oriented Software Construction. Essential to the quality focus of Eiffel is Meyer's reliability mechanism, Design by Contract, which is an integral part of both the method and language.","['1981', 'goldberg', 'edit', 'august', 'issue', 'byte', 'magazine', 'introduce', 'smalltalk', 'object', 'orient', 'programming', 'wide', 'audience', '1986', 'association', 'computing', 'machinery', 'organise', 'conference', 'object', 'orient', 'programming', 'systems', 'languages', 'applications', 'oopsla', 'unexpectedly', 'attend', '1', 'people', 'mid-1980', 'objective', 'develop', 'brad', 'cox', 'smalltalk', 'itt', 'inc.', 'bjarne', 'stroustrup', 'simula', 'phd', 'thesis', 'eventually', 'go', 'create', 'object', 'orient', 'c++', '1985', 'bertrand', 'meyer', 'produce', 'design', 'eiffel', 'language', 'focus', 'software', 'quality', 'eiffel', 'purely', 'object', 'orient', 'programming', 'language', 'notation', 'support', 'entire', 'software', 'lifecycle', 'meyer', 'describe', 'eiffel', 'software', 'development', 'method', 'base', 'small', 'number', 'key', 'idea', 'software', 'engineering', 'computer', 'science', 'object', 'orient', 'software', 'construction', 'essential', 'quality', 'focus', 'eiffel', 'meyer', 'reliability', 'mechanism', 'design', 'contract', 'integral', 'method', 'language']"
3528,"In the early and mid-1990s object-oriented programming developed as the dominant programming paradigm when programming languages supporting the techniques became widely available. These included Visual FoxPro 3.0,121314 C++,15 and Delphicitation needed. Its dominance was further enhanced by the rising popularity of graphical user interfaces, which rely heavily upon object-oriented programming techniques. An example of a closely related dynamic GUI library and OOP language can be found in the Cocoa frameworks on Mac OS X, written in Objective-C, an object-oriented, dynamic messaging extension to C based on Smalltalk. OOP toolkits also enhanced the popularity of event-driven programming although this concept is not limited to OOP.","['early', 'mid-1990', 'object', 'orient', 'programming', 'develop', 'dominant', 'programming', 'paradigm', 'programming', 'language', 'support', 'technique', 'widely', 'available', 'include', 'visual', 'foxpro', '3', 'c++', 'delphicitation', 'need', 'dominance', 'enhance', 'rise', 'popularity', 'graphical', 'user', 'interface', 'rely', 'heavily', 'object', 'orient', 'programming', 'technique', 'example', 'closely', 'relate', 'dynamic', 'gui', 'library', 'oop', 'language', 'find', 'cocoa', 'framework', 'mac', 'write', 'objective', 'object', 'orient', 'dynamic', 'messaging', 'extension', 'base', 'smalltalk', 'oop', 'toolkit', 'enhance', 'popularity', 'event', 'drive', 'programming', 'concept', 'limit', 'oop']"
3529,"At ETH Zürich, Niklaus Wirth and his colleagues had also been investigating such topics as data abstraction and modular programming although this had been in common use in the 1960s or earlier. Modula-2 1978 included both, and their succeeding design, Oberon, included a distinctive approach to object orientation, classes, and such.","['eth', 'zürich', 'niklaus', 'wirth', 'colleague', 'investigate', 'topic', 'data', 'abstraction', 'modular', 'programming', 'common', 'use', '1960', 'early', 'modula-2', '1978', 'include', 'succeed', 'design', 'oberon', 'include', 'distinctive', 'approach', 'object', 'orientation', 'class']"
3530,"Object-oriented features have been added to many previously existing languages, including Ada, BASIC, Fortran, Pascal, and COBOL. Adding these features to languages that were not initially designed for them often led to problems with compatibility and maintainability of code.","['object', 'orient', 'feature', 'add', 'previously', 'exist', 'language', 'include', 'ada', 'basic', 'fortran', 'pascal', 'cobol', 'add', 'feature', 'language', 'initially', 'design', 'lead', 'problem', 'compatibility', 'maintainability', 'code']"
3531,"More recently, a number of languages have emerged that are primarily object-oriented, but that are also compatible with procedural methodology. Two such languages are Python and Ruby. Probably the most commercially important recent object-oriented languages are Java, developed by Sun Microsystems, as well as C# and Visual Basic.NET VB.NET, both designed for Microsoft's .NET platform. Each of these two frameworks shows, in its own way, the benefit of using OOP by creating an abstraction from implementation. VB.NET and C# support cross-language inheritance, allowing classes defined in one language to subclass classes defined in the other language.","['recently', 'number', 'language', 'emerge', 'primarily', 'object', 'orient', 'compatible', 'procedural', 'methodology', 'language', 'python', 'ruby', 'probably', 'commercially', 'important', 'recent', 'object', 'orient', 'language', 'java', 'develop', 'sun', 'microsystems', 'visual', 'basic', 'net', 'vb.net', 'design', 'microsoft', '.net', 'platform', 'framework', 'show', 'way', 'benefit', 'oop', 'create', 'abstraction', 'implementation', 'vb.net', 'support', 'cross', 'language', 'inheritance', 'allow', 'class', 'define', 'language', 'subclass', 'class', 'define', 'language']"
3532,"Object-oriented programming uses objects, but not all of the associated techniques and structures are supported directly in languages that claim to support OOP. It performs operations on operands. The features listed below are common among languages considered to be strongly class- and object-oriented or multi-paradigm with OOP support, with notable exceptions mentioned.16171819","['object', 'orient', 'programming', 'use', 'object', 'associate', 'technique', 'structure', 'support', 'directly', 'language', 'claim', 'support', 'oop', 'perform', 'operation', 'operand', 'feature', 'list', 'common', 'language', 'consider', 'strongly', 'class-', 'object', 'orient', 'multi', 'paradigm', 'oop', 'support', 'notable', 'exception', 'mentioned']"
3533,Modular programming support provides the ability to group procedures into files and modules for organizational purposes. Modules are namespaced so identifiers in one module will not conflict with a procedure or variable sharing the same name in another file or module.,"['modular', 'programming', 'support', 'provide', 'ability', 'group', 'procedure', 'file', 'module', 'organizational', 'purpose', 'module', 'namespace', 'identifier', 'module', 'conflict', 'procedure', 'variable', 'sharing', 'file', 'module']"
3534,Languages that support object-oriented programming OOP typically use inheritance for code reuse and extensibility in the form of either classes or prototypes. Those that use classes support two main concepts:,"['language', 'support', 'object', 'orient', 'programming', 'oop', 'typically', 'use', 'inheritance', 'code', 'reuse', 'extensibility', 'form', 'class', 'prototype', 'use', 'class', 'support', 'main', 'concept']"
3535,"Objects sometimes correspond to things found in the real world. For example, a graphics program may have objects such as ""circle"", ""square"", ""menu"". An online shopping system might have objects such as ""shopping cart"", ""customer"", and ""product"".20 Sometimes objects represent more abstract entities, like an object that represents an open file, or an object that provides the service of translating measurements from U.S. customary to metric.","['object', 'correspond', 'thing', 'find', 'real', 'world', 'example', 'graphic', 'program', 'object', 'circle', 'square', 'menu', 'online', 'shopping', 'system', 'object', 'shop', 'cart', 'customer', 'product', 'object', 'represent', 'abstract', 'entity', 'like', 'object', 'represent', 'open', 'file', 'object', 'provide', 'service', 'translate', 'measurement', 'u.s.', 'customary', 'metric']"
3536,"Each object is said to be an instance of a particular class for example, an object with its name field set to ""Mary"" might be an instance of class Employee. Procedures in object-oriented programming are known as methods; variables are also known as fields, members, attributes, or properties. This leads to the following terms:","['object', 'say', 'instance', 'particular', 'class', 'example', 'object', 'field', 'set', 'mary', 'instance', 'class', 'employee', 'procedure', 'object', 'orient', 'programming', 'know', 'method', 'variable', 'know', 'field', 'member', 'attribute', 'property', 'lead', 'follow', 'term']"
3537,"Objects are accessed somewhat like variables with complex internal structure, and in many languages are effectively pointers, serving as actual references to a single instance of said object in memory within a heap or stack. They provide a layer of abstraction which can be used to separate internal from external code. External code can use an object by calling a specific instance method with a certain set of input parameters, read an instance variable, or write to an instance variable. Objects are created by calling a special type of method in the class known as a constructor. A program may create many instances of the same class as it runs, which operate independently. This is an easy way for the same procedures to be used on different sets of data.","['object', 'access', 'somewhat', 'like', 'variable', 'complex', 'internal', 'structure', 'language', 'effectively', 'pointer', 'serve', 'actual', 'reference', 'single', 'instance', 'say', 'object', 'memory', 'heap', 'stack', 'provide', 'layer', 'abstraction', 'separate', 'internal', 'external', 'code', 'external', 'code', 'use', 'object', 'call', 'specific', 'instance', 'method', 'certain', 'set', 'input', 'parameter', 'read', 'instance', 'variable', 'write', 'instance', 'variable', 'object', 'create', 'call', 'special', 'type', 'method', 'class', 'know', 'constructor', 'program', 'create', 'instance', 'class', 'run', 'operate', 'independently', 'easy', 'way', 'procedure', 'different', 'set', 'datum']"
3538,"Object-oriented programming that uses classes is sometimes called class-based programming, while prototype-based programming does not typically use classes. As a result, significantly different yet analogous terminology is used to define the concepts of object and instance.","['object', 'orient', 'programming', 'use', 'class', 'call', 'class', 'base', 'programming', 'prototype', 'base', 'programming', 'typically', 'use', 'class', 'result', 'significantly', 'different', 'analogous', 'terminology', 'define', 'concept', 'object', 'instance']"
3539,In some languages classes and objects can be composed using other concepts like traits and mixins.,"['language', 'class', 'object', 'compose', 'concept', 'like', 'trait', 'mixin']"
3540,"In class-based languages the classes are defined beforehand and the objects are instantiated based on the classes. If two objects apple and orange are instantiated from the class Fruit, they are inherently fruits and it is guaranteed that you may handle them in the same way; e.g. a programmer can expect the existence of the same attributes such as color or sugar_content or is_ripe.","['class', 'base', 'language', 'class', 'define', 'object', 'instantiate', 'base', 'class', 'object', 'apple', 'orange', 'instantiate', 'class', 'fruit', 'inherently', 'fruit', 'guarantee', 'handle', 'way', 'e.g.', 'programmer', 'expect', 'existence', 'attribute', 'color', 'sugar_content', 'is_ripe']"
3541,"In prototype-based languages the objects are the primary entities. No classes even exist. The prototype of an object is just another object to which the object is linked. Every object has one prototype link and only one. New objects can be created based on already existing objects chosen as their prototype. You may call two different objects apple and orange a fruit, if the object fruit exists, and both apple and orange have fruit as their prototype. The idea of the fruit class doesn't exist explicitly, but as the equivalence class of the objects sharing the same prototype. The attributes and methods of the prototype are delegated to all the objects of the equivalence class defined by this prototype. The attributes and methods owned individually by the object may not be shared by other objects of the same equivalence class; e.g. the attribute sugar_content may be unexpectedly not present in apple. Only single inheritance can be implemented through the prototype.","['prototype', 'base', 'language', 'object', 'primary', 'entity', 'class', 'exist', 'prototype', 'object', 'object', 'object', 'link', 'object', 'prototype', 'link', 'new', 'object', 'create', 'base', 'exist', 'object', 'choose', 'prototype', 'different', 'object', 'apple', 'orange', 'fruit', 'object', 'fruit', 'exist', 'apple', 'orange', 'fruit', 'prototype', 'idea', 'fruit', 'class', 'exist', 'explicitly', 'equivalence', 'class', 'object', 'share', 'prototype', 'attribute', 'method', 'prototype', 'delegate', 'object', 'equivalence', 'class', 'define', 'prototype', 'attribute', 'method', 'own', 'individually', 'object', 'share', 'object', 'equivalence', 'class', 'e.g.', 'attribute', 'sugar_content', 'unexpectedly', 'present', 'apple', 'single', 'inheritance', 'implement', 'prototype']"
3542,"It is the responsibility of the object, not any external code, to select the procedural code to execute in response to a method call, typically by looking up the method at run time in a table associated with the object. This feature is known as dynamic dispatch. If the call variability relies on more than the single type of the object on which it is called i.e. at least one other parameter object is involved in the method choice, one speaks of multiple dispatch.","['responsibility', 'object', 'external', 'code', 'select', 'procedural', 'code', 'execute', 'response', 'method', 'typically', 'look', 'method', 'run', 'time', 'table', 'associate', 'object', 'feature', 'know', 'dynamic', 'dispatch', 'variability', 'rely', 'single', 'type', 'object', 'call', 'i.e.', 'parameter', 'object', 'involve', 'method', 'choice', 'speak', 'multiple', 'dispatch']"
3543,A method call is also known as message passing. It is conceptualized as a message the name of the method and its input parameters being passed to the object for dispatch.,"['method', 'know', 'message', 'pass', 'conceptualize', 'message', 'method', 'input', 'parameter', 'pass', 'object', 'dispatch']"
3544,"Data Abstraction is a design pattern in which data are visible only to semantically related functions, so as to prevent misuse. The success of data abstraction leads to frequent incorporation of data hiding as a design principle in object oriented and pure functional programming.","['datum', 'abstraction', 'design', 'pattern', 'datum', 'visible', 'semantically', 'relate', 'function', 'prevent', 'misuse', 'success', 'data', 'abstraction', 'lead', 'frequent', 'incorporation', 'datum', 'hide', 'design', 'principle', 'object', 'orient', 'pure', 'functional', 'programming']"
3545,"If a class does not allow calling code to access internal object data and permits access through methods only, this is a form of information hiding known as abstraction. Some languages Java, for example let classes enforce access restrictions explicitly, for example denoting internal data with the private keyword and designating methods intended for use by code outside the class with the public keyword. Methods may also be designed public, private, or intermediate levels such as protected which allows access from the same class and its subclasses, but not objects of a different class. In other languages like Python this is enforced only by convention for example, private methods may have names that start with an underscore. In C#, Swift & Kotlin languages, internal keyword permits access only to files present in same assembly, package or module as that of the class.21","['class', 'allow', 'call', 'code', 'access', 'internal', 'object', 'datum', 'permit', 'access', 'method', 'form', 'information', 'hiding', 'know', 'abstraction', 'language', 'java', 'example', 'let', 'class', 'enforce', 'access', 'restriction', 'explicitly', 'example', 'denote', 'internal', 'datum', 'private', 'keyword', 'designate', 'method', 'intend', 'use', 'code', 'outside', 'class', 'public', 'keyword', 'method', 'design', 'public', 'private', 'intermediate', 'level', 'protect', 'allow', 'access', 'class', 'subclass', 'object', 'different', 'class', 'language', 'like', 'python', 'enforce', 'convention', 'example', 'private', 'method', 'name', 'start', 'underscore', 'swift', 'kotlin', 'language', 'internal', 'keyword', 'permit', 'access', 'file', 'present', 'assembly', 'package', 'module', 'class']"
3546,"Encapsulation prevents external code from being concerned with the internal workings of an object. This facilitates code refactoring, for example allowing the author of the class to change how objects of that class represent their data internally without changing any external code as long as ""public"" method calls work the same way. It also encourages programmers to put all the code that is concerned with a certain set of data in the same class, which organizes it for easy comprehension by other programmers. Encapsulation is a technique that encourages decoupling.","['encapsulation', 'prevent', 'external', 'code', 'concern', 'internal', 'working', 'object', 'facilitate', 'code', 'refactoring', 'example', 'allow', 'author', 'class', 'change', 'object', 'class', 'represent', 'datum', 'internally', 'change', 'external', 'code', 'long', 'public', 'method', 'call', 'work', 'way', 'encourage', 'programmer', 'code', 'concern', 'certain', 'set', 'datum', 'class', 'organize', 'easy', 'comprehension', 'programmer', 'encapsulation', 'technique', 'encourage', 'decouple']"
3547,"Objects can contain other objects in their instance variables; this is known as object composition. For example, an object in the Employee class might contain either directly or through a pointer an object in the Address class, in addition to its own instance variables like ""first_name"" and ""position"". Object composition is used to represent ""has-a"" relationships: every employee has an address, so every Employee object has access to a place to store an Address object either directly embedded within itself, or at a separate location addressed via a pointer.","['object', 'contain', 'object', 'instance', 'variable', 'know', 'object', 'composition', 'example', 'object', 'employee', 'class', 'contain', 'directly', 'pointer', 'object', 'address', 'class', 'addition', 'instance', 'variable', 'like', 'first_name', 'position', 'object', 'composition', 'represent', 'relationship', 'employee', 'address', 'employee', 'object', 'access', 'place', 'store', 'address', 'object', 'directly', 'embed', 'separate', 'location', 'address', 'pointer']"
3548,"Languages that support classes almost always support inheritance. This allows classes to be arranged in a hierarchy that represents ""is-a-type-of"" relationships. For example, class Employee might inherit from class Person. All the data and methods available to the parent class also appear in the child class with the same names. For example, class Person might define variables ""first_name"" and ""last_name"" with method ""make_full_name"". These will also be available in class Employee, which might add the variables ""position"" and ""salary"". This technique allows easy re-use of the same procedures and data definitions, in addition to potentially mirroring real-world relationships in an intuitive way. Rather than utilizing database tables and programming subroutines, the developer utilizes objects the user may be more familiar with: objects from their application domain.22","['language', 'support', 'class', 'support', 'inheritance', 'allow', 'class', 'arrange', 'hierarchy', 'represent', 'type', 'relationship', 'example', 'class', 'employee', 'inherit', 'class', 'person', 'datum', 'method', 'available', 'parent', 'class', 'appear', 'child', 'class', 'name', 'example', 'class', 'person', 'define', 'variable', 'first_name', 'last_name', 'method', 'make_full_name', 'available', 'class', 'employee', 'add', 'variable', 'position', 'salary', 'technique', 'allow', 'easy', 'use', 'procedure', 'data', 'definition', 'addition', 'potentially', 'mirror', 'real', 'world', 'relationship', 'intuitive', 'way', 'utilize', 'database', 'table', 'programming', 'subroutine', 'developer', 'utilize', 'object', 'user', 'familiar', 'object', 'application', 'domain']"
3549,"Subclasses can override the methods defined by superclasses. Multiple inheritance is allowed in some languages, though this can make resolving overrides complicated. Some languages have special support for mixins, though in any language with multiple inheritance, a mixin is simply a class that does not represent an is-a-type-of relationship. Mixins are typically used to add the same methods to multiple classes. For example, class UnicodeConversionMixin might provide a method unicode_to_ascii when included in class FileReader and class WebPageScraper, which don't share a common parent.","['subclass', 'override', 'method', 'define', 'superclass', 'multiple', 'inheritance', 'allow', 'language', 'resolve', 'override', 'complicated', 'language', 'special', 'support', 'mixin', 'language', 'multiple', 'inheritance', 'mixin', 'simply', 'class', 'represent', 'type', 'relationship', 'mixin', 'typically', 'add', 'method', 'multiple', 'class', 'example', 'class', 'unicodeconversionmixin', 'provide', 'method', 'unicode_to_ascii', 'include', 'class', 'filereader', 'class', 'webpagescraper', 'share', 'common', 'parent']"
3550,"Abstract classes cannot be instantiated into objects; they exist only for the purpose of inheritance into other ""concrete"" classes that can be instantiated. In Java, the final keyword can be used to prevent a class from being subclassed.","['abstract', 'class', 'instantiate', 'object', 'exist', 'purpose', 'inheritance', 'concrete', 'class', 'instantiate', 'java', 'final', 'keyword', 'prevent', 'class', 'subclasse']"
3551,"The doctrine of composition over inheritance advocates implementing has-a relationships using composition instead of inheritance. For example, instead of inheriting from class Person, class Employee could give each Employee object an internal Person object, which it then has the opportunity to hide from external code even if class Person has many public attributes or methods. Some languages, like Go do not support inheritance at all.","['doctrine', 'composition', 'inheritance', 'advocate', 'implement', 'relationship', 'composition', 'instead', 'inheritance', 'example', 'instead', 'inherit', 'class', 'person', 'class', 'employee', 'employee', 'object', 'internal', 'person', 'object', 'opportunity', 'hide', 'external', 'code', 'class', 'person', 'public', 'attribute', 'method', 'language', 'like', 'support', 'inheritance']"
3552,"The ""open/closed principle"" advocates that classes and functions ""should be open for extension, but closed for modification"".","['open', 'closed', 'principle', 'advocate', 'class', 'function', 'open', 'extension', 'close', 'modification']"
3553,Delegation is another language feature that can be used as an alternative to inheritance.,"['delegation', 'language', 'feature', 'alternative', 'inheritance']"
3554,"Subtyping – a form of polymorphism – is when calling code can be independent of which class in the supported hierarchy it is operating on – the parent class or one of its descendants. Meanwhile, the same operation name among objects in an inheritance hierarchy may behave differently.","['subtype', 'form', 'polymorphism', 'call', 'code', 'independent', 'class', 'support', 'hierarchy', 'operate', 'parent', 'class', 'descendant', 'operation', 'object', 'inheritance', 'hierarchy', 'behave', 'differently']"
3555,"For example, objects of type Circle and Square are derived from a common class called Shape. The Draw function for each type of Shape implements what is necessary to draw itself while calling code can remain indifferent to the particular type of Shape being drawn.","['example', 'object', 'type', 'circle', 'square', 'derive', 'common', 'class', 'call', 'shape', 'draw', 'function', 'type', 'shape', 'implement', 'necessary', 'draw', 'call', 'code', 'remain', 'indifferent', 'particular', 'type', 'shape', 'draw']"
3556,This is another type of abstraction that simplifies code external to the class hierarchy and enables strong separation of concerns.,"['type', 'abstraction', 'simplifie', 'code', 'external', 'class', 'hierarchy', 'enable', 'strong', 'separation', 'concern']"
3557,"In languages that support open recursion, object methods can call other methods on the same object including themselves, typically using a special variable or keyword called this or self. This variable is late-bound; it allows a method defined in one class to invoke another method that is defined later, in some subclass thereof.","['language', 'support', 'open', 'recursion', 'object', 'method', 'method', 'object', 'include', 'typically', 'special', 'variable', 'keyword', 'call', 'self', 'variable', 'late', 'bind', 'allow', 'method', 'define', 'class', 'invoke', 'method', 'define', 'later', 'subclass', 'thereof']"
3558,"Simula 1967 is generally accepted as being the first language with the primary features of an object-oriented language. It was created for making simulation programs, in which what came to be called objects were the most important information representation. Smalltalk 1972 to 1980 is another early example, and the one with which much of the theory of OOP was developed. Concerning the degree of object orientation, the following distinctions can be made:","['simula', '1967', 'generally', 'accept', 'language', 'primary', 'feature', 'object', 'orient', 'language', 'create', 'make', 'simulation', 'program', 'come', 'call', 'object', 'important', 'information', 'representation', 'smalltalk', '1972', '1980', 'early', 'example', 'theory', 'oop', 'develop', 'concern', 'degree', 'object', 'orientation', 'following', 'distinction']"
3559,"In recent years, object-oriented programming has become especially popular in dynamic programming languages. Python, PowerShell, Ruby and Groovy are dynamic languages built on OOP principles, while Perl and PHP have been adding object-oriented features since Perl 5 and PHP 4, and ColdFusion since version 6.","['recent', 'year', 'object', 'orient', 'programming', 'especially', 'popular', 'dynamic', 'programming', 'language', 'python', 'powershell', 'ruby', 'groovy', 'dynamic', 'language', 'build', 'oop', 'principle', 'perl', 'php', 'add', 'object', 'orient', 'feature', 'perl', 'php', 'coldfusion', 'version']"
3560,"The Document Object Model of HTML, XHTML, and XML documents on the Internet has bindings to the popular JavaScript/ECMAScript language. JavaScript is perhaps the best known prototype-based programming language, which employs cloning from prototypes rather than inheriting from a class contrast to class-based programming. Another scripting language that takes this approach is Lua.","['document', 'object', 'model', 'html', 'xhtml', 'xml', 'document', 'internet', 'binding', 'popular', 'javascript', 'ecmascript', 'language', 'javascript', 'well', 'know', 'prototype', 'base', 'programming', 'language', 'employ', 'clone', 'prototype', 'inherit', 'class', 'contrast', 'class', 'base', 'programming', 'scripting', 'language', 'take', 'approach', 'lua']"
3561,"The messages that flow between computers to request services in a client-server environment can be designed as the linearizations of objects defined by class objects known to both the client and the server. For example, a simple linearized object would consist of a length field, a code point identifying the class, and a data value. A more complex example would be a command consisting of the length and code point of the command and values consisting of linearized objects representing the command's parameters. Each such command must be directed by the server to an object whose class or superclass recognizes the command and is able to provide the requested service. Clients and servers are best modeled as complex object-oriented structures. Distributed Data Management Architecture DDM took this approach and used class objects to define objects at four levels of a formal hierarchy:","['message', 'flow', 'computer', 'request', 'service', 'client', 'server', 'environment', 'design', 'linearization', 'object', 'define', 'class', 'object', 'know', 'client', 'server', 'example', 'simple', 'linearize', 'object', 'consist', 'length', 'field', 'code', 'point', 'identify', 'class', 'data', 'value', 'complex', 'example', 'command', 'consist', 'length', 'code', 'point', 'command', 'value', 'consist', 'linearize', 'object', 'represent', 'command', 'parameter', 'command', 'direct', 'server', 'object', 'class', 'superclass', 'recognize', 'command', 'able', 'provide', 'request', 'service', 'client', 'server', 'well', 'model', 'complex', 'object', 'orient', 'structure', 'distribute', 'data', 'management', 'architecture', 'ddm', 'take', 'approach', 'class', 'object', 'define', 'object', 'level', 'formal', 'hierarchy']"
3562,The initial version of DDM defined distributed file services. It was later extended to be the foundation of Distributed Relational Database Architecture DRDA.,"['initial', 'version', 'ddm', 'define', 'distribute', 'file', 'service', 'later', 'extended', 'foundation', 'distributed', 'relational', 'database', 'architecture', 'drda']"
3563,"Challenges of object-oriented design are addressed by several approaches. Most common is known as the design patterns codified by Gamma et al.. More broadly, the term ""design patterns"" can be used to refer to any general, repeatable, solution pattern to a commonly occurring problem in software design. Some of these commonly occurring problems have implications and solutions particular to object-oriented development.","['challenge', 'object', 'orient', 'design', 'address', 'approach', 'common', 'know', 'design', 'pattern', 'codify', 'gamma', 'broadly', 'term', 'design', 'pattern', 'refer', 'general', 'repeatable', 'solution', 'pattern', 'commonly', 'occur', 'problem', 'software', 'design', 'commonly', 'occur', 'problem', 'implication', 'solution', 'particular', 'object', 'orient', 'development']"
3564,"It is intuitive to assume that inheritance creates a semantic ""is a"" relationship, and thus to infer that objects instantiated from subclasses can always be safely used instead of those instantiated from the superclass. This intuition is unfortunately false in most OOP languages, in particular in all those that allow mutable objects. Subtype polymorphism as enforced by the type checker in OOP languages with mutable objects cannot guarantee behavioral subtyping in any context. Behavioral subtyping is undecidable in general, so it cannot be implemented by a program compiler. Class or object hierarchies must be carefully designed, considering possible incorrect uses that cannot be detected syntactically. This issue is known as the Liskov substitution principle.","['intuitive', 'assume', 'inheritance', 'create', 'semantic', 'relationship', 'infer', 'object', 'instantiate', 'subclass', 'safely', 'instead', 'instantiate', 'superclass', 'intuition', 'unfortunately', 'false', 'oop', 'language', 'particular', 'allow', 'mutable', 'object', 'subtype', 'polymorphism', 'enforce', 'type', 'checker', 'oop', 'language', 'mutable', 'object', 'guarantee', 'behavioral', 'subtype', 'context', 'behavioral', 'subtype', 'undecidable', 'general', 'implement', 'program', 'compiler', 'class', 'object', 'hierarchy', 'carefully', 'design', 'consider', 'possible', 'incorrect', 'use', 'detect', 'syntactically', 'issue', 'know', 'liskov', 'substitution', 'principle']"
3565,"Design Patterns: Elements of Reusable Object-Oriented Software is an influential book published in 1994 by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, often referred to humorously as the ""Gang of Four"". Along with exploring the capabilities and pitfalls of object-oriented programming, it describes 23 common programming problems and patterns for solving them. As of April 2007, the book was in its 36th printing.","['design', 'patterns', 'element', 'reusable', 'object', 'orient', 'software', 'influential', 'book', 'publish', '1994', 'erich', 'gamma', 'richard', 'helm', 'ralph', 'johnson', 'john', 'vlissides', 'refer', 'humorously', 'gang', 'explore', 'capability', 'pitfall', 'object', 'orient', 'programming', 'describe', 'common', 'programming', 'problem', 'pattern', 'solve', 'april', '2007', 'book', '36th', 'printing']"
3566,The book describes the following patterns:,"['book', 'describe', 'following', 'pattern']"
3567,"Both object-oriented programming and relational database management systems RDBMSs are extremely common in software todayupdate. Since relational databases don't store objects directly though some RDBMSs have object-oriented features to approximate this, there is a general need to bridge the two worlds. The problem of bridging object-oriented programming accesses and data patterns with relational databases is known as object-relational impedance mismatch. There are a number of approaches to cope with this problem, but no general solution without downsides.24 One of the most common approaches is object-relational mapping, as found in IDE languages such as Visual FoxPro and libraries such as Java Data Objects and Ruby on Rails' ActiveRecord.","['object', 'orient', 'programming', 'relational', 'database', 'management', 'system', 'rdbms', 'extremely', 'common', 'software', 'todayupdate', 'relational', 'database', 'store', 'object', 'directly', 'rdbms', 'object', 'orient', 'feature', 'approximate', 'general', 'need', 'bridge', 'world', 'problem', 'bridge', 'object', 'orient', 'programming', 'access', 'datum', 'pattern', 'relational', 'database', 'know', 'object', 'relational', 'impedance', 'mismatch', 'number', 'approach', 'cope', 'problem', 'general', 'solution', 'downsides', 'common', 'approach', 'object', 'relational', 'mapping', 'find', 'ide', 'language', 'visual', 'foxpro', 'library', 'java', 'data', 'objects', 'ruby', 'rails', 'activerecord']"
3568,"There are also object databases that can be used to replace RDBMSs, but these have not been as technically and commercially successful as RDBMSs.","['object', 'database', 'replace', 'rdbms', 'technically', 'commercially', 'successful', 'rdbmss']"
3569,"OOP can be used to associate real-world objects and processes with digital counterparts. However, not everyone agrees that OOP facilitates direct real-world mapping see Criticism section or that real-world mapping is even a worthy goal; Bertrand Meyer argues in Object-Oriented Software Construction25 that a program is not a model of the world but a model of some part of the world; ""Reality is a cousin twice removed"". At the same time, some principal limitations of OOP have been noted.26 For example, the circle-ellipse problem is difficult to handle using OOP's concept of inheritance.","['oop', 'associate', 'real', 'world', 'object', 'process', 'digital', 'counterpart', 'agree', 'oop', 'facilitate', 'direct', 'real', 'world', 'mapping', 'criticism', 'section', 'real', 'world', 'mapping', 'worthy', 'goal', 'bertrand', 'meyer', 'argue', 'object', 'orient', 'software', 'construction25', 'program', 'model', 'world', 'model', 'world', 'reality', 'cousin', 'twice', 'remove', 'time', 'principal', 'limitation', 'oop', 'noted', 'example', 'circle', 'ellipse', 'problem', 'difficult', 'handle', 'oop', 'concept', 'inheritance']"
3570,"However, Niklaus Wirth who popularized the adage now known as Wirth's law: ""Software is getting slower more rapidly than hardware becomes faster"" said of OOP in his paper, ""Good Ideas through the Looking Glass"", ""This paradigm closely reflects the structure of systems 'in the real world', and it is therefore well suited to model complex systems with complex behaviours""27 contrast KISS principle.","['niklaus', 'wirth', 'popularize', 'adage', 'know', 'wirth', 'law', 'software', 'get', 'slow', 'rapidly', 'hardware', 'fast', 'say', 'oop', 'paper', 'good', 'ideas', 'looking', 'glass', 'paradigm', 'closely', 'reflect', 'structure', 'system', 'real', 'world', 'suited', 'model', 'complex', 'system', 'complex', 'behaviours', 'contrast', 'kiss', 'principle']"
3571,Steve Yegge and others noted that natural languages lack the OOP approach of strictly prioritizing things objects/nouns before actions methods/verbs.28 This problem may cause OOP to suffer more convoluted solutions than procedural programming.29,"['steve', 'yegge', 'note', 'natural', 'language', 'lack', 'oop', 'approach', 'strictly', 'prioritize', 'thing', 'object', 'noun', 'action', 'method', 'verbs', 'problem', 'cause', 'oop', 'suffer', 'convoluted', 'solution', 'procedural', 'programming']"
3572,"OOP was developed to increase the reusability and maintainability of source code.30 Transparent representation of the control flow had no priority and was meant to be handled by a compiler. With the increasing relevance of parallel hardware and multithreaded coding, developing transparent control flow becomes more important, something hard to achieve with OOP.31323334","['oop', 'develop', 'increase', 'reusability', 'maintainability', 'source', 'code', 'transparent', 'representation', 'control', 'flow', 'priority', 'mean', 'handle', 'compiler', 'increase', 'relevance', 'parallel', 'hardware', 'multithreaded', 'coding', 'develop', 'transparent', 'control', 'flow', 'important', 'hard', 'achieve', 'oop']"
3573,"Responsibility-driven design defines classes in terms of a contract, that is, a class should be defined around a responsibility and the information that it shares. This is contrasted by Wirfs-Brock and Wilkerson with data-driven design, where classes are defined around the data-structures that must be held. The authors hold that responsibility-driven design is preferable.","['responsibility', 'drive', 'design', 'define', 'class', 'term', 'contract', 'class', 'define', 'responsibility', 'information', 'share', 'contrast', 'wirfs', 'brock', 'wilkerson', 'data', 'drive', 'design', 'class', 'define', 'datum', 'structure', 'hold', 'author', 'hold', 'responsibility', 'drive', 'design', 'preferable']"
3574,SOLID is a mnemonic invented by Michael Feathers which spells out five software engineering design principles:,"['solid', 'mnemonic', 'invent', 'michael', 'feathers', 'spell', 'software', 'engineering', 'design', 'principle']"
3575,GRASP General Responsibility Assignment Software Patterns is another set of guidelines advocated by Craig Larman.,"['grasp', 'general', 'responsibility', 'assignment', 'software', 'patterns', 'set', 'guideline', 'advocate', 'craig', 'larman']"
3576,"The OOP paradigm has been criticised for a number of reasons, including not meeting its stated goals of reusability and modularity,3536 and for overemphasizing one aspect of software design and modeling data/objects at the expense of other important aspects computation/algorithms.3738","['oop', 'paradigm', 'criticise', 'number', 'reason', 'include', 'meet', 'stated', 'goal', 'reusability', 'modularity', 'overemphasize', 'aspect', 'software', 'design', 'model', 'datum', 'object', 'expense', 'important', 'aspect', 'computation', 'algorithms']"
3577,"Luca Cardelli has claimed that OOP code is ""intrinsically less efficient"" than procedural code, that OOP can take longer to compile, and that OOP languages have ""extremely poor modularity properties with respect to class extension and modification"", and tend to be extremely complex.35 The latter point is reiterated by Joe Armstrong, the principal inventor of Erlang, who is quoted as saying:36","['luca', 'cardelli', 'claim', 'oop', 'code', 'intrinsically', 'efficient', 'procedural', 'code', 'oop', 'long', 'compile', 'oop', 'language', 'extremely', 'poor', 'modularity', 'property', 'respect', 'class', 'extension', 'modification', 'tend', 'extremely', 'complex', 'point', 'reiterate', 'joe', 'armstrong', 'principal', 'inventor', 'erlang', 'quote', 'saying']"
3578,The problem with object-oriented languages is they've got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.,"['problem', 'object', 'orient', 'language', 'get', 'implicit', 'environment', 'carry', 'want', 'banana', 'get', 'gorilla', 'hold', 'banana', 'entire', 'jungle']"
3579,A study by Potok et al. has shown no significant difference in productivity between OOP and procedural approaches.39,"['study', 'potok', 'show', 'significant', 'difference', 'productivity', 'oop', 'procedural', 'approaches']"
3580,"Christopher J. Date stated that critical comparison of OOP to other technologies, relational in particular, is difficult because of lack of an agreed-upon and rigorous definition of OOP;40 however, Date and Darwen have proposed a theoretical foundation on OOP that uses OOP as a kind of customizable type system to support RDBMS.41","['christopher', 'date', 'state', 'critical', 'comparison', 'oop', 'technology', 'relational', 'particular', 'difficult', 'lack', 'agree', 'rigorous', 'definition', 'oop', 'date', 'darwen', 'propose', 'theoretical', 'foundation', 'oop', 'use', 'oop', 'kind', 'customizable', 'type', 'system', 'support', 'rdbms']"
3581,"In an article Lawrence Krubner claimed that compared to other languages LISP dialects, functional languages, etc. OOP languages have no unique strengths, and inflict a heavy burden of unneeded complexity.42","['article', 'lawrence', 'krubner', 'claim', 'compare', 'language', 'lisp', 'dialect', 'functional', 'language', 'etc', 'oop', 'language', 'unique', 'strength', 'inflict', 'heavy', 'burden', 'unneeded', 'complexity']"
3582,Alexander Stepanov compares object orientation unfavourably to generic programming:37,"['alexander', 'stepanov', 'compare', 'object', 'orientation', 'unfavourably', 'generic', 'programming']"
3583,I find OOP technically unsound. It attempts to decompose the world in terms of interfaces that vary on a single type. To deal with the real problems you need multisorted algebras — families of interfaces that span multiple types. I find OOP philosophically unsound. It claims that everything is an object. Even if it is true it is not very interesting — saying that everything is an object is saying nothing at all.,"['find', 'oop', 'technically', 'unsound', 'attempt', 'decompose', 'world', 'term', 'interface', 'vary', 'single', 'type', 'deal', 'real', 'problem', 'need', 'multisorted', 'algebra', 'family', 'interface', 'span', 'multiple', 'type', 'find', 'oop', 'philosophically', 'unsound', 'claim', 'object', 'true', 'interesting', 'say', 'object', 'say']"
3584,"Paul Graham has suggested that OOP's popularity within large companies is due to ""large and frequently changing groups of mediocre programmers"". According to Graham, the discipline imposed by OOP prevents any one programmer from ""doing too much damage"".43","['paul', 'graham', 'suggest', 'oop', 'popularity', 'large', 'company', 'large', 'frequently', 'change', 'group', 'mediocre', 'programmer', 'accord', 'graham', 'discipline', 'impose', 'oop', 'prevent', 'programmer', 'damage']"
3585,Leo Brodie has suggested a connection between the standalone nature of objects and a tendency to duplicate code44 in violation of the don't repeat yourself principle45 of software development.,"['leo', 'brodie', 'suggest', 'connection', 'standalone', 'nature', 'object', 'tendency', 'duplicate', 'code44', 'violation', 'repeat', 'principle45', 'software', 'development']"
3586,"Steve Yegge noted that, as opposed to functional programming:46","['steve', 'yegge', 'note', 'oppose', 'functional', 'programming']"
3587,Object Oriented Programming puts the Nouns first and foremost. Why would you go to such lengths to put one part of speech on a pedestal? Why should one kind of concept take precedence over another? It's not as if OOP has suddenly made verbs less important in the way we actually think. It's a strangely skewed perspective.,"['object', 'oriented', 'programming', 'put', 'nouns', 'foremost', 'length', 'speech', 'pedestal', 'kind', 'concept', 'precedence', 'oop', 'suddenly', 'verb', 'important', 'way', 'actually', 'think', 'strangely', 'skewed', 'perspective']"
3588,"Rich Hickey, creator of Clojure, described object systems as overly simplistic models of the real world. He emphasized the inability of OOP to model time properly, which is getting increasingly problematic as software systems become more concurrent.38","['rich', 'hickey', 'creator', 'clojure', 'describe', 'object', 'system', 'overly', 'simplistic', 'model', 'real', 'world', 'emphasize', 'inability', 'oop', 'model', 'time', 'properly', 'get', 'increasingly', 'problematic', 'software', 'system', 'concurrent']"
3589,"Eric S. Raymond, a Unix programmer and open-source software advocate, has been critical of claims that present object-oriented programming as the ""One True Solution"", and has written that object-oriented programming languages tend to encourage thickly layered programs that destroy transparency.47 Raymond compares this unfavourably to the approach taken with Unix and the C programming language.47","['eric', 'raymond', 'unix', 'programmer', 'open', 'source', 'software', 'advocate', 'critical', 'claim', 'present', 'object', 'orient', 'programming', 'true', 'solution', 'write', 'object', 'orient', 'programming', 'language', 'tend', 'encourage', 'thickly', 'layer', 'program', 'destroy', 'transparency', 'raymond', 'compare', 'unfavourably', 'approach', 'take', 'unix', 'programming', 'language']"
3590,"Rob Pike, a programmer involved in the creation of UTF-8 and Go, has called object-oriented programming ""the Roman numerals of computing""48 and has said that OOP languages frequently shift the focus from data structures and algorithms to types.49 Furthermore, he cites an instance of a Java professor whose ""idiomatic"" solution to a problem was to create six new classes, rather than to simply use a lookup table.50","['rob', 'pike', 'programmer', 'involve', 'creation', 'utf-8', 'call', 'object', 'orient', 'programming', 'roman', 'numeral', 'computing', 'say', 'oop', 'language', 'frequently', 'shift', 'focus', 'datum', 'structure', 'algorithm', 'types', 'furthermore', 'cite', 'instance', 'java', 'professor', 'idiomatic', 'solution', 'problem', 'create', 'new', 'class', 'simply', 'use', 'lookup', 'table']"
3591,"Regarding inheritance, Bob Martin states that because they are software, related classes do not necessarily share the relationships of the things they represent.51","['inheritance', 'bob', 'martin', 'state', 'software', 'relate', 'class', 'necessarily', 'share', 'relationship', 'thing', 'represent']"
3592,"Objects are the run-time entities in an object-oriented system. They may represent a person, a place, a bank account, a table of data, or any item that the program has to handle.","['object', 'run', 'time', 'entity', 'object', 'orient', 'system', 'represent', 'person', 'place', 'bank', 'account', 'table', 'datum', 'item', 'program', 'handle']"
3593,There have been several attempts at formalizing the concepts used in object-oriented programming. The following concepts and constructs have been used as interpretations of OOP concepts:,"['attempt', 'formalize', 'concept', 'object', 'orient', 'programming', 'follow', 'concept', 'construct', 'interpretation', 'oop', 'concept']"
3594,"Attempts to find a consensus definition or theory behind objects have not proven very successful however, see Abadi & Cardelli, A Theory of Objects53 for formal definitions of many OOP concepts and constructs, and often diverge widely. For example, some definitions focus on mental activities, and some on program structuring. One of the simpler definitions is that OOP is the act of using ""map"" data structures or arrays that can contain functions and pointers to other maps, all with some syntactic and scoping sugar on top. Inheritance can be performed by cloning the maps sometimes called ""prototyping"".","['attempt', 'find', 'consensus', 'definition', 'theory', 'object', 'prove', 'successful', 'abadi', 'cardelli', 'theory', 'objects53', 'formal', 'definition', 'oop', 'concept', 'construct', 'diverge', 'widely', 'example', 'definition', 'focus', 'mental', 'activity', 'program', 'structure', 'simple', 'definition', 'oop', 'act', 'map', 'datum', 'structure', 'array', 'contain', 'function', 'pointer', 'map', 'syntactic', 'scope', 'sugar', 'inheritance', 'perform', 'clone', 'map', 'call', 'prototype']"
3595,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3596,"In object-oriented programming, an interface or protocol typea is a data type describing a set of method signatures, the implementations of which may be provided by multiple classes that are otherwise not necessarily related to each other.1 A class which provides the methods listed in a protocol is said to adopt the protocol,2 or to implement the interface.1","['object', 'orient', 'programming', 'interface', 'protocol', 'typea', 'data', 'type', 'describe', 'set', 'method', 'signature', 'implementation', 'provide', 'multiple', 'class', 'necessarily', 'relate', 'other', 'class', 'provide', 'method', 'list', 'protocol', 'say', 'adopt', 'protocol', 'implement', 'interface']"
3597,"If objects are fully encapsulated then the protocol is the only way in which they may be accessed by other objects. For example, in Java, the Comparable interface specifies a method compareTo which implementing classes must implement. This means that a sorting method, for example, can sort a collection of any objects of types which implement the Comparable interface, without having to know anything about the inner nature of the class except that two of these objects can be compared by means of compareTo.","['object', 'fully', 'encapsulate', 'protocol', 'way', 'access', 'object', 'example', 'java', 'comparable', 'interface', 'specify', 'method', 'compareto', 'implement', 'class', 'implement', 'mean', 'sort', 'method', 'example', 'sort', 'collection', 'object', 'type', 'implement', 'comparable', 'interface', 'have', 'know', 'inner', 'nature', 'class', 'object', 'compare', 'mean', 'compareto']"
3598,"Some programming languages provide explicit language support for protocols Ada, C#, D, Dart, Delphi, Go, Java, Logtalk, Object Pascal, Objective-C, OCaml, PHP, Racket, Seed7, Swift. In languages supporting multiple inheritance, such as C++, interfaces are implemented as abstract classes.","['programming', 'language', 'provide', 'explicit', 'language', 'support', 'protocol', 'ada', 'dart', 'delphi', 'java', 'logtalk', 'object', 'pascal', 'objective', 'ocaml', 'php', 'racket', 'seed7', 'swift', 'language', 'support', 'multiple', 'inheritance', 'c++', 'interface', 'implement', 'abstract', 'class']"
3599,"In languages without explicit support, protocols are often still present as conventions. This is known as duck typing. For example, in Python, any class can implement an __iter__ method and be used as a collection.3","['language', 'explicit', 'support', 'protocol', 'present', 'convention', 'know', 'duck', 'typing', 'example', 'python', 'class', 'implement', 'iter', 'method', 'collection']"
3600,"Type classes in languages like Haskell, or module signatures in ML and OCaml, are used for many of the things that protocols are used for.clarification needed","['type', 'class', 'language', 'like', 'haskell', 'module', 'signature', 'ocaml', 'thing', 'protocol', 'for.clarification', 'need']"
3601,This computer-programming-related article is a stub. You can help Wikipedia by expanding it.,"['computer', 'programming', 'relate', 'article', 'stub', 'help', 'wikipedia', 'expand']"
3602,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3603,"The prototype pattern is a creational design pattern in software development. It is used when the type of objects to create is determined by a prototypical instance, which is cloned to produce new objects. This pattern is used to avoid subclasses of an object creator in the client application, like the factory method pattern does and to avoid the inherent cost of creating a new object in the standard way e.g., using the 'new' keyword when it is prohibitively expensive for a given application.","['prototype', 'pattern', 'creational', 'design', 'pattern', 'software', 'development', 'type', 'object', 'create', 'determine', 'prototypical', 'instance', 'clone', 'produce', 'new', 'object', 'pattern', 'avoid', 'subclass', 'object', 'creator', 'client', 'application', 'like', 'factory', 'method', 'pattern', 'avoid', 'inherent', 'cost', 'create', 'new', 'object', 'standard', 'way', 'e.g.', 'new', 'keyword', 'prohibitively', 'expensive', 'give', 'application']"
3604,"To implement the pattern, the client declares an abstract base class that specifies a pure virtual clone method. Any class that needs a ""polymorphic constructor"" capability derives itself from the abstract base class, and implements the clone operation.","['implement', 'pattern', 'client', 'declare', 'abstract', 'base', 'class', 'specify', 'pure', 'virtual', 'clone', 'method', 'class', 'need', 'polymorphic', 'constructor', 'capability', 'derive', 'abstract', 'base', 'class', 'implement', 'clone', 'operation']"
3605,"The client, instead of writing code that invokes the ""new"" operator on a hard-coded class name, calls the clone method on the prototype, calls a factory method with a parameter designating the particular concrete derived class desired, or invokes the clone method through some mechanism provided by another design pattern.","['client', 'instead', 'write', 'code', 'invoke', 'new', 'operator', 'hard', 'code', 'class', 'call', 'clone', 'method', 'prototype', 'call', 'factory', 'method', 'parameter', 'designate', 'particular', 'concrete', 'derive', 'class', 'desire', 'invoke', 'clone', 'method', 'mechanism', 'provide', 'design', 'pattern']"
3606,"The mitotic division of a cell — resulting in two identical cells — is an example of a prototype that plays an active role in copying itself and thus, demonstrates the Prototype pattern. When a cell splits, two cells of identical genotype result. In other words, the cell clones itself.1","['mitotic', 'division', 'cell', 'result', 'identical', 'cell', 'example', 'prototype', 'play', 'active', 'role', 'copy', 'demonstrate', 'prototype', 'pattern', 'cell', 'split', 'cell', 'identical', 'genotype', 'result', 'word', 'cell', 'clone', 'itself']"
3607,"The prototype design pattern is one of the twenty-three well-known GoF design patterns that describe how to solve recurring design problems to design flexible and reusable object-oriented software, that is, objects that are easier to implement, change, test, and reuse.2: 117","['prototype', 'design', 'pattern', 'know', 'gof', 'design', 'pattern', 'describe', 'solve', 'recur', 'design', 'problem', 'design', 'flexible', 'reusable', 'object', 'orient', 'software', 'object', 'easy', 'implement', 'change', 'test', 'reuse', '117']"
3608,The prototype design pattern solves problems like:3,"['prototype', 'design', 'pattern', 'solve', 'problem', 'like']"
3609,Creating objects directly within the class that requires uses the objects is inflexible because it commits the class to particular objects at compile-time and makes it impossible to specify which objects to create at run-time.,"['create', 'object', 'directly', 'class', 'require', 'use', 'object', 'inflexible', 'commit', 'class', 'particular', 'object', 'compile', 'time', 'make', 'impossible', 'specify', 'object', 'create', 'run', 'time']"
3610,The prototype design pattern describes how to solve such problems:,"['prototype', 'design', 'pattern', 'describe', 'solve', 'problem']"
3611,"This enables configuration of a class with different Prototype objects, which are copied to create new objects, and even more, Prototype objects can be added and removed at run-time. See also the UML class and sequence diagram below.","['enable', 'configuration', 'class', 'different', 'prototype', 'object', 'copy', 'create', 'new', 'object', 'prototype', 'object', 'add', 'remove', 'run', 'time', 'uml', 'class', 'sequence', 'diagram']"
3612,"In the above UML class diagram, the Client class refers to the Prototype interface for cloning a Product. The Product1 class implements the Prototype interface by creating a copy of itself. The UML sequence diagram shows the run-time interactions: The Client object calls clone on a prototype:Product1 object, which creates and returns a copy of itself a product:Product1 object.","['uml', 'class', 'diagram', 'client', 'class', 'refer', 'prototype', 'interface', 'clone', 'product', 'product1', 'class', 'implement', 'prototype', 'interface', 'create', 'copy', 'uml', 'sequence', 'diagram', 'show', 'run', 'time', 'interaction', 'client', 'object', 'call', 'clone', 'prototype', 'product1', 'object', 'create', 'return', 'copy', 'product', 'product1', 'object']"
3613,"Sometimes creational patterns overlap — there are cases when either prototype or abstract factory would be appropriate. At other times, they complement each other: abstract factory might store a set of prototypes from which to clone and return product objects.2: 126 Abstract factory, builder, and prototype can use singleton in their implementations.2: 81, 134 Abstract factory classes are often implemented with factory methods creation through inheritance, but they can be implemented using prototype creation through delegation.2: 95","['creational', 'pattern', 'overlap', 'case', 'prototype', 'abstract', 'factory', 'appropriate', 'time', 'complement', 'abstract', 'factory', 'store', 'set', 'prototype', 'clone', 'return', 'product', 'objects', '126', 'abstract', 'factory', 'builder', 'prototype', 'use', 'singleton', 'implementations', '134', 'abstract', 'factory', 'class', 'implement', 'factory', 'method', 'creation', 'inheritance', 'implement', 'prototype', 'creation', 'delegation']"
3614,"Often, designs start out using Factory Method less complicated, more customizable, subclasses proliferate and evolve toward abstract factory, prototype, or builder more flexible, more complex as the designer discovers where more flexibility is needed.2: 136","['design', 'start', 'factory', 'method', 'complicated', 'customizable', 'subclass', 'proliferate', 'evolve', 'abstract', 'factory', 'prototype', 'builder', 'flexible', 'complex', 'designer', 'discover', 'flexibility', 'needed', '136']"
3615,"Prototype does not require subclassing, but it does require an ""initialize"" operation. Factory method requires subclassing, but does not require initialization.2: 116","['prototype', 'require', 'subclasse', 'require', 'initialize', 'operation', 'factory', 'method', 'require', 'subclasse', 'require', 'initialization', '116']"
3616,Designs that make heavy use of the composite and decorator patterns often can benefit from Prototype as well.2: 126,"['design', 'heavy', 'use', 'composite', 'decorator', 'pattern', 'benefit', 'prototype', 'well', '126']"
3617,"The rule of thumb could be that you would need to clone an Object when you want to create another Object at runtime that is a true copy of the Object you are cloning. True copy means all the attributes of the newly created Object should be the same as the Object you are cloning. If you could have instantiated the class by using new instead, you would get an Object with all attributes as their initial values. For example, if you are designing a system for performing bank account transactions, then you would want to make a copy of the Object that holds your account information, perform transactions on it, and then replace the original Object with the modified one. In such cases, you would want to use clone instead of new.","['rule', 'thumb', 'need', 'clone', 'object', 'want', 'create', 'object', 'runtime', 'true', 'copy', 'object', 'clone', 'true', 'copy', 'mean', 'attribute', 'newly', 'create', 'object', 'object', 'clone', 'instantiate', 'class', 'new', 'instead', 'object', 'attribute', 'initial', 'value', 'example', 'design', 'system', 'perform', 'bank', 'account', 'transaction', 'want', 'copy', 'object', 'hold', 'account', 'information', 'perform', 'transaction', 'replace', 'original', 'object', 'modified', 'case', 'want', 'use', 'clone', 'instead', 'new']"
3618,"Let's write an occurrence browser class for a text. This class lists the occurrences of a word in a text. Such an object is expensive to create as the locations of the occurrences need an expensive process to find. So, to duplicate such an object, we use the prototype pattern:","['let', 'write', 'occurrence', 'browser', 'class', 'text', 'class', 'list', 'occurrence', 'word', 'text', 'object', 'expensive', 'create', 'location', 'occurrence', 'need', 'expensive', 'process', 'find', 'duplicate', 'object', 'use', 'prototype', 'pattern']"
3619,the search algorithm is not optimized; it is a basic algorithm to illustrate the pattern implementation,"['search', 'algorithm', 'optimize', 'basic', 'algorithm', 'illustrate', 'pattern', 'implementation']"
3620,The concrete type of object is created from its prototype. MemberwiseClone is used in the Clone method to create and return a copy of ConcreteFoo1 or ConcreteFoo2.,"['concrete', 'type', 'object', 'create', 'prototype', 'memberwiseclone', 'clone', 'method', 'create', 'return', 'copy', 'concretefoo1', 'concretefoo2']"
3621,Discussion of the design pattern along with a complete illustrative example implementation using polymorphic class design are provided in the C++ Annotations.,"['discussion', 'design', 'pattern', 'complete', 'illustrative', 'example', 'implementation', 'polymorphic', 'class', 'design', 'provide', 'c++', 'annotations']"
3622,"This pattern creates the kind of object using its prototype. In other words, while creating the object of Prototype object, the class creates a clone of it and returns it as prototype. The clone method has been used to clone the prototype when required.","['pattern', 'create', 'kind', 'object', 'prototype', 'word', 'create', 'object', 'prototype', 'object', 'class', 'create', 'clone', 'return', 'prototype', 'clone', 'method', 'clone', 'prototype', 'require']"
3623,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3624,"Prototype-based programming is a style of object-oriented programming in which behaviour reuse known as inheritance is performed via a process of reusing existing objects that serve as prototypes. This model can also be known as prototypal, prototype-oriented, classless, or instance-based programming.","['prototype', 'base', 'programming', 'style', 'object', 'orient', 'programming', 'behaviour', 'reuse', 'know', 'inheritance', 'perform', 'process', 'reuse', 'exist', 'object', 'serve', 'prototype', 'model', 'know', 'prototypal', 'prototype', 'orient', 'classless', 'instance', 'base', 'programming']"
3625,"Prototype-based programming uses the process generalized objects, which can then be cloned and extended. Using fruit as an example, a ""fruit"" object would represent the properties and functionality of fruit in general. A ""banana"" object would be cloned from the ""fruit"" object and general properties specific to bananas would be appended. Each individual ""banana"" object would be cloned from the generic ""banana"" object. Compare to the class-based paradigm, where a ""fruit"" class would be extended by a ""banana"" class.","['prototype', 'base', 'programming', 'use', 'process', 'generalize', 'object', 'clone', 'extend', 'fruit', 'example', 'fruit', 'object', 'represent', 'property', 'functionality', 'fruit', 'general', 'banana', 'object', 'clone', 'fruit', 'object', 'general', 'property', 'specific', 'banana', 'append', 'individual', 'banana', 'object', 'clone', 'generic', 'banana', 'object', 'compare', 'class', 'base', 'paradigm', 'fruit', 'class', 'extend', 'banana', 'class']"
3626,"The first prototype-oriented programming language was Self, developed by David Ungar and Randall Smith in the mid-1980s to research topics in object-oriented language design. Since the late 1990s, the classless paradigm has grown increasingly popular. Some current prototype-oriented languages are JavaScript and other ECMAScript implementations such as JScript and Flash's ActionScript 1.0, Lua, Cecil, NewtonScript, Io, Ioke, MOO, REBOL and AHK.","['prototype', 'orient', 'programming', 'language', 'self', 'develop', 'david', 'ungar', 'randall', 'smith', 'mid-1980', 'research', 'topic', 'object', 'orient', 'language', 'design', 'late', '1990', 'classless', 'paradigm', 'grow', 'increasingly', 'popular', 'current', 'prototype', 'orient', 'language', 'javascript', 'ecmascript', 'implementation', 'jscript', 'flash', 'actionscript', '1', 'lua', 'cecil', 'newtonscript', 'ioke', 'moo', 'rebol', 'ahk']"
3627,Prototypal inheritance in JavaScript is described by Douglas Crockford as,"['prototypal', 'inheritance', 'javascript', 'describe', 'douglas', 'crockford']"
3628,"You make prototype objects, and then … make new instances. Objects are mutable in JavaScript, so we can augment the new instances, giving them new fields and methods. These can then act as prototypes for even newer objects. We don't need classes to make lots of similar objects… Objects inherit from objects. What could be more object oriented than that?1","['prototype', 'object', 'new', 'instance', 'object', 'mutable', 'javascript', 'augment', 'new', 'instance', 'give', 'new', 'field', 'method', 'act', 'prototype', 'new', 'object', 'need', 'class', 'lot', 'similar', 'object', 'object', 'inherit', 'object', 'object', 'orient', 'that?1']"
3629,"Advocates of prototype-based programming argue that it encourages the programmer to focus on the behavior of some set of examples and only later worry about classifying these objects into archetypal objects that are later used in a fashion similar to classes.2 Many prototype-based systems encourage the alteration of prototypes during run-time, whereas only very few class-based object-oriented systems such as the dynamic object-oriented system, Common Lisp, Dylan, Objective-C, Perl, Python, Ruby, or Smalltalk allow classes to be altered during the execution of a program.","['advocate', 'prototype', 'base', 'programming', 'argue', 'encourage', 'programmer', 'focus', 'behavior', 'set', 'example', 'later', 'worry', 'classify', 'object', 'archetypal', 'object', 'later', 'fashion', 'similar', 'classes', 'prototype', 'base', 'system', 'encourage', 'alteration', 'prototype', 'run', 'time', 'class', 'base', 'object', 'orient', 'system', 'dynamic', 'object', 'orient', 'system', 'common', 'lisp', 'dylan', 'objective', 'perl', 'python', 'ruby', 'smalltalk', 'allow', 'class', 'alter', 'execution', 'program']"
3630,"Almost all prototype-based systems are based on interpreted and dynamically typed languages. Systems based on statically typed languages are technically feasible, however. The Omega language discussed in Prototype-Based Programming3 is an example of such a system, though according to Omega's website even Omega is not exclusively static, but rather its ""compiler may choose to use static binding where this is possible and may improve the efficiency of a program.""","['prototype', 'base', 'system', 'base', 'interpret', 'dynamically', 'type', 'language', 'system', 'base', 'statically', 'type', 'language', 'technically', 'feasible', 'omega', 'language', 'discuss', 'prototype', 'base', 'programming3', 'example', 'system', 'accord', 'omega', 'website', 'omega', 'exclusively', 'static', 'compiler', 'choose', 'use', 'static', 'binding', 'possible', 'improve', 'efficiency', 'program']"
3631,"In prototype-based languages there are no explicit classes. Objects inherit directly from other objects through a prototype property. The prototype property is called prototype in Self and JavaScript, or proto in Io. There are two methods of constructing new objects: ex nihilo ""from nothing"" object creation or through cloning an existing object. The former is supported through some form of object literal, declarations where objects can be defined at runtime through special syntax such as ... and passed directly to a variable. While most systems support a variety of cloning, ex nihilo object creation is not as prominent.4","['prototype', 'base', 'language', 'explicit', 'class', 'object', 'inherit', 'directly', 'object', 'prototype', 'property', 'prototype', 'property', 'call', 'prototype', 'self', 'javascript', 'proto', 'method', 'construct', 'new', 'object', 'nihilo', 'object', 'creation', 'clone', 'exist', 'object', 'support', 'form', 'object', 'literal', 'declaration', 'object', 'define', 'runtime', 'special', 'syntax', 'pass', 'directly', 'variable', 'system', 'support', 'variety', 'cloning', 'nihilo', 'object', 'creation', 'prominent']"
3632,"In class-based languages, a new instance is constructed through a class's constructor function, a special function that reserves a block of memory for the object's members properties and methods and returns a reference to that block. An optional set of constructor arguments can be passed to the function and are usually held in properties. The resulting instance will inherit all the methods and properties that were defined in the class, which acts as a kind of template from which similarly typed objects can be constructed.","['class', 'base', 'language', 'new', 'instance', 'construct', 'class', 'constructor', 'function', 'special', 'function', 'reserve', 'block', 'memory', 'object', 'member', 'property', 'method', 'return', 'reference', 'block', 'optional', 'set', 'constructor', 'argument', 'pass', 'function', 'usually', 'hold', 'property', 'result', 'instance', 'inherit', 'method', 'property', 'define', 'class', 'act', 'kind', 'template', 'similarly', 'type', 'object', 'construct']"
3633,"Systems that support ex nihilo object creation allow new objects to be created from scratch without cloning from an existing prototype. Such systems provide a special syntax for specifying the properties and behaviors of new objects without referencing existing objects. In many prototype languages there exists a root object, often called Object, which is set as the default prototype for all other objects created in run-time and which carries commonly needed methods such as a toString function to return a description of the object as a string. One useful aspect of ex nihilo object creation is to ensure that a new object's slot properties and methods names do not have namespace conflicts with the top-level Object object. In the JavaScript language, one can do this by using a null prototype, i.e. Object.createnull.","['system', 'support', 'nihilo', 'object', 'creation', 'allow', 'new', 'object', 'create', 'scratch', 'clone', 'exist', 'prototype', 'system', 'provide', 'special', 'syntax', 'specify', 'property', 'behavior', 'new', 'object', 'reference', 'exist', 'object', 'prototype', 'language', 'exist', 'root', 'object', 'call', 'object', 'set', 'default', 'prototype', 'object', 'create', 'run', 'time', 'carry', 'commonly', 'need', 'method', 'tostring', 'function', 'return', 'description', 'object', 'string', 'useful', 'aspect', 'nihilo', 'object', 'creation', 'ensure', 'new', 'object', 'slot', 'property', 'method', 'name', 'namespace', 'conflict', 'level', 'object', 'object', 'javascript', 'language', 'null', 'prototype', 'i.e.', 'object.createnull']"
3634,"Cloning refers to a process whereby a new object is constructed by copying the behavior of an existing object its prototype. The new object then carries all the qualities of the original. From this point on, the new object can be modified. In some systems the resulting child object maintains an explicit link via delegation or resemblance to its prototype, and changes in the prototype cause corresponding changes to be apparent in its clone. Other systems, such as the Forth-like programming language Kevo, do not propagate change from the prototype in this fashion and instead follow a more concatenative model where changes in cloned objects do not automatically propagate across descendants.2","['cloning', 'refer', 'process', 'new', 'object', 'construct', 'copy', 'behavior', 'exist', 'object', 'prototype', 'new', 'object', 'carry', 'quality', 'original', 'point', 'new', 'object', 'modify', 'system', 'result', 'child', 'object', 'maintain', 'explicit', 'link', 'delegation', 'resemblance', 'prototype', 'change', 'prototype', 'cause', 'correspond', 'change', 'apparent', 'clone', 'system', 'forth', 'like', 'programming', 'language', 'kevo', 'propagate', 'change', 'prototype', 'fashion', 'instead', 'follow', 'concatenative', 'model', 'change', 'cloned', 'object', 'automatically', 'propagate', 'descendants']"
3635,"In prototype-based languages that use delegation, the language runtime is capable of dispatching the correct method or finding the right piece of data simply by following a series of delegation pointers from object to its prototype until a match is found. All that is required to establish this behavior-sharing between objects is the delegation pointer. Unlike the relationship between class and instance in class-based object-oriented languages, the relationship between the prototype and its offshoots does not require that the child object have a memory or structural similarity to the prototype beyond this link. As such, the child object can continue to be modified and amended over time without rearranging the structure of its associated prototype as in class-based systems. It is also important to note that not only data, but also methods can be added or changed. For this reason, some prototype-based languages refer to both data and methods as ""slots"" or ""members"".citation needed","['prototype', 'base', 'language', 'use', 'delegation', 'language', 'runtime', 'capable', 'dispatch', 'correct', 'method', 'find', 'right', 'piece', 'datum', 'simply', 'follow', 'series', 'delegation', 'pointer', 'object', 'prototype', 'match', 'find', 'require', 'establish', 'behavior', 'sharing', 'object', 'delegation', 'pointer', 'unlike', 'relationship', 'class', 'instance', 'class', 'base', 'object', 'orient', 'language', 'relationship', 'prototype', 'offshoot', 'require', 'child', 'object', 'memory', 'structural', 'similarity', 'prototype', 'link', 'child', 'object', 'continue', 'modify', 'amend', 'time', 'rearrange', 'structure', 'associate', 'prototype', 'class', 'base', 'system', 'important', 'note', 'datum', 'method', 'add', 'change', 'reason', 'prototype', 'base', 'language', 'refer', 'datum', 'method', 'slot', 'members', 'need']"
3636,"In concatenative prototyping - the approach implemented by the Kevo programming language - there are no visible pointers or links to the original prototype from which an object is cloned. The prototype parent object is copied rather than linked to and there is no delegation. As a result, changes to the prototype will not be reflected in cloned objects.5","['concatenative', 'prototyping', 'approach', 'implement', 'kevo', 'programming', 'language', 'visible', 'pointer', 'link', 'original', 'prototype', 'object', 'clone', 'prototype', 'parent', 'object', 'copy', 'link', 'delegation', 'result', 'change', 'prototype', 'reflect', 'cloned', 'objects']"
3637,"The main conceptual difference under this arrangement is that changes made to a prototype object are not automatically propagated to clones. This may be seen as an advantage or disadvantage. However, Kevo does provide additional primitives for publishing changes across sets of objects based on their similarity — so-called family resemblances or clone family mechanism5 — rather than through taxonomic origin, as is typical in the delegation model. It is also sometimes claimed that delegation-based prototyping has an additional disadvantage in that changes to a child object may affect the later operation of the parent. However, this problem is not inherent to the delegation-based model and does not exist in delegation-based languages such as JavaScript, which ensure that changes to a child object are always recorded in the child object itself and never in parents i.e. the child's value shadows the parent's value rather than changing the parent's value.","['main', 'conceptual', 'difference', 'arrangement', 'change', 'prototype', 'object', 'automatically', 'propagate', 'clone', 'see', 'advantage', 'disadvantage', 'kevo', 'provide', 'additional', 'primitive', 'publish', 'change', 'set', 'object', 'base', 'similarity', 'call', 'family', 'resemblance', 'clone', 'family', 'mechanism5', 'taxonomic', 'origin', 'typical', 'delegation', 'model', 'claim', 'delegation', 'base', 'prototyping', 'additional', 'disadvantage', 'change', 'child', 'object', 'affect', 'later', 'operation', 'parent', 'problem', 'inherent', 'delegation', 'base', 'model', 'exist', 'delegation', 'base', 'language', 'javascript', 'ensure', 'change', 'child', 'object', 'record', 'child', 'object', 'parent', 'i.e.', 'child', 'value', 'shadow', 'parent', 'value', 'change', 'parent', 'value']"
3638,"In simplistic implementations, concatenative prototyping will have faster member lookup than delegation-based prototyping because there is no need to follow the chain of parent objects, but will conversely use more memory because all slots are copied, rather than there being a single slot pointing to the parent object. More sophisticated implementations can avoid this problem, however, although trade-offs between speed and memory are required. For example, systems with concatenative prototyping can use a copy-on-write implementation to allow for behind-the-scenes data sharing — and such an approach is indeed followed by Kevo.6 Conversely, systems with delegation-based prototyping can use caching to speed up data lookup.","['simplistic', 'implementation', 'concatenative', 'prototyping', 'fast', 'member', 'lookup', 'delegation', 'base', 'prototyping', 'need', 'follow', 'chain', 'parent', 'object', 'conversely', 'use', 'memory', 'slot', 'copy', 'single', 'slot', 'pointing', 'parent', 'object', 'sophisticated', 'implementation', 'avoid', 'problem', 'trade', 'off', 'speed', 'memory', 'require', 'example', 'system', 'concatenative', 'prototyping', 'use', 'copy', 'write', 'implementation', 'allow', 'scene', 'datum', 'sharing', 'approach', 'follow', 'kevo', 'conversely', 'system', 'delegation', 'base', 'prototyping', 'use', 'cache', 'speed', 'datum', 'lookup']"
3639,"Advocates of class-based object models who criticize prototype-based systems often have concerns similar to the concerns that proponents of static type systems for programming languages have of dynamic type systems see datatype. Usually, such concerns involve correctness, safety, predictability, efficiency and programmer unfamiliarity.","['advocate', 'class', 'base', 'object', 'model', 'criticize', 'prototype', 'base', 'system', 'concern', 'similar', 'concern', 'proponent', 'static', 'type', 'system', 'programming', 'language', 'dynamic', 'type', 'system', 'datatype', 'usually', 'concern', 'involve', 'correctness', 'safety', 'predictability', 'efficiency', 'programmer', 'unfamiliarity']"
3640,"On the first three points, classes are often seen as analogous to types in most statically typed object-oriented languages they serve that role and are proposed to provide contractual guarantees to their instances, and to users of their instances, that they will behave in some given fashion.","['point', 'class', 'see', 'analogous', 'type', 'statically', 'type', 'object', 'orient', 'language', 'serve', 'role', 'propose', 'provide', 'contractual', 'guarantee', 'instance', 'user', 'instance', 'behave', 'give', 'fashion']"
3641,"Regarding efficiency, declaring classes simplifies many compiler optimizations that allow developing efficient method and instance-variable lookup. For the Self language, much development time was spent on developing, compiling, and interpreting techniques to improve the performance of prototype-based systems versus class-based systems.","['efficiency', 'declare', 'class', 'simplify', 'compiler', 'optimization', 'allow', 'develop', 'efficient', 'method', 'instance', 'variable', 'lookup', 'self', 'language', 'development', 'time', 'spend', 'develop', 'compile', 'interpret', 'technique', 'improve', 'performance', 'prototype', 'base', 'system', 'versus', 'class', 'base', 'system']"
3642,"A common criticism made against prototype-based languages is that the community of software developers is unfamiliar with them, despite the popularity and market permeation of JavaScript. This knowledge level of prototype-based systems seems to be increasing with the proliferation of JavaScript frameworks and the complex use of JavaScript as the Web matures.7citation needed ECMAScript 6 introduced classes as syntactic sugar over JavaScript's existing prototype-based inheritance, providing an alternative way to create objects and deal with inheritance.8","['common', 'criticism', 'prototype', 'base', 'language', 'community', 'software', 'developer', 'unfamiliar', 'despite', 'popularity', 'market', 'permeation', 'javascript', 'knowledge', 'level', 'prototype', 'base', 'system', 'increase', 'proliferation', 'javascript', 'framework', 'complex', 'use', 'javascript', 'web', 'maturescitation', 'need', 'ecmascript', 'introduce', 'class', 'syntactic', 'sugar', 'javascript', 'exist', 'prototype', 'base', 'inheritance', 'provide', 'alternative', 'way', 'create', 'object', 'deal', 'inheritance']"
3643,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3644,"In software systems, encapsulation refers to the bundling of data with the mechanisms or methods that operate on the data, or the limiting of direct access to some data, such as an object's components.1 Encapsulation allows developers to present a consistent and usable interface which is independent of how a system is implemented internally. As one example, encapsulation can be used to hide the values or state of a structured data object inside a class, preventing direct access to them by clients in a way that could expose hidden implementation details or violate state invariance maintained by the methods.","['software', 'system', 'encapsulation', 'refer', 'bundling', 'datum', 'mechanism', 'method', 'operate', 'datum', 'limiting', 'direct', 'access', 'datum', 'object', 'components', 'encapsulation', 'allow', 'developer', 'present', 'consistent', 'usable', 'interface', 'independent', 'system', 'implement', 'internally', 'example', 'encapsulation', 'hide', 'value', 'state', 'structured', 'datum', 'object', 'inside', 'class', 'prevent', 'direct', 'access', 'client', 'way', 'expose', 'hidden', 'implementation', 'detail', 'violate', 'state', 'invariance', 'maintain', 'method']"
3645,"All object-oriented programming OOP systems support encapsulation, but encapsulation is not unique to OOP. Implementations of abstract data types, modules, and libraries, among other systems, also offer encapsulation. The similarity has been explained by programming language theorists in terms of existential types.2","['object', 'orient', 'programming', 'oop', 'system', 'support', 'encapsulation', 'encapsulation', 'unique', 'oop', 'implementation', 'abstract', 'datum', 'type', 'module', 'library', 'system', 'offer', 'encapsulation', 'similarity', 'explain', 'programming', 'language', 'theorist', 'term', 'existential', 'types']"
3646,"In object-oriented programming languages, and other related fields, encapsulation refers to one of two related but distinct notions, and sometimes to the combination thereof:34","['object', 'orient', 'programming', 'language', 'related', 'field', 'encapsulation', 'refer', 'related', 'distinct', 'notion', 'combination', 'thereof']"
3647,"Some programming language researchers and academics use the first meaning alone or in combination with the second as a distinguishing feature of object-oriented programming, while some programming languages that provide lexical closures view encapsulation as a feature of the language orthogonal to object orientation.","['programming', 'language', 'researcher', 'academic', 'use', 'meaning', 'combination', 'second', 'distinguish', 'feature', 'object', 'orient', 'programming', 'programming', 'language', 'provide', 'lexical', 'closure', 'view', 'encapsulation', 'feature', 'language', 'orthogonal', 'object', 'orientation']"
3648,"The second definition is motivated by the fact that in many object-oriented languages, and other related fields, the components are not hidden automatically and this can be overridden; thus, information hiding is defined as a separate notion by those who prefer the second definition.","['second', 'definition', 'motivate', 'fact', 'object', 'orient', 'language', 'related', 'field', 'component', 'hide', 'automatically', 'overridden', 'information', 'hiding', 'define', 'separate', 'notion', 'prefer', 'second', 'definition']"
3649,"The features of encapsulation are supported using classes in most object-oriented languages, although other alternatives also exist.","['feature', 'encapsulation', 'support', 'class', 'object', 'orient', 'language', 'alternative', 'exist']"
3650,"The authors of Design Patterns discuss the tension between inheritance and encapsulation at length and state that in their experience, designers overuse inheritance. They claim that inheritance often breaks encapsulation, given that inheritance exposes a subclass to the details of its parent's implementation.8 As described by the yo-yo problem, overuse of inheritance and therefore encapsulation, can become too complicated and hard to debug.","['author', 'design', 'patterns', 'discuss', 'tension', 'inheritance', 'encapsulation', 'length', 'state', 'experience', 'designer', 'overuse', 'inheritance', 'claim', 'inheritance', 'break', 'encapsulation', 'give', 'inheritance', 'expose', 'subclass', 'detail', 'parent', 'implementation', 'describe', 'problem', 'overuse', 'inheritance', 'encapsulation', 'complicated', 'hard', 'debug']"
3651,"Under the definition that encapsulation ""can be used to hide data members and member functions"", the internal representation of an object is generally hidden from view outside of the object's definition. Typically, only the object's own methods can directly inspect or manipulate its fields. Hiding the internals of the object protects its integrity by preventing users from setting the internal data of the component into an invalid or inconsistent state. A supposed benefit of encapsulation is that it can reduce system complexity, and thus increase robustness, by allowing the developer to limit the interdependencies between software components.citation needed","['definition', 'encapsulation', 'hide', 'data', 'member', 'member', 'function', 'internal', 'representation', 'object', 'generally', 'hide', 'view', 'outside', 'object', 'definition', 'typically', 'object', 'method', 'directly', 'inspect', 'manipulate', 'field', 'hide', 'internal', 'object', 'protect', 'integrity', 'prevent', 'user', 'set', 'internal', 'datum', 'component', 'invalid', 'inconsistent', 'state', 'supposed', 'benefit', 'encapsulation', 'reduce', 'system', 'complexity', 'increase', 'robustness', 'allow', 'developer', 'limit', 'interdependency', 'software', 'components.citation', 'need']"
3652,"Some languages like Smalltalk and Ruby only allow access via object methods, but most others e.g., C++, C#, Delphi or Java offer the programmer a degree of control over what is hidden, typically via keywords like public and private.6 ISO C++ standard refers to protected, private and public as ""access specifiers"" and that they do not ""hide any information"". Information hiding is accomplished by furnishing a compiled version of the source code that is interfaced via a header file.","['language', 'like', 'smalltalk', 'ruby', 'allow', 'access', 'object', 'method', 'e.g.', 'c++', 'delphi', 'java', 'offer', 'programmer', 'degree', 'control', 'hide', 'typically', 'keyword', 'like', 'public', 'private', 'iso', 'c++', 'standard', 'refer', 'protect', 'private', 'public', 'access', 'specifier', 'hide', 'information', 'information', 'hiding', 'accomplish', 'furnish', 'compile', 'version', 'source', 'code', 'interface', 'header', 'file']"
3653,"Almost always, there is a way to override such protection – usually via reflection API Ruby, Java, C#, etc., sometimes by mechanism like name mangling Python, or special keyword usage like friend in C++. Systems that provide object-level capability-based security adhering to the object-capability model are an exception, and guarantee strong encapsulation.","['way', 'override', 'protection', 'usually', 'reflection', 'api', 'ruby', 'java', 'etc', 'mechanism', 'like', 'mangle', 'python', 'special', 'keyword', 'usage', 'like', 'friend', 'c++', 'systems', 'provide', 'object', 'level', 'capability', 'base', 'security', 'adhere', 'object', 'capability', 'model', 'exception', 'guarantee', 'strong', 'encapsulation']"
3654,"Languages like C++, C#, Java, PHP, Swift, and Delphi offer ways to restrict access to data fields.","['language', 'like', 'c++', 'java', 'php', 'swift', 'delphi', 'offer', 'way', 'restrict', 'access', 'data', 'field']"
3655,Below is an example in C# that shows how access to a data field can be restricted through the use of a private keyword:,"['example', 'show', 'access', 'datum', 'field', 'restrict', 'use', 'private', 'keyword']"
3656,Below is an example in Java:,"['example', 'java']"
3657,"Encapsulation is also possible in non-object-oriented languages. In C, for example, a structure can be declared in the public API via the header file for a set of functions that operate on an item of data containing data members that are not accessible to clients of the API with the extern keyword.910","['encapsulation', 'possible', 'non', 'object', 'orient', 'language', 'example', 'structure', 'declare', 'public', 'api', 'header', 'file', 'set', 'function', 'operate', 'item', 'datum', 'contain', 'datum', 'member', 'accessible', 'client', 'api', 'extern', 'keyword']"
3658,"Clients call the API functions to allocate, operate on, and deallocate objects of an opaque data type. The contents of this type are known and accessible only to the implementation of the API functions; clients cannot directly access its contents. The source code for these functions defines the actual contents of the structure:","['client', 'api', 'function', 'allocate', 'operate', 'deallocate', 'object', 'opaque', 'datum', 'type', 'content', 'type', 'know', 'accessible', 'implementation', 'api', 'function', 'client', 'directly', 'access', 'content', 'source', 'code', 'function', 'define', 'actual', 'content', 'structure']"
3659,"Below is an example of Python, which does not support variable access restrictions. However, the convention is that a variable whose name is prefixed by an underscore should be considered private.11","['example', 'python', 'support', 'variable', 'access', 'restriction', 'convention', 'variable', 'prefix', 'underscore', 'consider', 'private']"
3660,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3661,"Object-oriented programming OOP is a programming paradigm based on the concept of ""objects"", which can contain data and code. The data is in the form of fields often known as attributes or properties, and the code is in the form of procedures often known as methods.","['object', 'orient', 'programming', 'oop', 'programming', 'paradigm', 'base', 'concept', 'object', 'contain', 'datum', 'code', 'data', 'form', 'field', 'know', 'attribute', 'property', 'code', 'form', 'procedure', 'know', 'method']"
3662,"A common feature of objects is that procedures or methods are attached to them and can access and modify the object's data fields. In this brand of OOP, there is usually a special name such as this or self used to refer to the current object. In OOP, computer programs are designed by making them out of objects that interact with one another.12 OOP languages are diverse, but the most popular ones are class-based, meaning that objects are instances of classes, which also determine their types.","['common', 'feature', 'object', 'procedure', 'method', 'attach', 'access', 'modify', 'object', 'datum', 'field', 'brand', 'oop', 'usually', 'special', 'self', 'refer', 'current', 'object', 'oop', 'computer', 'program', 'design', 'make', 'object', 'interact', 'another', 'oop', 'language', 'diverse', 'popular', 'one', 'class', 'base', 'mean', 'object', 'instance', 'class', 'determine', 'type']"
3663,"Many of the most widely used programming languages such as C++, Java, Python, etc. are multi-paradigm and they support object-oriented programming to a greater or lesser degree, typically in combination with imperative, procedural programming.","['widely', 'programming', 'language', 'c++', 'java', 'python', 'etc', 'multi', 'paradigm', 'support', 'object', 'orient', 'programming', 'great', 'less', 'degree', 'typically', 'combination', 'imperative', 'procedural', 'programming']"
3664,"Significant object-oriented languages include: Ada, ActionScript, C++, Common Lisp, C#, Dart, Eiffel, Fortran 2003, Haxe, Java, JavaScript, Kotlin, logo, MATLAB, Objective-C, Object Pascal, Perl, PHP, Python, R, Raku, Ruby, Scala, SIMSCRIPT, Simula, Smalltalk, Swift, Vala and Visual Basic.NET.","['significant', 'object', 'orient', 'language', 'include', 'ada', 'actionscript', 'c++', 'common', 'lisp', 'dart', 'eiffel', 'fortran', '2003', 'haxe', 'java', 'javascript', 'kotlin', 'logo', 'matlab', 'objective', 'object', 'pascal', 'perl', 'php', 'python', 'raku', 'ruby', 'scala', 'simscript', 'simula', 'smalltalk', 'swift', 'vala', 'visual', 'basic', 'net']"
3665,"Terminology invoking ""objects"" and ""oriented"" in the modern sense of object-oriented programming made its first appearance at MIT in the late 1950s and early 1960s. In the environment of the artificial intelligence group, as early as 1960, ""object"" could refer to identified items LISP atoms with properties attributes;34 Alan Kay later cited a detailed understanding of LISP internals as a strong influence on his thinking in 1966.5","['terminology', 'invoke', 'object', 'orient', 'modern', 'sense', 'object', 'orient', 'programming', 'appearance', 'mit', 'late', '1950', 'early', '1960', 'environment', 'artificial', 'intelligence', 'group', 'early', '1960', 'object', 'refer', 'identify', 'item', 'lisp', 'atom', 'property', 'attributes', 'alan', 'kay', 'later', 'cite', 'detailed', 'understanding', 'lisp', 'internal', 'strong', 'influence', 'thinking', '1966']"
3666,"I thought of objects being like biological cells and/or individual computers on a network, only able to communicate with messages so messaging came at the very beginning – it took a while to see how to do messaging in a programming language efficiently enough to be useful.","['think', 'object', 'like', 'biological', 'cell', 'individual', 'computer', 'network', 'able', 'communicate', 'message', 'messaging', 'come', 'beginning', 'take', 'message', 'programming', 'language', 'efficiently', 'useful']"
3667,"Another early MIT example was Sketchpad created by Ivan Sutherland in 1960–1961; in the glossary of the 1963 technical report based on his dissertation about Sketchpad, Sutherland defined notions of ""object"" and ""instance"" with the class concept covered by ""master"" or ""definition"", albeit specialized to graphical interaction.6 Also, an MIT ALGOL version, AED-0, established a direct link between data structures ""plexes"", in that dialect and procedures, prefiguring what were later termed ""messages"", ""methods"", and ""member functions"".78","['early', 'mit', 'example', 'sketchpad', 'create', 'ivan', 'sutherland', '1960–1961', 'glossary', '1963', 'technical', 'report', 'base', 'dissertation', 'sketchpad', 'sutherland', 'define', 'notion', 'object', 'instance', 'class', 'concept', 'cover', 'master', 'definition', 'albeit', 'specialize', 'graphical', 'interaction', 'mit', 'algol', 'version', 'aed-0', 'establish', 'direct', 'link', 'data', 'structure', 'plexe', 'dialect', 'procedure', 'prefigure', 'later', 'term', 'message', 'method', 'member', 'functions']"
3668,"Simula introduced important concepts that are today an essential part of object-oriented programming, such as class and object, inheritance, and dynamic binding.9 The object-oriented Simula programming language was used mainly by researchers involved with physical modelling, such as models to study and improve the movement of ships and their content through cargo ports.9","['simula', 'introduce', 'important', 'concept', 'today', 'essential', 'object', 'orient', 'programming', 'class', 'object', 'inheritance', 'dynamic', 'binding', 'object', 'orient', 'simula', 'programming', 'language', 'mainly', 'researcher', 'involve', 'physical', 'modelling', 'model', 'study', 'improve', 'movement', 'ship', 'content', 'cargo', 'ports']"
3669,"In the 1970s, the first version of the Smalltalk programming language was developed at Xerox PARC by Alan Kay, Dan Ingalls and Adele Goldberg. Smalltalk-72 included a programming environment and was dynamically typed, and at first was interpreted, not compiled. Smalltalk became noted for its application of object orientation at the language-level and its graphical development environment. Smalltalk went through various versions and interest in the language grew.10 While Smalltalk was influenced by the ideas introduced in Simula 67 it was designed to be a fully dynamic system in which classes could be created and modified dynamically.11","['1970', 'version', 'smalltalk', 'programming', 'language', 'develop', 'xerox', 'parc', 'alan', 'kay', 'dan', 'ingalls', 'adele', 'goldberg', 'smalltalk-72', 'include', 'programming', 'environment', 'dynamically', 'type', 'interpret', 'compile', 'smalltalk', 'note', 'application', 'object', 'orientation', 'language', 'level', 'graphical', 'development', 'environment', 'smalltalk', 'go', 'version', 'interest', 'language', 'grew', 'smalltalk', 'influence', 'idea', 'introduce', 'simula', 'design', 'fully', 'dynamic', 'system', 'class', 'create', 'modify', 'dynamically']"
3670,"In the 1970s, Smalltalk influenced the Lisp community to incorporate object-based techniques that were introduced to developers via the Lisp machine. Experimentation with various extensions to Lisp such as LOOPS and Flavors introducing multiple inheritance and mixins eventually led to the Common Lisp Object System, which integrates functional programming and object-oriented programming and allows extension via a Meta-object protocol. In the 1980s, there were a few attempts to design processor architectures that included hardware support for objects in memory but these were not successful. Examples include the Intel iAPX 432 and the Linn Smart Rekursiv.","['1970', 'smalltalk', 'influence', 'lisp', 'community', 'incorporate', 'object', 'base', 'technique', 'introduce', 'developer', 'lisp', 'machine', 'experimentation', 'extension', 'lisp', 'loops', 'flavors', 'introduce', 'multiple', 'inheritance', 'mixin', 'eventually', 'lead', 'common', 'lisp', 'object', 'system', 'integrate', 'functional', 'programming', 'object', 'orient', 'programming', 'allow', 'extension', 'meta', 'object', 'protocol', '1980', 'attempt', 'design', 'processor', 'architecture', 'include', 'hardware', 'support', 'object', 'memory', 'successful', 'example', 'include', 'intel', 'iapx', '432', 'linn', 'smart', 'rekursiv']"
3671,"In 1981, Goldberg edited the August issue of Byte Magazine, introducing Smalltalk and object-oriented programming to a wider audience. In 1986, the Association for Computing Machinery organised the first Conference on Object-Oriented Programming, Systems, Languages, and Applications OOPSLA, which was unexpectedly attended by 1,000 people. In the mid-1980s Objective-C was developed by Brad Cox, who had used Smalltalk at ITT Inc., and Bjarne Stroustrup, who had used Simula for his PhD thesis, eventually went to create the object-oriented C++.10 In 1985, Bertrand Meyer also produced the first design of the Eiffel language. Focused on software quality, Eiffel is a purely object-oriented programming language and a notation supporting the entire software lifecycle. Meyer described the Eiffel software development method, based on a small number of key ideas from software engineering and computer science, in Object-Oriented Software Construction. Essential to the quality focus of Eiffel is Meyer's reliability mechanism, Design by Contract, which is an integral part of both the method and language.","['1981', 'goldberg', 'edit', 'august', 'issue', 'byte', 'magazine', 'introduce', 'smalltalk', 'object', 'orient', 'programming', 'wide', 'audience', '1986', 'association', 'computing', 'machinery', 'organise', 'conference', 'object', 'orient', 'programming', 'systems', 'languages', 'applications', 'oopsla', 'unexpectedly', 'attend', '1', 'people', 'mid-1980', 'objective', 'develop', 'brad', 'cox', 'smalltalk', 'itt', 'inc.', 'bjarne', 'stroustrup', 'simula', 'phd', 'thesis', 'eventually', 'go', 'create', 'object', 'orient', 'c++', '1985', 'bertrand', 'meyer', 'produce', 'design', 'eiffel', 'language', 'focus', 'software', 'quality', 'eiffel', 'purely', 'object', 'orient', 'programming', 'language', 'notation', 'support', 'entire', 'software', 'lifecycle', 'meyer', 'describe', 'eiffel', 'software', 'development', 'method', 'base', 'small', 'number', 'key', 'idea', 'software', 'engineering', 'computer', 'science', 'object', 'orient', 'software', 'construction', 'essential', 'quality', 'focus', 'eiffel', 'meyer', 'reliability', 'mechanism', 'design', 'contract', 'integral', 'method', 'language']"
3672,"In the early and mid-1990s object-oriented programming developed as the dominant programming paradigm when programming languages supporting the techniques became widely available. These included Visual FoxPro 3.0,121314 C++,15 and Delphicitation needed. Its dominance was further enhanced by the rising popularity of graphical user interfaces, which rely heavily upon object-oriented programming techniques. An example of a closely related dynamic GUI library and OOP language can be found in the Cocoa frameworks on Mac OS X, written in Objective-C, an object-oriented, dynamic messaging extension to C based on Smalltalk. OOP toolkits also enhanced the popularity of event-driven programming although this concept is not limited to OOP.","['early', 'mid-1990', 'object', 'orient', 'programming', 'develop', 'dominant', 'programming', 'paradigm', 'programming', 'language', 'support', 'technique', 'widely', 'available', 'include', 'visual', 'foxpro', '3', 'c++', 'delphicitation', 'need', 'dominance', 'enhance', 'rise', 'popularity', 'graphical', 'user', 'interface', 'rely', 'heavily', 'object', 'orient', 'programming', 'technique', 'example', 'closely', 'relate', 'dynamic', 'gui', 'library', 'oop', 'language', 'find', 'cocoa', 'framework', 'mac', 'write', 'objective', 'object', 'orient', 'dynamic', 'messaging', 'extension', 'base', 'smalltalk', 'oop', 'toolkit', 'enhance', 'popularity', 'event', 'drive', 'programming', 'concept', 'limit', 'oop']"
3673,"At ETH Zürich, Niklaus Wirth and his colleagues had also been investigating such topics as data abstraction and modular programming although this had been in common use in the 1960s or earlier. Modula-2 1978 included both, and their succeeding design, Oberon, included a distinctive approach to object orientation, classes, and such.","['eth', 'zürich', 'niklaus', 'wirth', 'colleague', 'investigate', 'topic', 'data', 'abstraction', 'modular', 'programming', 'common', 'use', '1960', 'early', 'modula-2', '1978', 'include', 'succeed', 'design', 'oberon', 'include', 'distinctive', 'approach', 'object', 'orientation', 'class']"
3674,"Object-oriented features have been added to many previously existing languages, including Ada, BASIC, Fortran, Pascal, and COBOL. Adding these features to languages that were not initially designed for them often led to problems with compatibility and maintainability of code.","['object', 'orient', 'feature', 'add', 'previously', 'exist', 'language', 'include', 'ada', 'basic', 'fortran', 'pascal', 'cobol', 'add', 'feature', 'language', 'initially', 'design', 'lead', 'problem', 'compatibility', 'maintainability', 'code']"
3675,"More recently, a number of languages have emerged that are primarily object-oriented, but that are also compatible with procedural methodology. Two such languages are Python and Ruby. Probably the most commercially important recent object-oriented languages are Java, developed by Sun Microsystems, as well as C# and Visual Basic.NET VB.NET, both designed for Microsoft's .NET platform. Each of these two frameworks shows, in its own way, the benefit of using OOP by creating an abstraction from implementation. VB.NET and C# support cross-language inheritance, allowing classes defined in one language to subclass classes defined in the other language.","['recently', 'number', 'language', 'emerge', 'primarily', 'object', 'orient', 'compatible', 'procedural', 'methodology', 'language', 'python', 'ruby', 'probably', 'commercially', 'important', 'recent', 'object', 'orient', 'language', 'java', 'develop', 'sun', 'microsystems', 'visual', 'basic', 'net', 'vb.net', 'design', 'microsoft', '.net', 'platform', 'framework', 'show', 'way', 'benefit', 'oop', 'create', 'abstraction', 'implementation', 'vb.net', 'support', 'cross', 'language', 'inheritance', 'allow', 'class', 'define', 'language', 'subclass', 'class', 'define', 'language']"
3676,"Object-oriented programming uses objects, but not all of the associated techniques and structures are supported directly in languages that claim to support OOP. It performs operations on operands. The features listed below are common among languages considered to be strongly class- and object-oriented or multi-paradigm with OOP support, with notable exceptions mentioned.16171819","['object', 'orient', 'programming', 'use', 'object', 'associate', 'technique', 'structure', 'support', 'directly', 'language', 'claim', 'support', 'oop', 'perform', 'operation', 'operand', 'feature', 'list', 'common', 'language', 'consider', 'strongly', 'class-', 'object', 'orient', 'multi', 'paradigm', 'oop', 'support', 'notable', 'exception', 'mentioned']"
3677,Modular programming support provides the ability to group procedures into files and modules for organizational purposes. Modules are namespaced so identifiers in one module will not conflict with a procedure or variable sharing the same name in another file or module.,"['modular', 'programming', 'support', 'provide', 'ability', 'group', 'procedure', 'file', 'module', 'organizational', 'purpose', 'module', 'namespace', 'identifier', 'module', 'conflict', 'procedure', 'variable', 'sharing', 'file', 'module']"
3678,Languages that support object-oriented programming OOP typically use inheritance for code reuse and extensibility in the form of either classes or prototypes. Those that use classes support two main concepts:,"['language', 'support', 'object', 'orient', 'programming', 'oop', 'typically', 'use', 'inheritance', 'code', 'reuse', 'extensibility', 'form', 'class', 'prototype', 'use', 'class', 'support', 'main', 'concept']"
3679,"Objects sometimes correspond to things found in the real world. For example, a graphics program may have objects such as ""circle"", ""square"", ""menu"". An online shopping system might have objects such as ""shopping cart"", ""customer"", and ""product"".20 Sometimes objects represent more abstract entities, like an object that represents an open file, or an object that provides the service of translating measurements from U.S. customary to metric.","['object', 'correspond', 'thing', 'find', 'real', 'world', 'example', 'graphic', 'program', 'object', 'circle', 'square', 'menu', 'online', 'shopping', 'system', 'object', 'shop', 'cart', 'customer', 'product', 'object', 'represent', 'abstract', 'entity', 'like', 'object', 'represent', 'open', 'file', 'object', 'provide', 'service', 'translate', 'measurement', 'u.s.', 'customary', 'metric']"
3680,"Each object is said to be an instance of a particular class for example, an object with its name field set to ""Mary"" might be an instance of class Employee. Procedures in object-oriented programming are known as methods; variables are also known as fields, members, attributes, or properties. This leads to the following terms:","['object', 'say', 'instance', 'particular', 'class', 'example', 'object', 'field', 'set', 'mary', 'instance', 'class', 'employee', 'procedure', 'object', 'orient', 'programming', 'know', 'method', 'variable', 'know', 'field', 'member', 'attribute', 'property', 'lead', 'follow', 'term']"
3681,"Objects are accessed somewhat like variables with complex internal structure, and in many languages are effectively pointers, serving as actual references to a single instance of said object in memory within a heap or stack. They provide a layer of abstraction which can be used to separate internal from external code. External code can use an object by calling a specific instance method with a certain set of input parameters, read an instance variable, or write to an instance variable. Objects are created by calling a special type of method in the class known as a constructor. A program may create many instances of the same class as it runs, which operate independently. This is an easy way for the same procedures to be used on different sets of data.","['object', 'access', 'somewhat', 'like', 'variable', 'complex', 'internal', 'structure', 'language', 'effectively', 'pointer', 'serve', 'actual', 'reference', 'single', 'instance', 'say', 'object', 'memory', 'heap', 'stack', 'provide', 'layer', 'abstraction', 'separate', 'internal', 'external', 'code', 'external', 'code', 'use', 'object', 'call', 'specific', 'instance', 'method', 'certain', 'set', 'input', 'parameter', 'read', 'instance', 'variable', 'write', 'instance', 'variable', 'object', 'create', 'call', 'special', 'type', 'method', 'class', 'know', 'constructor', 'program', 'create', 'instance', 'class', 'run', 'operate', 'independently', 'easy', 'way', 'procedure', 'different', 'set', 'datum']"
3682,"Object-oriented programming that uses classes is sometimes called class-based programming, while prototype-based programming does not typically use classes. As a result, significantly different yet analogous terminology is used to define the concepts of object and instance.","['object', 'orient', 'programming', 'use', 'class', 'call', 'class', 'base', 'programming', 'prototype', 'base', 'programming', 'typically', 'use', 'class', 'result', 'significantly', 'different', 'analogous', 'terminology', 'define', 'concept', 'object', 'instance']"
3683,In some languages classes and objects can be composed using other concepts like traits and mixins.,"['language', 'class', 'object', 'compose', 'concept', 'like', 'trait', 'mixin']"
3684,"In class-based languages the classes are defined beforehand and the objects are instantiated based on the classes. If two objects apple and orange are instantiated from the class Fruit, they are inherently fruits and it is guaranteed that you may handle them in the same way; e.g. a programmer can expect the existence of the same attributes such as color or sugar_content or is_ripe.","['class', 'base', 'language', 'class', 'define', 'object', 'instantiate', 'base', 'class', 'object', 'apple', 'orange', 'instantiate', 'class', 'fruit', 'inherently', 'fruit', 'guarantee', 'handle', 'way', 'e.g.', 'programmer', 'expect', 'existence', 'attribute', 'color', 'sugar_content', 'is_ripe']"
3685,"In prototype-based languages the objects are the primary entities. No classes even exist. The prototype of an object is just another object to which the object is linked. Every object has one prototype link and only one. New objects can be created based on already existing objects chosen as their prototype. You may call two different objects apple and orange a fruit, if the object fruit exists, and both apple and orange have fruit as their prototype. The idea of the fruit class doesn't exist explicitly, but as the equivalence class of the objects sharing the same prototype. The attributes and methods of the prototype are delegated to all the objects of the equivalence class defined by this prototype. The attributes and methods owned individually by the object may not be shared by other objects of the same equivalence class; e.g. the attribute sugar_content may be unexpectedly not present in apple. Only single inheritance can be implemented through the prototype.","['prototype', 'base', 'language', 'object', 'primary', 'entity', 'class', 'exist', 'prototype', 'object', 'object', 'object', 'link', 'object', 'prototype', 'link', 'new', 'object', 'create', 'base', 'exist', 'object', 'choose', 'prototype', 'different', 'object', 'apple', 'orange', 'fruit', 'object', 'fruit', 'exist', 'apple', 'orange', 'fruit', 'prototype', 'idea', 'fruit', 'class', 'exist', 'explicitly', 'equivalence', 'class', 'object', 'share', 'prototype', 'attribute', 'method', 'prototype', 'delegate', 'object', 'equivalence', 'class', 'define', 'prototype', 'attribute', 'method', 'own', 'individually', 'object', 'share', 'object', 'equivalence', 'class', 'e.g.', 'attribute', 'sugar_content', 'unexpectedly', 'present', 'apple', 'single', 'inheritance', 'implement', 'prototype']"
3686,"It is the responsibility of the object, not any external code, to select the procedural code to execute in response to a method call, typically by looking up the method at run time in a table associated with the object. This feature is known as dynamic dispatch. If the call variability relies on more than the single type of the object on which it is called i.e. at least one other parameter object is involved in the method choice, one speaks of multiple dispatch.","['responsibility', 'object', 'external', 'code', 'select', 'procedural', 'code', 'execute', 'response', 'method', 'typically', 'look', 'method', 'run', 'time', 'table', 'associate', 'object', 'feature', 'know', 'dynamic', 'dispatch', 'variability', 'rely', 'single', 'type', 'object', 'call', 'i.e.', 'parameter', 'object', 'involve', 'method', 'choice', 'speak', 'multiple', 'dispatch']"
3687,A method call is also known as message passing. It is conceptualized as a message the name of the method and its input parameters being passed to the object for dispatch.,"['method', 'know', 'message', 'pass', 'conceptualize', 'message', 'method', 'input', 'parameter', 'pass', 'object', 'dispatch']"
3688,"Data Abstraction is a design pattern in which data are visible only to semantically related functions, so as to prevent misuse. The success of data abstraction leads to frequent incorporation of data hiding as a design principle in object oriented and pure functional programming.","['datum', 'abstraction', 'design', 'pattern', 'datum', 'visible', 'semantically', 'relate', 'function', 'prevent', 'misuse', 'success', 'data', 'abstraction', 'lead', 'frequent', 'incorporation', 'datum', 'hide', 'design', 'principle', 'object', 'orient', 'pure', 'functional', 'programming']"
3689,"If a class does not allow calling code to access internal object data and permits access through methods only, this is a form of information hiding known as abstraction. Some languages Java, for example let classes enforce access restrictions explicitly, for example denoting internal data with the private keyword and designating methods intended for use by code outside the class with the public keyword. Methods may also be designed public, private, or intermediate levels such as protected which allows access from the same class and its subclasses, but not objects of a different class. In other languages like Python this is enforced only by convention for example, private methods may have names that start with an underscore. In C#, Swift & Kotlin languages, internal keyword permits access only to files present in same assembly, package or module as that of the class.21","['class', 'allow', 'call', 'code', 'access', 'internal', 'object', 'datum', 'permit', 'access', 'method', 'form', 'information', 'hiding', 'know', 'abstraction', 'language', 'java', 'example', 'let', 'class', 'enforce', 'access', 'restriction', 'explicitly', 'example', 'denote', 'internal', 'datum', 'private', 'keyword', 'designate', 'method', 'intend', 'use', 'code', 'outside', 'class', 'public', 'keyword', 'method', 'design', 'public', 'private', 'intermediate', 'level', 'protect', 'allow', 'access', 'class', 'subclass', 'object', 'different', 'class', 'language', 'like', 'python', 'enforce', 'convention', 'example', 'private', 'method', 'name', 'start', 'underscore', 'swift', 'kotlin', 'language', 'internal', 'keyword', 'permit', 'access', 'file', 'present', 'assembly', 'package', 'module', 'class']"
3690,"Encapsulation prevents external code from being concerned with the internal workings of an object. This facilitates code refactoring, for example allowing the author of the class to change how objects of that class represent their data internally without changing any external code as long as ""public"" method calls work the same way. It also encourages programmers to put all the code that is concerned with a certain set of data in the same class, which organizes it for easy comprehension by other programmers. Encapsulation is a technique that encourages decoupling.","['encapsulation', 'prevent', 'external', 'code', 'concern', 'internal', 'working', 'object', 'facilitate', 'code', 'refactoring', 'example', 'allow', 'author', 'class', 'change', 'object', 'class', 'represent', 'datum', 'internally', 'change', 'external', 'code', 'long', 'public', 'method', 'call', 'work', 'way', 'encourage', 'programmer', 'code', 'concern', 'certain', 'set', 'datum', 'class', 'organize', 'easy', 'comprehension', 'programmer', 'encapsulation', 'technique', 'encourage', 'decouple']"
3691,"Objects can contain other objects in their instance variables; this is known as object composition. For example, an object in the Employee class might contain either directly or through a pointer an object in the Address class, in addition to its own instance variables like ""first_name"" and ""position"". Object composition is used to represent ""has-a"" relationships: every employee has an address, so every Employee object has access to a place to store an Address object either directly embedded within itself, or at a separate location addressed via a pointer.","['object', 'contain', 'object', 'instance', 'variable', 'know', 'object', 'composition', 'example', 'object', 'employee', 'class', 'contain', 'directly', 'pointer', 'object', 'address', 'class', 'addition', 'instance', 'variable', 'like', 'first_name', 'position', 'object', 'composition', 'represent', 'relationship', 'employee', 'address', 'employee', 'object', 'access', 'place', 'store', 'address', 'object', 'directly', 'embed', 'separate', 'location', 'address', 'pointer']"
3692,"Languages that support classes almost always support inheritance. This allows classes to be arranged in a hierarchy that represents ""is-a-type-of"" relationships. For example, class Employee might inherit from class Person. All the data and methods available to the parent class also appear in the child class with the same names. For example, class Person might define variables ""first_name"" and ""last_name"" with method ""make_full_name"". These will also be available in class Employee, which might add the variables ""position"" and ""salary"". This technique allows easy re-use of the same procedures and data definitions, in addition to potentially mirroring real-world relationships in an intuitive way. Rather than utilizing database tables and programming subroutines, the developer utilizes objects the user may be more familiar with: objects from their application domain.22","['language', 'support', 'class', 'support', 'inheritance', 'allow', 'class', 'arrange', 'hierarchy', 'represent', 'type', 'relationship', 'example', 'class', 'employee', 'inherit', 'class', 'person', 'datum', 'method', 'available', 'parent', 'class', 'appear', 'child', 'class', 'name', 'example', 'class', 'person', 'define', 'variable', 'first_name', 'last_name', 'method', 'make_full_name', 'available', 'class', 'employee', 'add', 'variable', 'position', 'salary', 'technique', 'allow', 'easy', 'use', 'procedure', 'data', 'definition', 'addition', 'potentially', 'mirror', 'real', 'world', 'relationship', 'intuitive', 'way', 'utilize', 'database', 'table', 'programming', 'subroutine', 'developer', 'utilize', 'object', 'user', 'familiar', 'object', 'application', 'domain']"
3693,"Subclasses can override the methods defined by superclasses. Multiple inheritance is allowed in some languages, though this can make resolving overrides complicated. Some languages have special support for mixins, though in any language with multiple inheritance, a mixin is simply a class that does not represent an is-a-type-of relationship. Mixins are typically used to add the same methods to multiple classes. For example, class UnicodeConversionMixin might provide a method unicode_to_ascii when included in class FileReader and class WebPageScraper, which don't share a common parent.","['subclass', 'override', 'method', 'define', 'superclass', 'multiple', 'inheritance', 'allow', 'language', 'resolve', 'override', 'complicated', 'language', 'special', 'support', 'mixin', 'language', 'multiple', 'inheritance', 'mixin', 'simply', 'class', 'represent', 'type', 'relationship', 'mixin', 'typically', 'add', 'method', 'multiple', 'class', 'example', 'class', 'unicodeconversionmixin', 'provide', 'method', 'unicode_to_ascii', 'include', 'class', 'filereader', 'class', 'webpagescraper', 'share', 'common', 'parent']"
3694,"Abstract classes cannot be instantiated into objects; they exist only for the purpose of inheritance into other ""concrete"" classes that can be instantiated. In Java, the final keyword can be used to prevent a class from being subclassed.","['abstract', 'class', 'instantiate', 'object', 'exist', 'purpose', 'inheritance', 'concrete', 'class', 'instantiate', 'java', 'final', 'keyword', 'prevent', 'class', 'subclasse']"
3695,"The doctrine of composition over inheritance advocates implementing has-a relationships using composition instead of inheritance. For example, instead of inheriting from class Person, class Employee could give each Employee object an internal Person object, which it then has the opportunity to hide from external code even if class Person has many public attributes or methods. Some languages, like Go do not support inheritance at all.","['doctrine', 'composition', 'inheritance', 'advocate', 'implement', 'relationship', 'composition', 'instead', 'inheritance', 'example', 'instead', 'inherit', 'class', 'person', 'class', 'employee', 'employee', 'object', 'internal', 'person', 'object', 'opportunity', 'hide', 'external', 'code', 'class', 'person', 'public', 'attribute', 'method', 'language', 'like', 'support', 'inheritance']"
3696,"The ""open/closed principle"" advocates that classes and functions ""should be open for extension, but closed for modification"".","['open', 'closed', 'principle', 'advocate', 'class', 'function', 'open', 'extension', 'close', 'modification']"
3697,Delegation is another language feature that can be used as an alternative to inheritance.,"['delegation', 'language', 'feature', 'alternative', 'inheritance']"
3698,"Subtyping – a form of polymorphism – is when calling code can be independent of which class in the supported hierarchy it is operating on – the parent class or one of its descendants. Meanwhile, the same operation name among objects in an inheritance hierarchy may behave differently.","['subtype', 'form', 'polymorphism', 'call', 'code', 'independent', 'class', 'support', 'hierarchy', 'operate', 'parent', 'class', 'descendant', 'operation', 'object', 'inheritance', 'hierarchy', 'behave', 'differently']"
3699,"For example, objects of type Circle and Square are derived from a common class called Shape. The Draw function for each type of Shape implements what is necessary to draw itself while calling code can remain indifferent to the particular type of Shape being drawn.","['example', 'object', 'type', 'circle', 'square', 'derive', 'common', 'class', 'call', 'shape', 'draw', 'function', 'type', 'shape', 'implement', 'necessary', 'draw', 'call', 'code', 'remain', 'indifferent', 'particular', 'type', 'shape', 'draw']"
3700,This is another type of abstraction that simplifies code external to the class hierarchy and enables strong separation of concerns.,"['type', 'abstraction', 'simplifie', 'code', 'external', 'class', 'hierarchy', 'enable', 'strong', 'separation', 'concern']"
3701,"In languages that support open recursion, object methods can call other methods on the same object including themselves, typically using a special variable or keyword called this or self. This variable is late-bound; it allows a method defined in one class to invoke another method that is defined later, in some subclass thereof.","['language', 'support', 'open', 'recursion', 'object', 'method', 'method', 'object', 'include', 'typically', 'special', 'variable', 'keyword', 'call', 'self', 'variable', 'late', 'bind', 'allow', 'method', 'define', 'class', 'invoke', 'method', 'define', 'later', 'subclass', 'thereof']"
3702,"Simula 1967 is generally accepted as being the first language with the primary features of an object-oriented language. It was created for making simulation programs, in which what came to be called objects were the most important information representation. Smalltalk 1972 to 1980 is another early example, and the one with which much of the theory of OOP was developed. Concerning the degree of object orientation, the following distinctions can be made:","['simula', '1967', 'generally', 'accept', 'language', 'primary', 'feature', 'object', 'orient', 'language', 'create', 'make', 'simulation', 'program', 'come', 'call', 'object', 'important', 'information', 'representation', 'smalltalk', '1972', '1980', 'early', 'example', 'theory', 'oop', 'develop', 'concern', 'degree', 'object', 'orientation', 'following', 'distinction']"
3703,"In recent years, object-oriented programming has become especially popular in dynamic programming languages. Python, PowerShell, Ruby and Groovy are dynamic languages built on OOP principles, while Perl and PHP have been adding object-oriented features since Perl 5 and PHP 4, and ColdFusion since version 6.","['recent', 'year', 'object', 'orient', 'programming', 'especially', 'popular', 'dynamic', 'programming', 'language', 'python', 'powershell', 'ruby', 'groovy', 'dynamic', 'language', 'build', 'oop', 'principle', 'perl', 'php', 'add', 'object', 'orient', 'feature', 'perl', 'php', 'coldfusion', 'version']"
3704,"The Document Object Model of HTML, XHTML, and XML documents on the Internet has bindings to the popular JavaScript/ECMAScript language. JavaScript is perhaps the best known prototype-based programming language, which employs cloning from prototypes rather than inheriting from a class contrast to class-based programming. Another scripting language that takes this approach is Lua.","['document', 'object', 'model', 'html', 'xhtml', 'xml', 'document', 'internet', 'binding', 'popular', 'javascript', 'ecmascript', 'language', 'javascript', 'well', 'know', 'prototype', 'base', 'programming', 'language', 'employ', 'clone', 'prototype', 'inherit', 'class', 'contrast', 'class', 'base', 'programming', 'scripting', 'language', 'take', 'approach', 'lua']"
3705,"The messages that flow between computers to request services in a client-server environment can be designed as the linearizations of objects defined by class objects known to both the client and the server. For example, a simple linearized object would consist of a length field, a code point identifying the class, and a data value. A more complex example would be a command consisting of the length and code point of the command and values consisting of linearized objects representing the command's parameters. Each such command must be directed by the server to an object whose class or superclass recognizes the command and is able to provide the requested service. Clients and servers are best modeled as complex object-oriented structures. Distributed Data Management Architecture DDM took this approach and used class objects to define objects at four levels of a formal hierarchy:","['message', 'flow', 'computer', 'request', 'service', 'client', 'server', 'environment', 'design', 'linearization', 'object', 'define', 'class', 'object', 'know', 'client', 'server', 'example', 'simple', 'linearize', 'object', 'consist', 'length', 'field', 'code', 'point', 'identify', 'class', 'data', 'value', 'complex', 'example', 'command', 'consist', 'length', 'code', 'point', 'command', 'value', 'consist', 'linearize', 'object', 'represent', 'command', 'parameter', 'command', 'direct', 'server', 'object', 'class', 'superclass', 'recognize', 'command', 'able', 'provide', 'request', 'service', 'client', 'server', 'well', 'model', 'complex', 'object', 'orient', 'structure', 'distribute', 'data', 'management', 'architecture', 'ddm', 'take', 'approach', 'class', 'object', 'define', 'object', 'level', 'formal', 'hierarchy']"
3706,The initial version of DDM defined distributed file services. It was later extended to be the foundation of Distributed Relational Database Architecture DRDA.,"['initial', 'version', 'ddm', 'define', 'distribute', 'file', 'service', 'later', 'extended', 'foundation', 'distributed', 'relational', 'database', 'architecture', 'drda']"
3707,"Challenges of object-oriented design are addressed by several approaches. Most common is known as the design patterns codified by Gamma et al.. More broadly, the term ""design patterns"" can be used to refer to any general, repeatable, solution pattern to a commonly occurring problem in software design. Some of these commonly occurring problems have implications and solutions particular to object-oriented development.","['challenge', 'object', 'orient', 'design', 'address', 'approach', 'common', 'know', 'design', 'pattern', 'codify', 'gamma', 'broadly', 'term', 'design', 'pattern', 'refer', 'general', 'repeatable', 'solution', 'pattern', 'commonly', 'occur', 'problem', 'software', 'design', 'commonly', 'occur', 'problem', 'implication', 'solution', 'particular', 'object', 'orient', 'development']"
3708,"It is intuitive to assume that inheritance creates a semantic ""is a"" relationship, and thus to infer that objects instantiated from subclasses can always be safely used instead of those instantiated from the superclass. This intuition is unfortunately false in most OOP languages, in particular in all those that allow mutable objects. Subtype polymorphism as enforced by the type checker in OOP languages with mutable objects cannot guarantee behavioral subtyping in any context. Behavioral subtyping is undecidable in general, so it cannot be implemented by a program compiler. Class or object hierarchies must be carefully designed, considering possible incorrect uses that cannot be detected syntactically. This issue is known as the Liskov substitution principle.","['intuitive', 'assume', 'inheritance', 'create', 'semantic', 'relationship', 'infer', 'object', 'instantiate', 'subclass', 'safely', 'instead', 'instantiate', 'superclass', 'intuition', 'unfortunately', 'false', 'oop', 'language', 'particular', 'allow', 'mutable', 'object', 'subtype', 'polymorphism', 'enforce', 'type', 'checker', 'oop', 'language', 'mutable', 'object', 'guarantee', 'behavioral', 'subtype', 'context', 'behavioral', 'subtype', 'undecidable', 'general', 'implement', 'program', 'compiler', 'class', 'object', 'hierarchy', 'carefully', 'design', 'consider', 'possible', 'incorrect', 'use', 'detect', 'syntactically', 'issue', 'know', 'liskov', 'substitution', 'principle']"
3709,"Design Patterns: Elements of Reusable Object-Oriented Software is an influential book published in 1994 by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, often referred to humorously as the ""Gang of Four"". Along with exploring the capabilities and pitfalls of object-oriented programming, it describes 23 common programming problems and patterns for solving them. As of April 2007, the book was in its 36th printing.","['design', 'patterns', 'element', 'reusable', 'object', 'orient', 'software', 'influential', 'book', 'publish', '1994', 'erich', 'gamma', 'richard', 'helm', 'ralph', 'johnson', 'john', 'vlissides', 'refer', 'humorously', 'gang', 'explore', 'capability', 'pitfall', 'object', 'orient', 'programming', 'describe', 'common', 'programming', 'problem', 'pattern', 'solve', 'april', '2007', 'book', '36th', 'printing']"
3710,The book describes the following patterns:,"['book', 'describe', 'following', 'pattern']"
3711,"Both object-oriented programming and relational database management systems RDBMSs are extremely common in software todayupdate. Since relational databases don't store objects directly though some RDBMSs have object-oriented features to approximate this, there is a general need to bridge the two worlds. The problem of bridging object-oriented programming accesses and data patterns with relational databases is known as object-relational impedance mismatch. There are a number of approaches to cope with this problem, but no general solution without downsides.24 One of the most common approaches is object-relational mapping, as found in IDE languages such as Visual FoxPro and libraries such as Java Data Objects and Ruby on Rails' ActiveRecord.","['object', 'orient', 'programming', 'relational', 'database', 'management', 'system', 'rdbms', 'extremely', 'common', 'software', 'todayupdate', 'relational', 'database', 'store', 'object', 'directly', 'rdbms', 'object', 'orient', 'feature', 'approximate', 'general', 'need', 'bridge', 'world', 'problem', 'bridge', 'object', 'orient', 'programming', 'access', 'datum', 'pattern', 'relational', 'database', 'know', 'object', 'relational', 'impedance', 'mismatch', 'number', 'approach', 'cope', 'problem', 'general', 'solution', 'downsides', 'common', 'approach', 'object', 'relational', 'mapping', 'find', 'ide', 'language', 'visual', 'foxpro', 'library', 'java', 'data', 'objects', 'ruby', 'rails', 'activerecord']"
3712,"There are also object databases that can be used to replace RDBMSs, but these have not been as technically and commercially successful as RDBMSs.","['object', 'database', 'replace', 'rdbms', 'technically', 'commercially', 'successful', 'rdbmss']"
3713,"OOP can be used to associate real-world objects and processes with digital counterparts. However, not everyone agrees that OOP facilitates direct real-world mapping see Criticism section or that real-world mapping is even a worthy goal; Bertrand Meyer argues in Object-Oriented Software Construction25 that a program is not a model of the world but a model of some part of the world; ""Reality is a cousin twice removed"". At the same time, some principal limitations of OOP have been noted.26 For example, the circle-ellipse problem is difficult to handle using OOP's concept of inheritance.","['oop', 'associate', 'real', 'world', 'object', 'process', 'digital', 'counterpart', 'agree', 'oop', 'facilitate', 'direct', 'real', 'world', 'mapping', 'criticism', 'section', 'real', 'world', 'mapping', 'worthy', 'goal', 'bertrand', 'meyer', 'argue', 'object', 'orient', 'software', 'construction25', 'program', 'model', 'world', 'model', 'world', 'reality', 'cousin', 'twice', 'remove', 'time', 'principal', 'limitation', 'oop', 'noted', 'example', 'circle', 'ellipse', 'problem', 'difficult', 'handle', 'oop', 'concept', 'inheritance']"
3714,"However, Niklaus Wirth who popularized the adage now known as Wirth's law: ""Software is getting slower more rapidly than hardware becomes faster"" said of OOP in his paper, ""Good Ideas through the Looking Glass"", ""This paradigm closely reflects the structure of systems 'in the real world', and it is therefore well suited to model complex systems with complex behaviours""27 contrast KISS principle.","['niklaus', 'wirth', 'popularize', 'adage', 'know', 'wirth', 'law', 'software', 'get', 'slow', 'rapidly', 'hardware', 'fast', 'say', 'oop', 'paper', 'good', 'ideas', 'looking', 'glass', 'paradigm', 'closely', 'reflect', 'structure', 'system', 'real', 'world', 'suited', 'model', 'complex', 'system', 'complex', 'behaviours', 'contrast', 'kiss', 'principle']"
3715,Steve Yegge and others noted that natural languages lack the OOP approach of strictly prioritizing things objects/nouns before actions methods/verbs.28 This problem may cause OOP to suffer more convoluted solutions than procedural programming.29,"['steve', 'yegge', 'note', 'natural', 'language', 'lack', 'oop', 'approach', 'strictly', 'prioritize', 'thing', 'object', 'noun', 'action', 'method', 'verbs', 'problem', 'cause', 'oop', 'suffer', 'convoluted', 'solution', 'procedural', 'programming']"
3716,"OOP was developed to increase the reusability and maintainability of source code.30 Transparent representation of the control flow had no priority and was meant to be handled by a compiler. With the increasing relevance of parallel hardware and multithreaded coding, developing transparent control flow becomes more important, something hard to achieve with OOP.31323334","['oop', 'develop', 'increase', 'reusability', 'maintainability', 'source', 'code', 'transparent', 'representation', 'control', 'flow', 'priority', 'mean', 'handle', 'compiler', 'increase', 'relevance', 'parallel', 'hardware', 'multithreaded', 'coding', 'develop', 'transparent', 'control', 'flow', 'important', 'hard', 'achieve', 'oop']"
3717,"Responsibility-driven design defines classes in terms of a contract, that is, a class should be defined around a responsibility and the information that it shares. This is contrasted by Wirfs-Brock and Wilkerson with data-driven design, where classes are defined around the data-structures that must be held. The authors hold that responsibility-driven design is preferable.","['responsibility', 'drive', 'design', 'define', 'class', 'term', 'contract', 'class', 'define', 'responsibility', 'information', 'share', 'contrast', 'wirfs', 'brock', 'wilkerson', 'data', 'drive', 'design', 'class', 'define', 'datum', 'structure', 'hold', 'author', 'hold', 'responsibility', 'drive', 'design', 'preferable']"
3718,SOLID is a mnemonic invented by Michael Feathers which spells out five software engineering design principles:,"['solid', 'mnemonic', 'invent', 'michael', 'feathers', 'spell', 'software', 'engineering', 'design', 'principle']"
3719,GRASP General Responsibility Assignment Software Patterns is another set of guidelines advocated by Craig Larman.,"['grasp', 'general', 'responsibility', 'assignment', 'software', 'patterns', 'set', 'guideline', 'advocate', 'craig', 'larman']"
3720,"The OOP paradigm has been criticised for a number of reasons, including not meeting its stated goals of reusability and modularity,3536 and for overemphasizing one aspect of software design and modeling data/objects at the expense of other important aspects computation/algorithms.3738","['oop', 'paradigm', 'criticise', 'number', 'reason', 'include', 'meet', 'stated', 'goal', 'reusability', 'modularity', 'overemphasize', 'aspect', 'software', 'design', 'model', 'datum', 'object', 'expense', 'important', 'aspect', 'computation', 'algorithms']"
3721,"Luca Cardelli has claimed that OOP code is ""intrinsically less efficient"" than procedural code, that OOP can take longer to compile, and that OOP languages have ""extremely poor modularity properties with respect to class extension and modification"", and tend to be extremely complex.35 The latter point is reiterated by Joe Armstrong, the principal inventor of Erlang, who is quoted as saying:36","['luca', 'cardelli', 'claim', 'oop', 'code', 'intrinsically', 'efficient', 'procedural', 'code', 'oop', 'long', 'compile', 'oop', 'language', 'extremely', 'poor', 'modularity', 'property', 'respect', 'class', 'extension', 'modification', 'tend', 'extremely', 'complex', 'point', 'reiterate', 'joe', 'armstrong', 'principal', 'inventor', 'erlang', 'quote', 'saying']"
3722,The problem with object-oriented languages is they've got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.,"['problem', 'object', 'orient', 'language', 'get', 'implicit', 'environment', 'carry', 'want', 'banana', 'get', 'gorilla', 'hold', 'banana', 'entire', 'jungle']"
3723,A study by Potok et al. has shown no significant difference in productivity between OOP and procedural approaches.39,"['study', 'potok', 'show', 'significant', 'difference', 'productivity', 'oop', 'procedural', 'approaches']"
3724,"Christopher J. Date stated that critical comparison of OOP to other technologies, relational in particular, is difficult because of lack of an agreed-upon and rigorous definition of OOP;40 however, Date and Darwen have proposed a theoretical foundation on OOP that uses OOP as a kind of customizable type system to support RDBMS.41","['christopher', 'date', 'state', 'critical', 'comparison', 'oop', 'technology', 'relational', 'particular', 'difficult', 'lack', 'agree', 'rigorous', 'definition', 'oop', 'date', 'darwen', 'propose', 'theoretical', 'foundation', 'oop', 'use', 'oop', 'kind', 'customizable', 'type', 'system', 'support', 'rdbms']"
3725,"In an article Lawrence Krubner claimed that compared to other languages LISP dialects, functional languages, etc. OOP languages have no unique strengths, and inflict a heavy burden of unneeded complexity.42","['article', 'lawrence', 'krubner', 'claim', 'compare', 'language', 'lisp', 'dialect', 'functional', 'language', 'etc', 'oop', 'language', 'unique', 'strength', 'inflict', 'heavy', 'burden', 'unneeded', 'complexity']"
3726,Alexander Stepanov compares object orientation unfavourably to generic programming:37,"['alexander', 'stepanov', 'compare', 'object', 'orientation', 'unfavourably', 'generic', 'programming']"
3727,I find OOP technically unsound. It attempts to decompose the world in terms of interfaces that vary on a single type. To deal with the real problems you need multisorted algebras — families of interfaces that span multiple types. I find OOP philosophically unsound. It claims that everything is an object. Even if it is true it is not very interesting — saying that everything is an object is saying nothing at all.,"['find', 'oop', 'technically', 'unsound', 'attempt', 'decompose', 'world', 'term', 'interface', 'vary', 'single', 'type', 'deal', 'real', 'problem', 'need', 'multisorted', 'algebra', 'family', 'interface', 'span', 'multiple', 'type', 'find', 'oop', 'philosophically', 'unsound', 'claim', 'object', 'true', 'interesting', 'say', 'object', 'say']"
3728,"Paul Graham has suggested that OOP's popularity within large companies is due to ""large and frequently changing groups of mediocre programmers"". According to Graham, the discipline imposed by OOP prevents any one programmer from ""doing too much damage"".43","['paul', 'graham', 'suggest', 'oop', 'popularity', 'large', 'company', 'large', 'frequently', 'change', 'group', 'mediocre', 'programmer', 'accord', 'graham', 'discipline', 'impose', 'oop', 'prevent', 'programmer', 'damage']"
3729,Leo Brodie has suggested a connection between the standalone nature of objects and a tendency to duplicate code44 in violation of the don't repeat yourself principle45 of software development.,"['leo', 'brodie', 'suggest', 'connection', 'standalone', 'nature', 'object', 'tendency', 'duplicate', 'code44', 'violation', 'repeat', 'principle45', 'software', 'development']"
3730,"Steve Yegge noted that, as opposed to functional programming:46","['steve', 'yegge', 'note', 'oppose', 'functional', 'programming']"
3731,Object Oriented Programming puts the Nouns first and foremost. Why would you go to such lengths to put one part of speech on a pedestal? Why should one kind of concept take precedence over another? It's not as if OOP has suddenly made verbs less important in the way we actually think. It's a strangely skewed perspective.,"['object', 'oriented', 'programming', 'put', 'nouns', 'foremost', 'length', 'speech', 'pedestal', 'kind', 'concept', 'precedence', 'oop', 'suddenly', 'verb', 'important', 'way', 'actually', 'think', 'strangely', 'skewed', 'perspective']"
3732,"Rich Hickey, creator of Clojure, described object systems as overly simplistic models of the real world. He emphasized the inability of OOP to model time properly, which is getting increasingly problematic as software systems become more concurrent.38","['rich', 'hickey', 'creator', 'clojure', 'describe', 'object', 'system', 'overly', 'simplistic', 'model', 'real', 'world', 'emphasize', 'inability', 'oop', 'model', 'time', 'properly', 'get', 'increasingly', 'problematic', 'software', 'system', 'concurrent']"
3733,"Eric S. Raymond, a Unix programmer and open-source software advocate, has been critical of claims that present object-oriented programming as the ""One True Solution"", and has written that object-oriented programming languages tend to encourage thickly layered programs that destroy transparency.47 Raymond compares this unfavourably to the approach taken with Unix and the C programming language.47","['eric', 'raymond', 'unix', 'programmer', 'open', 'source', 'software', 'advocate', 'critical', 'claim', 'present', 'object', 'orient', 'programming', 'true', 'solution', 'write', 'object', 'orient', 'programming', 'language', 'tend', 'encourage', 'thickly', 'layer', 'program', 'destroy', 'transparency', 'raymond', 'compare', 'unfavourably', 'approach', 'take', 'unix', 'programming', 'language']"
3734,"Rob Pike, a programmer involved in the creation of UTF-8 and Go, has called object-oriented programming ""the Roman numerals of computing""48 and has said that OOP languages frequently shift the focus from data structures and algorithms to types.49 Furthermore, he cites an instance of a Java professor whose ""idiomatic"" solution to a problem was to create six new classes, rather than to simply use a lookup table.50","['rob', 'pike', 'programmer', 'involve', 'creation', 'utf-8', 'call', 'object', 'orient', 'programming', 'roman', 'numeral', 'computing', 'say', 'oop', 'language', 'frequently', 'shift', 'focus', 'datum', 'structure', 'algorithm', 'types', 'furthermore', 'cite', 'instance', 'java', 'professor', 'idiomatic', 'solution', 'problem', 'create', 'new', 'class', 'simply', 'use', 'lookup', 'table']"
3735,"Regarding inheritance, Bob Martin states that because they are software, related classes do not necessarily share the relationships of the things they represent.51","['inheritance', 'bob', 'martin', 'state', 'software', 'relate', 'class', 'necessarily', 'share', 'relationship', 'thing', 'represent']"
3736,"Objects are the run-time entities in an object-oriented system. They may represent a person, a place, a bank account, a table of data, or any item that the program has to handle.","['object', 'run', 'time', 'entity', 'object', 'orient', 'system', 'represent', 'person', 'place', 'bank', 'account', 'table', 'datum', 'item', 'program', 'handle']"
3737,There have been several attempts at formalizing the concepts used in object-oriented programming. The following concepts and constructs have been used as interpretations of OOP concepts:,"['attempt', 'formalize', 'concept', 'object', 'orient', 'programming', 'follow', 'concept', 'construct', 'interpretation', 'oop', 'concept']"
3738,"Attempts to find a consensus definition or theory behind objects have not proven very successful however, see Abadi & Cardelli, A Theory of Objects53 for formal definitions of many OOP concepts and constructs, and often diverge widely. For example, some definitions focus on mental activities, and some on program structuring. One of the simpler definitions is that OOP is the act of using ""map"" data structures or arrays that can contain functions and pointers to other maps, all with some syntactic and scoping sugar on top. Inheritance can be performed by cloning the maps sometimes called ""prototyping"".","['attempt', 'find', 'consensus', 'definition', 'theory', 'object', 'prove', 'successful', 'abadi', 'cardelli', 'theory', 'objects53', 'formal', 'definition', 'oop', 'concept', 'construct', 'diverge', 'widely', 'example', 'definition', 'focus', 'mental', 'activity', 'program', 'structure', 'simple', 'definition', 'oop', 'act', 'map', 'datum', 'structure', 'array', 'contain', 'function', 'pointer', 'map', 'syntactic', 'scope', 'sugar', 'inheritance', 'perform', 'clone', 'map', 'call', 'prototype']"
3739,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3740,"In programming language theory and type theory, polymorphism is the provision of a single interface to entities of different types1 or the use of a single symbol to represent multiple different types.2 The concept is borrowed from a principle in biology where an organism or species can have many different forms or stages.3","['programming', 'language', 'theory', 'type', 'theory', 'polymorphism', 'provision', 'single', 'interface', 'entity', 'different', 'types1', 'use', 'single', 'symbol', 'represent', 'multiple', 'different', 'types', 'concept', 'borrow', 'principle', 'biology', 'organism', 'specie', 'different', 'form', 'stages']"
3741,The most commonly recognized major classes of polymorphism are:,"['commonly', 'recognize', 'major', 'class', 'polymorphism']"
3742,"Interest in polymorphic type systems developed significantly in the 1960s, with practical implementations beginning to appear by the end of the decade. Ad hoc polymorphism and parametric polymorphism were originally described in Christopher Strachey's Fundamental Concepts in Programming Languages,5 where they are listed as ""the two main classes"" of polymorphism. Ad hoc polymorphism was a feature of Algol 68, while parametric polymorphism was the core feature of ML's type system.","['interest', 'polymorphic', 'type', 'system', 'develop', 'significantly', '1960', 'practical', 'implementation', 'begin', 'appear', 'end', 'decade', 'hoc', 'polymorphism', 'parametric', 'polymorphism', 'originally', 'describe', 'christopher', 'strachey', 'fundamental', 'concepts', 'programming', 'languages', 'list', 'main', 'class', 'polymorphism', 'hoc', 'polymorphism', 'feature', 'algol', 'parametric', 'polymorphism', 'core', 'feature', 'type', 'system']"
3743,"In a 1985 paper, Peter Wegner and Luca Cardelli introduced the term inclusion polymorphism to model subtypes and inheritance,2 citing Simula as the first programming language to implement it.","['1985', 'paper', 'peter', 'wegner', 'luca', 'cardelli', 'introduce', 'term', 'inclusion', 'polymorphism', 'model', 'subtype', 'inheritance', 'cite', 'simula', 'programming', 'language', 'implement']"
3744,"Christopher Strachey chose the term ad hoc polymorphism to refer to polymorphic functions that can be applied to arguments of different types, but that behave differently depending on the type of the argument to which they are applied also known as function overloading or operator overloading.5 The term ""ad hoc"" in this context is not intended to be pejorative; it refers simply to the fact that this type of polymorphism is not a fundamental feature of the type system. In the Pascal / Delphi example below, the Add functions seem to work generically over various types when looking at the invocations, but are considered to be two entirely distinct functions by the compiler for all intents and purposes:","['christopher', 'strachey', 'choose', 'term', 'hoc', 'polymorphism', 'refer', 'polymorphic', 'function', 'apply', 'argument', 'different', 'type', 'behave', 'differently', 'depend', 'type', 'argument', 'apply', 'know', 'function', 'overloading', 'operator', 'overloading', 'term', 'hoc', 'context', 'intend', 'pejorative', 'refer', 'simply', 'fact', 'type', 'polymorphism', 'fundamental', 'feature', 'type', 'system', 'pascal', 'delphi', 'example', 'add', 'function', 'work', 'generically', 'type', 'look', 'invocation', 'consider', 'entirely', 'distinct', 'function', 'compiler', 'intent', 'purpose']"
3745,In dynamically typed languages the situation can be more complex as the correct function that needs to be invoked might only be determinable at run time.,"['dynamically', 'type', 'language', 'situation', 'complex', 'correct', 'function', 'need', 'invoke', 'determinable', 'run', 'time']"
3746,"Implicit type conversion has also been defined as a form of polymorphism, referred to as ""coercion polymorphism"".26","['implicit', 'type', 'conversion', 'define', 'form', 'polymorphism', 'refer', 'coercion', 'polymorphism']"
3747,"Parametric polymorphism allows a function or a data type to be written generically, so that it can handle values uniformly without depending on their type.7 Parametric polymorphism is a way to make a language more expressive while still maintaining full static type-safety.","['parametric', 'polymorphism', 'allow', 'function', 'data', 'type', 'write', 'generically', 'handle', 'value', 'uniformly', 'depend', 'type', 'parametric', 'polymorphism', 'way', 'language', 'expressive', 'maintain', 'static', 'type', 'safety']"
3748,The concept of parametric polymorphism applies to both data types and functions. A function that can evaluate to or be applied to values of different types is known as a polymorphic function. A data type that can appear to be of a generalized type e.g. a list with elements of arbitrary type is designated polymorphic data type like the generalized type from which such specializations are made.,"['concept', 'parametric', 'polymorphism', 'apply', 'datum', 'type', 'function', 'function', 'evaluate', 'apply', 'value', 'different', 'type', 'know', 'polymorphic', 'function', 'data', 'type', 'appear', 'generalize', 'type', 'e.g.', 'list', 'element', 'arbitrary', 'type', 'designate', 'polymorphic', 'datum', 'type', 'like', 'generalize', 'type', 'specialization']"
3749,"Parametric polymorphism is ubiquitous in functional programming, where it is often simply referred to as ""polymorphism"". The following example in Haskell shows a parameterized list data type and two parametrically polymorphic functions on them:","['parametric', 'polymorphism', 'ubiquitous', 'functional', 'programming', 'simply', 'refer', 'polymorphism', 'follow', 'example', 'haskell', 'show', 'parameterized', 'list', 'datum', 'type', 'parametrically', 'polymorphic', 'function']"
3750,"Parametric polymorphism is also available in several object-oriented languages. For instance, templates in C++ and D, or under the name generics in C#, Delphi, Java and Go:","['parametric', 'polymorphism', 'available', 'object', 'orient', 'language', 'instance', 'template', 'c++', 'generic', 'delphi', 'java']"
3751,"John C. Reynolds and later Jean-Yves Girard formally developed this notion of polymorphism as an extension to lambda calculus called the polymorphic lambda calculus or System F. Any parametrically polymorphic function is necessarily restricted in what it can do, working on the shape of the data instead of its value, leading to the concept of parametricity.","['john', 'reynolds', 'later', 'jean', 'yves', 'girard', 'formally', 'develop', 'notion', 'polymorphism', 'extension', 'lambda', 'calculus', 'call', 'polymorphic', 'lambda', 'calculus', 'system', 'parametrically', 'polymorphic', 'function', 'necessarily', 'restrict', 'work', 'shape', 'datum', 'instead', 'value', 'lead', 'concept', 'parametricity']"
3752,"Some languages employ the idea of subtyping also called subtype polymorphism or inclusion polymorphism to restrict the range of types that can be used in a particular case of polymorphism. In these languages, subtyping allows a function to be written to take an object of a certain type T, but also work correctly, if passed an object that belongs to a type S that is a subtype of T according to the Liskov substitution principle. This type relation is sometimes written S <: T. Conversely, T is said to be a supertype of S—written T :> S. Subtype polymorphism is usually resolved dynamically see below.","['language', 'employ', 'idea', 'subtype', 'call', 'subtype', 'polymorphism', 'inclusion', 'polymorphism', 'restrict', 'range', 'type', 'particular', 'case', 'polymorphism', 'language', 'subtype', 'allow', 'function', 'write', 'object', 'certain', 'type', 'work', 'correctly', 'pass', 'object', 'belong', 'type', 'subtype', 'accord', 'liskov', 'substitution', 'principle', 'type', 'relation', 'write', 'conversely', 'say', 'supertype', 'write', 'subtype', 'polymorphism', 'usually', 'resolve', 'dynamically']"
3753,"In the following Java example we make cats and dogs subtypes of animals. The procedure letsHear accepts an animal, but will also work correctly if a subtype is passed to it:","['follow', 'java', 'example', 'cat', 'dog', 'subtype', 'animal', 'procedure', 'letshear', 'accept', 'animal', 'work', 'correctly', 'subtype', 'pass']"
3754,"In another example, if Number, Rational, and Integer are types such that Number :> Rational and Number :> Integer, a function written to take a Number will work equally well when passed an Integer or Rational as when passed a Number. The actual type of the object can be hidden from clients into a black box, and accessed via object identity. In fact, if the Number type is abstract, it may not even be possible to get your hands on an object whose most-derived type is Number see abstract data type, abstract class. This particular kind of type hierarchy is known—especially in the context of the Scheme programming language—as a numerical tower, and usually contains many more types.","['example', 'number', 'rational', 'integer', 'type', 'number', 'rational', 'number', 'integer', 'function', 'write', 'number', 'work', 'equally', 'pass', 'integer', 'rational', 'pass', 'number', 'actual', 'type', 'object', 'hide', 'client', 'black', 'box', 'access', 'object', 'identity', 'fact', 'number', 'type', 'abstract', 'possible', 'hand', 'object', 'derive', 'type', 'number', 'abstract', 'datum', 'type', 'abstract', 'class', 'particular', 'kind', 'type', 'hierarchy', 'know', 'especially', 'context', 'scheme', 'programming', 'language', 'numerical', 'tower', 'usually', 'contain', 'type']"
3755,"Object-oriented programming languages offer subtype polymorphism using subclassing also known as inheritance. In typical implementations, each class contains what is called a virtual table—a table of functions that implement the polymorphic part of the class interface—and each object contains a pointer to the ""vtable"" of its class, which is then consulted whenever a polymorphic method is called. This mechanism is an example of:","['object', 'orient', 'programming', 'language', 'offer', 'subtype', 'polymorphism', 'subclasse', 'know', 'inheritance', 'typical', 'implementation', 'class', 'contain', 'call', 'virtual', 'table', 'table', 'function', 'implement', 'polymorphic', 'class', 'interface', 'object', 'contain', 'pointer', 'vtable', 'class', 'consult', 'polymorphic', 'method', 'call', 'mechanism', 'example']"
3756,"The same goes for most other popular object systems. Some, however, such as Common Lisp Object System, provide multiple dispatch, under which method calls are polymorphic in all arguments.","['go', 'popular', 'object', 'system', 'common', 'lisp', 'object', 'system', 'provide', 'multiple', 'dispatch', 'method', 'call', 'polymorphic', 'argument']"
3757,The interaction between parametric polymorphism and subtyping leads to the concepts of variance and bounded quantification.,"['interaction', 'parametric', 'polymorphism', 'subtype', 'lead', 'concept', 'variance', 'bound', 'quantification']"
3758,"Row polymorphism8 is a similar, but distinct concept from subtyping. It deals with structural types. It allows the usage of all values whose types have certain properties, without losing the remaining type information.","['row', 'polymorphism8', 'similar', 'distinct', 'concept', 'subtype', 'deal', 'structural', 'type', 'allow', 'usage', 'value', 'type', 'certain', 'property', 'lose', 'remain', 'type', 'information']"
3759,"A related concept is polytypism or data type genericity. A polytypic function is more general than polymorphic, and in such a function, ""though one can provide fixed ad hoc cases for specific data types, an ad hoc combinator is absent"".9","['related', 'concept', 'polytypism', 'datum', 'type', 'genericity', 'polytypic', 'function', 'general', 'polymorphic', 'function', 'provide', 'fix', 'hoc', 'case', 'specific', 'datum', 'type', 'hoc', 'combinator', 'absent']"
3760,"Polymorphism can be distinguished by when the implementation is selected: statically at compile time or dynamically at run time, typically via a virtual function. This is known respectively as static dispatch and dynamic dispatch, and the corresponding forms of polymorphism are accordingly called static polymorphism and dynamic polymorphism.","['polymorphism', 'distinguish', 'implementation', 'select', 'statically', 'compile', 'time', 'dynamically', 'run', 'time', 'typically', 'virtual', 'function', 'know', 'respectively', 'static', 'dispatch', 'dynamic', 'dispatch', 'correspond', 'form', 'polymorphism', 'accordingly', 'call', 'static', 'polymorphism', 'dynamic', 'polymorphism']"
3761,"Static polymorphism executes faster, because there is no dynamic dispatch overhead, but requires additional compiler support. Further, static polymorphism allows greater static analysis by compilers notably for optimization, source code analysis tools, and human readers programmers. Dynamic polymorphism is more flexible but slower—for example, dynamic polymorphism allows duck typing, and a dynamically linked library may operate on objects without knowing their full type.","['static', 'polymorphism', 'execute', 'fast', 'dynamic', 'dispatch', 'overhead', 'require', 'additional', 'compiler', 'support', 'static', 'polymorphism', 'allow', 'great', 'static', 'analysis', 'compiler', 'notably', 'optimization', 'source', 'code', 'analysis', 'tool', 'human', 'reader', 'programmer', 'dynamic', 'polymorphism', 'flexible', 'slow', 'example', 'dynamic', 'polymorphism', 'allow', 'duck', 'typing', 'dynamically', 'link', 'library', 'operate', 'object', 'know', 'type']"
3762,"Static polymorphism typically occurs in ad hoc polymorphism and parametric polymorphism, whereas dynamic polymorphism is usual for subtype polymorphism. However, it is possible to achieve static polymorphism with subtyping through more sophisticated use of template metaprogramming, namely the curiously recurring template pattern.","['static', 'polymorphism', 'typically', 'occur', 'hoc', 'polymorphism', 'parametric', 'polymorphism', 'dynamic', 'polymorphism', 'usual', 'subtype', 'polymorphism', 'possible', 'achieve', 'static', 'polymorphism', 'subtype', 'sophisticated', 'use', 'template', 'metaprogramming', 'curiously', 'recur', 'template', 'pattern']"
3763,"When polymorphism is exposed via a library, static polymorphism becomes impossible for dynamic libraries as there is no way of knowing what types the parameters are when the shared object is built. While languages like C++ and Rust use monomorphized templates, the Swift programming language makes extensive use of dynamic dispatch to build the application binary interface for these libraries by default. As a result, more code can be shared for a reduced system size at the cost of runtime overhead.10","['polymorphism', 'expose', 'library', 'static', 'polymorphism', 'impossible', 'dynamic', 'library', 'way', 'know', 'type', 'parameter', 'share', 'object', 'build', 'language', 'like', 'c++', 'rust', 'use', 'monomorphize', 'template', 'swift', 'programming', 'language', 'make', 'extensive', 'use', 'dynamic', 'dispatch', 'build', 'application', 'binary', 'interface', 'library', 'default', 'result', 'code', 'share', 'reduced', 'system', 'size', 'cost', 'runtime', 'overhead']"
3764,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3765,"In object-oriented programming, in languages such as C++, and Object Pascal, a virtual function or virtual method is an inheritable and overridable function or method for which dynamic dispatch is facilitated. This concept is an important part of the runtime polymorphism portion of object-oriented programming OOP. In short, a virtual function defines a target function to be executed, but the target might not be known at compile time.","['object', 'orient', 'programming', 'language', 'c++', 'object', 'pascal', 'virtual', 'function', 'virtual', 'method', 'inheritable', 'overridable', 'function', 'method', 'dynamic', 'dispatch', 'facilitate', 'concept', 'important', 'runtime', 'polymorphism', 'portion', 'object', 'orient', 'programming', 'oop', 'short', 'virtual', 'function', 'define', 'target', 'function', 'execute', 'target', 'know', 'compile', 'time']"
3766,"Most programming languages, such as JavaScript, PHP and Python, treat all methods as virtual by default12 and do not provide a modifier to change this behavior. However, some languages provide modifiers to prevent methods from being overridden by derived classes such as the final keyword in Java3 and PHP4.","['programming', 'language', 'javascript', 'php', 'python', 'treat', 'method', 'virtual', 'default12', 'provide', 'modifier', 'change', 'behavior', 'language', 'provide', 'modifier', 'prevent', 'method', 'overridden', 'derive', 'class', 'final', 'keyword', 'java3', 'php4']"
3767,The concept of the virtual function solves the following problem:,"['concept', 'virtual', 'function', 'solve', 'follow', 'problem']"
3768,"In object-oriented programming, when a derived class inherits from a base class, an object of the derived class may be referred to via a pointer or reference of the base class type instead of the derived class type. If there are base class methods overridden by the derived class, the method actually called by such a reference or pointer can be bound linked either 'early' by the compiler, according to the declared type of the pointer or reference, or 'late' i.e., by the runtime system of the language, according to the actual type of the object is referred to.","['object', 'orient', 'programming', 'derive', 'class', 'inherit', 'base', 'class', 'object', 'derive', 'class', 'refer', 'pointer', 'reference', 'base', 'class', 'type', 'instead', 'derive', 'class', 'type', 'base', 'class', 'method', 'override', 'derive', 'class', 'method', 'actually', 'call', 'reference', 'pointer', 'bind', 'link', 'early', 'compiler', 'accord', 'declare', 'type', 'pointer', 'reference', 'late', 'i.e.', 'runtime', 'system', 'language', 'accord', 'actual', 'type', 'object', 'refer']"
3769,"Virtual functions are resolved 'late'. If the function in question is 'virtual' in the base class, the most-derived class's implementation of the function is called according to the actual type of the object referred to, regardless of the declared type of the pointer or reference. If it is not 'virtual', the method is resolved 'early' and selected according to the declared type of the pointer or reference.","['virtual', 'function', 'resolve', 'late', 'function', 'question', 'virtual', 'base', 'class', 'derive', 'class', 'implementation', 'function', 'call', 'accord', 'actual', 'type', 'object', 'refer', 'regardless', 'declare', 'type', 'pointer', 'reference', 'virtual', 'method', 'resolve', 'early', 'select', 'accord', 'declare', 'type', 'pointer', 'reference']"
3770,Virtual functions allow a program to call methods that don't necessarily even exist at the moment the code is compiled.citation needed,"['virtual', 'function', 'allow', 'program', 'method', 'necessarily', 'exist', 'moment', 'code', 'compiled.citation', 'need']"
3771,"In C++, virtual methods are declared by prepending the virtual keyword to the function's declaration in the base class. This modifier is inherited by all implementations of that method in derived classes, meaning that they can continue to over-ride each other and be late-bound. And even if methods owned by the base class call the virtual method, they will instead be calling the derived method. Overloading occurs when two or more methods in one class have the same method name but different parameters. Overriding means having two methods with the same method name and parameters. Overloading is also referred to as function matching, and overriding as dynamic function mapping.","['c++', 'virtual', 'method', 'declare', 'prepende', 'virtual', 'keyword', 'function', 'declaration', 'base', 'class', 'modifier', 'inherit', 'implementation', 'method', 'derive', 'class', 'mean', 'continue', 'ride', 'late', 'bind', 'method', 'own', 'base', 'class', 'virtual', 'method', 'instead', 'call', 'derive', 'method', 'overloading', 'occur', 'method', 'class', 'method', 'different', 'parameter', 'overriding', 'mean', 'have', 'method', 'method', 'parameter', 'overloading', 'refer', 'function', 'matching', 'override', 'dynamic', 'function', 'mapping']"
3772,"For example, a base class Animal could have a virtual function Eat. Subclass Llama would implement Eat differently than subclass Wolf, but one can invoke Eat on any class instance referred to as Animal, and get the Eat behavior of the specific subclass.","['example', 'base', 'class', 'animal', 'virtual', 'function', 'eat', 'subclass', 'llama', 'implement', 'eat', 'differently', 'subclass', 'wolf', 'invoke', 'eat', 'class', 'instance', 'refer', 'animal', 'eat', 'behavior', 'specific', 'subclass']"
3773,"This allows a programmer to process a list of objects of class Animal, telling each in turn to eat by calling Eat, without needing to know what kind of animal may be in the list, how each animal eats, or what the complete set of possible animal types might be.","['allow', 'programmer', 'process', 'list', 'object', 'class', 'animal', 'tell', 'turn', 'eat', 'call', 'eat', 'need', 'know', 'kind', 'animal', 'list', 'animal', 'eat', 'complete', 'set', 'possible', 'animal', 'type']"
3774,"In C, the mechanism behind virtual functions could be provided in the following manner:","['mechanism', 'virtual', 'function', 'provide', 'follow', 'manner']"
3775,"A pure virtual function or pure virtual method is a virtual function that is required to be implemented by a derived class if the derived class is not abstract. Classes containing pure virtual methods are termed ""abstract"" and they cannot be instantiated directly. A subclass of an abstract class can only be instantiated directly if all inherited pure virtual methods have been implemented by that class or a parent class. Pure virtual methods typically have a declaration signature and no definition implementation.","['pure', 'virtual', 'function', 'pure', 'virtual', 'method', 'virtual', 'function', 'require', 'implement', 'derive', 'class', 'derive', 'class', 'abstract', 'class', 'contain', 'pure', 'virtual', 'method', 'term', 'abstract', 'instantiate', 'directly', 'subclass', 'abstract', 'class', 'instantiate', 'directly', 'inherit', 'pure', 'virtual', 'method', 'implement', 'class', 'parent', 'class', 'pure', 'virtual', 'method', 'typically', 'declaration', 'signature', 'definition', 'implementation']"
3776,"As an example, an abstract base class MathSymbol may provide a pure virtual function doOperation, and derived classes Plus and Minus implement doOperation to provide concrete implementations. Implementing doOperation would not make sense in the MathSymbol class, as MathSymbol is an abstract concept whose behaviour is defined solely for each given kind subclass of MathSymbol. Similarly, a given subclass of MathSymbol would not be complete without an implementation of doOperation.","['example', 'abstract', 'base', 'class', 'mathsymbol', 'provide', 'pure', 'virtual', 'function', 'dooperation', 'derive', 'class', 'plus', 'minus', 'implement', 'dooperation', 'provide', 'concrete', 'implementation', 'implement', 'dooperation', 'sense', 'mathsymbol', 'class', 'mathsymbol', 'abstract', 'concept', 'behaviour', 'define', 'solely', 'give', 'kind', 'subclass', 'mathsymbol', 'similarly', 'give', 'subclass', 'mathsymbol', 'complete', 'implementation', 'dooperation']"
3777,"Although pure virtual methods typically have no implementation in the class that declares them, pure virtual methods in some languages e.g. C++ and Python are permitted to contain an implementation in their declaring class, providing fallback or default behaviour that a derived class can delegate to, if appropriate.56","['pure', 'virtual', 'method', 'typically', 'implementation', 'class', 'declare', 'pure', 'virtual', 'method', 'language', 'e.g.', 'c++', 'python', 'permit', 'contain', 'implementation', 'declaring', 'class', 'provide', 'fallback', 'default', 'behaviour', 'derive', 'class', 'delegate', 'appropriate']"
3778,"Pure virtual functions can also be used where the method declarations are being used to define an interface - similar to what the interface keyword in Java explicitly specifies. In such a use, derived classes will supply all implementations. In such a design pattern, the abstract class which serves as an interface will contain only pure virtual functions, but no data members or ordinary methods. In C++, using such purely abstract classes as interfaces works because C++ supports multiple inheritance. However, because many OOP languages do not support multiple inheritance, they often provide a separate interface mechanism. An example is the Java programming language.","['pure', 'virtual', 'function', 'method', 'declaration', 'define', 'interface', 'similar', 'interface', 'keyword', 'java', 'explicitly', 'specify', 'use', 'derive', 'class', 'supply', 'implementation', 'design', 'pattern', 'abstract', 'class', 'serve', 'interface', 'contain', 'pure', 'virtual', 'function', 'data', 'member', 'ordinary', 'method', 'c++', 'purely', 'abstract', 'class', 'interface', 'work', 'c++', 'support', 'multiple', 'inheritance', 'oop', 'language', 'support', 'multiple', 'inheritance', 'provide', 'separate', 'interface', 'mechanism', 'example', 'java', 'programming', 'language']"
3779,"Languages differ in their behavior while the constructor or destructor of an object is running. For this reason, calling virtual functions in constructors is generally discouraged.","['language', 'differ', 'behavior', 'constructor', 'destructor', 'object', 'run', 'reason', 'call', 'virtual', 'function', 'constructor', 'generally', 'discourage']"
3780,"In C++, the ""base"" function is called. Specifically, the most derived function that is not more derived than the current constructor or destructor's class is called.7: §15.7.3 89 If that function is a pure virtual function, then undefined behavior occurs.7: §13.4.6 8 This is true even if the class contains an implementation for that pure virtual function, since a call to a pure virtual function must be explicitly qualified.10 A conforming C++ implementation is not required and generally not able to detect indirect calls to pure virtual functions at compile time or link time. Some runtime systems will issue a pure virtual function call error when encountering a call to a pure virtual function at run time.","['c++', 'base', 'function', 'call', 'specifically', 'derive', 'function', 'derive', 'current', 'constructor', 'destructor', 'class', 'called', '15', 'function', 'pure', 'virtual', 'function', 'undefined', 'behavior', 'occurs', '13', 'true', 'class', 'contain', 'implementation', 'pure', 'virtual', 'function', 'pure', 'virtual', 'function', 'explicitly', 'qualified', 'conform', 'c++', 'implementation', 'require', 'generally', 'able', 'detect', 'indirect', 'call', 'pure', 'virtual', 'function', 'compile', 'time', 'link', 'time', 'runtime', 'system', 'issue', 'pure', 'virtual', 'function', 'error', 'encounter', 'pure', 'virtual', 'function', 'run', 'time']"
3781,"In Java and C#, the derived implementation is called, but some fields are not yet initialized by the derived constructor although they are initialized to their default zero values.11 Some design patterns, such as the Abstract Factory Pattern, actively promote this usage in languages supporting this ability.","['java', 'derive', 'implementation', 'call', 'field', 'initialize', 'derive', 'constructor', 'initialize', 'default', 'zero', 'values', 'design', 'pattern', 'abstract', 'factory', 'pattern', 'actively', 'promote', 'usage', 'language', 'support', 'ability']"
3782,"Object-oriented languages typically manage memory allocation and de-allocation automatically when objects are created and destroyed. However, some object-oriented languages allow a custom destructor method to be implemented, if desired. If the language in question uses automatic memory management, the custom destructor generally called a finalizer in this context that is called is certain to be the appropriate one for the object in question. For example, if an object of type Wolf that inherits Animal is created, and both have custom destructors, the one called will be the one declared in Wolf.","['object', 'orient', 'language', 'typically', 'manage', 'memory', 'allocation', 'allocation', 'automatically', 'object', 'create', 'destroy', 'object', 'orient', 'language', 'allow', 'custom', 'destructor', 'method', 'implement', 'desire', 'language', 'question', 'use', 'automatic', 'memory', 'management', 'custom', 'destructor', 'generally', 'call', 'finalizer', 'context', 'call', 'certain', 'appropriate', 'object', 'question', 'example', 'object', 'type', 'wolf', 'inherit', 'animal', 'create', 'custom', 'destructor', 'call', 'declare', 'wolf']"
3783,"In manual memory management contexts, the situation can be more complex, particularly in relation to static dispatch. If an object of type Wolf is created but pointed to by an Animal pointer, and it is this Animal pointer type that is deleted, the destructor called may actually be the one defined for Animal and not the one for Wolf, unless the destructor is virtual. This is particularly the case with C++, where the behavior is a common source of programming errors if destructors are not virtual.","['manual', 'memory', 'management', 'context', 'situation', 'complex', 'particularly', 'relation', 'static', 'dispatch', 'object', 'type', 'wolf', 'create', 'point', 'animal', 'pointer', 'animal', 'pointer', 'type', 'delete', 'destructor', 'call', 'actually', 'define', 'animal', 'wolf', 'destructor', 'virtual', 'particularly', 'case', 'c++', 'behavior', 'common', 'source', 'programming', 'error', 'destructor', 'virtual']"
3784,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3785,"Rapid application development RAD, also called rapid application building RAB, is both a general term for adaptive software development approaches, and the name for James Martin's method of rapid development. In general, RAD approaches to software development put less emphasis on planning and more emphasis on an adaptive process. Prototypes are often used in addition to or sometimes even instead of design specifications.","['rapid', 'application', 'development', 'rad', 'call', 'rapid', 'application', 'building', 'rab', 'general', 'term', 'adaptive', 'software', 'development', 'approach', 'james', 'martin', 'method', 'rapid', 'development', 'general', 'rad', 'approach', 'software', 'development', 'emphasis', 'planning', 'emphasis', 'adaptive', 'process', 'prototype', 'addition', 'instead', 'design', 'specification']"
3786,"RAD is especially well suited for although not limited to developing software that is driven by user interface requirements. Graphical user interface builders are often called rapid application development tools. Other approaches to rapid development include the adaptive, agile, spiral, and unified models.","['rad', 'especially', 'suited', 'limit', 'develop', 'software', 'drive', 'user', 'interface', 'requirement', 'graphical', 'user', 'interface', 'builder', 'call', 'rapid', 'application', 'development', 'tool', 'approach', 'rapid', 'development', 'include', 'adaptive', 'agile', 'spiral', 'unified', 'model']"
3787,"Rapid application development was a response to plan-driven waterfall processes, developed in the 1970s and 1980s, such as the Structured Systems Analysis and Design Method SSADM. One of the problems with these methods is that they were based on a traditional engineering model used to design and build things like bridges and buildings. Software is an inherently different kind of artifact. Software can radically change the entire process used to solve a problem. As a result, knowledge gained from the development process itself can feed back to the requirements and design of the solution.1 Plan-driven approaches attempt to rigidly define the requirements, the solution, and the plan to implement it, and have a process that discourages changes. RAD approaches, on the other hand, recognize that software development is a knowledge intensive process and provide flexible processes that help take advantage of knowledge gained during the project to improve or adapt the solution.","['rapid', 'application', 'development', 'response', 'plan', 'drive', 'waterfall', 'process', 'develop', '1970', '1980', 'structured', 'systems', 'analysis', 'design', 'method', 'ssadm', 'problem', 'method', 'base', 'traditional', 'engineering', 'model', 'design', 'build', 'thing', 'like', 'bridge', 'building', 'software', 'inherently', 'different', 'kind', 'artifact', 'software', 'radically', 'change', 'entire', 'process', 'solve', 'problem', 'result', 'knowledge', 'gain', 'development', 'process', 'feed', 'requirement', 'design', 'solution', 'plan', 'drive', 'approach', 'attempt', 'rigidly', 'define', 'requirement', 'solution', 'plan', 'implement', 'process', 'discourage', 'change', 'rad', 'approach', 'hand', 'recognize', 'software', 'development', 'knowledge', 'intensive', 'process', 'provide', 'flexible', 'process', 'help', 'advantage', 'knowledge', 'gain', 'project', 'improve', 'adapt', 'solution']"
3788,The first such RAD alternative was developed by Barry Boehm and was known as the spiral model. Boehm and other subsequent RAD approaches emphasized developing prototypes as well as or instead of rigorous design specifications. Prototypes had several advantages over traditional specifications:,"['rad', 'alternative', 'develop', 'barry', 'boehm', 'know', 'spiral', 'model', 'boehm', 'subsequent', 'rad', 'approach', 'emphasize', 'develop', 'prototype', 'instead', 'rigorous', 'design', 'specification', 'prototype', 'advantage', 'traditional', 'specification']"
3789,"Starting with the ideas of Barry Boehm and others, James Martin developed the rapid application development approach during the 1980s at IBM and finally formalized it by publishing a book in 1991, Rapid Application Development. This has resulted in some confusion over the term RAD even among IT professionals. It is important to distinguish between RAD as a general alternative to the waterfall model and RAD as the specific method created by Martin. The Martin method was tailored toward knowledge intensive and UI intensive business systems.","['start', 'idea', 'barry', 'boehm', 'james', 'martin', 'develop', 'rapid', 'application', 'development', 'approach', '1980', 'ibm', 'finally', 'formalize', 'publish', 'book', '1991', 'rapid', 'application', 'development', 'result', 'confusion', 'term', 'rad', 'professional', 'important', 'distinguish', 'rad', 'general', 'alternative', 'waterfall', 'model', 'rad', 'specific', 'method', 'create', 'martin', 'martin', 'method', 'tailor', 'knowledge', 'intensive', 'intensive', 'business', 'system']"
3790,"These ideas were further developed and improved upon by RAD pioneers like James Kerr and Richard Hunter, who together wrote the seminal book on the subject, Inside RAD,3 which followed the journey of a RAD project manager as he drove and refined the RAD Methodology in real-time on an actual RAD project. These practitioners, and those like them, helped RAD gain popularity as an alternative to traditional systems project life cycle approaches.","['idea', 'develop', 'improve', 'rad', 'pioneer', 'like', 'james', 'kerr', 'richard', 'hunter', 'write', 'seminal', 'book', 'subject', 'inside', 'rad', 'follow', 'journey', 'rad', 'project', 'manager', 'drive', 'refine', 'rad', 'methodology', 'real', 'time', 'actual', 'rad', 'project', 'practitioner', 'like', 'help', 'rad', 'gain', 'popularity', 'alternative', 'traditional', 'system', 'project', 'life', 'cycle', 'approach']"
3791,"The RAD approach also matured during the period of peak interest in business re-engineering. The idea of business process re-engineering was to radically rethink core business processes such as sales and customer support with the new capabilities of Information Technology in mind. RAD was often an essential part of larger business re engineering programs. The rapid prototyping approach of RAD was a key tool to help users and analysts ""think out of the box"" about innovative ways that technology might radically reinvent a core business process.45 6","['rad', 'approach', 'mature', 'period', 'peak', 'interest', 'business', 'engineering', 'idea', 'business', 'process', 'engineering', 'radically', 'rethink', 'core', 'business', 'process', 'sale', 'customer', 'support', 'new', 'capability', 'information', 'technology', 'mind', 'rad', 'essential', 'large', 'business', 'engineering', 'program', 'rapid', 'prototyping', 'approach', 'rad', 'key', 'tool', 'help', 'user', 'analyst', 'think', 'box', 'innovative', 'way', 'technology', 'radically', 'reinvent', 'core', 'business', 'process']"
3792,Much of James Martin's comfort with RAD stemmed from Dupont's Information Engineering division and its leader Scott Schultz and their respective relationships with John Underwood who headed up a bespoke RAD development company that pioneered many successful RAD projects in Australia and Hong Kong.,"['james', 'martin', 'comfort', 'rad', 'stem', 'dupont', 'information', 'engineering', 'division', 'leader', 'scott', 'schultz', 'respective', 'relationship', 'john', 'underwood', 'head', 'bespoke', 'rad', 'development', 'company', 'pioneer', 'successful', 'rad', 'project', 'australia', 'hong', 'kong']"
3793,"Successful projects that included ANZ Bank, Lend Lease, BHP, Coca-Cola Amatil, Alcan, Hong Kong Jockey Club and numerous others.","['successful', 'project', 'include', 'anz', 'bank', 'lend', 'lease', 'bhp', 'coca', 'cola', 'amatil', 'alcan', 'hong', 'kong', 'jockey', 'club', 'numerous']"
3794,Success that led to both Scott Shultz and James Martin both spending time in Australia with John Underwood to understand the methods and details of why Australia was disproportionately successful in implementing significant mission critical RAD projects.,"['success', 'lead', 'scott', 'shultz', 'james', 'martin', 'spend', 'time', 'australia', 'john', 'underwood', 'understand', 'method', 'detail', 'australia', 'disproportionately', 'successful', 'implement', 'significant', 'mission', 'critical', 'rad', 'project']"
3795,The James Martin approach to RAD divides the process into four distinct phases:,"['james', 'martin', 'approach', 'rad', 'divide', 'process', 'distinct', 'phase']"
3796,"In modern Information Technology environments, many systems are now built using some degree of Rapid Application Development8 not necessarily the James Martin approach. In addition to Martin's method, agile methods and the Rational Unified Process are often used for RAD development.","['modern', 'information', 'technology', 'environment', 'system', 'build', 'degree', 'rapid', 'application', 'development8', 'necessarily', 'james', 'martin', 'approach', 'addition', 'martin', 'method', 'agile', 'method', 'rational', 'unified', 'process', 'rad', 'development']"
3797,The purported advantages of RAD include:,"['purport', 'advantage', 'rad', 'include']"
3798,The purported disadvantages of RAD include:,"['purport', 'disadvantage', 'rad', 'include']"
3799,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3800,"Rapid prototyping is a group of techniques used to quickly fabricate a scale model of a physical part or assembly using three-dimensional computer aided design CAD data.12 Construction of the part or assembly is usually done using 3D printing or ""additive layer manufacturing"" technology.3","['rapid', 'prototyping', 'group', 'technique', 'quickly', 'fabricate', 'scale', 'model', 'physical', 'assembly', 'dimensional', 'computer', 'aid', 'design', 'cad', 'data', 'construction', 'assembly', 'usually', 'printing', 'additive', 'layer', 'manufacturing', 'technology']"
3801,"The first methods for rapid prototyping became available in the mid 1987 and were used to produce models and prototype parts. Today, they are used for a wide range of applications and are used to manufacture production-quality parts in relatively small numbers if desired without the typical unfavorable short-run economics.4 This economy has encouraged online service bureaus. Historical surveys of RP technology2 start with discussions of simulacra production techniques used by 19th-century sculptors. Some modern sculptors use the progeny technology to produce exhibitions and various objects.5 The ability to reproduce designs from a dataset has given rise to issues of rights, as it is now possible to interpolate volumetric data from 2D images.","['method', 'rapid', 'prototyping', 'available', 'mid', '1987', 'produce', 'model', 'prototype', 'part', 'today', 'wide', 'range', 'application', 'manufacture', 'production', 'quality', 'part', 'relatively', 'small', 'number', 'desire', 'typical', 'unfavorable', 'short', 'run', 'economics', 'economy', 'encourage', 'online', 'service', 'bureaus', 'historical', 'survey', 'technology2', 'start', 'discussion', 'simulacra', 'production', 'technique', '19th', 'century', 'sculptor', 'modern', 'sculptor', 'use', 'progeny', 'technology', 'produce', 'exhibition', 'objects', 'ability', 'reproduce', 'design', 'dataset', 'give', 'rise', 'issue', 'right', 'possible', 'interpolate', 'volumetric', 'datum', 'image']"
3802,"As with CNC subtractive methods, the computer-aided-design – computer-aided manufacturing CAD -CAM workflow in the traditional rapid prototyping process starts with the creation of geometric data, either as a 3D solid using a CAD workstation, or 2D slices using a scanning device. For rapid prototyping this data must represent a valid geometric model; namely, one whose boundary surfaces enclose a finite volume, contain no holes exposing the interior, and do not fold back on themselves.6 In other words, the object must have an ""inside"". The model is valid if for each point in 3D space the computer can determine uniquely whether that point lies inside, on, or outside the boundary surface of the model. CAD post-processors will approximate the application vendors' internal CAD geometric forms e.g., B-splines with a simplified mathematical form, which in turn is expressed in a specified data format which is a common feature in additive manufacturing: STL file format, a de facto standard for transferring solid geometric models to SFF machines.7","['cnc', 'subtractive', 'method', 'computer', 'aid', 'design', 'computer', 'aid', 'manufacturing', 'cad', '-cam', 'workflow', 'traditional', 'rapid', 'prototyping', 'process', 'start', 'creation', 'geometric', 'datum', 'solid', 'cad', 'workstation', 'slice', 'scanning', 'device', 'rapid', 'prototyping', 'datum', 'represent', 'valid', 'geometric', 'model', 'boundary', 'surface', 'enclose', 'finite', 'volume', 'contain', 'hole', 'expose', 'interior', 'fold', 'themselves', 'word', 'object', 'inside', 'model', 'valid', 'point', 'space', 'computer', 'determine', 'uniquely', 'point', 'lie', 'inside', 'outside', 'boundary', 'surface', 'model', 'cad', 'post', 'processor', 'approximate', 'application', 'vendor', 'internal', 'cad', 'geometric', 'form', 'e.g.', 'spline', 'simplified', 'mathematical', 'form', 'turn', 'express', 'specify', 'data', 'format', 'common', 'feature', 'additive', 'manufacturing', 'stl', 'file', 'format', 'facto', 'standard', 'transfer', 'solid', 'geometric', 'model', 'sff', 'machines']"
3803,"To obtain the necessary motion control trajectories to drive the actual SFF, rapid prototyping, 3D printing or additive manufacturing mechanism, the prepared geometric model is typically sliced into layers, and the slices are scanned into lines producing a ""2D drawing"" used to generate trajectory as in CNC's toolpath, mimicking in reverse the layer-to-layer physical building process.citation needed","['obtain', 'necessary', 'motion', 'control', 'trajectory', 'drive', 'actual', 'sff', 'rapid', 'prototyping', 'printing', 'additive', 'manufacturing', 'mechanism', 'prepared', 'geometric', 'model', 'typically', 'slice', 'layer', 'slice', 'scan', 'line', 'produce', 'drawing', 'generate', 'trajectory', 'cnc', 'toolpath', 'mimic', 'reverse', 'layer', 'layer', 'physical', 'building', 'process.citation', 'need']"
3804,"Rapid prototyping is also commonly applied in software engineering to try out new business models and application architectures such as Aerospace, Automotive, Financial Services, Product development, and Healthcare.8 Aerospace design and industrial teams rely on prototyping in order to create new AM methodologies in the industry. Using SLA they can quickly make multiple versions of their projects in a few days and begin testing quicker.9 Rapid Prototyping allows designers/developers to provide an accurate idea of how the finished product will turn out before putting too much time and money into the prototype. 3D printing being used for Rapid Prototyping allows for Industrial 3D printing to take place. With this, you could have large-scale moulds to spare parts being pumped out quickly within a short period of time.10","['rapid', 'prototyping', 'commonly', 'apply', 'software', 'engineering', 'try', 'new', 'business', 'model', 'application', 'architecture', 'aerospace', 'automotive', 'financial', 'services', 'product', 'development', 'healthcare', 'aerospace', 'design', 'industrial', 'team', 'rely', 'prototype', 'order', 'create', 'new', 'methodology', 'industry', 'sla', 'quickly', 'multiple', 'version', 'project', 'day', 'begin', 'test', 'quicker', 'rapid', 'prototyping', 'allow', 'designer', 'developer', 'provide', 'accurate', 'idea', 'finished', 'product', 'turn', 'put', 'time', 'money', 'prototype', 'print', 'rapid', 'prototyping', 'allow', 'industrial', 'print', 'place', 'large', 'scale', 'mould', 'spare', 'part', 'pump', 'quickly', 'short', 'period', 'time']"
3805,"In the 1970s, Joseph Henry Condon and others at Bell Labs developed the Unix Circuit Design System UCDS, automating the laborious and error-prone task of manually converting drawings to fabricate circuit boards for the purposes of research and development.","['1970', 'joseph', 'henry', 'condon', 'bell', 'labs', 'develop', 'unix', 'circuit', 'design', 'system', 'ucds', 'automate', 'laborious', 'error', 'prone', 'task', 'manually', 'convert', 'drawing', 'fabricate', 'circuit', 'board', 'purpose', 'research', 'development']"
3806,"By the 1980s, U.S. policy makers and industrial managers were forced to take note that America's dominance in the field of machine tool manufacturing evaporated, in what was named the machine tool crisis. Numerous projects sought to counter these trends in the traditional CNC CAM area, which had begun in the US. Later when Rapid Prototyping Systems moved out of labs to be commercialized, it was recognized that developments were already international and U.S. rapid prototyping companies would not have the luxury of letting a lead slip away. The National Science Foundation was an umbrella for the National Aeronautics and Space Administration NASA, the US Department of Energy, the US Department of Commerce NIST, the US Department of Defense, Defense Advanced Research Projects Agency DARPA, and the Office of Naval Research coordinated studies to inform strategic planners in their deliberations. One such report was the 1997 Rapid Prototyping in Europe and Japan Panel Report2 in which Joseph J. Beaman11 founder of DTM Corporation DTM RapidTool pictured provides a historical perspective:","['1980s', 'u.s.', 'policy', 'maker', 'industrial', 'manager', 'force', 'note', 'america', 'dominance', 'field', 'machine', 'tool', 'manufacturing', 'evaporate', 'name', 'machine', 'tool', 'crisis', 'numerous', 'project', 'seek', 'counter', 'trend', 'traditional', 'cnc', 'cam', 'area', 'begin', 'later', 'rapid', 'prototyping', 'systems', 'move', 'lab', 'commercialize', 'recognize', 'development', 'international', 'u.s.', 'rapid', 'prototyping', 'company', 'luxury', 'let', 'lead', 'slip', 'away', 'national', 'science', 'foundation', 'umbrella', 'national', 'aeronautics', 'space', 'administration', 'nasa', 'department', 'energy', 'department', 'commerce', 'nist', 'department', 'defense', 'defense', 'advanced', 'research', 'projects', 'agency', 'darpa', 'office', 'naval', 'research', 'coordinate', 'study', 'inform', 'strategic', 'planner', 'deliberation', 'report', '1997', 'rapid', 'prototyping', 'europe', 'japan', 'panel', 'report2', 'joseph', 'beaman11', 'founder', 'dtm', 'corporation', 'dtm', 'rapidtool', 'picture', 'provide', 'historical', 'perspective']"
3807,"The roots of rapid prototyping technology can be traced to practices in topography and photosculpture. Within TOPOGRAPHY Blanther 1892 suggested a layered method for making a mold for raised relief paper topographical maps .The process involved cutting the contour lines on a series of plates which were then stacked. Matsubara 1974 of Mitsubishi proposed a topographical process with a photo-hardening photopolymer resin to form thin layers stacked to make a casting mold. PHOTOSCULPTURE was a 19th-century technique to create exact three-dimensional replicas of objects. Most famously Francois Willeme 1860 placed 24 cameras in a circular array and simultaneously photographed an object. The silhouette of each photograph was then used to carve a replica. Morioka 1935, 1944 developed a hybrid photo sculpture and topographic process using structured light to photographically create contour lines of an object. The lines could then be developed into sheets and cut and stacked, or projected onto stock material for carving. The Munz 1956 Process reproduced a three-dimensional image of an object by selectively exposing, layer by layer, a photo emulsion on a lowering piston. After fixing, a solid transparent cylinder contains an image of the object.","['root', 'rapid', 'prototyping', 'technology', 'trace', 'practice', 'topography', 'photosculpture', 'topography', 'blanther', '1892', 'suggest', 'layered', 'method', 'make', 'mold', 'raise', 'relief', 'paper', 'topographical', 'map', '.the', 'process', 'involve', 'cut', 'contour', 'line', 'series', 'plate', 'stack', 'matsubara', '1974', 'mitsubishi', 'propose', 'topographical', 'process', 'photo', 'harden', 'photopolymer', 'resin', 'form', 'thin', 'layer', 'stack', 'casting', 'mold', 'photosculpture', '19th', 'century', 'technique', 'create', 'exact', 'dimensional', 'replica', 'object', 'famously', 'francois', 'willeme', '1860', 'place', 'camera', 'circular', 'array', 'simultaneously', 'photograph', 'object', 'silhouette', 'photograph', 'carve', 'replica', 'morioka', '1935', '1944', 'develop', 'hybrid', 'photo', 'sculpture', 'topographic', 'process', 'structured', 'light', 'photographically', 'create', 'contour', 'line', 'object', 'line', 'develop', 'sheet', 'cut', 'stack', 'project', 'stock', 'material', 'carving', 'munz', '1956', 'process', 'reproduce', 'dimensional', 'image', 'object', 'selectively', 'expose', 'layer', 'layer', 'photo', 'emulsion', 'lower', 'piston', 'fix', 'solid', 'transparent', 'cylinder', 'contain', 'image', 'object']"
3808,"""The Origins of Rapid Prototyping - RP stems from the ever-growing CAD industry, more specifically, the solid modeling side of CAD. Before solid modeling was introduced in the late 1980's, three-dimensional models were created with wire frames and surfaces. But not until the development of true solid modeling could innovative processes such as RP be developed. Charles Hull, who helped found 3D Systems in 1986, developed the first RP process. This process, called stereolithography, builds objects by curing thin consecutive layers of certain ultraviolet light-sensitive liquid resins with a low-power laser. With the introduction of RP, CAD solid models could suddenly come to life"".13","['origin', 'rapid', 'prototyping', 'stem', 'grow', 'cad', 'industry', 'specifically', 'solid', 'modeling', 'cad', 'solid', 'modeling', 'introduce', 'late', '1980', 'dimensional', 'model', 'create', 'wire', 'frame', 'surface', 'development', 'true', 'solid', 'modeling', 'innovative', 'process', 'develop', 'charles', 'hull', 'helped', 'find', 'systems', '1986', 'develop', 'process', 'process', 'call', 'stereolithography', 'build', 'object', 'cure', 'thin', 'consecutive', 'layer', 'certain', 'ultraviolet', 'light', 'sensitive', 'liquid', 'resin', 'low', 'power', 'laser', 'introduction', 'cad', 'solid', 'model', 'suddenly', 'come', 'life']"
3809,"The technologies referred to as Solid Freeform Fabrication are what we recognize today as rapid prototyping, 3D printing or additive manufacturing: Swainson 1977, Schwerzel 1984 worked on polymerization of a photosensitive polymer at the intersection of two computer controlled laser beams. Ciraud 1972 considered magnetostatic or electrostatic deposition with electron beam, laser or plasma for sintered surface cladding. These were all proposed but it is unknown if working machines were built. Hideo Kodama of Nagoya Municipal Industrial Research Institute was the first to publish an account of a solid model fabricated using a photopolymer rapid prototyping system 1981.2 The very first 3D rapid prototyping system relying on Fused Deposition Modeling FDM was made in April 1992 by Stratasys but the patent did not issue until June 9, 1992. Sanders Prototype, Inc introduced the first desktop inkjet 3D Printer 3DP using an invention from August 4,1992 Helinski, Modelmaker 6Pro in late 1993 and then the larger industrial 3D printer, Modelmaker 2, in 1997.14 Z-Corp using the MIT 3DP powder binding for Direct Shell Casting DSP invented 1993 was introduced to the market in 1995.15 Even at that early date the technology was seen as having a place in manufacturing practice. A low resolution, low strength output had value in design verification, mold making, production jigs and other areas. Outputs have steadily advanced toward higher specification uses.16 Sanders Prototype, Inc. Solidscape started as a Rapid Prototyping 3D Printing manufacturer with the Modelmaker 6Pro for making sacrificial Thermoplastic patterns of CAD models uses Drop-On-Demand DOD inkjet single nozzle technology.15","['technology', 'refer', 'solid', 'freeform', 'fabrication', 'recognize', 'today', 'rapid', 'prototyping', 'printing', 'additive', 'manufacturing', 'swainson', '1977', 'schwerzel', '1984', 'work', 'polymerization', 'photosensitive', 'polymer', 'intersection', 'computer', 'control', 'laser', 'beam', 'ciraud', '1972', 'consider', 'magnetostatic', 'electrostatic', 'deposition', 'electron', 'beam', 'laser', 'plasma', 'sinter', 'surface', 'cladding', 'propose', 'unknown', 'working', 'machine', 'build', 'hideo', 'kodama', 'nagoya', 'municipal', 'industrial', 'research', 'institute', 'publish', 'account', 'solid', 'model', 'fabricate', 'photopolymer', 'rapid', 'prototyping', 'system', '1981', 'rapid', 'prototyping', 'system', 'rely', 'fused', 'deposition', 'modeling', 'fdm', 'april', '1992', 'stratasys', 'patent', 'issue', 'june', '1992', 'sanders', 'prototype', 'inc', 'introduce', 'desktop', 'inkjet', 'printer', '3dp', 'invention', 'august', '4', 'helinski', 'modelmaker', '6pro', 'late', '1993', 'large', 'industrial', 'printer', 'modelmaker', '1997', 'corp', 'mit', '3dp', 'powder', 'bind', 'direct', 'shell', 'casting', 'dsp', 'invent', '1993', 'introduce', 'market', '1995', 'early', 'date', 'technology', 'see', 'have', 'place', 'manufacturing', 'practice', 'low', 'resolution', 'low', 'strength', 'output', 'value', 'design', 'verification', 'mold', 'making', 'production', 'jig', 'area', 'output', 'steadily', 'advance', 'high', 'specification', 'uses', 'sanders', 'prototype', 'inc.', 'solidscape', 'start', 'rapid', 'prototyping', 'printing', 'manufacturer', 'modelmaker', '6pro', 'make', 'sacrificial', 'thermoplastic', 'pattern', 'cad', 'model', 'use', 'drop', 'demand', 'dod', 'inkjet', 'single', 'nozzle', 'technology']"
3810,"Innovations are constantly being sought, to improve speed and the ability to cope with mass production applications.17 A dramatic development which RP shares with related CNC areas is the freeware open-sourcing of high level applications which constitute an entire CAD-CAM toolchain. This has created a community of low res device manufacturers. Hobbyists have even made forays into more demanding laser-effected device designs.18","['innovation', 'constantly', 'seek', 'improve', 'speed', 'ability', 'cope', 'mass', 'production', 'applications', 'dramatic', 'development', 'share', 'relate', 'cnc', 'area', 'freeware', 'open', 'sourcing', 'high', 'level', 'application', 'constitute', 'entire', 'cad', 'cam', 'toolchain', 'create', 'community', 'low', 're', 'device', 'manufacturer', 'hobbyist', 'foray', 'demanding', 'laser', 'effect', 'device', 'designs']"
3811,"The earliest list of RP Processes or Fabrication Technologies published in 1993 was written by Marshall Burns and explains each process very thoroughly. It also names some technologies that were precursors to the names on the list below. For Example: Visual Impact Corporation only produced a prototype printer for wax deposition and then licensed the patent to Sanders Prototype, Inc instead. BPM used the same inkjets and materials.19","['early', 'list', 'processes', 'fabrication', 'technologies', 'publish', '1993', 'write', 'marshall', 'burns', 'explain', 'process', 'thoroughly', 'name', 'technology', 'precursor', 'name', 'list', 'example', 'visual', 'impact', 'corporation', 'produce', 'prototype', 'printer', 'wax', 'deposition', 'license', 'patent', 'sanders', 'prototype', 'inc', 'instead', 'bpm', 'inkjet', 'materials']"
3812,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3813,"Recursion adjective: recursive occurs when a thing is defined in terms of itself or of its type. Recursion is used in a variety of disciplines ranging from linguistics to logic. The most common application of recursion is in mathematics and computer science, where a function being defined is applied within its own definition. While this apparently defines an infinite number of instances function values, it is often done in such a way that no infinite loop or infinite chain of references ""crock recursion"" can occur.","['recursion', 'adjective', 'recursive', 'occur', 'thing', 'define', 'term', 'type', 'recursion', 'variety', 'discipline', 'range', 'linguistic', 'logic', 'common', 'application', 'recursion', 'mathematic', 'computer', 'science', 'function', 'define', 'apply', 'definition', 'apparently', 'define', 'infinite', 'number', 'instance', 'function', 'value', 'way', 'infinite', 'loop', 'infinite', 'chain', 'reference', 'crock', 'recursion', 'occur']"
3814,"In mathematics and computer science, a class of objects or methods exhibits recursive behavior when it can be defined by two properties:","['mathematic', 'computer', 'science', 'class', 'object', 'method', 'exhibit', 'recursive', 'behavior', 'define', 'property']"
3815,"For example, the following is a recursive definition of a person's ancestor. One's ancestor is either:","['example', 'following', 'recursive', 'definition', 'person', 'ancestor', 'ancestor']"
3816,The Fibonacci sequence is another classic example of recursion:,"['fibonacci', 'sequence', 'classic', 'example', 'recursion']"
3817,"Many mathematical axioms are based upon recursive rules. For example, the formal definition of the natural numbers by the Peano axioms can be described as: ""Zero is a natural number, and each natural number has a successor, which is also a natural number.""1 By this base case and recursive rule, one can generate the set of all natural numbers.","['mathematical', 'axiom', 'base', 'recursive', 'rule', 'example', 'formal', 'definition', 'natural', 'number', 'peano', 'axiom', 'describe', 'zero', 'natural', 'number', 'natural', 'number', 'successor', 'natural', 'number', 'base', 'case', 'recursive', 'rule', 'generate', 'set', 'natural', 'number']"
3818,"Other recursively defined mathematical objects include factorials, functions e.g., recurrence relations, sets e.g., Cantor ternary set, and fractals.","['recursively', 'define', 'mathematical', 'object', 'include', 'factorial', 'function', 'e.g.', 'recurrence', 'relation', 'set', 'e.g.', 'cantor', 'ternary', 'set', 'fractal']"
3819,There are various more tongue-in-cheek definitions of recursion; see recursive humor.,"['tongue', 'cheek', 'definition', 'recursion', 'recursive', 'humor']"
3820,Recursion is the process a procedure goes through when one of the steps of the procedure involves invoking the procedure itself. A procedure that goes through recursion is said to be 'recursive'.2,"['recursion', 'process', 'procedure', 'go', 'step', 'procedure', 'involve', 'invoke', 'procedure', 'procedure', 'go', 'recursion', 'say', ""recursive'""]"
3821,"To understand recursion, one must recognize the distinction between a procedure and the running of a procedure. A procedure is a set of steps based on a set of rules, while the running of a procedure involves actually following the rules and performing the steps.","['understand', 'recursion', 'recognize', 'distinction', 'procedure', 'running', 'procedure', 'procedure', 'set', 'step', 'base', 'set', 'rule', 'running', 'procedure', 'involve', 'actually', 'follow', 'rule', 'perform', 'step']"
3822,"Recursion is related to, but not the same as, a reference within the specification of a procedure to the execution of some other procedure.","['recursion', 'relate', 'reference', 'specification', 'procedure', 'execution', 'procedure']"
3823,"When a procedure is defined as such, this immediately creates the possibility of an endless loop; recursion can only be properly used in a definition if the step in question is skipped in certain cases so that the procedure can complete. Recursion comes in three forms: direct, indirect, and circular. Direct recursion is when a function A invokes itself A references A; indirect recursion occurs when one function A invokes B, function B invokes function C, function C invokes D, etc., until one of the functions in the chain invokes an earlier one. Circular recursion occurs when function A and function B invoke each other. If an infinite loop occurs in direct, indirect, or circular recursion, it is said to be the condition of ""crock recursion."" There are basically two ways to prevent crock recursion, either limit the number of times a function may reference itself, or place an absolute limit on the depth of function calls, e.g. if there is a depth limit of 50, any time a procedure calls another, a counter is increased; when it exits, that counter is decreased. Once the counter reaches the limit in this case, 50 no further procedure calls are allowed; if any attempt to call a 51st function is made, the operation is terminated. Using a recursion limit prevents only crock recursion; placing a call limit, in addition to halting crock recursion, may have the side effect of preventing the execution of legitimate complex procedures which are deeply nested, but not recursive.","['procedure', 'define', 'immediately', 'create', 'possibility', 'endless', 'loop', 'recursion', 'properly', 'definition', 'step', 'question', 'skip', 'certain', 'case', 'procedure', 'complete', 'recursion', 'come', 'form', 'direct', 'indirect', 'circular', 'direct', 'recursion', 'function', 'invoke', 'reference', 'indirect', 'recursion', 'occur', 'function', 'invoke', 'function', 'invoke', 'function', 'function', 'invoke', 'etc', 'function', 'chain', 'invoke', 'early', 'circular', 'recursion', 'occur', 'function', 'function', 'invoke', 'infinite', 'loop', 'occur', 'direct', 'indirect', 'circular', 'recursion', 'say', 'condition', 'crock', 'recursion', 'basically', 'way', 'prevent', 'crock', 'recursion', 'limit', 'number', 'time', 'function', 'reference', 'place', 'absolute', 'limit', 'depth', 'function', 'call', 'e.g.', 'depth', 'limit', 'time', 'procedure', 'call', 'counter', 'increase', 'exit', 'counter', 'decrease', 'counter', 'reach', 'limit', 'case', 'procedure', 'call', 'allow', 'attempt', '51st', 'function', 'operation', 'terminate', 'recursion', 'limit', 'prevent', 'crock', 'recursion', 'place', 'limit', 'addition', 'halt', 'crock', 'recursion', 'effect', 'prevent', 'execution', 'legitimate', 'complex', 'procedure', 'deeply', 'nest', 'recursive']"
3824,"But even if it is properly defined, a recursive procedure is not easy for humans to perform, as it requires distinguishing the new from the old, partially executed invocation of the procedure; this requires some administration as to how far various simultaneous instances of the procedures have progressed. For this reason, recursive definitions are very rare in everyday situations.","['properly', 'define', 'recursive', 'procedure', 'easy', 'human', 'perform', 'require', 'distinguish', 'new', 'old', 'partially', 'execute', 'invocation', 'procedure', 'require', 'administration', 'far', 'simultaneous', 'instance', 'procedure', 'progress', 'reason', 'recursive', 'definition', 'rare', 'everyday', 'situation']"
3825,"Linguist Noam Chomsky, among many others, has argued that the lack of an upper bound on the number of grammatical sentences in a language, and the lack of an upper bound on grammatical sentence length beyond practical constraints such as the time available to utter one, can be explained as the consequence of recursion in natural language.34","['linguist', 'noam', 'chomsky', 'argue', 'lack', 'upper', 'bound', 'number', 'grammatical', 'sentence', 'language', 'lack', 'upper', 'bound', 'grammatical', 'sentence', 'length', 'practical', 'constraint', 'time', 'available', 'utter', 'explain', 'consequence', 'recursion', 'natural', 'language']"
3826,"This can be understood in terms of a recursive definition of a syntactic category, such as a sentence. A sentence can have a structure in which what follows the verb is another sentence: Dorothy thinks witches are dangerous, in which the sentence witches are dangerous occurs in the larger one. So a sentence can be defined recursively very roughly as something with a structure that includes a noun phrase, a verb, and optionally another sentence. This is really just a special case of the mathematical definition of recursion.","['understand', 'term', 'recursive', 'definition', 'syntactic', 'category', 'sentence', 'sentence', 'structure', 'follow', 'verb', 'sentence', 'dorothy', 'think', 'witch', 'dangerous', 'sentence', 'witch', 'dangerous', 'occur', 'large', 'sentence', 'define', 'recursively', 'roughly', 'structure', 'include', 'noun', 'phrase', 'verb', 'optionally', 'sentence', 'special', 'case', 'mathematical', 'definition', 'recursion']"
3827,"This provides a way of understanding the creativity of language—the unbounded number of grammatical sentences—because it immediately predicts that sentences can be of arbitrary length: Dorothy thinks that Toto suspects that Tin Man said that.... There are many structures apart from sentences that can be defined recursively, and therefore many ways in which a sentence can embed instances of one category inside another.5 Over the years, languages in general have proved amenable to this kind of analysis.","['provide', 'way', 'understand', 'creativity', 'language', 'unbounded', 'number', 'grammatical', 'sentence', 'immediately', 'predict', 'sentence', 'arbitrary', 'length', 'dorothy', 'think', 'toto', 'suspect', 'tin', 'man', 'say', 'structure', 'apart', 'sentence', 'define', 'recursively', 'way', 'sentence', 'embed', 'instance', 'category', 'inside', 'another', 'year', 'language', 'general', 'prove', 'amenable', 'kind', 'analysis']"
3828,"The generally accepted idea that recursion is an essential property of human language has been challenged by Daniel Everett on the basis of his claims about the Pirahã language. Andrew Nevins, David Pesetsky and Cilene Rodrigues are among many who have refuted this challenge.6 Literary self-reference can in any case be argued to be different in kind from mathematical or logical recursion.7","['generally', 'accept', 'idea', 'recursion', 'essential', 'property', 'human', 'language', 'challenge', 'daniel', 'everett', 'basis', 'claim', 'pirahã', 'language', 'andrew', 'nevins', 'david', 'pesetsky', 'cilene', 'rodrigues', 'refute', 'challenge', 'literary', 'self', 'reference', 'case', 'argue', 'different', 'kind', 'mathematical', 'logical', 'recursion']"
3829,"Recursion plays a crucial role not only in syntax, but also in natural language semantics. The word and, for example, can be construed as a function that can apply to sentence meanings to create new sentences, and likewise for noun phrase meanings, verb phrase meanings, and others. It can also apply to intransitive verbs, transitive verbs, or ditransitive verbs. In order to provide a single denotation for it that is suitably flexible, and is typically defined so that it can take any of these different types of meanings as arguments. This can be done by defining it for a simple case in which it combines sentences, and then defining the other cases recursively in terms of the simple one.8","['recursion', 'play', 'crucial', 'role', 'syntax', 'natural', 'language', 'semantic', 'word', 'example', 'construe', 'function', 'apply', 'sentence', 'meaning', 'create', 'new', 'sentence', 'likewise', 'noun', 'phrase', 'meaning', 'verb', 'phrase', 'meaning', 'apply', 'intransitive', 'verb', 'transitive', 'verb', 'ditransitive', 'verb', 'order', 'provide', 'single', 'denotation', 'suitably', 'flexible', 'typically', 'define', 'different', 'type', 'meaning', 'argument', 'define', 'simple', 'case', 'combine', 'sentence', 'define', 'case', 'recursively', 'term', 'simple', 'one']"
3830,A recursive grammar is a formal grammar that contains recursive production rules.9,"['recursive', 'grammar', 'formal', 'grammar', 'contain', 'recursive', 'production', 'rules']"
3831,"Recursion is sometimes used humorously in computer science, programming, philosophy, or mathematics textbooks, generally by giving a circular definition or self-reference, in which the putative recursive step does not get closer to a base case, but instead leads to an infinite regress. It is not unusual for such books to include a joke entry in their glossary along the lines of:","['recursion', 'humorously', 'computer', 'science', 'programming', 'philosophy', 'mathematic', 'textbook', 'generally', 'give', 'circular', 'definition', 'self', 'reference', 'putative', 'recursive', 'step', 'close', 'base', 'case', 'instead', 'lead', 'infinite', 'regress', 'unusual', 'book', 'include', 'joke', 'entry', 'glossary', 'line']"
3832,"A variation is found on page 269 in the index of some editions of Brian Kernighan and Dennis Ritchie's book The C Programming Language; the index entry recursively references itself ""recursion 86, 139, 141, 182, 202, 269"". Early versions of this joke can be found in Let's talk Lisp by Laurent Siklóssy published by Prentice Hall PTR on December 1, 1975, with a copyright date of 1976 and in Software Tools by Kernighan and Plauger published by Addison-Wesley Professional on January 11, 1976. The joke also appears in The UNIX Programming Environment by Kernighan and Pike. It did not appear in the first edition of The C Programming Language. The joke is part of the Functional programming folklore and was already widespread in the functional programming community before the publication of the aforementioned books.","['variation', 'find', 'page', '269', 'index', 'edition', 'brian', 'kernighan', 'dennis', 'ritchie', 'book', 'programming', 'language', 'index', 'entry', 'recursively', 'reference', 'recursion', '139', '141', '182', '202', '269', 'early', 'version', 'joke', 'find', 'let', 'talk', 'lisp', 'laurent', 'siklóssy', 'publish', 'prentice', 'hall', 'ptr', 'december', '1975', 'copyright', 'date', '1976', 'software', 'tools', 'kernighan', 'plauger', 'publish', 'addison', 'wesley', 'professional', 'january', '1976', 'joke', 'appear', 'unix', 'programming', 'environment', 'kernighan', 'pike', 'appear', 'edition', 'programming', 'language', 'joke', 'functional', 'programming', 'folklore', 'widespread', 'functional', 'programming', 'community', 'publication', 'aforementione', 'book']"
3833,"Another joke is that ""To understand recursion, you must understand recursion.""10 In the English-language version of the Google web search engine, when a search for ""recursion"" is made, the site suggests ""Did you mean: recursion.""11 An alternative form is the following, from Andrew Plotkin: ""If you already know what recursion is, just remember the answer. Otherwise, find someone who is standing closer to Douglas Hofstadter than you are; then ask him or her what recursion is.""","['joke', 'understand', 'recursion', 'understand', 'recursion', '10', 'english', 'language', 'version', 'google', 'web', 'search', 'engine', 'search', 'recursion', 'site', 'suggest', 'mean', 'recursion', '11', 'alternative', 'form', 'follow', 'andrew', 'plotkin', 'know', 'recursion', 'remember', 'answer', 'find', 'stand', 'close', 'douglas', 'hofstadter', 'ask', 'recursion']"
3834,"Recursive acronyms are other examples of recursive humor. PHP, for example, stands for ""PHP Hypertext Preprocessor"", WINE stands for ""WINE Is Not an Emulator"" GNU stands for ""GNU's not Unix"", and SPARQL denotes the ""SPARQL Protocol and RDF Query Language"".","['recursive', 'acronym', 'example', 'recursive', 'humor', 'php', 'example', 'stand', 'php', 'hypertext', 'preprocessor', 'wine', 'stand', 'wine', 'emulator', 'gnu', 'stand', 'gnu', 'unix', 'sparql', 'denote', 'sparql', 'protocol', 'rdf', 'query', 'language']"
3835,The canonical example of a recursively defined set is given by the natural numbers:,"['canonical', 'example', 'recursively', 'define', 'set', 'give', 'natural', 'number']"
3836,"In mathematical logic, the Peano axioms or Peano postulates or Dedekind–Peano axioms, are axioms for the natural numbers presented in the 19th century by the German mathematician Richard Dedekind and by the Italian mathematician Giuseppe Peano. The Peano Axioms define the natural numbers referring to a recursive successor function and addition and multiplication as recursive functions.","['mathematical', 'logic', 'peano', 'axiom', 'peano', 'postulate', 'dedekind', 'peano', 'axiom', 'axiom', 'natural', 'number', 'present', '19th', 'century', 'german', 'mathematician', 'richard', 'dedekind', 'italian', 'mathematician', 'giuseppe', 'peano', 'peano', 'axioms', 'define', 'natural', 'number', 'refer', 'recursive', 'successor', 'function', 'addition', 'multiplication', 'recursive', 'function']"
3837,"Another interesting example is the set of all ""provable"" propositions in an axiomatic system that are defined in terms of a proof procedure which is inductively or recursively defined as follows:","['interesting', 'example', 'set', 'provable', 'proposition', 'axiomatic', 'system', 'define', 'term', 'proof', 'procedure', 'inductively', 'recursively', 'define', 'follow']"
3838,"Finite subdivision rules are a geometric form of recursion, which can be used to create fractal-like images. A subdivision rule starts with a collection of polygons labelled by finitely many labels, and then each polygon is subdivided into smaller labelled polygons in a way that depends only on the labels of the original polygon. This process can be iterated. The standard `middle thirds' technique for creating the Cantor set is a subdivision rule, as is barycentric subdivision.","['finite', 'subdivision', 'rule', 'geometric', 'form', 'recursion', 'create', 'fractal', 'like', 'image', 'subdivision', 'rule', 'start', 'collection', 'polygon', 'label', 'finitely', 'label', 'polygon', 'subdivide', 'small', 'label', 'polygon', 'way', 'depend', 'label', 'original', 'polygon', 'process', 'iterate', 'standard', 'middle', 'third', 'technique', 'create', 'cantor', 'set', 'subdivision', 'rule', 'barycentric', 'subdivision']"
3839,"A function may be recursively defined in terms of itself. A familiar example is the Fibonacci number sequence: Fn = Fn − 1 + Fn − 2. For such a definition to be useful, it must be reducible to non-recursively defined values: in this case F0 = 0 and F1 = 1.","['function', 'recursively', 'define', 'term', 'familiar', 'example', 'fibonacci', 'number', 'sequence', 'definition', 'useful', 'reducible', 'non', 'recursively', 'define', 'value', 'case']"
3840,"A famous recursive function is the Ackermann function, which, unlike the Fibonacci sequence, cannot be expressed without recursion.citation needed","['famous', 'recursive', 'function', 'ackermann', 'function', 'unlike', 'fibonacci', 'sequence', 'express', 'recursion.citation', 'need']"
3841,"Applying the standard technique of proof by cases to recursively defined sets or functions, as in the preceding sections, yields structural induction — a powerful generalization of mathematical induction widely used to derive proofs in mathematical logic and computer science.","['apply', 'standard', 'technique', 'proof', 'case', 'recursively', 'define', 'set', 'function', 'precede', 'section', 'yield', 'structural', 'induction', 'powerful', 'generalization', 'mathematical', 'induction', 'widely', 'derive', 'proof', 'mathematical', 'logic', 'computer', 'science']"
3842,"Dynamic programming is an approach to optimization that restates a multiperiod or multistep optimization problem in recursive form. The key result in dynamic programming is the Bellman equation, which writes the value of the optimization problem at an earlier time or earlier step in terms of its value at a later time or later step.","['dynamic', 'programming', 'approach', 'optimization', 'restate', 'multiperiod', 'multistep', 'optimization', 'problem', 'recursive', 'form', 'key', 'result', 'dynamic', 'programming', 'bellman', 'equation', 'write', 'value', 'optimization', 'problem', 'early', 'time', 'early', 'step', 'term', 'value', 'later', 'time', 'later', 'step']"
3843,"In set theory, this is a theorem guaranteeing that recursively defined functions exist. Given a set X, an element a of X and a function f: X → X, the theorem states that there is a unique function F : N → X \displaystyle F:\mathbb N \to X where N \displaystyle \mathbb N denotes the set of natural numbers including zero such that","['set', 'theory', 'theorem', 'guarantee', 'recursively', 'define', 'function', 'exist', 'give', 'set', 'element', 'function', 'theorem', 'state', 'unique', 'function', 'denote', 'set', 'natural', 'number', 'include', 'zero']"
3844,Take two functions F : N → X \displaystyle F:\mathbb N \to X and G : N → X \displaystyle G:\mathbb N \to X such that:,['function']
3845,where a is an element of X.,['element']
3846,It can be proved by mathematical induction that Fn = Gn for all natural numbers n:,"['prove', 'mathematical', 'induction', 'natural', 'number']"
3847,"By induction, Fn = Gn for all n ∈ N \displaystyle n\in \mathbb N .",['induction']
3848,"A common method of simplification is to divide a problem into subproblems of the same type. As a computer programming technique, this is called divide and conquer and is key to the design of many important algorithms. Divide and conquer serves as a top-down approach to problem solving, where problems are solved by solving smaller and smaller instances. A contrary approach is dynamic programming. This approach serves as a bottom-up approach, where problems are solved by solving larger and larger instances, until the desired size is reached.","['common', 'method', 'simplification', 'divide', 'problem', 'subproblem', 'type', 'computer', 'programming', 'technique', 'call', 'divide', 'conquer', 'key', 'design', 'important', 'algorithm', 'divide', 'conquer', 'serve', 'approach', 'problem', 'solving', 'problem', 'solve', 'solve', 'small', 'small', 'instance', 'contrary', 'approach', 'dynamic', 'programming', 'approach', 'serve', 'approach', 'problem', 'solve', 'solve', 'large', 'large', 'instance', 'desire', 'size', 'reach']"
3849,"A classic example of recursion is the definition of the factorial function, given here in C code:","['classic', 'example', 'recursion', 'definition', 'factorial', 'function', 'give', 'code']"
3850,"The function calls itself recursively on a smaller version of the input n - 1 and multiplies the result of the recursive call by n, until reaching the base case, analogously to the mathematical definition of factorial.","['function', 'call', 'recursively', 'small', 'version', 'input', 'multiply', 'result', 'recursive', 'reach', 'base', 'case', 'analogously', 'mathematical', 'definition', 'factorial']"
3851,"Recursion in computer programming is exemplified when a function is defined in terms of simpler, often smaller versions of itself. The solution to the problem is then devised by combining the solutions obtained from the simpler versions of the problem. One example application of recursion is in parsers for programming languages. The great advantage of recursion is that an infinite set of possible sentences, designs or other data can be defined, parsed or produced by a finite computer program.","['recursion', 'computer', 'programming', 'exemplify', 'function', 'define', 'term', 'simple', 'small', 'version', 'solution', 'problem', 'devise', 'combine', 'solution', 'obtain', 'simple', 'version', 'problem', 'example', 'application', 'recursion', 'parser', 'programming', 'language', 'great', 'advantage', 'recursion', 'infinite', 'set', 'possible', 'sentence', 'design', 'datum', 'define', 'parse', 'produce', 'finite', 'computer', 'program']"
3852,"Recurrence relations are equations which define one or more sequences recursively. Some specific kinds of recurrence relation can be ""solved"" to obtain a non-recursive definition e.g., a closed-form expression.","['recurrence', 'relation', 'equation', 'define', 'sequence', 'recursively', 'specific', 'kind', 'recurrence', 'relation', 'solve', 'obtain', 'non', 'recursive', 'definition', 'e.g.', 'closed', 'form', 'expression']"
3853,"Use of recursion in an algorithm has both advantages and disadvantages. The main advantage is usually the simplicity of instructions. The main disadvantage is that the memory usage of recursive algorithms may grow very quickly, rendering them impractical for larger instances.","['use', 'recursion', 'algorithm', 'advantage', 'disadvantage', 'main', 'advantage', 'usually', 'simplicity', 'instruction', 'main', 'disadvantage', 'memory', 'usage', 'recursive', 'algorithm', 'grow', 'quickly', 'render', 'impractical', 'large', 'instance']"
3854,"Shapes that seem to have been created by recursive processes sometimes appear in plants and animals, such as in branching structures in which one large part branches out into two or more similar smaller parts. One example is Romanesco broccoli.12","['shape', 'create', 'recursive', 'process', 'appear', 'plant', 'animal', 'branch', 'structure', 'large', 'branch', 'similar', 'small', 'part', 'example', 'romanesco', 'broccoli']"
3855,The Russian Doll or Matryoshka doll is a physical artistic example of the recursive concept.13,"['russian', 'doll', 'matryoshka', 'doll', 'physical', 'artistic', 'example', 'recursive', 'concept']"
3856,"Recursion has been used in paintings since Giotto's Stefaneschi Triptych, made in 1320. Its central panel contains the kneeling figure of Cardinal Stefaneschi, holding up the triptych itself as an offering.1415 This practice is more generally known as the Droste effect, an example of the Mise en abyme technique.","['recursion', 'painting', 'giotto', 'stefaneschi', 'triptych', '1320', 'central', 'panel', 'contain', 'kneeling', 'figure', 'cardinal', 'stefaneschi', 'hold', 'triptych', 'offering', 'practice', 'generally', 'know', 'droste', 'effect', 'example', 'mise', 'abyme', 'technique']"
3857,"M. C. Escher's Print Gallery 1956 is a print which depicts a distorted city containing a gallery which recursively contains the picture, and so ad infinitum.16","['escher', 'print', 'gallery', '1956', 'print', 'depict', 'distorted', 'city', 'contain', 'gallery', 'recursively', 'contain', 'picture', 'infinitum']"
3858,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3859,Refinement is a generic term of computer science that encompasses various approaches for producing correct computer programs and simplifying existing programs to enable their formal verification.,"['refinement', 'generic', 'term', 'computer', 'science', 'encompass', 'approach', 'produce', 'correct', 'computer', 'program', 'simplify', 'exist', 'program', 'enable', 'formal', 'verification']"
3860,"In formal methods, program refinement is the verifiable transformation of an abstract high-level formal specification into a concrete low-level executable program.citation needed Stepwise refinement allows this process to be done in stages. Logically, refinement normally involves implication, but there can be additional complications.","['formal', 'method', 'program', 'refinement', 'verifiable', 'transformation', 'abstract', 'high', 'level', 'formal', 'specification', 'concrete', 'low', 'level', 'executable', 'program.citation', 'need', 'stepwise', 'refinement', 'allow', 'process', 'stage', 'logically', 'refinement', 'normally', 'involve', 'implication', 'additional', 'complication']"
3861,"The progressive just-in-time preparation of the product backlog requirements list in agile software development approaches, such as Scrum, is also commonly described as refinement.1","['progressive', 'time', 'preparation', 'product', 'backlog', 'requirement', 'list', 'agile', 'software', 'development', 'approach', 'scrum', 'commonly', 'describe', 'refinement']"
3862,"Data refinement is used to convert an abstract data model in terms of sets for example into implementable data structures such as arrays.citation needed Operation refinement converts a specification of an operation on a system into an implementable program e.g., a procedure. The postcondition can be strengthened and/or the precondition weakened in this process. This reduces any nondeterminism in the specification, typically to a completely deterministic implementation.","['datum', 'refinement', 'convert', 'abstract', 'data', 'model', 'term', 'set', 'example', 'implementable', 'datum', 'structure', 'arrays.citation', 'need', 'operation', 'refinement', 'convert', 'specification', 'operation', 'system', 'implementable', 'program', 'e.g.', 'procedure', 'postcondition', 'strengthen', 'precondition', 'weaken', 'process', 'reduce', 'nondeterminism', 'specification', 'typically', 'completely', 'deterministic', 'implementation']"
3863,"For example, x ∈ 1,2,3 where x is the value of the variable x after an operation could be refined to x ∈ 1,2, then x ∈ 1, and implemented as x := 1. Implementations of x := 2 and x := 3 would be equally acceptable in this case, using a different route for the refinement. However, we must be careful not to refine to x ∈ equivalent to false since this is unimplementable; it is impossible to select a member from the empty set.","['example', '1', 'value', 'variable', 'operation', 'refine', '1', 'implement', 'implementation', 'equally', 'acceptable', 'case', 'different', 'route', 'refinement', 'careful', 'refine', 'equivalent', 'false', 'unimplementable', 'impossible', 'select', 'member', 'set']"
3864,The term reification is also sometimes used coined by Cliff Jones. Retrenchment is an alternative technique when formal refinement is not possible. The opposite of refinement is abstraction.,"['term', 'reification', 'coin', 'cliff', 'jones', 'retrenchment', 'alternative', 'technique', 'formal', 'refinement', 'possible', 'opposite', 'refinement', 'abstraction']"
3865,Refinement calculus is a formal system inspired from Hoare logic that promotes program refinement. The FermaT Transformation System is an industrial-strength implementation of refinement. The B-Method is also a formal method that extends refinement calculus with a component language: it has been used in industrial developments.,"['refinement', 'calculus', 'formal', 'system', 'inspire', 'hoare', 'logic', 'promote', 'program', 'refinement', 'fermat', 'transformation', 'system', 'industrial', 'strength', 'implementation', 'refinement', 'method', 'formal', 'method', 'extend', 'refinement', 'calculus', 'component', 'language', 'industrial', 'development']"
3866,"In type theory, a refinement type234 is a type endowed with a predicate which is assumed to hold for any element of the refined type. Refinement types can express preconditions when used as function arguments or postconditions when used as return types: for instance, the type of a function which accepts natural numbers and returns natural numbers greater than 5 may be written as f : N → n : N | n > 5 \displaystyle f:\mathbb N \rightarrow \n:\mathbb N \,|\,n>5\ . Refinement types are thus related to behavioral subtyping.","['type', 'theory', 'refinement', 'type234', 'type', 'endow', 'predicate', 'assume', 'hold', 'element', 'refined', 'type', 'refinement', 'type', 'express', 'precondition', 'function', 'argument', 'postcondition', 'return', 'type', 'instance', 'type', 'function', 'accept', 'natural', 'number', 'return', 'natural', 'number', 'great', 'write', 'refinement', 'type', 'relate', 'behavioral', 'subtyping']"
3867,This software-engineering-related article is a stub. You can help Wikipedia by expanding it.,"['software', 'engineering', 'relate', 'article', 'stub', 'help', 'wikipedia', 'expand']"
3868,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3869,"In computer science, reflective programming or reflection is the ability of a process to examine, introspect, and modify its own structure and behavior.1","['computer', 'science', 'reflective', 'programming', 'reflection', 'ability', 'process', 'examine', 'introspect', 'modify', 'structure', 'behavior']"
3870,"The earliest computers were programmed in their native assembly languages, which were inherently reflective, as these original architectures could be programmed by defining instructions as data and using self-modifying code. As the bulk of programming moved to higher-level compiled languages such as Algol, Cobol, Fortran, Pascal, and C, this reflective ability largely disappeared until new programming languages with reflection built into their type systems appeared.citation needed","['early', 'computer', 'program', 'native', 'assembly', 'language', 'inherently', 'reflective', 'original', 'architecture', 'program', 'define', 'instruction', 'datum', 'self', 'modifying', 'code', 'bulk', 'programming', 'move', 'high', 'level', 'compile', 'language', 'algol', 'cobol', 'fortran', 'pascal', 'reflective', 'ability', 'largely', 'disappear', 'new', 'programming', 'language', 'reflection', 'build', 'type', 'system', 'appeared.citation', 'need']"
3871,Brian Cantwell Smith's 1982 doctoral dissertation introduced the notion of computational reflection in procedural programming languages and the notion of the meta-circular interpreter as a component of 3-Lisp.23,"['brian', 'cantwell', 'smith', '1982', 'doctoral', 'dissertation', 'introduce', 'notion', 'computational', 'reflection', 'procedural', 'programming', 'language', 'notion', 'meta', 'circular', 'interpreter', 'component', 'lisp']"
3872,"Reflection helps programmers make generic software libraries to display data, process different formats of data, perform serialization or deserialization of data for communication, or do bundling and unbundling of data for containers or bursts of communication.","['reflection', 'help', 'programmer', 'generic', 'software', 'librarie', 'display', 'datum', 'process', 'different', 'format', 'datum', 'perform', 'serialization', 'deserialization', 'datum', 'communication', 'bundling', 'unbundling', 'datum', 'container', 'burst', 'communication']"
3873,"Effective use of reflection almost always requires a plan: A design framework, encoding description, object library, a map of a database or entity relations.","['effective', 'use', 'reflection', 'require', 'plan', 'design', 'framework', 'encode', 'description', 'object', 'library', 'map', 'database', 'entity', 'relation']"
3874,"Reflection makes a language more suited to network-oriented code. For example, it assists languages such as Java to operate well in networks by enabling libraries for serialization, bundling and varying data formats. Languages without reflection such as C are required to use auxiliary compilers for tasks like Abstract Syntax Notation to produce code for serialization and bundling.","['reflection', 'make', 'language', 'suited', 'network', 'orient', 'code', 'example', 'assist', 'language', 'java', 'operate', 'network', 'enable', 'library', 'serialization', 'bundling', 'vary', 'data', 'format', 'language', 'reflection', 'require', 'use', 'auxiliary', 'compiler', 'task', 'like', 'abstract', 'syntax', 'notation', 'produce', 'code', 'serialization', 'bundling']"
3875,Reflection can be used for observing and modifying program execution at runtime. A reflection-oriented program component can monitor the execution of an enclosure of code and can modify itself according to a desired goal of that enclosure. This is typically accomplished by dynamically assigning program code at runtime.,"['reflection', 'observe', 'modify', 'program', 'execution', 'runtime', 'reflection', 'orient', 'program', 'component', 'monitor', 'execution', 'enclosure', 'code', 'modify', 'accord', 'desire', 'goal', 'enclosure', 'typically', 'accomplish', 'dynamically', 'assign', 'program', 'code', 'runtime']"
3876,"In object-oriented programming languages such as Java, reflection allows inspection of classes, interfaces, fields and methods at runtime without knowing the names of the interfaces, fields, methods at compile time. It also allows instantiation of new objects and invocation of methods.","['object', 'orient', 'programming', 'language', 'java', 'reflection', 'allow', 'inspection', 'class', 'interface', 'field', 'method', 'runtime', 'know', 'name', 'interface', 'field', 'method', 'compile', 'time', 'allow', 'instantiation', 'new', 'object', 'invocation', 'method']"
3877,"Reflection is often used as part of software testing, such as for the runtime creation/instantiation of mock objects.","['reflection', 'software', 'testing', 'runtime', 'creation', 'instantiation', 'mock', 'object']"
3878,Reflection is also a key strategy for metaprogramming.,"['reflection', 'key', 'strategy', 'metaprogramme']"
3879,"In some object-oriented programming languages such as C# and Java, reflection can be used to bypass member accessibility rules. For C#-properties this can be achieved by writing directly onto the usually invisible backing field of a non-public property. It is also possible to find non-public methods of classes and types and manually invoke them. This works for project-internal files as well as external libraries such as .NET's assemblies and Java's archives.","['object', 'orient', 'programming', 'language', 'java', 'reflection', 'bypass', 'member', 'accessibility', 'rule', 'c#-propertie', 'achieve', 'write', 'directly', 'usually', 'invisible', 'backing', 'field', 'non', 'public', 'property', 'possible', 'find', 'non', 'public', 'method', 'class', 'type', 'manually', 'invoke', 'work', 'project', 'internal', 'file', 'external', 'library', '.net', 'assembly', 'java', 'archive']"
3880,A language supporting reflection provides a number of features available at runtime that would otherwise be difficult to accomplish in a lower-level language. Some of these features are the abilities to:,"['language', 'support', 'reflection', 'provide', 'number', 'feature', 'available', 'runtime', 'difficult', 'accomplish', 'low', 'level', 'language', 'feature', 'ability']"
3881,"These features can be implemented in different ways. In MOO, reflection forms a natural part of everyday programming idiom. When verbs methods are called, various variables such as verb the name of the verb being called and this the object on which the verb is called are populated to give the context of the call. Security is typically managed by accessing the caller stack programmatically: Since callers is a list of the methods by which the current verb was eventually called, performing tests on callers0 the command invoked by the original user allows the verb to protect itself against unauthorised use.","['feature', 'implement', 'different', 'way', 'moo', 'reflection', 'form', 'natural', 'everyday', 'programming', 'idiom', 'verbs', 'method', 'call', 'variable', 'verb', 'verb', 'call', 'object', 'verb', 'call', 'populate', 'context', 'security', 'typically', 'manage', 'access', 'caller', 'stack', 'programmatically', 'caller', 'list', 'method', 'current', 'verb', 'eventually', 'call', 'perform', 'test', 'callers0', 'command', 'invoke', 'original', 'user', 'allow', 'verb', 'protect', 'unauthorised', 'use']"
3882,"Compiled languages rely on their runtime system to provide information about the source code. A compiled Objective-C executable, for example, records the names of all methods in a block of the executable, providing a table to correspond these with the underlying methods or selectors for these methods compiled into the program. In a compiled language that supports runtime creation of functions, such as Common Lisp, the runtime environment must include a compiler or an interpreter.","['compiled', 'language', 'rely', 'runtime', 'system', 'provide', 'information', 'source', 'code', 'compiled', 'objective', 'executable', 'example', 'record', 'name', 'method', 'block', 'executable', 'provide', 'table', 'correspond', 'underlie', 'method', 'selector', 'method', 'compile', 'program', 'compile', 'language', 'support', 'runtime', 'creation', 'function', 'common', 'lisp', 'runtime', 'environment', 'include', 'compiler', 'interpreter']"
3883,Reflection can be implemented for languages without built-in reflection by using a program transformation system to define automated source-code changes.,"['reflection', 'implement', 'language', 'build', 'reflection', 'program', 'transformation', 'system', 'define', 'automate', 'source', 'code', 'change']"
3884,"Reflection may allow a user to create unexpected control flow paths through an application, potentially bypassing security measures. This may be exploited by attackers.4 Historical vulnerabilities in Java caused by unsafe reflection allowed code retrieved from potentially untrusted remote machines to break out of the Java sandbox security mechanism. A large scale study of 120 Java vulnerabilities in 2013 concluded that unsafe reflection is the most common vulnerability in Java, though not the most exploited.5","['reflection', 'allow', 'user', 'create', 'unexpected', 'control', 'flow', 'path', 'application', 'potentially', 'bypass', 'security', 'measure', 'exploit', 'attackers', 'historical', 'vulnerability', 'java', 'cause', 'unsafe', 'reflection', 'allow', 'code', 'retrieve', 'potentially', 'untrusted', 'remote', 'machine', 'break', 'java', 'sandbox', 'security', 'mechanism', 'large', 'scale', 'study', '120', 'java', 'vulnerability', '2013', 'conclude', 'unsafe', 'reflection', 'common', 'vulnerability', 'java', 'exploited']"
3885,"The following code snippets create an instance foo of class Foo and invoke its method PrintHello. For each programming language, normal and reflection-based call sequences are shown.","['follow', 'code', 'snippet', 'create', 'instance', 'foo', 'class', 'foo', 'invoke', 'method', 'printhello', 'programming', 'language', 'normal', 'reflection', 'base', 'sequence', 'show']"
3886,The following is an example in C#:,"['follow', 'example']"
3887,"This Delphi/Object Pascal example assumes that a .mw-parser-output .monospacedfont-family:monospace,monospaceTFoo class has been declared in a unit called Unit1:","['delphi', 'object', 'pascal', 'example', 'assume', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacetfoo', 'class', 'declare', 'unit', 'call', 'unit1']"
3888,The following is an example in eC:,"['follow', 'example']"
3889,The following is an example in Go:,"['follow', 'example']"
3890,The following is an example in Java:,"['follow', 'example', 'java']"
3891,The following is an example in JavaScript:,"['follow', 'example', 'javascript']"
3892,The following is an example in Julia programming language:,"['follow', 'example', 'julia', 'programming', 'language']"
3893,"The following is an example in Objective-C, implying either the OpenStep or Foundation Kit framework is used:","['follow', 'example', 'objective', 'imply', 'openstep', 'foundation', 'kit', 'framework']"
3894,The following is an example in Perl:,"['follow', 'example', 'perl']"
3895,The following is an example in PHP:,"['follow', 'example', 'php']"
3896,The following is an example in Python:,"['follow', 'example', 'python']"
3897,The following is an example in R:,"['follow', 'example']"
3898,The following is an example in Ruby:,"['follow', 'example', 'ruby']"
3899,The following is an example using Xojo:,"['follow', 'example', 'xojo']"
3900,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3901,"Responsibility-driven design is a design technique in object-oriented programming, which improves encapsulation by using the client–server model. It focuses on the contract by considering the actions that the object is responsible for and the information that the object shares. It was proposed by Rebecca Wirfs-Brock and Brian Wilkerson.","['responsibility', 'drive', 'design', 'design', 'technique', 'object', 'orient', 'programming', 'improve', 'encapsulation', 'client', 'server', 'model', 'focus', 'contract', 'consider', 'action', 'object', 'responsible', 'information', 'object', 'share', 'propose', 'rebecca', 'wirfs', 'brock', 'brian', 'wilkerson']"
3902,"Responsibility-driven design is in direct contrast with data-driven design, which promotes defining the behavior of a class along with the data that it holds. Data-driven design is not the same as data-driven programming, which is concerned with using data to determine the control flow, not class design.","['responsibility', 'drive', 'design', 'direct', 'contrast', 'data', 'drive', 'design', 'promote', 'define', 'behavior', 'class', 'datum', 'hold', 'data', 'drive', 'design', 'data', 'drive', 'programming', 'concern', 'datum', 'determine', 'control', 'flow', 'class', 'design']"
3903,"In the client–server model they refer to, both the client and the server are classes or instances of classes. At any particular time, either the client or the server represents an object. Both the parties commit to a contract and exchange information by adhering to it. The client can only make the requests specified in the contract and the server must answer these requests.1 Thus, responsibility-driven design tries to avoid dealing with details, such as the way in which requests are carried out, by instead only specifying the intent of a certain request. The benefit is increased encapsulation, since the specification of the exact way in which a request is carried out is private to the server.","['client', 'server', 'model', 'refer', 'client', 'server', 'class', 'instance', 'class', 'particular', 'time', 'client', 'server', 'represent', 'object', 'party', 'commit', 'contract', 'exchange', 'information', 'adhere', 'client', 'request', 'specify', 'contract', 'server', 'answer', 'requests', 'responsibility', 'drive', 'design', 'try', 'avoid', 'deal', 'detail', 'way', 'request', 'carry', 'instead', 'specify', 'intent', 'certain', 'request', 'benefit', 'increase', 'encapsulation', 'specification', 'exact', 'way', 'request', 'carry', 'private', 'server']"
3904,"To further the encapsulation of the server, Wirfs-Brock and Wilkerson call for language features that limit outside influence to the behavior of a class. They demand that the visibility of members and functions should be finely grained, such as in Eiffel programming language. Even finer control of the visibility of even classes is available in the Newspeak programming language.","['encapsulation', 'server', 'wirfs', 'brock', 'wilkerson', 'language', 'feature', 'limit', 'outside', 'influence', 'behavior', 'class', 'demand', 'visibility', 'member', 'function', 'finely', 'grain', 'eiffel', 'programming', 'language', 'finer', 'control', 'visibility', 'class', 'available', 'newspeak', 'programming', 'language']"
3905,"Responsibility-driven design focuses on the objects as behavioral abstractions which are characterized by their responsibilities. The CRC-card modelling technique is used to generate these behavioral abstractions. The rest of the object structure including data attributes are assigned later, as and when required.2 This makes the design follow type hierarchy for inheritance which improves encapsulation and makes it easier to identify abstract classes. It can also group the classes together based on their clients which is considered a unique ability.","['responsibility', 'drive', 'design', 'focus', 'object', 'behavioral', 'abstraction', 'characterize', 'responsibility', 'crc', 'card', 'modelling', 'technique', 'generate', 'behavioral', 'abstraction', 'rest', 'object', 'structure', 'include', 'data', 'attribute', 'assign', 'later', 'required', 'make', 'design', 'follow', 'type', 'hierarchy', 'inheritance', 'improve', 'encapsulation', 'make', 'easy', 'identify', 'abstract', 'class', 'group', 'class', 'base', 'client', 'consider', 'unique', 'ability']"
3906,"A good object-oriented design involves an early focus on behaviors to realize the capabilities meeting the stated requirements and a late binding of implementation details to the requirements. This approach especially helps to decentralize control and distribute system behavior which can help manage the complexities of high-functionality large or distributed systems. Similarly, it can help to design and maintain explanation facilities for cognitive models, intelligent agents, and other knowledge-based systems.3","['good', 'object', 'orient', 'design', 'involve', 'early', 'focus', 'behavior', 'realize', 'capability', 'meet', 'state', 'requirement', 'late', 'binding', 'implementation', 'detail', 'requirement', 'approach', 'especially', 'help', 'decentralize', 'control', 'distribute', 'system', 'behavior', 'help', 'manage', 'complexity', 'high', 'functionality', 'large', 'distribute', 'system', 'similarly', 'help', 'design', 'maintain', 'explanation', 'facility', 'cognitive', 'model', 'intelligent', 'agent', 'knowledge', 'base', 'systems']"
3907,"In their book Object Design: Roles, Responsibilities and Collaborations,4 the authors describe the following building blocks that make up responsibility-driven design.","['book', 'object', 'design', 'role', 'responsibility', 'collaborations', 'author', 'describe', 'follow', 'building', 'block', 'responsibility', 'drive', 'design']"
3908,Objects are described as things that have machine-like behaviors that can be plugged together to work in concert. These objects play well-defined roles and encapsulate scripted responses and information.5,"['object', 'describe', 'thing', 'machine', 'like', 'behavior', 'plug', 'work', 'concert', 'object', 'play', 'define', 'role', 'encapsulate', 'script', 'response', 'information']"
3909,"Object role refers to an exterior view of what general service is offered by the object. It is a set of related responsibilities.5 It can be implemented as a class or an interface. Interface, however, is the preferred implementation as it increases flexibility by hiding the concrete class which ultimately does the work.12","['object', 'role', 'refer', 'exterior', 'view', 'general', 'service', 'offer', 'object', 'set', 'relate', 'responsibilities', 'implement', 'class', 'interface', 'interface', 'preferred', 'implementation', 'increase', 'flexibility', 'hide', 'concrete', 'class', 'ultimately', 'work']"
3910,Role Stereotypes: Role stereotypes are simplified roles that come with predefined responsibilities.13 There are several categories.,"['role', 'stereotype', 'role', 'stereotype', 'simplify', 'role', 'come', 'predefined', 'responsibilities', 'category']"
3911,An important part in the responsibility-driven design process is the distribution of control responsibilities that results in developing a control style. A control style is concerned about the control flow between subsystems.,"['important', 'responsibility', 'drive', 'design', 'process', 'distribution', 'control', 'responsibility', 'result', 'develop', 'control', 'style', 'control', 'style', 'concern', 'control', 'flow', 'subsystem']"
3912,This control style inflicts a procedural paradigm on the structure of the application and places major-decision making responsibilities in only a few objects or a single object.,"['control', 'style', 'inflict', 'procedural', 'paradigm', 'structure', 'application', 'place', 'major', 'decision', 'make', 'responsibility', 'object', 'single', 'object']"
3913,"When decisions to be made are few, simple, and related to a single task.","['decision', 'simple', 'relate', 'single', 'task']"
3914,"A delegated control style lies in between a centralized and dispersed control style. It passes some of the decision making and much of the action to objects surrounding a control center. Each neighboring object has a significant role to play. It can also be called as event driven model, where the control is delegated to the object requesting it to process the event.","['delegate', 'control', 'style', 'lie', 'centralized', 'disperse', 'control', 'style', 'pass', 'decision', 'making', 'action', 'object', 'surround', 'control', 'center', 'neighboring', 'object', 'significant', 'role', 'play', 'call', 'event', 'drive', 'model', 'control', 'delegate', 'object', 'request', 'process', 'event']"
3915,When one wants to delegate work to objects that are more specialized.,"['want', 'delegate', 'work', 'object', 'specialized']"
3916,"This control style is a variation of the centralized control style wherein control is factored among a group of objects whose actions are coordinated.19 The main difference between a clustered and delegated control style is that in a clustered control style, the decision making objects are located within a control center whereas in a delegated control style they are mostly outside.20","['control', 'style', 'variation', 'centralized', 'control', 'style', 'control', 'factor', 'group', 'object', 'action', 'coordinated', 'main', 'difference', 'cluster', 'delegate', 'control', 'style', 'cluster', 'control', 'style', 'decision', 'make', 'object', 'locate', 'control', 'center', 'delegate', 'control', 'style', 'outside']"
3917,"A dispersed control style does not contain any control centers. The logic is spread across the entire population of objects, keeping each object small and building in as few dependencies among them as possible.21","['dispersed', 'control', 'style', 'contain', 'control', 'center', 'logic', 'spread', 'entire', 'population', 'object', 'keep', 'object', 'small', 'build', 'dependency', 'possible']"
3918,"After extensive results of experiments conducted, only the senior management has the necessary skills to make use of delegated control style and centralized control style benefits programmers. There is no context mentioned about the mid-level employees.17","['extensive', 'result', 'experiment', 'conduct', 'senior', 'management', 'necessary', 'skill', 'use', 'delegate', 'control', 'style', 'centralized', 'control', 'style', 'benefit', 'programmer', 'context', 'mention', 'mid', 'level', 'employees']"
3919,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3920,"In programming language theory and type theory, polymorphism is the provision of a single interface to entities of different types1 or the use of a single symbol to represent multiple different types.2 The concept is borrowed from a principle in biology where an organism or species can have many different forms or stages.3","['programming', 'language', 'theory', 'type', 'theory', 'polymorphism', 'provision', 'single', 'interface', 'entity', 'different', 'types1', 'use', 'single', 'symbol', 'represent', 'multiple', 'different', 'types', 'concept', 'borrow', 'principle', 'biology', 'organism', 'specie', 'different', 'form', 'stages']"
3921,The most commonly recognized major classes of polymorphism are:,"['commonly', 'recognize', 'major', 'class', 'polymorphism']"
3922,"Interest in polymorphic type systems developed significantly in the 1960s, with practical implementations beginning to appear by the end of the decade. Ad hoc polymorphism and parametric polymorphism were originally described in Christopher Strachey's Fundamental Concepts in Programming Languages,5 where they are listed as ""the two main classes"" of polymorphism. Ad hoc polymorphism was a feature of Algol 68, while parametric polymorphism was the core feature of ML's type system.","['interest', 'polymorphic', 'type', 'system', 'develop', 'significantly', '1960', 'practical', 'implementation', 'begin', 'appear', 'end', 'decade', 'hoc', 'polymorphism', 'parametric', 'polymorphism', 'originally', 'describe', 'christopher', 'strachey', 'fundamental', 'concepts', 'programming', 'languages', 'list', 'main', 'class', 'polymorphism', 'hoc', 'polymorphism', 'feature', 'algol', 'parametric', 'polymorphism', 'core', 'feature', 'type', 'system']"
3923,"In a 1985 paper, Peter Wegner and Luca Cardelli introduced the term inclusion polymorphism to model subtypes and inheritance,2 citing Simula as the first programming language to implement it.","['1985', 'paper', 'peter', 'wegner', 'luca', 'cardelli', 'introduce', 'term', 'inclusion', 'polymorphism', 'model', 'subtype', 'inheritance', 'cite', 'simula', 'programming', 'language', 'implement']"
3924,"Christopher Strachey chose the term ad hoc polymorphism to refer to polymorphic functions that can be applied to arguments of different types, but that behave differently depending on the type of the argument to which they are applied also known as function overloading or operator overloading.5 The term ""ad hoc"" in this context is not intended to be pejorative; it refers simply to the fact that this type of polymorphism is not a fundamental feature of the type system. In the Pascal / Delphi example below, the Add functions seem to work generically over various types when looking at the invocations, but are considered to be two entirely distinct functions by the compiler for all intents and purposes:","['christopher', 'strachey', 'choose', 'term', 'hoc', 'polymorphism', 'refer', 'polymorphic', 'function', 'apply', 'argument', 'different', 'type', 'behave', 'differently', 'depend', 'type', 'argument', 'apply', 'know', 'function', 'overloading', 'operator', 'overloading', 'term', 'hoc', 'context', 'intend', 'pejorative', 'refer', 'simply', 'fact', 'type', 'polymorphism', 'fundamental', 'feature', 'type', 'system', 'pascal', 'delphi', 'example', 'add', 'function', 'work', 'generically', 'type', 'look', 'invocation', 'consider', 'entirely', 'distinct', 'function', 'compiler', 'intent', 'purpose']"
3925,In dynamically typed languages the situation can be more complex as the correct function that needs to be invoked might only be determinable at run time.,"['dynamically', 'type', 'language', 'situation', 'complex', 'correct', 'function', 'need', 'invoke', 'determinable', 'run', 'time']"
3926,"Implicit type conversion has also been defined as a form of polymorphism, referred to as ""coercion polymorphism"".26","['implicit', 'type', 'conversion', 'define', 'form', 'polymorphism', 'refer', 'coercion', 'polymorphism']"
3927,"Parametric polymorphism allows a function or a data type to be written generically, so that it can handle values uniformly without depending on their type.7 Parametric polymorphism is a way to make a language more expressive while still maintaining full static type-safety.","['parametric', 'polymorphism', 'allow', 'function', 'data', 'type', 'write', 'generically', 'handle', 'value', 'uniformly', 'depend', 'type', 'parametric', 'polymorphism', 'way', 'language', 'expressive', 'maintain', 'static', 'type', 'safety']"
3928,The concept of parametric polymorphism applies to both data types and functions. A function that can evaluate to or be applied to values of different types is known as a polymorphic function. A data type that can appear to be of a generalized type e.g. a list with elements of arbitrary type is designated polymorphic data type like the generalized type from which such specializations are made.,"['concept', 'parametric', 'polymorphism', 'apply', 'datum', 'type', 'function', 'function', 'evaluate', 'apply', 'value', 'different', 'type', 'know', 'polymorphic', 'function', 'data', 'type', 'appear', 'generalize', 'type', 'e.g.', 'list', 'element', 'arbitrary', 'type', 'designate', 'polymorphic', 'datum', 'type', 'like', 'generalize', 'type', 'specialization']"
3929,"Parametric polymorphism is ubiquitous in functional programming, where it is often simply referred to as ""polymorphism"". The following example in Haskell shows a parameterized list data type and two parametrically polymorphic functions on them:","['parametric', 'polymorphism', 'ubiquitous', 'functional', 'programming', 'simply', 'refer', 'polymorphism', 'follow', 'example', 'haskell', 'show', 'parameterized', 'list', 'datum', 'type', 'parametrically', 'polymorphic', 'function']"
3930,"Parametric polymorphism is also available in several object-oriented languages. For instance, templates in C++ and D, or under the name generics in C#, Delphi, Java and Go:","['parametric', 'polymorphism', 'available', 'object', 'orient', 'language', 'instance', 'template', 'c++', 'generic', 'delphi', 'java']"
3931,"John C. Reynolds and later Jean-Yves Girard formally developed this notion of polymorphism as an extension to lambda calculus called the polymorphic lambda calculus or System F. Any parametrically polymorphic function is necessarily restricted in what it can do, working on the shape of the data instead of its value, leading to the concept of parametricity.","['john', 'reynolds', 'later', 'jean', 'yves', 'girard', 'formally', 'develop', 'notion', 'polymorphism', 'extension', 'lambda', 'calculus', 'call', 'polymorphic', 'lambda', 'calculus', 'system', 'parametrically', 'polymorphic', 'function', 'necessarily', 'restrict', 'work', 'shape', 'datum', 'instead', 'value', 'lead', 'concept', 'parametricity']"
3932,"Some languages employ the idea of subtyping also called subtype polymorphism or inclusion polymorphism to restrict the range of types that can be used in a particular case of polymorphism. In these languages, subtyping allows a function to be written to take an object of a certain type T, but also work correctly, if passed an object that belongs to a type S that is a subtype of T according to the Liskov substitution principle. This type relation is sometimes written S <: T. Conversely, T is said to be a supertype of S—written T :> S. Subtype polymorphism is usually resolved dynamically see below.","['language', 'employ', 'idea', 'subtype', 'call', 'subtype', 'polymorphism', 'inclusion', 'polymorphism', 'restrict', 'range', 'type', 'particular', 'case', 'polymorphism', 'language', 'subtype', 'allow', 'function', 'write', 'object', 'certain', 'type', 'work', 'correctly', 'pass', 'object', 'belong', 'type', 'subtype', 'accord', 'liskov', 'substitution', 'principle', 'type', 'relation', 'write', 'conversely', 'say', 'supertype', 'write', 'subtype', 'polymorphism', 'usually', 'resolve', 'dynamically']"
3933,"In the following Java example we make cats and dogs subtypes of animals. The procedure letsHear accepts an animal, but will also work correctly if a subtype is passed to it:","['follow', 'java', 'example', 'cat', 'dog', 'subtype', 'animal', 'procedure', 'letshear', 'accept', 'animal', 'work', 'correctly', 'subtype', 'pass']"
3934,"In another example, if Number, Rational, and Integer are types such that Number :> Rational and Number :> Integer, a function written to take a Number will work equally well when passed an Integer or Rational as when passed a Number. The actual type of the object can be hidden from clients into a black box, and accessed via object identity. In fact, if the Number type is abstract, it may not even be possible to get your hands on an object whose most-derived type is Number see abstract data type, abstract class. This particular kind of type hierarchy is known—especially in the context of the Scheme programming language—as a numerical tower, and usually contains many more types.","['example', 'number', 'rational', 'integer', 'type', 'number', 'rational', 'number', 'integer', 'function', 'write', 'number', 'work', 'equally', 'pass', 'integer', 'rational', 'pass', 'number', 'actual', 'type', 'object', 'hide', 'client', 'black', 'box', 'access', 'object', 'identity', 'fact', 'number', 'type', 'abstract', 'possible', 'hand', 'object', 'derive', 'type', 'number', 'abstract', 'datum', 'type', 'abstract', 'class', 'particular', 'kind', 'type', 'hierarchy', 'know', 'especially', 'context', 'scheme', 'programming', 'language', 'numerical', 'tower', 'usually', 'contain', 'type']"
3935,"Object-oriented programming languages offer subtype polymorphism using subclassing also known as inheritance. In typical implementations, each class contains what is called a virtual table—a table of functions that implement the polymorphic part of the class interface—and each object contains a pointer to the ""vtable"" of its class, which is then consulted whenever a polymorphic method is called. This mechanism is an example of:","['object', 'orient', 'programming', 'language', 'offer', 'subtype', 'polymorphism', 'subclasse', 'know', 'inheritance', 'typical', 'implementation', 'class', 'contain', 'call', 'virtual', 'table', 'table', 'function', 'implement', 'polymorphic', 'class', 'interface', 'object', 'contain', 'pointer', 'vtable', 'class', 'consult', 'polymorphic', 'method', 'call', 'mechanism', 'example']"
3936,"The same goes for most other popular object systems. Some, however, such as Common Lisp Object System, provide multiple dispatch, under which method calls are polymorphic in all arguments.","['go', 'popular', 'object', 'system', 'common', 'lisp', 'object', 'system', 'provide', 'multiple', 'dispatch', 'method', 'call', 'polymorphic', 'argument']"
3937,The interaction between parametric polymorphism and subtyping leads to the concepts of variance and bounded quantification.,"['interaction', 'parametric', 'polymorphism', 'subtype', 'lead', 'concept', 'variance', 'bound', 'quantification']"
3938,"Row polymorphism8 is a similar, but distinct concept from subtyping. It deals with structural types. It allows the usage of all values whose types have certain properties, without losing the remaining type information.","['row', 'polymorphism8', 'similar', 'distinct', 'concept', 'subtype', 'deal', 'structural', 'type', 'allow', 'usage', 'value', 'type', 'certain', 'property', 'lose', 'remain', 'type', 'information']"
3939,"A related concept is polytypism or data type genericity. A polytypic function is more general than polymorphic, and in such a function, ""though one can provide fixed ad hoc cases for specific data types, an ad hoc combinator is absent"".9","['related', 'concept', 'polytypism', 'datum', 'type', 'genericity', 'polytypic', 'function', 'general', 'polymorphic', 'function', 'provide', 'fix', 'hoc', 'case', 'specific', 'datum', 'type', 'hoc', 'combinator', 'absent']"
3940,"Polymorphism can be distinguished by when the implementation is selected: statically at compile time or dynamically at run time, typically via a virtual function. This is known respectively as static dispatch and dynamic dispatch, and the corresponding forms of polymorphism are accordingly called static polymorphism and dynamic polymorphism.","['polymorphism', 'distinguish', 'implementation', 'select', 'statically', 'compile', 'time', 'dynamically', 'run', 'time', 'typically', 'virtual', 'function', 'know', 'respectively', 'static', 'dispatch', 'dynamic', 'dispatch', 'correspond', 'form', 'polymorphism', 'accordingly', 'call', 'static', 'polymorphism', 'dynamic', 'polymorphism']"
3941,"Static polymorphism executes faster, because there is no dynamic dispatch overhead, but requires additional compiler support. Further, static polymorphism allows greater static analysis by compilers notably for optimization, source code analysis tools, and human readers programmers. Dynamic polymorphism is more flexible but slower—for example, dynamic polymorphism allows duck typing, and a dynamically linked library may operate on objects without knowing their full type.","['static', 'polymorphism', 'execute', 'fast', 'dynamic', 'dispatch', 'overhead', 'require', 'additional', 'compiler', 'support', 'static', 'polymorphism', 'allow', 'great', 'static', 'analysis', 'compiler', 'notably', 'optimization', 'source', 'code', 'analysis', 'tool', 'human', 'reader', 'programmer', 'dynamic', 'polymorphism', 'flexible', 'slow', 'example', 'dynamic', 'polymorphism', 'allow', 'duck', 'typing', 'dynamically', 'link', 'library', 'operate', 'object', 'know', 'type']"
3942,"Static polymorphism typically occurs in ad hoc polymorphism and parametric polymorphism, whereas dynamic polymorphism is usual for subtype polymorphism. However, it is possible to achieve static polymorphism with subtyping through more sophisticated use of template metaprogramming, namely the curiously recurring template pattern.","['static', 'polymorphism', 'typically', 'occur', 'hoc', 'polymorphism', 'parametric', 'polymorphism', 'dynamic', 'polymorphism', 'usual', 'subtype', 'polymorphism', 'possible', 'achieve', 'static', 'polymorphism', 'subtype', 'sophisticated', 'use', 'template', 'metaprogramming', 'curiously', 'recur', 'template', 'pattern']"
3943,"When polymorphism is exposed via a library, static polymorphism becomes impossible for dynamic libraries as there is no way of knowing what types the parameters are when the shared object is built. While languages like C++ and Rust use monomorphized templates, the Swift programming language makes extensive use of dynamic dispatch to build the application binary interface for these libraries by default. As a result, more code can be shared for a reduced system size at the cost of runtime overhead.10","['polymorphism', 'expose', 'library', 'static', 'polymorphism', 'impossible', 'dynamic', 'library', 'way', 'know', 'type', 'parameter', 'share', 'object', 'build', 'language', 'like', 'c++', 'rust', 'use', 'monomorphize', 'template', 'swift', 'programming', 'language', 'make', 'extensive', 'use', 'dynamic', 'dispatch', 'build', 'application', 'binary', 'interface', 'library', 'default', 'result', 'code', 'share', 'reduced', 'system', 'size', 'cost', 'runtime', 'overhead']"
3944,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3945,"In computer programming, run-time type information or run-time type identification RTTI1 is a feature of some programming languages such as C++,2 Object Pascal, and Ada3 that exposes information about an object's data type at runtime. Run-time type information may be available for all types or only to types that explicitly have it as is the case with Ada. Run-time type information is a specialization of a more general concept called type introspection.","['computer', 'programming', 'run', 'time', 'type', 'information', 'run', 'time', 'type', 'identification', 'rtti1', 'feature', 'programming', 'language', 'c++', 'object', 'pascal', 'ada3', 'expose', 'information', 'object', 'data', 'type', 'runtime', 'run', 'time', 'type', 'information', 'available', 'type', 'type', 'explicitly', 'case', 'ada', 'run', 'time', 'type', 'information', 'specialization', 'general', 'concept', 'call', 'type', 'introspection']"
3946,"In the original C++ design, Bjarne Stroustrup did not include run-time type information, because he thought this mechanism was often misused.4","['original', 'c++', 'design', 'bjarne', 'stroustrup', 'include', 'run', 'time', 'type', 'information', 'think', 'mechanism', 'misused']"
3947,"In C++, RTTI can be used to do safe typecasts, using the dynamic_cast<> operator, and to manipulate type information at runtime, using the typeid operator and std::type_info class. In Object Pascal, RTTI can be used to perform safe type casts with the as operator, test the class to which an object belongs with the is operator, and manipulate type information at run time with classes contained in the RTTI unit5 i.e. classes: TRttiContext, TRttiInstanceType, etc.. In Ada, objects of tagged types also store a type tag, which permits the identification of the type of these object at runtime. The in operator can be used to test, at runtime, if an object is of a specific type and may be safely converted to it.6","['c++', 'rtti', 'safe', 'typecast', 'dynamic_cast', 'operator', 'manipulate', 'type', 'information', 'runtime', 'typeid', 'operator', 'std::type_info', 'class', 'object', 'pascal', 'rtti', 'perform', 'safe', 'type', 'cast', 'operator', 'test', 'class', 'object', 'belong', 'operator', 'manipulate', 'type', 'information', 'run', 'time', 'class', 'contain', 'rtti', 'unit5', 'i.e.', 'class', 'trtticontext', 'trttiinstancetype', 'etc', 'ada', 'object', 'tag', 'type', 'store', 'type', 'tag', 'permit', 'identification', 'type', 'object', 'runtime', 'operator', 'test', 'runtime', 'object', 'specific', 'type', 'safely', 'convert', 'it']"
3948,"RTTI is available only for classes that are polymorphic, which means they have at least one virtual method. In practice, this is not a limitation because base classes must have a virtual destructor to allow objects of derived classes to perform proper cleanup if they are deleted from a base pointer.","['rtti', 'available', 'class', 'polymorphic', 'mean', 'virtual', 'method', 'practice', 'limitation', 'base', 'class', 'virtual', 'destructor', 'allow', 'object', 'derive', 'class', 'perform', 'proper', 'cleanup', 'delete', 'base', 'pointer']"
3949,"Some compilers have flags to disable RTTI. Using these flags may reduce the overall size of the application, making them especially useful when targeting systems with a limited amount of memory.7","['compiler', 'flag', 'disable', 'rtti', 'flag', 'reduce', 'overall', 'size', 'application', 'make', 'especially', 'useful', 'target', 'system', 'limited', 'memory']"
3950,"The typeid keyword is used to determine the class of an object at run time. It returns a reference to std::type_info object, which exists until the end of the program.8 The use of typeid, in a non-polymorphic context, is often preferred over dynamic_cast<class_type> in situations where just the class information is needed, because typeid is always a constant-time procedure, whereas dynamic_cast may need to traverse the class derivation lattice of its argument at runtime.citation needed Some aspects of the returned object are implementation-defined, such as std::type_info::name, and cannot be relied on across compilers to be consistent.","['typeid', 'keyword', 'determine', 'class', 'object', 'run', 'time', 'return', 'reference', 'std::type_info', 'object', 'exist', 'end', 'program', 'use', 'typeid', 'non', 'polymorphic', 'context', 'prefer', 'dynamic_cast', 'class_type', 'situation', 'class', 'information', 'need', 'typeid', 'constant', 'time', 'procedure', 'dynamic_cast', 'need', 'traverse', 'class', 'derivation', 'lattice', 'argument', 'runtime.citation', 'need', 'aspect', 'return', 'object', 'implementation', 'define', 'std::type_info::name', 'rely', 'compiler', 'consistent']"
3951,"Objects of class std::bad_typeid are thrown when the expression for typeid is the result of applying the unary * operator on a null pointer. Whether an exception is thrown for other null reference arguments is implementation-dependent. In other words, for the exception to be guaranteed, the expression must take the form typeid*p where p is any expression resulting in a null pointer.","['object', 'class', 'std::bad_typeid', 'throw', 'expression', 'typeid', 'result', 'apply', 'unary', 'operator', 'null', 'pointer', 'exception', 'throw', 'null', 'reference', 'argument', 'implementation', 'dependent', 'word', 'exception', 'guarantee', 'expression', 'form', 'expression', 'result', 'null', 'pointer']"
3952,Output exact output varies by system and compiler:,"['output', 'exact', 'output', 'vary', 'system', 'compiler']"
3953,"The dynamic_cast operator in C++ is used for downcasting a reference or pointer to a more specific type in the class hierarchy. Unlike the static_cast, the target of the dynamic_cast must be a pointer or reference to class. Unlike static_cast and C-style typecast where type check is made during compilation, a type safety check is performed at runtime. If the types are not compatible, an exception will be thrown when dealing with references or a null pointer will be returned when dealing with pointers.","['dynamic_cast', 'operator', 'c++', 'downcaste', 'reference', 'pointer', 'specific', 'type', 'class', 'hierarchy', 'unlike', 'static_cast', 'target', 'dynamic_cast', 'pointer', 'reference', 'class', 'unlike', 'static_cast', 'style', 'typecast', 'type', 'check', 'compilation', 'type', 'safety', 'check', 'perform', 'runtime', 'type', 'compatible', 'exception', 'throw', 'deal', 'reference', 'null', 'pointer', 'return', 'deal', 'pointer']"
3954,"A Java typecast behaves similarly; if the object being cast is not actually an instance of the target type, and cannot be converted to one by a language-defined method, an instance of java.lang.ClassCastException will be thrown.9","['java', 'typecast', 'behave', 'similarly', 'object', 'cast', 'actually', 'instance', 'target', 'type', 'convert', 'language', 'define', 'method', 'instance', 'java.lang', 'classcastexception', 'thrown']"
3955,"Suppose some function takes an object of type A as its argument, and wishes to perform some additional operation if the object passed is an instance of B, a subclass of A. This can be accomplished using dynamic_cast as follows.","['suppose', 'function', 'take', 'object', 'type', 'argument', 'wish', 'perform', 'additional', 'operation', 'object', 'pass', 'instance', 'subclass', 'accomplish', 'dynamic_cast', 'follow']"
3956,A similar version of MyFunction can be written with pointers instead of references:,"['similar', 'version', 'myfunction', 'write', 'pointer', 'instead', 'reference']"
3957,"In Object Pascal, the operator is is used to check the type of a class at run time. It tests the belonging of an object to a given class, including classes of individual ancestors present in the inheritance hierarchy tree e.g. Button1 is a TButton class that has ancestors: TWinControl → TControl → TComponent → TPersistent → TObject, where the latter is the ancestor of all classes. The operator as is used when an object needs to be treated at run time as if it belonged to an ancestor class.","['object', 'pascal', 'operator', 'check', 'type', 'class', 'run', 'time', 'test', 'belonging', 'object', 'give', 'class', 'include', 'class', 'individual', 'ancestor', 'present', 'inheritance', 'hierarchy', 'tree', 'e.g.', 'button1', 'tbutton', 'class', 'ancestor', 'twincontrol', 'tcontrol', 'tcomponent', 'tpersistent', 'tobject', 'ancestor', 'class', 'operator', 'object', 'need', 'treat', 'run', 'time', 'belong', 'ancestor', 'class']"
3958,"The RTTI unit is used to manipulate object type information at run time. This unit contains a set of classes that allow you to: get information about an object's class and its ancestors, properties, methods and events, change property values and call methods. The following example shows the use of the RTTI module to obtain information about the class to which an object belongs, creating it, and to call its method. The example assumes that the TSubject class has been declared in a unit named SubjectUnit.","['rtti', 'unit', 'manipulate', 'object', 'type', 'information', 'run', 'time', 'unit', 'contain', 'set', 'class', 'allow', 'information', 'object', 'class', 'ancestor', 'property', 'method', 'event', 'change', 'property', 'value', 'method', 'follow', 'example', 'show', 'use', 'rtti', 'module', 'obtain', 'information', 'class', 'object', 'belong', 'create', 'method', 'example', 'assume', 'tsubject', 'class', 'declare', 'unit', 'name', 'subjectunit']"
3959,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
3960,"In computer programming, the scope of a name binding an association of a name to an entity, such as a variable is the part of a program where the name binding is valid; that is, where the name can be used to refer to the entity. In other parts of the program, the name may refer to a different entity it may have a different binding, or to nothing at all it may be unbound. Scope helps prevent name collisions by allowing the same name to refer to different objects – as long as the names have separate scopes. The scope of a name binding is also known as the visibility of an entity, particularly in older or more technical literature—this is from the perspective of the referenced entity, not the referencing name.","['computer', 'programming', 'scope', 'bind', 'association', 'entity', 'variable', 'program', 'bind', 'valid', 'refer', 'entity', 'part', 'program', 'refer', 'different', 'entity', 'different', 'binding', 'unbound', 'scope', 'help', 'prevent', 'collision', 'allow', 'refer', 'different', 'object', 'long', 'name', 'separate', 'scope', 'scope', 'bind', 'know', 'visibility', 'entity', 'particularly', 'old', 'technical', 'literature', 'perspective', 'referenced', 'entity', 'reference']"
3961,"The term ""scope"" is also used to refer to the set of all name bindings that are valid within a part of a program or at a given point in a program, which is more correctly referred to as context or environment.a","['term', 'scope', 'refer', 'set', 'binding', 'valid', 'program', 'give', 'point', 'program', 'correctly', 'refer', 'context', 'environment.a']"
3962,"Strictly speakingb and in practice for most programming languages, ""part of a program"" refers to a portion of source code area of text, and is known as lexical scope. In some languages, however, ""part of a program"" refers to a portion of run time time period during execution, and is known as dynamic scope. Both of these terms are somewhat misleading—they misuse technical terms, as discussed in the definition—but the distinction itself is accurate and precise, and these are the standard respective terms. Lexical scope is the main focus of this article, with dynamic scope understood by contrast with lexical scope.","['strictly', 'speakingb', 'practice', 'programming', 'language', 'program', 'refer', 'portion', 'source', 'code', 'area', 'text', 'know', 'lexical', 'scope', 'language', 'program', 'refer', 'portion', 'run', 'time', 'time', 'period', 'execution', 'know', 'dynamic', 'scope', 'term', 'somewhat', 'misleading', 'misuse', 'technical', 'term', 'discuss', 'definition', 'distinction', 'accurate', 'precise', 'standard', 'respective', 'term', 'lexical', 'scope', 'main', 'focus', 'article', 'dynamic', 'scope', 'understand', 'contrast', 'lexical', 'scope']"
3963,"In most cases, name resolution based on lexical scope is relatively straightforward to use and to implement, as in use one can read backwards in the source code to determine to which entity a name refers, and in implementation one can maintain a list of names and contexts when compiling or interpreting a program. Difficulties arise in name masking, forward declarations, and hoisting, while considerably subtler ones arise with non-local variables, particularly in closures.","['case', 'resolution', 'base', 'lexical', 'scope', 'relatively', 'straightforward', 'use', 'implement', 'use', 'read', 'backwards', 'source', 'code', 'determine', 'entity', 'refer', 'implementation', 'maintain', 'list', 'name', 'context', 'compile', 'interpret', 'program', 'difficulty', 'arise', 'masking', 'forward', 'declaration', 'hoisting', 'considerably', 'subtler', 'one', 'arise', 'non', 'local', 'variable', 'particularly', 'closure']"
3964,"The strict definition of the lexical ""scope"" of a name identifier is unambiguous: lexical scope is ""the portion of source code in which a binding of a name with an entity applies"". This is virtually unchanged from its 1960 definition in the specification of ALGOL 60. Representative language specifications follow:","['strict', 'definition', 'lexical', 'scope', 'identifier', 'unambiguous', 'lexical', 'scope', 'portion', 'source', 'code', 'binding', 'entity', 'apply', 'virtually', 'unchanged', '1960', 'definition', 'specification', 'algol', 'representative', 'language', 'specification', 'follow']"
3965,"Most commonly ""scope"" refers to when a given name can refer to a given variable—when a declaration has effect—but can also apply to other entities, such as functions, types, classes, labels, constants, and enumerations.","['commonly', 'scope', 'refer', 'give', 'refer', 'give', 'variable', 'declaration', 'effect', 'apply', 'entity', 'function', 'type', 'class', 'label', 'constant', 'enumeration']"
3966,"A fundamental distinction in scope is what ""part of a program"" means. In languages with lexical scope also called static scope, name resolution depends on the location in the source code and the lexical context also called static context, which is defined by where the named variable or function is defined. In contrast, in languages with dynamic scope the name resolution depends upon the program state when the name is encountered which is determined by the execution context also called runtime context, calling context or dynamic context. In practice, with lexical scope a name is resolved by searching the local lexical context, then if that fails, by searching the outer lexical context, and so on; whereas with dynamic scope, a name is resolved by searching the local execution context, then if that fails, by searching the outer execution context, and so on, progressing up the call stack.4","['fundamental', 'distinction', 'scope', 'program', 'mean', 'language', 'lexical', 'scope', 'call', 'static', 'scope', 'resolution', 'depend', 'location', 'source', 'code', 'lexical', 'context', 'call', 'static', 'context', 'define', 'name', 'variable', 'function', 'define', 'contrast', 'language', 'dynamic', 'scope', 'resolution', 'depend', 'program', 'state', 'encounter', 'determine', 'execution', 'context', 'call', 'runtime', 'context', 'call', 'context', 'dynamic', 'context', 'practice', 'lexical', 'scope', 'resolve', 'search', 'local', 'lexical', 'context', 'fail', 'search', 'outer', 'lexical', 'context', 'dynamic', 'scope', 'resolve', 'search', 'local', 'execution', 'context', 'fail', 'search', 'outer', 'execution', 'context', 'progress', 'stack']"
3967,"Most modern languages use lexical scope for variables and functions, though dynamic scope is used in some languages, notably some dialects of Lisp, some ""scripting"" languages, and some template languages. c Perl 5 offers both lexical and dynamic scope. Even in lexically scoped languages, scope for closures can be confusing to the uninitiated,citation needed as these depend on the lexical context where the closure is defined, not where it is called.","['modern', 'language', 'use', 'lexical', 'scope', 'variable', 'function', 'dynamic', 'scope', 'language', 'notably', 'dialect', 'lisp', 'scripting', 'language', 'template', 'language', 'perl', 'offer', 'lexical', 'dynamic', 'scope', 'lexically', 'scope', 'language', 'scope', 'closure', 'confusing', 'uninitiated', 'citation', 'need', 'depend', 'lexical', 'context', 'closure', 'define', 'call']"
3968,"Lexical resolution can be determined at compile time, and is also known as early binding, while dynamic resolution can in general only be determined at run time, and thus is known as late binding.","['lexical', 'resolution', 'determine', 'compile', 'time', 'know', 'early', 'bind', 'dynamic', 'resolution', 'general', 'determine', 'run', 'time', 'know', 'late', 'bind']"
3969,"In object-oriented programming, dynamic dispatch selects an object method at runtime, though whether the actual name binding is done at compile time or run time depends on the language. De facto dynamic scope is common in macro languages, which do not directly do name resolution, but instead expand in place.","['object', 'orient', 'programming', 'dynamic', 'dispatch', 'select', 'object', 'method', 'runtime', 'actual', 'binding', 'compile', 'time', 'run', 'time', 'depend', 'language', 'facto', 'dynamic', 'scope', 'common', 'macro', 'language', 'directly', 'resolution', 'instead', 'expand', 'place']"
3970,"Some programming frameworks like AngularJS use the term ""scope"" to mean something entirely different than how it is used in this article. In those frameworks the scope is just an object of the programming language that they use JavaScript in case of AngularJS that is used in certain ways by the framework to emulate dynamic scope in a language that uses lexical scope for its variables. Those AngularJS scopes can themselves be in context or not in context using the usual meaning of the term in any given part of the program, following the usual rules of variable scope of the language like any other object, and using their own inheritance and transclusion rules. In the context of AngularJS, sometimes the term ""$scope"" with a dollar sign is used to avoid confusion, but using the dollar sign in variable names is often discouraged by the style guides.5","['programming', 'framework', 'like', 'angularjs', 'use', 'term', 'scope', 'mean', 'entirely', 'different', 'article', 'framework', 'scope', 'object', 'programming', 'language', 'use', 'javascript', 'case', 'angularjs', 'certain', 'way', 'framework', 'emulate', 'dynamic', 'scope', 'language', 'use', 'lexical', 'scope', 'variable', 'angularjs', 'scope', 'context', 'context', 'usual', 'meaning', 'term', 'give', 'program', 'follow', 'usual', 'rule', 'variable', 'scope', 'language', 'like', 'object', 'inheritance', 'transclusion', 'rule', 'context', 'angularjs', 'term', 'scope', 'dollar', 'sign', 'avoid', 'confusion', 'dollar', 'sign', 'variable', 'name', 'discourage', 'style', 'guides']"
3971,"Scope is an important component of name resolution,d which is in turn fundamental to language semantics. Name resolution including scope varies between programming languages, and within a programming language, varies by type of entity; the rules for scope are called scope rules or scoping rules. Together with namespaces, scope rules are crucial in modular programming, so a change in one part of the program does not break an unrelated part.","['scope', 'important', 'component', 'resolution', 'turn', 'fundamental', 'language', 'semantic', 'resolution', 'include', 'scope', 'varie', 'programming', 'language', 'programming', 'language', 'vary', 'type', 'entity', 'rule', 'scope', 'call', 'scope', 'rule', 'scope', 'rule', 'namespace', 'scope', 'rule', 'crucial', 'modular', 'programming', 'change', 'program', 'break', 'unrelated']"
3972,"When discussing scope, there are three basic concepts: scope, extent, and context. ""Scope"" and ""context"" in particular are frequently confused: scope is a property of a name binding, while context is a property of a part of a program, that is either a portion of source code lexical context or static context or a portion of run time execution context, runtime context, calling context or dynamic context. Execution context consists of lexical context at the current execution point plus additional runtime state such as the call stack.e Strictly speaking, during execution a program enters and exits various name bindings' scopes, and at a point in execution name bindings are ""in context"" or ""not in context"", hence name bindings ""come into context"" or ""go out of context"" as the program execution enters or exits the scope.f However, in practice usage is much looser.","['discuss', 'scope', 'basic', 'concept', 'scope', 'extent', 'context', 'scope', 'context', 'particular', 'frequently', 'confuse', 'scope', 'property', 'bind', 'context', 'property', 'program', 'portion', 'source', 'code', 'lexical', 'context', 'static', 'context', 'portion', 'run', 'time', 'execution', 'context', 'runtime', 'context', 'call', 'context', 'dynamic', 'context', 'execution', 'context', 'consist', 'lexical', 'context', 'current', 'execution', 'point', 'plus', 'additional', 'runtime', 'state', 'stack.e', 'strictly', 'speak', 'execution', 'program', 'enter', 'exit', 'binding', 'scope', 'point', 'execution', 'binding', 'context', 'context', 'binding', 'come', 'context', 'context', 'program', 'execution', 'enter', 'exit', 'scope.f', 'practice', 'usage', 'loose']"
3973,"Scope is a source-code level concept, and a property of name bindings, particularly variable or function name bindings—names in the source code are references to entities in the program—and is part of the behavior of a compiler or interpreter of a language. As such, issues of scope are similar to pointers, which are a type of reference used in programs more generally. Using the value of a variable when the name is in context but the variable is uninitialized is analogous to dereferencing accessing the value of a wild pointer, as it is undefined. However, as variables are not destroyed until they go out of context, the analog of a dangling pointer does not exist.","['scope', 'source', 'code', 'level', 'concept', 'property', 'binding', 'particularly', 'variable', 'function', 'binding', 'name', 'source', 'code', 'reference', 'entity', 'program', 'behavior', 'compiler', 'interpreter', 'language', 'issue', 'scope', 'similar', 'pointer', 'type', 'reference', 'program', 'generally', 'value', 'variable', 'context', 'variable', 'uninitialized', 'analogous', 'dereference', 'access', 'value', 'wild', 'pointer', 'undefined', 'variable', 'destroy', 'context', 'analog', 'dangle', 'pointer', 'exist']"
3974,"For entities such as variables, scope is a subset of lifetime also known as extent—a name can only refer to a variable that exists possibly with undefined value, but variables that exist are not necessarily visible: a variable may exist but be inaccessible the value is stored but not referred to within a given context, or accessible but not via the given name, in which case it is not in context the program is ""out of the scope of the name"". In other cases ""lifetime"" is irrelevant—a label named position in the source code has lifetime identical with the program for statically compiled languages, but may be in context or not at a given point in the program, and likewise for static variables—a static global variable is in context for the entire program, while a static local variable is only in context within a function or other local context, but both have lifetime of the entire run of the program.","['entity', 'variable', 'scope', 'subset', 'lifetime', 'know', 'extent', 'refer', 'variable', 'exist', 'possibly', 'undefined', 'value', 'variable', 'exist', 'necessarily', 'visible', 'variable', 'exist', 'inaccessible', 'value', 'store', 'refer', 'give', 'context', 'accessible', 'give', 'case', 'context', 'program', 'scope', 'case', 'lifetime', 'irrelevant', 'label', 'name', 'position', 'source', 'code', 'lifetime', 'identical', 'program', 'statically', 'compile', 'language', 'context', 'give', 'point', 'program', 'likewise', 'static', 'variable', 'static', 'global', 'variable', 'context', 'entire', 'program', 'static', 'local', 'variable', 'context', 'function', 'local', 'context', 'lifetime', 'entire', 'run', 'program']"
3975,"Determining which entity a name refers to is known as name resolution or name binding particularly in object-oriented programming, and varies between languages. Given a name, the language properly, the compiler or interpreter checks all entities that are in context for matches; in case of ambiguity two entities with the same name, such as a global and local variable with the same name, the name resolution rules are used to distinguish them. Most frequently, name resolution relies on an ""inner-to-outer context"" rule, such as the Python LEGB Local, Enclosing, Global, Built-in rule: names implicitly resolves to the narrowest relevant context. In some cases name resolution can be explicitly specified, such as by the global and nonlocal keywords in Python; in other cases the default rules cannot be overridden.","['determine', 'entity', 'refer', 'know', 'resolution', 'bind', 'particularly', 'object', 'orient', 'programming', 'vary', 'language', 'give', 'language', 'properly', 'compiler', 'interpreter', 'check', 'entity', 'context', 'match', 'case', 'ambiguity', 'entity', 'global', 'local', 'variable', 'resolution', 'rule', 'distinguish', 'frequently', 'resolution', 'rely', 'inner', 'outer', 'context', 'rule', 'python', 'legb', 'local', 'enclosing', 'global', 'build', 'rule', 'name', 'implicitly', 'resolve', 'narrow', 'relevant', 'context', 'case', 'resolution', 'explicitly', 'specify', 'global', 'nonlocal', 'keyword', 'python', 'case', 'default', 'rule', 'overridden']"
3976,"When two identical names are in context at the same time, referring to different entities, one says that name masking is occurring, where the higher-priority name usually innermost is ""masking"" the lower-priority name. At the level of variables, this is known as variable shadowing. Due to the potential for logic errors from masking, some languages disallow or discourage masking, raising an error or warning at compile time or run time.","['identical', 'name', 'context', 'time', 'refer', 'different', 'entity', 'say', 'masking', 'occur', 'high', 'priority', 'usually', 'innermost', 'mask', 'low', 'priority', 'level', 'variable', 'know', 'variable', 'shadowing', 'potential', 'logic', 'error', 'mask', 'language', 'disallow', 'discourage', 'masking', 'raise', 'error', 'warning', 'compile', 'time', 'run', 'time']"
3977,"Various programming languages have various different scope rules for different kinds of declarations and names. Such scope rules have a large effect on language semantics and, consequently, on the behavior and correctness of programs. In languages like C++, accessing an unbound variable does not have well-defined semantics and may result in undefined behavior, similar to referring to a dangling pointer; and declarations or names used outside their scope will generate syntax errors.","['programming', 'language', 'different', 'scope', 'rule', 'different', 'kind', 'declaration', 'name', 'scope', 'rule', 'large', 'effect', 'language', 'semantic', 'consequently', 'behavior', 'correctness', 'program', 'language', 'like', 'c++', 'access', 'unbound', 'variable', 'define', 'semantic', 'result', 'undefined', 'behavior', 'similar', 'refer', 'dangle', 'pointer', 'declaration', 'name', 'outside', 'scope', 'generate', 'syntax', 'error']"
3978,"Scopes are frequently tied to other language constructs and determined implicitly, but many languages also offer constructs specifically for controlling scope.","['scope', 'frequently', 'tie', 'language', 'construct', 'determine', 'implicitly', 'language', 'offer', 'construct', 'specifically', 'control', 'scope']"
3979,"Scope can vary from as little as a single expression to as much as the entire program, with many possible gradations in between. The simplest scope rule is global scope—all entities are visible throughout the entire program. The most basic modular scope rule is two-level scope, with a global scope anywhere in the program, and local scope within a function. More sophisticated modular programming allows a separate module scope, where names are visible within the module private to the module but not visible outside it. Within a function, some languages, such as C, allow block scope to restrict scope to a subset of a function; others, notably functional languages, allow expression scope, to restrict scope to a single expression. Other scopes include file scope notably in C which behaves similarly to module scope, and block scope outside of functions notably in Perl.","['scope', 'vary', 'little', 'single', 'expression', 'entire', 'program', 'possible', 'gradation', 'simple', 'scope', 'rule', 'global', 'scope', 'entity', 'visible', 'entire', 'program', 'basic', 'modular', 'scope', 'rule', 'level', 'scope', 'global', 'scope', 'program', 'local', 'scope', 'function', 'sophisticated', 'modular', 'programming', 'allow', 'separate', 'module', 'scope', 'name', 'visible', 'module', 'private', 'module', 'visible', 'outside', 'function', 'language', 'allow', 'block', 'scope', 'restrict', 'scope', 'subset', 'function', 'notably', 'functional', 'language', 'allow', 'expression', 'scope', 'restrict', 'scope', 'single', 'expression', 'scope', 'include', 'file', 'scope', 'notably', 'behave', 'similarly', 'module', 'scope', 'block', 'scope', 'outside', 'function', 'notably', 'perl']"
3980,"A subtle issue is exactly when a scope begins and ends. In some languages, such as C, a name's scope begins at the name declaration, and thus different names declared within a given block can have different scopes. This requires declaring functions before use, though not necessarily defining them, and requires forward declaration in some cases, notably for mutual recursion. In other languages, such as Python, a name's scope begins at the start of the relevant block where the name is declared such as the start of a function, regardless of where it is defined, so all names within a given block have the same scope. In JavaScript, the scope of a name declared with let or const begins at the name declaration, and the scope of a name declared with var begins at the start of the function where the name is declared, which is known as variable hoisting. Behavior of names in context that have undefined value differs: in Python use of undefined names yields a runtime error, while in JavaScript undefined names declared with var are usable throughout the function because they are implicitly bound to the value undefined.","['subtle', 'issue', 'exactly', 'scope', 'begin', 'end', 'language', 'scope', 'begin', 'declaration', 'different', 'name', 'declare', 'give', 'block', 'different', 'scope', 'require', 'declare', 'function', 'use', 'necessarily', 'define', 'require', 'forward', 'declaration', 'case', 'notably', 'mutual', 'recursion', 'language', 'python', 'scope', 'begin', 'start', 'relevant', 'block', 'declare', 'start', 'function', 'regardless', 'define', 'name', 'give', 'block', 'scope', 'javascript', 'scope', 'declare', 'let', 'const', 'begin', 'declaration', 'scope', 'declare', 'var', 'begin', 'start', 'function', 'declare', 'know', 'variable', 'hoisting', 'behavior', 'name', 'context', 'undefined', 'value', 'differ', 'python', 'use', 'undefined', 'name', 'yield', 'runtime', 'error', 'javascript', 'undefine', 'name', 'declare', 'var', 'usable', 'function', 'implicitly', 'bind', 'value', 'undefined']"
3981,"The scope of a name binding is an expression, which is known as expression scope. Expression scope is available in many languages, especially functional languages which offer a feature called let-expressions allowing a declaration's scope to be a single expression. This is convenient if, for example, an intermediate value is needed for a computation. For example, in Standard ML, if f returns 12, then let val x = f in x * x end is an expression that evaluates to 144, using a temporary variable named x to avoid calling f twice. Some languages with block scope approximate this functionality by offering syntax for a block to be embedded into an expression; for example, the aforementioned Standard ML expression could be written in Perl as do my $x = f; $x * $x , or in GNU C as int x = f; x * x; .","['scope', 'bind', 'expression', 'know', 'expression', 'scope', 'expression', 'scope', 'available', 'language', 'especially', 'functional', 'language', 'offer', 'feature', 'call', 'let', 'expression', 'allow', 'declaration', 'scope', 'single', 'expression', 'convenient', 'example', 'intermediate', 'value', 'need', 'computation', 'example', 'standard', 'return', 'let', 'val', 'end', 'expression', 'evaluate', '144', 'temporary', 'variable', 'name', 'avoid', 'call', 'twice', 'language', 'block', 'scope', 'approximate', 'functionality', 'offer', 'syntax', 'block', 'embed', 'expression', 'example', 'aforementione', 'standard', 'expression', 'write', 'perl', 'gnu', 'int']"
3982,"In Python, auxiliary variables in generator expressions and list comprehensions in Python 3 have expression scope.","['python', 'auxiliary', 'variable', 'generator', 'expression', 'list', 'comprehension', 'python', 'expression', 'scope']"
3983,"In C, variable names in a function prototype have expression scope, known in this context as function protocol scope. As the variable names in the prototype are not referred to they may be different in the actual definition—they are just dummies—these are often omitted, though they may be used for generating documentation, for instance.","['variable', 'name', 'function', 'prototype', 'expression', 'scope', 'know', 'context', 'function', 'protocol', 'scope', 'variable', 'name', 'prototype', 'refer', 'different', 'actual', 'definition', 'dummy', 'omit', 'generate', 'documentation', 'instance']"
3984,"The scope of a name binding is a block, which is known as block scope. Block scope is available in many, but not all, block-structured programming languages. This began with ALGOL 60, where ""every declaration ... is valid only for that block."",6 and today is particularly associated with languages in the Pascal and C families and traditions. Most often this block is contained within a function, thus restricting the scope to a part of a function, but in some cases, such as Perl, the block may not be within a function.","['scope', 'bind', 'block', 'know', 'block', 'scope', 'block', 'scope', 'available', 'block', 'structure', 'programming', 'language', 'begin', 'algol', 'declaration', 'valid', 'block', 'today', 'particularly', 'associate', 'language', 'pascal', 'family', 'tradition', 'block', 'contain', 'function', 'restrict', 'scope', 'function', 'case', 'perl', 'block', 'function']"
3985,"A representative example of the use of block scope is the C code shown here, where two variables are scoped to the loop: the loop variable n, which is initialized once and incremented on each iteration of the loop, and the auxiliary variable n_squared, which is initialized at each iteration. The purpose is to avoid adding variables to the function scope that are only relevant to a particular block—for example, this prevents errors where the generic loop variable i has accidentally already been set to another value. In this example the expression n * n would generally not be assigned to an auxiliary variable, and the body of the loop would simply be written ret += n * n but in more complicated examples auxiliary variables are useful.","['representative', 'example', 'use', 'block', 'scope', 'code', 'show', 'variable', 'scope', 'loop', 'loop', 'variable', 'initialize', 'incremente', 'iteration', 'loop', 'auxiliary', 'variable', 'n_square', 'initialize', 'iteration', 'purpose', 'avoid', 'add', 'variable', 'function', 'scope', 'relevant', 'particular', 'block', 'example', 'prevent', 'error', 'generic', 'loop', 'variable', 'accidentally', 'set', 'value', 'example', 'expression', 'generally', 'assign', 'auxiliary', 'variable', 'body', 'loop', 'simply', 'write', 'ret', 'complicated', 'example', 'auxiliary', 'variable', 'useful']"
3986,"Blocks are primarily used for control flow, such as with if, while, and for loops, and in these cases block scope means the scope of variable depends on the structure of a function's flow of execution. However, languages with block scope typically also allow the use of ""naked"" blocks, whose sole purpose is to allow fine-grained control of variable scope. For example, an auxiliary variable may be defined in a block, then used say, added to a variable with function scope and discarded when the block ends, or a while loop might be enclosed in a block that initializes variables used inside the loop that should only be initialized once.","['block', 'primarily', 'control', 'flow', 'loop', 'case', 'block', 'scope', 'mean', 'scope', 'variable', 'depend', 'structure', 'function', 'flow', 'execution', 'language', 'block', 'scope', 'typically', 'allow', 'use', 'naked', 'block', 'sole', 'purpose', 'allow', 'fine', 'grain', 'control', 'variable', 'scope', 'example', 'auxiliary', 'variable', 'define', 'block', 'add', 'variable', 'function', 'scope', 'discard', 'block', 'end', 'loop', 'enclose', 'block', 'initialize', 'variable', 'inside', 'loop', 'initialize']"
3987,"A subtlety of several programming languages, such as Algol 68 and C demonstrated in this example and standardized since C99, is that block-scope variables can be declared not only within the body of the block, but also within the control statement, if any. This is analogous to function parameters, which are declared in the function declaration before the block of the function body starts, and in scope for the whole function body. This is primarily used in for loops, which have an initialization statement separate from the loop condition, unlike while loops, and is a common idiom.","['subtlety', 'programming', 'language', 'algol', 'demonstrate', 'example', 'standardized', 'c99', 'block', 'scope', 'variable', 'declare', 'body', 'block', 'control', 'statement', 'analogous', 'function', 'parameter', 'declare', 'function', 'declaration', 'block', 'function', 'body', 'start', 'scope', 'function', 'body', 'primarily', 'loop', 'initialization', 'statement', 'separate', 'loop', 'condition', 'unlike', 'loop', 'common', 'idiom']"
3988,"Block scope can be used for shadowing. In this example, inside the block the auxiliary variable could also have been called n, shadowing the parameter name, but this is considered poor style due to the potential for errors. Furthermore, some descendants of C, such as Java and C#, despite having support for block scope in that a local variable can be made to go out of context before the end of a function, do not allow one local variable to hide another. In such languages, the attempted declaration of the second n would result in a syntax error, and one of the n variables would have to be renamed.","['block', 'scope', 'shadow', 'example', 'inside', 'block', 'auxiliary', 'variable', 'call', 'shadow', 'parameter', 'consider', 'poor', 'style', 'potential', 'error', 'furthermore', 'descendant', 'java', 'despite', 'have', 'support', 'block', 'scope', 'local', 'variable', 'context', 'end', 'function', 'allow', 'local', 'variable', 'hide', 'language', 'attempt', 'declaration', 'second', 'result', 'syntax', 'error', 'variable', 'rename']"
3989,"If a block is used to set the value of a variable, block scope requires that the variable be declared outside of the block. This complicates the use of conditional statements with single assignment. For example, in Python, which does not use block scope, one may initialize a variable as such:","['block', 'set', 'value', 'variable', 'block', 'scope', 'require', 'variable', 'declare', 'outside', 'block', 'complicate', 'use', 'conditional', 'statement', 'single', 'assignment', 'example', 'python', 'use', 'block', 'scope', 'initialize', 'variable']"
3990,where a is accessible after the if statement.,"['accessible', 'statement']"
3991,"In Perl, which has block scope, this instead requires declaring the variable prior to the block:","['perl', 'block', 'scope', 'instead', 'require', 'declare', 'variable', 'prior', 'block']"
3992,"Often this is instead rewritten using multiple assignment, initializing the variable to a default value. In Python where it is not necessary this would be:","['instead', 'rewrite', 'multiple', 'assignment', 'initialize', 'variable', 'default', 'value', 'python', 'necessary']"
3993,while in Perl this would be:,['perl']
3994,"In case of a single variable assignment, an alternative is to use the ternary operator to avoid a block, but this is not in general possible for multiple variable assignments, and is difficult to read for complex logic.","['case', 'single', 'variable', 'assignment', 'alternative', 'use', 'ternary', 'operator', 'avoid', 'block', 'general', 'possible', 'multiple', 'variable', 'assignment', 'difficult', 'read', 'complex', 'logic']"
3995,"This is a more significant issue in C, notably for string assignment, as string initialization can automatically allocate memory, while string assignment to an already initialized variable requires allocating memory, a string copy, and checking that these are successful.","['significant', 'issue', 'notably', 'string', 'assignment', 'string', 'initialization', 'automatically', 'allocate', 'memory', 'stre', 'assignment', 'initialize', 'variable', 'require', 'allocate', 'memory', 'string', 'copy', 'check', 'successful']"
3996,"Some languages allow the concept of block scope to be applied, to varying extents, outside of a function. For example, in the Perl snippet at right, $counter is a variable name with block scope due to the use of the my keyword, while increment_counter is a function name with global scope. Each call to increment_counter will increase the value of $counter by one, and return the new value. Code outside of this block can call increment_counter, but cannot otherwise obtain or alter the value of $counter. This idiom allows one to define closures in Perl.","['language', 'allow', 'concept', 'block', 'scope', 'apply', 'vary', 'extent', 'outside', 'function', 'example', 'perl', 'snippet', 'right', 'counter', 'variable', 'block', 'scope', 'use', 'keyword', 'increment_counter', 'function', 'global', 'scope', 'increment_counter', 'increase', 'value', 'counter', 'return', 'new', 'value', 'code', 'outside', 'block', 'increment_counter', 'obtain', 'alter', 'value', 'counter', 'idiom', 'allow', 'define', 'closure', 'perl']"
3997,"When the scope of variables declared within a function does not extend beyond that function, this is known as function scope.7 Function scope is available in most programming languages which offer a way to create a local variable in a function or subroutine: a variable whose scope ends that goes out of context when the function returns. In most cases the lifetime of the variable is the duration of the function call—it is an automatic variable, created when the function starts or the variable is declared, destroyed when the function returns—while the scope of the variable is within the function, though the meaning of ""within"" depends on whether scope is lexical or dynamic. However, some languages, such as C, also provide for static local variables, where the lifetime of the variable is the entire lifetime of the program, but the variable is only in context when inside the function. In the case of static local variables, the variable is created when the program initializes, and destroyed only when the program terminates, as with a static global variable, but is only in context within a function, like an automatic local variable.","['scope', 'variable', 'declare', 'function', 'extend', 'function', 'know', 'function', 'scope', 'function', 'scope', 'available', 'programming', 'language', 'offer', 'way', 'create', 'local', 'variable', 'function', 'subroutine', 'variable', 'scope', 'end', 'go', 'context', 'function', 'return', 'case', 'lifetime', 'variable', 'duration', 'function', 'automatic', 'variable', 'create', 'function', 'start', 'variable', 'declare', 'destroy', 'function', 'return', 'scope', 'variable', 'function', 'meaning', 'depend', 'scope', 'lexical', 'dynamic', 'language', 'provide', 'static', 'local', 'variable', 'lifetime', 'variable', 'entire', 'lifetime', 'program', 'variable', 'context', 'inside', 'function', 'case', 'static', 'local', 'variable', 'variable', 'create', 'program', 'initialize', 'destroy', 'program', 'terminate', 'static', 'global', 'variable', 'context', 'function', 'like', 'automatic', 'local', 'variable']"
3998,"Importantly, in lexical scope a variable with function scope has scope only within the lexical context of the function: it goes out of context when another function is called within the function, and comes back into context when the function returns—called functions have no access to the local variables of calling functions, and local variables are only in context within the body of the function in which they are declared. By contrast, in dynamic scope, the scope extends to the execution context of the function: local variables stay in context when another function is called, only going out of context when the defining function ends, and thus local variables are in context of the function in which they are defined and all called functions. In languages with lexical scope and nested functions, local variables are in context for nested functions, since these are within the same lexical context, but not for other functions that are not lexically nested. A local variable of an enclosing function is known as a non-local variable for the nested function. Function scope is also applicable to anonymous functions.","['importantly', 'lexical', 'scope', 'variable', 'function', 'scope', 'scope', 'lexical', 'context', 'function', 'go', 'context', 'function', 'call', 'function', 'come', 'context', 'function', 'return', 'call', 'function', 'access', 'local', 'variable', 'call', 'function', 'local', 'variable', 'context', 'body', 'function', 'declare', 'contrast', 'dynamic', 'scope', 'scope', 'extend', 'execution', 'context', 'function', 'local', 'variable', 'stay', 'context', 'function', 'call', 'go', 'context', 'define', 'function', 'end', 'local', 'variable', 'context', 'function', 'define', 'call', 'function', 'language', 'lexical', 'scope', 'nested', 'function', 'local', 'variable', 'context', 'nested', 'function', 'lexical', 'context', 'function', 'lexically', 'nest', 'local', 'variable', 'enclosing', 'function', 'know', 'non', 'local', 'variable', 'nested', 'function', 'function', 'scope', 'applicable', 'anonymous', 'function']"
3999,"For example, in the snippet of Python code on the right, two functions are defined: square and sum_of_squares. square computes the square of a number; sum_of_squares computes the sum of all squares up to a number. For example, square4 is 42 = 16, and sum_of_squares4 is 02 + 12 + 22 + 32 + 42 = 30.","['example', 'snippet', 'python', 'code', 'right', 'function', 'define', 'square', 'sum_of_squares', 'square', 'compute', 'square', 'number', 'sum_of_squares', 'compute', 'sum', 'square', 'number', 'example', 'square4', 'sum_of_squares4']"
4000,"Each of these functions has a variable named n that represents the argument to the function. These two n variables are completely separate and unrelated, despite having the same name, because they are lexically scoped local variables with function scope: each one's scope is its own, lexically separate function and thus, they don't overlap. Therefore, sum_of_squares can call square without its own n being altered. Similarly, sum_of_squares has variables named total and i; these variables, because of their limited scope, will not interfere with any variables named total or i that might belong to any other function. In other words, there is no risk of a name collision between these names and any unrelated names, even if they are identical.","['function', 'variable', 'name', 'represent', 'argument', 'function', 'variable', 'completely', 'separate', 'unrelated', 'despite', 'have', 'lexically', 'scope', 'local', 'variable', 'function', 'scope', 'scope', 'lexically', 'separate', 'function', 'overlap', 'sum_of_squares', 'square', 'alter', 'similarly', 'sum_of_squares', 'variable', 'name', 'total', 'variable', 'limited', 'scope', 'interfere', 'variable', 'name', 'total', 'belong', 'function', 'word', 'risk', 'collision', 'name', 'unrelated', 'name', 'identical']"
4001,"No name masking is occurring: only one variable named n is in context at any given time, as the scopes do not overlap. By contrast, were a similar fragment to be written in a language with dynamic scope, the n in the calling function would remain in context in the called function—the scopes would overlap—and would be masked ""shadowed"" by the new n in the called function.","['masking', 'occur', 'variable', 'name', 'context', 'give', 'time', 'scope', 'overlap', 'contrast', 'similar', 'fragment', 'write', 'language', 'dynamic', 'scope', 'call', 'function', 'remain', 'context', 'call', 'function', 'scope', 'overlap', 'mask', 'shadow', 'new', 'call', 'function']"
4002,"Function scope is significantly more complicated if functions are first-class objects and can be created locally to a function and then returned. In this case any variables in the nested function that are not local to it unbound variables in the function definition, that resolve to variables in an enclosing context create a closure, as not only the function itself, but also its context of variables must be returned, and then potentially called in a different context. This requires significantly more support from the compiler, and can complicate program analysis.","['function', 'scope', 'significantly', 'complicated', 'function', 'class', 'object', 'create', 'locally', 'function', 'return', 'case', 'variable', 'nested', 'function', 'local', 'unbound', 'variable', 'function', 'definition', 'resolve', 'variable', 'enclose', 'context', 'create', 'closure', 'function', 'context', 'variable', 'return', 'potentially', 'call', 'different', 'context', 'require', 'significantly', 'support', 'compiler', 'complicate', 'program', 'analysis']"
4003,"The scope of a name binding is a file, which is known as file scope. File scope is largely particular to C and C++, where scope of variables and functions declared at the top level of a file not within any function is for the entire file—or rather for C, from the declaration until the end of the source file, or more precisely translation unit internal linking. This can be seen as a form of module scope, where modules are identified with files, and in more modern languages is replaced by an explicit module scope. Due to the presence of include statements, which add variables and functions to the internal context and may themselves call further include statements, it can be difficult to determine what is in context in the body of a file.","['scope', 'bind', 'file', 'know', 'file', 'scope', 'file', 'scope', 'largely', 'particular', 'c++', 'scope', 'variable', 'function', 'declare', 'level', 'file', 'function', 'entire', 'file', 'declaration', 'end', 'source', 'file', 'precisely', 'translation', 'unit', 'internal', 'linking', 'see', 'form', 'module', 'scope', 'module', 'identify', 'file', 'modern', 'language', 'replace', 'explicit', 'module', 'scope', 'presence', 'include', 'statement', 'add', 'variable', 'function', 'internal', 'context', 'include', 'statement', 'difficult', 'determine', 'context', 'body', 'file']"
4004,"In the C code snippet above, the function name sum_of_squares has file scope.","['code', 'snippet', 'function', 'sum_of_squares', 'file', 'scope']"
4005,"The scope of a name binding is a module, which is known as module scope. Module scope is available in modular programming languages where modules which may span various files are the basic unit of a complex program, as they allow information hiding and exposing a limited interface. Module scope was pioneered in the Modula family of languages, and Python which was influenced by Modula is a representative contemporary example.","['scope', 'bind', 'module', 'know', 'module', 'scope', 'module', 'scope', 'available', 'modular', 'programming', 'language', 'module', 'span', 'file', 'basic', 'unit', 'complex', 'program', 'allow', 'information', 'hiding', 'expose', 'limited', 'interface', 'module', 'scope', 'pioneer', 'modula', 'family', 'language', 'python', 'influence', 'modula', 'representative', 'contemporary', 'example']"
4006,"In some object-oriented programming languages that lack direct support for modules, such as C++, a similar structure is instead provided by the class hierarchy, where classes are the basic unit of the program, and a class can have private methods. This is properly understood in the context of dynamic dispatch rather than name resolution and scope, though they often play analogous roles. In some cases both these facilities are available, such as in Python, which has both modules and classes, and code organization as a module-level function or a conventionally private method is a choice of the programmer.","['object', 'orient', 'programming', 'language', 'lack', 'direct', 'support', 'module', 'c++', 'similar', 'structure', 'instead', 'provide', 'class', 'hierarchy', 'class', 'basic', 'unit', 'program', 'class', 'private', 'method', 'properly', 'understand', 'context', 'dynamic', 'dispatch', 'resolution', 'scope', 'play', 'analogous', 'role', 'case', 'facility', 'available', 'python', 'module', 'class', 'code', 'organization', 'module', 'level', 'function', 'conventionally', 'private', 'method', 'choice', 'programmer']"
4007,"The scope of a name binding is an entire program, which is known as global scope. Variable names with global scope—called global variables—are frequently considered bad practice, at least in some languages, due to the possibility of name collisions and unintentional masking, together with poor modularity, and function scope or block scope are considered preferable. However, global scope is typically used depending on the language for various other sorts of names, such as names of functions, names of classes and names of other data types. In these cases mechanisms such as namespaces are used to avoid collisions.","['scope', 'bind', 'entire', 'program', 'know', 'global', 'scope', 'variable', 'name', 'global', 'scope', 'call', 'global', 'variable', 'frequently', 'consider', 'bad', 'practice', 'language', 'possibility', 'collision', 'unintentional', 'masking', 'poor', 'modularity', 'function', 'scope', 'block', 'scope', 'consider', 'preferable', 'global', 'scope', 'typically', 'depend', 'language', 'sort', 'name', 'name', 'function', 'name', 'class', 'name', 'datum', 'type', 'case', 'mechanism', 'namespace', 'avoid', 'collision']"
4008,"The use of local variables — of variable names with limited scope, that only exist within a specific function — helps avoid the risk of a name collision between two identically named variables. However, there are two very different approaches to answering this question: What does it mean to be ""within"" a function?","['use', 'local', 'variable', 'variable', 'name', 'limited', 'scope', 'exist', 'specific', 'function', 'help', 'avoid', 'risk', 'collision', 'identically', 'name', 'variable', 'different', 'approach', 'answer', 'question', 'mean', 'function']"
4009,"In lexical scope or lexical scoping; also called static scope or static scoping, if a variable name's scope is a certain function, then its scope is the program text of the function definition: within that text, the variable name exists, and is bound to the variable's value, but outside that text, the variable name does not exist. By contrast, in dynamic scope or dynamic scoping, if a variable name's scope is a certain function, then its scope is the time-period during which the function is executing: while the function is running, the variable name exists, and is bound to its value, but after the function returns, the variable name does not exist. This means that if function f invokes a separately defined function g, then under lexical scope, function g does not have access to f's local variables assuming the text of g is not inside the text of f, while under dynamic scope, function g does have access to f's local variables since g is invoked during the invocation of f.","['lexical', 'scope', 'lexical', 'scoping', 'call', 'static', 'scope', 'static', 'scoping', 'variable', 'scope', 'certain', 'function', 'scope', 'program', 'text', 'function', 'definition', 'text', 'variable', 'exist', 'bind', 'variable', 'value', 'outside', 'text', 'variable', 'exist', 'contrast', 'dynamic', 'scope', 'dynamic', 'scoping', 'variable', 'scope', 'certain', 'function', 'scope', 'time', 'period', 'function', 'execute', 'function', 'run', 'variable', 'exist', 'bind', 'value', 'function', 'return', 'variable', 'exist', 'mean', 'function', 'invoke', 'separately', 'define', 'function', 'lexical', 'scope', 'function', 'access', 'local', 'variable', 'assume', 'text', 'inside', 'text', 'dynamic', 'scope', 'function', 'access', 'local', 'variable', 'invoke', 'invocation']"
4010,"Consider, for example, the program on the right. The first line, x=1, creates a global variable x and initializes it to 1. The second line, function g echo $x ; x=2 ; , defines a function g that prints out ""echoes"" the current value of x, and then sets x to 2 overwriting the previous value. The third line, function f local x=3 ; g ; defines a function f that creates a local variable x hiding the identically named global variable and initializes it to 3, and then calls g. The fourth line, f, calls f. The fifth line, echo $x, prints out the current value of x.","['consider', 'example', 'program', 'right', 'line', 'x=1', 'create', 'global', 'variable', 'initialize', 'second', 'line', 'function', 'echo', 'x=2', 'define', 'function', 'print', 'echo', 'current', 'value', 'set', 'overwrite', 'previous', 'value', 'line', 'function', 'local', 'x=3', 'define', 'function', 'create', 'local', 'variable', 'hide', 'identically', 'name', 'global', 'variable', 'initialize', 'call', 'fourth', 'line', 'call', 'fifth', 'line', 'echo', 'print', 'current', 'value']"
4011,"So, what exactly does this program print? It depends on the scope rules. If the language of this program is one that uses lexical scope, then g prints and modifies the global variable x because g is defined outside f, so the program prints 1 and then 2. By contrast, if this language uses dynamic scope, then g prints and modifies f's local variable x because g is called from within f, so the program prints 3 and then 1. As it happens, the language of the program is Bash, which uses dynamic scope; so the program prints 3 and then 1. If the same code was run with ksh93 which uses lexical scope, the results would be different.","['exactly', 'program', 'print', 'depend', 'scope', 'rule', 'language', 'program', 'use', 'lexical', 'scope', 'print', 'modify', 'global', 'variable', 'define', 'outside', 'program', 'print', 'contrast', 'language', 'use', 'dynamic', 'scope', 'print', 'modify', 'local', 'variable', 'call', 'program', 'print', 'happen', 'language', 'program', 'bash', 'use', 'dynamic', 'scope', 'program', 'print', 'code', 'run', 'ksh93', 'use', 'lexical', 'scope', 'result', 'different']"
4012,"With lexical scope, a name always refers to its lexical context. This is a property of the program text and is made independent of the runtime call stack by the language implementation. Because this matching only requires analysis of the static program text, this type of scope is also called static scope. Lexical scope is standard in all ALGOL-based languages such as Pascal, Modula-2 and Ada as well as in modern functional languages such as ML and Haskell. It is also used in the C language and its syntactic and semantic relatives, although with different kinds of limitations. Static scope allows the programmer to reason about object references such as parameters, variables, constants, types, functions, etc. as simple name substitutions. This makes it much easier to make modular code and reason about it, since the local naming structure can be understood in isolation. In contrast, dynamic scope forces the programmer to anticipate all possible execution contexts in which the module's code may be invoked.","['lexical', 'scope', 'refer', 'lexical', 'context', 'property', 'program', 'text', 'independent', 'runtime', 'stack', 'language', 'implementation', 'matching', 'require', 'analysis', 'static', 'program', 'text', 'type', 'scope', 'call', 'static', 'scope', 'lexical', 'scope', 'standard', 'algol', 'base', 'language', 'pascal', 'modula-2', 'ada', 'modern', 'functional', 'language', 'haskell', 'language', 'syntactic', 'semantic', 'relative', 'different', 'kind', 'limitation', 'static', 'scope', 'allow', 'programmer', 'reason', 'object', 'reference', 'parameter', 'variable', 'constant', 'type', 'function', 'etc', 'simple', 'substitution', 'make', 'easy', 'modular', 'code', 'reason', 'local', 'naming', 'structure', 'understand', 'isolation', 'contrast', 'dynamic', 'scope', 'force', 'programmer', 'anticipate', 'possible', 'execution', 'context', 'module', 'code', 'invoke']"
4013,"For example, Pascal is lexically scoped. Consider the Pascal program fragment at right. The variable I is visible at all points, because it is never hidden by another variable of the same name. The char variable K is visible only in the main program because it is hidden by the real variable K visible in procedure B and C only. Variable L is also visible only in procedure B and C but it does not hide any other variable. Variable M is only visible in procedure C and therefore not accessible either from procedure B or the main program. Also, procedure C is visible only in procedure B and can therefore not be called from the main program.","['example', 'pascal', 'lexically', 'scope', 'consider', 'pascal', 'program', 'fragment', 'right', 'variable', 'visible', 'point', 'hide', 'variable', 'char', 'variable', 'visible', 'main', 'program', 'hide', 'real', 'variable', 'visible', 'procedure', 'variable', 'visible', 'procedure', 'hide', 'variable', 'variable', 'visible', 'procedure', 'accessible', 'procedure', 'main', 'program', 'procedure', 'visible', 'procedure', 'call', 'main', 'program']"
4014,"There could have been another procedure C declared in the program outside of procedure B. The place in the program where ""C"" is mentioned then determines which of the two procedures named C it represents, thus precisely analogous with the scope of variables.","['procedure', 'declare', 'program', 'outside', 'procedure', 'place', 'program', 'mention', 'determine', 'procedure', 'name', 'represent', 'precisely', 'analogous', 'scope', 'variable']"
4015,"Correct implementation of lexical scope in languages with first-class nested functions is not trivial, as it requires each function value to carry with it a record of the values of the variables that it depends on the pair of the function and this context is called a closure. Depending on implementation and computer architecture, variable lookup may become slightly inefficientcitation needed when very deeply lexically nested functions are used, although there are well-known techniques to mitigate this.89 Also, for nested functions that only refer to their own arguments and immediately local variables, all relative locations can be known at compile time. No overhead at all is therefore incurred when using that type of nested function. The same applies to particular parts of a program where nested functions are not used, and, naturally, to programs written in a language where nested functions are not available such as in the C language.","['correct', 'implementation', 'lexical', 'scope', 'language', 'class', 'nest', 'function', 'trivial', 'require', 'function', 'value', 'carry', 'record', 'value', 'variable', 'depend', 'pair', 'function', 'context', 'call', 'closure', 'depend', 'implementation', 'computer', 'architecture', 'variable', 'lookup', 'slightly', 'inefficientcitation', 'need', 'deeply', 'lexically', 'nest', 'function', 'know', 'technique', 'mitigate', 'this', 'nested', 'function', 'refer', 'argument', 'immediately', 'local', 'variable', 'relative', 'location', 'know', 'compile', 'time', 'overhead', 'incur', 'type', 'nested', 'function', 'apply', 'particular', 'part', 'program', 'nested', 'function', 'naturally', 'program', 'write', 'language', 'nested', 'function', 'available', 'language']"
4016,Lexical scope was first used in the early 1960s for the imperative language ALGOL 60 and has been picked up in most other imperative languages since then.4,"['lexical', 'scope', 'early', '1960', 'imperative', 'language', 'algol', 'pick', 'imperative', 'language', 'then']"
4017,"Languages like Pascal and C have always had lexical scope, since they are both influenced by the ideas that went into ALGOL 60 and ALGOL 68 although C did not include lexically nested functions.","['language', 'like', 'pascal', 'lexical', 'scope', 'influence', 'idea', 'go', 'algol', 'algol', 'include', 'lexically', 'nested', 'function']"
4018,Perl is a language with dynamic scope that added static scope afterwards.,"['perl', 'language', 'dynamic', 'scope', 'add', 'static', 'scope']"
4019,"The original Lisp interpreter 1960 used dynamic scope. Deep binding, which approximates static lexical scope, was introduced around 1962 in LISP 1.5 via the Funarg device developed by Steve Russell, working under John McCarthy.","['original', 'lisp', 'interpreter', '1960', 'dynamic', 'scope', 'deep', 'binding', 'approximate', 'static', 'lexical', 'scope', 'introduce', '1962', 'lisp', '1', 'funarg', 'device', 'develop', 'steve', 'russell', 'work', 'john', 'mccarthy']"
4020,"All early Lisps used dynamic scope, when based on interpreters. In 1982, Guy L. Steele Jr. and the Common LISP Group publish An overview of Common LISP,10 a short review of the history and the divergent implementations of Lisp up to that moment and a review of the features that a Common Lisp implementation should have. On page 102, we read:","['early', 'lisps', 'dynamic', 'scope', 'base', 'interpreter', '1982', 'guy', 'steele', 'jr.', 'common', 'lisp', 'group', 'publish', 'overview', 'common', 'lisp', 'short', 'review', 'history', 'divergent', 'implementation', 'lisp', 'moment', 'review', 'feature', 'common', 'lisp', 'implementation', 'page', '102', 'read']"
4021,"Most LISP implementations are internally inconsistent in that by default the interpreter and compiler may assign different semantics to correct programs; this stems primarily from the fact that the interpreter assumes all variables to be dynamically scoped, while the compiler assumes all variables to be local unless forced to assume otherwise. This has been done for the sake of convenience and efficiency, but can lead to very subtle bugs. The definition of Common LISP avoids such anomalies by explicitly requiring the interpreter and compiler to impose identical semantics on correct programs.","['lisp', 'implementation', 'internally', 'inconsistent', 'default', 'interpreter', 'compiler', 'assign', 'different', 'semantic', 'correct', 'program', 'stem', 'primarily', 'fact', 'interpreter', 'assume', 'variable', 'dynamically', 'scope', 'compiler', 'assume', 'variable', 'local', 'force', 'assume', 'sake', 'convenience', 'efficiency', 'lead', 'subtle', 'bug', 'definition', 'common', 'lisp', 'avoid', 'anomaly', 'explicitly', 'require', 'interpreter', 'compiler', 'impose', 'identical', 'semantic', 'correct', 'program']"
4022,"Implementations of Common LISP were thus required to have lexical scope. Again, from An overview of Common LISP:","['implementation', 'common', 'lisp', 'require', 'lexical', 'scope', 'overview', 'common', 'lisp']"
4023,"In addition, Common LISP offers the following facilities most of which are borrowed from MacLisp, InterLisp or Lisp Machines Lisp: ... Fully lexically scoped variables. The so-called ""FUNARG problem""1112 is completely solved, in both the downward and upward cases.","['addition', 'common', 'lisp', 'offer', 'follow', 'facility', 'borrow', 'maclisp', 'interlisp', 'lisp', 'machines', 'lisp', 'fully', 'lexically', 'scope', 'variable', 'call', 'funarg', 'problem', 'completely', 'solve', 'downward', 'upward', 'case']"
4024,"By the same year in which An overview of Common LISP was published 1982, initial designs also by Guy L. Steele Jr. of a compiled, lexically scoped Lisp, called Scheme had been published and compiler implementations were being attempted. At that time, lexical scope in Lisp was commonly feared to be inefficient to implement. In A History of T,13 Olin Shivers writes:","['year', 'overview', 'common', 'lisp', 'publish', '1982', 'initial', 'design', 'guy', 'steele', 'jr.', 'compile', 'lexically', 'scope', 'lisp', 'call', 'scheme', 'publish', 'compiler', 'implementation', 'attempt', 'time', 'lexical', 'scope', 'lisp', 'commonly', 'fear', 'inefficient', 'implement', 'history', 't', 'olin', 'shivers', 'write']"
4025,All serious Lisps in production use at that time were dynamically scoped. No one who hadn't carefully read the Rabbit14 thesis written by Guy Lewis Steele Jr. in 1978 believed lexical scope would fly; even the few people who had read it were taking a bit of a leap of faith that this was going to work in serious production use.,"['lisps', 'production', 'use', 'time', 'dynamically', 'scope', 'carefully', 'read', 'rabbit14', 'thesis', 'write', 'guy', 'lewis', 'steele', 'jr.', '1978', 'believe', 'lexical', 'scope', 'fly', 'people', 'read', 'take', 'bit', 'leap', 'faith', 'go', 'work', 'production', 'use']"
4026,"The term ""lexical scope"" dates at least to 1967,15 while the term ""lexical scoping"" dates at least to 1970, where it was used in Project MAC to describe the scope rules of the Lisp dialect MDL then known as ""Muddle"".16","['term', 'lexical', 'scope', 'date', '1967', 'term', 'lexical', 'scoping', 'date', '1970', 'project', 'mac', 'describe', 'scope', 'rule', 'lisp', 'dialect', 'mdl', 'know', 'muddle']"
4027,"With dynamic scope, a name refers to execution context. In technical terms, this means that each name has a global stack of bindings. Introducing a local variable with name x pushes a binding onto the global x stack which may have been empty, which is popped off when the control flow leaves the scope. Evaluating x in any context always yields the top binding. Note that this cannot be done at compile-time because the binding stack only exists at run-time, which is why this type of scope is called dynamic scope.","['dynamic', 'scope', 'refer', 'execution', 'context', 'technical', 'term', 'mean', 'global', 'stack', 'binding', 'introduce', 'local', 'variable', 'push', 'binding', 'global', 'stack', 'pop', 'control', 'flow', 'leave', 'scope', 'evaluating', 'context', 'yield', 'bind', 'note', 'compile', 'time', 'bind', 'stack', 'exist', 'run', 'time', 'type', 'scope', 'call', 'dynamic', 'scope']"
4028,Dynamic scope is uncommon in modern languages.4,"['dynamic', 'scope', 'uncommon', 'modern', 'languages']"
4029,"Generally, certain blocks are defined to create bindings whose lifetime is the execution time of the block; this adds some features of static scope to the dynamic scope process. However, since a section of code can be called from many different locations and situations, it can be difficult to determine at the outset what bindings will apply when a variable is used or if one exists at all. This can be beneficial; application of the principle of least knowledge suggests that code avoid depending on the reasons for or circumstances of a variable's value, but simply use the value according to the variable's definition. This narrow interpretation of shared data can provide a very flexible system for adapting the behavior of a function to the current state or policy of the system. However, this benefit relies on careful documentation of all variables used this way as well as on careful avoidance of assumptions about a variable's behavior, and does not provide any mechanism to detect interference between different parts of a program. Some languages, like Perl and Common Lisp, allow the programmer to choose static or dynamic scope when defining or redefining a variable. Examples of languages that use dynamic scope include Logo, Emacs Lisp, LaTeX and the shell languages bash, dash, and PowerShell.","['generally', 'certain', 'block', 'define', 'create', 'binding', 'lifetime', 'execution', 'time', 'block', 'add', 'feature', 'static', 'scope', 'dynamic', 'scope', 'process', 'section', 'code', 'call', 'different', 'location', 'situation', 'difficult', 'determine', 'outset', 'binding', 'apply', 'variable', 'exist', 'beneficial', 'application', 'principle', 'knowledge', 'suggest', 'code', 'avoid', 'depend', 'reason', 'circumstance', 'variable', 'value', 'simply', 'use', 'value', 'accord', 'variable', 'definition', 'narrow', 'interpretation', 'share', 'datum', 'provide', 'flexible', 'system', 'adapt', 'behavior', 'function', 'current', 'state', 'policy', 'system', 'benefit', 'rely', 'careful', 'documentation', 'variable', 'way', 'careful', 'avoidance', 'assumption', 'variable', 'behavior', 'provide', 'mechanism', 'detect', 'interference', 'different', 'part', 'program', 'language', 'like', 'perl', 'common', 'lisp', 'allow', 'programmer', 'choose', 'static', 'dynamic', 'scope', 'define', 'redefine', 'variable', 'example', 'language', 'use', 'dynamic', 'scope', 'include', 'logo', 'emacs', 'lisp', 'latex', 'shell', 'language', 'bash', 'dash', 'powershell']"
4030,"Dynamic scope is fairly easy to implement. To find an name's value, the program could traverse the runtime stack, checking each activation record each function's stack frame for a value for the name. In practice, this is made more efficient via the use of an association list, which is a stack of name/value pairs. Pairs are pushed onto this stack whenever declarations are made, and popped whenever variables go out of context.17 Shallow binding is an alternative strategy that is considerably faster, making use of a central reference table, which associates each name with its own stack of meanings. This avoids a linear search during run-time to find a particular name, but care should be taken to properly maintain this table.17 Note that both of these strategies assume a last-in-first-out LIFO ordering to bindings for any one variable; in practice all bindings are so ordered.","['dynamic', 'scope', 'fairly', 'easy', 'implement', 'find', 'value', 'program', 'traverse', 'runtime', 'stack', 'check', 'activation', 'record', 'function', 'stack', 'frame', 'value', 'practice', 'efficient', 'use', 'association', 'list', 'stack', 'value', 'pair', 'pair', 'push', 'stack', 'declaration', 'pop', 'variable', 'context', 'shallow', 'binding', 'alternative', 'strategy', 'considerably', 'fast', 'make', 'use', 'central', 'reference', 'table', 'associate', 'stack', 'meaning', 'avoid', 'linear', 'search', 'run', 'time', 'find', 'particular', 'care', 'take', 'properly', 'maintain', 'table', 'note', 'strategy', 'assume', 'lifo', 'order', 'binding', 'variable', 'practice', 'binding', 'order']"
4031,"An even simpler implementation is the representation of dynamic variables with simple global variables. The local binding is performed by saving the original value in an anonymous location on the stack that is invisible to the program. When that binding scope terminates, the original value is restored from this location. In fact, dynamic scope originated in this manner. Early implementations of Lisp used this obvious strategy for implementing local variables, and the practice survives in some dialects which are still in use, such as GNU Emacs Lisp. Lexical scope was introduced into Lisp later. This is equivalent to the above shallow binding scheme, except that the central reference table is simply the global variable binding context, in which the current meaning of the variable is its global value. Maintaining global variables isn't complex. For instance, a symbol object can have a dedicated slot for its global value.","['simple', 'implementation', 'representation', 'dynamic', 'variable', 'simple', 'global', 'variable', 'local', 'binding', 'perform', 'save', 'original', 'value', 'anonymous', 'location', 'stack', 'invisible', 'program', 'bind', 'scope', 'terminate', 'original', 'value', 'restore', 'location', 'fact', 'dynamic', 'scope', 'originate', 'manner', 'early', 'implementation', 'lisp', 'obvious', 'strategy', 'implement', 'local', 'variable', 'practice', 'survive', 'dialect', 'use', 'gnu', 'emacs', 'lisp', 'lexical', 'scope', 'introduce', 'lisp', 'later', 'equivalent', 'shallow', 'bind', 'scheme', 'central', 'reference', 'table', 'simply', 'global', 'variable', 'bind', 'context', 'current', 'meaning', 'variable', 'global', 'value', 'maintain', 'global', 'variable', 'complex', 'instance', 'symbol', 'object', 'dedicated', 'slot', 'global', 'value']"
4032,"Dynamic scope provides an excellent abstraction for thread-local storage, but if it is used that way it cannot be based on saving and restoring a global variable. A possible implementation strategy is for each variable to have a thread-local key. When the variable is accessed, the thread-local key is used to access the thread-local memory location by code generated by the compiler, which knows which variables are dynamic and which are lexical. If the thread-local key does not exist for the calling thread, then the global location is used. When a variable is locally bound, the prior value is stored in a hidden location on the stack. The thread-local storage is created under the variable's key, and the new value is stored there. Further nested overrides of the variable within that thread simply save and restore this thread-local location. When the initial, outermost override's context terminates, the thread-local key is deleted, exposing the global version of the variable once again to that thread.","['dynamic', 'scope', 'provide', 'excellent', 'abstraction', 'thread', 'local', 'storage', 'way', 'base', 'save', 'restore', 'global', 'variable', 'possible', 'implementation', 'strategy', 'variable', 'thread', 'local', 'key', 'variable', 'access', 'thread', 'local', 'key', 'access', 'thread', 'local', 'memory', 'location', 'code', 'generate', 'compiler', 'know', 'variable', 'dynamic', 'lexical', 'thread', 'local', 'key', 'exist', 'call', 'thread', 'global', 'location', 'variable', 'locally', 'bind', 'prior', 'value', 'store', 'hidden', 'location', 'stack', 'thread', 'local', 'storage', 'create', 'variable', 'key', 'new', 'value', 'store', 'nest', 'override', 'variable', 'thread', 'simply', 'save', 'restore', 'thread', 'local', 'location', 'initial', 'outermost', 'override', 'context', 'terminate', 'thread', 'local', 'key', 'delete', 'expose', 'global', 'version', 'variable', 'thread']"
4033,"With referential transparency the dynamic scope is restricted to the argument stack of the current function only, and coincides with the lexical scope.","['referential', 'transparency', 'dynamic', 'scope', 'restrict', 'argument', 'stack', 'current', 'function', 'coincide', 'lexical', 'scope']"
4034,"In modern languages, macro expansion in a preprocessor is a key example of de facto dynamic scope. The macro language itself only transforms the source code, without resolving names, but since the expansion is done in place, when the names in the expanded text are then resolved notably free variables, they are resolved based on where they are expanded loosely ""called"", as if dynamic scope were occurring.","['modern', 'language', 'macro', 'expansion', 'preprocessor', 'key', 'example', 'facto', 'dynamic', 'scope', 'macro', 'language', 'transform', 'source', 'code', 'resolve', 'name', 'expansion', 'place', 'name', 'expand', 'text', 'resolve', 'notably', 'free', 'variable', 'resolve', 'base', 'expand', 'loosely', 'call', 'dynamic', 'scope', 'occur']"
4035,"The C preprocessor, used for macro expansion, has de facto dynamic scope, as it does not do name resolution by itself and it is independent of where the macro is defined. For example, the macro:","['preprocessor', 'macro', 'expansion', 'facto', 'dynamic', 'scope', 'resolution', 'independent', 'macro', 'define', 'example', 'macro']"
4036,"will expand to add a to the passed variable, with this name only later resolved by the compiler based on where the macro ADD_A is ""called"" properly, expanded. Properly, the C preprocessor only does lexical analysis, expanding the macro during the tokenization stage, but not parsing into a syntax tree or doing name resolution.","['expand', 'add', 'pass', 'variable', 'later', 'resolve', 'compiler', 'base', 'macro', 'add_a', 'call', 'properly', 'expand', 'properly', 'preprocessor', 'lexical', 'analysis', 'expand', 'macro', 'tokenization', 'stage', 'parse', 'syntax', 'tree', 'resolution']"
4037,"For example, in the following code, the name a in the macro is resolved after expansion to the local variable at the expansion site:","['example', 'follow', 'code', 'macro', 'resolve', 'expansion', 'local', 'variable', 'expansion', 'site']"
4038,"As we have seen, one of the key reasons for scope is that it helps prevent name collisions, by allowing identical names to refer to distinct things, with the restriction that the names must have separate scopes. Sometimes this restriction is inconvenient; when many different things need to be accessible throughout a program, they generally all need names with global scope, so different techniques are required to avoid name collisions.","['see', 'key', 'reason', 'scope', 'help', 'prevent', 'collision', 'allow', 'identical', 'name', 'refer', 'distinct', 'thing', 'restriction', 'name', 'separate', 'scope', 'restriction', 'inconvenient', 'different', 'thing', 'need', 'accessible', 'program', 'generally', 'need', 'name', 'global', 'scope', 'different', 'technique', 'require', 'avoid', 'collision']"
4039,"To address this, many languages offer mechanisms for organizing global names. The details of these mechanisms, and the terms used, depend on the language; but the general idea is that a group of names can itself be given a name — a prefix — and, when necessary, an entity can be referred to by a qualified name consisting of the name plus the prefix. Normally such names will have, in a sense, two sets of scopes: a scope usually the global scope in which the qualified name is visible, and one or more narrower scopes in which the unqualified name without the prefix is visible as well. And normally these groups can themselves be organized into groups; that is, they can be nested.","['address', 'language', 'offer', 'mechanism', 'organize', 'global', 'name', 'detail', 'mechanism', 'term', 'depend', 'language', 'general', 'idea', 'group', 'name', 'give', 'prefix', 'necessary', 'entity', 'refer', 'qualified', 'consist', 'plus', 'prefix', 'normally', 'name', 'sense', 'set', 'scope', 'scope', 'usually', 'global', 'scope', 'qualified', 'visible', 'narrow', 'scope', 'unqualified', 'prefix', 'visible', 'normally', 'group', 'organize', 'group', 'nest']"
4040,"Although many languages support this concept, the details vary greatly. Some languages have mechanisms, such as namespaces in C++ and C#, that serve almost exclusively to enable global names to be organized into groups. Other languages have mechanisms, such as packages in Ada and structures in Standard ML, that combine this with the additional purpose of allowing some names to be visible only to other members of their group. And object-oriented languages often allow classes or singleton objects to fulfill this purpose whether or not they also have a mechanism for which this is the primary purpose. Furthermore, languages often meld these approaches; for example, Perl's packages are largely similar to C++'s namespaces, but optionally double as classes for object-oriented programming; and Java organizes its variables and functions into classes, but then organizes those classes into Ada-like packages.","['language', 'support', 'concept', 'detail', 'vary', 'greatly', 'language', 'mechanism', 'namespace', 'c++', 'serve', 'exclusively', 'enable', 'global', 'name', 'organize', 'group', 'language', 'mechanism', 'package', 'ada', 'structure', 'standard', 'combine', 'additional', 'purpose', 'allow', 'name', 'visible', 'member', 'group', 'object', 'orient', 'language', 'allow', 'class', 'singleton', 'object', 'fulfill', 'purpose', 'mechanism', 'primary', 'purpose', 'furthermore', 'language', 'meld', 'approach', 'example', 'perl', 'package', 'largely', 'similar', 'c++', 'namespace', 'optionally', 'double', 'class', 'object', 'orient', 'programming', 'java', 'organize', 'variable', 'function', 'class', 'organize', 'class', 'ada', 'like', 'package']"
4041,Scope rules for representative languages follow.,"['scope', 'rule', 'representative', 'language', 'follow']"
4042,"In C, scope is traditionally known as linkage or visibility, particularly for variables. C is a lexically scoped language with global scope known as external linkage, a form of module scope or file scope known as internal linkage, and local scope within a function; within a function scopes can further be nested via block scope. However, standard C does not support nested functions.","['scope', 'traditionally', 'know', 'linkage', 'visibility', 'particularly', 'variable', 'lexically', 'scope', 'language', 'global', 'scope', 'know', 'external', 'linkage', 'form', 'module', 'scope', 'file', 'scope', 'know', 'internal', 'linkage', 'local', 'scope', 'function', 'function', 'scope', 'nest', 'block', 'scope', 'standard', 'support', 'nested', 'function']"
4043,"The lifetime and visibility of a variable are determined by its storage class. There are three types of lifetimes in C: static program execution, automatic block execution, allocated on the stack, and manual allocated on the heap. Only static and automatic are supported for variables and handled by the compiler, while manually allocated memory must be tracked manually across different variables. There are three levels of visibility in C: external linkage global, internal linkage roughly file, and block scope which includes functions; block scopes can be nested, and different levels of internal linkage is possible by use of includes. Internal linkage in C is visibility at the translation unit level, namely a source file after being processed by the C preprocessor, notably including all relevant includes.","['lifetime', 'visibility', 'variable', 'determine', 'storage', 'class', 'type', 'lifetime', 'static', 'program', 'execution', 'automatic', 'block', 'execution', 'allocate', 'stack', 'manual', 'allocate', 'heap', 'static', 'automatic', 'support', 'variable', 'handle', 'compiler', 'manually', 'allocate', 'memory', 'track', 'manually', 'different', 'variable', 'level', 'visibility', 'external', 'linkage', 'global', 'internal', 'linkage', 'roughly', 'file', 'block', 'scope', 'include', 'function', 'block', 'scope', 'nest', 'different', 'level', 'internal', 'linkage', 'possible', 'use', 'include', 'internal', 'linkage', 'visibility', 'translation', 'unit', 'level', 'source', 'file', 'process', 'preprocessor', 'notably', 'include', 'relevant', 'include']"
4044,"C programs are compiled as separate object files, which are then linked into an executable or library via a linker. Thus name resolution is split across the compiler, which resolves names within a translation unit more loosely, ""compilation unit"", but this is properly a different concept, and the linker, which resolves names across translation units; see linkage for further discussion.","['program', 'compile', 'separate', 'object', 'file', 'link', 'executable', 'library', 'linker', 'resolution', 'split', 'compiler', 'resolve', 'name', 'translation', 'unit', 'loosely', 'compilation', 'unit', 'properly', 'different', 'concept', 'linker', 'resolve', 'name', 'translation', 'unit', 'linkage', 'discussion']"
4045,"In C, variables with block scope enter context when they are declared not at the top of the block, go out of context if any non-nested function is called within the block, come back into context when the function returns, and go out of context at the end of the block. In the case of automatic local variables, they are also allocated on declaration and deallocated at the end of the block, while for static local variables, they are allocated at program initialization and deallocated at program termination.","['variable', 'block', 'scope', 'enter', 'context', 'declare', 'block', 'context', 'non', 'nested', 'function', 'call', 'block', 'come', 'context', 'function', 'return', 'context', 'end', 'block', 'case', 'automatic', 'local', 'variable', 'allocate', 'declaration', 'deallocate', 'end', 'block', 'static', 'local', 'variable', 'allocate', 'program', 'initialization', 'deallocate', 'program', 'termination']"
4046,"The following program demonstrates a variable with block scope coming into context partway through the block, then exiting context and in fact being deallocated when the block ends:","['following', 'program', 'demonstrate', 'variable', 'block', 'scope', 'come', 'context', 'partway', 'block', 'exit', 'context', 'fact', 'deallocate', 'block', 'end']"
4047,"There are other levels of scope in C.18 Variable names used in a function prototype have function prototype visibility, and exit context at the end of the function prototype. Since the name is not used, this is not useful for compilation, but may be useful for documentation. Label names for GOTO statement have function scope, while case label names for switch statements have block scope the block of the switch.","['level', 'scope', 'c', 'variable', 'name', 'function', 'prototype', 'function', 'prototype', 'visibility', 'exit', 'context', 'end', 'function', 'prototype', 'useful', 'compilation', 'useful', 'documentation', 'label', 'name', 'goto', 'statement', 'function', 'scope', 'case', 'label', 'name', 'switch', 'statement', 'block', 'scope', 'block', 'switch']"
4048,"All the variables that we intend to use in a program must have been declared with its type specifier in an earlier point in the code, like we did in the previous code at the beginning of the body of the function main when we declared that a, b, and result were of type int. A variable can be either of global or local scope. A global variable is a variable declared in the main body of the source code, outside all functions, while a local variable is one declared within the body of a function or a block.","['variable', 'intend', 'use', 'program', 'declare', 'type', 'specifi', 'early', 'point', 'code', 'like', 'previous', 'code', 'beginning', 'body', 'function', 'main', 'declare', 'result', 'type', 'int', 'variable', 'global', 'local', 'scope', 'global', 'variable', 'variable', 'declare', 'main', 'body', 'source', 'code', 'outside', 'function', 'local', 'variable', 'declare', 'body', 'function', 'block']"
4049,Modern versions allow nested lexical scope.,"['modern', 'version', 'allow', 'nested', 'lexical', 'scope']"
4050,"Swift has a similar rule for scopes with C++, but contains different access modifiers.","['swift', 'similar', 'rule', 'scope', 'c++', 'contain', 'different', 'access', 'modifier']"
4051,Go is lexically scoped using blocks.3,"['lexically', 'scope', 'blocks']"
4052,A Java class can contain three types of variables:19,"['java', 'class', 'contain', 'type', 'variables']"
4053,"In general, a set of brackets defines a particular scope, but variables at top level within a class can differ in their behavior depending on the modifier keywords used in their definition. The following table shows the access to members permitted by each modifier.20","['general', 'set', 'bracket', 'define', 'particular', 'scope', 'variable', 'level', 'class', 'differ', 'behavior', 'depend', 'modifier', 'keyword', 'definition', 'follow', 'table', 'show', 'access', 'member', 'permit', 'modifier']"
4054,"JavaScript has simple scope rules,21 but variable initialization and name resolution rules can cause problems, and the widespread use of closures for callbacks means the lexical context of a function when defined which is used for name resolution can be very different from the lexical context when it is called which is irrelevant for name resolution. JavaScript objects have name resolution for properties, but this is a separate topic.","['javascript', 'simple', 'scope', 'rules', 'variable', 'initialization', 'resolution', 'rule', 'cause', 'problem', 'widespread', 'use', 'closure', 'callback', 'mean', 'lexical', 'context', 'function', 'define', 'resolution', 'different', 'lexical', 'context', 'call', 'irrelevant', 'resolution', 'javascript', 'object', 'resolution', 'property', 'separate', 'topic']"
4055,"JavaScript has lexical scope 22 nested at the function level, with the global context being the outermost context. This scope is used for both variables and for functions meaning function declarations, as opposed to variables of function type.23 Block scope with the let and const keywords is standard since ECMAScript 6. Block scope can be produced by wrapping the entire block in a function and then executing it; this is known as the immediately-invoked function expression IIFE pattern.","['javascript', 'lexical', 'scope', 'nest', 'function', 'level', 'global', 'context', 'outermost', 'context', 'scope', 'variable', 'function', 'mean', 'function', 'declaration', 'oppose', 'variable', 'function', 'type', 'block', 'scope', 'let', 'const', 'keyword', 'standard', 'ecmascript', 'block', 'scope', 'produce', 'wrap', 'entire', 'block', 'function', 'execute', 'know', 'immediately', 'invoke', 'function', 'expression', 'iife', 'pattern']"
4056,"While JavaScript scope is simple—lexical, function-level—the associated initialization and name resolution rules are a cause of confusion. Firstly, assignment to a name not in scope defaults to creating a new global variable, not a local one. Secondly, to create a new local variable one must use the var keyword; the variable is then created at the top of the function, with value undefined and the variable is assigned its value when the assignment expression is reached:","['javascript', 'scope', 'simple', 'lexical', 'function', 'level', 'associated', 'initialization', 'resolution', 'rule', 'cause', 'confusion', 'firstly', 'assignment', 'scope', 'default', 'create', 'new', 'global', 'variable', 'local', 'secondly', 'create', 'new', 'local', 'variable', 'use', 'var', 'keyword', 'variable', 'create', 'function', 'value', 'undefined', 'variable', 'assign', 'value', 'assignment', 'expression', 'reach']"
4057,"This is known as variable hoisting25—the declaration, but not the initialization, is hoisted to the top of the function. Thirdly, accessing variables before initialization yields undefined, rather than a syntax error. Fourthly, for function declarations, the declaration and the initialization are both hoisted to the top of the function, unlike for variable initialization. For example, the following code produces a dialog with output undefined, as the local variable declaration is hoisted, shadowing the global variable, but the initialization is not, so the variable is undefined when used:","['know', 'variable', 'hoisting25', 'declaration', 'initialization', 'hoist', 'function', 'thirdly', 'access', 'variable', 'initialization', 'yield', 'undefined', 'syntax', 'error', 'fourthly', 'function', 'declaration', 'declaration', 'initialization', 'hoist', 'function', 'unlike', 'variable', 'initialization', 'example', 'follow', 'code', 'produce', 'dialog', 'output', 'undefine', 'local', 'variable', 'declaration', 'hoist', 'shadow', 'global', 'variable', 'initialization', 'variable', 'undefine']"
4058,"Further, as functions are first-class objects in JavaScript and are frequently assigned as callbacks or returned from functions, when a function is executed, the name resolution depends on where it was originally defined the lexical context of the definition, not the lexical context or execution context where it is called. The nested scopes of a particular function from most global to most local in JavaScript, particularly of a closure, used as a callback, are sometimes referred to as the scope chain, by analogy with the prototype chain of an object.","['function', 'class', 'object', 'javascript', 'frequently', 'assign', 'callback', 'return', 'function', 'function', 'execute', 'resolution', 'depend', 'originally', 'define', 'lexical', 'context', 'definition', 'lexical', 'context', 'execution', 'context', 'call', 'nested', 'scope', 'particular', 'function', 'global', 'local', 'javascript', 'particularly', 'closure', 'callback', 'refer', 'scope', 'chain', 'analogy', 'prototype', 'chain', 'object']"
4059,"Closures can be produced in JavaScript by using nested functions, as functions are first-class objects.26 Returning a nested function from an enclosing function includes the local variables of the enclosing function as the non-local lexical context of the returned function, yielding a closure. For example:","['closure', 'produce', 'javascript', 'nested', 'function', 'function', 'class', 'objects', 'return', 'nested', 'function', 'enclosing', 'function', 'include', 'local', 'variable', 'enclose', 'function', 'non', 'local', 'lexical', 'context', 'return', 'function', 'yield', 'closure', 'example']"
4060,"Closures are frequently used in JavaScript, due to being used for callbacks. Indeed, any hooking of a function in the local context as a callback or returning it from a function creates a closure if there are any unbound variables in the function body with the context of the closure based on the nested scopes of the current lexical context, or ""scope chain""; this may be accidental. When creating a callback based on parameters, the parameters must be stored in a closure, otherwise it will accidentally create a closure that refers to the variables in the enclosing context, which may change.27","['closure', 'frequently', 'javascript', 'callback', 'hooking', 'function', 'local', 'context', 'callback', 'return', 'function', 'create', 'closure', 'unbound', 'variable', 'function', 'body', 'context', 'closure', 'base', 'nested', 'scope', 'current', 'lexical', 'context', 'scope', 'chain', 'accidental', 'create', 'callback', 'base', 'parameter', 'parameter', 'store', 'closure', 'accidentally', 'create', 'closure', 'refer', 'variable', 'enclose', 'context', 'change']"
4061,Name resolution of properties of JavaScript objects is based on inheritance in the prototype tree—a path to the root in the tree is called a prototype chain—and is separate from name resolution of variables and functions.,"['resolution', 'property', 'javascript', 'object', 'base', 'inheritance', 'prototype', 'tree', 'path', 'root', 'tree', 'call', 'prototype', 'chain', 'separate', 'resolution', 'variable', 'function']"
4062,Lisp dialects have various rules for scope.,"['lisp', 'dialect', 'rule', 'scope']"
4063,"The original Lisp used dynamic scope; it was Scheme, inspired by ALGOL, that introduced static lexical scope to the Lisp family.","['original', 'lisp', 'dynamic', 'scope', 'scheme', 'inspire', 'algol', 'introduce', 'static', 'lexical', 'scope', 'lisp', 'family']"
4064,"Maclisp used dynamic scope by default in the interpreter and lexical scope by default in compiled code, though compiled code could access dynamic bindings by use of SPECIAL declarations for particular variables.28 However, Maclisp treated lexical binding more as an optimization than one would expect in modern languages, and it did not come with the closure feature one might expect of lexical scope in modern Lisps. A separate operation, *FUNCTION, was available to somewhat clumsily work around some of that issue.29","['maclisp', 'dynamic', 'scope', 'default', 'interpreter', 'lexical', 'scope', 'default', 'compile', 'code', 'compile', 'code', 'access', 'dynamic', 'binding', 'use', 'special', 'declaration', 'particular', 'variables', 'maclisp', 'treat', 'lexical', 'bind', 'optimization', 'expect', 'modern', 'language', 'come', 'closure', 'feature', 'expect', 'lexical', 'scope', 'modern', 'lisps', 'separate', 'operation', 'function', 'available', 'somewhat', 'clumsily', 'work', 'issue']"
4065,"Common Lisp adopted lexical scope from Scheme,30 as did Clojure.","['common', 'lisp', 'adopt', 'lexical', 'scope', 'scheme', 'clojure']"
4066,"ISLISP has lexical scope for ordinary variables. It also has dynamic variables, but they are in all cases explicitly marked; they must be defined by a defdynamic special form, bound by a dynamic-let special form, and accessed by an explicit dynamic special form.31","['islisp', 'lexical', 'scope', 'ordinary', 'variable', 'dynamic', 'variable', 'case', 'explicitly', 'mark', 'define', 'defdynamic', 'special', 'form', 'bind', 'dynamic', 'let', 'special', 'form', 'access', 'explicit', 'dynamic', 'special', 'form']"
4067,"Some other dialects of Lisp, like Emacs Lisp, still use dynamic scope by default. Emacs Lisp now has lexical scope available on a per-buffer basis.32","['dialect', 'lisp', 'like', 'emacs', 'lisp', 'use', 'dynamic', 'scope', 'default', 'emacs', 'lisp', 'lexical', 'scope', 'available', 'buffer', 'basis']"
4068,"For variables, Python has function scope, module scope, and global scope. Names enter context at the start of a scope function, module, or global scope, and exit context when a non-nested function is called or the scope ends. If a name is used prior to variable initialization, this raises a runtime exception. If a variable is simply accessed not assigned to, name resolution follows the LEGB Local, Enclosing, Global, Built-in rule which resolves names to the narrowest relevant context. However, if a variable is assigned to, it defaults to declaring a variable whose scope starts at the start of the level function, module, or global, not at the assignment. Both these rules can be overridden with a global or nonlocal in Python 3 declaration prior to use, which allows accessing global variables even if there is a masking nonlocal variable, and assigning to global or nonlocal variables.","['variable', 'python', 'function', 'scope', 'module', 'scope', 'global', 'scope', 'name', 'enter', 'context', 'start', 'scope', 'function', 'module', 'global', 'scope', 'exit', 'context', 'non', 'nested', 'function', 'call', 'scope', 'end', 'prior', 'variable', 'initialization', 'raise', 'runtime', 'exception', 'variable', 'simply', 'access', 'assign', 'resolution', 'follow', 'legb', 'local', 'enclosing', 'global', 'build', 'rule', 'resolve', 'name', 'narrow', 'relevant', 'context', 'variable', 'assign', 'default', 'declare', 'variable', 'scope', 'start', 'start', 'level', 'function', 'module', 'global', 'assignment', 'rule', 'overridden', 'global', 'nonlocal', 'python', 'declaration', 'prior', 'use', 'allow', 'access', 'global', 'variable', 'masking', 'nonlocal', 'variable', 'assign', 'global', 'nonlocal', 'variable']"
4069,"As a simple example, a function resolves a variable to the global scope:","['simple', 'example', 'function', 'resolve', 'variable', 'global', 'scope']"
4070,"Note that x is defined before f is called, so no error is raised, even though it is defined after its reference in the definition of f. Lexically this is a forward reference, which is allowed in Python.","['note', 'define', 'call', 'error', 'raise', 'define', 'reference', 'definition', 'lexically', 'forward', 'reference', 'allow', 'python']"
4071,"Here assignment creates a new local variable, which does not change the value of the global variable:","['assignment', 'create', 'new', 'local', 'variable', 'change', 'value', 'global', 'variable']"
4072,"Assignment to a variable within a function causes it to be declared local to the function, hence its scope is the entire function, and thus using it prior to this assignment raises an error. This differs from C, where the scope of the local variable start at its declaration. This code raises an error:","['assignment', 'variable', 'function', 'cause', 'declare', 'local', 'function', 'scope', 'entire', 'function', 'prior', 'assignment', 'raise', 'error', 'differ', 'scope', 'local', 'variable', 'start', 'declaration', 'code', 'raise', 'error']"
4073,"The default name resolution rules can be overridden with the global or nonlocal in Python 3 keywords. In the below code, the global x declaration in g means that x resolves to the global variable. It thus can be accessed as it has already been defined, and assignment assigns to the global variable, rather than declaring a new local variable. Note that no global declaration is needed in f—since it does not assign to the variable, it defaults to resolving to the global variable.","['default', 'resolution', 'rule', 'overridden', 'global', 'nonlocal', 'python', 'keyword', 'code', 'global', 'declaration', 'mean', 'resolve', 'global', 'variable', 'access', 'define', 'assignment', 'assign', 'global', 'variable', 'declare', 'new', 'local', 'variable', 'note', 'global', 'declaration', 'need', 'assign', 'variable', 'default', 'resolve', 'global', 'variable']"
4074,"global can also be used for nested functions. In addition to allowing assignment to a global variable, as in an unnested function, this can also be used to access the global variable in the presence of a nonlocal variable:","['global', 'nested', 'function', 'addition', 'allow', 'assignment', 'global', 'variable', 'unnested', 'function', 'access', 'global', 'variable', 'presence', 'nonlocal', 'variable']"
4075,"For nested functions, there is also the nonlocal declaration, for assigning to a nonlocal variable, similar to using global in an unnested function:","['nested', 'function', 'nonlocal', 'declaration', 'assign', 'nonlocal', 'variable', 'similar', 'global', 'unnested', 'function']"
4076,"R is a lexically scoped language, unlike other implementations of S where the values of free variables are determined by a set of global variables, while in R they are determined by the context in which the function was created.33 The scope contexts may be accessed using a variety of features such as parent.frame which can simulate the experience of dynamic scope should the programmer desire.","['lexically', 'scope', 'language', 'unlike', 'implementation', 'value', 'free', 'variable', 'determine', 'set', 'global', 'variable', 'determine', 'context', 'function', 'created', 'scope', 'contexts', 'access', 'variety', 'feature', 'parent.frame', 'simulate', 'experience', 'dynamic', 'scope', 'programmer', 'desire']"
4077,Functions have access to scope they were created in:,"['function', 'access', 'scope', 'create']"
4078,Variables created or modified within a function stay there:,"['variable', 'create', 'modify', 'function', 'stay']"
4079,Variables created or modified within a function stay there unless assignment to enclosing scope is explicitly requested:,"['variable', 'create', 'modify', 'function', 'stay', 'assignment', 'enclose', 'scope', 'explicitly', 'request']"
4080,"Although R has lexical scope by default, function scopes can be changed:","['lexical', 'scope', 'default', 'function', 'scope', 'change']"
4081,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4082,"In object-oriented programming, object copying is creating a copy of an existing object, a unit of data in object-oriented programming. The resulting object is called an object copy or simply copy of the original object. Copying is basic but has subtleties and can have significant overhead. There are several ways to copy an object, most commonly by a copy constructor or cloning. Copying is done mostly so the copy can be modified or moved, or the current value preserved. If either of these is unneeded, a reference to the original data is sufficient and more efficient, as no copying occurs.","['object', 'orient', 'programming', 'object', 'copying', 'create', 'copy', 'exist', 'object', 'unit', 'datum', 'object', 'orient', 'programming', 'result', 'object', 'call', 'object', 'copy', 'simply', 'copy', 'original', 'object', 'copying', 'basic', 'subtlety', 'significant', 'overhead', 'way', 'copy', 'object', 'commonly', 'copy', 'constructor', 'clone', 'copying', 'copy', 'modify', 'move', 'current', 'value', 'preserve', 'unneeded', 'reference', 'original', 'data', 'sufficient', 'efficient', 'copying', 'occur']"
4083,"Objects in general store composite data. While in simple cases copying can be done by allocating a new, uninitialized object and copying all fields attributes from the original object, in more complex cases this does not result in desired behavior.","['object', 'general', 'store', 'composite', 'datum', 'simple', 'case', 'copying', 'allocate', 'new', 'uninitialized', 'object', 'copy', 'field', 'attribute', 'original', 'object', 'complex', 'case', 'result', 'desire', 'behavior']"
4084,"The design goal of most objects is to give the resemblance of being made out of one monolithic block even though most are not. As objects are made up of several different parts, copying becomes nontrivial. Several strategies exist to treat this problem.","['design', 'goal', 'object', 'resemblance', 'monolithic', 'block', 'object', 'different', 'part', 'copying', 'nontrivial', 'strategy', 'exist', 'treat', 'problem']"
4085,"Consider an object A, which contains fields xi more concretely, consider if A is a string and xi is an array of its characters. There are different strategies for making a copy of A, referred to as shallow copy and deep copy. Many languages allow generic copying by one or either strategy, defining either one copy operation or separate shallow copy and deep copy operations.1 Note that even shallower is to use a reference to the existing object A, in which case there is no new object, only a new reference.","['consider', 'object', 'contain', 'field', 'concretely', 'consider', 'string', 'array', 'character', 'different', 'strategy', 'make', 'copy', 'refer', 'shallow', 'copy', 'deep', 'copy', 'language', 'allow', 'generic', 'copying', 'strategy', 'define', 'copy', 'operation', 'separate', 'shallow', 'copy', 'deep', 'copy', 'operations', 'note', 'shallow', 'use', 'reference', 'exist', 'object', 'case', 'new', 'object', 'new', 'reference']"
4086,"The terminology of shallow copy and deep copy dates to Smalltalk-80.2 The same distinction holds for comparing objects for equality: most basically there is a difference between identity same object and equality same value, corresponding to shallow equality and 1 level deep equality of two object references, but then further whether equality means comparing only the fields of the object in question or dereferencing some or all fields and comparing their values in turn e.g., are two linked lists equal if they have the same nodes, or if they have same values?.clarification needed","['terminology', 'shallow', 'copy', 'deep', 'copy', 'date', 'smalltalk-80', 'distinction', 'hold', 'compare', 'object', 'equality', 'basically', 'difference', 'identity', 'object', 'equality', 'value', 'correspond', 'shallow', 'equality', 'level', 'deep', 'equality', 'object', 'reference', 'equality', 'mean', 'compare', 'field', 'object', 'question', 'dereference', 'field', 'compare', 'value', 'turn', 'e.g.', 'link', 'list', 'equal', 'node', 'values?.clarification', 'need']"
4087,"One method of copying an object is the shallow copy. In that case a new object B is created, and the fields values of A are copied over to B.345 This is also known as a field-by-field copy,678 field-for-field copy, or field copy.9 If the field value is a reference to an object e.g., a memory address it copies the reference, hence referring to the same object as A does, and if the field value is a primitive type it copies the value of the primitive type. In languages without primitive types where everything is an object, all fields of the copy B are references to the same objects as the fields of original A. The referenced objects are thus shared, so if one of these objects is modified from A or B, the change is visible in the other. Shallow copies are simple and typically cheap, as they can usually be implemented by simply copying the bits exactly.","['method', 'copy', 'object', 'shallow', 'copy', 'case', 'new', 'object', 'create', 'field', 'value', 'copy', 'b', 'know', 'field', 'field', 'copy', 'field', 'field', 'copy', 'field', 'copy', 'field', 'value', 'reference', 'object', 'e.g.', 'memory', 'address', 'copy', 'reference', 'refer', 'object', 'field', 'value', 'primitive', 'type', 'copy', 'value', 'primitive', 'type', 'language', 'primitive', 'type', 'object', 'field', 'copy', 'reference', 'object', 'field', 'original', 'reference', 'object', 'share', 'object', 'modify', 'change', 'visible', 'shallow', 'copy', 'simple', 'typically', 'cheap', 'usually', 'implement', 'simply', 'copy', 'bit', 'exactly']"
4088,"An alternative is a deep copy, meaning that fields are dereferenced: rather than references to objects being copied, new copy objects are created for any referenced objects, and references to these placed in B. The result is different from the result a shallow copy gives in that the objects referenced by the copy B are distinct from those referenced by A, and independent. Deep copies are more expensive, due to needing to create additional objects, and can be substantially more complicated, due to references possibly forming a complicated graph.","['alternative', 'deep', 'copy', 'mean', 'field', 'dereference', 'reference', 'object', 'copy', 'new', 'copy', 'object', 'create', 'reference', 'object', 'reference', 'place', 'result', 'different', 'result', 'shallow', 'copy', 'give', 'object', 'reference', 'copy', 'distinct', 'reference', 'independent', 'deep', 'copy', 'expensive', 'need', 'create', 'additional', 'object', 'substantially', 'complicated', 'reference', 'possibly', 'form', 'complicated', 'graph']"
4089,"Deep copy is a process in which the copying process occurs recursively. It means first constructing a new collection object and then recursively populating it with copies of the child objects found in the original. In case of deep copy, a copy of object is copied in other object. It means that any changes made to a copy of object do not reflect in the original object. In python, this is implemented using “deep copy” function.","['deep', 'copy', 'process', 'copying', 'process', 'occur', 'recursively', 'mean', 'construct', 'new', 'collection', 'object', 'recursively', 'populate', 'copy', 'child', 'object', 'find', 'original', 'case', 'deep', 'copy', 'copy', 'object', 'copy', 'object', 'mean', 'change', 'copy', 'object', 'reflect', 'original', 'object', 'python', 'implement', 'deep', 'copy', 'function']"
4090,"In more complex cases, some fields in a copy should have shared values with the original object as in a shallow copy, corresponding to an ""association"" relationship; and some fields should have copies as in a deep copy, corresponding to an ""aggregation"" relationship. In these cases a custom implementation of copying is generally required; this issue and solution dates to Smalltalk-80.10 Alternatively, fields can be marked as requiring a shallow copy or deep copy, and copy operations automatically generated likewise for comparison operations.1 This is not implemented in most object-oriented languages, however, though there is partial support in Eiffel.1","['complex', 'case', 'field', 'copy', 'share', 'value', 'original', 'object', 'shallow', 'copy', 'correspond', 'association', 'relationship', 'field', 'copy', 'deep', 'copy', 'correspond', 'aggregation', 'relationship', 'case', 'custom', 'implementation', 'copying', 'generally', 'require', 'issue', 'solution', 'date', 'smalltalk-80', 'alternatively', 'field', 'mark', 'require', 'shallow', 'copy', 'deep', 'copy', 'copy', 'operation', 'automatically', 'generate', 'likewise', 'comparison', 'operations', 'implement', 'object', 'orient', 'language', 'partial', 'support', 'eiffel']"
4091,"Nearly all object-oriented programming languages provide some way to copy objects. As most languages do not provide most objects for programs, a programmer must define how an object should be copied, just as they must define if two objects are identical or even comparable in the first place. Many languages provide some default behavior.","['nearly', 'object', 'orient', 'programming', 'language', 'provide', 'way', 'copy', 'object', 'language', 'provide', 'object', 'program', 'programmer', 'define', 'object', 'copy', 'define', 'object', 'identical', 'comparable', 'place', 'language', 'provide', 'default', 'behavior']"
4092,"How copying is solved varies from language to language, and what concept of an object it has.","['copying', 'solve', 'varie', 'language', 'language', 'concept', 'object']"
4093,"A lazy copy is an implementation of a deep copy. When initially copying an object, a fast shallow copy is used. A counter is also used to track how many objects share the data. When the program wants to modify an object, it can determine if the data is shared by examining the counter and can do a deep copy if needed.","['lazy', 'copy', 'implementation', 'deep', 'copy', 'initially', 'copy', 'object', 'fast', 'shallow', 'copy', 'counter', 'track', 'object', 'share', 'datum', 'program', 'want', 'modify', 'object', 'determine', 'data', 'share', 'examine', 'counter', 'deep', 'copy', 'need']"
4094,"Lazy copy looks to the outside just as a deep copy, but takes advantage of the speed of a shallow copy whenever possible. The downside are rather high but constant base costs because of the counter. Also, in certain situations, circular references can cause problems.","['lazy', 'copy', 'look', 'outside', 'deep', 'copy', 'take', 'advantage', 'speed', 'shallow', 'copy', 'possible', 'downside', 'high', 'constant', 'base', 'cost', 'counter', 'certain', 'situation', 'circular', 'reference', 'cause', 'problem']"
4095,Lazy copy is related to copy-on-write.,"['lazy', 'copy', 'relate', 'copy', 'write']"
4096,"The following presents examples for one of the most widely used object-oriented languages, Java, which should cover nearly every way that an object-oriented language can treat this problem.","['follow', 'present', 'example', 'widely', 'object', 'orient', 'language', 'java', 'cover', 'nearly', 'way', 'object', 'orient', 'language', 'treat', 'problem']"
4097,"Unlike in C++, objects in Java are always accessed indirectly through references. Objects are never created implicitly but instead are always passed or assigned by a reference variable. Methods in Java are always pass by value, however, it is the value of the reference variable that is being passed.11 The Java Virtual Machine manages garbage collection so that objects are cleaned up after they are no longer reachable. There is no automatic way to copy any given object in Java.","['unlike', 'c++', 'object', 'java', 'access', 'indirectly', 'reference', 'object', 'create', 'implicitly', 'instead', 'pass', 'assign', 'reference', 'variable', 'method', 'java', 'pass', 'value', 'value', 'reference', 'variable', 'passed', 'java', 'virtual', 'machine', 'manage', 'garbage', 'collection', 'object', 'clean', 'long', 'reachable', 'automatic', 'way', 'copy', 'give', 'object', 'java']"
4098,"Copying is usually performed by a clone method of a class. This method usually, in turn, calls the clone method of its parent class to obtain a copy, and then does any custom copying procedures. Eventually this gets to the clone method of Object the uppermost class, which creates a new instance of the same class as the object and copies all the fields to the new instance a ""shallow copy"". If this method is used, the class must implement the Cloneable marker interface, or else it will throw a CloneNotSupportedException. After obtaining a copy from the parent class, a class' own clone method may then provide custom cloning capability, like deep copying i.e. duplicate some of the structures referred to by the object or giving the new instance a new unique ID.","['copying', 'usually', 'perform', 'clone', 'method', 'class', 'method', 'usually', 'turn', 'call', 'clone', 'method', 'parent', 'class', 'obtain', 'copy', 'custom', 'copying', 'procedure', 'eventually', 'get', 'clone', 'method', 'object', 'uppermost', 'class', 'create', 'new', 'instance', 'class', 'object', 'copy', 'field', 'new', 'instance', 'shallow', 'copy', 'method', 'class', 'implement', 'cloneable', 'marker', 'interface', 'throw', 'clonenotsupportedexception', 'obtain', 'copy', 'parent', 'class', 'class', 'clone', 'method', 'provide', 'custom', 'cloning', 'capability', 'like', 'deep', 'copying', 'i.e.', 'duplicate', 'structure', 'refer', 'object', 'give', 'new', 'instance', 'new', 'unique']"
4099,"The return type of clone is Object, but implementers of a clone method could write the type of the object being cloned instead due to Java's support for covariant return types. One advantage of using clone is that since it is an overridable method, we can call clone on any object, and it will use the clone method of its class, without the calling code needing to know what that class is which would be needed with a copy constructor.","['return', 'type', 'clone', 'object', 'implementer', 'clone', 'method', 'write', 'type', 'object', 'clone', 'instead', 'java', 'support', 'covariant', 'return', 'type', 'advantage', 'clone', 'overridable', 'method', 'clone', 'object', 'use', 'clone', 'method', 'class', 'call', 'code', 'need', 'know', 'class', 'need', 'copy', 'constructor']"
4100,"A disadvantage is that one often cannot access the clone method on an abstract type. Most interfaces and abstract classes in Java do not specify a public clone method. Thus, often the only way to use the clone method is if the class of an object is known, which is contrary to the abstraction principle of using the most generic type possible. For example, if one has a List reference in Java, one cannot invoke clone on that reference because List specifies no public clone method. Implementations of List like ArrayList and LinkedList all generally have clone methods, but it is inconvenient and bad abstraction to carry around the class type of an object.","['disadvantage', 'access', 'clone', 'method', 'abstract', 'type', 'interface', 'abstract', 'class', 'java', 'specify', 'public', 'clone', 'method', 'way', 'use', 'clone', 'method', 'class', 'object', 'know', 'contrary', 'abstraction', 'principle', 'generic', 'type', 'possible', 'example', 'list', 'reference', 'java', 'invoke', 'clone', 'reference', 'list', 'specify', 'public', 'clone', 'method', 'implementation', 'list', 'like', 'arraylist', 'linkedlist', 'generally', 'clone', 'method', 'inconvenient', 'bad', 'abstraction', 'carry', 'class', 'type', 'object']"
4101,"Another way to copy objects in Java is to serialize them through the Serializable interface. This is typically used for persistence and wire protocol purposes, but it does create copies of objects and, unlike clone, a deep copy that gracefully handles cycled graphs of objects is readily available with minimal effort from a programmer.","['way', 'copy', 'object', 'java', 'serialize', 'serializable', 'interface', 'typically', 'persistence', 'wire', 'protocol', 'purpose', 'create', 'copy', 'object', 'unlike', 'clone', 'deep', 'copy', 'gracefully', 'handle', 'cycle', 'graph', 'object', 'readily', 'available', 'minimal', 'effort', 'programmer']"
4102,"Both of these methods suffer from a notable problem: the constructor is not used for objects copied with clone or serialization. This can lead to bugs with improperly initialized data, prevents the use of final member fields, and makes maintenance challenging. Some utilities attempt to overcome these issues by using reflection to deep copy objects, such as the deep-cloning library.12","['method', 'suffer', 'notable', 'problem', 'constructor', 'object', 'copy', 'clone', 'serialization', 'lead', 'bug', 'improperly', 'initialized', 'datum', 'prevent', 'use', 'final', 'member', 'field', 'make', 'maintenance', 'challenging', 'utility', 'attempt', 'overcome', 'issue', 'reflection', 'deep', 'copy', 'object', 'deep', 'clone', 'library']"
4103,"Runtime objects in Eiffel are accessible either indirectly through references or as expanded objects which fields are embedded within the objects that use them. That is, fields of an object are stored either externally or internally.","['runtime', 'object', 'eiffel', 'accessible', 'indirectly', 'reference', 'expand', 'object', 'field', 'embed', 'object', 'use', 'field', 'object', 'store', 'externally', 'internally']"
4104,"The Eiffel class ANY contains features for shallow and deep copying and cloning of objects. All Eiffel classes inherit from ANY, so these features are available within all classes, and are applicable both to reference and expanded objects.","['eiffel', 'class', 'contain', 'feature', 'shallow', 'deep', 'copying', 'cloning', 'object', 'eiffel', 'class', 'inherit', 'feature', 'available', 'class', 'applicable', 'reference', 'expand', 'object']"
4105,"The copy feature effects a shallow, field-by-field copy from one object to another. In this case no new object is created. If y were copied to x, then the same objects referenced by y before the application of copy, will also be referenced by x after the copy feature completes.","['copy', 'feature', 'effect', 'shallow', 'field', 'field', 'copy', 'object', 'case', 'new', 'object', 'create', 'copy', 'object', 'reference', 'application', 'copy', 'reference', 'copy', 'feature', 'complete']"
4106,"To effect the creation of a new object which is a shallow duplicate of y, the feature twin is used. In this case, one new object is created with its fields identical to those of the source.","['effect', 'creation', 'new', 'object', 'shallow', 'duplicate', 'feature', 'twin', 'case', 'new', 'object', 'create', 'field', 'identical', 'source']"
4107,"The feature twin relies on the feature copy, which can be redefined in descendants of ANY, if needed. The result of twin is of the anchored type like Current.","['feature', 'twin', 'rely', 'feature', 'copy', 'redefine', 'descendant', 'need', 'result', 'twin', 'anchored', 'type', 'like', 'current']"
4108,"Deep copying and creating deep twins can be done using the features deep_copy and deep_twin, again inherited from class ANY. These features have the potential to create many new objects, because they duplicate all the objects in an entire object structure. Because new duplicate objects are created instead of simply copying references to existing objects, deep operations will become a source of performance issues more readily than shallow operations.","['deep', 'copying', 'create', 'deep', 'twin', 'feature', 'deep_copy', 'deep_twin', 'inherit', 'class', 'feature', 'potential', 'create', 'new', 'object', 'duplicate', 'object', 'entire', 'object', 'structure', 'new', 'duplicate', 'object', 'create', 'instead', 'simply', 'copy', 'reference', 'exist', 'object', 'deep', 'operation', 'source', 'performance', 'issue', 'readily', 'shallow', 'operation']"
4109,"In C#, rather than using the interface ICloneable, a generic extension method can be used to create a deep copy using reflection. This has two advantages: First, it provides the flexibility to copy every object without having to specify each property and variable to be copied manually. Second, because the type is generic, the compiler ensures that the destination object and the source object have the same type.","['interface', 'icloneable', 'generic', 'extension', 'method', 'create', 'deep', 'copy', 'reflection', 'advantage', 'provide', 'flexibility', 'copy', 'object', 'have', 'specify', 'property', 'variable', 'copy', 'manually', 'second', 'type', 'generic', 'compiler', 'ensure', 'destination', 'object', 'source', 'object', 'type']"
4110,"In Objective-C, the methods copy and mutableCopy are inherited by all objects and intended for performing copies; the latter is for creating a mutable type of the original object. These methods in turn call the copyWithZone and mutableCopyWithZone methods, respectively, to perform the copying. An object must implement the corresponding copyWithZone method to be copyable.","['objective', 'method', 'copy', 'mutablecopy', 'inherit', 'object', 'intend', 'perform', 'copy', 'create', 'mutable', 'type', 'original', 'object', 'method', 'turn', 'copywithzone', 'mutablecopywithzone', 'method', 'respectively', 'perform', 'copying', 'object', 'implement', 'corresponding', 'copywithzone', 'method', 'copyable']"
4111,"In OCaml, the library function Oo.copy performs shallow copying of an object.","['ocaml', 'library', 'function', 'oo.copy', 'perform', 'shallow', 'copying', 'object']"
4112,"In Python, the library's copy module provides shallow copy and deep copy of objects through the copy and deepcopy functions, respectively.13 Programmers may define special methods __copy__ and __deepcopy__ in an object to provide custom copying implementation.","['python', 'library', 'copy', 'module', 'provide', 'shallow', 'copy', 'deep', 'copy', 'object', 'copy', 'deepcopy', 'function', 'respectively', 'programmer', 'define', 'special', 'method', 'copy', 'deepcopy', 'object', 'provide', 'custom', 'copying', 'implementation']"
4113,"In Ruby, all objects inherit two methods for performing shallow copies, clone and dup. The two methods differ in that clone copies an object's tainted state, frozen state, and any singleton methods it may have, whereas dup copies only its tainted state. Deep copies may be achieved by dumping and loading an object's byte stream or YAML serialization.1 Alternatively, you can use the deep_dive gem to do a controlled deep copy of your object graphs. 2","['ruby', 'object', 'inherit', 'method', 'perform', 'shallow', 'copy', 'clone', 'dup', 'method', 'differ', 'clone', 'copy', 'object', 'tainted', 'state', 'frozen', 'state', 'singleton', 'method', 'dup', 'copy', 'tainted', 'state', 'deep', 'copy', 'achieve', 'dump', 'load', 'object', 'byte', 'stream', 'yaml', 'serialization', 'alternatively', 'use', 'deep_dive', 'gem', 'control', 'deep', 'copy', 'object', 'graph']"
4114,"In Perl, nested structures are stored by the use of references, thus a developer can either loop over the entire structure and re-reference the data or use the dclone function from the module Storable.","['perl', 'nest', 'structure', 'store', 'use', 'reference', 'developer', 'loop', 'entire', 'structure', 'reference', 'datum', 'use', 'dclone', 'function', 'module', 'storable']"
4115,"In VBA, an assignment of variables of type Object is a shallow copy, an assignment for all other types numeric types, String, user defined types, arrays is a deep copy. So the keyword Set for an assignment signals a shallow copy and the optional keyword Let signals a deep copy. There is no built-in method for deep copies of Objects in VBA.","['vba', 'assignment', 'variable', 'type', 'object', 'shallow', 'copy', 'assignment', 'type', 'numeric', 'type', 'string', 'user', 'define', 'type', 'array', 'deep', 'copy', 'keyword', 'set', 'assignment', 'signal', 'shallow', 'copy', 'optional', 'keyword', 'let', 'signal', 'deep', 'copy', 'build', 'method', 'deep', 'copy', 'objects', 'vba']"
4116,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4117,"The single-responsibility principle SRP is a computer programming principle that states that ""A module should be responsible to one, and only one, actor.""1 The term actor refers to a group consisting of one or more stakeholders or users that requires a change in the module.","['single', 'responsibility', 'principle', 'srp', 'computer', 'programming', 'principle', 'state', 'module', 'responsible', 'actor', 'term', 'actor', 'refer', 'group', 'consist', 'stakeholder', 'user', 'require', 'change', 'module']"
4118,"Robert C. Martin, the originator of the term, expresses the principle as, ""A class should have only one reason to change"".2 Because of confusion around the word ""reason"" he has also clarified saying that the ""principle is about people.""3 In some of his talks, he also argues that the principle is, in particular, about roles or actors. For example, while they might be the same person, the role of an accountant is different from a database administrator. Hence, each module should be responsible for each role.4","['robert', 'martin', 'originator', 'term', 'express', 'principle', 'class', 'reason', 'change', 'confusion', 'word', 'reason', 'clarify', 'say', 'principle', 'people', 'talk', 'argue', 'principle', 'particular', 'role', 'actor', 'example', 'person', 'role', 'accountant', 'different', 'database', 'administrator', 'module', 'responsible', 'role']"
4119,"The term was introduced by Robert C. Martin in his article ""The Principles of OOD"" as part of his Principles of Object Oriented Design,5 made popular by his 2003 book Agile Software Development, Principles, Patterns, and Practices.6 Martin described it as being based on the principle of cohesion, as described by Tom DeMarco in his book Structured Analysis and System Specification,7 and Meilir Page-Jones in The Practical Guide to Structured Systems Design.8 In 2014 Martin published a blog post titled ""The Single Responsibility Principle"" with a goal to clarify what was meant by the phrase ""reason for change.""1","['term', 'introduce', 'robert', 'martin', 'article', 'principles', 'ood', 'principles', 'object', 'oriented', 'design', 'popular', '2003', 'book', 'agile', 'software', 'development', 'principles', 'patterns', 'practices', 'martin', 'describe', 'base', 'principle', 'cohesion', 'describe', 'tom', 'demarco', 'book', 'structured', 'analysis', 'system', 'specification', 'meilir', 'page', 'jones', 'practical', 'guide', 'structured', 'systems', 'design', '2014', 'martin', 'publish', 'blog', 'post', 'title', 'single', 'responsibility', 'principle', 'goal', 'clarify', 'mean', 'phrase', 'reason', 'change']"
4120,"Martin defines a responsibility as a reason to change, and concludes that a class or module should have one, and only one, reason to be changed e.g. rewritten.","['martin', 'define', 'responsibility', 'reason', 'change', 'conclude', 'class', 'module', 'reason', 'change', 'e.g.', 'rewrite']"
4121,"As an example, consider a module that compiles and prints a report. Imagine such a module can be changed for two reasons. First, the content of the report could change. Second, the format of the report could change. These two things change for different causes. The single-responsibility principle says that these two aspects of the problem are really two separate responsibilities, and should, therefore, be in separate classes or modules. It would be a bad design to couple two things that change for different reasons at different times.","['example', 'consider', 'module', 'compile', 'print', 'report', 'imagine', 'module', 'change', 'reason', 'content', 'report', 'change', 'second', 'format', 'report', 'change', 'thing', 'change', 'different', 'cause', 'single', 'responsibility', 'principle', 'say', 'aspect', 'problem', 'separate', 'responsibility', 'separate', 'class', 'module', 'bad', 'design', 'couple', 'thing', 'change', 'different', 'reason', 'different', 'time']"
4122,"The reason it is important to keep a class focused on a single concern is that it makes the class more robust. Continuing with the foregoing example, if there is a change to the report compilation process, there is a greater danger that the printing code will break if it is part of the same class.","['reason', 'important', 'class', 'focus', 'single', 'concern', 'make', 'class', 'robust', 'continue', 'forego', 'example', 'change', 'report', 'compilation', 'process', 'great', 'danger', 'print', 'code', 'break', 'class']"
4123,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4124,"In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to a singular instance. One of the well-known ""Gang of Four"" design patterns, which describe how to solve recurring problems in object-oriented software,1 the pattern is useful when exactly one object is needed to coordinate actions across a system.","['software', 'engineering', 'singleton', 'pattern', 'software', 'design', 'pattern', 'restrict', 'instantiation', 'class', 'singular', 'instance', 'know', 'gang', 'design', 'pattern', 'describe', 'solve', 'recur', 'problem', 'object', 'orient', 'software', 'pattern', 'useful', 'exactly', 'object', 'need', 'coordinate', 'action', 'system']"
4125,"More specifically, the singleton pattern allows objects to:2","['specifically', 'singleton', 'pattern', 'allow', 'object', 'to']"
4126,The term comes from the mathematical concept of a singleton.,"['term', 'come', 'mathematical', 'concept', 'singleton']"
4127,"Singletons are often preferred to global variables because they do not pollute the global namespace or their containing namespace. Additionally, they permit lazy allocation and initialization, whereas global variables in many languages will always consume resources.13","['singleton', 'preferred', 'global', 'variable', 'pollute', 'global', 'namespace', 'contain', 'namespace', 'additionally', 'permit', 'lazy', 'allocation', 'initialization', 'global', 'variable', 'language', 'consume', 'resources']"
4128,"The singleton pattern can also be used as a basis for other design patterns, such as the abstract factory, factory method, builder and prototype patterns. Facade objects are also often singletons because only one facade object is required.","['singleton', 'pattern', 'basis', 'design', 'pattern', 'abstract', 'factory', 'factory', 'method', 'builder', 'prototype', 'pattern', 'facade', 'object', 'singleton', 'facade', 'object', 'require']"
4129,"Logging is a common real-world use case for singletons, because all objects that wish to log messages require a uniform point of access and conceptually write to a single source.4","['logging', 'common', 'real', 'world', 'use', 'case', 'singleton', 'object', 'wish', 'log', 'message', 'require', 'uniform', 'point', 'access', 'conceptually', 'write', 'single', 'source']"
4130,Implementations of the singleton pattern ensure that only one instance of the singleton class ever exists and typically provide global access to that instance.,"['implementation', 'singleton', 'pattern', 'ensure', 'instance', 'singleton', 'class', 'exist', 'typically', 'provide', 'global', 'access', 'instance']"
4131,"The instance is usually stored as a private static variable; the instance is created when the variable is initialized, at some point before when the static method is first called.","['instance', 'usually', 'store', 'private', 'static', 'variable', 'instance', 'create', 'variable', 'initialize', 'point', 'static', 'method', 'call']"
4132,The following demonstrates an example implementation in Java:5,"['follow', 'demonstrate', 'example', 'implementation', 'java']"
4133,"A singleton implementation may use lazy initialization in which the instance is created when the static method is first invoked. In multithreaded programs, this can cause race conditions that result in the creation of multiple instances. The following Java example is a thread-safe implementation, using lazy initialization with double-checked locking.","['singleton', 'implementation', 'use', 'lazy', 'initialization', 'instance', 'create', 'static', 'method', 'invoke', 'multithreaded', 'program', 'cause', 'race', 'condition', 'result', 'creation', 'multiple', 'instance', 'follow', 'java', 'example', 'thread', 'safe', 'implementation', 'lazy', 'initialization', 'double', 'check', 'locking']"
4134,"Some consider the singleton to be an anti-pattern that introduces global state into an application, often unnecessarily. This introduces a potential dependency on the singleton by other objects, requiring analysis of implementation details to determine whether a dependency actually exists.6 This increased coupling can introduce difficulties with unit testing.7 In turn, this places restrictions on any abstraction that uses the singleton, such as preventing concurrent use of multiple instances.78910","['consider', 'singleton', 'anti', 'pattern', 'introduce', 'global', 'state', 'application', 'unnecessarily', 'introduce', 'potential', 'dependency', 'singleton', 'object', 'require', 'analysis', 'implementation', 'detail', 'determine', 'dependency', 'actually', 'exists', 'increase', 'coupling', 'introduce', 'difficulty', 'unit', 'testing', 'turn', 'place', 'restriction', 'abstraction', 'use', 'singleton', 'prevent', 'concurrent', 'use', 'multiple', 'instances']"
4135,Singletons also violate the single-responsibility principle because they are responsible for enforcing their own uniqueness along with performing their normal functions.7,"['singleton', 'violate', 'single', 'responsibility', 'principle', 'responsible', 'enforce', 'uniqueness', 'perform', 'normal', 'functions']"
4136,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4137,"The singly rooted hierarchy, in object-oriented programming, is a characteristic of most but not all OOP-based programming languages. In most such languages, in fact, all classes inherit directly or indirectly from a single root, usually with a name similar to Object; all classes then form a common inheritance hierarchy.","['singly', 'rooted', 'hierarchy', 'object', 'orient', 'programming', 'characteristic', 'oop', 'base', 'programming', 'language', 'language', 'fact', 'class', 'inherit', 'directly', 'indirectly', 'single', 'root', 'usually', 'similar', 'object', 'class', 'form', 'common', 'inheritance', 'hierarchy']"
4138,"This idea was introduced first by Smalltalk, and was since used in most other object-oriented languages notably Java and C#.","['idea', 'introduce', 'smalltalk', 'object', 'orient', 'language', 'notably', 'java']"
4139,"A notable exception is C++, where mainly for compatibility with C and efficiency there is no single object hierarchy. This feature is especially useful for container libraries - they only need to allow putting an Object in a container to allow objects of any class to be put in the container. Containers in C++ have been implemented with multiple inheritance,1 and with help of template-based generic programming by Bjarne Stroustrup.23 Other object-oriented languages without a singly rooted hierarchy include Objective-C and PHP.","['notable', 'exception', 'c++', 'mainly', 'compatibility', 'efficiency', 'single', 'object', 'hierarchy', 'feature', 'especially', 'useful', 'container', 'library', 'need', 'allow', 'put', 'object', 'container', 'allow', 'object', 'class', 'container', 'container', 'c++', 'implement', 'multiple', 'inheritance', 'help', 'template', 'base', 'generic', 'programming', 'bjarne', 'stroustrup', 'object', 'orient', 'language', 'singly', 'rooted', 'hierarchy', 'include', 'objective', 'php']"
4140,This computer-programming-related article is a stub. You can help Wikipedia by expanding it.,"['computer', 'programming', 'relate', 'article', 'stub', 'help', 'wikipedia', 'expand']"
4141,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4142,"In C++ programming, object slicing occurs when an object of a subclass type is copied to an object of superclass type: the superclass copy will not have any of the member variables or Member functions defined in the subclass. These variables and functions have, in effect, been ""sliced off"".","['c++', 'programming', 'object', 'slicing', 'occur', 'object', 'subclass', 'type', 'copy', 'object', 'superclass', 'type', 'superclass', 'copy', 'member', 'variable', 'member', 'function', 'define', 'subclass', 'variable', 'function', 'effect', 'slice']"
4143,"More subtly, object slicing can likewise occur when an object of a subclass type is copied to an object of the same type by the superclass's assignment operator, in which case some of the target object's member variables will retain their original values instead of getting copied over from the source object.","['subtly', 'object', 'slicing', 'likewise', 'occur', 'object', 'subclass', 'type', 'copy', 'object', 'type', 'superclass', 'assignment', 'operator', 'case', 'target', 'object', 'member', 'variable', 'retain', 'original', 'value', 'instead', 'getting', 'copy', 'source', 'object']"
4144,"This issue is not inherently unique to C++, but it does not occur naturally in most other object-oriented languages — not even in C++'s relatives such as D, Java, and C# — because copying of objects is not a basic operation in those languages.","['issue', 'inherently', 'unique', 'c++', 'occur', 'naturally', 'object', 'orient', 'language', 'c++', 'relative', 'java', 'copying', 'object', 'basic', 'operation', 'language']"
4145,"Instead, those languages prefer to manipulate objects via implicit references, such that only copying the reference is a basic operation.","['instead', 'language', 'prefer', 'manipulate', 'object', 'implicit', 'reference', 'copy', 'reference', 'basic', 'operation']"
4146,"In C++, by contrast, objects are copied automatically whenever a function takes an object argument by value or returns an object by value.","['c++', 'contrast', 'object', 'copy', 'automatically', 'function', 'take', 'object', 'argument', 'value', 'return', 'object', 'value']"
4147,"Additionally, due to the lack of garbage collection in C++, programs will frequently copy an object whenever the ownership and lifetime of a single shared object would be unclear. For example, inserting an object into a standard library collection such as a .mw-parser-output .monospacedfont-family:monospace,monospacestd::vector actually involves making and inserting a copy into the collection.","['additionally', 'lack', 'garbage', 'collection', 'c++', 'program', 'frequently', 'copy', 'object', 'ownership', 'lifetime', 'single', 'shared', 'object', 'unclear', 'example', 'insert', 'object', 'standard', 'library', 'collection', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacestd::vector', 'actually', 'involve', 'make', 'insert', 'copy', 'collection']"
4148,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4149,Other reasons this message may be displayed:,"['reason', 'message', 'display']"
4150,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4151,"In programming languages, an abstract type is a type in a nominative type system that cannot be instantiated directly; a type that is not abstract – which can be instantiated – is called a concrete type. Every instance of an abstract type is an instance of some concrete subtype. Abstract types are also known as existential types.1","['programming', 'language', 'abstract', 'type', 'type', 'nominative', 'type', 'system', 'instantiate', 'directly', 'type', 'abstract', 'instantiate', 'call', 'concrete', 'type', 'instance', 'abstract', 'type', 'instance', 'concrete', 'subtype', 'abstract', 'type', 'know', 'existential', 'types']"
4152,"An abstract type may provide no implementation, or an incomplete implementation. In some languages, abstract types with no implementation rather than an incomplete implementation are known as protocols, interfaces, signatures, or class types. In class-based object-oriented programming, abstract types are implemented as abstract classes also known as abstract base classes, and concrete types as concrete classes. In generic programming, the analogous notion is a concept, which similarly specifies syntax and semantics, but does not require a subtype relationship: two unrelated types may satisfy the same concept.","['abstract', 'type', 'provide', 'implementation', 'incomplete', 'implementation', 'language', 'abstract', 'type', 'implementation', 'incomplete', 'implementation', 'know', 'protocol', 'interface', 'signature', 'class', 'type', 'class', 'base', 'object', 'orient', 'programming', 'abstract', 'type', 'implement', 'abstract', 'class', 'know', 'abstract', 'base', 'class', 'concrete', 'type', 'concrete', 'class', 'generic', 'programming', 'analogous', 'notion', 'concept', 'similarly', 'specify', 'syntax', 'semantic', 'require', 'subtype', 'relationship', 'unrelated', 'type', 'satisfy', 'concept']"
4153,"Often, abstract types will have one or more implementations provided separately, for example, in the form of concrete subtypes that can be instantiated. In object-oriented programming, an abstract class may include abstract methods or abstract properties2 that are shared by its subclasses. Other names for language features that are or may be used to implement abstract types include traits, mixins, flavors, roles, or type classes.citation needed","['abstract', 'type', 'implementation', 'provide', 'separately', 'example', 'form', 'concrete', 'subtype', 'instantiate', 'object', 'orient', 'programming', 'abstract', 'class', 'include', 'abstract', 'method', 'abstract', 'properties2', 'share', 'subclass', 'name', 'language', 'feature', 'implement', 'abstract', 'type', 'include', 'trait', 'mixin', 'flavor', 'role', 'type', 'classes.citation', 'need']"
4154,"Abstract classes can be created, signified, or simulated in several ways:","['abstract', 'class', 'create', 'signify', 'simulate', 'way']"
4155,Abstract types are an important feature in statically typed OOP languages. Many dynamically typed languages have no equivalent feature although the use of duck typing makes abstract types unnecessary; however traits are found in some modern dynamically-typed languages.citation needed,"['abstract', 'type', 'important', 'feature', 'statically', 'type', 'oop', 'language', 'dynamically', 'type', 'language', 'equivalent', 'feature', 'use', 'duck', 'typing', 'make', 'abstract', 'type', 'unnecessary', 'trait', 'find', 'modern', 'dynamically', 'type', 'languages.citation', 'need']"
4156,"Some authors argue that classes should be leaf classes have no subtypes, or else be abstract.45","['author', 'argue', 'class', 'leaf', 'class', 'subtype', 'abstract']"
4157,Abstract types are useful in that they can be used to define and enforce a protocol; a set of operations that all objects implementing the protocol must support.citation needed,"['abstract', 'type', 'useful', 'define', 'enforce', 'protocol', 'set', 'operation', 'object', 'implement', 'protocol', 'support.citation', 'need']"
4158,Abstract types are also an essential part of the Template Method Pattern.,"['abstract', 'type', 'essential', 'template', 'method', 'pattern']"
4159,Stacks in computing architectures are regions of memory where data is added or removed in a last-in-first-out LIFO manner.,"['stack', 'computing', 'architecture', 'region', 'memory', 'datum', 'add', 'remove', 'lifo', 'manner']"
4160,"In most modern computer systems, each thread has a reserved region of memory referred to as its stack. When a function executes, it may add some of its local state data to the top of the stack; when the function exits it is responsible for removing that data from the stack. At a minimum, a thread's stack is used to store the location of a return address provided by the caller in order to allow return statements to return to the correct location.","['modern', 'computer', 'system', 'thread', 'reserved', 'region', 'memory', 'refer', 'stack', 'function', 'execute', 'add', 'local', 'state', 'datum', 'stack', 'function', 'exit', 'responsible', 'remove', 'datum', 'stack', 'minimum', 'thread', 'stack', 'store', 'location', 'return', 'address', 'provide', 'caller', 'order', 'allow', 'return', 'statement', 'return', 'correct', 'location']"
4161,"The stack is often used to store variables of fixed length local to the currently active functions. Programmers may further choose to explicitly use the stack to store local data of variable length. If a region of memory lies on the thread's stack, that memory is said to have been allocated on the stack, i.e. stack-based memory allocation SBMA. This is contrasted with a heap-based memory allocation HBMA. The SBMA is often closely coupled with a function call stack.","['stack', 'store', 'variable', 'fix', 'length', 'local', 'currently', 'active', 'function', 'programmer', 'choose', 'explicitly', 'use', 'stack', 'store', 'local', 'datum', 'variable', 'length', 'region', 'memory', 'lie', 'thread', 'stack', 'memory', 'say', 'allocate', 'stack', 'i.e.', 'stack', 'base', 'memory', 'allocation', 'sbma', 'contrast', 'heap', 'base', 'memory', 'allocation', 'hbma', 'sbma', 'closely', 'couple', 'function', 'stack']"
4162,"Because the data is added and removed in a last-in-first-out manner, stack-based memory allocation is very simple and typically much faster than heap-based memory allocation also known as dynamic memory allocation e.g. C's malloc.","['data', 'add', 'remove', 'manner', 'stack', 'base', 'memory', 'allocation', 'simple', 'typically', 'fast', 'heap', 'base', 'memory', 'allocation', 'know', 'dynamic', 'memory', 'allocation', 'e.g.', 'malloc']"
4163,"Another feature is that memory on the stack is automatically, and very efficiently, reclaimed when the function exits, which can be convenient for the programmer if the data is no longer required.1 The same applies to longjmp if it moved to a point before the call to alloca happened. If, however, the data needs to be kept in some form, then it must be copied from the stack to the heap before the function exits. Therefore, stack based allocation is suitable for temporary data or data which is no longer required after the current function exits.","['feature', 'memory', 'stack', 'automatically', 'efficiently', 'reclaim', 'function', 'exit', 'convenient', 'programmer', 'data', 'long', 'required', 'apply', 'longjmp', 'move', 'point', 'alloca', 'happen', 'datum', 'need', 'keep', 'form', 'copy', 'stack', 'heap', 'function', 'exit', 'stack', 'base', 'allocation', 'suitable', 'temporary', 'datum', 'datum', 'long', 'require', 'current', 'function', 'exit']"
4164,"A thread's assigned stack size can be as small as only a few bytes on some small CPUs. Allocating more memory on the stack than is available can result in a crash due to stack overflow. This is also why functions that use alloca are usually prevented from being inlined:2 should such a function be inlined into a loop, the caller would suffer from an unanticipated growth in stack usage, making an overflow much more likely.","['thread', 'assign', 'stack', 'size', 'small', 'byte', 'small', 'cpu', 'allocate', 'memory', 'stack', 'available', 'result', 'crash', 'stack', 'overflow', 'function', 'use', 'alloca', 'usually', 'prevent', 'inlined', 'function', 'inline', 'loop', 'caller', 'suffer', 'unanticipated', 'growth', 'stack', 'usage', 'make', 'overflow', 'likely']"
4165,"Stack-based allocation can also cause minor performance problems: it leads to variable-size stack frames, so that both stack and frame pointers need to be managed with fixed-size stack frames, one of these is redundant. This is usually much less costly than calling malloc and free anyway. In particular, if the current function contains both calls to alloca and blocks containing variable-length local data then a conflict occurs between alloca's attempts to increase the current stack frame until the current function exits versus the compiler's need to place local variables of variable length in the same location in the stack frame. This conflict is typically resolved by creating a separate chain of heap storage for each call to alloca.3 The chain records the stack depth at which each allocation occurs, subsequent calls to alloca in any function trim this chain down to the current stack depth to eventually but not immediately free any storage on this chain. A call to alloca with an argument of zero can also be used to trigger the freeing of memory without allocating any more such memory. As a consequence of this conflict between alloca and local variable storage, using alloca might be no more efficient than using malloc.","['stack', 'base', 'allocation', 'cause', 'minor', 'performance', 'problem', 'lead', 'variable', 'size', 'stack', 'frame', 'stack', 'frame', 'pointer', 'need', 'manage', 'fix', 'size', 'stack', 'frame', 'redundant', 'usually', 'costly', 'call', 'malloc', 'free', 'particular', 'current', 'function', 'contain', 'call', 'alloca', 'block', 'contain', 'variable', 'length', 'local', 'datum', 'conflict', 'occur', 'alloca', 'attempt', 'increase', 'current', 'stack', 'frame', 'current', 'function', 'exit', 'versus', 'compiler', 'need', 'place', 'local', 'variable', 'variable', 'length', 'location', 'stack', 'frame', 'conflict', 'typically', 'resolve', 'create', 'separate', 'chain', 'heap', 'storage', 'alloca', 'chain', 'record', 'stack', 'depth', 'allocation', 'occur', 'subsequent', 'call', 'alloca', 'function', 'trim', 'chain', 'current', 'stack', 'depth', 'eventually', 'immediately', 'free', 'storage', 'chain', 'alloca', 'argument', 'zero', 'trigger', 'freeing', 'memory', 'allocate', 'memory', 'consequence', 'conflict', 'alloca', 'local', 'variable', 'storage', 'alloca', 'efficient', 'malloc']"
4166,"Many Unix-like systems as well as Microsoft Windows implement a function called alloca for dynamically allocating stack memory in a way similar to the heap-based malloc. A compiler typically translates it to inlined instructions manipulating the stack pointer, similar to how variable-length arrays are handled.4 Although there is no need to explicitly free the memory, there is a risk of undefined behavior due to stack overflow.5 The function was present on Unix systems as early as 32/V 1978, but is not part of Standard C or any POSIX standard.","['unix', 'like', 'system', 'microsoft', 'windows', 'implement', 'function', 'call', 'alloca', 'dynamically', 'allocate', 'stack', 'memory', 'way', 'similar', 'heap', 'base', 'malloc', 'compiler', 'typically', 'translate', 'inline', 'instruction', 'manipulate', 'stack', 'pointer', 'similar', 'variable', 'length', 'array', 'handled', 'need', 'explicitly', 'free', 'memory', 'risk', 'undefined', 'behavior', 'stack', 'overflow', 'function', 'present', 'unix', 'system', 'early', '1978', 'standard', 'posix', 'standard']"
4167,"A safer version of alloca called _malloca, which reports errors, exists on Microsoft Windows. It requires the use of _freea.6 gnulib provides an equivalent interface, albeit instead of throwing an SEH exception on overflow, it delegates to malloc when an overlarge size is detected.7 A similar feature can be emulated using manual accounting and size-checking, such as in the uses of alloca_account in glibc.8","['safe', 'version', 'alloca', 'call', 'malloca', 'report', 'error', 'exist', 'microsoft', 'windows', 'require', 'use', 'freea', 'gnulib', 'provide', 'equivalent', 'interface', 'albeit', 'instead', 'throw', 'seh', 'exception', 'overflow', 'delegate', 'malloc', 'overlarge', 'size', 'detected', 'similar', 'feature', 'emulate', 'manual', 'accounting', 'size', 'checking', 'use', 'alloca_account', 'glibc']"
4168,"Some processor families, such as the x86, have special instructions for manipulating the stack of the currently executing thread. Other processor families, including PowerPC and MIPS, do not have explicit stack support, but instead rely on convention and delegate stack management to the operating system's application binary interface ABI.","['processor', 'family', 'x86', 'special', 'instruction', 'manipulate', 'stack', 'currently', 'execute', 'thread', 'processor', 'family', 'include', 'powerpc', 'mips', 'explicit', 'stack', 'support', 'instead', 'rely', 'convention', 'delegate', 'stack', 'management', 'operating', 'system', 'application', 'binary', 'interface', 'abi']"
4169,"In addition, since the C version C99 optional since C11, it is possible to create an array on the stack within a function, automatically, known as an auto VLA variable-length array.9","['addition', 'version', 'c99', 'optional', 'c11', 'possible', 'create', 'array', 'stack', 'function', 'automatically', 'know', 'auto', 'vla', 'variable', 'length', 'array']"
4170,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4171,"A method in object-oriented programming OOP is a procedure associated with a message and an object. An object consists of state data and behavior; these compose an interface, which specifies how the object may be utilized by any of its various consumers. A method is a behavior of an object parametrized by a consumer.","['method', 'object', 'orient', 'programming', 'oop', 'procedure', 'associate', 'message', 'object', 'object', 'consist', 'state', 'datum', 'behavior', 'compose', 'interface', 'specify', 'object', 'utilize', 'consumer', 'method', 'behavior', 'object', 'parametrize', 'consumer']"
4172,"Data is represented as properties of the object, and behaviors are represented as methods. For example, a Window object could have methods such as open and close, while its state whether it is open or closed at any given point in time would be a property.","['datum', 'represent', 'property', 'object', 'behavior', 'represent', 'method', 'example', 'window', 'object', 'method', 'open', 'close', 'state', 'open', 'close', 'give', 'point', 'time', 'property']"
4173,"In class-based programming, methods are defined within a class, and objects are instances of a given class. One of the most important capabilities that a method provides is method overriding - the same name e.g., area can be used for multiple different kinds of classes. This allows the sending objects to invoke behaviors and to delegate the implementation of those behaviors to the receiving object. A method in Java programming sets the behavior of a class object. For example, an object can send an area message to another object and the appropriate formula is invoked whether the receiving object is a rectangle, circle, triangle, etc.","['class', 'base', 'programming', 'method', 'define', 'class', 'object', 'instance', 'give', 'class', 'important', 'capability', 'method', 'provide', 'method', 'override', 'e.g.', 'area', 'multiple', 'different', 'kind', 'class', 'allow', 'send', 'object', 'invoke', 'behavior', 'delegate', 'implementation', 'behavior', 'receiving', 'object', 'method', 'java', 'programming', 'set', 'behavior', 'class', 'object', 'example', 'object', 'send', 'area', 'message', 'object', 'appropriate', 'formula', 'invoke', 'receiving', 'object', 'rectangle', 'circle', 'triangle', 'etc']"
4174,Methods also provide the interface that other classes use to access and modify the properties of an object; this is known as encapsulation. Encapsulation and overriding are the two primary distinguishing features between methods and procedure calls.1,"['method', 'provide', 'interface', 'class', 'use', 'access', 'modify', 'property', 'object', 'know', 'encapsulation', 'encapsulation', 'override', 'primary', 'distinguish', 'feature', 'method', 'procedure', 'calls']"
4175,"Method overriding and overloading are two of the most significant ways that a method differs from a conventional procedure or function call. Overriding refers to a subclass redefining the implementation of a method of its superclass. For example, findArea may be a method defined on a shape class,2 triangle, etc. would each define the appropriate formula to calculate their area. The idea is to look at objects as ""black boxes"" so that changes to the internals of the object can be made with minimal impact on the other objects that use it. This is known as encapsulation and is meant to make code easier to maintain and re-use.","['method', 'override', 'overloading', 'significant', 'way', 'method', 'differ', 'conventional', 'procedure', 'function', 'override', 'refer', 'subclass', 'redefine', 'implementation', 'method', 'superclass', 'example', 'findarea', 'method', 'define', 'shape', 'class', 'triangle', 'etc', 'define', 'appropriate', 'formula', 'calculate', 'area', 'idea', 'look', 'object', 'black', 'box', 'change', 'internal', 'object', 'minimal', 'impact', 'object', 'use', 'know', 'encapsulation', 'mean', 'code', 'easy', 'maintain', 'use']"
4176,"Method overloading, on the other hand, refers to differentiating the code used to handle a message based on the parameters of the method. If one views the receiving object as the first parameter in any method then overriding is just a special case of overloading where the selection is based only on the first argument. The following simple Java example illustrates the difference:","['method', 'overloading', 'hand', 'refer', 'differentiate', 'code', 'handle', 'message', 'base', 'parameter', 'method', 'view', 'receiving', 'object', 'parameter', 'method', 'override', 'special', 'case', 'overload', 'selection', 'base', 'argument', 'follow', 'simple', 'java', 'example', 'illustrate', 'difference']"
4177,"Accessor methods are used to read the data values of an object. Mutator methods are used to modify the data of an object. Manager methods are used to initialize and destroy objects of a class, e.g. constructors and destructors.","['accessor', 'method', 'read', 'datum', 'value', 'object', 'mutator', 'method', 'modify', 'datum', 'object', 'manager', 'method', 'initialize', 'destroy', 'object', 'class', 'e.g.', 'constructor', 'destructor']"
4178,"These methods provide an abstraction layer that facilitates encapsulation and modularity. For example, if a bank-account class provides a getBalance accessor method to retrieve the current balance rather than directly accessing the balance data fields, then later revisions of the same code can implement a more complex mechanism for balance retrieval e.g., a database fetch, without the dependent code needing to be changed. The concepts of encapsulation and modularity are not unique to object-oriented programming. Indeed, in many ways the object-oriented approach is simply the logical extension of previous paradigms such as abstract data types and structured programming.3","['method', 'provide', 'abstraction', 'layer', 'facilitate', 'encapsulation', 'modularity', 'example', 'bank', 'account', 'class', 'provide', 'getbalance', 'accessor', 'method', 'retrieve', 'current', 'balance', 'directly', 'access', 'balance', 'datum', 'field', 'later', 'revision', 'code', 'implement', 'complex', 'mechanism', 'balance', 'retrieval', 'e.g.', 'database', 'fetch', 'dependent', 'code', 'need', 'change', 'concept', 'encapsulation', 'modularity', 'unique', 'object', 'orient', 'programming', 'way', 'object', 'orient', 'approach', 'simply', 'logical', 'extension', 'previous', 'paradigms', 'abstract', 'datum', 'type', 'structure', 'programming']"
4179,"A constructor is a method that is called at the beginning of an object's lifetime to create and initialize the object, a process called construction or instantiation. Initialization may include an acquisition of resources. Constructors may have parameters but usually do not return values in most languages. See the following example in Java:","['constructor', 'method', 'call', 'beginning', 'object', 'lifetime', 'create', 'initialize', 'object', 'process', 'call', 'construction', 'instantiation', 'initialization', 'include', 'acquisition', 'resource', 'constructor', 'parameter', 'usually', 'return', 'value', 'language', 'follow', 'example', 'java']"
4180,"A destructor is a method that is called automatically at the end of an object's lifetime, a process called destruction. Destruction in most languages does not allow destructor method arguments nor return values. Destruction can be implemented so as to perform cleanup chores and other tasks at object destruction.","['destructor', 'method', 'call', 'automatically', 'end', 'object', 'lifetime', 'process', 'call', 'destruction', 'destruction', 'language', 'allow', 'destructor', 'method', 'argument', 'return', 'value', 'destruction', 'implement', 'perform', 'cleanup', 'chore', 'task', 'object', 'destruction']"
4181,"In garbage-collected languages, such as Java, C#, and Python, destructors are known as finalizers. They have a similar purpose and function to destructors, but because of the differences between languages that utilize garbage-collection and languages with manual memory management, the sequence in which they are called is different.","['garbage', 'collect', 'language', 'java', 'python', 'destructor', 'know', 'finalizer', 'similar', 'purpose', 'function', 'destructor', 'difference', 'language', 'utilize', 'garbage', 'collection', 'language', 'manual', 'memory', 'management', 'sequence', 'call', 'different']"
4182,An abstract method is one with only a signature and no implementation body. It is often used to specify that a subclass must provide an implementation of the method. Abstract methods are used to specify interfaces in some programming languages.4,"['abstract', 'method', 'signature', 'implementation', 'body', 'specify', 'subclass', 'provide', 'implementation', 'method', 'abstract', 'method', 'specify', 'interface', 'programming', 'languages']"
4183,The following Java code shows an abstract class that needs to be extended:,"['follow', 'java', 'code', 'show', 'abstract', 'class', 'need', 'extend']"
4184,The following subclass extends the main class:,"['following', 'subclass', 'extend', 'main', 'class']"
4185,"If a subclass provides an implementation for an abstract method, another subclass can make it abstract again. This is called reabstraction.","['subclass', 'provide', 'implementation', 'abstract', 'method', 'subclass', 'abstract', 'call', 'reabstraction']"
4186,"In practice, this is rarely used.","['practice', 'rarely']"
4187,"In C#, a virtual method can be overridden with an abstract method. This also applies to Java, where all non-private methods are virtual.","['virtual', 'method', 'overridden', 'abstract', 'method', 'apply', 'java', 'non', 'private', 'method', 'virtual']"
4188,"Interfaces' default methods can also be reabstracted, requiring subclasses to implement them. This also applies to Java.","['interface', 'default', 'method', 'reabstracte', 'require', 'subclass', 'implement', 'apply', 'java']"
4189,"Class methods are methods that are called on a class rather than an instance. They are typically used as part of an object meta-model. I.e, for each class, defined an instance of the class object in the meta-model is created. Meta-model protocols allow classes to be created and deleted. In this sense, they provide the same functionality as constructors and destructors described above. But in some languages such as the Common Lisp Object System CLOS the meta-model allows the developer to dynamically alter the object model at run time: e.g., to create new classes, redefine the class hierarchy, modify properties, etc.","['class', 'method', 'method', 'call', 'class', 'instance', 'typically', 'object', 'meta', 'model', 'i.e', 'class', 'define', 'instance', 'class', 'object', 'meta', 'model', 'create', 'meta', 'model', 'protocol', 'allow', 'class', 'create', 'delete', 'sense', 'provide', 'functionality', 'constructor', 'destructor', 'describe', 'language', 'common', 'lisp', 'object', 'system', 'clos', 'meta', 'model', 'allow', 'developer', 'dynamically', 'alter', 'object', 'model', 'run', 'time', 'e.g.', 'create', 'new', 'class', 'redefine', 'class', 'hierarchy', 'modify', 'property', 'etc']"
4190,"Special methods are very language-specific and a language may support none, some, or all of the special methods defined here. A language's compiler may automatically generate default special methods or a programmer may be allowed to optionally define special methods. Most special methods cannot be directly called, but rather the compiler generates code to call them at appropriate times.","['special', 'method', 'language', 'specific', 'language', 'support', 'special', 'method', 'define', 'language', 'compiler', 'automatically', 'generate', 'default', 'special', 'method', 'programmer', 'allow', 'optionally', 'define', 'special', 'method', 'special', 'method', 'directly', 'call', 'compiler', 'generate', 'code', 'appropriate', 'time']"
4191,"Static methods are meant to be relevant to all the instances of a class rather than to any specific instance. They are similar to static variables in that sense. An example would be a static method to sum the values of all the variables of every instance of a class. For example, if there were a Product class it might have a static method to compute the average price of all products.","['static', 'method', 'mean', 'relevant', 'instance', 'class', 'specific', 'instance', 'similar', 'static', 'variable', 'sense', 'example', 'static', 'method', 'sum', 'value', 'variable', 'instance', 'class', 'example', 'product', 'class', 'static', 'method', 'compute', 'average', 'price', 'product']"
4192,"In Java, a commonly used static method is:","['java', 'commonly', 'static', 'method']"
4193,This static method has no owning object and does not run on an instance. It receives all information from its arguments.2,"['static', 'method', 'own', 'object', 'run', 'instance', 'receive', 'information', 'arguments']"
4194,"A static method can be invoked even if no instances of the class exist yet. Static methods are called ""static"" because they are resolved at compile time based on the class they are called on and not dynamically as in the case with instance methods, which are resolved polymorphically based on the runtime type of the object.","['static', 'method', 'invoke', 'instance', 'class', 'exist', 'static', 'method', 'call', 'static', 'resolve', 'compile', 'time', 'base', 'class', 'call', 'dynamically', 'case', 'instance', 'method', 'resolve', 'polymorphically', 'base', 'runtime', 'type', 'object']"
4195,Copy-assignment operators define actions to be performed by the compiler when a class object is assigned to a class object of the same type.,"['copy', 'assignment', 'operator', 'define', 'action', 'perform', 'compiler', 'class', 'object', 'assign', 'class', 'object', 'type']"
4196,Operator methods define or redefine operator symbols and define the operations to be performed with the symbol and the associated method parameters. C++ example:,"['operator', 'method', 'define', 'redefine', 'operator', 'symbol', 'define', 'operation', 'perform', 'symbol', 'associate', 'method', 'parameter', 'c++', 'example']"
4197,"Some procedural languages were extended with object-oriented capabilities to leverage the large skill sets and legacy code for those languages but still provide the benefits of object-oriented development. Perhaps the most well-known example is C++, an object-oriented extension of the C programming language. Due to the design requirements to add the object-oriented paradigm on to an existing procedural language, message passing in C++ has some unique capabilities and terminologies. For example, in C++ a method is known as a member function. C++ also has the concept of virtual functions which are member functions that can be overridden in derived classes and allow for dynamic dispatch.","['procedural', 'language', 'extend', 'object', 'orient', 'capability', 'leverage', 'large', 'skill', 'set', 'legacy', 'code', 'language', 'provide', 'benefit', 'object', 'orient', 'development', 'know', 'example', 'c++', 'object', 'orient', 'extension', 'programming', 'language', 'design', 'requirement', 'add', 'object', 'orient', 'paradigm', 'exist', 'procedural', 'language', 'message', 'pass', 'c++', 'unique', 'capability', 'terminology', 'example', 'c++', 'method', 'know', 'member', 'function', 'c++', 'concept', 'virtual', 'function', 'member', 'function', 'overridden', 'derive', 'class', 'allow', 'dynamic', 'dispatch']"
4198,"Virtual functions are the means by which a C++ class can achieve polymorphic behavior. Non-virtual member functions, or regular methods, are those that do not participate in polymorphism.","['virtual', 'function', 'mean', 'c++', 'class', 'achieve', 'polymorphic', 'behavior', 'non', 'virtual', 'member', 'function', 'regular', 'method', 'participate', 'polymorphism']"
4199,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4200,"In computer programming, a type system is a logical system comprising a set of rules that assigns a property called a type to every ""term"" a word, phrase, or other set of symbols. Usually the terms are various constructs of a computer program, such as variables, expressions, functions, or modules.1 A type system dictates the operations that can be performed on a term. For variables, the type system determines the allowed values of that term. Type systems formalize and enforce the otherwise implicit categories the programmer uses for algebraic data types, data structures, or other components e.g. ""string"", ""array of float"", ""function returning boolean"".","['computer', 'programming', 'type', 'system', 'logical', 'system', 'comprise', 'set', 'rule', 'assign', 'property', 'call', 'type', 'term', 'word', 'phrase', 'set', 'symbol', 'usually', 'term', 'construct', 'computer', 'program', 'variable', 'expression', 'function', 'modules', 'type', 'system', 'dictate', 'operation', 'perform', 'term', 'variable', 'type', 'system', 'determine', 'allow', 'value', 'term', 'type', 'system', 'formalize', 'enforce', 'implicit', 'category', 'programmer', 'use', 'algebraic', 'datum', 'type', 'datum', 'structure', 'component', 'e.g.', 'string', 'array', 'float', 'function', 'return', 'boolean']"
4201,"Type systems are often specified as part of programming languages and built into interpreters and compilers, although the type system of a language can be extended by optional tools that perform added checks using the language's original type syntax and grammar. The main purpose of a type system in a programming language is to reduce possibilities for bugs in computer programs due to type errors.2 The given type system in question determines what constitutes a type error, but in general, the aim is to prevent operations expecting a certain kind of value from being used with values for which that operation does not make sense validity errors. Type systems allow defining interfaces between different parts of a computer program, and then checking that the parts have been connected in a consistent way. This checking can happen statically at compile time, dynamically at run time, or as a combination of both. Type systems have other purposes as well, such as expressing business rules, enabling certain compiler optimizations, allowing for multiple dispatch, and providing a form of documentation.","['type', 'system', 'specify', 'programming', 'language', 'build', 'interpreter', 'compiler', 'type', 'system', 'language', 'extend', 'optional', 'tool', 'perform', 'add', 'check', 'language', 'original', 'type', 'syntax', 'grammar', 'main', 'purpose', 'type', 'system', 'programming', 'language', 'reduce', 'possibility', 'bug', 'computer', 'program', 'type', 'errors', 'give', 'type', 'system', 'question', 'determine', 'constitute', 'type', 'error', 'general', 'aim', 'prevent', 'operation', 'expect', 'certain', 'kind', 'value', 'value', 'operation', 'sense', 'validity', 'error', 'type', 'system', 'allow', 'define', 'interface', 'different', 'part', 'computer', 'program', 'check', 'part', 'connect', 'consistent', 'way', 'checking', 'happen', 'statically', 'compile', 'time', 'dynamically', 'run', 'time', 'combination', 'type', 'system', 'purpose', 'express', 'business', 'rule', 'enable', 'certain', 'compiler', 'optimization', 'allow', 'multiple', 'dispatch', 'provide', 'form', 'documentation']"
4202,"An example of a simple type system is that of the C language. The portions of a C program are the function definitions. One function is invoked by another function. The interface of a function states the name of the function and a list of parameters that are passed to the function's code. The code of an invoking function states the name of the invoked, along with the names of variables that hold values to pass to it. During execution, the values are placed into temporary storage, then execution jumps to the code of the invoked function. The invoked function's code accesses the values and makes use of them. If the instructions inside the function are written with the assumption of receiving an integer value, but the calling code passed a floating-point value, then the wrong result will be computed by the invoked function. The C compiler checks the types of the arguments passed to a function when it is called against the types of the parameters declared in the function's definition. If the types do not match, the compiler throws a compile-time error.","['example', 'simple', 'type', 'system', 'language', 'portion', 'program', 'function', 'definition', 'function', 'invoke', 'function', 'interface', 'function', 'state', 'function', 'list', 'parameter', 'pass', 'function', 'code', 'code', 'invoke', 'function', 'state', 'invoked', 'name', 'variable', 'hold', 'value', 'pass', 'execution', 'value', 'place', 'temporary', 'storage', 'execution', 'jump', 'code', 'invoke', 'function', 'invoked', 'function', 'code', 'access', 'value', 'make', 'use', 'instruction', 'inside', 'function', 'write', 'assumption', 'receive', 'integer', 'value', 'call', 'code', 'pass', 'float', 'point', 'value', 'wrong', 'result', 'compute', 'invoke', 'function', 'compiler', 'check', 'type', 'argument', 'pass', 'function', 'call', 'type', 'parameter', 'declare', 'function', 'definition', 'type', 'match', 'compiler', 'throw', 'compile', 'time', 'error']"
4203,"A compiler may also use the static type of a value to optimize the storage it needs and the choice of algorithms for operations on the value. In many C compilers the float data type, for example, is represented in 32 bits, in accord with the IEEE specification for single-precision floating point numbers. They will thus use floating-point-specific microprocessor operations on those values floating-point addition, multiplication, etc..","['compiler', 'use', 'static', 'type', 'value', 'optimize', 'storage', 'need', 'choice', 'algorithm', 'operation', 'value', 'compiler', 'float', 'datum', 'type', 'example', 'represent', 'bit', 'accord', 'ieee', 'specification', 'single', 'precision', 'float', 'point', 'number', 'use', 'float', 'point', 'specific', 'microprocessor', 'operation', 'value', 'float', 'point', 'addition', 'multiplication', 'etc']"
4204,"The depth of type constraints and the manner of their evaluation affect the typing of the language. A programming language may further associate an operation with various resolutions for each type, in the case of type polymorphism. Type theory is the study of type systems. The concrete types of some programming languages, such as integers and strings, depend on practical issues of computer architecture, compiler implementation, and language design.","['depth', 'type', 'constraint', 'manner', 'evaluation', 'affect', 'typing', 'language', 'programming', 'language', 'associate', 'operation', 'resolution', 'type', 'case', 'type', 'polymorphism', 'type', 'theory', 'study', 'type', 'system', 'concrete', 'type', 'programming', 'language', 'integer', 'string', 'depend', 'practical', 'issue', 'computer', 'architecture', 'compiler', 'implementation', 'language', 'design']"
4205,"Formally, type theory studies type systems. A programming language must have the opportunity to type check using the type system whether at compile time or runtime, manually annotated or automatically inferred. As Mark Manasse concisely put it:3","['formally', 'type', 'theory', 'study', 'type', 'system', 'programming', 'language', 'opportunity', 'type', 'check', 'type', 'system', 'compile', 'time', 'runtime', 'manually', 'annotate', 'automatically', 'infer', 'mark', 'manasse', 'concisely', 'it']"
4206,The fundamental problem addressed by a type theory is to ensure that programs have meaning. The fundamental problem caused by a type theory is that meaningful programs may not have meanings ascribed to them. The quest for richer type systems results from this tension.,"['fundamental', 'problem', 'address', 'type', 'theory', 'ensure', 'program', 'meaning', 'fundamental', 'problem', 'cause', 'type', 'theory', 'meaningful', 'program', 'meaning', 'ascribe', 'quest', 'rich', 'type', 'system', 'result', 'tension']"
4207,"Assigning a data type, termed typing, gives meaning to a sequence of bits such as a value in memory or some object such as a variable. The hardware of a general purpose computer is unable to discriminate between for example a memory address and an instruction code, or between a character, an integer, or a floating-point number, because it makes no intrinsic distinction between any of the possible values that a sequence of bits might mean.note 1 Associating a sequence of bits with a type conveys that meaning to the programmable hardware to form a symbolic system composed of that hardware and some program.","['assign', 'data', 'type', 'term', 'typing', 'give', 'meaning', 'sequence', 'bit', 'value', 'memory', 'object', 'variable', 'hardware', 'general', 'purpose', 'computer', 'unable', 'discriminate', 'example', 'memory', 'address', 'instruction', 'code', 'character', 'integer', 'float', 'point', 'number', 'make', 'intrinsic', 'distinction', 'possible', 'value', 'sequence', 'bit', 'mean.note', 'associate', 'sequence', 'bit', 'type', 'convey', 'mean', 'programmable', 'hardware', 'form', 'symbolic', 'system', 'compose', 'hardware', 'program']"
4208,"A program associates each value with at least one specific type, but it also can occur that one value is associated with many subtypes. Other entities, such as objects, modules, communication channels, and dependencies can become associated with a type. Even a type can become associated with a type. An implementation of a type system could in theory associate identifications called data type a type of a value, class a type of an object, and kind a type of a type, or metatype. These are the abstractions that typing can go through, on a hierarchy of levels contained in a system.","['program', 'associate', 'value', 'specific', 'type', 'occur', 'value', 'associate', 'subtype', 'entity', 'object', 'module', 'communication', 'channel', 'dependency', 'associate', 'type', 'type', 'associate', 'type', 'implementation', 'type', 'system', 'theory', 'associate', 'identification', 'call', 'datum', 'type', 'type', 'value', 'class', 'type', 'object', 'kind', 'type', 'type', 'metatype', 'abstraction', 'typing', 'hierarchy', 'level', 'contain', 'system']"
4209,"When a programming language evolves a more elaborate type system, it gains a more finely grained rule set than basic type checking, but this comes at a price when the type inferences and other properties become undecidable, and when more attention must be paid by the programmer to annotate code or to consider computer-related operations and functioning. It is challenging to find a sufficiently expressive type system that satisfies all programming practices in a type safe manner.","['programming', 'language', 'evolve', 'elaborate', 'type', 'system', 'gain', 'finely', 'grain', 'rule', 'set', 'basic', 'type', 'checking', 'come', 'price', 'type', 'inference', 'property', 'undecidable', 'attention', 'pay', 'programmer', 'annotate', 'code', 'consider', 'computer', 'relate', 'operation', 'functioning', 'challenge', 'find', 'sufficiently', 'expressive', 'type', 'system', 'satisfy', 'programming', 'practice', 'type', 'safe', 'manner']"
4210,"A programming language compiler can also implement a dependent type or an effect system, which enables even more program specifications to be verified by a type checker. Beyond simple value-type pairs, a virtual ""region"" of code is associated with an ""effect"" component describing what is being done with what, and enabling for example to ""throw"" an error report. Thus the symbolic system may be a type and effect system, which endows it with more safety checking than type checking alone.","['programming', 'language', 'compiler', 'implement', 'dependent', 'type', 'effect', 'system', 'enable', 'program', 'specification', 'verify', 'type', 'checker', 'simple', 'value', 'type', 'pair', 'virtual', 'region', 'code', 'associate', 'effect', 'component', 'describe', 'enable', 'example', 'throw', 'error', 'report', 'symbolic', 'system', 'type', 'effect', 'system', 'endow', 'safety', 'checking', 'type', 'checking']"
4211,"Whether automated by the compiler or specified by a programmer, a type system makes program behavior illegal if outside the type-system rules. Advantages provided by programmer-specified type systems include:","['automate', 'compiler', 'specify', 'programmer', 'type', 'system', 'make', 'program', 'behavior', 'illegal', 'outside', 'type', 'system', 'rule', 'advantage', 'provide', 'programmer', 'specify', 'type', 'system', 'include']"
4212,Advantages provided by compiler-specified type systems include:,"['advantage', 'provide', 'compiler', 'specify', 'type', 'system', 'include']"
4213,"A type error is an unintended conditiona which might manifest in multiple stages of a program's development. Thus a facility for detection of the error is needed in the type system. In some languages, such as Haskell, for which type inference is automated, lint might be available to its compiler to aid in the detection of error.","['type', 'error', 'unintended', 'conditiona', 'manifest', 'multiple', 'stage', 'program', 'development', 'facility', 'detection', 'error', 'need', 'type', 'system', 'language', 'haskell', 'type', 'inference', 'automate', 'lint', 'available', 'compiler', 'aid', 'detection', 'error']"
4214,"Type safety contributes to program correctness, but might only guarantee correctness at the cost of making the type checking itself an undecidable problem as in the Halting problem. In a type system with automated type checking a program may prove to run incorrectly yet produce no compiler errors. Division by zero is an unsafe and incorrect operation, but a type checker which only runs at compile time does not scan for division by zero in most languages; that division would surface as a runtime error. To prove the absence of these defects, other kinds of formal methods, collectively known as program analyses, are in common use. Alternatively, a sufficiently expressive type system, such as in dependently-typed languages, can prevent these kinds of errors for example, expressing the type of non-zero numbers. In addition software testing is an empirical method for finding errors that such a type checker would not detect.","['type', 'safety', 'contribute', 'program', 'correctness', 'guarantee', 'correctness', 'cost', 'make', 'type', 'check', 'undecidable', 'problem', 'halting', 'problem', 'type', 'system', 'automate', 'type', 'check', 'program', 'prove', 'run', 'incorrectly', 'produce', 'compiler', 'error', 'division', 'zero', 'unsafe', 'incorrect', 'operation', 'type', 'checker', 'run', 'compile', 'time', 'scan', 'division', 'zero', 'language', 'division', 'surface', 'runtime', 'error', 'prove', 'absence', 'defect', 'kind', 'formal', 'method', 'collectively', 'know', 'program', 'analysis', 'common', 'use', 'alternatively', 'sufficiently', 'expressive', 'type', 'system', 'dependently', 'type', 'language', 'prevent', 'kind', 'error', 'example', 'express', 'type', 'non', 'zero', 'number', 'addition', 'software', 'testing', 'empirical', 'method', 'find', 'error', 'type', 'checker', 'detect']"
4215,"The process of verifying and enforcing the constraints of types—type checking—may occur at compile time a static check or at run-time. If a language specification requires its typing rules strongly i.e., more or less allowing only those automatic type conversions that do not lose information, one can refer to the process as strongly typed, if not, as weakly typed. The terms are not usually used in a strict sense.","['process', 'verifying', 'enforce', 'constraint', 'type', 'type', 'checking', 'occur', 'compile', 'time', 'static', 'check', 'run', 'time', 'language', 'specification', 'require', 'typing', 'rule', 'strongly', 'i.e.', 'allow', 'automatic', 'type', 'conversion', 'lose', 'information', 'refer', 'process', 'strongly', 'type', 'weakly', 'typed', 'term', 'usually', 'strict', 'sense']"
4216,"Static type checking is the process of verifying the type safety of a program based on analysis of a program's text source code. If a program passes a static type checker, then the program is guaranteed to satisfy some set of type safety properties for all possible inputs.","['static', 'type', 'checking', 'process', 'verify', 'type', 'safety', 'program', 'base', 'analysis', 'program', 'text', 'source', 'code', 'program', 'pass', 'static', 'type', 'checker', 'program', 'guarantee', 'satisfy', 'set', 'type', 'safety', 'property', 'possible', 'input']"
4217,"Static type checking can be considered a limited form of program verification see type safety, and in a type-safe language, can be considered also an optimization. If a compiler can prove that a program is well-typed, then it does not need to emit dynamic safety checks, allowing the resulting compiled binary to run faster and to be smaller.","['static', 'type', 'checking', 'consider', 'limited', 'form', 'program', 'verification', 'type', 'safety', 'type', 'safe', 'language', 'consider', 'optimization', 'compiler', 'prove', 'program', 'type', 'need', 'emit', 'dynamic', 'safety', 'check', 'allow', 'result', 'compile', 'binary', 'run', 'fast', 'small']"
4218,"Static type checking for Turing-complete languages is inherently conservative. That is, if a type system is both sound meaning that it rejects all incorrect programs and decidable meaning that it is possible to write an algorithm that determines whether a program is well-typed, then it must be incomplete meaning there are correct programs, which are also rejected, even though they do not encounter runtime errors.6 For example, consider a program containing the code:","['static', 'type', 'checking', 'turing', 'complete', 'language', 'inherently', 'conservative', 'type', 'system', 'sound', 'mean', 'reject', 'incorrect', 'program', 'decidable', 'meaning', 'possible', 'write', 'algorithm', 'determine', 'program', 'type', 'incomplete', 'meaning', 'correct', 'program', 'reject', 'encounter', 'runtime', 'errors', 'example', 'consider', 'program', 'contain', 'code']"
4219,"Even if the expression <complex test> always evaluates to true at run-time, most type checkers will reject the program as ill-typed, because it is difficult if not impossible for a static analyzer to determine that the else branch will not be taken.7 Consequently, a static type checker will quickly detect type errors in rarely used code paths. Without static type checking, even code coverage tests with 100% coverage may be unable to find such type errors. The tests may fail to detect such type errors, because the combination of all places where values are created and all places where a certain value is used must be taken into account.","['expression', 'complex', 'test', 'evaluate', 'true', 'run', 'time', 'type', 'checker', 'reject', 'program', 'ill', 'typed', 'difficult', 'impossible', 'static', 'analyzer', 'determine', 'branch', 'taken', 'consequently', 'static', 'type', 'checker', 'quickly', 'detect', 'type', 'error', 'rarely', 'code', 'path', 'static', 'type', 'checking', 'code', 'coverage', 'test', '100', 'coverage', 'unable', 'find', 'type', 'error', 'test', 'fail', 'detect', 'type', 'error', 'combination', 'place', 'value', 'create', 'place', 'certain', 'value', 'take', 'account']"
4220,"A number of useful and common programming language features cannot be checked statically, such as downcasting. Thus, many languages will have both static and dynamic type checking; the static type checker verifies what it can, and dynamic checks verify the rest.","['number', 'useful', 'common', 'programming', 'language', 'feature', 'check', 'statically', 'downcaste', 'language', 'static', 'dynamic', 'type', 'checking', 'static', 'type', 'checker', 'verifie', 'dynamic', 'check', 'verify', 'rest']"
4221,"Many languages with static type checking provide a way to bypass the type checker. Some languages allow programmers to choose between static and dynamic type safety. For example, C# distinguishes between statically-typed and dynamically-typed variables. Uses of the former are checked statically, whereas uses of the latter are checked dynamically. Other languages allow writing code that is not type-safe; for example, in C, programmers can freely cast a value between any two types that have the same size, effectively subverting the type concept.","['language', 'static', 'type', 'checking', 'provide', 'way', 'bypass', 'type', 'checker', 'language', 'allow', 'programmer', 'choose', 'static', 'dynamic', 'type', 'safety', 'example', 'distinguishe', 'statically', 'typed', 'dynamically', 'type', 'variable', 'use', 'check', 'statically', 'use', 'check', 'dynamically', 'language', 'allow', 'write', 'code', 'type', 'safe', 'example', 'programmer', 'freely', 'cast', 'value', 'type', 'size', 'effectively', 'subvert', 'type', 'concept']"
4222,"For a list of languages with static type checking, see the category for statically-typed languages.","['list', 'language', 'static', 'type', 'checking', 'category', 'statically', 'typed', 'language']"
4223,"Dynamic type checking is the process of verifying the type safety of a program at runtime. Implementations of dynamically type-checked languages generally associate each runtime object with a type tag i.e., a reference to a type containing its type information. This runtime type information RTTI can also be used to implement dynamic dispatch, late binding, downcasting, reflection, and similar features.","['dynamic', 'type', 'checking', 'process', 'verify', 'type', 'safety', 'program', 'runtime', 'implementation', 'dynamically', 'type', 'check', 'language', 'generally', 'associate', 'runtime', 'object', 'type', 'tag', 'i.e.', 'reference', 'type', 'contain', 'type', 'information', 'runtime', 'type', 'information', 'rtti', 'implement', 'dynamic', 'dispatch', 'late', 'bind', 'downcaste', 'reflection', 'similar', 'feature']"
4224,"Most type-safe languages include some form of dynamic type checking, even if they also have a static type checker.citation needed 8 The reason for this is that many useful features or properties are difficult or impossible to verify statically. For example, suppose that a program defines two types, A and B, where B is a subtype of A. If the program tries to convert a value of type A to type B, which is known as downcasting, then the operation is legal only if the value being converted is actually a value of type B. Thus, a dynamic check is needed to verify that the operation is safe. This requirement is one of the criticisms of downcasting.","['type', 'safe', 'language', 'include', 'form', 'dynamic', 'type', 'checking', 'static', 'type', 'checker.citation', 'need', 'reason', 'useful', 'feature', 'property', 'difficult', 'impossible', 'verify', 'statically', 'example', 'suppose', 'program', 'define', 'type', 'subtype', 'program', 'try', 'convert', 'value', 'type', 'type', 'know', 'downcaste', 'operation', 'legal', 'value', 'convert', 'actually', 'value', 'type', 'dynamic', 'check', 'need', 'verify', 'operation', 'safe', 'requirement', 'criticism', 'downcaste']"
4225,"By definition, dynamic type checking may cause a program to fail at runtime. In some programming languages, it is possible to anticipate and recover from these failures. In others, type-checking errors are considered fatal.","['definition', 'dynamic', 'type', 'checking', 'cause', 'program', 'fail', 'runtime', 'programming', 'language', 'possible', 'anticipate', 'recover', 'failure', 'type', 'checking', 'error', 'consider', 'fatal']"
4226,"Programming languages that include dynamic type checking but not static type checking are often called ""dynamically-typed programming languages"". For a list of such languages, see the category for dynamically-typed programming languages.","['programming', 'language', 'include', 'dynamic', 'type', 'checking', 'static', 'type', 'checking', 'call', 'dynamically', 'type', 'programming', 'language', 'list', 'language', 'category', 'dynamically', 'type', 'programming', 'language']"
4227,"Some languages allow both static and dynamic typing. For example, Java and some other ostensibly statically-typed languages support downcasting types to their subtypes, querying an object to discover its dynamic type and other type operations that depend on runtime type information. Another example is C++ RTTI. More generally, most programming languages include mechanisms for dispatching over different 'kinds' of data, such as disjoint unions, runtime polymorphism, and variant types. Even when not interacting with type annotations or type checking, such mechanisms are materially similar to dynamic typing implementations. See programming language for more discussion of the interactions between static and dynamic typing.","['language', 'allow', 'static', 'dynamic', 'typing', 'example', 'java', 'ostensibly', 'statically', 'type', 'language', 'support', 'downcaste', 'type', 'subtype', 'query', 'object', 'discover', 'dynamic', 'type', 'type', 'operation', 'depend', 'runtime', 'type', 'information', 'example', 'c++', 'rtti', 'generally', 'programming', 'language', 'include', 'mechanism', 'dispatch', 'different', 'kind', 'datum', 'disjoint', 'union', 'runtime', 'polymorphism', 'variant', 'type', 'interact', 'type', 'annotation', 'type', 'checking', 'mechanism', 'materially', 'similar', 'dynamic', 'type', 'implementation', 'programming', 'language', 'discussion', 'interaction', 'static', 'dynamic', 'typing']"
4228,"Objects in object-oriented languages are usually accessed by a reference whose static target type or manifest type is equal to either the object's run-time type its latent type or a supertype thereof. This is conformant with the Liskov substitution principle, which states that all operations performed on an instance of a given type can also be performed on an instance of a subtype. This concept is also known as subsumption or subtype polymorphism. In some languages subtypes may also possess covariant or contravariant return types and argument types respectively.","['object', 'object', 'orient', 'language', 'usually', 'access', 'reference', 'static', 'target', 'type', 'manifest', 'type', 'equal', 'object', 'run', 'time', 'type', 'latent', 'type', 'supertype', 'thereof', 'conformant', 'liskov', 'substitution', 'principle', 'state', 'operation', 'perform', 'instance', 'give', 'type', 'perform', 'instance', 'subtype', 'concept', 'know', 'subsumption', 'subtype', 'polymorphism', 'language', 'subtype', 'possess', 'covariant', 'contravariant', 'return', 'type', 'argument', 'type', 'respectively']"
4229,"Certain languages, for example Clojure, Common Lisp, or Cython are dynamically type checked by default, but allow programs to opt into static type checking by providing optional annotations. One reason to use such hints would be to optimize the performance of critical sections of a program. This is formalized by gradual typing. The programming environment DrRacket, a pedagogic environment based on Lisp, and a precursor of the language Racket is also soft-typed.9","['certain', 'language', 'example', 'clojure', 'common', 'lisp', 'cython', 'dynamically', 'type', 'check', 'default', 'allow', 'program', 'opt', 'static', 'type', 'checking', 'provide', 'optional', 'annotation', 'reason', 'use', 'hint', 'optimize', 'performance', 'critical', 'section', 'program', 'formalize', 'gradual', 'typing', 'programming', 'environment', 'drracket', 'pedagogic', 'environment', 'base', 'lisp', 'precursor', 'language', 'racket', 'soft', 'typed']"
4230,"Conversely, as of version 4.0, the C# language provides a way to indicate that a variable should not be statically type checked. A variable whose type is dynamic will not be subject to static type checking. Instead, the program relies on runtime type information to determine how the variable may be used.10","['conversely', 'version', '4', 'language', 'provide', 'way', 'indicate', 'variable', 'statically', 'type', 'check', 'variable', 'type', 'dynamic', 'subject', 'static', 'type', 'checking', 'instead', 'program', 'rely', 'runtime', 'type', 'information', 'determine', 'variable', 'used']"
4231,"In Rust, the dyn std::any::Any type provides dynamic typing of 'static types.11","['rust', 'dyn', 'std::any::any', 'type', 'provide', 'dynamic', 'typing', 'static', 'types']"
4232,The choice between static and dynamic typing requires certain trade-offs.,"['choice', 'static', 'dynamic', 'typing', 'require', 'certain', 'trade', 'off']"
4233,"Static typing can find type errors reliably at compile time, which increases the reliability of the delivered program. However, programmers disagree over how commonly type errors occur, resulting in further disagreements over the proportion of those bugs that are coded that would be caught by appropriately representing the designed types in code.1213 Static typing advocateswho? believe programs are more reliable when they have been well type-checked, whereas dynamic-typing advocateswho? point to distributed code that has proven reliable and to small bug databases.citation needed The value of static typing increases as the strength of the type system is increased. Advocates of dependent typing,who? implemented in languages such as Dependent ML and Epigram, have suggested that almost all bugs can be considered type errors, if the types used in a program are properly declared by the programmer or correctly inferred by the compiler.14","['static', 'typing', 'find', 'type', 'error', 'reliably', 'compile', 'time', 'increase', 'reliability', 'deliver', 'program', 'programmer', 'disagree', 'commonly', 'type', 'error', 'occur', 'result', 'disagreement', 'proportion', 'bug', 'code', 'catch', 'appropriately', 'represent', 'design', 'type', 'code', 'static', 'typing', 'advocateswho', 'believe', 'program', 'reliable', 'type', 'check', 'dynamic', 'type', 'advocateswho', 'point', 'distribute', 'code', 'prove', 'reliable', 'small', 'bug', 'databases.citation', 'need', 'value', 'static', 'typing', 'increase', 'strength', 'type', 'system', 'increase', 'advocate', 'dependent', 'typing', 'implement', 'language', 'dependent', 'epigram', 'suggest', 'bug', 'consider', 'type', 'error', 'type', 'program', 'properly', 'declare', 'programmer', 'correctly', 'infer', 'compiler']"
4234,"Static typing usually results in compiled code that executes faster. When the compiler knows the exact data types that are in use which is necessary for static verification, either through declaration or inference it can produce optimized machine code. Some dynamically-typed languages such as Common Lisp allow optional type declarations for optimization for this reason.","['static', 'typing', 'usually', 'result', 'compile', 'code', 'execute', 'fast', 'compiler', 'know', 'exact', 'data', 'type', 'use', 'necessary', 'static', 'verification', 'declaration', 'inference', 'produce', 'optimize', 'machine', 'code', 'dynamically', 'type', 'language', 'common', 'lisp', 'allow', 'optional', 'type', 'declaration', 'optimization', 'reason']"
4235,"By contrast, dynamic typing may allow compilers to run faster and interpreters to dynamically load new code, because changes to source code in dynamically-typed languages may result in less checking to perform and less code to revisit.clarification needed This too may reduce the edit-compile-test-debug cycle.","['contrast', 'dynamic', 'typing', 'allow', 'compiler', 'run', 'fast', 'interpreter', 'dynamically', 'load', 'new', 'code', 'change', 'source', 'code', 'dynamically', 'type', 'language', 'result', 'checking', 'perform', 'code', 'revisit.clarification', 'need', 'reduce', 'edit', 'compile', 'test', 'debug', 'cycle']"
4236,"Statically-typed languages that lack type inference such as C and Java prior to version 10 require that programmers declare the types that a method or function must use. This can serve as added program documentation, that is active and dynamic, instead of static. This allows a compiler to prevent it from drifting out of synchrony, and from being ignored by programmers. However, a language can be statically typed without requiring type declarations examples include Haskell, Scala, OCaml, F#, and to a lesser extent C# and C++, so explicit type declaration is not a necessary requirement for static typing in all languages.","['statically', 'type', 'language', 'lack', 'type', 'inference', 'java', 'prior', 'version', 'require', 'programmer', 'declare', 'type', 'method', 'function', 'use', 'serve', 'add', 'program', 'documentation', 'active', 'dynamic', 'instead', 'static', 'allow', 'compiler', 'prevent', 'drift', 'synchrony', 'ignore', 'programmer', 'language', 'statically', 'type', 'require', 'type', 'declaration', 'example', 'include', 'haskell', 'scala', 'ocaml', 'less', 'extent', 'c++', 'explicit', 'type', 'declaration', 'necessary', 'requirement', 'static', 'typing', 'language']"
4237,"Dynamic typing allows constructs that some simple static type checking would reject as illegal. For example, eval functions, which execute arbitrary data as code, become possible. An eval function is possible with static typing, but requires advanced uses of algebraic data types. Further, dynamic typing better accommodates transitional code and prototyping, such as allowing a placeholder data structure mock object to be transparently used in place of a full data structure usually for the purposes of experimentation and testing.","['dynamic', 'typing', 'allow', 'construct', 'simple', 'static', 'type', 'checking', 'reject', 'illegal', 'example', 'eval', 'function', 'execute', 'arbitrary', 'datum', 'code', 'possible', 'eval', 'function', 'possible', 'static', 'typing', 'require', 'advanced', 'use', 'algebraic', 'datum', 'type', 'dynamic', 'typing', 'well', 'accommodate', 'transitional', 'code', 'prototyping', 'allow', 'placeholder', 'datum', 'structure', 'mock', 'object', 'transparently', 'place', 'data', 'structure', 'usually', 'purpose', 'experimentation', 'testing']"
4238,Dynamic typing typically allows duck typing which enables easier code reuse. Manyspecify languages with static typing also feature duck typing or other mechanisms like generic programming that also enable easier code reuse.,"['dynamic', 'typing', 'typically', 'allow', 'duck', 'typing', 'enable', 'easy', 'code', 'reuse', 'manyspecify', 'language', 'static', 'typing', 'feature', 'duck', 'typing', 'mechanism', 'like', 'generic', 'programming', 'enable', 'easy', 'code', 'reuse']"
4239,"Dynamic typing typically makes metaprogramming easier to use. For example, C++ templates are typically more cumbersome to write than the equivalent Ruby or Python code since C++ has stronger rules regarding type definitions for both functions and variables. This forces a developer to write more boilerplate code for a template than a Python developer would need to. More advanced run-time constructs such as metaclasses and introspection are often harder to use in statically-typed languages. In some languages, such features may also be used e.g. to generate new types and behaviors on the fly, based on run-time data. Such advanced constructs are often provided by dynamic programming languages; many of these are dynamically typed, although dynamic typing need not be related to dynamic programming languages.","['dynamic', 'typing', 'typically', 'make', 'metaprogramme', 'easy', 'use', 'example', 'c++', 'template', 'typically', 'cumbersome', 'write', 'equivalent', 'ruby', 'python', 'code', 'c++', 'strong', 'rule', 'type', 'definition', 'function', 'variable', 'force', 'developer', 'write', 'boilerplate', 'code', 'template', 'python', 'developer', 'need', 'advanced', 'run', 'time', 'construct', 'metaclasse', 'introspection', 'hard', 'use', 'statically', 'typed', 'language', 'language', 'feature', 'e.g.', 'generate', 'new', 'type', 'behavior', 'fly', 'base', 'run', 'time', 'datum', 'advanced', 'construct', 'provide', 'dynamic', 'programming', 'language', 'dynamically', 'type', 'dynamic', 'typing', 'need', 'relate', 'dynamic', 'programming', 'language']"
4240,"Languages are often colloquially referred to as strongly typed or weakly typed. In fact, there is no universally accepted definition of what these terms mean. In general, there are more precise terms to represent the differences between type systems that lead people to call them ""strong"" or ""weak"".","['language', 'colloquially', 'refer', 'strongly', 'type', 'weakly', 'type', 'fact', 'universally', 'accept', 'definition', 'term', 'mean', 'general', 'precise', 'term', 'represent', 'difference', 'type', 'system', 'lead', 'people', 'strong', 'weak']"
4241,A third way of categorizing the type system of a programming language is by the safety of typed operations and conversions. Computer scientists use the term type-safe language to describe languages that do not allow operations or conversions that violate the rules of the type system.,"['way', 'categorize', 'type', 'system', 'programming', 'language', 'safety', 'typed', 'operation', 'conversion', 'computer', 'scientist', 'use', 'term', 'type', 'safe', 'language', 'describe', 'language', 'allow', 'operation', 'conversion', 'violate', 'rule', 'type', 'system']"
4242,"Computer scientists use the term memory-safe language or just safe language to describe languages that do not allow programs to access memory that has not been assigned for their use. For example, a memory-safe language will check array bounds, or else statically guarantee i.e., at compile time before execution that array accesses out of the array boundaries will cause compile-time and perhaps runtime errors.","['computer', 'scientist', 'use', 'term', 'memory', 'safe', 'language', 'safe', 'language', 'describe', 'language', 'allow', 'program', 'access', 'memory', 'assign', 'use', 'example', 'memory', 'safe', 'language', 'check', 'array', 'bound', 'statically', 'guarantee', 'i.e.', 'compile', 'time', 'execution', 'array', 'access', 'array', 'boundary', 'cause', 'compile', 'time', 'runtime', 'error']"
4243,Consider the following program of a language that is both type-safe and memory-safe:15,"['consider', 'follow', 'program', 'language', 'type', 'safe', 'memory', 'safe']"
4244,"In this example, the variable z will have the value 42. Although this may not be what the programmer anticipated, it is a well-defined result. If y were a different string, one that could not be converted to a number e.g. ""Hello World"", the result would be well-defined as well. Note that a program can be type-safe or memory-safe and still crash on an invalid operation. This is for languages where the type system is not sufficiently advanced to precisely specify the validity of operations on all possible operands. But if a program encounters an operation that is not type-safe, terminating the program is often the only option.","['example', 'variable', 'value', 'programmer', 'anticipate', 'define', 'result', 'different', 'string', 'convert', 'number', 'e.g.', 'hello', 'world', 'result', 'define', 'note', 'program', 'type', 'safe', 'memory', 'safe', 'crash', 'invalid', 'operation', 'language', 'type', 'system', 'sufficiently', 'advanced', 'precisely', 'specify', 'validity', 'operation', 'possible', 'operand', 'program', 'encounter', 'operation', 'type', 'safe', 'terminate', 'program', 'option']"
4245,Now consider a similar example in C:,"['consider', 'similar', 'example']"
4246,"In this example z will point to a memory address five characters beyond y, equivalent to three characters after the terminating zero character of the string pointed to by y. This is memory that the program is not expected to access. In C terms this is simply undefined behaviour and the program may do anything; with a simple compiler it might actually print whatever byte is stored after the string ""37"". As this example shows, C is not memory-safe. As arbitrary data was assumed to be a character, it is also not a type-safe language.","['example', 'point', 'memory', 'address', 'character', 'equivalent', 'character', 'terminating', 'zero', 'character', 'string', 'point', 'memory', 'program', 'expect', 'access', 'term', 'simply', 'undefined', 'behaviour', 'program', 'simple', 'compiler', 'actually', 'print', 'byte', 'store', 'string', 'example', 'show', 'memory', 'safe', 'arbitrary', 'datum', 'assume', 'character', 'type', 'safe', 'language']"
4247,"In general, type-safety and memory-safety go hand in hand. For example, a language that supports pointer arithmetic and number-to-pointer conversions like C is neither memory-safe nor type-safe, because it allows arbitrary memory to be accessed as if it were valid memory of any type.","['general', 'type', 'safety', 'memory', 'safety', 'hand', 'hand', 'example', 'language', 'support', 'pointer', 'arithmetic', 'number', 'pointer', 'conversion', 'like', 'memory', 'safe', 'type', 'safe', 'allow', 'arbitrary', 'memory', 'access', 'valid', 'memory', 'type']"
4248,"For more information, see memory safety.","['information', 'memory', 'safety']"
4249,Some languages allow different levels of checking to apply to different regions of code. Examples include:,"['language', 'allow', 'different', 'level', 'check', 'apply', 'different', 'region', 'code', 'example', 'include']"
4250,Additional tools such as lint and IBM Rational Purify can also be used to achieve a higher level of strictness.,"['additional', 'tool', 'lint', 'ibm', 'rational', 'purify', 'achieve', 'high', 'level', 'strictness']"
4251,"It has been proposed, chiefly by Gilad Bracha, that the choice of type system be made independent of choice of language; that a type system should be a module that can be plugged into a language as needed. He believes this is advantageous, because what he calls mandatory type systems make languages less expressive and code more fragile.20 The requirement that the type system does not affect the semantics of the language is difficult to fulfill.","['propose', 'chiefly', 'gilad', 'bracha', 'choice', 'type', 'system', 'independent', 'choice', 'language', 'type', 'system', 'module', 'plug', 'language', 'need', 'believe', 'advantageous', 'call', 'mandatory', 'type', 'system', 'language', 'expressive', 'code', 'fragile', 'requirement', 'type', 'system', 'affect', 'semantic', 'language', 'difficult', 'fulfill']"
4252,"Optional typing is related to, but distinct from, gradual typing. While both typing disciplines can be used to perform static analysis of code static typing, optional type systems do not enforce type safety at runtime dynamic typing. 2021","['optional', 'typing', 'relate', 'distinct', 'gradual', 'typing', 'type', 'discipline', 'perform', 'static', 'analysis', 'code', 'static', 'typing', 'optional', 'type', 'system', 'enforce', 'type', 'safety', 'runtime', 'dynamic', 'typing', '2021']"
4253,"The term polymorphism refers to the ability of code especially, functions or classes to act on values of multiple types, or to the ability of different instances of the same data structure to contain elements of different types. Type systems that allow polymorphism generally do so in order to improve the potential for code re-use: in a language with polymorphism, programmers need only implement a data structure such as a list or an associative array once, rather than once for each type of element with which they plan to use it. For this reason computer scientists sometimes call the use of certain forms of polymorphism generic programming. The type-theoretic foundations of polymorphism are closely related to those of abstraction, modularity and in some cases subtyping.","['term', 'polymorphism', 'refer', 'ability', 'code', 'especially', 'function', 'class', 'act', 'value', 'multiple', 'type', 'ability', 'different', 'instance', 'datum', 'structure', 'contain', 'element', 'different', 'type', 'type', 'system', 'allow', 'polymorphism', 'generally', 'order', 'improve', 'potential', 'code', 'use', 'language', 'polymorphism', 'programmer', 'need', 'implement', 'data', 'structure', 'list', 'associative', 'array', 'type', 'element', 'plan', 'use', 'reason', 'computer', 'scientist', 'use', 'certain', 'form', 'polymorphism', 'generic', 'programming', 'type', 'theoretic', 'foundation', 'polymorphism', 'closely', 'relate', 'abstraction', 'modularity', 'case', 'subtype']"
4254,"Many type systems have been created that are specialized for use in certain environments with certain types of data, or for out-of-band static program analysis. Frequently, these are based on ideas from formal type theory and are only available as part of prototype research systems.","['type', 'system', 'create', 'specialize', 'use', 'certain', 'environment', 'certain', 'type', 'datum', 'band', 'static', 'program', 'analysis', 'frequently', 'base', 'idea', 'formal', 'type', 'theory', 'available', 'prototype', 'research', 'system']"
4255,"The following table gives an overview over type theoretic concepts that are used in specialized type systems. The names M, N, O range over terms and the names σ , τ \displaystyle \sigma ,\tau range over types. The following notation will be used:","['following', 'table', 'give', 'overview', 'type', 'theoretic', 'concept', 'specialized', 'type', 'system', 'name', 'range', 'term', 'name', 'range', 'type', 'follow', 'notation']"
4256,"Dependent types are based on the idea of using scalars or values to more precisely describe the type of some other value. For example, m a t r i x 3 , 3 \displaystyle \mathrm matrix 3,3 might be the type of a 3 × 3 \displaystyle 3\times 3 matrix. We can then define typing rules such as the following rule for matrix multiplication:","['dependent', 'type', 'base', 'idea', 'scalar', 'value', 'precisely', 'describe', 'type', 'value', 'example', 'matrix', '3', 'type', 'matrix', 'define', 'type', 'rule', 'follow', 'rule', 'matrix', 'multiplication']"
4257,"where k, m, n are arbitrary positive integer values. A variant of ML called Dependent ML has been created based on this type system, but because type checking for conventional dependent types is undecidable, not all programs using them can be type-checked without some kind of limits. Dependent ML limits the sort of equality it can decide to Presburger arithmetic.","['arbitrary', 'positive', 'integer', 'value', 'variant', 'call', 'dependent', 'create', 'base', 'type', 'system', 'type', 'checking', 'conventional', 'dependent', 'type', 'undecidable', 'program', 'type', 'check', 'kind', 'limit', 'dependent', 'limit', 'sort', 'equality', 'decide', 'presburger', 'arithmetic']"
4258,"Other languages such as Epigram make the value of all expressions in the language decidable so that type checking can be decidable. However, in general proof of decidability is undecidable, so many programs require hand-written annotations that may be very non-trivial. As this impedes the development process, many language implementations provide an easy way out in the form of an option to disable this condition. This, however, comes at the cost of making the type-checker run in an infinite loop when fed programs that do not type-check, causing the compilation to fail.","['language', 'epigram', 'value', 'expression', 'language', 'decidable', 'type', 'checking', 'decidable', 'general', 'proof', 'decidability', 'undecidable', 'program', 'require', 'hand', 'write', 'annotation', 'non', 'trivial', 'impede', 'development', 'process', 'language', 'implementation', 'provide', 'easy', 'way', 'form', 'option', 'disable', 'condition', 'come', 'cost', 'make', 'type', 'checker', 'run', 'infinite', 'loop', 'fed', 'program', 'type', 'check', 'cause', 'compilation', 'fail']"
4259,"Linear types, based on the theory of linear logic, and closely related to uniqueness types, are types assigned to values having the property that they have one and only one reference to them at all times. These are valuable for describing large immutable values such as files, strings, and so on, because any operation that simultaneously destroys a linear object and creates a similar object such as 'str= str + ""a""' can be optimized ""under the hood"" into an in-place mutation. Normally this is not possible, as such mutations could cause side effects on parts of the program holding other references to the object, violating referential transparency. They are also used in the prototype operating system Singularity for interprocess communication, statically ensuring that processes cannot share objects in shared memory in order to prevent race conditions. The Clean language a Haskell-like language uses this type system in order to gain a lot of speed compared to performing a deep copy while remaining safe.","['linear', 'type', 'base', 'theory', 'linear', 'logic', 'closely', 'relate', 'uniqueness', 'type', 'type', 'assign', 'value', 'have', 'property', 'reference', 'time', 'valuable', 'describe', 'large', 'immutable', 'value', 'file', 'string', 'operation', 'simultaneously', 'destroy', 'linear', 'object', 'create', 'similar', 'object', 'str=', 'str', 'optimize', 'hood', 'place', 'mutation', 'normally', 'possible', 'mutation', 'cause', 'effect', 'part', 'program', 'hold', 'reference', 'object', 'violate', 'referential', 'transparency', 'prototype', 'operating', 'system', 'singularity', 'interprocess', 'communication', 'statically', 'ensure', 'process', 'share', 'object', 'share', 'memory', 'order', 'prevent', 'race', 'condition', 'clean', 'language', 'haskell', 'like', 'language', 'use', 'type', 'system', 'order', 'gain', 'lot', 'speed', 'compare', 'perform', 'deep', 'copy', 'remain', 'safe']"
4260,"Intersection types are types describing values that belong to both of two other given types with overlapping value sets. For example, in most implementations of C the signed char has range -128 to 127 and the unsigned char has range 0 to 255, so the intersection type of these two types would have range 0 to 127. Such an intersection type could be safely passed into functions expecting either signed or unsigned chars, because it is compatible with both types.","['intersection', 'type', 'type', 'describe', 'value', 'belong', 'give', 'type', 'overlap', 'value', 'set', 'example', 'implementation', 'sign', 'char', 'range', '-128', '127', 'unsigned', 'char', 'range', '255', 'intersection', 'type', 'type', 'range', '127', 'intersection', 'type', 'safely', 'pass', 'function', 'expect', 'sign', 'unsigned', 'char', 'compatible', 'type']"
4261,"Intersection types are useful for describing overloaded function types: for example, if ""int → int"" is the type of functions taking an integer argument and returning an integer, and ""float → float"" is the type of functions taking a float argument and returning a float, then the intersection of these two types can be used to describe functions that do one or the other, based on what type of input they are given. Such a function could be passed into another function expecting an ""int → int"" function safely; it simply would not use the ""float → float"" functionality.","['intersection', 'type', 'useful', 'describe', 'overloaded', 'function', 'type', 'example', 'int', 'int', 'type', 'function', 'take', 'integer', 'argument', 'return', 'integer', 'float', 'float', 'type', 'function', 'take', 'float', 'argument', 'return', 'float', 'intersection', 'type', 'describe', 'function', 'base', 'type', 'input', 'give', 'function', 'pass', 'function', 'expect', 'int', 'int', 'function', 'safely', 'simply', 'use', 'float', 'float', 'functionality']"
4262,"In a subclassing hierarchy, the intersection of a type and an ancestor type such as its parent is the most derived type. The intersection of sibling types is empty.","['subclasse', 'hierarchy', 'intersection', 'type', 'ancestor', 'type', 'parent', 'derive', 'type', 'intersection', 'sible', 'type']"
4263,The Forsythe language includes a general implementation of intersection types. A restricted form is refinement types.,"['forsythe', 'language', 'include', 'general', 'implementation', 'intersection', 'type', 'restricted', 'form', 'refinement', 'type']"
4264,"Union types are types describing values that belong to either of two types. For example, in C, the signed char has a -128 to 127 range, and the unsigned char has a 0 to 255 range, so the union of these two types would have an overall ""virtual"" range of -128 to 255 that may be used partially depending on which union member is accessed. Any function handling this union type would have to deal with integers in this complete range. More generally, the only valid operations on a union type are operations that are valid on both types being unioned. C's ""union"" concept is similar to union types, but is not typesafe, as it permits operations that are valid on either type, rather than both. Union types are important in program analysis, where they are used to represent symbolic values whose exact nature e.g., value or type is not known.","['union', 'type', 'type', 'describe', 'value', 'belong', 'type', 'example', 'sign', 'char', '-128', '127', 'range', 'unsigned', 'char', '255', 'range', 'union', 'type', 'overall', 'virtual', 'range', '-128', '255', 'partially', 'depend', 'union', 'member', 'access', 'function', 'handle', 'union', 'type', 'deal', 'integer', 'complete', 'range', 'generally', 'valid', 'operation', 'union', 'type', 'operation', 'valid', 'type', 'unione', 'union', 'concept', 'similar', 'union', 'type', 'typesafe', 'permit', 'operation', 'valid', 'type', 'union', 'type', 'important', 'program', 'analysis', 'represent', 'symbolic', 'value', 'exact', 'nature', 'e.g.', 'value', 'type', 'know']"
4265,"In a subclassing hierarchy, the union of a type and an ancestor type such as its parent is the ancestor type. The union of sibling types is a subtype of their common ancestor that is, all operations permitted on their common ancestor are permitted on the union type, but they may also have other valid operations in common.","['subclasse', 'hierarchy', 'union', 'type', 'ancestor', 'type', 'parent', 'ancestor', 'type', 'union', 'sible', 'type', 'subtype', 'common', 'ancestor', 'operation', 'permit', 'common', 'ancestor', 'permit', 'union', 'type', 'valid', 'operation', 'common']"
4266,"Existential types are frequently used in connection with record types to represent modules and abstract data types, due to their ability to separate implementation from interface. For example, the type ""T = ∃X a: X; f: X → int; "" describes a module interface that has a data member named a of type X and a function named f that takes a parameter of the same type X and returns an integer. This could be implemented in different ways; for example:","['existential', 'type', 'frequently', 'connection', 'record', 'type', 'represent', 'module', 'abstract', 'datum', 'type', 'ability', 'separate', 'implementation', 'interface', 'example', 'type', 'int', 'describe', 'module', 'interface', 'data', 'member', 'name', 'type', 'function', 'name', 'take', 'parameter', 'type', 'return', 'integer', 'implement', 'different', 'way', 'example']"
4267,"These types are both subtypes of the more general existential type T and correspond to concrete implementation types, so any value of one of these types is a value of type T. Given a value ""t"" of type ""T"", we know that ""t.ft.a"" is well-typed, regardless of what the abstract type X is. This gives flexibility for choosing types suited to a particular implementation, while clients that use only values of the interface type—the existential type—are isolated from these choices.","['type', 'subtype', 'general', 'existential', 'type', 'correspond', 'concrete', 'implementation', 'type', 'value', 'type', 'value', 'type', 'give', 'value', 'type', 'know', 't.ft.a', 'type', 'regardless', 'abstract', 'type', 'give', 'flexibility', 'choose', 'type', 'suit', 'particular', 'implementation', 'client', 'use', 'value', 'interface', 'type', 'existential', 'type', 'isolate', 'choice']"
4268,"In general it's impossible for the typechecker to infer which existential type a given module belongs to. In the above example intT a: int; f: int → int; could also have the type ∃X a: X; f: int → int; . The simplest solution is to annotate every module with its intended type, e.g.:","['general', 'impossible', 'typechecker', 'infer', 'existential', 'type', 'give', 'module', 'belong', 'example', 'intt', 'int', 'int', 'int', 'type', 'int', 'int', 'simple', 'solution', 'annotate', 'module', 'intend', 'type', 'e.g.']"
4269,"Although abstract data types and modules had been implemented in programming languages for quite some time, it wasn't until 1988 that John C. Mitchell and Gordon Plotkin established the formal theory under the slogan: ""Abstract data types have existential type"".23 The theory is a second-order typed lambda calculus similar to System F, but with existential instead of universal quantification.","['abstract', 'datum', 'type', 'module', 'implement', 'programming', 'language', 'time', '1988', 'john', 'mitchell', 'gordon', 'plotkin', 'establish', 'formal', 'theory', 'slogan', 'abstract', 'data', 'type', 'existential', 'type', 'theory', 'second', 'order', 'type', 'lambda', 'calculus', 'similar', 'system', 'existential', 'instead', 'universal', 'quantification']"
4270,"In a type system with Gradual typing, variables may be assigned a type either at compile-time which is static typing. or at run-time which is dynamic typing.24 This allows software developers to choose either type paradigm as appropriate, from within a single language.24 Gradual typing uses a special type named dynamic to represent statically-unknown types; gradual typing replaces the notion of type equality with a new relation called consistency that relates the dynamic type to every other type. The consistency relation is symmetric but not transitive.25","['type', 'system', 'gradual', 'typing', 'variable', 'assign', 'type', 'compile', 'time', 'static', 'typing', 'run', 'time', 'dynamic', 'typing', 'allow', 'software', 'developer', 'choose', 'type', 'paradigm', 'appropriate', 'single', 'language', 'gradual', 'typing', 'use', 'special', 'type', 'name', 'dynamic', 'represent', 'statically', 'unknown', 'type', 'gradual', 'typing', 'replace', 'notion', 'type', 'equality', 'new', 'relation', 'call', 'consistency', 'relate', 'dynamic', 'type', 'type', 'consistency', 'relation', 'symmetric', 'transitive']"
4271,"Many static type systems, such as those of C and Java, require type declarations: the programmer must explicitly associate each variable with a specific type. Others, such as Haskell's, perform type inference: the compiler draws conclusions about the types of variables based on how programmers use those variables. For example, given a function fx, y that adds x and y together, the compiler can infer that x and y must be numbers—since addition is only defined for numbers. Thus, any call to f elsewhere in the program that specifies a non-numeric type such as a string or list as an argument would signal an error.","['static', 'type', 'system', 'java', 'require', 'type', 'declaration', 'programmer', 'explicitly', 'associate', 'variable', 'specific', 'type', 'haskell', 'perform', 'type', 'inference', 'compiler', 'draw', 'conclusion', 'type', 'variable', 'base', 'programmer', 'use', 'variable', 'example', 'give', 'function', 'add', 'compiler', 'infer', 'number', 'addition', 'define', 'number', 'program', 'specify', 'non', 'numeric', 'type', 'string', 'list', 'argument', 'signal', 'error']"
4272,"Numerical and string constants and expressions in code can and often do imply type in a particular context. For example, an expression 3.14 might imply a type of floating-point, while 1, 2, 3 might imply a list of integers—typically an array.","['numerical', 'string', 'constant', 'expression', 'code', 'imply', 'type', 'particular', 'context', 'example', 'expression', '3', 'imply', 'type', 'float', 'point', 'imply', 'list', 'integer', 'typically', 'array']"
4273,"Type inference is in general possible, if it is computable in the type system in question. Moreover, even if inference is not computable in general for a given type system, inference is often possible for a large subset of real-world programs. Haskell's type system, a version of Hindley–Milner, is a restriction of System Fω to so-called rank-1 polymorphic types, in which type inference is computable. Most Haskell compilers allow arbitrary-rank polymorphism as an extension, but this makes type inference not computable. Type checking is decidable, however, and rank-1 programs still have type inference; higher rank polymorphic programs are rejected unless given explicit type annotations.","['type', 'inference', 'general', 'possible', 'computable', 'type', 'system', 'question', 'inference', 'computable', 'general', 'give', 'type', 'system', 'inference', 'possible', 'large', 'subset', 'real', 'world', 'program', 'haskell', 'type', 'system', 'version', 'hindley', 'milner', 'restriction', 'system', 'call', 'rank-1', 'polymorphic', 'type', 'type', 'inference', 'computable', 'haskell', 'compiler', 'allow', 'arbitrary', 'rank', 'polymorphism', 'extension', 'make', 'type', 'inference', 'computable', 'type', 'checking', 'decidable', 'rank-1', 'program', 'type', 'inference', 'high', 'rank', 'polymorphic', 'program', 'reject', 'give', 'explicit', 'type', 'annotation']"
4274,"A type system that assigns types to terms in type environments using typing rules is naturally associated with the decision problems of type checking, typability, and type inhabitation.26","['type', 'system', 'assign', 'type', 'term', 'type', 'environment', 'typing', 'rule', 'naturally', 'associate', 'decision', 'problem', 'type', 'checking', 'typability', 'type', 'inhabitation']"
4275,"Some languages like C# or Scala have a unified type system.27 This means that all C# types including primitive types inherit from a single root object. Every type in C# inherits from the Object class. Some languages, like Java and Raku, have a root type but also have primitive types that are not objects.28 Java provides wrapper object types that exist together with the primitive types so developers can use either the wrapper object types or the simpler non-object primitive types. Raku automatically converts primitive types to objects when their methods are accessed.29","['language', 'like', 'scala', 'unified', 'type', 'system', 'mean', 'type', 'include', 'primitive', 'type', 'inherit', 'single', 'root', 'object', 'type', 'inherit', 'object', 'class', 'language', 'like', 'java', 'raku', 'root', 'type', 'primitive', 'type', 'objects', 'java', 'provide', 'wrapper', 'object', 'type', 'exist', 'primitive', 'type', 'developer', 'use', 'wrapper', 'object', 'type', 'simple', 'non', 'object', 'primitive', 'type', 'raku', 'automatically', 'convert', 'primitive', 'type', 'object', 'method', 'accessed']"
4276,"A type checker for a statically-typed language must verify that the type of any expression is consistent with the type expected by the context in which that expression appears. For example, in an assignment statement of the form x := e, the inferred type of the expression e must be consistent with the declared or inferred type of the variable x. This notion of consistency, called compatibility, is specific to each programming language.","['type', 'checker', 'statically', 'type', 'language', 'verify', 'type', 'expression', 'consistent', 'type', 'expect', 'context', 'expression', 'appear', 'example', 'assignment', 'statement', 'form', 'infer', 'type', 'expression', 'consistent', 'declared', 'infer', 'type', 'variable', 'notion', 'consistency', 'call', 'compatibility', 'specific', 'programming', 'language']"
4277,"If the type of e and the type of x are the same, and assignment is allowed for that type, then this is a valid expression. Thus, in the simplest type systems, the question of whether two types are compatible reduces to that of whether they are equal or equivalent. Different languages, however, have different criteria for when two type expressions are understood to denote the same type. These different equational theories of types vary widely, two extreme cases being structural type systems, in which any two types that describe values with the same structure are equivalent, and nominative type systems, in which no two syntactically distinct type expressions denote the same type i.e., types must have the same ""name"" in order to be equal.","['type', 'type', 'assignment', 'allow', 'type', 'valid', 'expression', 'simple', 'type', 'system', 'question', 'type', 'compatible', 'reduce', 'equal', 'equivalent', 'different', 'language', 'different', 'criterion', 'type', 'expression', 'understand', 'denote', 'type', 'different', 'equational', 'theory', 'type', 'vary', 'widely', 'extreme', 'case', 'structural', 'type', 'system', 'type', 'describe', 'value', 'structure', 'equivalent', 'nominative', 'type', 'system', 'syntactically', 'distinct', 'type', 'expression', 'denote', 'type', 'i.e.', 'type', 'order', 'equal']"
4278,"In languages with subtyping, the compatibility relation is more complex: If B is a subtype of A, then a value of type B can be used in a context where one of type A is expected covariant, even if the reverse is not true. Like equivalence, the subtype relation is defined differently for each programming language, with many variations possible. The presence of parametric or ad hoc polymorphism in a language may also have implications for type compatibility.","['language', 'subtype', 'compatibility', 'relation', 'complex', 'subtype', 'value', 'type', 'context', 'type', 'expect', 'covariant', 'reverse', 'true', 'like', 'equivalence', 'subtype', 'relation', 'define', 'differently', 'programming', 'language', 'variation', 'possible', 'presence', 'parametric', 'hoc', 'polymorphism', 'language', 'implication', 'type', 'compatibility']"
4279,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4280,"In computer programming, one of the many ways that programming languages are colloquially classified is whether the language's type system makes it strongly typed or weakly typed loosely typed. However, there is no precise technical definition of what the terms mean and different authors disagree about the implied meaning of the terms and the relative rankings of the ""strength"" of the type systems of mainstream programming languages. For this reason, writers who wish to write unambiguously about type systems often eschew the terms ""strong typing"" and ""weak typing"" in favor of specific expressions such as ""type safety"".","['computer', 'programming', 'way', 'programming', 'language', 'colloquially', 'classify', 'language', 'type', 'system', 'make', 'strongly', 'type', 'weakly', 'type', 'loosely', 'typed', 'precise', 'technical', 'definition', 'term', 'mean', 'different', 'author', 'disagree', 'imply', 'meaning', 'term', 'relative', 'ranking', 'strength', 'type', 'system', 'mainstream', 'programming', 'language', 'reason', 'writer', 'wish', 'write', 'unambiguously', 'type', 'system', 'eschew', 'term', 'strong', 'typing', 'weak', 'typing', 'favor', 'specific', 'expression', 'type', 'safety']"
4281,"Generally, a strongly typed language has stricter typing rules at compile time, which implies that errors and exceptions are more likely to happen during compilation. Most of these rules affect variable assignment, function return values, procedure arguments and function calling. Dynamically typed languages where type checking happens at run time can also be strongly typed. Note that in dynamically typed languages, values, rather than variables, have types.","['generally', 'strongly', 'type', 'language', 'strict', 'typing', 'rule', 'compile', 'time', 'imply', 'error', 'exception', 'likely', 'happen', 'compilation', 'rule', 'affect', 'variable', 'assignment', 'function', 'return', 'value', 'procedure', 'argument', 'function', 'call', 'dynamically', 'type', 'language', 'type', 'checking', 'happen', 'run', 'time', 'strongly', 'type', 'note', 'dynamically', 'type', 'language', 'value', 'variable', 'type']"
4282,"A weakly typed language has looser typing rules and may produce unpredictable or even erroneous results or may perform implicit type conversion at runtime.1 Advocates of dynamically typed generally ""weakly typed"" languages find such concerns to be overblown and believe that static typing actually introduces an exponentially larger set of problems and inefficiencies.2 A different but related concept is latent typing.","['weakly', 'type', 'language', 'loose', 'typing', 'rule', 'produce', 'unpredictable', 'erroneous', 'result', 'perform', 'implicit', 'type', 'conversion', 'runtime', 'advocate', 'dynamically', 'type', 'generally', 'weakly', 'type', 'language', 'find', 'concern', 'overblown', 'believe', 'static', 'typing', 'actually', 'introduce', 'exponentially', 'large', 'set', 'problem', 'inefficiencies', 'different', 'related', 'concept', 'latent', 'typing']"
4283,"In 1974, Liskov and S. Zilles defined a strongly-typed language as one in which ""whenever an object is passed from a calling function to a called function, its type must be compatible with the type declared in the called function.""3 In 1977, K. Jackson wrote, ""In a strongly typed language each data area will have a distinct type and each process will state its communication requirements in terms of these types.""4","['1974', 'liskov', 'zilles', 'define', 'strongly', 'type', 'language', 'object', 'pass', 'call', 'function', 'call', 'function', 'type', 'compatible', 'type', 'declare', 'call', 'function', '1977', 'jackson', 'write', 'strongly', 'type', 'language', 'datum', 'area', 'distinct', 'type', 'process', 'state', 'communication', 'requirement', 'term', 'type']"
4284,"A number of different language design decisions have been referred to as evidence of ""strong"" or ""weak"" typing. Many of these are more accurately understood as the presence or absence of type safety, memory safety, static type-checking, or dynamic type-checking.","['number', 'different', 'language', 'design', 'decision', 'refer', 'evidence', 'strong', 'weak', 'typing', 'accurately', 'understand', 'presence', 'absence', 'type', 'safety', 'memory', 'safety', 'static', 'type', 'checking', 'dynamic', 'type', 'checking']"
4285,"""Strong typing"" generally refers to use of programming language types in order to both capture invariants of the code, and ensure its correctness, and definitely exclude certain classes of programming errors. Thus there are many ""strong typing"" disciplines used to achieve these goals.","['strong', 'typing', 'generally', 'refer', 'use', 'programming', 'language', 'type', 'order', 'capture', 'invariant', 'code', 'ensure', 'correctness', 'definitely', 'exclude', 'certain', 'class', 'programming', 'error', 'strong', 'typing', 'discipline', 'achieve', 'goal']"
4286,"Some programming languages make it easy to use a value of one type as if it were a value of another type. This is sometimes described as ""weak typing"".","['programming', 'language', 'easy', 'use', 'value', 'type', 'value', 'type', 'describe', 'weak', 'typing']"
4287,"For example, Aahz Maruch observes that ""Coercion occurs when you have a statically typed language and you use the syntactic features of the language to force the usage of one type as if it were a different type consider the common use of void* in C. Coercion is usually a symptom of weak typing. Conversion, on the other hand, creates a brand-new object of the appropriate type.""5","['example', 'aahz', 'maruch', 'observe', 'coercion', 'occur', 'statically', 'type', 'language', 'use', 'syntactic', 'feature', 'language', 'force', 'usage', 'type', 'different', 'type', 'consider', 'common', 'use', 'void', 'coercion', 'usually', 'symptom', 'weak', 'typing', 'conversion', 'hand', 'create', 'brand', 'new', 'object', 'appropriate', 'type']"
4288,"As another example, GCC describes this as type-punning and warns that it will break strict aliasing. Thiago Macieira discusses several problems that can arise when type-punning causes the compiler to make inappropriate optimizations.6","['example', 'gcc', 'describe', 'type', 'punning', 'warn', 'break', 'strict', 'aliasing', 'thiago', 'macieira', 'discuss', 'problem', 'arise', 'type', 'pun', 'cause', 'compiler', 'inappropriate', 'optimizations']"
4289,"There are many examples of languages that allow implicit type conversions, but in a type-safe manner. For example, both C++ and C# allow programs to define operators to convert a value from one type to another with well-defined semantics. When a C++ compiler encounters such a conversion, it treats the operation just like a function call. In contrast, converting a value to the C type .mw-parser-output .monospacedfont-family:monospace,monospacevoid* is an unsafe operation that is invisible to the compiler.","['example', 'language', 'allow', 'implicit', 'type', 'conversion', 'type', 'safe', 'manner', 'example', 'c++', 'allow', 'program', 'define', 'operator', 'convert', 'value', 'type', 'define', 'semantic', 'c++', 'compiler', 'encounter', 'conversion', 'treat', 'operation', 'like', 'function', 'contrast', 'convert', 'value', 'type', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacevoid', 'unsafe', 'operation', 'invisible', 'compiler']"
4290,"Some programming languages expose pointers as if they were numeric values, and allow users to perform arithmetic on them. These languages are sometimes referred to as ""weakly typed"", since pointer arithmetic can be used to bypass the language's type system.","['programming', 'language', 'expose', 'pointer', 'numeric', 'value', 'allow', 'user', 'perform', 'arithmetic', 'language', 'refer', 'weakly', 'typed', 'pointer', 'arithmetic', 'bypass', 'language', 'type', 'system']"
4291,"Some programming languages support untagged unions, which allow a value of one type to be viewed as if it were a value of another type.","['programming', 'language', 'support', 'untagged', 'union', 'allow', 'value', 'type', 'view', 'value', 'type']"
4292,"In Luca Cardelli's article Typeful Programming,7 a ""strong type system"" is described as one in which there is no possibility of an unchecked runtime type error. In other writing, the absence of unchecked run-time errors is referred to as safety or type safety; Tony Hoare's early papers call this property security.8","['luca', 'cardelli', 'article', 'typeful', 'programming', 'strong', 'type', 'system', 'describe', 'possibility', 'unchecked', 'runtime', 'type', 'error', 'writing', 'absence', 'unchecked', 'run', 'time', 'error', 'refer', 'safety', 'type', 'safety', 'tony', 'hoare', 'early', 'paper', 'property', 'security']"
4293,"Some programming languages do not have static type-checking. In many such languages, it is easy to write programs that would be rejected by most static type-checkers. For example, a variable might store either a number or the Boolean value ""false"".","['programming', 'language', 'static', 'type', 'checking', 'language', 'easy', 'write', 'program', 'reject', 'static', 'type', 'checker', 'example', 'variable', 'store', 'number', 'boolean', 'value', 'false']"
4294,"Note that some of these definitions are contradictory, others are merely conceptually independent, and still others are special cases with additional constraints of other, more ""liberal"" less strong definitions. Because of the wide divergence among these definitions, it is possible to defend claims about most programming languages that they are either strongly or weakly typed. For instance:","['note', 'definition', 'contradictory', 'merely', 'conceptually', 'independent', 'special', 'case', 'additional', 'constraint', 'liberal', 'strong', 'definition', 'wide', 'divergence', 'definition', 'possible', 'defend', 'claim', 'programming', 'language', 'strongly', 'weakly', 'type', 'instance']"
4295,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4296,"In object-oriented programming, inheritance is the mechanism of basing an object or class upon another object prototype-based inheritance or class class-based inheritance, retaining similar implementation. Also defined as deriving new classes sub classes from existing ones such as super class or base class and then forming them into a hierarchy of classes. In most class-based object-oriented languages, an object created through inheritance, a ""child object"", acquires all the properties and behaviors of the ""parent object"" , with the exception of: constructors, destructor, overloaded operators and friend functions of the base class. Inheritance allows programmers to create classes that are built upon existing classes,1 to specify a new implementation while maintaining the same behaviors realizing an interface, to reuse code and to independently extend original software via public classes and interfaces. The relationships of objects or classes through inheritance give rise to a directed acyclic graph.","['object', 'orient', 'programming', 'inheritance', 'mechanism', 'base', 'object', 'class', 'object', 'prototype', 'base', 'inheritance', 'class', 'class', 'base', 'inheritance', 'retain', 'similar', 'implementation', 'define', 'derive', 'new', 'class', 'sub', 'class', 'exist', 'one', 'super', 'class', 'base', 'class', 'form', 'hierarchy', 'class', 'class', 'base', 'object', 'orient', 'language', 'object', 'create', 'inheritance', 'child', 'object', 'acquire', 'property', 'behavior', 'parent', 'object', 'exception', 'constructor', 'destructor', 'overloaded', 'operator', 'friend', 'function', 'base', 'class', 'inheritance', 'allow', 'programmer', 'create', 'class', 'build', 'exist', 'classes', 'specify', 'new', 'implementation', 'maintain', 'behavior', 'realize', 'interface', 'reuse', 'code', 'independently', 'extend', 'original', 'software', 'public', 'class', 'interface', 'relationship', 'object', 'class', 'inheritance', 'rise', 'direct', 'acyclic', 'graph']"
4297,"An inherited class is called a subclass of its parent class or super class. The term ""inheritance"" is loosely used for both class-based and prototype-based programming, but in narrow use the term is reserved for class-based programming one class inherits from another, with the corresponding technique in prototype-based programming being instead called delegation one object delegates to another. Class-modifying inheritance patterns can be pre-defined according to simple network interface parameters such that inter-language compatibility is preserved.23","['inherit', 'class', 'call', 'subclass', 'parent', 'class', 'super', 'class', 'term', 'inheritance', 'loosely', 'class', 'base', 'prototype', 'base', 'programming', 'narrow', 'use', 'term', 'reserve', 'class', 'base', 'programming', 'class', 'inherit', 'corresponding', 'technique', 'prototype', 'base', 'programming', 'instead', 'call', 'delegation', 'object', 'delegate', 'class', 'modifying', 'inheritance', 'pattern', 'pre', 'define', 'accord', 'simple', 'network', 'interface', 'parameter', 'inter', 'language', 'compatibility', 'preserved']"
4298,"Inheritance should not be confused with subtyping.45 In some languages inheritance and subtyping agree,a whereas in others they differ; in general, subtyping establishes an is-a relationship, whereas inheritance only reuses implementation and establishes a syntactic relationship, not necessarily a semantic relationship inheritance does not ensure behavioral subtyping. To distinguish these concepts, subtyping is sometimes referred to as interface inheritance without acknowledging that the specialization of type variables also induces a subtyping relation, whereas inheritance as defined here is known as implementation inheritance or code inheritance.6 Still, inheritance is a commonly used mechanism for establishing subtype relationships.7","['inheritance', 'confuse', 'subtyping', 'language', 'inheritance', 'subtype', 'agree', 'differ', 'general', 'subtype', 'establishe', 'relationship', 'inheritance', 'reuse', 'implementation', 'establish', 'syntactic', 'relationship', 'necessarily', 'semantic', 'relationship', 'inheritance', 'ensure', 'behavioral', 'subtyping', 'distinguish', 'concept', 'subtype', 'refer', 'interface', 'inheritance', 'acknowledge', 'specialization', 'type', 'variable', 'induce', 'subtype', 'relation', 'inheritance', 'define', 'know', 'implementation', 'inheritance', 'code', 'inheritance', 'inheritance', 'commonly', 'mechanism', 'establish', 'subtype', 'relationships']"
4299,"Inheritance is contrasted with object composition, where one object contains another object or objects of one class contain objects of another class; see composition over inheritance. Composition implements a has-a relationship, in contrast to the is-a relationship of subtyping.","['inheritance', 'contrast', 'object', 'composition', 'object', 'contain', 'object', 'object', 'class', 'contain', 'object', 'class', 'composition', 'inheritance', 'composition', 'implement', 'relationship', 'contrast', 'relationship', 'subtype']"
4300,"In 1966, Tony Hoare presented some remarks on records, and in particular presented the idea of record subclasses, record types with common properties but discriminated by a variant tag and having fields private to the variant.8 Influenced by this, in 1967 Ole-Johan Dahl and Kristen Nygaard presented a design that allowed specifying objects that belonged to different classes but had common properties. The common properties were collected in a superclass, and each superclass could itself potentially have a superclass. The values of a subclass were thus compound objects, consisting of some number of prefix parts belonging to various superclasses, plus a main part belonging to the subclass. These parts were all concatenated together.9 The attributes of a compound object would be accessible by dot notation. This idea was first adopted in the Simula 67 programming language.10 The idea then spread to Smalltalk, C++, Java, Python, and many other languages.","['1966', 'tony', 'hoare', 'present', 'remark', 'record', 'particular', 'present', 'idea', 'record', 'subclass', 'record', 'type', 'common', 'property', 'discriminate', 'variant', 'tag', 'have', 'field', 'private', 'variant', 'influence', '1967', 'ole', 'johan', 'dahl', 'kristen', 'nygaard', 'present', 'design', 'allow', 'specify', 'object', 'belong', 'different', 'class', 'common', 'property', 'common', 'property', 'collect', 'superclass', 'superclass', 'potentially', 'superclass', 'value', 'subclass', 'compound', 'object', 'consist', 'number', 'prefix', 'part', 'belong', 'superclass', 'plus', 'main', 'belong', 'subclass', 'part', 'concatenate', 'together', 'attribute', 'compound', 'object', 'accessible', 'dot', 'notation', 'idea', 'adopt', 'simula', 'programming', 'language', 'idea', 'spread', 'smalltalk', 'c++', 'java', 'python', 'language']"
4301,"There are various types of inheritance, based on paradigm and specific language.11","['type', 'inheritance', 'base', 'paradigm', 'specific', 'language']"
4302,"""Multiple inheritance ... was widely supposed to be very difficult to implement efficiently. For example, in a summary of C++ in his book on Objective C, Brad Cox actually claimed that adding multiple inheritance to C++ was impossible. Thus, multiple inheritance seemed more of a challenge. Since I had considered multiple inheritance as early as 1982 and found a simple and efficient implementation technique in 1984, I couldn't resist the challenge. I suspect this to be the only case in which fashion affected the sequence of events.""12","['multiple', 'inheritance', 'widely', 'suppose', 'difficult', 'implement', 'efficiently', 'example', 'summary', 'c++', 'book', 'objective', 'brad', 'cox', 'actually', 'claim', 'add', 'multiple', 'inheritance', 'c++', 'impossible', 'multiple', 'inheritance', 'challenge', 'consider', 'multiple', 'inheritance', 'early', '1982', 'find', 'simple', 'efficient', 'implementation', 'technique', '1984', 'resist', 'challenge', 'suspect', 'case', 'fashion', 'affect', 'sequence', 'event', '12']"
4303,"Subclasses, derived classes, heir classes, or child classes are modular derivative classes that inherits one or more language entities from one or more other classes called superclass, base classes, or parent classes. The semantics of class inheritance vary from language to language, but commonly the subclass automatically inherits the instance variables and member functions of its superclasses.","['subclass', 'derive', 'class', 'heir', 'class', 'child', 'class', 'modular', 'derivative', 'class', 'inherit', 'language', 'entity', 'class', 'call', 'superclass', 'base', 'class', 'parent', 'class', 'semantic', 'class', 'inheritance', 'vary', 'language', 'language', 'commonly', 'subclass', 'automatically', 'inherit', 'instance', 'variable', 'member', 'function', 'superclass']"
4304,The general form of defining a derived class is:13,"['general', 'form', 'define', 'derive', 'class', 'is']"
4305,"Some languages support also the inheritance of other constructs. For example, in Eiffel, contracts that define the specification of a class are also inherited by heirs. The superclass establishes a common interface and foundational functionality, which specialized subclasses can inherit, modify, and supplement. The software inherited by a subclass is considered reused in the subclass. A reference to an instance of a class may actually be referring to one of its subclasses. The actual class of the object being referenced is impossible to predict at compile-time. A uniform interface is used to invoke the member functions of objects of a number of different classes. Subclasses may replace superclass functions with entirely new functions that must share the same method signature.","['language', 'support', 'inheritance', 'construct', 'example', 'eiffel', 'contract', 'define', 'specification', 'class', 'inherit', 'heir', 'superclass', 'establish', 'common', 'interface', 'foundational', 'functionality', 'specialized', 'subclass', 'inherit', 'modify', 'supplement', 'software', 'inherit', 'subclass', 'consider', 'reuse', 'subclass', 'reference', 'instance', 'class', 'actually', 'refer', 'subclass', 'actual', 'class', 'object', 'reference', 'impossible', 'predict', 'compile', 'time', 'uniform', 'interface', 'invoke', 'member', 'function', 'object', 'number', 'different', 'class', 'subclass', 'replace', 'superclass', 'function', 'entirely', 'new', 'function', 'share', 'method', 'signature']"
4306,"In some languages a class may be declared as non-subclassable by adding certain class modifiers to the class declaration. Examples include the final keyword in Java and C++11 onwards or the sealed keyword in C#. Such modifiers are added to the class declaration before the class keyword and the class identifier declaration. Such non-subclassable classes restrict reusability, particularly when developers only have access to precompiled binaries and not source code.","['language', 'class', 'declare', 'non', 'subclassable', 'add', 'certain', 'class', 'modifier', 'class', 'declaration', 'example', 'include', 'final', 'keyword', 'java', 'c++11', 'onwards', 'seal', 'keyword', 'modifier', 'add', 'class', 'declaration', 'class', 'keyword', 'class', 'identifi', 'declaration', 'non', 'subclassable', 'class', 'restrict', 'reusability', 'particularly', 'developer', 'access', 'precompile', 'binary', 'source', 'code']"
4307,"A non-subclassable class has no subclasses, so it can be easily deduced at compile time that references or pointers to objects of that class are actually referencing instances of that class and not instances of subclasses they don't exist or instances of superclasses upcasting a reference type violates the type system. Because the exact type of the object being referenced is known before execution, early binding also called static dispatch can be used instead of late binding also called dynamic dispatch, which requires one or more virtual method table lookups depending on whether multiple inheritance or only single inheritance are supported in the programming language that is being used.","['non', 'subclassable', 'class', 'subclass', 'easily', 'deduce', 'compile', 'time', 'reference', 'pointer', 'object', 'class', 'actually', 'reference', 'instance', 'class', 'instance', 'subclass', 'exist', 'instance', 'superclass', 'upcaste', 'reference', 'type', 'violate', 'type', 'system', 'exact', 'type', 'object', 'reference', 'know', 'execution', 'early', 'bind', 'call', 'static', 'dispatch', 'instead', 'late', 'binding', 'call', 'dynamic', 'dispatch', 'require', 'virtual', 'method', 'table', 'lookup', 'depend', 'multiple', 'inheritance', 'single', 'inheritance', 'support', 'programming', 'language']"
4308,"Just as classes may be non-subclassable, method declarations may contain method modifiers that prevent the method from being overridden i.e. replaced with a new function with the same name and type signature in a subclass. A private method is un-overridable simply because it is not accessible by classes other than the class it is a member function of this is not true for C++, though. A final method in Java, a sealed method in C# or a frozen feature in Eiffel cannot be overridden.","['class', 'non', 'subclassable', 'method', 'declaration', 'contain', 'method', 'modifier', 'prevent', 'method', 'overridden', 'i.e.', 'replace', 'new', 'function', 'type', 'signature', 'subclass', 'private', 'method', 'overridable', 'simply', 'accessible', 'class', 'class', 'member', 'function', 'true', 'c++', 'final', 'method', 'java', 'seal', 'method', 'frozen', 'feature', 'eiffel', 'overridden']"
4309,"If the superclass method is a virtual method, then invocations of the superclass method will be dynamically dispatched. Some languages require that methods be specifically declared as virtual e.g. C++, and in others, all methods are virtual e.g. Java. An invocation of a non-virtual method will always be statically dispatched i.e. the address of the function call is determined at compile-time. Static dispatch is faster than dynamic dispatch and allows optimizations such as inline expansion.","['superclass', 'method', 'virtual', 'method', 'invocation', 'superclass', 'method', 'dynamically', 'dispatch', 'language', 'require', 'method', 'specifically', 'declare', 'virtual', 'e.g.', 'c++', 'method', 'virtual', 'e.g.', 'java', 'invocation', 'non', 'virtual', 'method', 'statically', 'dispatch', 'i.e.', 'address', 'function', 'determine', 'compile', 'time', 'static', 'dispatch', 'fast', 'dynamic', 'dispatch', 'allow', 'optimization', 'inline', 'expansion']"
4310,"The following table shows which variables and functions get inherited dependent on the visibility given when deriving the class, using the terminology established by C++.14","['following', 'table', 'show', 'variable', 'function', 'inherit', 'dependent', 'visibility', 'give', 'derive', 'class', 'terminology', 'establish', 'c++']"
4311,Inheritance is used to co-relate two or more classes to each other.,"['inheritance', 'relate', 'class']"
4312,"Many object-oriented programming languages permit a class or object to replace the implementation of an aspect—typically a behavior—that it has inherited. This process is called overriding. Overriding introduces a complication: which version of the behavior does an instance of the inherited class use—the one that is part of its own class, or the one from the parent base class? The answer varies between programming languages, and some languages provide the ability to indicate that a particular behavior is not to be overridden and should behave as defined by the base class. For instance, in C#, the base method or property can only be overridden in a subclass if it is marked with the virtual, abstract, or override modifier, while in programming languages such as Java, different methods can be called to override other methods.15 An alternative to overriding is hiding the inherited code.","['object', 'orient', 'programming', 'language', 'permit', 'class', 'object', 'replace', 'implementation', 'aspect', 'typically', 'behavior', 'inherit', 'process', 'call', 'overriding', 'override', 'introduce', 'complication', 'version', 'behavior', 'instance', 'inherit', 'class', 'use', 'class', 'parent', 'base', 'class', 'answer', 'vary', 'programming', 'language', 'language', 'provide', 'ability', 'indicate', 'particular', 'behavior', 'overridden', 'behave', 'define', 'base', 'class', 'instance', 'base', 'method', 'property', 'overridden', 'subclass', 'mark', 'virtual', 'abstract', 'override', 'modifier', 'programming', 'language', 'java', 'different', 'method', 'call', 'override', 'methods', 'alternative', 'override', 'hide', 'inherit', 'code']"
4313,"Implementation inheritance is the mechanism whereby a subclass re-uses code in a base class. By default the subclass retains all of the operations of the base class, but the subclass may override some or all operations, replacing the base-class implementation with its own.","['implementation', 'inheritance', 'mechanism', 'subclass', 'use', 'code', 'base', 'class', 'default', 'subclass', 'retain', 'operation', 'base', 'class', 'subclass', 'override', 'operation', 'replace', 'base', 'class', 'implementation']"
4314,"In the following Python example, subclasses .mw-parser-output .monospacedfont-family:monospace,monospaceSquareSumComputer and CubeSumComputer override the transform method of the base class SumComputer. The base class comprises operations to compute the sum of the squares between two integers. The subclass re-uses all of the functionality of the base class with the exception of the operation that transforms a number into its square, replacing it with an operation that transforms a number into its square and cube respectively. The subclasses therefore compute the sum of the squares/cubes between two integers.","['follow', 'python', 'example', 'subclasse', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacesquaresumcomputer', 'cubesumcomputer', 'override', 'transform', 'method', 'base', 'class', 'sumcomputer', 'base', 'class', 'comprise', 'operation', 'compute', 'sum', 'square', 'integer', 'subclass', 'use', 'functionality', 'base', 'class', 'exception', 'operation', 'transform', 'number', 'square', 'replace', 'operation', 'transform', 'number', 'square', 'cube', 'respectively', 'subclass', 'compute', 'sum', 'square', 'cube', 'integer']"
4315,Below is an example of Python.,"['example', 'python']"
4316,"In most quarters, class inheritance for the sole purpose of code reuse has fallen out of favor.citation needed The primary concern is that implementation inheritance does not provide any assurance of polymorphic substitutability—an instance of the reusing class cannot necessarily be substituted for an instance of the inherited class. An alternative technique, explicit delegation, requires more programming effort, but avoids the substitutability issue.citation needed In C++ private inheritance can be used as a form of implementation inheritance without substitutability. Whereas public inheritance represents an ""is-a"" relationship and delegation represents a ""has-a"" relationship, private and protected inheritance can be thought of as an ""is implemented in terms of"" relationship.16","['quarter', 'class', 'inheritance', 'sole', 'purpose', 'code', 'reuse', 'fall', 'favor.citation', 'need', 'primary', 'concern', 'implementation', 'inheritance', 'provide', 'assurance', 'polymorphic', 'substitutability', 'instance', 'reuse', 'class', 'necessarily', 'substitute', 'instance', 'inherit', 'class', 'alternative', 'technique', 'explicit', 'delegation', 'require', 'programming', 'effort', 'avoid', 'substitutability', 'issue.citation', 'need', 'c++', 'private', 'inheritance', 'form', 'implementation', 'inheritance', 'substitutability', 'public', 'inheritance', 'represent', 'relationship', 'delegation', 'represent', 'relationship', 'private', 'protect', 'inheritance', 'think', 'implement', 'term', 'relationship']"
4317,"Another frequent use of inheritance is to guarantee that classes maintain a certain common interface; that is, they implement the same methods. The parent class can be a combination of implemented operations and operations that are to be implemented in the child classes. Often, there is no interface change between the supertype and subtype- the child implements the behavior described instead of its parent class.17","['frequent', 'use', 'inheritance', 'guarantee', 'class', 'maintain', 'certain', 'common', 'interface', 'implement', 'method', 'parent', 'class', 'combination', 'implement', 'operation', 'operation', 'implement', 'child', 'class', 'interface', 'change', 'supertype', 'subtype-', 'child', 'implement', 'behavior', 'describe', 'instead', 'parent', 'class']"
4318,"Inheritance is similar to but distinct from subtyping.4 Subtyping enables a given type to be substituted for another type or abstraction, and is said to establish an is-a relationship between the subtype and some existing abstraction, either implicitly or explicitly, depending on language support. The relationship can be expressed explicitly via inheritance in languages that support inheritance as a subtyping mechanism. For example, the following C++ code establishes an explicit inheritance relationship between classes B and A, where B is both a subclass and a subtype of A, and can be used as an A wherever a B is specified via a reference, a pointer or the object itself.","['inheritance', 'similar', 'distinct', 'subtyping', 'subtype', 'enable', 'give', 'type', 'substitute', 'type', 'abstraction', 'say', 'establish', 'relationship', 'subtype', 'exist', 'abstraction', 'implicitly', 'explicitly', 'depend', 'language', 'support', 'relationship', 'express', 'explicitly', 'inheritance', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'example', 'following', 'c++', 'code', 'establish', 'explicit', 'inheritance', 'relationship', 'class', 'subclass', 'subtype', 'specify', 'reference', 'pointer', 'object']"
4319,"In programming languages that do not support inheritance as a subtyping mechanism, the relationship between a base class and a derived class is only a relationship between implementations a mechanism for code reuse, as compared to a relationship between types. Inheritance, even in programming languages that support inheritance as a subtyping mechanism, does not necessarily entail behavioral subtyping. It is entirely possible to derive a class whose object will behave incorrectly when used in a context where the parent class is expected; see the Liskov substitution principle. 18 Compare connotation/denotation. In some OOP languages, the notions of code reuse and subtyping coincide because the only way to declare a subtype is to define a new class that inherits the implementation of another.","['programming', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'relationship', 'base', 'class', 'derive', 'class', 'relationship', 'implementation', 'mechanism', 'code', 'reuse', 'compare', 'relationship', 'type', 'inheritance', 'programming', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'necessarily', 'entail', 'behavioral', 'subtyping', 'entirely', 'possible', 'derive', 'class', 'object', 'behave', 'incorrectly', 'context', 'parent', 'class', 'expect', 'liskov', 'substitution', 'principle', 'compare', 'connotation', 'denotation', 'oop', 'language', 'notion', 'code', 'reuse', 'subtype', 'coincide', 'way', 'declare', 'subtype', 'define', 'new', 'class', 'inherit', 'implementation']"
4320,Using inheritance extensively in designing a program imposes certain constraints.,"['inheritance', 'extensively', 'design', 'program', 'impose', 'certain', 'constraint']"
4321,"For example, consider a class Person that contains a person's name, date of birth, address and phone number. We can define a subclass of Person called Student that contains the person's grade point average and classes taken, and another subclass of Person called Employee that contains the person's job-title, employer, and salary.","['example', 'consider', 'class', 'person', 'contain', 'person', 'date', 'birth', 'address', 'phone', 'number', 'define', 'subclass', 'person', 'call', 'student', 'contain', 'person', 'grade', 'point', 'average', 'class', 'take', 'subclass', 'person', 'call', 'employee', 'contain', 'person', 'job', 'title', 'employer', 'salary']"
4322,"In defining this inheritance hierarchy we have already defined certain restrictions, not all of which are desirable:","['define', 'inheritance', 'hierarchy', 'define', 'certain', 'restriction', 'desirable']"
4323,"The composite reuse principle is an alternative to inheritance. This technique supports polymorphism and code reuse by separating behaviors from the primary class hierarchy and including specific behavior classes as required in any business domain class. This approach avoids the static nature of a class hierarchy by allowing behavior modifications at run time and allows one class to implement behaviors buffet-style, instead of being restricted to the behaviors of its ancestor classes.","['composite', 'reuse', 'principle', 'alternative', 'inheritance', 'technique', 'support', 'polymorphism', 'code', 'reuse', 'separate', 'behavior', 'primary', 'class', 'hierarchy', 'include', 'specific', 'behavior', 'class', 'require', 'business', 'domain', 'class', 'approach', 'avoid', 'static', 'nature', 'class', 'hierarchy', 'allow', 'behavior', 'modification', 'run', 'time', 'allow', 'class', 'implement', 'behavior', 'buffet', 'style', 'instead', 'restrict', 'behavior', 'ancestor', 'class']"
4324,"Implementation inheritance is controversial among programmers and theoreticians of object-oriented programming since at least the 1990s. Among them are the authors of Design Patterns, who advocate interface inheritance instead, and favor composition over inheritance. For example, the decorator pattern as mentioned above has been proposed to overcome the static nature of inheritance between classes. As a more fundamental solution to the same problem, role-oriented programming introduces a distinct relationship, played-by, combining properties of inheritance and composition into a new concept.citation needed","['implementation', 'inheritance', 'controversial', 'programmer', 'theoretician', 'object', 'orient', 'programming', '1990s', 'author', 'design', 'patterns', 'advocate', 'interface', 'inheritance', 'instead', 'favor', 'composition', 'inheritance', 'example', 'decorator', 'pattern', 'mention', 'propose', 'overcome', 'static', 'nature', 'inheritance', 'class', 'fundamental', 'solution', 'problem', 'role', 'orient', 'programming', 'introduce', 'distinct', 'relationship', 'play', 'combine', 'property', 'inheritance', 'composition', 'new', 'concept.citation', 'need']"
4325,"According to Allen Holub, the main problem with implementation inheritance is that it introduces unnecessary coupling in the form of the ""fragile base class problem"":6 modifications to the base class implementation can cause inadvertent behavioral changes in subclasses. Using interfaces avoids this problem because no implementation is shared, only the API.19 Another way of stating this is that ""inheritance breaks encapsulation"".20 The problem surfaces clearly in open object-oriented systems such as frameworks, where client code is expected to inherit from system-supplied classes and then substituted for the system's classes in its algorithms.6","['accord', 'allen', 'holub', 'main', 'problem', 'implementation', 'inheritance', 'introduce', 'unnecessary', 'coupling', 'form', 'fragile', 'base', 'class', 'problem', 'modification', 'base', 'class', 'implementation', 'cause', 'inadvertent', 'behavioral', 'change', 'subclass', 'interface', 'avoid', 'problem', 'implementation', 'share', 'api', 'way', 'state', 'inheritance', 'break', 'encapsulation', 'problem', 'surface', 'clearly', 'open', 'object', 'orient', 'system', 'framework', 'client', 'code', 'expect', 'inherit', 'system', 'supply', 'class', 'substitute', 'system', 'class', 'algorithms']"
4326,"Reportedly, Java inventor James Gosling has spoken against implementation inheritance, stating that he would not include it if he were to redesign Java.19 Language designs that decouple inheritance from subtyping interface inheritance appeared as early as 1990;21 a modern example of this is the Go programming language.","['reportedly', 'java', 'inventor', 'james', 'gosling', 'speak', 'implementation', 'inheritance', 'state', 'include', 'redesign', 'java', 'language', 'design', 'decouple', 'inheritance', 'subtype', 'interface', 'inheritance', 'appear', 'early', '1990', 'modern', 'example', 'programming', 'language']"
4327,"Complex inheritance, or inheritance used within an insufficiently mature design, may lead to the yo-yo problem. When inheritance was used as a primary approach to structure programs in the late 1990s, developers tended to break code into more layers of inheritance as the system functionality grew. If a development team combined multiple layers of inheritance with the single responsibility principle, this resulted in many very thin layers of code, with many layers consisting of only 1 or 2 lines of actual code.citation needed Too many layers make debugging a significant challenge, as it becomes hard to determine which layer needs to be debugged.","['complex', 'inheritance', 'inheritance', 'insufficiently', 'mature', 'design', 'lead', 'problem', 'inheritance', 'primary', 'approach', 'structure', 'program', 'late', '1990', 'developer', 'tend', 'break', 'code', 'layer', 'inheritance', 'system', 'functionality', 'grow', 'development', 'team', 'combine', 'multiple', 'layer', 'inheritance', 'single', 'responsibility', 'principle', 'result', 'thin', 'layer', 'code', 'layer', 'consist', 'line', 'actual', 'code.citation', 'need', 'layer', 'debug', 'significant', 'challenge', 'hard', 'determine', 'layer', 'need', 'debug']"
4328,"Another issue with inheritance is that subclasses must be defined in code, which means that program users cannot add new subclasses at runtime. Other design patterns such as Entity–component–system allow program users to define variations of an entity at runtime.","['issue', 'inheritance', 'subclass', 'define', 'code', 'mean', 'program', 'user', 'add', 'new', 'subclass', 'runtime', 'design', 'pattern', 'entity', 'component', 'system', 'allow', 'program', 'user', 'define', 'variation', 'entity', 'runtime']"
4329,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4330,"In software engineering, coupling is the degree of interdependence between software modules; a measure of how closely connected two routines or modules are;1 the strength of the relationships between modules.2","['software', 'engineering', 'coupling', 'degree', 'interdependence', 'software', 'module', 'measure', 'closely', 'connect', 'routine', 'module', 'are', 'strength', 'relationship', 'modules']"
4331,"Coupling is usually contrasted with cohesion. Low coupling often correlates with high cohesion, and vice versa. Low coupling is often thought to be a sign of a well-structured computer system and a good design, and when combined with high cohesion, supports the general goals of high readability and maintainability.citation needed","['coupling', 'usually', 'contrast', 'cohesion', 'low', 'coupling', 'correlate', 'high', 'cohesion', 'vice', 'versa', 'low', 'coupling', 'think', 'sign', 'structure', 'computer', 'system', 'good', 'design', 'combine', 'high', 'cohesion', 'support', 'general', 'goal', 'high', 'readability', 'maintainability.citation', 'need']"
4332,"The software quality metrics of coupling and cohesion were invented by Larry Constantine in the late 1960s as part of a structured design, based on characteristics of “good” programming practices that reduced maintenance and modification costs. Structured design, including cohesion and coupling, were published in the article Stevens, Myers & Constantine 19743 and the book Yourdon & Constantine 1979,4 and the latter subsequently became standard terms.","['software', 'quality', 'metric', 'coupling', 'cohesion', 'invent', 'larry', 'constantine', 'late', '1960', 'structured', 'design', 'base', 'characteristic', 'good', 'programming', 'practice', 'reduce', 'maintenance', 'modification', 'cost', 'structured', 'design', 'include', 'cohesion', 'coupling', 'publish', 'article', 'stevens', 'myers', 'constantine', '19743', 'book', 'yourdon', 'constantine', '1979', 'subsequently', 'standard', 'term']"
4333,"Coupling can be ""low"" also ""loose"" and ""weak"" or ""high"" also ""tight"" and ""strong"". Some types of coupling, in order of highest to lowest coupling, are as follows:","['coupling', 'low', 'loose', 'weak', 'high', 'tight', 'strong', 'type', 'coupling', 'order', 'high', 'low', 'coupling', 'follow']"
4334,"A module here refers to a subroutine of any kind, i.e. a set of one or more statements having a name and preferably its own set of variable names.","['module', 'refer', 'subroutine', 'kind', 'i.e.', 'set', 'statement', 'have', 'preferably', 'set', 'variable', 'name']"
4335,In recent work various other coupling concepts have been investigated and used as indicators for different modularization principles used in practice.5,"['recent', 'work', 'coupling', 'concept', 'investigate', 'indicator', 'different', 'modularization', 'principle', 'practice']"
4336,"The goal of this type of coupling is to provide a run-time evaluation of a software system. It has been argued that static coupling metrics lose precision when dealing with an intensive use of dynamic binding or inheritance.6 In the attempt to solve this issue, dynamic coupling measures have been taken into account.","['goal', 'type', 'coupling', 'provide', 'run', 'time', 'evaluation', 'software', 'system', 'argue', 'static', 'coupling', 'metric', 'lose', 'precision', 'deal', 'intensive', 'use', 'dynamic', 'binding', 'inheritance', 'attempt', 'solve', 'issue', 'dynamic', 'coupling', 'measure', 'take', 'account']"
4337,"This kind of coupling considers the conceptual similarities between software entities using, for example, comments and identifiers and relying on techniques such as latent semantic indexing LSI.","['kind', 'coupling', 'consider', 'conceptual', 'similarity', 'software', 'entity', 'example', 'comment', 'identifier', 'rely', 'technique', 'latent', 'semantic', 'indexing', 'lsi']"
4338,"Logical coupling or evolutionary coupling or change coupling exploits the release history of a software system to find change patterns among modules or classes: e.g., entities that are likely to be changed together or sequences of changes a change in a class A is always followed by a change in a class B.","['logical', 'coupling', 'evolutionary', 'coupling', 'change', 'couple', 'exploit', 'release', 'history', 'software', 'system', 'find', 'change', 'pattern', 'module', 'class', 'e.g.', 'entity', 'likely', 'change', 'sequence', 'change', 'change', 'class', 'follow', 'change', 'class']"
4339,"Tightly coupled systems tend to exhibit the following developmental characteristics, which are often seen as disadvantages:","['tightly', 'couple', 'system', 'tend', 'exhibit', 'follow', 'developmental', 'characteristic', 'see', 'disadvantage']"
4340,"Whether loosely or tightly coupled, a system's performance is often reduced by message and parameter creation, transmission, translation e.g. marshaling and message interpretation which might be a reference to a string, array or data structure, which require less overhead than creating a complicated message such as a SOAP message. Longer messages require more CPU and memory to produce. To optimize runtime performance, message length must be minimized and message meaning must be maximized.","['loosely', 'tightly', 'couple', 'system', 'performance', 'reduce', 'message', 'parameter', 'creation', 'transmission', 'translation', 'e.g.', 'marshaling', 'message', 'interpretation', 'reference', 'string', 'array', 'data', 'structure', 'require', 'overhead', 'create', 'complicated', 'message', 'soap', 'message', 'long', 'message', 'require', 'cpu', 'memory', 'produce', 'optimize', 'runtime', 'performance', 'message', 'length', 'minimize', 'message', 'meaning', 'maximize']"
4341,"One approach to decreasing coupling is functional design, which seeks to limit the responsibilities of modules along functionality. Coupling increases between two classes A and B if:","['approach', 'decrease', 'coupling', 'functional', 'design', 'seek', 'limit', 'responsibility', 'module', 'functionality', 'couple', 'increase', 'class']"
4342,Low coupling refers to a relationship in which one module interacts with another module through a simple and stable interface and does not need to be concerned with the other module's internal implementation see Information Hiding.,"['low', 'coupling', 'refer', 'relationship', 'module', 'interact', 'module', 'simple', 'stable', 'interface', 'need', 'concern', 'module', 'internal', 'implementation', 'information', 'hiding']"
4343,Systems such as CORBA or COM allow objects to communicate with each other without having to know anything about the other object's implementation. Both of these systems even allow for objects to communicate with objects written in other languages.,"['system', 'corba', 'com', 'allow', 'object', 'communicate', 'have', 'know', 'object', 'implementation', 'system', 'allow', 'object', 'communicate', 'object', 'write', 'language']"
4344,"Coupling and cohesion are terms which occur together very frequently. Coupling refers to the interdependencies between modules, while cohesion describes how related the functions within a single module are. Low cohesion implies that a given module performs tasks which are not very related to each other and hence can create problems as the module becomes large.","['coupling', 'cohesion', 'term', 'occur', 'frequently', 'coupling', 'refer', 'interdependency', 'module', 'cohesion', 'describe', 'relate', 'function', 'single', 'module', 'low', 'cohesion', 'imply', 'give', 'module', 'perform', 'task', 'related', 'create', 'problem', 'module', 'large']"
4345,Coupling in Software Engineering7 describes a version of metrics associated with this concept.,"['couple', 'software', 'engineering7', 'describe', 'version', 'metric', 'associate', 'concept']"
4346,For data and control flow coupling:,"['datum', 'control', 'flow', 'coupling']"
4347,C o u p l i n g C = 1 − 1 d i + 2 × c i + d o + 2 × c o + g d + 2 × g c + w + r \displaystyle \mathrm Coupling C=1-\frac 1d_i+2\times c_i+d_o+2\times c_o+g_d+2\times g_c+w+r,"['coupling', 'g_c+w+r']"
4348,CouplingC makes the value larger the more coupled the module is. This number ranges from approximately 0.67 low coupling to 1.0 highly coupled,"['couplingc', 'make', 'value', 'large', 'couple', 'module', 'number', 'range', 'approximately', '0', 'low', 'coupling', '1', 'highly', 'couple']"
4349,"For example, if a module has only a single input and output data parameter","['example', 'module', 'single', 'input', 'output', 'datum', 'parameter']"
4350,C = 1 − 1 1 + 0 + 1 + 0 + 0 + 0 + 1 + 0 = 1 − 1 3 = 0.67 \displaystyle C=1-\frac 11+0+1+0+0+0+1+0=1-\frac 13=0.67,"['0', '13=0']"
4351,"If a module has 5 input and output data parameters, an equal number of control parameters, and accesses 10 items of global data, with a fan-in of 3 and a fan-out of 4,","['module', 'input', 'output', 'datum', 'parameter', 'equal', 'number', 'control', 'parameter', 'access', 'item', 'global', 'datum', 'fan', 'fan']"
4352,C = 1 − 1 5 + 2 × 5 + 5 + 2 × 5 + 10 + 0 + 3 + 4 = 0.98 \displaystyle C=1-\frac 15+2\times 5+5+2\times 5+10+0+3+4=0.98,"['0', '4=0']"
4353,"In software engineering, SOLID is a mnemonic acronym for five design principles intended to make object-oriented designs more understandable, flexible, and maintainable. The principles are a subset of many principles promoted by American software engineer and instructor Robert C. Martin,123 first introduced in his 2000 paper Design Principles and Design Patterns discussing software rot.24: 2–3","['software', 'engineering', 'solid', 'mnemonic', 'acronym', 'design', 'principle', 'intend', 'object', 'orient', 'design', 'understandable', 'flexible', 'maintainable', 'principle', 'subset', 'principle', 'promote', 'american', 'software', 'engineer', 'instructor', 'robert', 'martin', 'introduce', '2000', 'paper', 'design', 'principles', 'design', 'patterns', 'discuss', 'software', 'rot', '2–3']"
4354,"The SOLID acronym was introduced later, around 2004, by Michael Feathers.11","['solid', 'acronym', 'introduce', 'later', '2004', 'michael', 'feathers']"
4355,"Although the SOLID principles apply to any object-oriented design, they can also form a core philosophy for methodologies such as agile development or adaptive software development.3","['solid', 'principle', 'apply', 'object', 'orient', 'design', 'form', 'core', 'philosophy', 'methodology', 'agile', 'development', 'adaptive', 'software', 'development']"
4356,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4357,"The Liskov substitution principle LSP is a particular definition of a subtyping relation, called strong behavioral subtyping, that was initially introduced by Barbara Liskov in a 1987 conference keynote address titled Data abstraction and hierarchy. It is based on the concept of ""substitutability"" – a principle in object-oriented programming stating that an object such as a class may be replaced by a sub-object such as a class that extends the first class without breaking the program. It is a semantic rather than merely syntactic relation, because it intends to guarantee semantic interoperability of types in a hierarchy, object types in particular. Barbara Liskov and Jeannette Wing described the principle succinctly in a 1994 paper as follows:1","['liskov', 'substitution', 'principle', 'lsp', 'particular', 'definition', 'subtype', 'relation', 'call', 'strong', 'behavioral', 'subtyping', 'initially', 'introduce', 'barbara', 'liskov', '1987', 'conference', 'keynote', 'address', 'title', 'data', 'abstraction', 'hierarchy', 'base', 'concept', 'substitutability', 'principle', 'object', 'orient', 'programming', 'state', 'object', 'class', 'replace', 'sub', 'object', 'class', 'extend', 'class', 'break', 'program', 'semantic', 'merely', 'syntactic', 'relation', 'intend', 'guarantee', 'semantic', 'interoperability', 'type', 'hierarchy', 'object', 'type', 'particular', 'barbara', 'liskov', 'jeannette', 'wing', 'describe', 'principle', 'succinctly', '1994', 'paper', 'follows']"
4358,Subtype Requirement: Let ϕ x \displaystyle \phi x be a property provable about objects x \displaystyle x of type T. Then ϕ y \displaystyle \phi y should be true for objects y \displaystyle y of type S where S is a subtype of T.,"['subtype', 'requirement', 'let', 'property', 'provable', 'object', 'type', 'true', 'object', 'type', 'subtype']"
4359,"That is, if S subtypes T, what holds for T-objects holds for S-objects. In the same paper, Liskov and Wing detailed their notion of behavioral subtyping in an extension of Hoare logic, which bears a certain resemblance to Bertrand Meyer's design by contract in that it considers the interaction of subtyping with preconditions, postconditions and invariants.","['subtype', 'hold', 'object', 'hold', 'object', 'paper', 'liskov', 'wing', 'detail', 'notion', 'behavioral', 'subtype', 'extension', 'hoare', 'logic', 'bear', 'certain', 'resemblance', 'bertrand', 'meyer', 'design', 'contract', 'consider', 'interaction', 'subtype', 'precondition', 'postcondition', 'invariant']"
4360,"Liskov's notion of a behavioural subtype defines a notion of substitutability for objects; that is, if S is a subtype of T, then objects of type T in a program may be replaced with objects of type S without altering any of the desirable properties of that program e.g. correctness.","['liskov', 'notion', 'behavioural', 'subtype', 'define', 'notion', 'substitutability', 'object', 'subtype', 'object', 'type', 'program', 'replace', 'object', 'type', 'alter', 'desirable', 'property', 'program', 'e.g.', 'correctness']"
4361,"Behavioural subtyping is a stronger notion than typical subtyping of functions defined in type theory, which relies only on the contravariance of parameter types and covariance of the return type. Behavioural subtyping is undecidable in general: if q is the property ""method for x always terminates"", then it is impossible for a program e.g. a compiler to verify that it holds true for some subtype S of T, even if q does hold for T. Nonetheless, the principle is useful in reasoning about the design of class hierarchies.","['behavioural', 'subtype', 'strong', 'notion', 'typical', 'subtyping', 'function', 'define', 'type', 'theory', 'rely', 'contravariance', 'parameter', 'type', 'covariance', 'return', 'type', 'behavioural', 'subtype', 'undecidable', 'general', 'property', 'method', 'terminate', 'impossible', 'program', 'e.g.', 'compiler', 'verify', 'hold', 'true', 'subtype', 'hold', 'nonetheless', 'principle', 'useful', 'reasoning', 'design', 'class', 'hierarchy']"
4362,Liskov substitution principle imposes some standard requirements on signatures that have been adopted in newer object-oriented programming languages usually at the level of classes rather than types; see nominal vs. structural subtyping for the distinction:,"['liskov', 'substitution', 'principle', 'impose', 'standard', 'requirement', 'signature', 'adopt', 'new', 'object', 'orient', 'programming', 'language', 'usually', 'level', 'class', 'type', 'nominal', 'vs.', 'structural', 'subtype', 'distinction']"
4363,"In addition to the signature requirements, the subtype must meet a number of behavioural conditions. These are detailed in a terminology resembling that of design by contract methodology, leading to some restrictions on how contracts can interact with inheritance:","['addition', 'signature', 'requirement', 'subtype', 'meet', 'number', 'behavioural', 'condition', 'detail', 'terminology', 'resemble', 'design', 'contract', 'methodology', 'lead', 'restriction', 'contract', 'interact', 'inheritance']"
4364,"The rules on pre- and postconditions are identical to those introduced by Bertrand Meyer in his 1988 book Object-Oriented Software Construction. Both Meyer, and later Pierre America, who was the first to use the term behavioral subtyping, gave proof-theoretic definitions of some behavioral subtyping notions, but their definitions did not take into account aliasing that may occur in programming languages that support references or pointers. Taking aliasing into account was the major improvement made by Liskov and Wing 1994, and a key ingredient is the history constraint. Under the definitions of Meyer and America, a mutable point would be a behavioral subtype of an immutable point, whereas Liskov substitution principle forbids this.","['rule', 'pre-', 'postcondition', 'identical', 'introduce', 'bertrand', 'meyer', '1988', 'book', 'object', 'oriented', 'software', 'construction', 'meyer', 'later', 'pierre', 'america', 'use', 'term', 'behavioral', 'subtyping', 'give', 'proof', 'theoretic', 'definition', 'behavioral', 'subtype', 'notion', 'definition', 'account', 'aliasing', 'occur', 'programming', 'language', 'support', 'reference', 'pointer', 'take', 'aliase', 'account', 'major', 'improvement', 'liskov', 'wing', '1994', 'key', 'ingredient', 'history', 'constraint', 'definition', 'meyer', 'america', 'mutable', 'point', 'behavioral', 'subtype', 'immutable', 'point', 'liskov', 'substitution', 'principle', 'forbid']"
4365,"While widely used, the characterization of behavioral subtyping as the ability to substitute subtype objects for supertype objects has been said to be flawedcitation needed. It makes no mention of specifications, so it invites an incorrect reading where the implementation of the supertype is compared to the implementation of the subtype. This is problematic for several reasons, one being that it does not support the common case where the supertype is abstract and has no implementation. Also, more subtly, in the context of object-oriented imperative programming it is difficult to define precisely what it means to universally or existentially quantify over objects of a given type, or to substitute one object for another.2 When applying subtyping, generally we are not substituting subtype objects for supertype objects, we are simply using subtype objects as supertype objects. That is, it is the same objects, the subtype objects, that are also supertype objects.","['widely', 'characterization', 'behavioral', 'subtype', 'ability', 'substitute', 'subtype', 'object', 'supertype', 'object', 'say', 'flawedcitation', 'need', 'make', 'mention', 'specification', 'invite', 'incorrect', 'reading', 'implementation', 'supertype', 'compare', 'implementation', 'subtype', 'problematic', 'reason', 'support', 'common', 'case', 'supertype', 'abstract', 'implementation', 'subtly', 'context', 'object', 'orient', 'imperative', 'programming', 'difficult', 'define', 'precisely', 'mean', 'universally', 'existentially', 'quantify', 'object', 'give', 'type', 'substitute', 'object', 'another', 'apply', 'subtype', 'generally', 'substitute', 'subtype', 'object', 'supertype', 'object', 'simply', 'subtype', 'object', 'supertype', 'object', 'object', 'subtype', 'object', 'supertype', 'object']"
4366,"In an interview in 2016, Liskov herself explains that what she presented in her keynote address was an ""informal rule"", that Jeannette Wing later proposed that they ""try to figure out precisely what this means"", which led to their joint publication1 on behavioral subtyping, and indeed that ""technically, it's called behavioral subtyping"".3 During the interview, she does not use substitution terminology to discuss the concepts.","['interview', '2016', 'liskov', 'explain', 'present', 'keynote', 'address', 'informal', 'rule', 'jeannette', 'wing', 'later', 'propose', 'try', 'figure', 'precisely', 'mean', 'lead', 'joint', 'publication1', 'behavioral', 'subtyping', 'technically', 'call', 'behavioral', 'subtyping', 'interview', 'use', 'substitution', 'terminology', 'discuss', 'concept']"
4367,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4368,"In programming language theory, subtyping also subtype polymorphism or inclusion polymorphism is a form of type polymorphism in which a subtype is a datatype that is related to another datatype the supertype by some notion of substitutability, meaning that program elements, typically subroutines or functions, written to operate on elements of the supertype can also operate on elements of the subtype. If S is a subtype of T, the subtyping relation written as S <: T, S ⊑ T,1 or S ≤: T means that any term of type S can safely be used in any context where a term of type T is expected. The precise semantics of subtyping here crucially depends on the particulars of how ""safely be used"" and ""any context"" are defined by a given type formalism or programming language. The type system of a programming language essentially defines its own subtyping relation, which may well be trivial, should the language support no or very little conversion mechanisms.","['programming', 'language', 'theory', 'subtype', 'subtype', 'polymorphism', 'inclusion', 'polymorphism', 'form', 'type', 'polymorphism', 'subtype', 'datatype', 'relate', 'datatype', 'supertype', 'notion', 'substitutability', 'mean', 'program', 'element', 'typically', 'subroutine', 'function', 'write', 'operate', 'element', 'supertype', 'operate', 'element', 'subtype', 'subtype', 'subtype', 'relation', 'write', 't', 'mean', 'term', 'type', 'safely', 'context', 'term', 'type', 'expect', 'precise', 'semantic', 'subtype', 'crucially', 'depend', 'particular', 'safely', 'context', 'define', 'give', 'type', 'formalism', 'programming', 'language', 'type', 'system', 'programming', 'language', 'essentially', 'define', 'subtyping', 'relation', 'trivial', 'language', 'support', 'little', 'conversion', 'mechanism']"
4369,"Due to the subtyping relation, a term may belong to more than one type. Subtyping is therefore a form of type polymorphism. In object-oriented programming the term 'polymorphism' is commonly used to refer solely to this subtype polymorphism, while the techniques of parametric polymorphism would be considered generic programming.","['subtype', 'relation', 'term', 'belong', 'type', 'subtype', 'form', 'type', 'polymorphism', 'object', 'orient', 'programming', 'term', 'polymorphism', 'commonly', 'refer', 'solely', 'subtype', 'polymorphism', 'technique', 'parametric', 'polymorphism', 'consider', 'generic', 'programming']"
4370,"Functional programming languages often allow the subtyping of records. Consequently, simply typed lambda calculus extended with record types is perhaps the simplest theoretical setting in which a useful notion of subtyping may be defined and studied.2 Because the resulting calculus allows terms to have more than one type, it is no longer a ""simple"" type theory. Since functional programming languages, by definition, support function literals, which can also be stored in records, records types with subtyping provide some of the features of object-oriented programming. Typically, functional programming languages also provide some, usually restricted, form of parametric polymorphism. In a theoretical setting, it is desirable to study the interaction of the two features; a common theoretical setting is system F<:. Various calculi that attempt to capture the theoretical properties of object-oriented programming may be derived from system F<:.","['functional', 'programming', 'language', 'allow', 'subtyping', 'record', 'consequently', 'simply', 'type', 'lambda', 'calculus', 'extend', 'record', 'type', 'simple', 'theoretical', 'setting', 'useful', 'notion', 'subtype', 'define', 'studied', 'result', 'calculus', 'allow', 'term', 'type', 'long', 'simple', 'type', 'theory', 'functional', 'programming', 'language', 'definition', 'support', 'function', 'literal', 'store', 'record', 'record', 'type', 'subtype', 'provide', 'feature', 'object', 'orient', 'programming', 'typically', 'functional', 'programming', 'language', 'provide', 'usually', 'restrict', 'form', 'parametric', 'polymorphism', 'theoretical', 'setting', 'desirable', 'study', 'interaction', 'feature', 'common', 'theoretical', 'setting', 'system', 'calculus', 'attempt', 'capture', 'theoretical', 'property', 'object', 'orient', 'programming', 'derive', 'system']"
4371,"The concept of subtyping is related to the linguistic notions of hyponymy and holonymy. It is also related to the concept of bounded quantification in mathematical logic see Order-sorted logic. Subtyping should not be confused with the notion of class or object inheritance from object-oriented languages;3 subtyping is a relation between types interfaces in object-oriented parlance whereas inheritance is a relation between implementations stemming from a language feature that allows new objects to be created from existing ones. In a number of object-oriented languages, subtyping is called interface inheritance, with inheritance referred to as implementation inheritance.","['concept', 'subtype', 'relate', 'linguistic', 'notion', 'hyponymy', 'holonymy', 'relate', 'concept', 'bound', 'quantification', 'mathematical', 'logic', 'order', 'sort', 'logic', 'subtype', 'confuse', 'notion', 'class', 'object', 'inheritance', 'object', 'orient', 'languages', 'subtype', 'relation', 'type', 'interface', 'object', 'orient', 'parlance', 'inheritance', 'relation', 'implementation', 'stem', 'language', 'feature', 'allow', 'new', 'object', 'create', 'exist', 'one', 'number', 'object', 'orient', 'language', 'subtype', 'call', 'interface', 'inheritance', 'inheritance', 'refer', 'implementation', 'inheritance']"
4372,"The notion of subtyping in programming languages dates back to the 1960s; it was introduced in Simula derivatives. The first formal treatments of subtyping were given by John C. Reynolds in 1980 who used category theory to formalize implicit conversions, and Luca Cardelli 1985.4","['notion', 'subtype', 'programming', 'language', 'date', '1960', 'introduce', 'simula', 'derivative', 'formal', 'treatment', 'subtype', 'give', 'john', 'reynolds', '1980', 'category', 'theory', 'formalize', 'implicit', 'conversion', 'luca', 'cardelli', '1985']"
4373,"The concept of subtyping has gained visibility and synonymy with polymorphism in some circles with the mainstream adoption of object-oriented programming. In this context, the principle of safe substitution is often called the Liskov substitution principle, after Barbara Liskov who popularized it in a keynote address at a conference on object-oriented programming in 1987. Because it must consider mutable objects, the ideal notion of subtyping defined by Liskov and Jeannette Wing, called behavioral subtyping is considerably stronger than what can be implemented in a type checker. See § Function types below for details.","['concept', 'subtype', 'gain', 'visibility', 'synonymy', 'polymorphism', 'circle', 'mainstream', 'adoption', 'object', 'orient', 'programming', 'context', 'principle', 'safe', 'substitution', 'call', 'liskov', 'substitution', 'principle', 'barbara', 'liskov', 'popularize', 'keynote', 'address', 'conference', 'object', 'orient', 'programming', '1987', 'consider', 'mutable', 'object', 'ideal', 'notion', 'subtype', 'define', 'liskov', 'jeannette', 'wing', 'call', 'behavioral', 'subtyping', 'considerably', 'strong', 'implement', 'type', 'checker', 'function', 'type', 'detail']"
4374,"A simple practical example of subtypes is shown in the diagram. The type ""bird"" has three subtypes ""duck"", ""cuckoo"" and ""ostrich"". Conceptually, each of these is a variety of the basic type ""bird"" that inherits many ""bird"" characteristics but has some specific differences. The UML notation is used in this diagram, with open-headed arrows showing the direction and type of the relationship between the supertype and its subtypes.","['simple', 'practical', 'example', 'subtype', 'show', 'diagram', 'type', 'bird', 'subtype', 'duck', 'cuckoo', 'ostrich', 'conceptually', 'variety', 'basic', 'type', 'bird', 'inherit', 'bird', 'characteristic', 'specific', 'difference', 'uml', 'notation', 'diagram', 'open', 'head', 'arrow', 'show', 'direction', 'type', 'relationship', 'supertype', 'subtype']"
4375,"As a more practical example, a language might allow integer values to be used wherever floating point values are expected Integer <: Float, or it might define a generic type Number as a common supertype of integers and the reals. In this second case, we only have Integer <: Number and Float <: Number, but Integer and Float are not subtypes of each other.","['practical', 'example', 'language', 'allow', 'integer', 'value', 'float', 'point', 'value', 'expect', 'integer', 'float', 'define', 'generic', 'type', 'number', 'common', 'supertype', 'integer', 'real', 'second', 'case', 'integer', 'number', 'float', 'number', 'integer', 'float', 'subtype']"
4376,Programmers may take advantage of subtyping to write code in a more abstract manner than would be possible without it. Consider the following example:,"['programmer', 'advantage', 'subtype', 'write', 'code', 'abstract', 'manner', 'possible', 'consider', 'follow', 'example']"
4377,"If integer and real are both subtypes of Number, and an operator of comparison with an arbitrary Number is defined for both types, then values of either type can be passed to this function. However, the very possibility of implementing such an operator highly constrains the Number type for example, one can't compare an integer with a complex number, and actually only comparing integers with integers, and reals with reals, makes sense. Rewriting this function so that it would only accept 'x' and 'y' of the same type requires bounded polymorphism.","['integer', 'real', 'subtype', 'number', 'operator', 'comparison', 'arbitrary', 'number', 'define', 'type', 'value', 'type', 'pass', 'function', 'possibility', 'implement', 'operator', 'highly', 'constrain', 'number', 'type', 'example', 'compare', 'integer', 'complex', 'number', 'actually', 'compare', 'integer', 'integer', 'real', 'real', 'make', 'sense', 'rewrite', 'function', 'accept', 'type', 'require', 'bound', 'polymorphism']"
4378,In type theory the concept of subsumption5 is used to define or evaluate whether a type S is a subtype of type T.,"['type', 'theory', 'concept', 'subsumption5', 'define', 'evaluate', 'type', 'subtype', 'type']"
4379,"A type is a set of values. The set can be described extensionally by listing all the values, or it can be described intensionally by stating the membership of the set by a predicate over a domain of possible values. In common programming languages enumeration types are defined extensionally by listing values. User-defined types like records structs, interfaces or classes are defined intensionally by an explicit type declaration or by using an existing value, which encodes type information, as a prototype to be copied or extended.","['type', 'set', 'value', 'set', 'describe', 'extensionally', 'list', 'value', 'describe', 'intensionally', 'state', 'membership', 'set', 'predicate', 'domain', 'possible', 'value', 'common', 'programming', 'language', 'enumeration', 'type', 'define', 'extensionally', 'list', 'value', 'user', 'define', 'type', 'like', 'record', 'struct', 'interface', 'class', 'define', 'intensionally', 'explicit', 'type', 'declaration', 'exist', 'value', 'encode', 'type', 'information', 'prototype', 'copy', 'extend']"
4380,"In discussing the concept of subsumption, the set of values of a type is indicated by writing its name in mathematical italics: T. The type, viewed as a predicate over a domain, is indicated by writing its name in bold: T. The conventional symbol <: means ""is a subtype of"", and :> means ""is a supertype of"".","['discuss', 'concept', 'subsumption', 'set', 'value', 'type', 'indicate', 'write', 'mathematical', 'italic', 'type', 'view', 'predicate', 'domain', 'indicate', 'write', 'bold', 'conventional', 'symbol', 'mean', 'subtype', 'mean', 'supertype']"
4381,"In terms of information specificity, a subtype is considered more specific than any one of its supertypes, because it holds at least as much information as each of them. This may increase the applicability, or relevance of the subtype the number of situations where it can be accepted or introduced, as compared to its ""more general"" supertypes. The disadvantage of having this more detailed information is that it represents incorporated choices which reduce the prevalance of the subtype the number of situations which are able to generate or produce it.","['term', 'information', 'specificity', 'subtype', 'consider', 'specific', 'supertype', 'hold', 'information', 'increase', 'applicability', 'relevance', 'subtype', 'number', 'situation', 'accept', 'introduce', 'compare', 'general', 'supertype', 'disadvantage', 'have', 'detailed', 'information', 'represent', 'incorporate', 'choice', 'reduce', 'prevalance', 'subtype', 'number', 'situation', 'able', 'generate', 'produce']"
4382,"In the context of subsumption, the type definitions can be expressed using Set-builder notation, which uses a predicate to define a set. Predicates can be defined over a domain set of possible values D. Predicates are partial functions that compare values to selection criteria. For example: ""is an integer value greater than or equal to 100 and less than 200?"". If a value matches the criteria then the function returns the value. If not, the value is not selected, and nothing is returned. List comprehensions are a form of this pattern used in many programming languages.","['context', 'subsumption', 'type', 'definition', 'express', 'set', 'builder', 'notation', 'use', 'predicate', 'define', 'set', 'predicate', 'define', 'domain', 'set', 'possible', 'value', 'predicates', 'partial', 'function', 'compare', 'value', 'selection', 'criterion', 'example', 'integer', 'value', 'great', 'equal', '100', '200', 'value', 'match', 'criterion', 'function', 'return', 'value', 'value', 'select', 'return', 'list', 'comprehension', 'form', 'pattern', 'programming', 'language']"
4383,"If there are two predicates, P T \displaystyle P_T which applies selection criteria for the type T, and P s \displaystyle P_s which applies additional criteria for the type S, then sets for the two types can be defined:","['predicate', 'p_t', 'apply', 'selection', 'criterion', 'type', 'p_s', 'apply', 'additional', 'criterion', 'type', 'set', 'type', 'define']"
4384,"The predicate T = P T \displaystyle \mathbf T =P_T is applied alongside P s \displaystyle P_s as part of the compound predicate S defining S. The two predicates are conjoined, so both must be true for a value to be selected. The predicate S = T ∧ P s = P T ∧ P s \displaystyle \mathbf S =\mathbf T \land P_s=P_T\land P_s subsumes the predicate T, so S <: T.","['predicate', 'p_t', 'apply', 'alongside', 'p_s', 'compound', 'predicate', 'define', 'predicate', 'conjoin', 'true', 'value', 'select', 'predicate', 'p_s', 'p_s', 'subsume', 'predicate']"
4385,"For example: there is a subfamily of cat species called Felinae, which is part of the family Felidae. The genus Felis, to which the domestic cat species Felis catus belongs, is part of that subfamily.","['example', 'subfamily', 'cat', 'specie', 'call', 'felinae', 'family', 'felidae', 'genus', 'felis', 'domestic', 'cat', 'specie', 'felis', 'catus', 'belong', 'subfamily']"
4386,"The conjunction of predicates has been expressed here through application of the second predicate over the domain of values conforming to the first predicate. Viewed as types, Felis <: Felinae <: Felidae.","['conjunction', 'predicate', 'express', 'application', 'second', 'predicate', 'domain', 'value', 'conform', 'predicate', 'view', 'type', 'felis', 'felinae', 'felidae']"
4387,"If T subsumes S T :> S then a procedure, function or expression given a value s ∈ S \displaystyle s\in S as an operand parameter value or term will therefore be able to operate over that value as one of type T, because s ∈ T \displaystyle s\in T . In the example above, we could expect the function ofSubfamily to be applicable to values of all three types Felidae, Felinae and Felis.","['subsume', 'procedure', 'function', 'expression', 'give', 'value', 'operand', 'parameter', 'value', 'term', 'able', 'operate', 'value', 'type', 'example', 'expect', 'function', 'ofsubfamily', 'applicable', 'value', 'type', 'felidae', 'felinae', 'felis']"
4388,"Type theorists make a distinction between nominal subtyping, in which only types declared in a certain way may be subtypes of each other, and structural subtyping, in which the structure of two types determines whether or not one is a subtype of the other. The class-based object-oriented subtyping described above is nominal; a structural subtyping rule for an object-oriented language might say that if objects of type A can handle all of the messages that objects of type B can handle that is, if they define all the same methods, then A is a subtype of B regardless of whether either inherits from the other. This so-called duck typing is common in dynamically typed object-oriented languages. Sound structural subtyping rules for types other than object types are also well known.citation needed","['type', 'theorist', 'distinction', 'nominal', 'subtyping', 'type', 'declare', 'certain', 'way', 'subtype', 'structural', 'subtyping', 'structure', 'type', 'determine', 'subtype', 'class', 'base', 'object', 'orient', 'subtyping', 'describe', 'nominal', 'structural', 'subtyping', 'rule', 'object', 'orient', 'language', 'object', 'type', 'handle', 'message', 'object', 'type', 'handle', 'define', 'method', 'subtype', 'regardless', 'inherit', 'call', 'duck', 'typing', 'common', 'dynamically', 'type', 'object', 'orient', 'language', 'sound', 'structural', 'subtype', 'rule', 'type', 'object', 'type', 'known.citation', 'need']"
4389,"Implementations of programming languages with subtyping fall into two general classes: inclusive implementations, in which the representation of any value of type A also represents the same value at type B if A <: B, and coercive implementations, in which a value of type A can be automatically converted into one of type B. The subtyping induced by subclassing in an object-oriented language is usually inclusive; subtyping relations that relate integers and floating-point numbers, which are represented differently, are usually coercive.","['implementation', 'programming', 'language', 'subtype', 'fall', 'general', 'class', 'inclusive', 'implementation', 'representation', 'value', 'type', 'represent', 'value', 'type', 'coercive', 'implementation', 'value', 'type', 'automatically', 'convert', 'type', 'subtype', 'induce', 'subclasse', 'object', 'orient', 'language', 'usually', 'inclusive', 'subtype', 'relation', 'relate', 'integer', 'float', 'point', 'number', 'represent', 'differently', 'usually', 'coercive']"
4390,"In almost all type systems that define a subtyping relation, it is reflexive meaning A <: A for any type A and transitive meaning that if A <: B and B <: C then A <: C. This makes it a preorder on types.","['type', 'system', 'define', 'subtype', 'relation', 'reflexive', 'mean', 'type', 'transitive', 'meaning', 'make', 'preorder', 'type']"
4391,Types of records give rise to the concepts of width and depth subtyping. These express two different ways of obtaining a new type of record that allows the same operations as the original record type.,"['type', 'record', 'rise', 'concept', 'width', 'depth', 'subtype', 'express', 'different', 'way', 'obtain', 'new', 'type', 'record', 'allow', 'operation', 'original', 'record', 'type']"
4392,"Recall that a record is a collection of named fields. Since a subtype is a type which allows all operations allowed on the original type, a record subtype should support the same operations on the fields as the original type supported.","['recall', 'record', 'collection', 'name', 'field', 'subtype', 'type', 'allow', 'operation', 'allow', 'original', 'type', 'record', 'subtype', 'support', 'operation', 'field', 'original', 'type', 'support']"
4393,"One kind of way to achieve such support, called width subtyping, adds more fields to the record. More formally, every named field appearing in the width supertype will appear in the width subtype. Thus, any operation feasible on the supertype will be supported by the subtype.","['kind', 'way', 'achieve', 'support', 'call', 'width', 'subtype', 'add', 'field', 'record', 'formally', 'name', 'field', 'appear', 'width', 'supertype', 'appear', 'width', 'subtype', 'operation', 'feasible', 'supertype', 'support', 'subtype']"
4394,"The second method, called depth subtyping, replaces the various fields with their subtypes. That is, the fields of the subtype are subtypes of the fields of the supertype. Since any operation supported for a field in the supertype is supported for its subtype, any operation feasible on the record supertype is supported by the record subtype. Depth subtyping only makes sense for immutable records: for example, you can assign 1.5 to the 'x' field of a real point a record with two real fields, but you can't do the same to the 'x' field of an integer point which, however, is a deep subtype of the real point type because 1.5 is not an integer see Variance.","['second', 'method', 'call', 'depth', 'subtype', 'replace', 'field', 'subtype', 'field', 'subtype', 'subtype', 'field', 'supertype', 'operation', 'support', 'field', 'supertype', 'support', 'subtype', 'operation', 'feasible', 'record', 'supertype', 'support', 'record', 'subtype', 'depth', 'subtype', 'make', 'sense', 'immutable', 'record', 'example', 'assign', '1', 'field', 'real', 'point', 'record', 'real', 'field', 'field', 'integer', 'point', 'deep', 'subtype', 'real', 'point', 'type', '1', 'integer', 'variance']"
4395,"Subtyping of records can be defined in System F<:, which combines parametric polymorphism with subtyping of record types and is a theoretical basis for many functional programming languages that support both features.","['subtype', 'record', 'define', 'system', 'combine', 'parametric', 'polymorphism', 'subtype', 'record', 'type', 'theoretical', 'basis', 'functional', 'programming', 'language', 'support', 'feature']"
4396,Some systems also support subtyping of labeled disjoint union types such as algebraic data types. The rule for width subtyping is reversed: every tag appearing in the width subtype must appear in the width supertype.,"['system', 'support', 'subtype', 'label', 'disjoint', 'union', 'type', 'algebraic', 'datum', 'type', 'rule', 'width', 'subtype', 'reverse', 'tag', 'appear', 'width', 'subtype', 'appear', 'width', 'supertype']"
4397,"If T1 → T2 is a function type, then a subtype of it is any function type S1 → S2 with the property that T1 <: S1 and S2 <: T2. This can be summarised using the following typing rule:","['function', 'type', 'subtype', 'function', 'type', 'property', 'summarise', 'follow', 'typing', 'rule']"
4398,"The parameter type of S1 → S2 is said to be contravariant because the subtyping relation is reversed for it, whereas the return type is covariant. Informally, this reversal occurs because the refined type is ""more liberal"" in the types it accepts and ""more conservative"" in the type it returns. This is what exactly works in Scala: a n-ary function is internally a class that inherits the F u n c t i o n N − A 1 , − A 2 , … , − A n , + B \displaystyle \mathtt Function_N-A_1,-A_2,\dots ,-A_n,+B trait which can be seen as a general interface in Java-like languages, where A 1 , A 2 , … , A n \displaystyle \mathtt A_1,A_2,\dots ,A_n are the parameter types, and B \displaystyle \mathtt B is its return type; ""−"" before the type means the type is contravariant while ""+"" means covariant.","['parameter', 'type', 'say', 'contravariant', 'subtype', 'relation', 'reverse', 'return', 'type', 'covariant', 'informally', 'reversal', 'occur', 'refined', 'type', 'liberal', 'type', 'accept', 'conservative', 'type', 'return', 'exactly', 'work', 'scala', 'ary', 'function', 'internally', 'class', 'inherit', 'function_n', '-a_n,+b', 'trait', 'see', 'general', 'interface', 'java', 'like', 'language', 'a_n', 'parameter', 'type', 'return', 'type', 'type', 'mean', 'type', 'contravariant', 'mean', 'covariant']"
4399,"In languages that allow side effects, like most object-oriented languages, subtyping is generally not sufficient to guarantee that a function can be safely used in the context of another. Liskov's work in this area focused on behavioral subtyping, which besides the type system safety discussed in this article also requires that subtypes preserve all invariants guaranteed by the supertypes in some contract.6 This definition of subtyping is generally undecidable, so it cannot be verified by a type checker.","['language', 'allow', 'effect', 'like', 'object', 'orient', 'language', 'subtype', 'generally', 'sufficient', 'guarantee', 'function', 'safely', 'context', 'liskov', 'work', 'area', 'focus', 'behavioral', 'subtyping', 'type', 'system', 'safety', 'discuss', 'article', 'require', 'subtype', 'preserve', 'invariant', 'guarantee', 'supertype', 'contract', 'definition', 'subtype', 'generally', 'undecidable', 'verify', 'type', 'checker']"
4400,"The subtyping of mutable references is similar to the treatment of parameter values and return values. Write-only references or sinks are contravariant, like parameter values; read-only references or sources are covariant, like return values. Mutable references which act as both sources and sinks are invariant.","['subtyping', 'mutable', 'reference', 'similar', 'treatment', 'parameter', 'value', 'return', 'value', 'write', 'reference', 'sink', 'contravariant', 'like', 'parameter', 'value', 'read', 'reference', 'source', 'covariant', 'like', 'return', 'value', 'mutable', 'reference', 'act', 'source', 'sink', 'invariant']"
4401,"Subtyping and inheritance are independent orthogonal relationships. They may coincide, but none is a special case of the other. In other words, between two types S and T, all combinations of subtyping and inheritance are possible:","['subtype', 'inheritance', 'independent', 'orthogonal', 'relationship', 'coincide', 'special', 'case', 'word', 'type', 'combination', 'subtype', 'inheritance', 'possible']"
4402,"The first case is illustrated by independent types, such as Boolean and Float.","['case', 'illustrate', 'independent', 'type', 'boolean', 'float']"
4403,"The second case can be illustrated by the relationship between Int32 and Int64. In most object oriented programming languages, Int64 are unrelated by inheritance to Int32. However Int32 can be considered a subtype of Int64 since any 32 bit integer value can be promoted into a 64 bit integer value.","['second', 'case', 'illustrate', 'relationship', 'int32', 'int64', 'object', 'orient', 'programming', 'language', 'int64', 'unrelated', 'inheritance', 'int32', 'int32', 'consider', 'subtype', 'int64', 'bit', 'integer', 'value', 'promote', 'bit', 'integer', 'value']"
4404,"The third case is a consequence of function subtyping input contravariance. Assume a super class of type T having a method m returning an object of the same type i.e. the type of m is T → T, also note that the first parameter of m is this/self and a derived class type S from T. By inheritance, the type of m in S is S → S.citation needed In order for S to be a subtype of T the type of m in S must be a subtype of the type of m in Tcitation needed, in other words: S → S ≤: T → T. By bottom-up application of the function subtyping rule, this means: S ≤: T and T ≤: S, which is only possible if S and T are the same. Since inheritance is an irreflexive relation, S can't be a subtype of T.","['case', 'consequence', 'function', 'subtype', 'input', 'contravariance', 'assume', 'super', 'class', 'type', 'have', 'method', 'return', 'object', 'type', 'i.e.', 'type', 'note', 'parameter', 'self', 'derive', 'class', 'type', 'inheritance', 'type', 's.citation', 'need', 'order', 'subtype', 'type', 'subtype', 'type', 'tcitation', 'need', 'word', 'application', 'function', 'subtype', 'rule', 'mean', 'possible', 'inheritance', 'irreflexive', 'relation', 'subtype']"
4405,Subtyping and inheritance are compatible when all inherited fields and methods of the derived type have types which are subtypes of the corresponding fields and methods from the inherited type .3,"['subtype', 'inheritance', 'compatible', 'inherit', 'field', 'method', 'derive', 'type', 'type', 'subtype', 'corresponding', 'field', 'method', 'inherit', 'type']"
4406,"In coercive subtyping systems, subtypes are defined by implicit type conversion functions from subtype to supertype. For each subtyping relationship S <: T, a coercion function coerce: S → T is provided, and any object s of type S is regarded as the object coerceS → Ts of type T. A coercion function may be defined by composition: if S <: T and T <: U then s may be regarded as an object of type u under the compound coercion coerceT → U ∘ coerceS → T. The type coercion from a type to itself coerceT → T is the identity function idT.","['coercive', 'subtyping', 'system', 'subtype', 'define', 'implicit', 'type', 'conversion', 'function', 'subtype', 'supertype', 'subtype', 'relationship', 'coercion', 'function', 'coerce', 'provide', 'object', 'type', 'regard', 'object', 'coerces', 'type', 'coercion', 'function', 'define', 'composition', 'regard', 'object', 'type', 'compound', 'coercion', 'coercet', 'coerces', 'type', 'coercion', 'type', 'coercet', 'identity', 'function', 'idt.']"
4407,"Coercion functions for records and disjoint union subtypes may be defined componentwise; in the case of width-extended records, type coercion simply discards any components which are not defined in the supertype. The type coercion for function types may be given by f's = coerceS2 → T2fcoerceT1 → S1t, reflecting the contravariance of parameter values and covariance of return values.","['coercion', 'function', 'record', 'disjoint', 'union', 'subtype', 'define', 'componentwise', 'case', 'width', 'extend', 'record', 'type', 'coercion', 'simply', 'discard', 'component', 'define', 'supertype', 'type', 'coercion', 'function', 'type', 'give', 'coerces2', 't2fcoercet1', 'reflect', 'contravariance', 'parameter', 'value', 'covariance', 'return', 'value']"
4408,"The coercion function is uniquely determined given the subtype and supertype. Thus, when multiple subtyping relationships are defined, one must be careful to guarantee that all type coercions are coherent. For instance, if an integer such as 2 : int can be coerced to a floating point number say, 2.0 : float, then it is not admissible to coerce 2.1 : float to 2 : int, because the compound coercion coercefloat → float given by coerceint → float ∘ coercefloat → int would then be distinct from the identity coercion idfloat.","['coercion', 'function', 'uniquely', 'determine', 'give', 'subtype', 'supertype', 'multiple', 'subtype', 'relationship', 'define', 'careful', 'guarantee', 'type', 'coercion', 'coherent', 'instance', 'integer', 'int', 'coerce', 'float', 'point', 'number', '2', 'float', 'admissible', 'coerce', '2', 'float', 'int', 'compound', 'coercion', 'coercefloat', 'float', 'give', 'coerceint', 'float', 'coercefloat', 'int', 'distinct', 'identity', 'coercion', 'idfloat']"
4409,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4410,"In object-oriented programming, inheritance is the mechanism of basing an object or class upon another object prototype-based inheritance or class class-based inheritance, retaining similar implementation. Also defined as deriving new classes sub classes from existing ones such as super class or base class and then forming them into a hierarchy of classes. In most class-based object-oriented languages, an object created through inheritance, a ""child object"", acquires all the properties and behaviors of the ""parent object"" , with the exception of: constructors, destructor, overloaded operators and friend functions of the base class. Inheritance allows programmers to create classes that are built upon existing classes,1 to specify a new implementation while maintaining the same behaviors realizing an interface, to reuse code and to independently extend original software via public classes and interfaces. The relationships of objects or classes through inheritance give rise to a directed acyclic graph.","['object', 'orient', 'programming', 'inheritance', 'mechanism', 'base', 'object', 'class', 'object', 'prototype', 'base', 'inheritance', 'class', 'class', 'base', 'inheritance', 'retain', 'similar', 'implementation', 'define', 'derive', 'new', 'class', 'sub', 'class', 'exist', 'one', 'super', 'class', 'base', 'class', 'form', 'hierarchy', 'class', 'class', 'base', 'object', 'orient', 'language', 'object', 'create', 'inheritance', 'child', 'object', 'acquire', 'property', 'behavior', 'parent', 'object', 'exception', 'constructor', 'destructor', 'overloaded', 'operator', 'friend', 'function', 'base', 'class', 'inheritance', 'allow', 'programmer', 'create', 'class', 'build', 'exist', 'classes', 'specify', 'new', 'implementation', 'maintain', 'behavior', 'realize', 'interface', 'reuse', 'code', 'independently', 'extend', 'original', 'software', 'public', 'class', 'interface', 'relationship', 'object', 'class', 'inheritance', 'rise', 'direct', 'acyclic', 'graph']"
4411,"An inherited class is called a subclass of its parent class or super class. The term ""inheritance"" is loosely used for both class-based and prototype-based programming, but in narrow use the term is reserved for class-based programming one class inherits from another, with the corresponding technique in prototype-based programming being instead called delegation one object delegates to another. Class-modifying inheritance patterns can be pre-defined according to simple network interface parameters such that inter-language compatibility is preserved.23","['inherit', 'class', 'call', 'subclass', 'parent', 'class', 'super', 'class', 'term', 'inheritance', 'loosely', 'class', 'base', 'prototype', 'base', 'programming', 'narrow', 'use', 'term', 'reserve', 'class', 'base', 'programming', 'class', 'inherit', 'corresponding', 'technique', 'prototype', 'base', 'programming', 'instead', 'call', 'delegation', 'object', 'delegate', 'class', 'modifying', 'inheritance', 'pattern', 'pre', 'define', 'accord', 'simple', 'network', 'interface', 'parameter', 'inter', 'language', 'compatibility', 'preserved']"
4412,"Inheritance should not be confused with subtyping.45 In some languages inheritance and subtyping agree,a whereas in others they differ; in general, subtyping establishes an is-a relationship, whereas inheritance only reuses implementation and establishes a syntactic relationship, not necessarily a semantic relationship inheritance does not ensure behavioral subtyping. To distinguish these concepts, subtyping is sometimes referred to as interface inheritance without acknowledging that the specialization of type variables also induces a subtyping relation, whereas inheritance as defined here is known as implementation inheritance or code inheritance.6 Still, inheritance is a commonly used mechanism for establishing subtype relationships.7","['inheritance', 'confuse', 'subtyping', 'language', 'inheritance', 'subtype', 'agree', 'differ', 'general', 'subtype', 'establishe', 'relationship', 'inheritance', 'reuse', 'implementation', 'establish', 'syntactic', 'relationship', 'necessarily', 'semantic', 'relationship', 'inheritance', 'ensure', 'behavioral', 'subtyping', 'distinguish', 'concept', 'subtype', 'refer', 'interface', 'inheritance', 'acknowledge', 'specialization', 'type', 'variable', 'induce', 'subtype', 'relation', 'inheritance', 'define', 'know', 'implementation', 'inheritance', 'code', 'inheritance', 'inheritance', 'commonly', 'mechanism', 'establish', 'subtype', 'relationships']"
4413,"Inheritance is contrasted with object composition, where one object contains another object or objects of one class contain objects of another class; see composition over inheritance. Composition implements a has-a relationship, in contrast to the is-a relationship of subtyping.","['inheritance', 'contrast', 'object', 'composition', 'object', 'contain', 'object', 'object', 'class', 'contain', 'object', 'class', 'composition', 'inheritance', 'composition', 'implement', 'relationship', 'contrast', 'relationship', 'subtype']"
4414,"In 1966, Tony Hoare presented some remarks on records, and in particular presented the idea of record subclasses, record types with common properties but discriminated by a variant tag and having fields private to the variant.8 Influenced by this, in 1967 Ole-Johan Dahl and Kristen Nygaard presented a design that allowed specifying objects that belonged to different classes but had common properties. The common properties were collected in a superclass, and each superclass could itself potentially have a superclass. The values of a subclass were thus compound objects, consisting of some number of prefix parts belonging to various superclasses, plus a main part belonging to the subclass. These parts were all concatenated together.9 The attributes of a compound object would be accessible by dot notation. This idea was first adopted in the Simula 67 programming language.10 The idea then spread to Smalltalk, C++, Java, Python, and many other languages.","['1966', 'tony', 'hoare', 'present', 'remark', 'record', 'particular', 'present', 'idea', 'record', 'subclass', 'record', 'type', 'common', 'property', 'discriminate', 'variant', 'tag', 'have', 'field', 'private', 'variant', 'influence', '1967', 'ole', 'johan', 'dahl', 'kristen', 'nygaard', 'present', 'design', 'allow', 'specify', 'object', 'belong', 'different', 'class', 'common', 'property', 'common', 'property', 'collect', 'superclass', 'superclass', 'potentially', 'superclass', 'value', 'subclass', 'compound', 'object', 'consist', 'number', 'prefix', 'part', 'belong', 'superclass', 'plus', 'main', 'belong', 'subclass', 'part', 'concatenate', 'together', 'attribute', 'compound', 'object', 'accessible', 'dot', 'notation', 'idea', 'adopt', 'simula', 'programming', 'language', 'idea', 'spread', 'smalltalk', 'c++', 'java', 'python', 'language']"
4415,"There are various types of inheritance, based on paradigm and specific language.11","['type', 'inheritance', 'base', 'paradigm', 'specific', 'language']"
4416,"""Multiple inheritance ... was widely supposed to be very difficult to implement efficiently. For example, in a summary of C++ in his book on Objective C, Brad Cox actually claimed that adding multiple inheritance to C++ was impossible. Thus, multiple inheritance seemed more of a challenge. Since I had considered multiple inheritance as early as 1982 and found a simple and efficient implementation technique in 1984, I couldn't resist the challenge. I suspect this to be the only case in which fashion affected the sequence of events.""12","['multiple', 'inheritance', 'widely', 'suppose', 'difficult', 'implement', 'efficiently', 'example', 'summary', 'c++', 'book', 'objective', 'brad', 'cox', 'actually', 'claim', 'add', 'multiple', 'inheritance', 'c++', 'impossible', 'multiple', 'inheritance', 'challenge', 'consider', 'multiple', 'inheritance', 'early', '1982', 'find', 'simple', 'efficient', 'implementation', 'technique', '1984', 'resist', 'challenge', 'suspect', 'case', 'fashion', 'affect', 'sequence', 'event', '12']"
4417,"Subclasses, derived classes, heir classes, or child classes are modular derivative classes that inherits one or more language entities from one or more other classes called superclass, base classes, or parent classes. The semantics of class inheritance vary from language to language, but commonly the subclass automatically inherits the instance variables and member functions of its superclasses.","['subclass', 'derive', 'class', 'heir', 'class', 'child', 'class', 'modular', 'derivative', 'class', 'inherit', 'language', 'entity', 'class', 'call', 'superclass', 'base', 'class', 'parent', 'class', 'semantic', 'class', 'inheritance', 'vary', 'language', 'language', 'commonly', 'subclass', 'automatically', 'inherit', 'instance', 'variable', 'member', 'function', 'superclass']"
4418,The general form of defining a derived class is:13,"['general', 'form', 'define', 'derive', 'class', 'is']"
4419,"Some languages support also the inheritance of other constructs. For example, in Eiffel, contracts that define the specification of a class are also inherited by heirs. The superclass establishes a common interface and foundational functionality, which specialized subclasses can inherit, modify, and supplement. The software inherited by a subclass is considered reused in the subclass. A reference to an instance of a class may actually be referring to one of its subclasses. The actual class of the object being referenced is impossible to predict at compile-time. A uniform interface is used to invoke the member functions of objects of a number of different classes. Subclasses may replace superclass functions with entirely new functions that must share the same method signature.","['language', 'support', 'inheritance', 'construct', 'example', 'eiffel', 'contract', 'define', 'specification', 'class', 'inherit', 'heir', 'superclass', 'establish', 'common', 'interface', 'foundational', 'functionality', 'specialized', 'subclass', 'inherit', 'modify', 'supplement', 'software', 'inherit', 'subclass', 'consider', 'reuse', 'subclass', 'reference', 'instance', 'class', 'actually', 'refer', 'subclass', 'actual', 'class', 'object', 'reference', 'impossible', 'predict', 'compile', 'time', 'uniform', 'interface', 'invoke', 'member', 'function', 'object', 'number', 'different', 'class', 'subclass', 'replace', 'superclass', 'function', 'entirely', 'new', 'function', 'share', 'method', 'signature']"
4420,"In some languages a class may be declared as non-subclassable by adding certain class modifiers to the class declaration. Examples include the final keyword in Java and C++11 onwards or the sealed keyword in C#. Such modifiers are added to the class declaration before the class keyword and the class identifier declaration. Such non-subclassable classes restrict reusability, particularly when developers only have access to precompiled binaries and not source code.","['language', 'class', 'declare', 'non', 'subclassable', 'add', 'certain', 'class', 'modifier', 'class', 'declaration', 'example', 'include', 'final', 'keyword', 'java', 'c++11', 'onwards', 'seal', 'keyword', 'modifier', 'add', 'class', 'declaration', 'class', 'keyword', 'class', 'identifi', 'declaration', 'non', 'subclassable', 'class', 'restrict', 'reusability', 'particularly', 'developer', 'access', 'precompile', 'binary', 'source', 'code']"
4421,"A non-subclassable class has no subclasses, so it can be easily deduced at compile time that references or pointers to objects of that class are actually referencing instances of that class and not instances of subclasses they don't exist or instances of superclasses upcasting a reference type violates the type system. Because the exact type of the object being referenced is known before execution, early binding also called static dispatch can be used instead of late binding also called dynamic dispatch, which requires one or more virtual method table lookups depending on whether multiple inheritance or only single inheritance are supported in the programming language that is being used.","['non', 'subclassable', 'class', 'subclass', 'easily', 'deduce', 'compile', 'time', 'reference', 'pointer', 'object', 'class', 'actually', 'reference', 'instance', 'class', 'instance', 'subclass', 'exist', 'instance', 'superclass', 'upcaste', 'reference', 'type', 'violate', 'type', 'system', 'exact', 'type', 'object', 'reference', 'know', 'execution', 'early', 'bind', 'call', 'static', 'dispatch', 'instead', 'late', 'binding', 'call', 'dynamic', 'dispatch', 'require', 'virtual', 'method', 'table', 'lookup', 'depend', 'multiple', 'inheritance', 'single', 'inheritance', 'support', 'programming', 'language']"
4422,"Just as classes may be non-subclassable, method declarations may contain method modifiers that prevent the method from being overridden i.e. replaced with a new function with the same name and type signature in a subclass. A private method is un-overridable simply because it is not accessible by classes other than the class it is a member function of this is not true for C++, though. A final method in Java, a sealed method in C# or a frozen feature in Eiffel cannot be overridden.","['class', 'non', 'subclassable', 'method', 'declaration', 'contain', 'method', 'modifier', 'prevent', 'method', 'overridden', 'i.e.', 'replace', 'new', 'function', 'type', 'signature', 'subclass', 'private', 'method', 'overridable', 'simply', 'accessible', 'class', 'class', 'member', 'function', 'true', 'c++', 'final', 'method', 'java', 'seal', 'method', 'frozen', 'feature', 'eiffel', 'overridden']"
4423,"If the superclass method is a virtual method, then invocations of the superclass method will be dynamically dispatched. Some languages require that methods be specifically declared as virtual e.g. C++, and in others, all methods are virtual e.g. Java. An invocation of a non-virtual method will always be statically dispatched i.e. the address of the function call is determined at compile-time. Static dispatch is faster than dynamic dispatch and allows optimizations such as inline expansion.","['superclass', 'method', 'virtual', 'method', 'invocation', 'superclass', 'method', 'dynamically', 'dispatch', 'language', 'require', 'method', 'specifically', 'declare', 'virtual', 'e.g.', 'c++', 'method', 'virtual', 'e.g.', 'java', 'invocation', 'non', 'virtual', 'method', 'statically', 'dispatch', 'i.e.', 'address', 'function', 'determine', 'compile', 'time', 'static', 'dispatch', 'fast', 'dynamic', 'dispatch', 'allow', 'optimization', 'inline', 'expansion']"
4424,"The following table shows which variables and functions get inherited dependent on the visibility given when deriving the class, using the terminology established by C++.14","['following', 'table', 'show', 'variable', 'function', 'inherit', 'dependent', 'visibility', 'give', 'derive', 'class', 'terminology', 'establish', 'c++']"
4425,Inheritance is used to co-relate two or more classes to each other.,"['inheritance', 'relate', 'class']"
4426,"Many object-oriented programming languages permit a class or object to replace the implementation of an aspect—typically a behavior—that it has inherited. This process is called overriding. Overriding introduces a complication: which version of the behavior does an instance of the inherited class use—the one that is part of its own class, or the one from the parent base class? The answer varies between programming languages, and some languages provide the ability to indicate that a particular behavior is not to be overridden and should behave as defined by the base class. For instance, in C#, the base method or property can only be overridden in a subclass if it is marked with the virtual, abstract, or override modifier, while in programming languages such as Java, different methods can be called to override other methods.15 An alternative to overriding is hiding the inherited code.","['object', 'orient', 'programming', 'language', 'permit', 'class', 'object', 'replace', 'implementation', 'aspect', 'typically', 'behavior', 'inherit', 'process', 'call', 'overriding', 'override', 'introduce', 'complication', 'version', 'behavior', 'instance', 'inherit', 'class', 'use', 'class', 'parent', 'base', 'class', 'answer', 'vary', 'programming', 'language', 'language', 'provide', 'ability', 'indicate', 'particular', 'behavior', 'overridden', 'behave', 'define', 'base', 'class', 'instance', 'base', 'method', 'property', 'overridden', 'subclass', 'mark', 'virtual', 'abstract', 'override', 'modifier', 'programming', 'language', 'java', 'different', 'method', 'call', 'override', 'methods', 'alternative', 'override', 'hide', 'inherit', 'code']"
4427,"Implementation inheritance is the mechanism whereby a subclass re-uses code in a base class. By default the subclass retains all of the operations of the base class, but the subclass may override some or all operations, replacing the base-class implementation with its own.","['implementation', 'inheritance', 'mechanism', 'subclass', 'use', 'code', 'base', 'class', 'default', 'subclass', 'retain', 'operation', 'base', 'class', 'subclass', 'override', 'operation', 'replace', 'base', 'class', 'implementation']"
4428,"In the following Python example, subclasses .mw-parser-output .monospacedfont-family:monospace,monospaceSquareSumComputer and CubeSumComputer override the transform method of the base class SumComputer. The base class comprises operations to compute the sum of the squares between two integers. The subclass re-uses all of the functionality of the base class with the exception of the operation that transforms a number into its square, replacing it with an operation that transforms a number into its square and cube respectively. The subclasses therefore compute the sum of the squares/cubes between two integers.","['follow', 'python', 'example', 'subclasse', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacesquaresumcomputer', 'cubesumcomputer', 'override', 'transform', 'method', 'base', 'class', 'sumcomputer', 'base', 'class', 'comprise', 'operation', 'compute', 'sum', 'square', 'integer', 'subclass', 'use', 'functionality', 'base', 'class', 'exception', 'operation', 'transform', 'number', 'square', 'replace', 'operation', 'transform', 'number', 'square', 'cube', 'respectively', 'subclass', 'compute', 'sum', 'square', 'cube', 'integer']"
4429,Below is an example of Python.,"['example', 'python']"
4430,"In most quarters, class inheritance for the sole purpose of code reuse has fallen out of favor.citation needed The primary concern is that implementation inheritance does not provide any assurance of polymorphic substitutability—an instance of the reusing class cannot necessarily be substituted for an instance of the inherited class. An alternative technique, explicit delegation, requires more programming effort, but avoids the substitutability issue.citation needed In C++ private inheritance can be used as a form of implementation inheritance without substitutability. Whereas public inheritance represents an ""is-a"" relationship and delegation represents a ""has-a"" relationship, private and protected inheritance can be thought of as an ""is implemented in terms of"" relationship.16","['quarter', 'class', 'inheritance', 'sole', 'purpose', 'code', 'reuse', 'fall', 'favor.citation', 'need', 'primary', 'concern', 'implementation', 'inheritance', 'provide', 'assurance', 'polymorphic', 'substitutability', 'instance', 'reuse', 'class', 'necessarily', 'substitute', 'instance', 'inherit', 'class', 'alternative', 'technique', 'explicit', 'delegation', 'require', 'programming', 'effort', 'avoid', 'substitutability', 'issue.citation', 'need', 'c++', 'private', 'inheritance', 'form', 'implementation', 'inheritance', 'substitutability', 'public', 'inheritance', 'represent', 'relationship', 'delegation', 'represent', 'relationship', 'private', 'protect', 'inheritance', 'think', 'implement', 'term', 'relationship']"
4431,"Another frequent use of inheritance is to guarantee that classes maintain a certain common interface; that is, they implement the same methods. The parent class can be a combination of implemented operations and operations that are to be implemented in the child classes. Often, there is no interface change between the supertype and subtype- the child implements the behavior described instead of its parent class.17","['frequent', 'use', 'inheritance', 'guarantee', 'class', 'maintain', 'certain', 'common', 'interface', 'implement', 'method', 'parent', 'class', 'combination', 'implement', 'operation', 'operation', 'implement', 'child', 'class', 'interface', 'change', 'supertype', 'subtype-', 'child', 'implement', 'behavior', 'describe', 'instead', 'parent', 'class']"
4432,"Inheritance is similar to but distinct from subtyping.4 Subtyping enables a given type to be substituted for another type or abstraction, and is said to establish an is-a relationship between the subtype and some existing abstraction, either implicitly or explicitly, depending on language support. The relationship can be expressed explicitly via inheritance in languages that support inheritance as a subtyping mechanism. For example, the following C++ code establishes an explicit inheritance relationship between classes B and A, where B is both a subclass and a subtype of A, and can be used as an A wherever a B is specified via a reference, a pointer or the object itself.","['inheritance', 'similar', 'distinct', 'subtyping', 'subtype', 'enable', 'give', 'type', 'substitute', 'type', 'abstraction', 'say', 'establish', 'relationship', 'subtype', 'exist', 'abstraction', 'implicitly', 'explicitly', 'depend', 'language', 'support', 'relationship', 'express', 'explicitly', 'inheritance', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'example', 'following', 'c++', 'code', 'establish', 'explicit', 'inheritance', 'relationship', 'class', 'subclass', 'subtype', 'specify', 'reference', 'pointer', 'object']"
4433,"In programming languages that do not support inheritance as a subtyping mechanism, the relationship between a base class and a derived class is only a relationship between implementations a mechanism for code reuse, as compared to a relationship between types. Inheritance, even in programming languages that support inheritance as a subtyping mechanism, does not necessarily entail behavioral subtyping. It is entirely possible to derive a class whose object will behave incorrectly when used in a context where the parent class is expected; see the Liskov substitution principle. 18 Compare connotation/denotation. In some OOP languages, the notions of code reuse and subtyping coincide because the only way to declare a subtype is to define a new class that inherits the implementation of another.","['programming', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'relationship', 'base', 'class', 'derive', 'class', 'relationship', 'implementation', 'mechanism', 'code', 'reuse', 'compare', 'relationship', 'type', 'inheritance', 'programming', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'necessarily', 'entail', 'behavioral', 'subtyping', 'entirely', 'possible', 'derive', 'class', 'object', 'behave', 'incorrectly', 'context', 'parent', 'class', 'expect', 'liskov', 'substitution', 'principle', 'compare', 'connotation', 'denotation', 'oop', 'language', 'notion', 'code', 'reuse', 'subtype', 'coincide', 'way', 'declare', 'subtype', 'define', 'new', 'class', 'inherit', 'implementation']"
4434,Using inheritance extensively in designing a program imposes certain constraints.,"['inheritance', 'extensively', 'design', 'program', 'impose', 'certain', 'constraint']"
4435,"For example, consider a class Person that contains a person's name, date of birth, address and phone number. We can define a subclass of Person called Student that contains the person's grade point average and classes taken, and another subclass of Person called Employee that contains the person's job-title, employer, and salary.","['example', 'consider', 'class', 'person', 'contain', 'person', 'date', 'birth', 'address', 'phone', 'number', 'define', 'subclass', 'person', 'call', 'student', 'contain', 'person', 'grade', 'point', 'average', 'class', 'take', 'subclass', 'person', 'call', 'employee', 'contain', 'person', 'job', 'title', 'employer', 'salary']"
4436,"In defining this inheritance hierarchy we have already defined certain restrictions, not all of which are desirable:","['define', 'inheritance', 'hierarchy', 'define', 'certain', 'restriction', 'desirable']"
4437,"The composite reuse principle is an alternative to inheritance. This technique supports polymorphism and code reuse by separating behaviors from the primary class hierarchy and including specific behavior classes as required in any business domain class. This approach avoids the static nature of a class hierarchy by allowing behavior modifications at run time and allows one class to implement behaviors buffet-style, instead of being restricted to the behaviors of its ancestor classes.","['composite', 'reuse', 'principle', 'alternative', 'inheritance', 'technique', 'support', 'polymorphism', 'code', 'reuse', 'separate', 'behavior', 'primary', 'class', 'hierarchy', 'include', 'specific', 'behavior', 'class', 'require', 'business', 'domain', 'class', 'approach', 'avoid', 'static', 'nature', 'class', 'hierarchy', 'allow', 'behavior', 'modification', 'run', 'time', 'allow', 'class', 'implement', 'behavior', 'buffet', 'style', 'instead', 'restrict', 'behavior', 'ancestor', 'class']"
4438,"Implementation inheritance is controversial among programmers and theoreticians of object-oriented programming since at least the 1990s. Among them are the authors of Design Patterns, who advocate interface inheritance instead, and favor composition over inheritance. For example, the decorator pattern as mentioned above has been proposed to overcome the static nature of inheritance between classes. As a more fundamental solution to the same problem, role-oriented programming introduces a distinct relationship, played-by, combining properties of inheritance and composition into a new concept.citation needed","['implementation', 'inheritance', 'controversial', 'programmer', 'theoretician', 'object', 'orient', 'programming', '1990s', 'author', 'design', 'patterns', 'advocate', 'interface', 'inheritance', 'instead', 'favor', 'composition', 'inheritance', 'example', 'decorator', 'pattern', 'mention', 'propose', 'overcome', 'static', 'nature', 'inheritance', 'class', 'fundamental', 'solution', 'problem', 'role', 'orient', 'programming', 'introduce', 'distinct', 'relationship', 'play', 'combine', 'property', 'inheritance', 'composition', 'new', 'concept.citation', 'need']"
4439,"According to Allen Holub, the main problem with implementation inheritance is that it introduces unnecessary coupling in the form of the ""fragile base class problem"":6 modifications to the base class implementation can cause inadvertent behavioral changes in subclasses. Using interfaces avoids this problem because no implementation is shared, only the API.19 Another way of stating this is that ""inheritance breaks encapsulation"".20 The problem surfaces clearly in open object-oriented systems such as frameworks, where client code is expected to inherit from system-supplied classes and then substituted for the system's classes in its algorithms.6","['accord', 'allen', 'holub', 'main', 'problem', 'implementation', 'inheritance', 'introduce', 'unnecessary', 'coupling', 'form', 'fragile', 'base', 'class', 'problem', 'modification', 'base', 'class', 'implementation', 'cause', 'inadvertent', 'behavioral', 'change', 'subclass', 'interface', 'avoid', 'problem', 'implementation', 'share', 'api', 'way', 'state', 'inheritance', 'break', 'encapsulation', 'problem', 'surface', 'clearly', 'open', 'object', 'orient', 'system', 'framework', 'client', 'code', 'expect', 'inherit', 'system', 'supply', 'class', 'substitute', 'system', 'class', 'algorithms']"
4440,"Reportedly, Java inventor James Gosling has spoken against implementation inheritance, stating that he would not include it if he were to redesign Java.19 Language designs that decouple inheritance from subtyping interface inheritance appeared as early as 1990;21 a modern example of this is the Go programming language.","['reportedly', 'java', 'inventor', 'james', 'gosling', 'speak', 'implementation', 'inheritance', 'state', 'include', 'redesign', 'java', 'language', 'design', 'decouple', 'inheritance', 'subtype', 'interface', 'inheritance', 'appear', 'early', '1990', 'modern', 'example', 'programming', 'language']"
4441,"Complex inheritance, or inheritance used within an insufficiently mature design, may lead to the yo-yo problem. When inheritance was used as a primary approach to structure programs in the late 1990s, developers tended to break code into more layers of inheritance as the system functionality grew. If a development team combined multiple layers of inheritance with the single responsibility principle, this resulted in many very thin layers of code, with many layers consisting of only 1 or 2 lines of actual code.citation needed Too many layers make debugging a significant challenge, as it becomes hard to determine which layer needs to be debugged.","['complex', 'inheritance', 'inheritance', 'insufficiently', 'mature', 'design', 'lead', 'problem', 'inheritance', 'primary', 'approach', 'structure', 'program', 'late', '1990', 'developer', 'tend', 'break', 'code', 'layer', 'inheritance', 'system', 'functionality', 'grow', 'development', 'team', 'combine', 'multiple', 'layer', 'inheritance', 'single', 'responsibility', 'principle', 'result', 'thin', 'layer', 'code', 'layer', 'consist', 'line', 'actual', 'code.citation', 'need', 'layer', 'debug', 'significant', 'challenge', 'hard', 'determine', 'layer', 'need', 'debug']"
4442,"Another issue with inheritance is that subclasses must be defined in code, which means that program users cannot add new subclasses at runtime. Other design patterns such as Entity–component–system allow program users to define variations of an entity at runtime.","['issue', 'inheritance', 'subclass', 'define', 'code', 'mean', 'program', 'user', 'add', 'new', 'subclass', 'runtime', 'design', 'pattern', 'entity', 'component', 'system', 'allow', 'program', 'user', 'define', 'variation', 'entity', 'runtime']"
4443,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4444,"In software engineering, multitier architecture often referred to as n-tier architecture is a client–server architecture in which presentation, application processing and data management functions are physically separated. The most widespread use of multitier architecture is the three-tier architecture.","['software', 'engineering', 'multiti', 'architecture', 'refer', 'tier', 'architecture', 'client', 'server', 'architecture', 'presentation', 'application', 'processing', 'data', 'management', 'function', 'physically', 'separate', 'widespread', 'use', 'multiti', 'architecture', 'tier', 'architecture']"
4445,"N-tier application architecture provides a model by which developers can create flexible and reusable applications. By segregating an application into tiers, developers acquire the option of modifying or adding a specific tier, instead of reworking the entire application. A three-tier architecture is typically composed of a presentation tier, a logic tier, and a data tier.","['tier', 'application', 'architecture', 'provide', 'model', 'developer', 'create', 'flexible', 'reusable', 'application', 'segregate', 'application', 'tier', 'developer', 'acquire', 'option', 'modifying', 'add', 'specific', 'tier', 'instead', 'rework', 'entire', 'application', 'tier', 'architecture', 'typically', 'compose', 'presentation', 'tier', 'logic', 'tier', 'data', 'tier']"
4446,"While the concepts of layer and tier are often used interchangeably, one fairly common point of view is that there is indeed a difference. This view holds that a layer is a logical structuring mechanism for the conceptual elements that make up the software solution, while a tier is a physical structuring mechanism for the hardware elements that make up the system infrastructure.12 For example, a three-layer solution could easily be deployed on a single tier, such in the case of an extreme database-centric architecture called RDBMS-only architecture3 or in a personal workstation.4","['concept', 'layer', 'tier', 'interchangeably', 'fairly', 'common', 'point', 'view', 'difference', 'view', 'hold', 'layer', 'logical', 'structuring', 'mechanism', 'conceptual', 'element', 'software', 'solution', 'tier', 'physical', 'structuring', 'mechanism', 'hardware', 'element', 'system', 'infrastructure', 'example', 'layer', 'solution', 'easily', 'deploy', 'single', 'tier', 'case', 'extreme', 'database', 'centric', 'architecture', 'call', 'rdbms', 'architecture3', 'personal', 'workstation']"
4447,"The ""Layers"" architectural pattern have been described in various publications.5","['layers', 'architectural', 'pattern', 'describe', 'publications']"
4448,"In a logical multilayer architecture for an information system with an object-oriented design, the following four are the most common:","['logical', 'multilayer', 'architecture', 'information', 'system', 'object', 'orient', 'design', 'follow', 'common']"
4449,"The book Domain Driven Design describes some common uses for the above four layers, although its primary focus is the domain layer.9","['book', 'domain', 'driven', 'design', 'describe', 'common', 'use', 'layer', 'primary', 'focus', 'domain', 'layer']"
4450,"If the application architecture has no explicit distinction between the business layer and the presentation layer i.e., the presentation layer is considered part of the business layer, then a traditional client-server two-tier model has been implemented.citation needed","['application', 'architecture', 'explicit', 'distinction', 'business', 'layer', 'presentation', 'layer', 'i.e.', 'presentation', 'layer', 'consider', 'business', 'layer', 'traditional', 'client', 'server', 'tier', 'model', 'implemented.citation', 'need']"
4451,"The more usual convention is that the application layer or service layer is considered a sublayer of the business layer, typically encapsulating the API definition surfacing the supported business functionality. The application/business layers can, in fact, be further subdivided to emphasize additional sublayers of distinct responsibility. For example, if the model–view–presenter pattern is used, the presenter sublayer might be used as an additional layer between the user interface layer and the business/application layer as represented by the model sublayer.citation needed","['usual', 'convention', 'application', 'layer', 'service', 'layer', 'consider', 'sublayer', 'business', 'layer', 'typically', 'encapsulate', 'api', 'definition', 'surface', 'support', 'business', 'functionality', 'application', 'business', 'layer', 'fact', 'subdivide', 'emphasize', 'additional', 'sublayer', 'distinct', 'responsibility', 'example', 'model', 'view', 'presenter', 'pattern', 'presenter', 'sublayer', 'additional', 'layer', 'user', 'interface', 'layer', 'business', 'application', 'layer', 'represent', 'model', 'sublayer.citation', 'need']"
4452,"Some also identify a separate layer called the business infrastructure layer BI, located between the business layers and the infrastructure layers. It's also sometimes called the ""low-level business layer"" or the ""business services layer"". This layer is very general and can be used in several application tiers e.g. a CurrencyConverter.10","['identify', 'separate', 'layer', 'call', 'business', 'infrastructure', 'layer', 'locate', 'business', 'layer', 'infrastructure', 'layer', 'call', 'low', 'level', 'business', 'layer', 'business', 'service', 'layer', 'layer', 'general', 'application', 'tier', 'e.g.', 'currencyconverter']"
4453,"The infrastructure layer can be partitioned into different levels high-level or low-level technical services.10 Developers often focus on the persistence data access capabilities of the infrastructure layer and therefore only talk about the persistence layer or the data access layer instead of an infrastructure layer or technical services layer. In other words, the other kind of technical services is not always explicitly thought of as part of any particular layer.citation needed","['infrastructure', 'layer', 'partition', 'different', 'level', 'high', 'level', 'low', 'level', 'technical', 'services', 'developers', 'focus', 'persistence', 'datum', 'access', 'capability', 'infrastructure', 'layer', 'talk', 'persistence', 'layer', 'data', 'access', 'layer', 'instead', 'infrastructure', 'layer', 'technical', 'service', 'layer', 'word', 'kind', 'technical', 'service', 'explicitly', 'think', 'particular', 'layer.citation', 'need']"
4454,"A layer is on top of another, because it depends on it. Every layer can exist without the layers above it, and requires the layers below it to function. Another common view is that layers do not always strictly depend on only the adjacent layer below. For example, in a relaxed layered system as opposed to a strict layered system a layer can also depend on all the layers below it.5","['layer', 'depend', 'layer', 'exist', 'layer', 'require', 'layer', 'function', 'common', 'view', 'layer', 'strictly', 'depend', 'adjacent', 'layer', 'example', 'relaxed', 'layered', 'system', 'oppose', 'strict', 'layered', 'system', 'layer', 'depend', 'layer', 'it']"
4455,"Three-tier architecture is a client-server software architecture pattern in which the user interface presentation, functional process logic ""business rules"", computer data storage and data access are developed and maintained as independent modules, most often on separate platforms.11 It was developed by John J. Donovan in Open Environment Corporation OEC, a tools company he founded in Cambridge, Massachusetts.","['tier', 'architecture', 'client', 'server', 'software', 'architecture', 'pattern', 'user', 'interface', 'presentation', 'functional', 'process', 'logic', 'business', 'rule', 'computer', 'datum', 'storage', 'data', 'access', 'develop', 'maintain', 'independent', 'module', 'separate', 'platforms', 'develop', 'john', 'donovan', 'open', 'environment', 'corporation', 'oec', 'tool', 'company', 'found', 'cambridge', 'massachusetts']"
4456,"Apart from the usual advantages of modular software with well-defined interfaces, the three-tier architecture is intended to allow any of the three tiers to be upgraded or replaced independently in response to changes in requirements or technology. For example, a change of operating system in the presentation tier would only affect the user interface code.","['apart', 'usual', 'advantage', 'modular', 'software', 'define', 'interface', 'tier', 'architecture', 'intend', 'allow', 'tier', 'upgrade', 'replace', 'independently', 'response', 'change', 'requirement', 'technology', 'example', 'change', 'operate', 'system', 'presentation', 'tier', 'affect', 'user', 'interface', 'code']"
4457,"Typically, the user interface runs on a desktop PC or workstation and uses a standard graphical user interface, functional process logic that may consist of one or more separate modules running on a workstation or application server, and an RDBMS on a database server or mainframe that contains the computer data storage logic. The middle tier may be multitiered itself in which case the overall architecture is called an ""n-tier architecture"".","['typically', 'user', 'interface', 'run', 'desktop', 'workstation', 'use', 'standard', 'graphical', 'user', 'interface', 'functional', 'process', 'logic', 'consist', 'separate', 'module', 'run', 'workstation', 'application', 'server', 'rdbms', 'database', 'server', 'mainframe', 'contain', 'computer', 'datum', 'storage', 'logic', 'middle', 'tier', 'multitiere', 'case', 'overall', 'architecture', 'call', 'tier', 'architecture']"
4458,"In the web development field, three-tier is often used to refer to websites, commonly electronic commerce websites, which are built using three tiers:","['web', 'development', 'field', 'tier', 'refer', 'website', 'commonly', 'electronic', 'commerce', 'website', 'build', 'tier']"
4459,"Data transfer between tiers is part of the architecture. Protocols involved may include one or more of SNMP, CORBA, Java RMI, .NET Remoting, Windows Communication Foundation, sockets, UDP, web services or other standard or proprietary protocols. Often middleware is used to connect the separate tiers. Separate tiers often but not necessarily run on separate physical servers, and each tier may itself run on a cluster.","['datum', 'transfer', 'tier', 'architecture', 'protocol', 'involve', 'include', 'snmp', 'corba', 'java', 'rmi', '.net', 'remoting', 'windows', 'communication', 'foundation', 'socket', 'udp', 'web', 'service', 'standard', 'proprietary', 'protocol', 'middleware', 'connect', 'separate', 'tier', 'separate', 'tier', 'necessarily', 'run', 'separate', 'physical', 'server', 'tier', 'run', 'cluster']"
4460,"The end-to-end traceability of data flows through n-tier systems is a challenging task which becomes more important when systems increase in complexity. The Application Response Measurement defines concepts and APIs for measuring performance and correlating transactions between tiers. Generally, the term ""tiers"" is used to describe physical distribution of components of a system on separate servers, computers, or networks processing nodes. A three-tier architecture then will have three processing nodes. The term ""layers"" refers to a logical grouping of components which may or may not be physically located on one processing node.","['end', 'end', 'traceability', 'datum', 'flow', 'tier', 'system', 'challenging', 'task', 'important', 'system', 'increase', 'complexity', 'application', 'response', 'measurement', 'define', 'concept', 'api', 'measure', 'performance', 'correlating', 'transaction', 'tier', 'generally', 'term', 'tier', 'describe', 'physical', 'distribution', 'component', 'system', 'separate', 'server', 'computer', 'network', 'processing', 'node', 'tier', 'architecture', 'processing', 'node', 'term', 'layer', 'refer', 'logical', 'grouping', 'component', 'physically', 'locate', 'processing', 'node']"
4461,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4462,"In object-oriented programming, the template method is one of the behavioral design patterns identified by Gamma et al.1 in the book Design Patterns. The template method is a method in a superclass, usually an abstract superclass, and defines the skeleton of an operation in terms of a number of high-level steps. These steps are themselves implemented by additional helper methods in the same class as the template method.","['object', 'orient', 'programming', 'template', 'method', 'behavioral', 'design', 'pattern', 'identify', 'gamma', 'al', 'book', 'design', 'patterns', 'template', 'method', 'method', 'superclass', 'usually', 'abstract', 'superclass', 'define', 'skeleton', 'operation', 'term', 'number', 'high', 'level', 'step', 'step', 'implement', 'additional', 'helper', 'method', 'class', 'template', 'method']"
4463,"The helper methods may be either abstract methods, in which case subclasses are required to provide concrete implementations, or hook methods, which have empty bodies in the superclass. Subclasses can but are not required to customize the operation by overriding the hook methods. The intent of the template method is to define the overall structure of the operation, while allowing subclasses to refine, or redefine, certain steps.2","['helper', 'method', 'abstract', 'method', 'case', 'subclass', 'require', 'provide', 'concrete', 'implementation', 'hook', 'method', 'body', 'superclass', 'subclass', 'require', 'customize', 'operation', 'override', 'hook', 'method', 'intent', 'template', 'method', 'define', 'overall', 'structure', 'operation', 'allow', 'subclass', 'refine', 'redefine', 'certain', 'steps']"
4464,This pattern has two main parts:,"['pattern', 'main', 'part']"
4465,"At run-time, the algorithm represented by the template method is executed by sending the template message to an instance of one of the concrete subclasses. Through inheritance, the template method in the base class starts to execute. When the template method sends a message to self requesting one of the helper methods, the message will be received by the concrete sub-instance. If the helper method has been overridden, the overriding implementation in the sub-instance will execute; if it has not been overridden, the inherited implementation in the base class will execute. This mechanism ensures that the overall algorithm follows the same steps every time, while allowing the details of some steps to depend on which instance received the original request to execute the algorithm.","['run', 'time', 'algorithm', 'represent', 'template', 'method', 'execute', 'send', 'template', 'message', 'instance', 'concrete', 'subclass', 'inheritance', 'template', 'method', 'base', 'class', 'start', 'execute', 'template', 'method', 'send', 'message', 'self', 'request', 'helper', 'method', 'message', 'receive', 'concrete', 'sub', 'instance', 'helper', 'method', 'overridden', 'override', 'implementation', 'sub', 'instance', 'execute', 'overridden', 'inherit', 'implementation', 'base', 'class', 'execute', 'mechanism', 'ensure', 'overall', 'algorithm', 'follow', 'step', 'time', 'allow', 'detail', 'step', 'depend', 'instance', 'receive', 'original', 'request', 'execute', 'algorithm']"
4466,This pattern is an example of inversion of control because the high-level code no longer determines what algorithms to run; a lower-level algorithm is instead selected at run-time.,"['pattern', 'example', 'inversion', 'control', 'high', 'level', 'code', 'long', 'determine', 'algorithm', 'run', 'low', 'level', 'algorithm', 'instead', 'select', 'run', 'time']"
4467,"Some of the self messages sent by the template method may be to hook methods. These methods are implemented in the same base class as the template method, but with empty bodies i.e., they do nothing. Hook methods exist so that subclasses can override them, and can thus fine-tune the action of the algorithm without the need to override the template method itself. In other words, they provide a ""hook"" on which to ""hang"" variant implementations.","['self', 'message', 'send', 'template', 'method', 'hook', 'method', 'method', 'implement', 'base', 'class', 'template', 'method', 'body', 'i.e.', 'hook', 'method', 'exist', 'subclass', 'override', 'fine', 'tune', 'action', 'algorithm', 'need', 'override', 'template', 'method', 'word', 'provide', 'hook', 'hang', 'variant', 'implementation']"
4468,"In the above UML class diagram, the AbstractClass defines a templateMethod operation that defines the skeleton template of a behavior by","['uml', 'class', 'diagram', 'abstractclass', 'define', 'templatemethod', 'operation', 'define', 'skeleton', 'template', 'behavior']"
4469,"The template method is used in frameworks, where each implements the invariant parts of a domain's architecture, while providing hook methods for customization. This is an example of inversion of control. The template method is used for the following reasons.3","['template', 'method', 'framework', 'implement', 'invariant', 'part', 'domain', 'architecture', 'provide', 'hook', 'method', 'customization', 'example', 'inversion', 'control', 'template', 'method', 'follow', 'reasons']"
4470,"The template pattern is useful when working with auto-generated code. The challenge of working with generated code is that changes to the source code will lead to changes in the generated code; if hand-written modifications have been made to the generated code, these will be lost. How, then, should the generated code be customized?","['template', 'pattern', 'useful', 'work', 'auto', 'generate', 'code', 'challenge', 'work', 'generate', 'code', 'change', 'source', 'code', 'lead', 'change', 'generate', 'code', 'hand', 'write', 'modification', 'generate', 'code', 'lose', 'generate', 'code', 'customize']"
4471,"The Template pattern provides a solution. If the generated code follows the template method pattern, the generated code will all be an abstract superclass. Provided that hand-written customizations are confined to a subclass, the code generator can be run again without risk of over-writing these modifications. When used with code generation, this pattern is sometimes referred to as the generation gap pattern.7","['template', 'pattern', 'provide', 'solution', 'generate', 'code', 'follow', 'template', 'method', 'pattern', 'generate', 'code', 'abstract', 'superclass', 'provide', 'hand', 'write', 'customization', 'confine', 'subclass', 'code', 'generator', 'run', 'risk', 'writing', 'modification', 'code', 'generation', 'pattern', 'refer', 'generation', 'gap', 'pattern']"
4472,"Test-driven development TDD is a software development process relying on software requirements being converted to test cases before software is fully developed, and tracking all software development by repeatedly testing the software against all test cases. This is as opposed to software being developed first and test cases created later.","['test', 'drive', 'development', 'tdd', 'software', 'development', 'process', 'rely', 'software', 'requirement', 'convert', 'test', 'case', 'software', 'fully', 'develop', 'track', 'software', 'development', 'repeatedly', 'test', 'software', 'test', 'case', 'oppose', 'software', 'develop', 'test', 'case', 'create', 'later']"
4473,"Software engineer Kent Beck, who is credited with having developed or ""rediscovered""1 the technique, stated in 2003 that TDD encourages simple designs and inspires confidence.2","['software', 'engineer', 'kent', 'beck', 'credit', 'having', 'develop', 'rediscovered', 'technique', 'state', '2003', 'tdd', 'encourage', 'simple', 'design', 'inspire', 'confidence']"
4474,"Test-driven development is related to the test-first programming concepts of extreme programming, begun in 1999,3 but more recently has created more general interest in its own right.4","['test', 'drive', 'development', 'relate', 'test', 'programming', 'concept', 'extreme', 'programming', 'begin', '1999', 'recently', 'create', 'general', 'interest', 'right']"
4475,Programmers also apply the concept to improving and debugging legacy code developed with older techniques.5,"['programmer', 'apply', 'concept', 'improve', 'debug', 'legacy', 'code', 'develop', 'old', 'techniques']"
4476,The following sequence is based on the book Test-Driven Development by Example:2,"['following', 'sequence', 'base', 'book', 'test', 'drive', 'development', 'example']"
4477,"There are various aspects to using test-driven development, for example the principles of ""keep it simple, stupid"" KISS and ""You aren't gonna need it"" YAGNI. By focusing on writing only the code necessary to pass tests, designs can often be cleaner and clearer than is achieved by other methods.2 In Test-Driven Development by Example, Kent Beck also suggests the principle ""Fake it till you make it"".","['aspect', 'test', 'drive', 'development', 'example', 'principle', 'simple', 'stupid', 'kiss', 'go', 'need', 'yagni', 'focus', 'write', 'code', 'necessary', 'pass', 'test', 'design', 'clean', 'clear', 'achieve', 'methods', 'test', 'drive', 'development', 'example', 'kent', 'beck', 'suggest', 'principle', 'fake', 'till']"
4478,"To achieve some advanced design concept such as a design pattern, tests are written that generate that design. The code may remain simpler than the target pattern, but still pass all required tests. This can be unsettling at first but it allows the developer to focus only on what is important.","['achieve', 'advanced', 'design', 'concept', 'design', 'pattern', 'test', 'write', 'generate', 'design', 'code', 'remain', 'simple', 'target', 'pattern', 'pass', 'require', 'test', 'unsettling', 'allow', 'developer', 'focus', 'important']"
4479,"Writing the tests first: The tests should be written before the functionality that is to be tested. This has been claimed to have many benefits. It helps ensure that the application is written for testability, as the developers must consider how to test the application from the outset rather than adding it later. It also ensures that tests for every feature get written. Additionally, writing the tests first leads to a deeper and earlier understanding of the product requirements, ensures the effectiveness of the test code, and maintains a continual focus on software quality.6 When writing feature-first code, there is a tendency by developers and organizations to push the developer on to the next feature, even neglecting testing entirely. The first TDD test might not even compile at first, because the classes and methods it requires may not yet exist. Nevertheless, that first test functions as the beginning of an executable specification.7","['write', 'test', 'test', 'write', 'functionality', 'test', 'claim', 'benefit', 'help', 'ensure', 'application', 'write', 'testability', 'developer', 'consider', 'test', 'application', 'outset', 'add', 'later', 'ensure', 'test', 'feature', 'write', 'additionally', 'write', 'test', 'lead', 'deep', 'early', 'understanding', 'product', 'requirement', 'ensure', 'effectiveness', 'test', 'code', 'maintain', 'continual', 'focus', 'software', 'quality', 'write', 'feature', 'code', 'tendency', 'developer', 'organization', 'push', 'developer', 'feature', 'neglect', 'testing', 'entirely', 'tdd', 'test', 'compile', 'class', 'method', 'require', 'exist', 'test', 'function', 'beginning', 'executable', 'specification']"
4480,"Each test case fails initially: This ensures that the test really works and can catch an error. Once this is shown, the underlying functionality can be implemented. This has led to the ""test-driven development mantra"", which is ""red/green/refactor"", where red means fail and green means pass. Test-driven development constantly repeats the steps of adding test cases that fail, passing them, and refactoring. Receiving the expected test results at each stage reinforces the developer's mental model of the code, boosts confidence and increases productivity.","['test', 'case', 'fail', 'initially', 'ensure', 'test', 'work', 'catch', 'error', 'show', 'underlie', 'functionality', 'implement', 'lead', 'test', 'drive', 'development', 'mantra', 'red', 'green', 'refactor', 'red', 'mean', 'fail', 'green', 'mean', 'pass', 'test', 'drive', 'development', 'constantly', 'repeat', 'step', 'add', 'test', 'case', 'fail', 'pass', 'refactore', 'receive', 'expect', 'test', 'result', 'stage', 'reinforce', 'developer', 'mental', 'model', 'code', 'boost', 'confidence', 'increase', 'productivity']"
4481,"For TDD, a unit is most commonly defined as a class, or a group of related functions often called a module. Keeping units relatively small is claimed to provide critical benefits, including:","['tdd', 'unit', 'commonly', 'define', 'class', 'group', 'relate', 'function', 'call', 'module', 'keep', 'unit', 'relatively', 'small', 'claim', 'provide', 'critical', 'benefit', 'include']"
4482,"Advanced practices of test-driven development can lead to acceptance test–driven development ATDD and specification by example where the criteria specified by the customer are automated into acceptance tests, which then drive the traditional unit test-driven development UTDD process.8 This process ensures the customer has an automated mechanism to decide whether the software meets their requirements. With ATDD, the development team now has a specific target to satisfy – the acceptance tests – which keeps them continuously focused on what the customer really wants from each user story.","['advanced', 'practice', 'test', 'drive', 'development', 'lead', 'acceptance', 'test', 'drive', 'development', 'atdd', 'specification', 'example', 'criterion', 'specify', 'customer', 'automate', 'acceptance', 'test', 'drive', 'traditional', 'unit', 'test', 'drive', 'development', 'utdd', 'process', 'process', 'ensure', 'customer', 'automate', 'mechanism', 'decide', 'software', 'meet', 'requirement', 'atdd', 'development', 'team', 'specific', 'target', 'satisfy', 'acceptance', 'test', 'keep', 'continuously', 'focus', 'customer', 'want', 'user', 'story']"
4483,"Effective layout of a test case ensures all required actions are completed, improves the readability of the test case, and smooth's the flow of execution. Consistent structure helps in building a self-documenting test case. A commonly applied structure for test cases has 1 setup, 2 execution, 3 validation, and 4 cleanup.","['effective', 'layout', 'test', 'case', 'ensure', 'require', 'action', 'complete', 'improve', 'readability', 'test', 'case', 'smooth', 'flow', 'execution', 'consistent', 'structure', 'help', 'build', 'self', 'document', 'test', 'case', 'commonly', 'apply', 'structure', 'test', 'case', 'setup', 'execution', 'validation', 'cleanup']"
4484,"Some best practices that an individual could follow would be to separate common set-up and tear-down logic into test support services utilized by the appropriate test cases, to keep each test oracle focused on only the results necessary to validate its test, and to design time-related tests to allow tolerance for execution in non-real time operating systems. The common practice of allowing a 5-10 percent margin for late execution reduces the potential number of false negatives in test execution. It is also suggested to treat test code with the same respect as production code. Test code must work correctly for both positive and negative cases, last a long time, and be readable and maintainable. Teams can get together with and review tests and test practices to share effective techniques and catch bad habits.9","['good', 'practice', 'individual', 'follow', 'separate', 'common', 'set', 'tear', 'logic', 'test', 'support', 'service', 'utilize', 'appropriate', 'test', 'case', 'test', 'oracle', 'focus', 'result', 'necessary', 'validate', 'test', 'design', 'time', 'relate', 'test', 'allow', 'tolerance', 'execution', 'non', 'real', 'time', 'operating', 'system', 'common', 'practice', 'allow', 'percent', 'margin', 'late', 'execution', 'reduce', 'potential', 'number', 'false', 'negative', 'test', 'execution', 'suggest', 'treat', 'test', 'code', 'respect', 'production', 'code', 'test', 'code', 'work', 'correctly', 'positive', 'negative', 'case', 'long', 'time', 'readable', 'maintainable', 'team', 'review', 'test', 'test', 'practice', 'share', 'effective', 'technique', 'catch', 'bad', 'habits']"
4485,"A 2005 study found that using TDD meant writing more tests and, in turn, programmers who wrote more tests tended to be more productive.10 Hypotheses relating to code quality and a more direct correlation between TDD and productivity were inconclusive.11","['2005', 'study', 'find', 'tdd', 'mean', 'write', 'test', 'turn', 'programmer', 'write', 'test', 'tend', 'productive', 'hypotheses', 'relate', 'code', 'quality', 'direct', 'correlation', 'tdd', 'productivity', 'inconclusive']"
4486,"Programmers using pure TDD on new ""greenfield"" projects reported they only rarely felt the need to invoke a debugger. Used in conjunction with a version control system, when tests fail unexpectedly, reverting the code to the last version that passed all tests may often be more productive than debugging.12","['programmer', 'pure', 'tdd', 'new', 'greenfield', 'project', 'report', 'rarely', 'feel', 'need', 'invoke', 'debugger', 'conjunction', 'version', 'control', 'system', 'test', 'fail', 'unexpectedly', 'revert', 'code', 'version', 'pass', 'test', 'productive', 'debugging']"
4487,"Test-driven development offers more than just simple validation of correctness, but can also drive the design of a program.13 By focusing on the test cases first, one must imagine how the functionality is used by clients in the first case, the test cases. So, the programmer is concerned with the interface before the implementation. This benefit is complementary to design by contract as it approaches code through test cases rather than through mathematical assertions or preconceptions.","['test', 'drive', 'development', 'offer', 'simple', 'validation', 'correctness', 'drive', 'design', 'program', 'focus', 'test', 'case', 'imagine', 'functionality', 'client', 'case', 'test', 'case', 'programmer', 'concern', 'interface', 'implementation', 'benefit', 'complementary', 'design', 'contract', 'approach', 'code', 'test', 'case', 'mathematical', 'assertion', 'preconception']"
4488,"Test-driven development offers the ability to take small steps when required. It allows a programmer to focus on the task at hand as the first goal is to make the test pass. Exceptional cases and error handling are not considered initially, and tests to create these extraneous circumstances are implemented separately. Test-driven development ensures in this way that all written code is covered by at least one test. This gives the programming team, and subsequent users, a greater level of confidence in the code.","['test', 'drive', 'development', 'offer', 'ability', 'small', 'step', 'require', 'allow', 'programmer', 'focus', 'task', 'hand', 'goal', 'test', 'pass', 'exceptional', 'case', 'error', 'handling', 'consider', 'initially', 'test', 'create', 'extraneous', 'circumstance', 'implement', 'separately', 'test', 'drive', 'development', 'ensure', 'way', 'write', 'code', 'cover', 'test', 'give', 'programming', 'team', 'subsequent', 'user', 'great', 'level', 'confidence', 'code']"
4489,"While it is true that more code is required with TDD than without TDD because of the unit test code, the total code implementation time could be shorter based on a model by Müller and Padberg.14 Large numbers of tests help to limit the number of defects in the code. The early and frequent nature of the testing helps to catch defects early in the development cycle, preventing them from becoming endemic and expensive problems. Eliminating defects early in the process usually avoids lengthy and tedious debugging later in the project.","['true', 'code', 'require', 'tdd', 'tdd', 'unit', 'test', 'code', 'total', 'code', 'implementation', 'time', 'shorter', 'base', 'model', 'müller', 'padberg', 'large', 'number', 'test', 'help', 'limit', 'number', 'defect', 'code', 'early', 'frequent', 'nature', 'testing', 'help', 'catch', 'defect', 'early', 'development', 'cycle', 'prevent', 'endemic', 'expensive', 'problem', 'eliminate', 'defect', 'early', 'process', 'usually', 'avoid', 'lengthy', 'tedious', 'debugging', 'later', 'project']"
4490,"TDD can lead to more modularized, flexible, and extensible code. This effect often comes about because the methodology requires that the developers think of the software in terms of small units that can be written and tested independently and integrated together later. This leads to smaller, more focused classes, looser coupling, and cleaner interfaces. The use of the mock object design pattern also contributes to the overall modularization of the code because this pattern requires that the code be written so that modules can be switched easily between mock versions for unit testing and ""real"" versions for deployment.","['tdd', 'lead', 'modularize', 'flexible', 'extensible', 'code', 'effect', 'come', 'methodology', 'require', 'developer', 'think', 'software', 'term', 'small', 'unit', 'write', 'test', 'independently', 'integrate', 'later', 'lead', 'small', 'focused', 'class', 'loose', 'coupling', 'clean', 'interface', 'use', 'mock', 'object', 'design', 'pattern', 'contribute', 'overall', 'modularization', 'code', 'pattern', 'require', 'code', 'write', 'module', 'switch', 'easily', 'mock', 'version', 'unit', 'testing', 'real', 'version', 'deployment']"
4491,"Because no more code is written than necessary to pass a failing test case, automated tests tend to cover every code path. For example, for a TDD developer to add an else branch to an existing if statement, the developer would first have to write a failing test case that motivates the branch. As a result, the automated tests resulting from TDD tend to be very thorough: they detect any unexpected changes in the code's behaviour. This detects problems that can arise where a change later in the development cycle unexpectedly alters other functionality.","['code', 'write', 'necessary', 'pass', 'fail', 'test', 'case', 'automate', 'test', 'tend', 'cover', 'code', 'path', 'example', 'tdd', 'developer', 'add', 'branch', 'exist', 'statement', 'developer', 'write', 'fail', 'test', 'case', 'motivate', 'branch', 'result', 'automate', 'test', 'result', 'tdd', 'tend', 'thorough', 'detect', 'unexpected', 'change', 'code', 'behaviour', 'detect', 'problem', 'arise', 'change', 'later', 'development', 'cycle', 'unexpectedly', 'alter', 'functionality']"
4492,"Madeyski15 provided empirical evidence via a series of laboratory experiments with over 200 developers regarding the superiority of the TDD practice over the traditional Test-Last approach or testing for correctness approach, with respect to the lower coupling between objects CBO. The mean effect size represents a medium but close to large effect on the basis of meta-analysis of the performed experiments which is a substantial finding. It suggests a better modularization i.e., a more modular design, easier reuse and testing of the developed software products due to the TDD programming practice.15 Madeyski also measured the effect of the TDD practice on unit tests using branch coverage BC and mutation score indicator MSI,161718 which are indicators of the thoroughness and the fault detection effectiveness of unit tests, respectively. The effect size of TDD on branch coverage was medium in size and therefore is considered substantive effect.15 These findings have been subsequently confirmed by further, smaller experimental evaluations of TDD.19202122","['madeyski15', 'provide', 'empirical', 'evidence', 'series', 'laboratory', 'experiment', '200', 'developer', 'superiority', 'tdd', 'practice', 'traditional', 'test', 'approach', 'test', 'correctness', 'approach', 'respect', 'low', 'coupling', 'object', 'cbo', 'mean', 'effect', 'size', 'represent', 'medium', 'close', 'large', 'effect', 'basis', 'meta', 'analysis', 'perform', 'experiment', 'substantial', 'finding', 'suggest', 'well', 'modularization', 'i.e.', 'modular', 'design', 'easy', 'reuse', 'testing', 'develop', 'software', 'product', 'tdd', 'programming', 'practice', 'madeyski', 'measure', 'effect', 'tdd', 'practice', 'unit', 'test', 'branch', 'coverage', 'mutation', 'score', 'indicator', 'msi', 'indicator', 'thoroughness', 'fault', 'detection', 'effectiveness', 'unit', 'test', 'respectively', 'effect', 'size', 'tdd', 'branch', 'coverage', 'medium', 'size', 'consider', 'substantive', 'effect', 'finding', 'subsequently', 'confirm', 'small', 'experimental', 'evaluation', 'tdd']"
4493,"Test-driven development does not perform sufficient testing in situations where full functional tests are required to determine success or failure, due to extensive use of unit tests.23 Examples of these are user interfaces, programs that work with databases, and some that depend on specific network configurations. TDD encourages developers to put the minimum amount of code into such modules and to maximize the logic that is in testable library code, using fakes and mocks to represent the outside world.24","['test', 'drive', 'development', 'perform', 'sufficient', 'testing', 'situation', 'functional', 'test', 'require', 'determine', 'success', 'failure', 'extensive', 'use', 'unit', 'tests', 'examples', 'user', 'interface', 'program', 'work', 'database', 'depend', 'specific', 'network', 'configuration', 'tdd', 'encourage', 'developer', 'minimum', 'code', 'module', 'maximize', 'logic', 'testable', 'library', 'code', 'fake', 'mock', 'represent', 'outside', 'world']"
4494,"Management support is essential. Without the entire organization believing that test-driven development is going to improve the product, management may feel that time spent writing tests is wasted.25","['management', 'support', 'essential', 'entire', 'organization', 'believe', 'test', 'drive', 'development', 'go', 'improve', 'product', 'management', 'feel', 'time', 'spend', 'write', 'test', 'wasted']"
4495,"Unit tests created in a test-driven development environment are typically created by the developer who is writing the code being tested. Therefore, the tests may share blind spots with the code: if, for example, a developer does not realize that certain input parameters must be checked, most likely neither the test nor the code will verify those parameters. Another example: if the developer misinterprets the requirements for the module they are developing, the code and the unit tests they write will both be wrong in the same way. Therefore, the tests will pass, giving a false sense of correctness.","['unit', 'test', 'create', 'test', 'drive', 'development', 'environment', 'typically', 'create', 'developer', 'write', 'code', 'test', 'test', 'share', 'blind', 'spot', 'code', 'example', 'developer', 'realize', 'certain', 'input', 'parameter', 'check', 'likely', 'test', 'code', 'verify', 'parameter', 'example', 'developer', 'misinterpret', 'requirement', 'module', 'develop', 'code', 'unit', 'test', 'write', 'wrong', 'way', 'test', 'pass', 'give', 'false', 'sense', 'correctness']"
4496,"A high number of passing unit tests may bring a false sense of security, resulting in fewer additional software testing activities, such as integration testing and compliance testing.","['high', 'number', 'pass', 'unit', 'test', 'bring', 'false', 'sense', 'security', 'result', 'few', 'additional', 'software', 'testing', 'activity', 'integration', 'testing', 'compliance', 'testing']"
4497,"Tests become part of the maintenance overhead of a project. Badly written tests, for example ones that include hard-coded error strings, are themselves prone to failure, and they are expensive to maintain. This is especially the case with fragile tests.26 There is a risk that tests that regularly generate false failures will be ignored, so that when a real failure occurs, it may not be detected. It is possible to write tests for low and easy maintenance, for example by the reuse of error strings, and this should be a goal during the code refactoring phase described above.","['test', 'maintenance', 'overhead', 'project', 'badly', 'write', 'test', 'example', 'one', 'include', 'hard', 'code', 'error', 'string', 'prone', 'failure', 'expensive', 'maintain', 'especially', 'case', 'fragile', 'tests', 'risk', 'test', 'regularly', 'generate', 'false', 'failure', 'ignore', 'real', 'failure', 'occur', 'detect', 'possible', 'write', 'test', 'low', 'easy', 'maintenance', 'example', 'reuse', 'error', 'string', 'goal', 'code', 'refactoring', 'phase', 'describe']"
4498,"Writing and maintaining an excessive number of tests costs time. Also, more-flexible modules with limited tests might accept new requirements without the need for changing the tests. For those reasons, testing for only extreme conditions, or a small sample of data, can be easier to adjust than a set of highly detailed tests.","['write', 'maintain', 'excessive', 'number', 'test', 'cost', 'time', 'flexible', 'module', 'limited', 'test', 'accept', 'new', 'requirement', 'need', 'change', 'test', 'reason', 'test', 'extreme', 'condition', 'small', 'sample', 'datum', 'easy', 'adjust', 'set', 'highly', 'detailed', 'test']"
4499,"The level of coverage and testing detail achieved during repeated TDD cycles cannot easily be re-created at a later date. Therefore, these original, or early, tests become increasingly precious as time goes by. The tactic is to fix it early. Also, if a poor architecture, a poor design, or a poor testing strategy leads to a late change that makes dozens of existing tests fail, then it is important that they are individually fixed. Merely deleting, disabling or rashly altering them can lead to undetectable holes in the test coverage.","['level', 'coverage', 'testing', 'detail', 'achieve', 'repeat', 'tdd', 'cycle', 'easily', 'create', 'later', 'date', 'original', 'early', 'test', 'increasingly', 'precious', 'time', 'go', 'tactic', 'fix', 'early', 'poor', 'architecture', 'poor', 'design', 'poor', 'testing', 'strategy', 'lead', 'late', 'change', 'make', 'dozen', 'exist', 'test', 'fail', 'important', 'individually', 'fix', 'merely', 'delete', 'disable', 'rashly', 'alter', 'lead', 'undetectable', 'hole', 'test', 'coverage']"
4500,"Test-driven development has been adopted outside of software development, in both product and service teams, as test-driven work.27 For testing to be successful, it needs to be practiced at the micro and macro levels. Every method in a class, every input data value, log message, and error code, amongst other data points, need to be tested.28 Similar to TDD, non-software teams develop quality control QC checks usually manual tests rather than automated tests for each aspect of the work prior to commencing. These QC checks are then used to inform the design and validate the associated outcomes. The six steps of the TDD sequence are applied with minor semantic changes:","['test', 'drive', 'development', 'adopt', 'outside', 'software', 'development', 'product', 'service', 'team', 'test', 'drive', 'work', 'testing', 'successful', 'need', 'practice', 'micro', 'macro', 'level', 'method', 'class', 'input', 'datum', 'value', 'log', 'message', 'error', 'code', 'datum', 'point', 'need', 'tested', 'similar', 'tdd', 'non', 'software', 'team', 'develop', 'quality', 'control', 'check', 'usually', 'manual', 'test', 'automate', 'test', 'aspect', 'work', 'prior', 'commence', 'check', 'inform', 'design', 'validate', 'associated', 'outcome', 'step', 'tdd', 'sequence', 'apply', 'minor', 'semantic', 'change']"
4501,"Test-driven development is related to, but different from acceptance test–driven development ATDD.29 TDD is primarily a developer's tool to help create well-written unit of code function, class, or module that correctly performs a set of operations. ATDD is a communication tool between the customer, developer, and tester to ensure that the requirements are well-defined. TDD requires test automation. ATDD does not, although automation helps with regression testing. Tests used in TDD can often be derived from ATDD tests, since the code units implement some portion of a requirement. ATDD tests should be readable by the customer. TDD tests do not need to be.","['test', 'drive', 'development', 'relate', 'different', 'acceptance', 'test', 'drive', 'development', 'atdd', 'tdd', 'primarily', 'developer', 'tool', 'help', 'create', 'write', 'unit', 'code', 'function', 'class', 'module', 'correctly', 'perform', 'set', 'operation', 'atdd', 'communication', 'tool', 'customer', 'developer', 'tester', 'ensure', 'requirement', 'define', 'tdd', 'require', 'test', 'automation', 'atdd', 'automation', 'help', 'regression', 'testing', 'test', 'tdd', 'derive', 'atdd', 'test', 'code', 'unit', 'implement', 'portion', 'requirement', 'atdd', 'test', 'readable', 'customer', 'tdd', 'test', 'need']"
4502,"BDD behavior-driven development combines practices from TDD and from ATDD.30 It includes the practice of writing tests first, but focuses on tests which describe behavior, rather than tests which test a unit of implementation. Tools such as JBehave, Cucumber, Mspec and Specflow provide syntaxes which allow product owners, developers and test engineers to define together the behaviors which can then be translated into automated tests.","['bdd', 'behavior', 'drive', 'development', 'combine', 'practice', 'tdd', 'atdd', 'include', 'practice', 'write', 'test', 'focus', 'test', 'describe', 'behavior', 'test', 'test', 'unit', 'implementation', 'tool', 'jbehave', 'cucumber', 'mspec', 'specflow', 'provide', 'syntax', 'allow', 'product', 'owner', 'developer', 'test', 'engineer', 'define', 'behavior', 'translate', 'automate', 'test']"
4503,"Test suite code clearly has to be able to access the code it is testing. On the other hand, normal design criteria such as information hiding, encapsulation and the separation of concerns should not be compromised. Therefore, unit test code for TDD is usually written within the same project or module as the code being tested.","['test', 'suite', 'code', 'clearly', 'able', 'access', 'code', 'test', 'hand', 'normal', 'design', 'criterion', 'information', 'hiding', 'encapsulation', 'separation', 'concern', 'compromise', 'unit', 'test', 'code', 'tdd', 'usually', 'write', 'project', 'module', 'code', 'test']"
4504,"In object oriented design this still does not provide access to private data and methods. Therefore, extra work may be necessary for unit tests. In Java and other languages, a developer can use reflection to access private fields and methods.31 Alternatively, an inner class can be used to hold the unit tests so they have visibility of the enclosing class's members and attributes. In the .NET Framework and some other programming languages, partial classes may be used to expose private methods and data for the tests to access.","['object', 'orient', 'design', 'provide', 'access', 'private', 'datum', 'method', 'extra', 'work', 'necessary', 'unit', 'test', 'java', 'language', 'developer', 'use', 'reflection', 'access', 'private', 'field', 'methods', 'alternatively', 'inner', 'class', 'hold', 'unit', 'test', 'visibility', 'enclose', 'class', 'member', 'attribute', '.net', 'framework', 'programming', 'language', 'partial', 'class', 'expose', 'private', 'method', 'datum', 'test', 'access']"
4505,"It is important that such testing hacks do not remain in the production code. In C and other languages, compiler directives such as #if DEBUG ... #endif can be placed around such additional classes and indeed all other test-related code to prevent them being compiled into the released code. This means the released code is not exactly the same as what was unit tested. The regular running of fewer but more comprehensive, end-to-end, integration tests on the final release build can ensure among other things that no production code exists that subtly relies on aspects of the test harness.","['important', 'testing', 'hack', 'remain', 'production', 'code', 'language', 'compiler', 'directive', 'debug', 'endif', 'place', 'additional', 'class', 'test', 'relate', 'code', 'prevent', 'compile', 'release', 'code', 'mean', 'release', 'code', 'exactly', 'unit', 'test', 'regular', 'running', 'few', 'comprehensive', 'end', 'end', 'integration', 'test', 'final', 'release', 'build', 'ensure', 'thing', 'production', 'code', 'exist', 'subtly', 'rely', 'aspect', 'test', 'harness']"
4506,"There is some debate among practitioners of TDD, documented in their blogs and other writings, as to whether it is wise to test private methods and data anyway. Some argue that private members are a mere implementation detail that may change, and should be allowed to do so without breaking numbers of tests. Thus it should be sufficient to test any class through its public interface or through its subclass interface, which some languages call the ""protected"" interface.32 Others say that crucial aspects of functionality may be implemented in private methods and testing them directly offers advantage of smaller and more direct unit tests.3334","['debate', 'practitioner', 'tdd', 'document', 'blog', 'writing', 'wise', 'test', 'private', 'method', 'datum', 'argue', 'private', 'member', 'mere', 'implementation', 'detail', 'change', 'allow', 'break', 'number', 'test', 'sufficient', 'test', 'class', 'public', 'interface', 'subclass', 'interface', 'language', 'protect', 'interface', 'crucial', 'aspect', 'functionality', 'implement', 'private', 'method', 'test', 'directly', 'offer', 'advantage', 'small', 'direct', 'unit', 'tests']"
4507,There are many testing frameworks and tools that are useful in TDD.,"['testing', 'framework', 'tool', 'useful', 'tdd']"
4508,"Developers may use computer-assisted testing frameworks, commonly collectively named xUnit which are derived from SUnit, created in 1998, to create and automatically run the test cases. xUnit frameworks provide assertion-style test validation capabilities and result reporting. These capabilities are critical for automation as they move the burden of execution validation from an independent post-processing activity to one that is included in the test execution. The execution framework provided by these test frameworks allows for the automatic execution of all system test cases or various subsets along with other features.35","['developer', 'use', 'computer', 'assist', 'testing', 'framework', 'commonly', 'collectively', 'name', 'xunit', 'derive', 'sunit', 'create', '1998', 'create', 'automatically', 'run', 'test', 'case', 'xunit', 'framework', 'provide', 'assertion', 'style', 'test', 'validation', 'capability', 'result', 'report', 'capability', 'critical', 'automation', 'burden', 'execution', 'validation', 'independent', 'post', 'processing', 'activity', 'include', 'test', 'execution', 'execution', 'framework', 'provide', 'test', 'framework', 'allow', 'automatic', 'execution', 'system', 'test', 'case', 'subset', 'features']"
4509,Testing frameworks may accept unit test output in the language-agnostic Test Anything Protocol created in 1987.,"['testing', 'framework', 'accept', 'unit', 'test', 'output', 'language', 'agnostic', 'test', 'protocol', 'create', '1987']"
4510,"Unit tests are so named because they each test one unit of code. A complex module may have a thousand unit tests and a simple module may have only ten. The unit tests used for TDD should never cross process boundaries in a program, let alone network connections. Doing so introduces delays that make tests run slowly and discourage developers from running the whole suite. Introducing dependencies on external modules or data also turns unit tests into integration tests. If one module misbehaves in a chain of interrelated modules, it is not so immediately clear where to look for the cause of the failure.","['unit', 'test', 'name', 'test', 'unit', 'code', 'complex', 'module', 'thousand', 'unit', 'test', 'simple', 'module', 'unit', 'test', 'tdd', 'cross', 'process', 'boundary', 'program', 'let', 'network', 'connection', 'introduce', 'delay', 'test', 'run', 'slowly', 'discourage', 'developer', 'run', 'suite', 'introduce', 'dependency', 'external', 'module', 'datum', 'turn', 'unit', 'test', 'integration', 'test', 'module', 'misbehave', 'chain', 'interrelated', 'module', 'immediately', 'clear', 'look', 'cause', 'failure']"
4511,"When code under development relies on a database, a web service, or any other external process or service, enforcing a unit-testable separation is also an opportunity and a driving force to design more modular, more testable and more reusable code.36 Two steps are necessary:","['code', 'development', 'rely', 'database', 'web', 'service', 'external', 'process', 'service', 'enforce', 'unit', 'testable', 'separation', 'opportunity', 'drive', 'force', 'design', 'modular', 'testable', 'reusable', 'code', 'step', 'necessary']"
4512,"Fake and mock object methods that return data, ostensibly from a data store or user, can help the test process by always returning the same, realistic data that tests can rely upon. They can also be set into predefined fault modes so that error-handling routines can be developed and reliably tested. In a fault mode, a method may return an invalid, incomplete or null response, or may throw an exception. Fake services other than data stores may also be useful in TDD: A fake encryption service may not, in fact, encrypt the data passed; a fake random number service may always return 1. Fake or mock implementations are examples of dependency injection.","['fake', 'mock', 'object', 'method', 'return', 'datum', 'ostensibly', 'data', 'store', 'user', 'help', 'test', 'process', 'return', 'realistic', 'datum', 'test', 'rely', 'set', 'predefine', 'fault', 'mode', 'error', 'handle', 'routine', 'develop', 'reliably', 'test', 'fault', 'mode', 'method', 'return', 'invalid', 'incomplete', 'null', 'response', 'throw', 'exception', 'fake', 'service', 'datum', 'store', 'useful', 'tdd', 'fake', 'encryption', 'service', 'fact', 'encrypt', 'datum', 'pass', 'fake', 'random', 'number', 'service', 'return', 'fake', 'mock', 'implementation', 'example', 'dependency', 'injection']"
4513,"A test double is a test-specific capability that substitutes for a system capability, typically a class or function, that the UUT depends on. There are two times at which test doubles can be introduced into a system: link and execution. Link time substitution is when the test double is compiled into the load module, which is executed to validate testing. This approach is typically used when running in an environment other than the target environment that requires doubles for the hardware level code for compilation. The alternative to linker substitution is run-time substitution in which the real functionality is replaced during the execution of a test case. This substitution is typically done through the reassignment of known function pointers or object replacement.","['test', 'double', 'test', 'specific', 'capability', 'substitute', 'system', 'capability', 'typically', 'class', 'function', 'uut', 'depend', 'time', 'test', 'double', 'introduce', 'system', 'link', 'execution', 'link', 'time', 'substitution', 'test', 'double', 'compile', 'load', 'module', 'execute', 'validate', 'testing', 'approach', 'typically', 'run', 'environment', 'target', 'environment', 'require', 'double', 'hardware', 'level', 'code', 'compilation', 'alternative', 'linker', 'substitution', 'run', 'time', 'substitution', 'real', 'functionality', 'replace', 'execution', 'test', 'case', 'substitution', 'typically', 'reassignment', 'know', 'function', 'pointer', 'object', 'replacement']"
4514,Test doubles are of a number of different types and varying complexities:,"['test', 'double', 'number', 'different', 'type', 'vary', 'complexity']"
4515,"A corollary of such dependency injection is that the actual database or other external-access code is never tested by the TDD process itself. To avoid errors that may arise from this, other tests are needed that instantiate the test-driven code with the ""real"" implementations of the interfaces discussed above. These are integration tests and are quite separate from the TDD unit tests. There are fewer of them, and they must be run less often than the unit tests. They can nonetheless be implemented using the same testing framework.","['corollary', 'dependency', 'injection', 'actual', 'database', 'external', 'access', 'code', 'test', 'tdd', 'process', 'avoid', 'error', 'arise', 'test', 'need', 'instantiate', 'test', 'drive', 'code', 'real', 'implementation', 'interface', 'discuss', 'integration', 'test', 'separate', 'tdd', 'unit', 'test', 'few', 'run', 'unit', 'test', 'nonetheless', 'implement', 'testing', 'framework']"
4516,"Integration tests that alter any persistent store or database should always be designed carefully with consideration of the initial and final state of the files or database, even if any test fails. This is often achieved using some combination of the following techniques:","['integration', 'test', 'alter', 'persistent', 'store', 'database', 'design', 'carefully', 'consideration', 'initial', 'final', 'state', 'file', 'database', 'test', 'fail', 'achieve', 'combination', 'follow', 'technique']"
4517,"Exercising TDD on large, challenging systems requires a modular architecture, well-defined components with published interfaces, and disciplined system layering with maximization of platform independence. These proven practices yield increased testability and facilitate the application of build and test automation.6","['exercise', 'tdd', 'large', 'challenging', 'system', 'require', 'modular', 'architecture', 'define', 'component', 'publish', 'interface', 'discipline', 'system', 'layer', 'maximization', 'platform', 'independence', 'prove', 'practice', 'yield', 'increase', 'testability', 'facilitate', 'application', 'build', 'test', 'automation']"
4518,Complex systems require an architecture that meets a range of requirements. A key subset of these requirements includes support for the complete and effective testing of the system. Effective modular design yields components that share traits essential for effective TDD.,"['complex', 'system', 'require', 'architecture', 'meet', 'range', 'requirement', 'key', 'subset', 'requirement', 'include', 'support', 'complete', 'effective', 'testing', 'system', 'effective', 'modular', 'design', 'yield', 'component', 'share', 'trait', 'essential', 'effective', 'tdd']"
4519,"A key technique for building effective modular architecture is Scenario Modeling where a set of sequence charts is constructed, each one focusing on a single system-level execution scenario. The Scenario Model provides an excellent vehicle for creating the strategy of interactions between components in response to a specific stimulus. Each of these Scenario Models serves as a rich set of requirements for the services or functions that a component must provide, and it also dictates the order in which these components and services interact together. Scenario modeling can greatly facilitate the construction of TDD tests for a complex system.6","['key', 'technique', 'build', 'effective', 'modular', 'architecture', 'scenario', 'modeling', 'set', 'sequence', 'chart', 'construct', 'focus', 'single', 'system', 'level', 'execution', 'scenario', 'scenario', 'model', 'provide', 'excellent', 'vehicle', 'create', 'strategy', 'interaction', 'component', 'response', 'specific', 'stimulus', 'scenario', 'models', 'serve', 'rich', 'set', 'requirement', 'service', 'function', 'component', 'provide', 'dictate', 'order', 'component', 'service', 'interact', 'scenario', 'modeling', 'greatly', 'facilitate', 'construction', 'tdd', 'test', 'complex', 'system']"
4520,"In a larger system, the impact of poor component quality is magnified by the complexity of interactions. This magnification makes the benefits of TDD accrue even faster in the context of larger projects. However, the complexity of the total population of tests can become a problem in itself, eroding potential gains. It sounds simple, but a key initial step is to recognize that test code is also important software and should be produced and maintained with the same rigor as the production code.","['large', 'system', 'impact', 'poor', 'component', 'quality', 'magnify', 'complexity', 'interaction', 'magnification', 'make', 'benefit', 'tdd', 'accrue', 'fast', 'context', 'large', 'project', 'complexity', 'total', 'population', 'test', 'problem', 'erode', 'potential', 'gain', 'sound', 'simple', 'key', 'initial', 'step', 'recognize', 'test', 'code', 'important', 'software', 'produce', 'maintain', 'rigor', 'production', 'code']"
4521,"Creating and managing the architecture of test software within a complex system is just as important as the core product architecture. Test drivers interact with the UUT, test doubles and the unit test framework.6","['create', 'manage', 'architecture', 'test', 'software', 'complex', 'system', 'important', 'core', 'product', 'architecture', 'test', 'driver', 'interact', 'uut', 'test', 'double', 'unit', 'test', 'framework']"
4522,First TDD Conference was held during July 2021.37 Conferences were recorded on YouTube38,"['tdd', 'conference', 'hold', 'july', '2021', 'conferences', 'record', 'youtube38']"
4523,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4524,"In computer programming, a trait is a concept used in object-oriented programming which represents a set of methods that can be used to extend the functionality of a class.12","['computer', 'programming', 'trait', 'concept', 'object', 'orient', 'programming', 'represent', 'set', 'method', 'extend', 'functionality', 'class']"
4525,"In object-oriented programming, behavior is sometimes shared between classes which are not related to each other. For example, many unrelated classes may have methods to serialize objects to JSON. Historically, there have been several approaches to solve this without duplicating the code in every class needing the behavior. Other approaches include multiple inheritance and mixins, but these have drawbacks: the behavior of the code may unexpectedly change if the order in which the mixins are applied is altered, or if new methods are added to the parent classes or mixins.","['object', 'orient', 'programming', 'behavior', 'share', 'class', 'relate', 'example', 'unrelated', 'class', 'method', 'serialize', 'object', 'json', 'historically', 'approach', 'solve', 'duplicate', 'code', 'class', 'need', 'behavior', 'approach', 'include', 'multiple', 'inheritance', 'mixin', 'drawback', 'behavior', 'code', 'unexpectedly', 'change', 'order', 'mixin', 'apply', 'alter', 'new', 'method', 'add', 'parent', 'class', 'mixin']"
4526,"Traits solve these problems by allowing classes to use the trait and get the desired behavior. If a class uses more than one trait, the order in which the traits are used does not matter. The methods provided by the traits have direct access to the data of the class.","['trait', 'solve', 'problem', 'allow', 'class', 'use', 'trait', 'desire', 'behavior', 'class', 'use', 'trait', 'order', 'trait', 'matter', 'method', 'provide', 'trait', 'direct', 'access', 'datum', 'class']"
4527,"Traits combine aspects of protocols interfaces and mixins. Like an interface, a trait defines one or more method signatures, of which implementing classes must provide implementations. Like a mixin, a trait provides additional behavior for the implementing class.","['trait', 'combine', 'aspect', 'protocol', 'interface', 'mixin', 'like', 'interface', 'trait', 'define', 'method', 'signature', 'implement', 'class', 'provide', 'implementation', 'like', 'mixin', 'trait', 'provide', 'additional', 'behavior', 'implement', 'class']"
4528,"In case of a naming collision between methods provided by different traits, the programmer must explicitly disambiguate which one of those methods will be used in the class; thus manually solving the diamond problem of multiple inheritance. This is different from other composition methods in object-oriented programming, where conflicting names are automatically resolved by scoping rules.","['case', 'name', 'collision', 'method', 'provide', 'different', 'trait', 'programmer', 'explicitly', 'disambiguate', 'method', 'class', 'manually', 'solve', 'diamond', 'problem', 'multiple', 'inheritance', 'different', 'composition', 'method', 'object', 'orient', 'programming', 'conflicting', 'name', 'automatically', 'resolve', 'scope', 'rule']"
4529,Operations which can be performed with traits include:34,"['operation', 'perform', 'trait', 'include']"
4530,"If a method is excluded from a trait, that method must be provided by the class that consumes the trait, or by a parent class of that class. This is because the methods provided by the trait might call the excluded method.","['method', 'exclude', 'trait', 'method', 'provide', 'class', 'consume', 'trait', 'parent', 'class', 'class', 'method', 'provide', 'trait', 'exclude', 'method']"
4531,"Trait composition is commutative i.e. given traits A and B, A + B is equivalent to B + A and associative i.e. given traits A, B, and C, A + B + C is equivalent to A + B + C.1","['trait', 'composition', 'commutative', 'i.e.', 'give', 'trait', 'equivalent', 'associative', 'i.e.', 'give', 'trait', 'equivalent', 'c']"
4532,"While traits offer significant advantages over many alternatives, they do have their own limitations.","['trait', 'offer', 'significant', 'advantage', 'alternative', 'limitation']"
4533,"If a trait requires the consuming class to provide certain methods, the trait cannot know if those methods are semantically equivalent to the trait's needs. For some dynamic languages, such as Perl, the required method can only be identified by a method name, not a full method signature, making it harder to guarantee that the required method is appropriate.","['trait', 'require', 'consume', 'class', 'provide', 'certain', 'method', 'trait', 'know', 'method', 'semantically', 'equivalent', 'trait', 'need', 'dynamic', 'language', 'perl', 'require', 'method', 'identify', 'method', 'method', 'signature', 'make', 'hard', 'guarantee', 'require', 'method', 'appropriate']"
4534,"If a method is excluded from a trait, that method becomes a 'required' method for the trait because the trait's other methods might call it.","['method', 'exclude', 'trait', 'method', 'require', 'method', 'trait', 'trait', 'method']"
4535,Traits come originally from the programming language Self5 and are supported by the following programming languages:,"['trait', 'come', 'originally', 'programming', 'language', 'self5', 'support', 'follow', 'programming', 'language']"
4536,"On C# 8.0, it is possible to define an implementation as a member of an interface.","['8', 'possible', 'define', 'implementation', 'member', 'interface']"
4537,This example uses a trait to enhance other classes:,"['example', 'use', 'trait', 'enhance', 'class']"
4538,This allows simulating aspects of multiple inheritance:,"['allow', 'simulating', 'aspect', 'multiple', 'inheritance']"
4539,"A trait in Rust declares a set of methods that a type must implement.46 Rust compilers require traits to be explicated, which ensures the safety of generics in Rust.","['trait', 'rust', 'declare', 'set', 'method', 'type', 'implement', 'rust', 'compiler', 'require', 'trait', 'explicate', 'ensure', 'safety', 'generic', 'rust']"
4540,"To simplify tedious and repeated implementation of traits like Debug and Ord, the derive macro can be used to request compilers to generate certain implementations automatically.47 Derivable traits include: Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord and Hash.","['simplify', 'tedious', 'repeat', 'implementation', 'trait', 'like', 'debug', 'ord', 'derive', 'macro', 'request', 'compiler', 'generate', 'certain', 'implementation', 'automatically', 'derivable', 'trait', 'include', 'clone', 'copy', 'debug', 'default', 'partialeq', 'partialord', 'ord', 'hash']"
4541,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4542,"In computer programming, a type system is a logical system comprising a set of rules that assigns a property called a type to every ""term"" a word, phrase, or other set of symbols. Usually the terms are various constructs of a computer program, such as variables, expressions, functions, or modules.1 A type system dictates the operations that can be performed on a term. For variables, the type system determines the allowed values of that term. Type systems formalize and enforce the otherwise implicit categories the programmer uses for algebraic data types, data structures, or other components e.g. ""string"", ""array of float"", ""function returning boolean"".","['computer', 'programming', 'type', 'system', 'logical', 'system', 'comprise', 'set', 'rule', 'assign', 'property', 'call', 'type', 'term', 'word', 'phrase', 'set', 'symbol', 'usually', 'term', 'construct', 'computer', 'program', 'variable', 'expression', 'function', 'modules', 'type', 'system', 'dictate', 'operation', 'perform', 'term', 'variable', 'type', 'system', 'determine', 'allow', 'value', 'term', 'type', 'system', 'formalize', 'enforce', 'implicit', 'category', 'programmer', 'use', 'algebraic', 'datum', 'type', 'datum', 'structure', 'component', 'e.g.', 'string', 'array', 'float', 'function', 'return', 'boolean']"
4543,"Type systems are often specified as part of programming languages and built into interpreters and compilers, although the type system of a language can be extended by optional tools that perform added checks using the language's original type syntax and grammar. The main purpose of a type system in a programming language is to reduce possibilities for bugs in computer programs due to type errors.2 The given type system in question determines what constitutes a type error, but in general, the aim is to prevent operations expecting a certain kind of value from being used with values for which that operation does not make sense validity errors. Type systems allow defining interfaces between different parts of a computer program, and then checking that the parts have been connected in a consistent way. This checking can happen statically at compile time, dynamically at run time, or as a combination of both. Type systems have other purposes as well, such as expressing business rules, enabling certain compiler optimizations, allowing for multiple dispatch, and providing a form of documentation.","['type', 'system', 'specify', 'programming', 'language', 'build', 'interpreter', 'compiler', 'type', 'system', 'language', 'extend', 'optional', 'tool', 'perform', 'add', 'check', 'language', 'original', 'type', 'syntax', 'grammar', 'main', 'purpose', 'type', 'system', 'programming', 'language', 'reduce', 'possibility', 'bug', 'computer', 'program', 'type', 'errors', 'give', 'type', 'system', 'question', 'determine', 'constitute', 'type', 'error', 'general', 'aim', 'prevent', 'operation', 'expect', 'certain', 'kind', 'value', 'value', 'operation', 'sense', 'validity', 'error', 'type', 'system', 'allow', 'define', 'interface', 'different', 'part', 'computer', 'program', 'check', 'part', 'connect', 'consistent', 'way', 'checking', 'happen', 'statically', 'compile', 'time', 'dynamically', 'run', 'time', 'combination', 'type', 'system', 'purpose', 'express', 'business', 'rule', 'enable', 'certain', 'compiler', 'optimization', 'allow', 'multiple', 'dispatch', 'provide', 'form', 'documentation']"
4544,"An example of a simple type system is that of the C language. The portions of a C program are the function definitions. One function is invoked by another function. The interface of a function states the name of the function and a list of parameters that are passed to the function's code. The code of an invoking function states the name of the invoked, along with the names of variables that hold values to pass to it. During execution, the values are placed into temporary storage, then execution jumps to the code of the invoked function. The invoked function's code accesses the values and makes use of them. If the instructions inside the function are written with the assumption of receiving an integer value, but the calling code passed a floating-point value, then the wrong result will be computed by the invoked function. The C compiler checks the types of the arguments passed to a function when it is called against the types of the parameters declared in the function's definition. If the types do not match, the compiler throws a compile-time error.","['example', 'simple', 'type', 'system', 'language', 'portion', 'program', 'function', 'definition', 'function', 'invoke', 'function', 'interface', 'function', 'state', 'function', 'list', 'parameter', 'pass', 'function', 'code', 'code', 'invoke', 'function', 'state', 'invoked', 'name', 'variable', 'hold', 'value', 'pass', 'execution', 'value', 'place', 'temporary', 'storage', 'execution', 'jump', 'code', 'invoke', 'function', 'invoked', 'function', 'code', 'access', 'value', 'make', 'use', 'instruction', 'inside', 'function', 'write', 'assumption', 'receive', 'integer', 'value', 'call', 'code', 'pass', 'float', 'point', 'value', 'wrong', 'result', 'compute', 'invoke', 'function', 'compiler', 'check', 'type', 'argument', 'pass', 'function', 'call', 'type', 'parameter', 'declare', 'function', 'definition', 'type', 'match', 'compiler', 'throw', 'compile', 'time', 'error']"
4545,"A compiler may also use the static type of a value to optimize the storage it needs and the choice of algorithms for operations on the value. In many C compilers the float data type, for example, is represented in 32 bits, in accord with the IEEE specification for single-precision floating point numbers. They will thus use floating-point-specific microprocessor operations on those values floating-point addition, multiplication, etc..","['compiler', 'use', 'static', 'type', 'value', 'optimize', 'storage', 'need', 'choice', 'algorithm', 'operation', 'value', 'compiler', 'float', 'datum', 'type', 'example', 'represent', 'bit', 'accord', 'ieee', 'specification', 'single', 'precision', 'float', 'point', 'number', 'use', 'float', 'point', 'specific', 'microprocessor', 'operation', 'value', 'float', 'point', 'addition', 'multiplication', 'etc']"
4546,"The depth of type constraints and the manner of their evaluation affect the typing of the language. A programming language may further associate an operation with various resolutions for each type, in the case of type polymorphism. Type theory is the study of type systems. The concrete types of some programming languages, such as integers and strings, depend on practical issues of computer architecture, compiler implementation, and language design.","['depth', 'type', 'constraint', 'manner', 'evaluation', 'affect', 'typing', 'language', 'programming', 'language', 'associate', 'operation', 'resolution', 'type', 'case', 'type', 'polymorphism', 'type', 'theory', 'study', 'type', 'system', 'concrete', 'type', 'programming', 'language', 'integer', 'string', 'depend', 'practical', 'issue', 'computer', 'architecture', 'compiler', 'implementation', 'language', 'design']"
4547,"Formally, type theory studies type systems. A programming language must have the opportunity to type check using the type system whether at compile time or runtime, manually annotated or automatically inferred. As Mark Manasse concisely put it:3","['formally', 'type', 'theory', 'study', 'type', 'system', 'programming', 'language', 'opportunity', 'type', 'check', 'type', 'system', 'compile', 'time', 'runtime', 'manually', 'annotate', 'automatically', 'infer', 'mark', 'manasse', 'concisely', 'it']"
4548,The fundamental problem addressed by a type theory is to ensure that programs have meaning. The fundamental problem caused by a type theory is that meaningful programs may not have meanings ascribed to them. The quest for richer type systems results from this tension.,"['fundamental', 'problem', 'address', 'type', 'theory', 'ensure', 'program', 'meaning', 'fundamental', 'problem', 'cause', 'type', 'theory', 'meaningful', 'program', 'meaning', 'ascribe', 'quest', 'rich', 'type', 'system', 'result', 'tension']"
4549,"Assigning a data type, termed typing, gives meaning to a sequence of bits such as a value in memory or some object such as a variable. The hardware of a general purpose computer is unable to discriminate between for example a memory address and an instruction code, or between a character, an integer, or a floating-point number, because it makes no intrinsic distinction between any of the possible values that a sequence of bits might mean.note 1 Associating a sequence of bits with a type conveys that meaning to the programmable hardware to form a symbolic system composed of that hardware and some program.","['assign', 'data', 'type', 'term', 'typing', 'give', 'meaning', 'sequence', 'bit', 'value', 'memory', 'object', 'variable', 'hardware', 'general', 'purpose', 'computer', 'unable', 'discriminate', 'example', 'memory', 'address', 'instruction', 'code', 'character', 'integer', 'float', 'point', 'number', 'make', 'intrinsic', 'distinction', 'possible', 'value', 'sequence', 'bit', 'mean.note', 'associate', 'sequence', 'bit', 'type', 'convey', 'mean', 'programmable', 'hardware', 'form', 'symbolic', 'system', 'compose', 'hardware', 'program']"
4550,"A program associates each value with at least one specific type, but it also can occur that one value is associated with many subtypes. Other entities, such as objects, modules, communication channels, and dependencies can become associated with a type. Even a type can become associated with a type. An implementation of a type system could in theory associate identifications called data type a type of a value, class a type of an object, and kind a type of a type, or metatype. These are the abstractions that typing can go through, on a hierarchy of levels contained in a system.","['program', 'associate', 'value', 'specific', 'type', 'occur', 'value', 'associate', 'subtype', 'entity', 'object', 'module', 'communication', 'channel', 'dependency', 'associate', 'type', 'type', 'associate', 'type', 'implementation', 'type', 'system', 'theory', 'associate', 'identification', 'call', 'datum', 'type', 'type', 'value', 'class', 'type', 'object', 'kind', 'type', 'type', 'metatype', 'abstraction', 'typing', 'hierarchy', 'level', 'contain', 'system']"
4551,"When a programming language evolves a more elaborate type system, it gains a more finely grained rule set than basic type checking, but this comes at a price when the type inferences and other properties become undecidable, and when more attention must be paid by the programmer to annotate code or to consider computer-related operations and functioning. It is challenging to find a sufficiently expressive type system that satisfies all programming practices in a type safe manner.","['programming', 'language', 'evolve', 'elaborate', 'type', 'system', 'gain', 'finely', 'grain', 'rule', 'set', 'basic', 'type', 'checking', 'come', 'price', 'type', 'inference', 'property', 'undecidable', 'attention', 'pay', 'programmer', 'annotate', 'code', 'consider', 'computer', 'relate', 'operation', 'functioning', 'challenge', 'find', 'sufficiently', 'expressive', 'type', 'system', 'satisfy', 'programming', 'practice', 'type', 'safe', 'manner']"
4552,"A programming language compiler can also implement a dependent type or an effect system, which enables even more program specifications to be verified by a type checker. Beyond simple value-type pairs, a virtual ""region"" of code is associated with an ""effect"" component describing what is being done with what, and enabling for example to ""throw"" an error report. Thus the symbolic system may be a type and effect system, which endows it with more safety checking than type checking alone.","['programming', 'language', 'compiler', 'implement', 'dependent', 'type', 'effect', 'system', 'enable', 'program', 'specification', 'verify', 'type', 'checker', 'simple', 'value', 'type', 'pair', 'virtual', 'region', 'code', 'associate', 'effect', 'component', 'describe', 'enable', 'example', 'throw', 'error', 'report', 'symbolic', 'system', 'type', 'effect', 'system', 'endow', 'safety', 'checking', 'type', 'checking']"
4553,"Whether automated by the compiler or specified by a programmer, a type system makes program behavior illegal if outside the type-system rules. Advantages provided by programmer-specified type systems include:","['automate', 'compiler', 'specify', 'programmer', 'type', 'system', 'make', 'program', 'behavior', 'illegal', 'outside', 'type', 'system', 'rule', 'advantage', 'provide', 'programmer', 'specify', 'type', 'system', 'include']"
4554,Advantages provided by compiler-specified type systems include:,"['advantage', 'provide', 'compiler', 'specify', 'type', 'system', 'include']"
4555,"A type error is an unintended conditiona which might manifest in multiple stages of a program's development. Thus a facility for detection of the error is needed in the type system. In some languages, such as Haskell, for which type inference is automated, lint might be available to its compiler to aid in the detection of error.","['type', 'error', 'unintended', 'conditiona', 'manifest', 'multiple', 'stage', 'program', 'development', 'facility', 'detection', 'error', 'need', 'type', 'system', 'language', 'haskell', 'type', 'inference', 'automate', 'lint', 'available', 'compiler', 'aid', 'detection', 'error']"
4556,"Type safety contributes to program correctness, but might only guarantee correctness at the cost of making the type checking itself an undecidable problem as in the Halting problem. In a type system with automated type checking a program may prove to run incorrectly yet produce no compiler errors. Division by zero is an unsafe and incorrect operation, but a type checker which only runs at compile time does not scan for division by zero in most languages; that division would surface as a runtime error. To prove the absence of these defects, other kinds of formal methods, collectively known as program analyses, are in common use. Alternatively, a sufficiently expressive type system, such as in dependently-typed languages, can prevent these kinds of errors for example, expressing the type of non-zero numbers. In addition software testing is an empirical method for finding errors that such a type checker would not detect.","['type', 'safety', 'contribute', 'program', 'correctness', 'guarantee', 'correctness', 'cost', 'make', 'type', 'check', 'undecidable', 'problem', 'halting', 'problem', 'type', 'system', 'automate', 'type', 'check', 'program', 'prove', 'run', 'incorrectly', 'produce', 'compiler', 'error', 'division', 'zero', 'unsafe', 'incorrect', 'operation', 'type', 'checker', 'run', 'compile', 'time', 'scan', 'division', 'zero', 'language', 'division', 'surface', 'runtime', 'error', 'prove', 'absence', 'defect', 'kind', 'formal', 'method', 'collectively', 'know', 'program', 'analysis', 'common', 'use', 'alternatively', 'sufficiently', 'expressive', 'type', 'system', 'dependently', 'type', 'language', 'prevent', 'kind', 'error', 'example', 'express', 'type', 'non', 'zero', 'number', 'addition', 'software', 'testing', 'empirical', 'method', 'find', 'error', 'type', 'checker', 'detect']"
4557,"The process of verifying and enforcing the constraints of types—type checking—may occur at compile time a static check or at run-time. If a language specification requires its typing rules strongly i.e., more or less allowing only those automatic type conversions that do not lose information, one can refer to the process as strongly typed, if not, as weakly typed. The terms are not usually used in a strict sense.","['process', 'verifying', 'enforce', 'constraint', 'type', 'type', 'checking', 'occur', 'compile', 'time', 'static', 'check', 'run', 'time', 'language', 'specification', 'require', 'typing', 'rule', 'strongly', 'i.e.', 'allow', 'automatic', 'type', 'conversion', 'lose', 'information', 'refer', 'process', 'strongly', 'type', 'weakly', 'typed', 'term', 'usually', 'strict', 'sense']"
4558,"Static type checking is the process of verifying the type safety of a program based on analysis of a program's text source code. If a program passes a static type checker, then the program is guaranteed to satisfy some set of type safety properties for all possible inputs.","['static', 'type', 'checking', 'process', 'verify', 'type', 'safety', 'program', 'base', 'analysis', 'program', 'text', 'source', 'code', 'program', 'pass', 'static', 'type', 'checker', 'program', 'guarantee', 'satisfy', 'set', 'type', 'safety', 'property', 'possible', 'input']"
4559,"Static type checking can be considered a limited form of program verification see type safety, and in a type-safe language, can be considered also an optimization. If a compiler can prove that a program is well-typed, then it does not need to emit dynamic safety checks, allowing the resulting compiled binary to run faster and to be smaller.","['static', 'type', 'checking', 'consider', 'limited', 'form', 'program', 'verification', 'type', 'safety', 'type', 'safe', 'language', 'consider', 'optimization', 'compiler', 'prove', 'program', 'type', 'need', 'emit', 'dynamic', 'safety', 'check', 'allow', 'result', 'compile', 'binary', 'run', 'fast', 'small']"
4560,"Static type checking for Turing-complete languages is inherently conservative. That is, if a type system is both sound meaning that it rejects all incorrect programs and decidable meaning that it is possible to write an algorithm that determines whether a program is well-typed, then it must be incomplete meaning there are correct programs, which are also rejected, even though they do not encounter runtime errors.6 For example, consider a program containing the code:","['static', 'type', 'checking', 'turing', 'complete', 'language', 'inherently', 'conservative', 'type', 'system', 'sound', 'mean', 'reject', 'incorrect', 'program', 'decidable', 'meaning', 'possible', 'write', 'algorithm', 'determine', 'program', 'type', 'incomplete', 'meaning', 'correct', 'program', 'reject', 'encounter', 'runtime', 'errors', 'example', 'consider', 'program', 'contain', 'code']"
4561,"Even if the expression <complex test> always evaluates to true at run-time, most type checkers will reject the program as ill-typed, because it is difficult if not impossible for a static analyzer to determine that the else branch will not be taken.7 Consequently, a static type checker will quickly detect type errors in rarely used code paths. Without static type checking, even code coverage tests with 100% coverage may be unable to find such type errors. The tests may fail to detect such type errors, because the combination of all places where values are created and all places where a certain value is used must be taken into account.","['expression', 'complex', 'test', 'evaluate', 'true', 'run', 'time', 'type', 'checker', 'reject', 'program', 'ill', 'typed', 'difficult', 'impossible', 'static', 'analyzer', 'determine', 'branch', 'taken', 'consequently', 'static', 'type', 'checker', 'quickly', 'detect', 'type', 'error', 'rarely', 'code', 'path', 'static', 'type', 'checking', 'code', 'coverage', 'test', '100', 'coverage', 'unable', 'find', 'type', 'error', 'test', 'fail', 'detect', 'type', 'error', 'combination', 'place', 'value', 'create', 'place', 'certain', 'value', 'take', 'account']"
4562,"A number of useful and common programming language features cannot be checked statically, such as downcasting. Thus, many languages will have both static and dynamic type checking; the static type checker verifies what it can, and dynamic checks verify the rest.","['number', 'useful', 'common', 'programming', 'language', 'feature', 'check', 'statically', 'downcaste', 'language', 'static', 'dynamic', 'type', 'checking', 'static', 'type', 'checker', 'verifie', 'dynamic', 'check', 'verify', 'rest']"
4563,"Many languages with static type checking provide a way to bypass the type checker. Some languages allow programmers to choose between static and dynamic type safety. For example, C# distinguishes between statically-typed and dynamically-typed variables. Uses of the former are checked statically, whereas uses of the latter are checked dynamically. Other languages allow writing code that is not type-safe; for example, in C, programmers can freely cast a value between any two types that have the same size, effectively subverting the type concept.","['language', 'static', 'type', 'checking', 'provide', 'way', 'bypass', 'type', 'checker', 'language', 'allow', 'programmer', 'choose', 'static', 'dynamic', 'type', 'safety', 'example', 'distinguishe', 'statically', 'typed', 'dynamically', 'type', 'variable', 'use', 'check', 'statically', 'use', 'check', 'dynamically', 'language', 'allow', 'write', 'code', 'type', 'safe', 'example', 'programmer', 'freely', 'cast', 'value', 'type', 'size', 'effectively', 'subvert', 'type', 'concept']"
4564,"For a list of languages with static type checking, see the category for statically-typed languages.","['list', 'language', 'static', 'type', 'checking', 'category', 'statically', 'typed', 'language']"
4565,"Dynamic type checking is the process of verifying the type safety of a program at runtime. Implementations of dynamically type-checked languages generally associate each runtime object with a type tag i.e., a reference to a type containing its type information. This runtime type information RTTI can also be used to implement dynamic dispatch, late binding, downcasting, reflection, and similar features.","['dynamic', 'type', 'checking', 'process', 'verify', 'type', 'safety', 'program', 'runtime', 'implementation', 'dynamically', 'type', 'check', 'language', 'generally', 'associate', 'runtime', 'object', 'type', 'tag', 'i.e.', 'reference', 'type', 'contain', 'type', 'information', 'runtime', 'type', 'information', 'rtti', 'implement', 'dynamic', 'dispatch', 'late', 'bind', 'downcaste', 'reflection', 'similar', 'feature']"
4566,"Most type-safe languages include some form of dynamic type checking, even if they also have a static type checker.citation needed 8 The reason for this is that many useful features or properties are difficult or impossible to verify statically. For example, suppose that a program defines two types, A and B, where B is a subtype of A. If the program tries to convert a value of type A to type B, which is known as downcasting, then the operation is legal only if the value being converted is actually a value of type B. Thus, a dynamic check is needed to verify that the operation is safe. This requirement is one of the criticisms of downcasting.","['type', 'safe', 'language', 'include', 'form', 'dynamic', 'type', 'checking', 'static', 'type', 'checker.citation', 'need', 'reason', 'useful', 'feature', 'property', 'difficult', 'impossible', 'verify', 'statically', 'example', 'suppose', 'program', 'define', 'type', 'subtype', 'program', 'try', 'convert', 'value', 'type', 'type', 'know', 'downcaste', 'operation', 'legal', 'value', 'convert', 'actually', 'value', 'type', 'dynamic', 'check', 'need', 'verify', 'operation', 'safe', 'requirement', 'criticism', 'downcaste']"
4567,"By definition, dynamic type checking may cause a program to fail at runtime. In some programming languages, it is possible to anticipate and recover from these failures. In others, type-checking errors are considered fatal.","['definition', 'dynamic', 'type', 'checking', 'cause', 'program', 'fail', 'runtime', 'programming', 'language', 'possible', 'anticipate', 'recover', 'failure', 'type', 'checking', 'error', 'consider', 'fatal']"
4568,"Programming languages that include dynamic type checking but not static type checking are often called ""dynamically-typed programming languages"". For a list of such languages, see the category for dynamically-typed programming languages.","['programming', 'language', 'include', 'dynamic', 'type', 'checking', 'static', 'type', 'checking', 'call', 'dynamically', 'type', 'programming', 'language', 'list', 'language', 'category', 'dynamically', 'type', 'programming', 'language']"
4569,"Some languages allow both static and dynamic typing. For example, Java and some other ostensibly statically-typed languages support downcasting types to their subtypes, querying an object to discover its dynamic type and other type operations that depend on runtime type information. Another example is C++ RTTI. More generally, most programming languages include mechanisms for dispatching over different 'kinds' of data, such as disjoint unions, runtime polymorphism, and variant types. Even when not interacting with type annotations or type checking, such mechanisms are materially similar to dynamic typing implementations. See programming language for more discussion of the interactions between static and dynamic typing.","['language', 'allow', 'static', 'dynamic', 'typing', 'example', 'java', 'ostensibly', 'statically', 'type', 'language', 'support', 'downcaste', 'type', 'subtype', 'query', 'object', 'discover', 'dynamic', 'type', 'type', 'operation', 'depend', 'runtime', 'type', 'information', 'example', 'c++', 'rtti', 'generally', 'programming', 'language', 'include', 'mechanism', 'dispatch', 'different', 'kind', 'datum', 'disjoint', 'union', 'runtime', 'polymorphism', 'variant', 'type', 'interact', 'type', 'annotation', 'type', 'checking', 'mechanism', 'materially', 'similar', 'dynamic', 'type', 'implementation', 'programming', 'language', 'discussion', 'interaction', 'static', 'dynamic', 'typing']"
4570,"Objects in object-oriented languages are usually accessed by a reference whose static target type or manifest type is equal to either the object's run-time type its latent type or a supertype thereof. This is conformant with the Liskov substitution principle, which states that all operations performed on an instance of a given type can also be performed on an instance of a subtype. This concept is also known as subsumption or subtype polymorphism. In some languages subtypes may also possess covariant or contravariant return types and argument types respectively.","['object', 'object', 'orient', 'language', 'usually', 'access', 'reference', 'static', 'target', 'type', 'manifest', 'type', 'equal', 'object', 'run', 'time', 'type', 'latent', 'type', 'supertype', 'thereof', 'conformant', 'liskov', 'substitution', 'principle', 'state', 'operation', 'perform', 'instance', 'give', 'type', 'perform', 'instance', 'subtype', 'concept', 'know', 'subsumption', 'subtype', 'polymorphism', 'language', 'subtype', 'possess', 'covariant', 'contravariant', 'return', 'type', 'argument', 'type', 'respectively']"
4571,"Certain languages, for example Clojure, Common Lisp, or Cython are dynamically type checked by default, but allow programs to opt into static type checking by providing optional annotations. One reason to use such hints would be to optimize the performance of critical sections of a program. This is formalized by gradual typing. The programming environment DrRacket, a pedagogic environment based on Lisp, and a precursor of the language Racket is also soft-typed.9","['certain', 'language', 'example', 'clojure', 'common', 'lisp', 'cython', 'dynamically', 'type', 'check', 'default', 'allow', 'program', 'opt', 'static', 'type', 'checking', 'provide', 'optional', 'annotation', 'reason', 'use', 'hint', 'optimize', 'performance', 'critical', 'section', 'program', 'formalize', 'gradual', 'typing', 'programming', 'environment', 'drracket', 'pedagogic', 'environment', 'base', 'lisp', 'precursor', 'language', 'racket', 'soft', 'typed']"
4572,"Conversely, as of version 4.0, the C# language provides a way to indicate that a variable should not be statically type checked. A variable whose type is dynamic will not be subject to static type checking. Instead, the program relies on runtime type information to determine how the variable may be used.10","['conversely', 'version', '4', 'language', 'provide', 'way', 'indicate', 'variable', 'statically', 'type', 'check', 'variable', 'type', 'dynamic', 'subject', 'static', 'type', 'checking', 'instead', 'program', 'rely', 'runtime', 'type', 'information', 'determine', 'variable', 'used']"
4573,"In Rust, the dyn std::any::Any type provides dynamic typing of 'static types.11","['rust', 'dyn', 'std::any::any', 'type', 'provide', 'dynamic', 'typing', 'static', 'types']"
4574,The choice between static and dynamic typing requires certain trade-offs.,"['choice', 'static', 'dynamic', 'typing', 'require', 'certain', 'trade', 'off']"
4575,"Static typing can find type errors reliably at compile time, which increases the reliability of the delivered program. However, programmers disagree over how commonly type errors occur, resulting in further disagreements over the proportion of those bugs that are coded that would be caught by appropriately representing the designed types in code.1213 Static typing advocateswho? believe programs are more reliable when they have been well type-checked, whereas dynamic-typing advocateswho? point to distributed code that has proven reliable and to small bug databases.citation needed The value of static typing increases as the strength of the type system is increased. Advocates of dependent typing,who? implemented in languages such as Dependent ML and Epigram, have suggested that almost all bugs can be considered type errors, if the types used in a program are properly declared by the programmer or correctly inferred by the compiler.14","['static', 'typing', 'find', 'type', 'error', 'reliably', 'compile', 'time', 'increase', 'reliability', 'deliver', 'program', 'programmer', 'disagree', 'commonly', 'type', 'error', 'occur', 'result', 'disagreement', 'proportion', 'bug', 'code', 'catch', 'appropriately', 'represent', 'design', 'type', 'code', 'static', 'typing', 'advocateswho', 'believe', 'program', 'reliable', 'type', 'check', 'dynamic', 'type', 'advocateswho', 'point', 'distribute', 'code', 'prove', 'reliable', 'small', 'bug', 'databases.citation', 'need', 'value', 'static', 'typing', 'increase', 'strength', 'type', 'system', 'increase', 'advocate', 'dependent', 'typing', 'implement', 'language', 'dependent', 'epigram', 'suggest', 'bug', 'consider', 'type', 'error', 'type', 'program', 'properly', 'declare', 'programmer', 'correctly', 'infer', 'compiler']"
4576,"Static typing usually results in compiled code that executes faster. When the compiler knows the exact data types that are in use which is necessary for static verification, either through declaration or inference it can produce optimized machine code. Some dynamically-typed languages such as Common Lisp allow optional type declarations for optimization for this reason.","['static', 'typing', 'usually', 'result', 'compile', 'code', 'execute', 'fast', 'compiler', 'know', 'exact', 'data', 'type', 'use', 'necessary', 'static', 'verification', 'declaration', 'inference', 'produce', 'optimize', 'machine', 'code', 'dynamically', 'type', 'language', 'common', 'lisp', 'allow', 'optional', 'type', 'declaration', 'optimization', 'reason']"
4577,"By contrast, dynamic typing may allow compilers to run faster and interpreters to dynamically load new code, because changes to source code in dynamically-typed languages may result in less checking to perform and less code to revisit.clarification needed This too may reduce the edit-compile-test-debug cycle.","['contrast', 'dynamic', 'typing', 'allow', 'compiler', 'run', 'fast', 'interpreter', 'dynamically', 'load', 'new', 'code', 'change', 'source', 'code', 'dynamically', 'type', 'language', 'result', 'checking', 'perform', 'code', 'revisit.clarification', 'need', 'reduce', 'edit', 'compile', 'test', 'debug', 'cycle']"
4578,"Statically-typed languages that lack type inference such as C and Java prior to version 10 require that programmers declare the types that a method or function must use. This can serve as added program documentation, that is active and dynamic, instead of static. This allows a compiler to prevent it from drifting out of synchrony, and from being ignored by programmers. However, a language can be statically typed without requiring type declarations examples include Haskell, Scala, OCaml, F#, and to a lesser extent C# and C++, so explicit type declaration is not a necessary requirement for static typing in all languages.","['statically', 'type', 'language', 'lack', 'type', 'inference', 'java', 'prior', 'version', 'require', 'programmer', 'declare', 'type', 'method', 'function', 'use', 'serve', 'add', 'program', 'documentation', 'active', 'dynamic', 'instead', 'static', 'allow', 'compiler', 'prevent', 'drift', 'synchrony', 'ignore', 'programmer', 'language', 'statically', 'type', 'require', 'type', 'declaration', 'example', 'include', 'haskell', 'scala', 'ocaml', 'less', 'extent', 'c++', 'explicit', 'type', 'declaration', 'necessary', 'requirement', 'static', 'typing', 'language']"
4579,"Dynamic typing allows constructs that some simple static type checking would reject as illegal. For example, eval functions, which execute arbitrary data as code, become possible. An eval function is possible with static typing, but requires advanced uses of algebraic data types. Further, dynamic typing better accommodates transitional code and prototyping, such as allowing a placeholder data structure mock object to be transparently used in place of a full data structure usually for the purposes of experimentation and testing.","['dynamic', 'typing', 'allow', 'construct', 'simple', 'static', 'type', 'checking', 'reject', 'illegal', 'example', 'eval', 'function', 'execute', 'arbitrary', 'datum', 'code', 'possible', 'eval', 'function', 'possible', 'static', 'typing', 'require', 'advanced', 'use', 'algebraic', 'datum', 'type', 'dynamic', 'typing', 'well', 'accommodate', 'transitional', 'code', 'prototyping', 'allow', 'placeholder', 'datum', 'structure', 'mock', 'object', 'transparently', 'place', 'data', 'structure', 'usually', 'purpose', 'experimentation', 'testing']"
4580,Dynamic typing typically allows duck typing which enables easier code reuse. Manyspecify languages with static typing also feature duck typing or other mechanisms like generic programming that also enable easier code reuse.,"['dynamic', 'typing', 'typically', 'allow', 'duck', 'typing', 'enable', 'easy', 'code', 'reuse', 'manyspecify', 'language', 'static', 'typing', 'feature', 'duck', 'typing', 'mechanism', 'like', 'generic', 'programming', 'enable', 'easy', 'code', 'reuse']"
4581,"Dynamic typing typically makes metaprogramming easier to use. For example, C++ templates are typically more cumbersome to write than the equivalent Ruby or Python code since C++ has stronger rules regarding type definitions for both functions and variables. This forces a developer to write more boilerplate code for a template than a Python developer would need to. More advanced run-time constructs such as metaclasses and introspection are often harder to use in statically-typed languages. In some languages, such features may also be used e.g. to generate new types and behaviors on the fly, based on run-time data. Such advanced constructs are often provided by dynamic programming languages; many of these are dynamically typed, although dynamic typing need not be related to dynamic programming languages.","['dynamic', 'typing', 'typically', 'make', 'metaprogramme', 'easy', 'use', 'example', 'c++', 'template', 'typically', 'cumbersome', 'write', 'equivalent', 'ruby', 'python', 'code', 'c++', 'strong', 'rule', 'type', 'definition', 'function', 'variable', 'force', 'developer', 'write', 'boilerplate', 'code', 'template', 'python', 'developer', 'need', 'advanced', 'run', 'time', 'construct', 'metaclasse', 'introspection', 'hard', 'use', 'statically', 'typed', 'language', 'language', 'feature', 'e.g.', 'generate', 'new', 'type', 'behavior', 'fly', 'base', 'run', 'time', 'datum', 'advanced', 'construct', 'provide', 'dynamic', 'programming', 'language', 'dynamically', 'type', 'dynamic', 'typing', 'need', 'relate', 'dynamic', 'programming', 'language']"
4582,"Languages are often colloquially referred to as strongly typed or weakly typed. In fact, there is no universally accepted definition of what these terms mean. In general, there are more precise terms to represent the differences between type systems that lead people to call them ""strong"" or ""weak"".","['language', 'colloquially', 'refer', 'strongly', 'type', 'weakly', 'type', 'fact', 'universally', 'accept', 'definition', 'term', 'mean', 'general', 'precise', 'term', 'represent', 'difference', 'type', 'system', 'lead', 'people', 'strong', 'weak']"
4583,A third way of categorizing the type system of a programming language is by the safety of typed operations and conversions. Computer scientists use the term type-safe language to describe languages that do not allow operations or conversions that violate the rules of the type system.,"['way', 'categorize', 'type', 'system', 'programming', 'language', 'safety', 'typed', 'operation', 'conversion', 'computer', 'scientist', 'use', 'term', 'type', 'safe', 'language', 'describe', 'language', 'allow', 'operation', 'conversion', 'violate', 'rule', 'type', 'system']"
4584,"Computer scientists use the term memory-safe language or just safe language to describe languages that do not allow programs to access memory that has not been assigned for their use. For example, a memory-safe language will check array bounds, or else statically guarantee i.e., at compile time before execution that array accesses out of the array boundaries will cause compile-time and perhaps runtime errors.","['computer', 'scientist', 'use', 'term', 'memory', 'safe', 'language', 'safe', 'language', 'describe', 'language', 'allow', 'program', 'access', 'memory', 'assign', 'use', 'example', 'memory', 'safe', 'language', 'check', 'array', 'bound', 'statically', 'guarantee', 'i.e.', 'compile', 'time', 'execution', 'array', 'access', 'array', 'boundary', 'cause', 'compile', 'time', 'runtime', 'error']"
4585,Consider the following program of a language that is both type-safe and memory-safe:15,"['consider', 'follow', 'program', 'language', 'type', 'safe', 'memory', 'safe']"
4586,"In this example, the variable z will have the value 42. Although this may not be what the programmer anticipated, it is a well-defined result. If y were a different string, one that could not be converted to a number e.g. ""Hello World"", the result would be well-defined as well. Note that a program can be type-safe or memory-safe and still crash on an invalid operation. This is for languages where the type system is not sufficiently advanced to precisely specify the validity of operations on all possible operands. But if a program encounters an operation that is not type-safe, terminating the program is often the only option.","['example', 'variable', 'value', 'programmer', 'anticipate', 'define', 'result', 'different', 'string', 'convert', 'number', 'e.g.', 'hello', 'world', 'result', 'define', 'note', 'program', 'type', 'safe', 'memory', 'safe', 'crash', 'invalid', 'operation', 'language', 'type', 'system', 'sufficiently', 'advanced', 'precisely', 'specify', 'validity', 'operation', 'possible', 'operand', 'program', 'encounter', 'operation', 'type', 'safe', 'terminate', 'program', 'option']"
4587,Now consider a similar example in C:,"['consider', 'similar', 'example']"
4588,"In this example z will point to a memory address five characters beyond y, equivalent to three characters after the terminating zero character of the string pointed to by y. This is memory that the program is not expected to access. In C terms this is simply undefined behaviour and the program may do anything; with a simple compiler it might actually print whatever byte is stored after the string ""37"". As this example shows, C is not memory-safe. As arbitrary data was assumed to be a character, it is also not a type-safe language.","['example', 'point', 'memory', 'address', 'character', 'equivalent', 'character', 'terminating', 'zero', 'character', 'string', 'point', 'memory', 'program', 'expect', 'access', 'term', 'simply', 'undefined', 'behaviour', 'program', 'simple', 'compiler', 'actually', 'print', 'byte', 'store', 'string', 'example', 'show', 'memory', 'safe', 'arbitrary', 'datum', 'assume', 'character', 'type', 'safe', 'language']"
4589,"In general, type-safety and memory-safety go hand in hand. For example, a language that supports pointer arithmetic and number-to-pointer conversions like C is neither memory-safe nor type-safe, because it allows arbitrary memory to be accessed as if it were valid memory of any type.","['general', 'type', 'safety', 'memory', 'safety', 'hand', 'hand', 'example', 'language', 'support', 'pointer', 'arithmetic', 'number', 'pointer', 'conversion', 'like', 'memory', 'safe', 'type', 'safe', 'allow', 'arbitrary', 'memory', 'access', 'valid', 'memory', 'type']"
4590,"For more information, see memory safety.","['information', 'memory', 'safety']"
4591,Some languages allow different levels of checking to apply to different regions of code. Examples include:,"['language', 'allow', 'different', 'level', 'check', 'apply', 'different', 'region', 'code', 'example', 'include']"
4592,Additional tools such as lint and IBM Rational Purify can also be used to achieve a higher level of strictness.,"['additional', 'tool', 'lint', 'ibm', 'rational', 'purify', 'achieve', 'high', 'level', 'strictness']"
4593,"It has been proposed, chiefly by Gilad Bracha, that the choice of type system be made independent of choice of language; that a type system should be a module that can be plugged into a language as needed. He believes this is advantageous, because what he calls mandatory type systems make languages less expressive and code more fragile.20 The requirement that the type system does not affect the semantics of the language is difficult to fulfill.","['propose', 'chiefly', 'gilad', 'bracha', 'choice', 'type', 'system', 'independent', 'choice', 'language', 'type', 'system', 'module', 'plug', 'language', 'need', 'believe', 'advantageous', 'call', 'mandatory', 'type', 'system', 'language', 'expressive', 'code', 'fragile', 'requirement', 'type', 'system', 'affect', 'semantic', 'language', 'difficult', 'fulfill']"
4594,"Optional typing is related to, but distinct from, gradual typing. While both typing disciplines can be used to perform static analysis of code static typing, optional type systems do not enforce type safety at runtime dynamic typing. 2021","['optional', 'typing', 'relate', 'distinct', 'gradual', 'typing', 'type', 'discipline', 'perform', 'static', 'analysis', 'code', 'static', 'typing', 'optional', 'type', 'system', 'enforce', 'type', 'safety', 'runtime', 'dynamic', 'typing', '2021']"
4595,"The term polymorphism refers to the ability of code especially, functions or classes to act on values of multiple types, or to the ability of different instances of the same data structure to contain elements of different types. Type systems that allow polymorphism generally do so in order to improve the potential for code re-use: in a language with polymorphism, programmers need only implement a data structure such as a list or an associative array once, rather than once for each type of element with which they plan to use it. For this reason computer scientists sometimes call the use of certain forms of polymorphism generic programming. The type-theoretic foundations of polymorphism are closely related to those of abstraction, modularity and in some cases subtyping.","['term', 'polymorphism', 'refer', 'ability', 'code', 'especially', 'function', 'class', 'act', 'value', 'multiple', 'type', 'ability', 'different', 'instance', 'datum', 'structure', 'contain', 'element', 'different', 'type', 'type', 'system', 'allow', 'polymorphism', 'generally', 'order', 'improve', 'potential', 'code', 'use', 'language', 'polymorphism', 'programmer', 'need', 'implement', 'data', 'structure', 'list', 'associative', 'array', 'type', 'element', 'plan', 'use', 'reason', 'computer', 'scientist', 'use', 'certain', 'form', 'polymorphism', 'generic', 'programming', 'type', 'theoretic', 'foundation', 'polymorphism', 'closely', 'relate', 'abstraction', 'modularity', 'case', 'subtype']"
4596,"Many type systems have been created that are specialized for use in certain environments with certain types of data, or for out-of-band static program analysis. Frequently, these are based on ideas from formal type theory and are only available as part of prototype research systems.","['type', 'system', 'create', 'specialize', 'use', 'certain', 'environment', 'certain', 'type', 'datum', 'band', 'static', 'program', 'analysis', 'frequently', 'base', 'idea', 'formal', 'type', 'theory', 'available', 'prototype', 'research', 'system']"
4597,"The following table gives an overview over type theoretic concepts that are used in specialized type systems. The names M, N, O range over terms and the names σ , τ \displaystyle \sigma ,\tau range over types. The following notation will be used:","['following', 'table', 'give', 'overview', 'type', 'theoretic', 'concept', 'specialized', 'type', 'system', 'name', 'range', 'term', 'name', 'range', 'type', 'follow', 'notation']"
4598,"Dependent types are based on the idea of using scalars or values to more precisely describe the type of some other value. For example, m a t r i x 3 , 3 \displaystyle \mathrm matrix 3,3 might be the type of a 3 × 3 \displaystyle 3\times 3 matrix. We can then define typing rules such as the following rule for matrix multiplication:","['dependent', 'type', 'base', 'idea', 'scalar', 'value', 'precisely', 'describe', 'type', 'value', 'example', 'matrix', '3', 'type', 'matrix', 'define', 'type', 'rule', 'follow', 'rule', 'matrix', 'multiplication']"
4599,"where k, m, n are arbitrary positive integer values. A variant of ML called Dependent ML has been created based on this type system, but because type checking for conventional dependent types is undecidable, not all programs using them can be type-checked without some kind of limits. Dependent ML limits the sort of equality it can decide to Presburger arithmetic.","['arbitrary', 'positive', 'integer', 'value', 'variant', 'call', 'dependent', 'create', 'base', 'type', 'system', 'type', 'checking', 'conventional', 'dependent', 'type', 'undecidable', 'program', 'type', 'check', 'kind', 'limit', 'dependent', 'limit', 'sort', 'equality', 'decide', 'presburger', 'arithmetic']"
4600,"Other languages such as Epigram make the value of all expressions in the language decidable so that type checking can be decidable. However, in general proof of decidability is undecidable, so many programs require hand-written annotations that may be very non-trivial. As this impedes the development process, many language implementations provide an easy way out in the form of an option to disable this condition. This, however, comes at the cost of making the type-checker run in an infinite loop when fed programs that do not type-check, causing the compilation to fail.","['language', 'epigram', 'value', 'expression', 'language', 'decidable', 'type', 'checking', 'decidable', 'general', 'proof', 'decidability', 'undecidable', 'program', 'require', 'hand', 'write', 'annotation', 'non', 'trivial', 'impede', 'development', 'process', 'language', 'implementation', 'provide', 'easy', 'way', 'form', 'option', 'disable', 'condition', 'come', 'cost', 'make', 'type', 'checker', 'run', 'infinite', 'loop', 'fed', 'program', 'type', 'check', 'cause', 'compilation', 'fail']"
4601,"Linear types, based on the theory of linear logic, and closely related to uniqueness types, are types assigned to values having the property that they have one and only one reference to them at all times. These are valuable for describing large immutable values such as files, strings, and so on, because any operation that simultaneously destroys a linear object and creates a similar object such as 'str= str + ""a""' can be optimized ""under the hood"" into an in-place mutation. Normally this is not possible, as such mutations could cause side effects on parts of the program holding other references to the object, violating referential transparency. They are also used in the prototype operating system Singularity for interprocess communication, statically ensuring that processes cannot share objects in shared memory in order to prevent race conditions. The Clean language a Haskell-like language uses this type system in order to gain a lot of speed compared to performing a deep copy while remaining safe.","['linear', 'type', 'base', 'theory', 'linear', 'logic', 'closely', 'relate', 'uniqueness', 'type', 'type', 'assign', 'value', 'have', 'property', 'reference', 'time', 'valuable', 'describe', 'large', 'immutable', 'value', 'file', 'string', 'operation', 'simultaneously', 'destroy', 'linear', 'object', 'create', 'similar', 'object', 'str=', 'str', 'optimize', 'hood', 'place', 'mutation', 'normally', 'possible', 'mutation', 'cause', 'effect', 'part', 'program', 'hold', 'reference', 'object', 'violate', 'referential', 'transparency', 'prototype', 'operating', 'system', 'singularity', 'interprocess', 'communication', 'statically', 'ensure', 'process', 'share', 'object', 'share', 'memory', 'order', 'prevent', 'race', 'condition', 'clean', 'language', 'haskell', 'like', 'language', 'use', 'type', 'system', 'order', 'gain', 'lot', 'speed', 'compare', 'perform', 'deep', 'copy', 'remain', 'safe']"
4602,"Intersection types are types describing values that belong to both of two other given types with overlapping value sets. For example, in most implementations of C the signed char has range -128 to 127 and the unsigned char has range 0 to 255, so the intersection type of these two types would have range 0 to 127. Such an intersection type could be safely passed into functions expecting either signed or unsigned chars, because it is compatible with both types.","['intersection', 'type', 'type', 'describe', 'value', 'belong', 'give', 'type', 'overlap', 'value', 'set', 'example', 'implementation', 'sign', 'char', 'range', '-128', '127', 'unsigned', 'char', 'range', '255', 'intersection', 'type', 'type', 'range', '127', 'intersection', 'type', 'safely', 'pass', 'function', 'expect', 'sign', 'unsigned', 'char', 'compatible', 'type']"
4603,"Intersection types are useful for describing overloaded function types: for example, if ""int → int"" is the type of functions taking an integer argument and returning an integer, and ""float → float"" is the type of functions taking a float argument and returning a float, then the intersection of these two types can be used to describe functions that do one or the other, based on what type of input they are given. Such a function could be passed into another function expecting an ""int → int"" function safely; it simply would not use the ""float → float"" functionality.","['intersection', 'type', 'useful', 'describe', 'overloaded', 'function', 'type', 'example', 'int', 'int', 'type', 'function', 'take', 'integer', 'argument', 'return', 'integer', 'float', 'float', 'type', 'function', 'take', 'float', 'argument', 'return', 'float', 'intersection', 'type', 'describe', 'function', 'base', 'type', 'input', 'give', 'function', 'pass', 'function', 'expect', 'int', 'int', 'function', 'safely', 'simply', 'use', 'float', 'float', 'functionality']"
4604,"In a subclassing hierarchy, the intersection of a type and an ancestor type such as its parent is the most derived type. The intersection of sibling types is empty.","['subclasse', 'hierarchy', 'intersection', 'type', 'ancestor', 'type', 'parent', 'derive', 'type', 'intersection', 'sible', 'type']"
4605,The Forsythe language includes a general implementation of intersection types. A restricted form is refinement types.,"['forsythe', 'language', 'include', 'general', 'implementation', 'intersection', 'type', 'restricted', 'form', 'refinement', 'type']"
4606,"Union types are types describing values that belong to either of two types. For example, in C, the signed char has a -128 to 127 range, and the unsigned char has a 0 to 255 range, so the union of these two types would have an overall ""virtual"" range of -128 to 255 that may be used partially depending on which union member is accessed. Any function handling this union type would have to deal with integers in this complete range. More generally, the only valid operations on a union type are operations that are valid on both types being unioned. C's ""union"" concept is similar to union types, but is not typesafe, as it permits operations that are valid on either type, rather than both. Union types are important in program analysis, where they are used to represent symbolic values whose exact nature e.g., value or type is not known.","['union', 'type', 'type', 'describe', 'value', 'belong', 'type', 'example', 'sign', 'char', '-128', '127', 'range', 'unsigned', 'char', '255', 'range', 'union', 'type', 'overall', 'virtual', 'range', '-128', '255', 'partially', 'depend', 'union', 'member', 'access', 'function', 'handle', 'union', 'type', 'deal', 'integer', 'complete', 'range', 'generally', 'valid', 'operation', 'union', 'type', 'operation', 'valid', 'type', 'unione', 'union', 'concept', 'similar', 'union', 'type', 'typesafe', 'permit', 'operation', 'valid', 'type', 'union', 'type', 'important', 'program', 'analysis', 'represent', 'symbolic', 'value', 'exact', 'nature', 'e.g.', 'value', 'type', 'know']"
4607,"In a subclassing hierarchy, the union of a type and an ancestor type such as its parent is the ancestor type. The union of sibling types is a subtype of their common ancestor that is, all operations permitted on their common ancestor are permitted on the union type, but they may also have other valid operations in common.","['subclasse', 'hierarchy', 'union', 'type', 'ancestor', 'type', 'parent', 'ancestor', 'type', 'union', 'sible', 'type', 'subtype', 'common', 'ancestor', 'operation', 'permit', 'common', 'ancestor', 'permit', 'union', 'type', 'valid', 'operation', 'common']"
4608,"Existential types are frequently used in connection with record types to represent modules and abstract data types, due to their ability to separate implementation from interface. For example, the type ""T = ∃X a: X; f: X → int; "" describes a module interface that has a data member named a of type X and a function named f that takes a parameter of the same type X and returns an integer. This could be implemented in different ways; for example:","['existential', 'type', 'frequently', 'connection', 'record', 'type', 'represent', 'module', 'abstract', 'datum', 'type', 'ability', 'separate', 'implementation', 'interface', 'example', 'type', 'int', 'describe', 'module', 'interface', 'data', 'member', 'name', 'type', 'function', 'name', 'take', 'parameter', 'type', 'return', 'integer', 'implement', 'different', 'way', 'example']"
4609,"These types are both subtypes of the more general existential type T and correspond to concrete implementation types, so any value of one of these types is a value of type T. Given a value ""t"" of type ""T"", we know that ""t.ft.a"" is well-typed, regardless of what the abstract type X is. This gives flexibility for choosing types suited to a particular implementation, while clients that use only values of the interface type—the existential type—are isolated from these choices.","['type', 'subtype', 'general', 'existential', 'type', 'correspond', 'concrete', 'implementation', 'type', 'value', 'type', 'value', 'type', 'give', 'value', 'type', 'know', 't.ft.a', 'type', 'regardless', 'abstract', 'type', 'give', 'flexibility', 'choose', 'type', 'suit', 'particular', 'implementation', 'client', 'use', 'value', 'interface', 'type', 'existential', 'type', 'isolate', 'choice']"
4610,"In general it's impossible for the typechecker to infer which existential type a given module belongs to. In the above example intT a: int; f: int → int; could also have the type ∃X a: X; f: int → int; . The simplest solution is to annotate every module with its intended type, e.g.:","['general', 'impossible', 'typechecker', 'infer', 'existential', 'type', 'give', 'module', 'belong', 'example', 'intt', 'int', 'int', 'int', 'type', 'int', 'int', 'simple', 'solution', 'annotate', 'module', 'intend', 'type', 'e.g.']"
4611,"Although abstract data types and modules had been implemented in programming languages for quite some time, it wasn't until 1988 that John C. Mitchell and Gordon Plotkin established the formal theory under the slogan: ""Abstract data types have existential type"".23 The theory is a second-order typed lambda calculus similar to System F, but with existential instead of universal quantification.","['abstract', 'datum', 'type', 'module', 'implement', 'programming', 'language', 'time', '1988', 'john', 'mitchell', 'gordon', 'plotkin', 'establish', 'formal', 'theory', 'slogan', 'abstract', 'data', 'type', 'existential', 'type', 'theory', 'second', 'order', 'type', 'lambda', 'calculus', 'similar', 'system', 'existential', 'instead', 'universal', 'quantification']"
4612,"In a type system with Gradual typing, variables may be assigned a type either at compile-time which is static typing. or at run-time which is dynamic typing.24 This allows software developers to choose either type paradigm as appropriate, from within a single language.24 Gradual typing uses a special type named dynamic to represent statically-unknown types; gradual typing replaces the notion of type equality with a new relation called consistency that relates the dynamic type to every other type. The consistency relation is symmetric but not transitive.25","['type', 'system', 'gradual', 'typing', 'variable', 'assign', 'type', 'compile', 'time', 'static', 'typing', 'run', 'time', 'dynamic', 'typing', 'allow', 'software', 'developer', 'choose', 'type', 'paradigm', 'appropriate', 'single', 'language', 'gradual', 'typing', 'use', 'special', 'type', 'name', 'dynamic', 'represent', 'statically', 'unknown', 'type', 'gradual', 'typing', 'replace', 'notion', 'type', 'equality', 'new', 'relation', 'call', 'consistency', 'relate', 'dynamic', 'type', 'type', 'consistency', 'relation', 'symmetric', 'transitive']"
4613,"Many static type systems, such as those of C and Java, require type declarations: the programmer must explicitly associate each variable with a specific type. Others, such as Haskell's, perform type inference: the compiler draws conclusions about the types of variables based on how programmers use those variables. For example, given a function fx, y that adds x and y together, the compiler can infer that x and y must be numbers—since addition is only defined for numbers. Thus, any call to f elsewhere in the program that specifies a non-numeric type such as a string or list as an argument would signal an error.","['static', 'type', 'system', 'java', 'require', 'type', 'declaration', 'programmer', 'explicitly', 'associate', 'variable', 'specific', 'type', 'haskell', 'perform', 'type', 'inference', 'compiler', 'draw', 'conclusion', 'type', 'variable', 'base', 'programmer', 'use', 'variable', 'example', 'give', 'function', 'add', 'compiler', 'infer', 'number', 'addition', 'define', 'number', 'program', 'specify', 'non', 'numeric', 'type', 'string', 'list', 'argument', 'signal', 'error']"
4614,"Numerical and string constants and expressions in code can and often do imply type in a particular context. For example, an expression 3.14 might imply a type of floating-point, while 1, 2, 3 might imply a list of integers—typically an array.","['numerical', 'string', 'constant', 'expression', 'code', 'imply', 'type', 'particular', 'context', 'example', 'expression', '3', 'imply', 'type', 'float', 'point', 'imply', 'list', 'integer', 'typically', 'array']"
4615,"Type inference is in general possible, if it is computable in the type system in question. Moreover, even if inference is not computable in general for a given type system, inference is often possible for a large subset of real-world programs. Haskell's type system, a version of Hindley–Milner, is a restriction of System Fω to so-called rank-1 polymorphic types, in which type inference is computable. Most Haskell compilers allow arbitrary-rank polymorphism as an extension, but this makes type inference not computable. Type checking is decidable, however, and rank-1 programs still have type inference; higher rank polymorphic programs are rejected unless given explicit type annotations.","['type', 'inference', 'general', 'possible', 'computable', 'type', 'system', 'question', 'inference', 'computable', 'general', 'give', 'type', 'system', 'inference', 'possible', 'large', 'subset', 'real', 'world', 'program', 'haskell', 'type', 'system', 'version', 'hindley', 'milner', 'restriction', 'system', 'call', 'rank-1', 'polymorphic', 'type', 'type', 'inference', 'computable', 'haskell', 'compiler', 'allow', 'arbitrary', 'rank', 'polymorphism', 'extension', 'make', 'type', 'inference', 'computable', 'type', 'checking', 'decidable', 'rank-1', 'program', 'type', 'inference', 'high', 'rank', 'polymorphic', 'program', 'reject', 'give', 'explicit', 'type', 'annotation']"
4616,"A type system that assigns types to terms in type environments using typing rules is naturally associated with the decision problems of type checking, typability, and type inhabitation.26","['type', 'system', 'assign', 'type', 'term', 'type', 'environment', 'typing', 'rule', 'naturally', 'associate', 'decision', 'problem', 'type', 'checking', 'typability', 'type', 'inhabitation']"
4617,"Some languages like C# or Scala have a unified type system.27 This means that all C# types including primitive types inherit from a single root object. Every type in C# inherits from the Object class. Some languages, like Java and Raku, have a root type but also have primitive types that are not objects.28 Java provides wrapper object types that exist together with the primitive types so developers can use either the wrapper object types or the simpler non-object primitive types. Raku automatically converts primitive types to objects when their methods are accessed.29","['language', 'like', 'scala', 'unified', 'type', 'system', 'mean', 'type', 'include', 'primitive', 'type', 'inherit', 'single', 'root', 'object', 'type', 'inherit', 'object', 'class', 'language', 'like', 'java', 'raku', 'root', 'type', 'primitive', 'type', 'objects', 'java', 'provide', 'wrapper', 'object', 'type', 'exist', 'primitive', 'type', 'developer', 'use', 'wrapper', 'object', 'type', 'simple', 'non', 'object', 'primitive', 'type', 'raku', 'automatically', 'convert', 'primitive', 'type', 'object', 'method', 'accessed']"
4618,"A type checker for a statically-typed language must verify that the type of any expression is consistent with the type expected by the context in which that expression appears. For example, in an assignment statement of the form x := e, the inferred type of the expression e must be consistent with the declared or inferred type of the variable x. This notion of consistency, called compatibility, is specific to each programming language.","['type', 'checker', 'statically', 'type', 'language', 'verify', 'type', 'expression', 'consistent', 'type', 'expect', 'context', 'expression', 'appear', 'example', 'assignment', 'statement', 'form', 'infer', 'type', 'expression', 'consistent', 'declared', 'infer', 'type', 'variable', 'notion', 'consistency', 'call', 'compatibility', 'specific', 'programming', 'language']"
4619,"If the type of e and the type of x are the same, and assignment is allowed for that type, then this is a valid expression. Thus, in the simplest type systems, the question of whether two types are compatible reduces to that of whether they are equal or equivalent. Different languages, however, have different criteria for when two type expressions are understood to denote the same type. These different equational theories of types vary widely, two extreme cases being structural type systems, in which any two types that describe values with the same structure are equivalent, and nominative type systems, in which no two syntactically distinct type expressions denote the same type i.e., types must have the same ""name"" in order to be equal.","['type', 'type', 'assignment', 'allow', 'type', 'valid', 'expression', 'simple', 'type', 'system', 'question', 'type', 'compatible', 'reduce', 'equal', 'equivalent', 'different', 'language', 'different', 'criterion', 'type', 'expression', 'understand', 'denote', 'type', 'different', 'equational', 'theory', 'type', 'vary', 'widely', 'extreme', 'case', 'structural', 'type', 'system', 'type', 'describe', 'value', 'structure', 'equivalent', 'nominative', 'type', 'system', 'syntactically', 'distinct', 'type', 'expression', 'denote', 'type', 'i.e.', 'type', 'order', 'equal']"
4620,"In languages with subtyping, the compatibility relation is more complex: If B is a subtype of A, then a value of type B can be used in a context where one of type A is expected covariant, even if the reverse is not true. Like equivalence, the subtype relation is defined differently for each programming language, with many variations possible. The presence of parametric or ad hoc polymorphism in a language may also have implications for type compatibility.","['language', 'subtype', 'compatibility', 'relation', 'complex', 'subtype', 'value', 'type', 'context', 'type', 'expect', 'covariant', 'reverse', 'true', 'like', 'equivalence', 'subtype', 'relation', 'define', 'differently', 'programming', 'language', 'variation', 'possible', 'presence', 'parametric', 'hoc', 'polymorphism', 'language', 'implication', 'type', 'compatibility']"
4621,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4622,"In computer science, type conversion,12 type casting,13 type coercion,3 and type juggling45 are different ways of changing an expression from one data type to another. An example would be the conversion of an integer value into a floating point value or its textual representation as a string, and vice versa. Type conversions can take advantage of certain features of type hierarchies or data representations. Two important aspects of a type conversion are whether it happens implicitly automatically or explicitly,16 and whether the underlying data representation is converted from one representation into another, or a given representation is merely reinterpreted as the representation of another data type.67 In general, both primitive and compound data types can be converted.","['computer', 'science', 'type', 'conversion', 'type', 'casting', 'type', 'coercion', 'type', 'juggling45', 'different', 'way', 'change', 'expression', 'datum', 'type', 'example', 'conversion', 'integer', 'value', 'float', 'point', 'value', 'textual', 'representation', 'string', 'vice', 'versa', 'type', 'conversion', 'advantage', 'certain', 'feature', 'type', 'hierarchy', 'datum', 'representation', 'important', 'aspect', 'type', 'conversion', 'happen', 'implicitly', 'automatically', 'explicitly', 'underlie', 'datum', 'representation', 'convert', 'representation', 'give', 'representation', 'merely', 'reinterpret', 'representation', 'datum', 'type', 'general', 'primitive', 'compound', 'datum', 'type', 'convert']"
4623,"Each programming language has its own rules on how types can be converted. Languages with strong typing typically do little implicit conversion and discourage the reinterpretation of representations, while languages with weak typing perform many implicit conversions between data types. Weak typing language often allow forcing the compiler to arbitrarily interpret a data item as having different representations—this can be a non-obvious programming error, or a technical method to directly deal with underlying hardware.","['programming', 'language', 'rule', 'type', 'convert', 'language', 'strong', 'typing', 'typically', 'little', 'implicit', 'conversion', 'discourage', 'reinterpretation', 'representation', 'language', 'weak', 'typing', 'perform', 'implicit', 'conversion', 'datum', 'type', 'weak', 'typing', 'language', 'allow', 'force', 'compiler', 'arbitrarily', 'interpret', 'data', 'item', 'have', 'different', 'representation', 'non', 'obvious', 'programming', 'error', 'technical', 'method', 'directly', 'deal', 'underlie', 'hardware']"
4624,"In most languages, the word coercion is used to denote an implicit conversion, either during compilation or during run time. For example, in an expression mixing integer and floating point numbers like 5 + 0.1, the compiler will automatically convert integer representation into floating point representation so fractions are not lost. Explicit type conversions are either indicated by writing additional code e.g. adding type identifiers or calling built-in routines or by coding conversion routines for the compiler to use when it otherwise would halt with a type mismatch.","['language', 'word', 'coercion', 'denote', 'implicit', 'conversion', 'compilation', 'run', 'time', 'example', 'expression', 'mix', 'integer', 'float', 'point', 'number', 'like', '0', 'compiler', 'automatically', 'convert', 'integer', 'representation', 'float', 'point', 'representation', 'fraction', 'lose', 'explicit', 'type', 'conversion', 'indicate', 'write', 'additional', 'code', 'e.g.', 'add', 'type', 'identifier', 'call', 'build', 'routine', 'code', 'conversion', 'routine', 'compiler', 'use', 'halt', 'type', 'mismatch']"
4625,"In most ALGOL-like languages, such as Pascal, Modula-2, Ada and Delphi, conversion and casting are distinctly different concepts. In these languages, conversion refers to either implicitly or explicitly changing a value from one data type storage format to another, e.g. a 16-bit integer to a 32-bit integer. The storage needs may change as a result of the conversion, including a possible loss of precision or truncation. The word cast, on the other hand, refers to explicitly changing the interpretation of the bit pattern representing a value from one type to another. For example, 32 contiguous bits may be treated as an array of 32 booleans, a 4-byte string, an unsigned 32-bit integer or an IEEE single precision floating point value. Because the stored bits are never changed, the programmer must know low level details such as representation format, byte order, and alignment needs, to meaningfully cast.","['algol', 'like', 'language', 'pascal', 'modula-2', 'ada', 'delphi', 'conversion', 'casting', 'distinctly', 'different', 'concept', 'language', 'conversion', 'refer', 'implicitly', 'explicitly', 'change', 'value', 'data', 'type', 'storage', 'format', 'e.g.', 'bit', 'integer', 'bit', 'integer', 'storage', 'need', 'change', 'result', 'conversion', 'include', 'possible', 'loss', 'precision', 'truncation', 'word', 'cast', 'hand', 'refer', 'explicitly', 'change', 'interpretation', 'bit', 'pattern', 'represent', 'value', 'type', 'example', 'contiguous', 'bit', 'treat', 'array', 'boolean', 'byte', 'string', 'unsigned', 'bit', 'integer', 'ieee', 'single', 'precision', 'float', 'point', 'value', 'store', 'bit', 'change', 'programmer', 'know', 'low', 'level', 'detail', 'representation', 'format', 'byte', 'order', 'alignment', 'need', 'meaningfully', 'cast']"
4626,"In the C family of languages and ALGOL 68, the word cast typically refers to an explicit type conversion as opposed to an implicit conversion, causing some ambiguity about whether this is a re-interpretation of a bit-pattern or a real data representation conversion. More important is the multitude of ways and rules that apply to what data type or class is located by a pointer and how a pointer may be adjusted by the compiler in cases like object class inheritance.","['family', 'language', 'algol', 'word', 'cast', 'typically', 'refer', 'explicit', 'type', 'conversion', 'oppose', 'implicit', 'conversion', 'cause', 'ambiguity', 'interpretation', 'bit', 'pattern', 'real', 'data', 'representation', 'conversion', 'important', 'multitude', 'way', 'rule', 'apply', 'data', 'type', 'class', 'locate', 'pointer', 'pointer', 'adjust', 'compiler', 'case', 'like', 'object', 'class', 'inheritance']"
4627,"Implicit type conversion, also known as coercion or type juggling, is an automatic type conversion by the compiler. Some programming languages allow compilers to provide coercion; others require it.","['implicit', 'type', 'conversion', 'know', 'coercion', 'type', 'juggling', 'automatic', 'type', 'conversion', 'compiler', 'programming', 'language', 'allow', 'compiler', 'provide', 'coercion', 'require']"
4628,"In a mixed-type expression, data of one or more subtypes can be converted to a supertype as needed at runtime so that the program will run correctly. For example, the following is legal C language code:","['mixed', 'type', 'expression', 'datum', 'subtype', 'convert', 'supertype', 'need', 'runtime', 'program', 'run', 'correctly', 'example', 'following', 'legal', 'language', 'code']"
4629,"Although .mw-parser-output .monospacedfont-family:monospace,monospaced, l, and i belong to different data types, they will be automatically converted to equal data types each time a comparison or assignment is executed. This behavior should be used with caution, as unintended consequences can arise. Data can be lost when converting representations from floating-point to integer, as the fractional components of the floating-point values will be truncated rounded toward zero. Conversely, precision can be lost when converting representations from integer to floating-point, since a floating-point type may be unable to exactly represent all possible values of some integer type. For example, float might be an IEEE 754 single precision type, which cannot represent the integer 16777217 exactly, while a 32-bit integer type can. This can lead to unintuitive behavior, as demonstrated by the following code:","['.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospace', 'belong', 'different', 'datum', 'type', 'automatically', 'convert', 'equal', 'data', 'type', 'time', 'comparison', 'assignment', 'execute', 'behavior', 'caution', 'unintended', 'consequence', 'arise', 'datum', 'lose', 'convert', 'representation', 'float', 'point', 'integer', 'fractional', 'component', 'float', 'point', 'value', 'truncate', 'round', 'zero', 'conversely', 'precision', 'lose', 'convert', 'representation', 'integer', 'float', 'point', 'float', 'point', 'type', 'unable', 'exactly', 'represent', 'possible', 'value', 'integer', 'type', 'example', 'float', 'ieee', '754', 'single', 'precision', 'type', 'represent', 'integer', '16777217', 'exactly', 'bit', 'integer', 'type', 'lead', 'unintuitive', 'behavior', 'demonstrate', 'follow', 'code']"
4630,"On compilers that implement floats as IEEE single precision, and ints as at least 32 bits, this code will give this peculiar print-out:","['compiler', 'implement', 'float', 'ieee', 'single', 'precision', 'int', 'bit', 'code', 'peculiar', 'print']"
4631,"Note that 1 represents equality in the last line above. This odd behavior is caused by an implicit conversion of i_value to float when it is compared with f_value. The conversion causes loss of precision, which makes the values equal before the comparison.","['note', 'represent', 'equality', 'line', 'odd', 'behavior', 'cause', 'implicit', 'conversion', 'i_value', 'float', 'compare', 'f_value', 'conversion', 'cause', 'loss', 'precision', 'make', 'value', 'equal', 'comparison']"
4632,"One special case of implicit type conversion is type promotion, where an object is automatically converted into another data type representing a superset of the original type. Promotions are commonly used with types smaller than the native type of the target platform's arithmetic logic unit ALU, before arithmetic and logical operations, to make such operations possible, or more efficient if the ALU can work with more than one type. C and C++ perform such promotion for objects of boolean, character, wide character, enumeration, and short integer types which are promoted to int, and for objects of type float, which are promoted to double. Unlike some other type conversions, promotions never lose precision or modify the value stored in the object.","['special', 'case', 'implicit', 'type', 'conversion', 'type', 'promotion', 'object', 'automatically', 'convert', 'data', 'type', 'represent', 'superset', 'original', 'type', 'promotion', 'commonly', 'type', 'small', 'native', 'type', 'target', 'platform', 'arithmetic', 'logic', 'unit', 'alu', 'arithmetic', 'logical', 'operation', 'operation', 'possible', 'efficient', 'alu', 'work', 'type', 'c++', 'perform', 'promotion', 'object', 'boolean', 'character', 'wide', 'character', 'enumeration', 'short', 'integer', 'type', 'promote', 'int', 'object', 'type', 'float', 'promote', 'double', 'unlike', 'type', 'conversion', 'promotion', 'lose', 'precision', 'modify', 'value', 'store', 'object']"
4633,"Explicit type conversion, also called type casting, is a type conversion which is explicitly defined within a program instead of being done automatically according to the rules of the language for implicit type conversion. It is requested by the user in the program.","['explicit', 'type', 'conversion', 'call', 'type', 'casting', 'type', 'conversion', 'explicitly', 'define', 'program', 'instead', 'automatically', 'accord', 'rule', 'language', 'implicit', 'type', 'conversion', 'request', 'user', 'program']"
4634,There are several kinds of explicit conversion.,"['kind', 'explicit', 'conversion']"
4635,"In object-oriented programming languages, objects can also be downcast : a reference of a base class is cast to one of its derived classes.","['object', 'orient', 'programming', 'language', 'object', 'downcast', 'reference', 'base', 'class', 'cast', 'derive', 'class']"
4636,"In C#, type conversion can be made in a safe or unsafe i.e., C-like manner, the former called checked type cast.8","['type', 'conversion', 'safe', 'unsafe', 'i.e.', 'like', 'manner', 'call', 'check', 'type', 'cast']"
4637,In C++ a similar effect can be achieved using C++-style cast syntax.,"['c++', 'similar', 'effect', 'achieve', 'c++-style', 'cast', 'syntax']"
4638,"In Eiffel the notion of type conversion is integrated into the rules of the type system. The Assignment Rule says that an assignment, such as:","['eiffel', 'notion', 'type', 'conversion', 'integrate', 'rule', 'type', 'system', 'assignment', 'rule', 'say', 'assignment']"
4639,"is valid if and only if the type of its source expression, y in this case, is compatible with the type of its target entity, x in this case. In this rule, compatible with means that the type of the source expression either conforms to or converts to that of the target. Conformance of types is defined by the familiar rules for polymorphism in object-oriented programming. For example, in the assignment above, the type of y conforms to the type of x if the class upon which y is based is a descendant of that upon which x is based.","['valid', 'type', 'source', 'expression', 'case', 'compatible', 'type', 'target', 'entity', 'case', 'rule', 'compatible', 'mean', 'type', 'source', 'expression', 'conform', 'convert', 'target', 'conformance', 'type', 'define', 'familiar', 'rule', 'polymorphism', 'object', 'orient', 'programming', 'example', 'assignment', 'type', 'conform', 'type', 'class', 'base', 'descendant', 'base']"
4640,"The actions of type conversion in Eiffel, specifically converts to and converts from are defined as:","['action', 'type', 'conversion', 'eiffel', 'specifically', 'convert', 'convert', 'define']"
4641,A type based on a class CU converts to a type T based on a class CT and T converts from U if either,"['type', 'base', 'class', 'convert', 'type', 'base', 'class', 'convert']"
4642,"Eiffel is a fully compliant language for Microsoft .NET Framework. Before development of .NET, Eiffel already had extensive class libraries. Using the .NET type libraries, particularly with commonly used types such as strings, poses a conversion problem. Existing Eiffel software uses the string classes such as STRING_8 from the Eiffel libraries, but Eiffel software written for .NET must use the .NET string class System.String in many cases, for example when calling .NET methods which expect items of the .NET type to be passed as arguments. So, the conversion of these types back and forth needs to be as seamless as possible.","['eiffel', 'fully', 'compliant', 'language', 'microsoft', '.net', 'framework', 'development', '.net', 'eiffel', 'extensive', 'class', 'library', '.net', 'type', 'library', 'particularly', 'commonly', 'type', 'string', 'pose', 'conversion', 'problem', 'exist', 'eiffel', 'software', 'use', 'string', 'class', 'string_8', 'eiffel', 'library', 'eiffel', 'software', 'write', '.net', 'use', '.net', 'string', 'class', 'system', 'string', 'case', 'example', 'call', '.net', 'method', 'expect', 'item', '.net', 'type', 'pass', 'argument', 'conversion', 'type', 'forth', 'need', 'seamless', 'possible']"
4643,"In the code above, two strings are declared, one of each different type SYSTEM_STRING is the Eiffel compliant alias for System.String. Because System.String does not conform to STRING_8, then the assignment above is valid only if System.String converts to STRING_8.","['code', 'string', 'declare', 'different', 'type', 'system_stre', 'eiffel', 'compliant', 'alia', 'system', 'string', 'system', 'string', 'conform', 'string_8', 'assignment', 'valid', 'system', 'string', 'convert', 'string_8']"
4644,The Eiffel class STRING_8 has a conversion procedure make_from_cil for objects of type System.String. Conversion procedures are also always designated as creation procedures similar to constructors. The following is an excerpt from the STRING_8 class:,"['eiffel', 'class', 'string_8', 'conversion', 'procedure', 'make_from_cil', 'object', 'type', 'system', 'string', 'conversion', 'procedure', 'designate', 'creation', 'procedure', 'similar', 'constructor', 'follow', 'excerpt', 'string_8', 'class']"
4645,The presence of the conversion procedure makes the assignment:,"['presence', 'conversion', 'procedure', 'make', 'assignment']"
4646,in which my_string is constructed as a new object of type STRING_8 with content equivalent to that of my_system_string.,"['my_string', 'construct', 'new', 'object', 'type', 'string_8', 'content', 'equivalent', 'my_system_string']"
4647,To handle an assignment with original source and target reversed:,"['handle', 'assignment', 'original', 'source', 'target', 'reverse']"
4648,the class STRING_8 also contains a conversion query to_cil which will produce a System.String from an instance of STRING_8.,"['class', 'string_8', 'contain', 'conversion', 'query', 'to_cil', 'produce', 'system', 'string', 'instance', 'string_8']"
4649,"In Eiffel, the setup for type conversion is included in the class code, but then appears to happen as automatically as explicit type conversion in client code. The includes not just assignments but other types of attachments as well, such as argument parameter substitution.","['eiffel', 'setup', 'type', 'conversion', 'include', 'class', 'code', 'appear', 'happen', 'automatically', 'explicit', 'type', 'conversion', 'client', 'code', 'include', 'assignment', 'type', 'attachment', 'argument', 'parameter', 'substitution']"
4650,"Rust provides no implicit type conversion coercion between primitive types. But, explicit type conversion casting can be performed using the as keyword.9","['rust', 'provide', 'implicit', 'type', 'conversion', 'coercion', 'primitive', 'type', 'explicit', 'type', 'conversion', 'casting', 'perform', 'keyword']"
4651,"In hacking, typecasting is the misuse of type conversion to temporarily change a variable's data type from how it was originally defined.10 This provides opportunities for hackers since in type conversion after a variable is ""typecast"" to become a different data type, the compiler will treat that hacked variable as the new data type for that specific operation.11","['hack', 'typecasting', 'misuse', 'type', 'conversion', 'temporarily', 'change', 'variable', 'data', 'type', 'originally', 'defined', 'provide', 'opportunity', 'hacker', 'type', 'conversion', 'variable', 'typecast', 'different', 'datum', 'type', 'compiler', 'treat', 'hack', 'variable', 'new', 'data', 'type', 'specific', 'operation']"
4652,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4653,"In object-oriented programming, a virtual base class is a nested inner class whose functions and member variables can be overridden and redefined by subclasses of an outer class.1 Virtual classes are analogous to virtual functions.","['object', 'orient', 'programming', 'virtual', 'base', 'class', 'nested', 'inner', 'class', 'function', 'member', 'variable', 'overridden', 'redefine', 'subclass', 'outer', 'class', 'virtual', 'class', 'analogous', 'virtual', 'function']"
4654,The run time type of a virtual class depends on the run time type of an object of the outer class. Just like the run time type of an object decides which virtual function should be used.,"['run', 'time', 'type', 'virtual', 'class', 'depend', 'run', 'time', 'type', 'object', 'outer', 'class', 'like', 'run', 'time', 'type', 'object', 'decide', 'virtual', 'function']"
4655,"A run time instance type of the outer class object not only decides on the polymorphic type of its own type object, but also on a whole family tree of virtual class members.","['run', 'time', 'instance', 'type', 'outer', 'class', 'object', 'decide', 'polymorphic', 'type', 'type', 'object', 'family', 'tree', 'virtual', 'class', 'member']"
4656,"Virtual classes solve the extensibility problem of extending data abstraction with new functions and representations. Like virtual functions, virtual classes follow the same rules of definition, overriding, and reference.2","['virtual', 'class', 'solve', 'extensibility', 'problem', 'extend', 'datum', 'abstraction', 'new', 'function', 'representation', 'like', 'virtual', 'function', 'virtual', 'class', 'follow', 'rule', 'definition', 'overriding', 'reference']"
4657,"When a derived class inherits from a base class, it must define or override the virtual inner classes it inherited from the base class. An object of the child class may be referred to by a reference or pointer of the parent class type or the child class type. When the reference or pointer invoke the virtual inner classes, the derived class's implementation will be called if the object is of the derived class type. The type of the outer class determines the run time of the inner virtual class.","['derive', 'class', 'inherit', 'base', 'class', 'define', 'override', 'virtual', 'inner', 'class', 'inherit', 'base', 'class', 'object', 'child', 'class', 'refer', 'reference', 'pointer', 'parent', 'class', 'type', 'child', 'class', 'type', 'reference', 'pointer', 'invoke', 'virtual', 'inner', 'class', 'derive', 'class', 'implementation', 'call', 'object', 'derive', 'class', 'type', 'type', 'outer', 'class', 'determine', 'run', 'time', 'inner', 'virtual', 'class']"
4658,A method with an object argument has access to the object's virtual classes. The method can use the virtual classes of its arguments to create instances and declare variables. Virtual classes of different instances are not compatible.,"['method', 'object', 'argument', 'access', 'object', 'virtual', 'class', 'method', 'use', 'virtual', 'class', 'argument', 'create', 'instance', 'declare', 'variable', 'virtual', 'class', 'different', 'instance', 'compatible']"
4659,"For example, a base class Machine could have a virtual class Parts. Subclass Car would implement Parts differently than the subclass Bicycle, but the programmer can call any methods in the virtual inner class Parts on any class Machine object, and get the Parts implementation of that specific derived class.","['example', 'base', 'class', 'machine', 'virtual', 'class', 'parts', 'subclass', 'car', 'implement', 'parts', 'differently', 'subclass', 'bicycle', 'programmer', 'method', 'virtual', 'inner', 'class', 'parts', 'class', 'machine', 'object', 'parts', 'implementation', 'specific', 'derive', 'class']"
4660,"Any object of class type Machine can be accessed the same way. The programmer can ask for the number of wheels by calling get_Wheels, without needing to know what kind of machine it is, how many wheels that machine has, or all the possible types of machines there are. Functions like get_Fuel_Type can be added to the virtual class Parts by the derived class Car.","['object', 'class', 'type', 'machine', 'access', 'way', 'programmer', 'ask', 'number', 'wheel', 'call', 'get_wheel', 'need', 'know', 'kind', 'machine', 'wheel', 'machine', 'possible', 'type', 'machine', 'function', 'like', 'get_fuel_type', 'add', 'virtual', 'class', 'part', 'derive', 'class', 'car']"
4661,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4662,"In object-oriented programming, in languages such as C++, and Object Pascal, a virtual function or virtual method is an inheritable and overridable function or method for which dynamic dispatch is facilitated. This concept is an important part of the runtime polymorphism portion of object-oriented programming OOP. In short, a virtual function defines a target function to be executed, but the target might not be known at compile time.","['object', 'orient', 'programming', 'language', 'c++', 'object', 'pascal', 'virtual', 'function', 'virtual', 'method', 'inheritable', 'overridable', 'function', 'method', 'dynamic', 'dispatch', 'facilitate', 'concept', 'important', 'runtime', 'polymorphism', 'portion', 'object', 'orient', 'programming', 'oop', 'short', 'virtual', 'function', 'define', 'target', 'function', 'execute', 'target', 'know', 'compile', 'time']"
4663,"Most programming languages, such as JavaScript, PHP and Python, treat all methods as virtual by default12 and do not provide a modifier to change this behavior. However, some languages provide modifiers to prevent methods from being overridden by derived classes such as the final keyword in Java3 and PHP4.","['programming', 'language', 'javascript', 'php', 'python', 'treat', 'method', 'virtual', 'default12', 'provide', 'modifier', 'change', 'behavior', 'language', 'provide', 'modifier', 'prevent', 'method', 'overridden', 'derive', 'class', 'final', 'keyword', 'java3', 'php4']"
4664,The concept of the virtual function solves the following problem:,"['concept', 'virtual', 'function', 'solve', 'follow', 'problem']"
4665,"In object-oriented programming, when a derived class inherits from a base class, an object of the derived class may be referred to via a pointer or reference of the base class type instead of the derived class type. If there are base class methods overridden by the derived class, the method actually called by such a reference or pointer can be bound linked either 'early' by the compiler, according to the declared type of the pointer or reference, or 'late' i.e., by the runtime system of the language, according to the actual type of the object is referred to.","['object', 'orient', 'programming', 'derive', 'class', 'inherit', 'base', 'class', 'object', 'derive', 'class', 'refer', 'pointer', 'reference', 'base', 'class', 'type', 'instead', 'derive', 'class', 'type', 'base', 'class', 'method', 'override', 'derive', 'class', 'method', 'actually', 'call', 'reference', 'pointer', 'bind', 'link', 'early', 'compiler', 'accord', 'declare', 'type', 'pointer', 'reference', 'late', 'i.e.', 'runtime', 'system', 'language', 'accord', 'actual', 'type', 'object', 'refer']"
4666,"Virtual functions are resolved 'late'. If the function in question is 'virtual' in the base class, the most-derived class's implementation of the function is called according to the actual type of the object referred to, regardless of the declared type of the pointer or reference. If it is not 'virtual', the method is resolved 'early' and selected according to the declared type of the pointer or reference.","['virtual', 'function', 'resolve', 'late', 'function', 'question', 'virtual', 'base', 'class', 'derive', 'class', 'implementation', 'function', 'call', 'accord', 'actual', 'type', 'object', 'refer', 'regardless', 'declare', 'type', 'pointer', 'reference', 'virtual', 'method', 'resolve', 'early', 'select', 'accord', 'declare', 'type', 'pointer', 'reference']"
4667,Virtual functions allow a program to call methods that don't necessarily even exist at the moment the code is compiled.citation needed,"['virtual', 'function', 'allow', 'program', 'method', 'necessarily', 'exist', 'moment', 'code', 'compiled.citation', 'need']"
4668,"In C++, virtual methods are declared by prepending the virtual keyword to the function's declaration in the base class. This modifier is inherited by all implementations of that method in derived classes, meaning that they can continue to over-ride each other and be late-bound. And even if methods owned by the base class call the virtual method, they will instead be calling the derived method. Overloading occurs when two or more methods in one class have the same method name but different parameters. Overriding means having two methods with the same method name and parameters. Overloading is also referred to as function matching, and overriding as dynamic function mapping.","['c++', 'virtual', 'method', 'declare', 'prepende', 'virtual', 'keyword', 'function', 'declaration', 'base', 'class', 'modifier', 'inherit', 'implementation', 'method', 'derive', 'class', 'mean', 'continue', 'ride', 'late', 'bind', 'method', 'own', 'base', 'class', 'virtual', 'method', 'instead', 'call', 'derive', 'method', 'overloading', 'occur', 'method', 'class', 'method', 'different', 'parameter', 'overriding', 'mean', 'have', 'method', 'method', 'parameter', 'overloading', 'refer', 'function', 'matching', 'override', 'dynamic', 'function', 'mapping']"
4669,"For example, a base class Animal could have a virtual function Eat. Subclass Llama would implement Eat differently than subclass Wolf, but one can invoke Eat on any class instance referred to as Animal, and get the Eat behavior of the specific subclass.","['example', 'base', 'class', 'animal', 'virtual', 'function', 'eat', 'subclass', 'llama', 'implement', 'eat', 'differently', 'subclass', 'wolf', 'invoke', 'eat', 'class', 'instance', 'refer', 'animal', 'eat', 'behavior', 'specific', 'subclass']"
4670,"This allows a programmer to process a list of objects of class Animal, telling each in turn to eat by calling Eat, without needing to know what kind of animal may be in the list, how each animal eats, or what the complete set of possible animal types might be.","['allow', 'programmer', 'process', 'list', 'object', 'class', 'animal', 'tell', 'turn', 'eat', 'call', 'eat', 'need', 'know', 'kind', 'animal', 'list', 'animal', 'eat', 'complete', 'set', 'possible', 'animal', 'type']"
4671,"In C, the mechanism behind virtual functions could be provided in the following manner:","['mechanism', 'virtual', 'function', 'provide', 'follow', 'manner']"
4672,"A pure virtual function or pure virtual method is a virtual function that is required to be implemented by a derived class if the derived class is not abstract. Classes containing pure virtual methods are termed ""abstract"" and they cannot be instantiated directly. A subclass of an abstract class can only be instantiated directly if all inherited pure virtual methods have been implemented by that class or a parent class. Pure virtual methods typically have a declaration signature and no definition implementation.","['pure', 'virtual', 'function', 'pure', 'virtual', 'method', 'virtual', 'function', 'require', 'implement', 'derive', 'class', 'derive', 'class', 'abstract', 'class', 'contain', 'pure', 'virtual', 'method', 'term', 'abstract', 'instantiate', 'directly', 'subclass', 'abstract', 'class', 'instantiate', 'directly', 'inherit', 'pure', 'virtual', 'method', 'implement', 'class', 'parent', 'class', 'pure', 'virtual', 'method', 'typically', 'declaration', 'signature', 'definition', 'implementation']"
4673,"As an example, an abstract base class MathSymbol may provide a pure virtual function doOperation, and derived classes Plus and Minus implement doOperation to provide concrete implementations. Implementing doOperation would not make sense in the MathSymbol class, as MathSymbol is an abstract concept whose behaviour is defined solely for each given kind subclass of MathSymbol. Similarly, a given subclass of MathSymbol would not be complete without an implementation of doOperation.","['example', 'abstract', 'base', 'class', 'mathsymbol', 'provide', 'pure', 'virtual', 'function', 'dooperation', 'derive', 'class', 'plus', 'minus', 'implement', 'dooperation', 'provide', 'concrete', 'implementation', 'implement', 'dooperation', 'sense', 'mathsymbol', 'class', 'mathsymbol', 'abstract', 'concept', 'behaviour', 'define', 'solely', 'give', 'kind', 'subclass', 'mathsymbol', 'similarly', 'give', 'subclass', 'mathsymbol', 'complete', 'implementation', 'dooperation']"
4674,"Although pure virtual methods typically have no implementation in the class that declares them, pure virtual methods in some languages e.g. C++ and Python are permitted to contain an implementation in their declaring class, providing fallback or default behaviour that a derived class can delegate to, if appropriate.56","['pure', 'virtual', 'method', 'typically', 'implementation', 'class', 'declare', 'pure', 'virtual', 'method', 'language', 'e.g.', 'c++', 'python', 'permit', 'contain', 'implementation', 'declaring', 'class', 'provide', 'fallback', 'default', 'behaviour', 'derive', 'class', 'delegate', 'appropriate']"
4675,"Pure virtual functions can also be used where the method declarations are being used to define an interface - similar to what the interface keyword in Java explicitly specifies. In such a use, derived classes will supply all implementations. In such a design pattern, the abstract class which serves as an interface will contain only pure virtual functions, but no data members or ordinary methods. In C++, using such purely abstract classes as interfaces works because C++ supports multiple inheritance. However, because many OOP languages do not support multiple inheritance, they often provide a separate interface mechanism. An example is the Java programming language.","['pure', 'virtual', 'function', 'method', 'declaration', 'define', 'interface', 'similar', 'interface', 'keyword', 'java', 'explicitly', 'specify', 'use', 'derive', 'class', 'supply', 'implementation', 'design', 'pattern', 'abstract', 'class', 'serve', 'interface', 'contain', 'pure', 'virtual', 'function', 'data', 'member', 'ordinary', 'method', 'c++', 'purely', 'abstract', 'class', 'interface', 'work', 'c++', 'support', 'multiple', 'inheritance', 'oop', 'language', 'support', 'multiple', 'inheritance', 'provide', 'separate', 'interface', 'mechanism', 'example', 'java', 'programming', 'language']"
4676,"Languages differ in their behavior while the constructor or destructor of an object is running. For this reason, calling virtual functions in constructors is generally discouraged.","['language', 'differ', 'behavior', 'constructor', 'destructor', 'object', 'run', 'reason', 'call', 'virtual', 'function', 'constructor', 'generally', 'discourage']"
4677,"In C++, the ""base"" function is called. Specifically, the most derived function that is not more derived than the current constructor or destructor's class is called.7: §15.7.3 89 If that function is a pure virtual function, then undefined behavior occurs.7: §13.4.6 8 This is true even if the class contains an implementation for that pure virtual function, since a call to a pure virtual function must be explicitly qualified.10 A conforming C++ implementation is not required and generally not able to detect indirect calls to pure virtual functions at compile time or link time. Some runtime systems will issue a pure virtual function call error when encountering a call to a pure virtual function at run time.","['c++', 'base', 'function', 'call', 'specifically', 'derive', 'function', 'derive', 'current', 'constructor', 'destructor', 'class', 'called', '15', 'function', 'pure', 'virtual', 'function', 'undefined', 'behavior', 'occurs', '13', 'true', 'class', 'contain', 'implementation', 'pure', 'virtual', 'function', 'pure', 'virtual', 'function', 'explicitly', 'qualified', 'conform', 'c++', 'implementation', 'require', 'generally', 'able', 'detect', 'indirect', 'call', 'pure', 'virtual', 'function', 'compile', 'time', 'link', 'time', 'runtime', 'system', 'issue', 'pure', 'virtual', 'function', 'error', 'encounter', 'pure', 'virtual', 'function', 'run', 'time']"
4678,"In Java and C#, the derived implementation is called, but some fields are not yet initialized by the derived constructor although they are initialized to their default zero values.11 Some design patterns, such as the Abstract Factory Pattern, actively promote this usage in languages supporting this ability.","['java', 'derive', 'implementation', 'call', 'field', 'initialize', 'derive', 'constructor', 'initialize', 'default', 'zero', 'values', 'design', 'pattern', 'abstract', 'factory', 'pattern', 'actively', 'promote', 'usage', 'language', 'support', 'ability']"
4679,"Object-oriented languages typically manage memory allocation and de-allocation automatically when objects are created and destroyed. However, some object-oriented languages allow a custom destructor method to be implemented, if desired. If the language in question uses automatic memory management, the custom destructor generally called a finalizer in this context that is called is certain to be the appropriate one for the object in question. For example, if an object of type Wolf that inherits Animal is created, and both have custom destructors, the one called will be the one declared in Wolf.","['object', 'orient', 'language', 'typically', 'manage', 'memory', 'allocation', 'allocation', 'automatically', 'object', 'create', 'destroy', 'object', 'orient', 'language', 'allow', 'custom', 'destructor', 'method', 'implement', 'desire', 'language', 'question', 'use', 'automatic', 'memory', 'management', 'custom', 'destructor', 'generally', 'call', 'finalizer', 'context', 'call', 'certain', 'appropriate', 'object', 'question', 'example', 'object', 'type', 'wolf', 'inherit', 'animal', 'create', 'custom', 'destructor', 'call', 'declare', 'wolf']"
4680,"In manual memory management contexts, the situation can be more complex, particularly in relation to static dispatch. If an object of type Wolf is created but pointed to by an Animal pointer, and it is this Animal pointer type that is deleted, the destructor called may actually be the one defined for Animal and not the one for Wolf, unless the destructor is virtual. This is particularly the case with C++, where the behavior is a common source of programming errors if destructors are not virtual.","['manual', 'memory', 'management', 'context', 'situation', 'complex', 'particularly', 'relation', 'static', 'dispatch', 'object', 'type', 'wolf', 'create', 'point', 'animal', 'pointer', 'animal', 'pointer', 'type', 'delete', 'destructor', 'call', 'actually', 'define', 'animal', 'wolf', 'destructor', 'virtual', 'particularly', 'case', 'c++', 'behavior', 'common', 'source', 'programming', 'error', 'destructor', 'virtual']"
4681,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4682,"In computer programming, a virtual method table VMT, virtual function table, virtual call table, dispatch table, vtable, or vftable is a mechanism used in a programming language to support dynamic dispatch or run-time method binding.","['computer', 'programming', 'virtual', 'method', 'table', 'vmt', 'virtual', 'function', 'table', 'virtual', 'table', 'dispatch', 'table', 'vtable', 'vftable', 'mechanism', 'programming', 'language', 'support', 'dynamic', 'dispatch', 'run', 'time', 'method', 'bind']"
4683,"Whenever a class defines a virtual function or method, most compilers add a hidden member variable to the class that points to an array of pointers to virtual functions called the virtual method table. These pointers are used at runtime to invoke the appropriate function implementations, because at compile time it may not yet be known if the base function is to be called or a derived one implemented by a class that inherits from the base class.","['class', 'define', 'virtual', 'function', 'method', 'compiler', 'add', 'hide', 'member', 'variable', 'class', 'point', 'array', 'pointer', 'virtual', 'function', 'call', 'virtual', 'method', 'table', 'pointer', 'runtime', 'invoke', 'appropriate', 'function', 'implementation', 'compile', 'time', 'know', 'base', 'function', 'call', 'derive', 'implement', 'class', 'inherit', 'base', 'class']"
4684,"There are many different ways to implement such dynamic dispatch, but use of virtual method tables is especially common among C++ and related languages such as D and C#. Languages that separate the programmatic interface of objects from the implementation, like Visual Basic and Delphi, also tend to use this approach, because it allows objects to use a different implementation simply by using a different set of method pointers.","['different', 'way', 'implement', 'dynamic', 'dispatch', 'use', 'virtual', 'method', 'table', 'especially', 'common', 'c++', 'relate', 'language', 'language', 'separate', 'programmatic', 'interface', 'object', 'implementation', 'like', 'visual', 'basic', 'delphi', 'tend', 'use', 'approach', 'allow', 'object', 'use', 'different', 'implementation', 'simply', 'different', 'set', 'method', 'pointer']"
4685,"Suppose a program contains three classes in an inheritance hierarchy: a superclass, .mw-parser-output .monospacedfont-family:monospace,monospaceCat, and two subclasses, HouseCat and Lion. Class Cat defines a virtual function named speak, so its subclasses may provide an appropriate implementation e.g. either meow or roar. When the program calls the speak function on a Cat reference which can refer to an instance of Cat, or an instance of HouseCat or Lion, the code must be able to determine which implementation of the function the call should be dispatched to. This depends on the actual class of the object, not the class of the reference to it Cat. The class cannot generally be determined statically that is, at compile time, so neither can the compiler decide which function to call at that time. The call must be dispatched to the right function dynamically that is, at run time instead.","['suppose', 'program', 'contain', 'class', 'inheritance', 'hierarchy', 'superclass', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacecat', 'subclass', 'housecat', 'lion', 'class', 'cat', 'define', 'virtual', 'function', 'name', 'speak', 'subclass', 'provide', 'appropriate', 'implementation', 'e.g.', 'meow', 'roar', 'program', 'call', 'speak', 'function', 'cat', 'reference', 'refer', 'instance', 'cat', 'instance', 'housecat', 'lion', 'code', 'able', 'determine', 'implementation', 'function', 'dispatch', 'depend', 'actual', 'class', 'object', 'class', 'reference', 'cat', 'class', 'generally', 'determine', 'statically', 'compile', 'time', 'compiler', 'decide', 'function', 'time', 'dispatch', 'right', 'function', 'dynamically', 'run', 'time', 'instead']"
4686,"An object's virtual method table will contain the addresses of the object's dynamically bound methods. Method calls are performed by fetching the method's address from the object's virtual method table. The virtual method table is the same for all objects belonging to the same class, and is therefore typically shared between them. Objects belonging to type-compatible classes for example siblings in an inheritance hierarchy will have virtual method tables with the same layout: the address of a given method will appear at the same offset for all type-compatible classes. Thus, fetching the method's address from a given offset into a virtual method table will get the method corresponding to the object's actual class.1","['object', 'virtual', 'method', 'table', 'contain', 'address', 'object', 'dynamically', 'bind', 'method', 'method', 'call', 'perform', 'fetch', 'method', 'address', 'object', 'virtual', 'method', 'table', 'virtual', 'method', 'table', 'object', 'belong', 'class', 'typically', 'share', 'object', 'belong', 'type', 'compatible', 'class', 'example', 'sibling', 'inheritance', 'hierarchy', 'virtual', 'method', 'table', 'layout', 'address', 'give', 'method', 'appear', 'offset', 'type', 'compatible', 'class', 'fetch', 'method', 'address', 'give', 'offset', 'virtual', 'method', 'table', 'method', 'corresponding', 'object', 'actual', 'class']"
4687,"The C++ standards do not mandate exactly how dynamic dispatch must be implemented, but compilers generally use minor variations on the same basic model.","['c++', 'standard', 'mandate', 'exactly', 'dynamic', 'dispatch', 'implement', 'compiler', 'generally', 'use', 'minor', 'variation', 'basic', 'model']"
4688,"Typically, the compiler creates a separate virtual method table for each class. When an object is created, a pointer to this table, called the virtual table pointer, vpointer or VPTR, is added as a hidden member of this object. As such, the compiler must also generate ""hidden"" code in the constructors of each class to initialize a new object's virtual table pointer to the address of its class's virtual method table.","['typically', 'compiler', 'create', 'separate', 'virtual', 'method', 'table', 'class', 'object', 'create', 'pointer', 'table', 'call', 'virtual', 'table', 'pointer', 'vpointer', 'vptr', 'add', 'hide', 'member', 'object', 'compiler', 'generate', 'hide', 'code', 'constructor', 'class', 'initialize', 'new', 'object', 'virtual', 'table', 'pointer', 'address', 'class', 'virtual', 'method', 'table']"
4689,"Many compilers place the virtual table pointer as the last member of the object; other compilers place it as the first; portable source code works either way.2 For example, g++ previously placed the pointer at the end of the object.3","['compiler', 'place', 'virtual', 'table', 'pointer', 'member', 'object', 'compiler', 'place', 'portable', 'source', 'code', 'work', 'way', 'example', 'g++', 'previously', 'place', 'pointer', 'end', 'object']"
4690,Consider the following class declarations in C++ syntax:,"['consider', 'follow', 'class', 'declaration', 'c++', 'syntax']"
4691,used to derive the following class:,"['derive', 'following', 'class']"
4692,and the following piece of C++ code:,"['follow', 'piece', 'c++', 'code']"
4693,g++ 3.4.6 from GCC produces the following 32-bit memory layout for the object b2:nb 1,"['g++', '3', 'gcc', 'produce', 'follow', 'bit', 'memory', 'layout', 'object']"
4694,and the following memory layout for the object d:,"['follow', 'memory', 'layout', 'object']"
4695,Note that those functions not carrying the keyword virtual in their declaration such as fnonvirtual and d do not generally appear in the virtual method table. There are exceptions for special cases as posed by the default constructor.,"['note', 'function', 'carry', 'keyword', 'virtual', 'declaration', 'fnonvirtual', 'generally', 'appear', 'virtual', 'method', 'table', 'exception', 'special', 'case', 'pose', 'default', 'constructor']"
4696,"Also note the virtual destructors in the base classes, B1 and B2. They are necessary to ensure delete d can free up memory not just for D, but also for B1 and B2, if d is a pointer or reference to the types B1 or B2. They were excluded from the memory layouts to keep the example simple. nb 2","['note', 'virtual', 'destructor', 'base', 'class', 'necessary', 'ensure', 'delete', 'free', 'memory', 'pointer', 'reference', 'type', 'exclude', 'memory', 'layout', 'example', 'simple']"
4697,Overriding of the method f2 in class D is implemented by duplicating the virtual method table of B2 and replacing the pointer to B2::f2 with a pointer to D::f2.,"['override', 'method', 'class', 'implement', 'duplicate', 'virtual', 'method', 'table', 'replace', 'pointer', 'b2::f2', 'pointer', 'd::f2']"
4698,"The g++ compiler implements the multiple inheritance of the classes B1 and B2 in class D using two virtual method tables, one for each base class. There are other ways to implement multiple inheritance, but this is the most common. This leads to the necessity for ""pointer fixups"", also called thunks, when casting.","['g++', 'compiler', 'implement', 'multiple', 'inheritance', 'class', 'class', 'virtual', 'method', 'table', 'base', 'class', 'way', 'implement', 'multiple', 'inheritance', 'common', 'lead', 'necessity', 'pointer', 'fixup', 'call', 'thunk', 'cast']"
4699,"While d and b1 will point to the same memory location after execution of this code, b2 will point to the location d+8 eight bytes beyond the memory location of d. Thus, b2 points to the region within d that ""looks like"" an instance of B2, i.e., has the same memory layout as an instance of B2.","['point', 'memory', 'location', 'execution', 'code', 'point', 'location', 'd+8', 'byte', 'memory', 'location', 'point', 'region', 'look', 'like', 'instance', 'i.e.', 'memory', 'layout', 'instance']"
4700,"A call to d->f1 is handled by dereferencing d's D::B1 vpointer, looking up the f1 entry in the virtual method table, and then dereferencing that pointer to call the code.","['d->f1', 'handle', 'dereference', 'd::b1', 'vpointer', 'look', 'entry', 'virtual', 'method', 'table', 'dereference', 'pointer', 'code']"
4701,"In the case of single inheritance or in a language with only single inheritance, if the vpointer is always the first element in d as it is with many compilers, this reduces to the following pseudo-C++:","['case', 'single', 'inheritance', 'language', 'single', 'inheritance', 'vpointer', 'element', 'compiler', 'reduce', 'follow', 'pseudo', 'c++']"
4702,"Where *d refers to the virtual method table of D and 0 refers to the first method in the virtual method table. The parameter d becomes the ""this"" pointer to the object.","['refer', 'virtual', 'method', 'table', 'refer', 'method', 'virtual', 'method', 'table', 'parameter', 'pointer', 'object']"
4703,"In the more general case, calling B1::f1 or D::f2 is more complicated:","['general', 'case', 'call', 'b1::f1', 'd::f2', 'complicated']"
4704,The call to d->f1 passes a B1 pointer as a parameter. The call to d->f2 passes a B2 pointer as a parameter. This second call requires a fixup to produce the correct pointer. The location of B2::f2 is not in the virtual method table for D.,"['d->f1', 'pass', 'pointer', 'parameter', 'd->f2', 'pass', 'pointer', 'parameter', 'second', 'require', 'fixup', 'produce', 'correct', 'pointer', 'location', 'b2::f2', 'virtual', 'method', 'table']"
4705,"By comparison, a call to d->fnonvirtual is much simpler:","['comparison', 'd->fnonvirtual', 'simple']"
4706,"A virtual call requires at least an extra indexed dereference and sometimes a ""fixup"" addition, compared to a non-virtual call, which is simply a jump to a compiled-in pointer. Therefore, calling virtual functions is inherently slower than calling non-virtual functions. An experiment done in 1996 indicates that approximately 6–13% of execution time is spent simply dispatching to the correct function, though the overhead can be as high as 50%.4 The cost of virtual functions may not be so high on modern CPU architectures due to much larger caches and better branch prediction.","['virtual', 'require', 'extra', 'indexed', 'dereference', 'fixup', 'addition', 'compare', 'non', 'virtual', 'simply', 'jump', 'compile', 'pointer', 'call', 'virtual', 'function', 'inherently', 'slow', 'call', 'non', 'virtual', 'function', 'experiment', '1996', 'indicate', 'approximately', '6–13', 'execution', 'time', 'spend', 'simply', 'dispatch', 'correct', 'function', 'overhead', 'high', '50', 'cost', 'virtual', 'function', 'high', 'modern', 'cpu', 'architecture', 'large', 'cache', 'well', 'branch', 'prediction']"
4707,"Furthermore, in environments where JIT compilation is not in use, virtual function calls usually cannot be inlined. In certain cases it may be possible for the compiler to perform a process known as devirtualization in which, for instance, the lookup and indirect call are replaced with a conditional execution of each inlined body, but such optimizations are not common.","['furthermore', 'environment', 'jit', 'compilation', 'use', 'virtual', 'function', 'call', 'usually', 'inline', 'certain', 'case', 'possible', 'compiler', 'perform', 'process', 'know', 'devirtualization', 'instance', 'lookup', 'indirect', 'replace', 'conditional', 'execution', 'inline', 'body', 'optimization', 'common']"
4708,"To avoid this overhead, compilers usually avoid using virtual method tables whenever the call can be resolved at compile time.","['avoid', 'overhead', 'compiler', 'usually', 'avoid', 'virtual', 'method', 'table', 'resolve', 'compile', 'time']"
4709,"Thus, the call to f1 above may not require a table lookup because the compiler may be able to tell that d can only hold a D at this point, and D does not override f1. Or the compiler or optimizer may be able to detect that there are no subclasses of B1 anywhere in the program that override f1. The call to B1::f1 or B2::f2 will probably not require a table lookup because the implementation is specified explicitly although it does still require the 'this'-pointer fixup.","['require', 'table', 'lookup', 'compiler', 'able', 'tell', 'hold', 'point', 'override', 'compiler', 'optimizer', 'able', 'detect', 'subclass', 'program', 'override', 'b1::f1', 'b2::f2', 'probably', 'require', 'table', 'lookup', 'implementation', 'specify', 'explicitly', 'require', ""this'-pointer"", 'fixup']"
4710,"The virtual method table is generally a good performance trade-off to achieve dynamic dispatch, but there are alternatives, such as binary tree dispatch, with higher performance but different costs.5","['virtual', 'method', 'table', 'generally', 'good', 'performance', 'trade', 'achieve', 'dynamic', 'dispatch', 'alternative', 'binary', 'tree', 'dispatch', 'high', 'performance', 'different', 'costs']"
4711,"However, virtual method tables only allow for single dispatch on the special ""this"" parameter, in contrast to multiple dispatch as in CLOS, Dylan, or Julia, where the types of all parameters can be taken into account in dispatching.","['virtual', 'method', 'table', 'allow', 'single', 'dispatch', 'special', 'parameter', 'contrast', 'multiple', 'dispatch', 'clos', 'dylan', 'julia', 'type', 'parameter', 'take', 'account', 'dispatching']"
4712,"Virtual method tables also only work if dispatching is constrained to a known set of methods, so they can be placed in a simple array built at compile time, in contrast to duck typing languages such as Smalltalk, Python or JavaScript.","['virtual', 'method', 'table', 'work', 'dispatching', 'constrain', 'know', 'set', 'method', 'place', 'simple', 'array', 'build', 'compile', 'time', 'contrast', 'duck', 'typing', 'language', 'smalltalk', 'python', 'javascript']"
4713,"Languages that provide either or both of these features often dispatch by looking up a string in a hash table, or some other equivalent method. There are a variety of techniques to make this faster e.g., interning/tokenizing method names, caching lookups, just-in-time compilation.","['language', 'provide', 'feature', 'dispatch', 'look', 'string', 'hash', 'table', 'equivalent', 'method', 'variety', 'technique', 'fast', 'e.g.', 'intern', 'tokenize', 'method', 'name', 'cache', 'lookup', 'time', 'compilation']"
4714,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4715,"Virtual inheritance is a C++ technique that ensures only one copy of a base class's member variables are inherited by grandchild derived classes. Without virtual inheritance, if two classes B and C inherit from a class A, and a class D inherits from both B and C, then D will contain two copies of A's member variables: one via B, and one via C. These will be accessible independently, using scope resolution.","['virtual', 'inheritance', 'c++', 'technique', 'ensure', 'copy', 'base', 'class', 'member', 'variable', 'inherit', 'grandchild', 'derive', 'class', 'virtual', 'inheritance', 'class', 'inherit', 'class', 'class', 'inherit', 'contain', 'copy', 'member', 'variable', 'accessible', 'independently', 'scope', 'resolution']"
4716,"Instead, if classes B and C inherit virtually from class A, then objects of class D will contain only one set of the member variables from class A.","['instead', 'class', 'inherit', 'virtually', 'class', 'object', 'class', 'contain', 'set', 'member', 'variable', 'class']"
4717,"This feature is most useful for multiple inheritance, as it makes the virtual base a common subobject for the deriving class and all classes that are derived from it. This can be used to avoid the diamond problem by clarifying ambiguity over which ancestor class to use, as from the perspective of the deriving class D in the example above the virtual base A acts as though it were the direct base class of D, not a class derived indirectly through a base B or C.12","['feature', 'useful', 'multiple', 'inheritance', 'make', 'virtual', 'base', 'common', 'subobject', 'deriving', 'class', 'class', 'derive', 'avoid', 'diamond', 'problem', 'clarify', 'ambiguity', 'ancestor', 'class', 'use', 'perspective', 'deriving', 'class', 'example', 'virtual', 'base', 'act', 'direct', 'base', 'class', 'class', 'derive', 'indirectly', 'base', 'c']"
4718,"It is used when inheritance represents restriction of a set rather than composition of parts. In C++, a base class intended to be common throughout the hierarchy is denoted as virtual with the virtual keyword.","['inheritance', 'represent', 'restriction', 'set', 'composition', 'part', 'c++', 'base', 'class', 'intend', 'common', 'hierarchy', 'denote', 'virtual', 'virtual', 'keyword']"
4719,"As declared above, a call to bat.Eat is ambiguous because there are two Animal indirect base classes in Bat, so any Bat object has two different Animal base class subobjects. So an attempt to directly bind a reference to the Animal subobject of a Bat object would fail, since the binding is inherently ambiguous:","['declare', 'bat', 'eat', 'ambiguous', 'animal', 'indirect', 'base', 'class', 'bat', 'bat', 'object', 'different', 'animal', 'base', 'class', 'subobject', 'attempt', 'directly', 'bind', 'reference', 'animal', 'subobject', 'bat', 'object', 'fail', 'binding', 'inherently', 'ambiguous']"
4720,"To disambiguate, one would have to explicitly convert bat to either base class subobject:","['disambiguate', 'explicitly', 'convert', 'bat', 'base', 'class', 'subobject']"
4721,"In order to call Eat, the same disambiguation, or explicit qualification is needed: static_cast<Mammal&>bat.Eat or static_cast<WingedAnimal&>bat.Eat or alternatively bat.Mammal::Eat and bat.WingedAnimal::Eat. Explicit qualification not only uses an easier, uniform syntax for both pointers and objects but also allows for static dispatch, so it would arguably be the preferable method.","['order', 'eat', 'disambiguation', 'explicit', 'qualification', 'need', 'static_cast', 'mammal', 'eat', 'static_cast', 'wingedanimal', 'eat', 'alternatively', 'bat', 'mammal::eat', 'bat', 'wingedanimal::eat', 'explicit', 'qualification', 'use', 'easy', 'uniform', 'syntax', 'pointer', 'object', 'allow', 'static', 'dispatch', 'arguably', 'preferable', 'method']"
4722,"In this case, the double inheritance of Animal is probably unwanted, as we want to model that the relation Bat is an Animal exists only once; that a Bat is a Mammal and is a WingedAnimal does not imply that it is an Animal twice: an Animal base class corresponds to a contract that Bat implements the ""is a"" relationship above really means ""implements the requirements of"", and a Bat only implements the Animal contract once. The real world meaning of ""is a only once"" is that Bat should have only one way of implementing Eat, not two different ways, depending on whether the Mammal view of the Bat is eating, or the WingedAnimal view of the Bat. In the first code example we see that Eat is not overridden in either Mammal or WingedAnimal, so the two Animal subobjects will actually behave the same, but this is just a degenerate case, and that does not make a difference from the C++ point of view.","['case', 'double', 'inheritance', 'animal', 'probably', 'unwanted', 'want', 'model', 'relation', 'bat', 'animal', 'exist', 'bat', 'mammal', 'wingedanimal', 'imply', 'animal', 'twice', 'animal', 'base', 'class', 'correspond', 'contract', 'bat', 'implement', 'relationship', 'mean', 'implement', 'requirement', 'bat', 'implement', 'animal', 'contract', 'real', 'world', 'meaning', 'bat', 'way', 'implement', 'eat', 'different', 'way', 'depend', 'mammal', 'view', 'bat', 'eat', 'wingedanimal', 'view', 'bat', 'code', 'example', 'eat', 'overridden', 'mammal', 'wingedanimal', 'animal', 'subobject', 'actually', 'behave', 'degenerate', 'case', 'difference', 'c++', 'point', 'view']"
4723,This situation is sometimes referred to as diamond inheritance see Diamond problem because the inheritance diagram is in the shape of a diamond. Virtual inheritance can help to solve this problem.,"['situation', 'refer', 'diamond', 'inheritance', 'diamond', 'problem', 'inheritance', 'diagram', 'shape', 'diamond', 'virtual', 'inheritance', 'help', 'solve', 'problem']"
4724,We can re-declare our classes as follows:,"['declare', 'class', 'follow']"
4725,"The Animal portion of Bat::WingedAnimal is now the same Animal instance as the one used by Bat::Mammal, which is to say that a Bat has only one, shared, Animal instance in its representation and so a call to Bat::Eat is unambiguous. Additionally, a direct cast from Bat to Animal is also unambiguous, now that there exists only one Animal instance which Bat could be converted to.","['animal', 'portion', 'bat::wingedanimal', 'animal', 'instance', 'bat::mammal', 'bat', 'share', 'animal', 'instance', 'representation', 'bat::eat', 'unambiguous', 'additionally', 'direct', 'cast', 'bat', 'animal', 'unambiguous', 'exist', 'animal', 'instance', 'bat', 'convert']"
4726,"The ability to share a single instance of the Animal parent between Mammal and WingedAnimal is enabled by recording the memory offset between the Mammal or WingedAnimal members and those of the base Animal within the derived class. However this offset can in the general case only be known at runtime, thus Bat must become vpointer, Mammal, vpointer, WingedAnimal, Bat, Animal. There are two vtable pointers, one per inheritance hierarchy that virtually inherits Animal. In this example, one for Mammal and one for WingedAnimal. The object size has therefore increased by two pointers, but now there is only one Animal and no ambiguity. All objects of type Bat will use the same vpointers, but each Bat object will contain its own unique Animal object. If another class inherits from Mammal, such as Squirrel, then the vpointer in the Mammal part of Squirrel will generally be different to the vpointer in the Mammal part of Bat though they may happen to be the same if the Squirrel class be the same size as Bat.","['ability', 'share', 'single', 'instance', 'animal', 'parent', 'mammal', 'wingedanimal', 'enable', 'record', 'memory', 'offset', 'mammal', 'wingedanimal', 'member', 'base', 'animal', 'derive', 'class', 'offset', 'general', 'case', 'know', 'runtime', 'bat', 'vpointer', 'mammal', 'vpointer', 'wingedanimal', 'bat', 'animal', 'vtable', 'pointer', 'inheritance', 'hierarchy', 'virtually', 'inherit', 'animal', 'example', 'mammal', 'wingedanimal', 'object', 'size', 'increase', 'pointer', 'animal', 'ambiguity', 'object', 'type', 'bat', 'use', 'vpointer', 'bat', 'object', 'contain', 'unique', 'animal', 'object', 'class', 'inherit', 'mammal', 'squirrel', 'vpointer', 'mammal', 'squirrel', 'generally', 'different', 'vpointer', 'mammal', 'bat', 'happen', 'squirrel', 'class', 'size', 'bat']"
4727,This example to illustrates a case where base class A has a constructor variable msg and an additional ancestor E is derived from grandchild class D.,"['example', 'illustrate', 'case', 'base', 'class', 'constructor', 'variable', 'msg', 'additional', 'ancestor', 'derive', 'grandchild', 'class']"
4728,"Here, A must be constructed in both D and E. Further, inspection of the variable msg illustrates how class A becomes a direct base class of its deriving class, as opposed to a base class of any intermediate deriving classed between A and the final deriving class. The code below may be explored interactively here.","['construct', 'inspection', 'variable', 'msg', 'illustrate', 'class', 'direct', 'base', 'class', 'deriving', 'class', 'oppose', 'base', 'class', 'intermediate', 'deriving', 'class', 'final', 'deriving', 'class', 'code', 'explore', 'interactively']"
4729,"Suppose a pure virtual method is defined in the base class. If a deriving class inherits the base class virtually, then the pure virtual method does not need to be defined in that deriving class. However, if the deriving class does not inherit the base class virtually, then all virtual methods must be defined. The code below may be explored interactively here.","['suppose', 'pure', 'virtual', 'method', 'define', 'base', 'class', 'deriving', 'class', 'inherit', 'base', 'class', 'virtually', 'pure', 'virtual', 'method', 'need', 'define', 'deriving', 'class', 'deriving', 'class', 'inherit', 'base', 'class', 'virtually', 'virtual', 'method', 'define', 'code', 'explore', 'interactively']"
4730,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4731,"In computer programming, a virtual method table VMT, virtual function table, virtual call table, dispatch table, vtable, or vftable is a mechanism used in a programming language to support dynamic dispatch or run-time method binding.","['computer', 'programming', 'virtual', 'method', 'table', 'vmt', 'virtual', 'function', 'table', 'virtual', 'table', 'dispatch', 'table', 'vtable', 'vftable', 'mechanism', 'programming', 'language', 'support', 'dynamic', 'dispatch', 'run', 'time', 'method', 'bind']"
4732,"Whenever a class defines a virtual function or method, most compilers add a hidden member variable to the class that points to an array of pointers to virtual functions called the virtual method table. These pointers are used at runtime to invoke the appropriate function implementations, because at compile time it may not yet be known if the base function is to be called or a derived one implemented by a class that inherits from the base class.","['class', 'define', 'virtual', 'function', 'method', 'compiler', 'add', 'hide', 'member', 'variable', 'class', 'point', 'array', 'pointer', 'virtual', 'function', 'call', 'virtual', 'method', 'table', 'pointer', 'runtime', 'invoke', 'appropriate', 'function', 'implementation', 'compile', 'time', 'know', 'base', 'function', 'call', 'derive', 'implement', 'class', 'inherit', 'base', 'class']"
4733,"There are many different ways to implement such dynamic dispatch, but use of virtual method tables is especially common among C++ and related languages such as D and C#. Languages that separate the programmatic interface of objects from the implementation, like Visual Basic and Delphi, also tend to use this approach, because it allows objects to use a different implementation simply by using a different set of method pointers.","['different', 'way', 'implement', 'dynamic', 'dispatch', 'use', 'virtual', 'method', 'table', 'especially', 'common', 'c++', 'relate', 'language', 'language', 'separate', 'programmatic', 'interface', 'object', 'implementation', 'like', 'visual', 'basic', 'delphi', 'tend', 'use', 'approach', 'allow', 'object', 'use', 'different', 'implementation', 'simply', 'different', 'set', 'method', 'pointer']"
4734,"Suppose a program contains three classes in an inheritance hierarchy: a superclass, .mw-parser-output .monospacedfont-family:monospace,monospaceCat, and two subclasses, HouseCat and Lion. Class Cat defines a virtual function named speak, so its subclasses may provide an appropriate implementation e.g. either meow or roar. When the program calls the speak function on a Cat reference which can refer to an instance of Cat, or an instance of HouseCat or Lion, the code must be able to determine which implementation of the function the call should be dispatched to. This depends on the actual class of the object, not the class of the reference to it Cat. The class cannot generally be determined statically that is, at compile time, so neither can the compiler decide which function to call at that time. The call must be dispatched to the right function dynamically that is, at run time instead.","['suppose', 'program', 'contain', 'class', 'inheritance', 'hierarchy', 'superclass', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacecat', 'subclass', 'housecat', 'lion', 'class', 'cat', 'define', 'virtual', 'function', 'name', 'speak', 'subclass', 'provide', 'appropriate', 'implementation', 'e.g.', 'meow', 'roar', 'program', 'call', 'speak', 'function', 'cat', 'reference', 'refer', 'instance', 'cat', 'instance', 'housecat', 'lion', 'code', 'able', 'determine', 'implementation', 'function', 'dispatch', 'depend', 'actual', 'class', 'object', 'class', 'reference', 'cat', 'class', 'generally', 'determine', 'statically', 'compile', 'time', 'compiler', 'decide', 'function', 'time', 'dispatch', 'right', 'function', 'dynamically', 'run', 'time', 'instead']"
4735,"An object's virtual method table will contain the addresses of the object's dynamically bound methods. Method calls are performed by fetching the method's address from the object's virtual method table. The virtual method table is the same for all objects belonging to the same class, and is therefore typically shared between them. Objects belonging to type-compatible classes for example siblings in an inheritance hierarchy will have virtual method tables with the same layout: the address of a given method will appear at the same offset for all type-compatible classes. Thus, fetching the method's address from a given offset into a virtual method table will get the method corresponding to the object's actual class.1","['object', 'virtual', 'method', 'table', 'contain', 'address', 'object', 'dynamically', 'bind', 'method', 'method', 'call', 'perform', 'fetch', 'method', 'address', 'object', 'virtual', 'method', 'table', 'virtual', 'method', 'table', 'object', 'belong', 'class', 'typically', 'share', 'object', 'belong', 'type', 'compatible', 'class', 'example', 'sibling', 'inheritance', 'hierarchy', 'virtual', 'method', 'table', 'layout', 'address', 'give', 'method', 'appear', 'offset', 'type', 'compatible', 'class', 'fetch', 'method', 'address', 'give', 'offset', 'virtual', 'method', 'table', 'method', 'corresponding', 'object', 'actual', 'class']"
4736,"The C++ standards do not mandate exactly how dynamic dispatch must be implemented, but compilers generally use minor variations on the same basic model.","['c++', 'standard', 'mandate', 'exactly', 'dynamic', 'dispatch', 'implement', 'compiler', 'generally', 'use', 'minor', 'variation', 'basic', 'model']"
4737,"Typically, the compiler creates a separate virtual method table for each class. When an object is created, a pointer to this table, called the virtual table pointer, vpointer or VPTR, is added as a hidden member of this object. As such, the compiler must also generate ""hidden"" code in the constructors of each class to initialize a new object's virtual table pointer to the address of its class's virtual method table.","['typically', 'compiler', 'create', 'separate', 'virtual', 'method', 'table', 'class', 'object', 'create', 'pointer', 'table', 'call', 'virtual', 'table', 'pointer', 'vpointer', 'vptr', 'add', 'hide', 'member', 'object', 'compiler', 'generate', 'hide', 'code', 'constructor', 'class', 'initialize', 'new', 'object', 'virtual', 'table', 'pointer', 'address', 'class', 'virtual', 'method', 'table']"
4738,"Many compilers place the virtual table pointer as the last member of the object; other compilers place it as the first; portable source code works either way.2 For example, g++ previously placed the pointer at the end of the object.3","['compiler', 'place', 'virtual', 'table', 'pointer', 'member', 'object', 'compiler', 'place', 'portable', 'source', 'code', 'work', 'way', 'example', 'g++', 'previously', 'place', 'pointer', 'end', 'object']"
4739,Consider the following class declarations in C++ syntax:,"['consider', 'follow', 'class', 'declaration', 'c++', 'syntax']"
4740,used to derive the following class:,"['derive', 'following', 'class']"
4741,and the following piece of C++ code:,"['follow', 'piece', 'c++', 'code']"
4742,g++ 3.4.6 from GCC produces the following 32-bit memory layout for the object b2:nb 1,"['g++', '3', 'gcc', 'produce', 'follow', 'bit', 'memory', 'layout', 'object']"
4743,and the following memory layout for the object d:,"['follow', 'memory', 'layout', 'object']"
4744,Note that those functions not carrying the keyword virtual in their declaration such as fnonvirtual and d do not generally appear in the virtual method table. There are exceptions for special cases as posed by the default constructor.,"['note', 'function', 'carry', 'keyword', 'virtual', 'declaration', 'fnonvirtual', 'generally', 'appear', 'virtual', 'method', 'table', 'exception', 'special', 'case', 'pose', 'default', 'constructor']"
4745,"Also note the virtual destructors in the base classes, B1 and B2. They are necessary to ensure delete d can free up memory not just for D, but also for B1 and B2, if d is a pointer or reference to the types B1 or B2. They were excluded from the memory layouts to keep the example simple. nb 2","['note', 'virtual', 'destructor', 'base', 'class', 'necessary', 'ensure', 'delete', 'free', 'memory', 'pointer', 'reference', 'type', 'exclude', 'memory', 'layout', 'example', 'simple']"
4746,Overriding of the method f2 in class D is implemented by duplicating the virtual method table of B2 and replacing the pointer to B2::f2 with a pointer to D::f2.,"['override', 'method', 'class', 'implement', 'duplicate', 'virtual', 'method', 'table', 'replace', 'pointer', 'b2::f2', 'pointer', 'd::f2']"
4747,"The g++ compiler implements the multiple inheritance of the classes B1 and B2 in class D using two virtual method tables, one for each base class. There are other ways to implement multiple inheritance, but this is the most common. This leads to the necessity for ""pointer fixups"", also called thunks, when casting.","['g++', 'compiler', 'implement', 'multiple', 'inheritance', 'class', 'class', 'virtual', 'method', 'table', 'base', 'class', 'way', 'implement', 'multiple', 'inheritance', 'common', 'lead', 'necessity', 'pointer', 'fixup', 'call', 'thunk', 'cast']"
4748,"While d and b1 will point to the same memory location after execution of this code, b2 will point to the location d+8 eight bytes beyond the memory location of d. Thus, b2 points to the region within d that ""looks like"" an instance of B2, i.e., has the same memory layout as an instance of B2.","['point', 'memory', 'location', 'execution', 'code', 'point', 'location', 'd+8', 'byte', 'memory', 'location', 'point', 'region', 'look', 'like', 'instance', 'i.e.', 'memory', 'layout', 'instance']"
4749,"A call to d->f1 is handled by dereferencing d's D::B1 vpointer, looking up the f1 entry in the virtual method table, and then dereferencing that pointer to call the code.","['d->f1', 'handle', 'dereference', 'd::b1', 'vpointer', 'look', 'entry', 'virtual', 'method', 'table', 'dereference', 'pointer', 'code']"
4750,"In the case of single inheritance or in a language with only single inheritance, if the vpointer is always the first element in d as it is with many compilers, this reduces to the following pseudo-C++:","['case', 'single', 'inheritance', 'language', 'single', 'inheritance', 'vpointer', 'element', 'compiler', 'reduce', 'follow', 'pseudo', 'c++']"
4751,"Where *d refers to the virtual method table of D and 0 refers to the first method in the virtual method table. The parameter d becomes the ""this"" pointer to the object.","['refer', 'virtual', 'method', 'table', 'refer', 'method', 'virtual', 'method', 'table', 'parameter', 'pointer', 'object']"
4752,"In the more general case, calling B1::f1 or D::f2 is more complicated:","['general', 'case', 'call', 'b1::f1', 'd::f2', 'complicated']"
4753,The call to d->f1 passes a B1 pointer as a parameter. The call to d->f2 passes a B2 pointer as a parameter. This second call requires a fixup to produce the correct pointer. The location of B2::f2 is not in the virtual method table for D.,"['d->f1', 'pass', 'pointer', 'parameter', 'd->f2', 'pass', 'pointer', 'parameter', 'second', 'require', 'fixup', 'produce', 'correct', 'pointer', 'location', 'b2::f2', 'virtual', 'method', 'table']"
4754,"By comparison, a call to d->fnonvirtual is much simpler:","['comparison', 'd->fnonvirtual', 'simple']"
4755,"A virtual call requires at least an extra indexed dereference and sometimes a ""fixup"" addition, compared to a non-virtual call, which is simply a jump to a compiled-in pointer. Therefore, calling virtual functions is inherently slower than calling non-virtual functions. An experiment done in 1996 indicates that approximately 6–13% of execution time is spent simply dispatching to the correct function, though the overhead can be as high as 50%.4 The cost of virtual functions may not be so high on modern CPU architectures due to much larger caches and better branch prediction.","['virtual', 'require', 'extra', 'indexed', 'dereference', 'fixup', 'addition', 'compare', 'non', 'virtual', 'simply', 'jump', 'compile', 'pointer', 'call', 'virtual', 'function', 'inherently', 'slow', 'call', 'non', 'virtual', 'function', 'experiment', '1996', 'indicate', 'approximately', '6–13', 'execution', 'time', 'spend', 'simply', 'dispatch', 'correct', 'function', 'overhead', 'high', '50', 'cost', 'virtual', 'function', 'high', 'modern', 'cpu', 'architecture', 'large', 'cache', 'well', 'branch', 'prediction']"
4756,"Furthermore, in environments where JIT compilation is not in use, virtual function calls usually cannot be inlined. In certain cases it may be possible for the compiler to perform a process known as devirtualization in which, for instance, the lookup and indirect call are replaced with a conditional execution of each inlined body, but such optimizations are not common.","['furthermore', 'environment', 'jit', 'compilation', 'use', 'virtual', 'function', 'call', 'usually', 'inline', 'certain', 'case', 'possible', 'compiler', 'perform', 'process', 'know', 'devirtualization', 'instance', 'lookup', 'indirect', 'replace', 'conditional', 'execution', 'inline', 'body', 'optimization', 'common']"
4757,"To avoid this overhead, compilers usually avoid using virtual method tables whenever the call can be resolved at compile time.","['avoid', 'overhead', 'compiler', 'usually', 'avoid', 'virtual', 'method', 'table', 'resolve', 'compile', 'time']"
4758,"Thus, the call to f1 above may not require a table lookup because the compiler may be able to tell that d can only hold a D at this point, and D does not override f1. Or the compiler or optimizer may be able to detect that there are no subclasses of B1 anywhere in the program that override f1. The call to B1::f1 or B2::f2 will probably not require a table lookup because the implementation is specified explicitly although it does still require the 'this'-pointer fixup.","['require', 'table', 'lookup', 'compiler', 'able', 'tell', 'hold', 'point', 'override', 'compiler', 'optimizer', 'able', 'detect', 'subclass', 'program', 'override', 'b1::f1', 'b2::f2', 'probably', 'require', 'table', 'lookup', 'implementation', 'specify', 'explicitly', 'require', ""this'-pointer"", 'fixup']"
4759,"The virtual method table is generally a good performance trade-off to achieve dynamic dispatch, but there are alternatives, such as binary tree dispatch, with higher performance but different costs.5","['virtual', 'method', 'table', 'generally', 'good', 'performance', 'trade', 'achieve', 'dynamic', 'dispatch', 'alternative', 'binary', 'tree', 'dispatch', 'high', 'performance', 'different', 'costs']"
4760,"However, virtual method tables only allow for single dispatch on the special ""this"" parameter, in contrast to multiple dispatch as in CLOS, Dylan, or Julia, where the types of all parameters can be taken into account in dispatching.","['virtual', 'method', 'table', 'allow', 'single', 'dispatch', 'special', 'parameter', 'contrast', 'multiple', 'dispatch', 'clos', 'dylan', 'julia', 'type', 'parameter', 'take', 'account', 'dispatching']"
4761,"Virtual method tables also only work if dispatching is constrained to a known set of methods, so they can be placed in a simple array built at compile time, in contrast to duck typing languages such as Smalltalk, Python or JavaScript.","['virtual', 'method', 'table', 'work', 'dispatching', 'constrain', 'know', 'set', 'method', 'place', 'simple', 'array', 'build', 'compile', 'time', 'contrast', 'duck', 'typing', 'language', 'smalltalk', 'python', 'javascript']"
4762,"Languages that provide either or both of these features often dispatch by looking up a string in a hash table, or some other equivalent method. There are a variety of techniques to make this faster e.g., interning/tokenizing method names, caching lookups, just-in-time compilation.","['language', 'provide', 'feature', 'dispatch', 'look', 'string', 'hash', 'table', 'equivalent', 'method', 'variety', 'technique', 'fast', 'e.g.', 'intern', 'tokenize', 'method', 'name', 'cache', 'lookup', 'time', 'compilation']"
4763,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4764,"In object oriented programming, viscosity1 refers to the ease at which a developer can add design-preserving code to a system. If it is easier to add a hack than it is to add code that fits into the program's design, then the system has high viscosity. If it is easy to add new code to the program while maintaining the design, then the program has low viscosity.","['object', 'orient', 'programming', 'viscosity1', 'refer', 'ease', 'developer', 'add', 'design', 'preserve', 'code', 'system', 'easy', 'add', 'hack', 'add', 'code', 'fit', 'program', 'design', 'system', 'high', 'viscosity', 'easy', 'add', 'new', 'code', 'program', 'maintain', 'design', 'program', 'low', 'viscosity']"
4765,The name is a metaphor for viscosity in liquids.,"['metaphor', 'viscosity', 'liquid']"
4766,This software-engineering-related article is a stub. You can help Wikipedia by expanding it.,"['software', 'engineering', 'relate', 'article', 'stub', 'help', 'wikipedia', 'expand']"
4767,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4768,"The void type, in several programming languages derived from C and Algol68, is the return type of a function that returns normally, but does not provide a result value to its caller. Usually such functions are called for their side effects, such as performing some task or writing to their output parameters. The usage of the void type in such context is comparable to procedures in Pascal and syntactic constructs which define subroutines in Visual Basic. It is also similar to the unit type used in functional programming languages and type theory. See Unit type#In programming languages for a comparison.","['void', 'type', 'programming', 'language', 'derive', 'algol68', 'return', 'type', 'function', 'return', 'normally', 'provide', 'result', 'value', 'caller', 'usually', 'function', 'call', 'effect', 'perform', 'task', 'write', 'output', 'parameter', 'usage', 'void', 'type', 'context', 'comparable', 'procedure', 'pascal', 'syntactic', 'construct', 'define', 'subroutine', 'visual', 'basic', 'similar', 'unit', 'type', 'functional', 'programming', 'language', 'type', 'theory', 'unit', 'type#in', 'programming', 'language', 'comparison']"
4769,"C and C++ also support the pointer to void type specified as void *, but this is an unrelated notion. Variables of this type are pointers to data of an unspecified type, so in this context but not the others void * acts roughly like a universal or top type. A program can probably convert a pointer to any type of data except a function pointer to a pointer to void and back to the original type without losing information, which makes these pointers useful for polymorphic functions. The C language standard does not guarantee that the different pointer types have the same size or alignment.","['c++', 'support', 'pointer', 'void', 'type', 'specify', 'void', 'unrelated', 'notion', 'variable', 'type', 'pointer', 'datum', 'unspecified', 'type', 'context', 'void', 'act', 'roughly', 'like', 'universal', 'type', 'program', 'probably', 'convert', 'pointer', 'type', 'datum', 'function', 'pointer', 'pointer', 'void', 'original', 'type', 'lose', 'information', 'make', 'pointer', 'useful', 'polymorphic', 'function', 'language', 'standard', 'guarantee', 'different', 'pointer', 'type', 'size', 'alignment']"
4770,"A function with void result type ends either by reaching the end of the function or by executing a return statement with no returned value. The void type may also replace the argument list of a function prototype to indicate that the function takes no arguments. Note that in all of these situations, void is not a type qualifier on any value. Despite the name, this is semantically similar to an implicit unit type, not a zero or bottom type which is sometimes confusingly called the ""void type"". Unlike a real unit type which is a singleton, the void type lacks a way to represent its value and the language does not provide any way to declare an object or represent a value with type void.","['function', 'void', 'result', 'type', 'end', 'reach', 'end', 'function', 'execute', 'return', 'statement', 'return', 'value', 'void', 'type', 'replace', 'argument', 'list', 'function', 'prototype', 'indicate', 'function', 'take', 'argument', 'note', 'situation', 'void', 'type', 'qualifi', 'value', 'despite', 'semantically', 'similar', 'implicit', 'unit', 'type', 'zero', 'type', 'confusingly', 'call', 'void', 'type', 'unlike', 'real', 'unit', 'type', 'singleton', 'void', 'type', 'lack', 'way', 'represent', 'value', 'language', 'provide', 'way', 'declare', 'object', 'represent', 'value', 'type', 'void']"
4771,"In the earliest versions of C, functions with no specific result defaulted to a return type of int and functions with no arguments simply had empty argument lists. Pointers to untyped data were declared as integers or pointers to char. Some early C compilers had the feature, now seen as an annoyance, of generating a warning on any function call that did not use the function's returned value. Old code sometimes casts such function calls to void to suppress this warning. By the time Bjarne Stroustrup began his work on C++ in 1979–1980,citation needed void and void pointers were part of the C language dialect supported by AT&T-derived compilers.1","['early', 'version', 'function', 'specific', 'result', 'default', 'return', 'type', 'int', 'function', 'argument', 'simply', 'argument', 'list', 'pointer', 'untyped', 'datum', 'declare', 'integer', 'pointer', 'char', 'early', 'compiler', 'feature', 'see', 'annoyance', 'generate', 'warning', 'function', 'use', 'function', 'return', 'value', 'old', 'code', 'cast', 'function', 'call', 'void', 'suppress', 'warning', 'time', 'bjarne', 'stroustrup', 'begin', 'work', 'c++', '1979–1980,citation', 'need', 'void', 'void', 'pointer', 'language', 'dialect', 'support', 'at', 'derive', 'compilers']"
4772,"The explicit use of void vs. giving no arguments in a function prototype has different semantics in C and C++, as detailed in the following table:2","['explicit', 'use', 'void', 'vs.', 'give', 'argument', 'function', 'prototype', 'different', 'semantic', 'c++', 'detail', 'follow', 'table']"
4773,"A C prototype taking no arguments, e.g. void f above, has been deprecated in C99,3 however.","['prototype', 'take', 'argument', 'e.g.', 'void', 'deprecate', 'c99']"
4774,"Quite contrary to C++, in the functional programming language Haskell the void type denotes the empty type, which has no inhabitants 1. A function into the void type does not return results, and a side-effectful program with type signature IO Void does not terminate, or crashes. In particular, there are no total functions into the void type.","['contrary', 'c++', 'functional', 'programming', 'language', 'haskell', 'void', 'type', 'denote', 'type', 'inhabitant', 'function', 'void', 'type', 'return', 'result', 'effectful', 'program', 'type', 'signature', 'void', 'terminate', 'crash', 'particular', 'total', 'function', 'void', 'type']"
4775,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4776,"In computer programming, a weak reference is a reference that does not protect the referenced object from collection by a garbage collector, unlike a strong reference. An object referenced only by weak references – meaning ""every chain of references that reaches the object includes at least one weak reference as a link"" – is considered weakly reachable, and can be treated as unreachable and so may be collected at any time. Some garbage-collected languages feature or support various levels of weak references, such as C#, Java, Lisp, OCaml, Perl, Python1 and PHP since the version 7.4.2","['computer', 'programming', 'weak', 'reference', 'reference', 'protect', 'reference', 'object', 'collection', 'garbage', 'collector', 'unlike', 'strong', 'reference', 'object', 'reference', 'weak', 'reference', 'mean', 'chain', 'reference', 'reach', 'object', 'include', 'weak', 'reference', 'link', 'consider', 'weakly', 'reachable', 'treat', 'unreachable', 'collect', 'time', 'garbage', 'collect', 'language', 'feature', 'support', 'level', 'weak', 'reference', 'java', 'lisp', 'ocaml', 'perl', 'python1', 'php', 'version', '7']"
4777,"Weak references have a number of common uses. When using reference counting garbage collection, weak references can break reference cycles, by using a weak reference for a link in the cycle. When one has an associative array mapping, hash map whose keys are references to objects, for example to hold auxiliary data about objects, using weak references for the keys avoids keeping the objects alive just because of their use as keys. When one has an object where other objects are registered, such as in the observer pattern particularly in event handling, if a strong reference is kept, objects must be explicitly unregistered, otherwise a memory leak occurs the lapsed listener problem, while a weak reference removes the need to unregister. When holding cached data that can be recreated if necessary, weak references allow the cache to be reclaimed, effectively producing discardable memory. This last case a cache is distinct from others, as it is preferable that the objects only be garbage collected if necessary, and there is thus a need for finer distinctions within weak references, here a stronger form of a weak reference. In many cases weak references do not need to be directly used, instead simply using a weak array or other container whose keys or values are weak references.","['weak', 'reference', 'number', 'common', 'use', 'reference', 'count', 'garbage', 'collection', 'weak', 'reference', 'break', 'reference', 'cycle', 'weak', 'reference', 'link', 'cycle', 'associative', 'array', 'mapping', 'hash', 'map', 'key', 'reference', 'object', 'example', 'hold', 'auxiliary', 'datum', 'object', 'weak', 'reference', 'key', 'avoid', 'keep', 'object', 'alive', 'use', 'key', 'object', 'object', 'register', 'observer', 'pattern', 'particularly', 'event', 'handling', 'strong', 'reference', 'keep', 'object', 'explicitly', 'unregistered', 'memory', 'leak', 'occur', 'lapsed', 'listener', 'problem', 'weak', 'reference', 'remove', 'need', 'unregister', 'hold', 'cache', 'datum', 'recreate', 'necessary', 'weak', 'reference', 'allow', 'cache', 'reclaim', 'effectively', 'produce', 'discardable', 'memory', 'case', 'cache', 'distinct', 'preferable', 'object', 'garbage', 'collect', 'necessary', 'need', 'finer', 'distinction', 'weak', 'reference', 'strong', 'form', 'weak', 'reference', 'case', 'weak', 'reference', 'need', 'directly', 'instead', 'simply', 'weak', 'array', 'container', 'key', 'value', 'weak', 'reference']"
4778,Garbage collection is used to clean up unused objects and so reduce the potential for memory leaks and data corruption. There are two main types of garbage collection: tracing and reference counting. Reference counting schemes record the number of references to a given object and collect the object when the reference count becomes zero. Reference-counting cannot collect cyclic or circular references because only one object may be collected at a time. Groups of mutually referencing objects which are not directly referenced by other objects and are unreachable can thus become permanently resident; if an application continually generates such unreachable groups of unreachable objects this will have the effect of a memory leak. Weak references references which are not counted in reference counting may be used to solve the problem of circular references if the reference cycles are avoided by using weak references for some of the references within the group.,"['garbage', 'collection', 'clean', 'unused', 'object', 'reduce', 'potential', 'memory', 'leak', 'datum', 'corruption', 'main', 'type', 'garbage', 'collection', 'trace', 'reference', 'counting', 'reference', 'count', 'scheme', 'record', 'number', 'reference', 'give', 'object', 'collect', 'object', 'reference', 'count', 'zero', 'reference', 'counting', 'collect', 'cyclic', 'circular', 'reference', 'object', 'collect', 'time', 'group', 'mutually', 'referencing', 'object', 'directly', 'reference', 'object', 'unreachable', 'permanently', 'resident', 'application', 'continually', 'generate', 'unreachable', 'group', 'unreachable', 'object', 'effect', 'memory', 'leak', 'weak', 'reference', 'reference', 'count', 'reference', 'counting', 'solve', 'problem', 'circular', 'reference', 'reference', 'cycle', 'avoid', 'weak', 'reference', 'reference', 'group']"
4779,"A very common case of such strong vs. weak reference distinctions is in tree structures, such as the Document Object Model DOM, where parent-to-child references are strong, but child-to-parent references are weak. For example, Apple's Cocoa framework recommends this approach.3 Indeed, even when the object graph is not a tree, a tree structure can often be imposed by the notion of object ownership, where ownership relationships are strong and form a tree, and non-ownership relationships are weak and not needed to form the tree – this approach is common in C++ pre-C++11, using raw pointers as weak references. This approach, however, has the downside of not allowing the ability to detect when a parent branch has been removed and deleted. Since the C++11 standard, a solution was added by using shared ptr and weak ptr, inherited from the Boost library.","['common', 'case', 'strong', 'vs.', 'weak', 'reference', 'distinction', 'tree', 'structure', 'document', 'object', 'model', 'dom', 'parent', 'child', 'reference', 'strong', 'child', 'parent', 'reference', 'weak', 'example', 'apple', 'cocoa', 'framework', 'recommend', 'approach', 'object', 'graph', 'tree', 'tree', 'structure', 'impose', 'notion', 'object', 'ownership', 'ownership', 'relationship', 'strong', 'form', 'tree', 'non', 'ownership', 'relationship', 'weak', 'need', 'form', 'tree', 'approach', 'common', 'c++', 'pre', 'c++11', 'raw', 'pointer', 'weak', 'reference', 'approach', 'downside', 'allow', 'ability', 'detect', 'parent', 'branch', 'remove', 'delete', 'c++11', 'standard', 'solution', 'add', 'share', 'ptr', 'weak', 'ptr', 'inherit', 'boost', 'library']"
4780,Weak references are also used to minimize the number of unnecessary objects in memory by allowing the program to indicate which objects are of minor importance by only weakly referencing them.,"['weak', 'reference', 'minimize', 'number', 'unnecessary', 'object', 'memory', 'allow', 'program', 'indicate', 'object', 'minor', 'importance', 'weakly', 'reference']"
4781,"Some languages have multiple levels of weak reference strength. For example, Java has, in order of decreasing strength, soft, weak, and phantom references, defined in the package java.lang.ref.4 Each reference type has an associated notion of reachability. The garbage collector GC uses an object's type of reachability to determine when to free the object. It is safe for the GC to free an object that is softly reachable, but the GC may decide not to do so if it believes the JVM can spare the memory e.g. the JVM has much unused heap space. The GC will free a weakly reachable object as soon as the GC notices the object. Unlike the other reference types, a phantom reference cannot be followed. On the other hand, phantom references provide a mechanism to notify the program when an object has been freed notification is implemented using ReferenceQueues.","['language', 'multiple', 'level', 'weak', 'reference', 'strength', 'example', 'java', 'order', 'decrease', 'strength', 'soft', 'weak', 'phantom', 'reference', 'define', 'package', 'java.lang.ref', 'reference', 'type', 'associated', 'notion', 'reachability', 'garbage', 'collector', 'use', 'object', 'type', 'reachability', 'determine', 'free', 'object', 'safe', 'free', 'object', 'softly', 'reachable', 'decide', 'believe', 'jvm', 'spare', 'memory', 'e.g.', 'jvm', 'unused', 'heap', 'space', 'free', 'weakly', 'reachable', 'object', 'soon', 'notice', 'object', 'unlike', 'reference', 'type', 'phantom', 'reference', 'follow', 'hand', 'phantom', 'reference', 'provide', 'mechanism', 'notify', 'program', 'object', 'free', 'notification', 'implement', 'referencequeues']"
4782,"In C#, weak references are distinguished by whether they track object resurrection or not. This distinction does not occur for strong references, as objects are not finalized if they have any strong references to them. By default, in C# weak reference do not track resurrection, meaning a weak reference is not updated if an object is resurrected; these are called short weak references, and weak references that track resurrection are called long weak references.5","['weak', 'reference', 'distinguish', 'track', 'object', 'resurrection', 'distinction', 'occur', 'strong', 'reference', 'object', 'finalize', 'strong', 'reference', 'default', 'weak', 'reference', 'track', 'resurrection', 'mean', 'weak', 'reference', 'update', 'object', 'resurrect', 'call', 'short', 'weak', 'reference', 'weak', 'reference', 'track', 'resurrection', 'call', 'long', 'weak', 'references']"
4783,"Some non-garbage-collected languages, such as C++, provide weak/strong reference functionality as part of supporting garbage collection libraries. The Boost C++ library provides strong and weak references. It is a mistake to use regular C++ pointers as the weak counterparts of smart pointers because such usage removes the ability to detect when the strong reference count has gone to 0 and the object has been deleted. Worse yet, it doesn't allow for detection of whether another strong reference is already tracking a given plain pointer. This introduces the possibility of having two or more smart pointers tracking the same plain pointer which causes corruption as soon as one of these smart pointers' reference count reaches 0 and the object gets deleted.","['non', 'garbage', 'collect', 'language', 'c++', 'provide', 'weak', 'strong', 'reference', 'functionality', 'support', 'garbage', 'collection', 'library', 'boost', 'c++', 'library', 'provide', 'strong', 'weak', 'reference', 'mistake', 'use', 'regular', 'c++', 'pointer', 'weak', 'counterpart', 'smart', 'pointer', 'usage', 'remove', 'ability', 'detect', 'strong', 'reference', 'count', 'go', 'object', 'delete', 'bad', 'allow', 'detection', 'strong', 'reference', 'track', 'give', 'plain', 'pointer', 'introduce', 'possibility', 'have', 'smart', 'pointer', 'track', 'plain', 'pointer', 'cause', 'corruption', 'soon', 'smart', 'pointer', 'reference', 'count', 'reach', 'object', 'gets', 'delete']"
4784,"Weak references can be useful when keeping a list of the current variables being referenced in the application. This list must have weak links to the objects. Otherwise, once objects are added to the list, they will be referenced by it and will persist for the duration of the program.","['weak', 'reference', 'useful', 'keep', 'list', 'current', 'variable', 'reference', 'application', 'list', 'weak', 'link', 'object', 'object', 'add', 'list', 'reference', 'persist', 'duration', 'program']"
4785,"Java 1.2 in 1998 introduced6 two kinds of weak references, one known as a “soft reference” intended to be used for maintaining GC-managed in-memory caches, but which doesn’t work very well in practice on some platforms with dynamic heap like Android7 and the other simply as a “weak reference”. It also added a related experimental mechanism dubbed “phantom references” as an alternative to the dangerous and inefficient finalize mechanism.8","['java', '1', '1998', 'introduced6', 'kind', 'weak', 'reference', 'know', 'soft', 'reference', 'intend', 'maintain', 'manage', 'memory', 'cache', 'work', 'practice', 'platform', 'dynamic', 'heap', 'like', 'android7', 'simply', 'weak', 'reference', 'add', 'related', 'experimental', 'mechanism', 'dub', 'phantom', 'reference', 'alternative', 'dangerous', 'inefficient', 'finalize', 'mechanism']"
4786,"If a weak reference is created, and then elsewhere in the code get is used to get the actual object, the weak reference isn't strong enough to prevent garbage collection, so it may be if there are no strong references to the object that get suddenly starts returning null.9","['weak', 'reference', 'create', 'code', 'actual', 'object', 'weak', 'reference', 'strong', 'prevent', 'garbage', 'collection', 'strong', 'reference', 'object', 'suddenly', 'start', 'return', 'null']"
4787,"Another use of weak references is in writing a cache. Using, for example, a weak hash map, one can store in the cache the various referred objects via a weak reference. When the garbage collector runs — when for example the application's memory usage gets sufficiently high — those cached objects which are no longer directly referenced by other objects are removed from the cache.","['use', 'weak', 'reference', 'write', 'cache', 'example', 'weak', 'hash', 'map', 'store', 'cache', 'refer', 'object', 'weak', 'reference', 'garbage', 'collector', 'run', 'example', 'application', 'memory', 'usage', 'get', 'sufficiently', 'high', 'cache', 'object', 'long', 'directly', 'reference', 'object', 'remove', 'cache']"
4788,"In Objective-C 2.0, not only garbage collection, but also automatic reference counting will be affected by weak references. All variables and properties in the following example are weak.","['objective', '2', 'garbage', 'collection', 'automatic', 'reference', 'counting', 'affect', 'weak', 'reference', 'variable', 'property', 'follow', 'example', 'weak']"
4789,"The difference between weak __weak and unsafe_unretained __unsafe_unretained is that when the object the variable pointed to is being deallocated, whether the value of the variable is going to be changed or not. weak ones will be updated to nil and the unsafe_unretained one will be left unchanged, as a dangling pointer. The weak references is added to Objective-C since Mac OS X 10.7 ""Lion"" and iOS 5, together with Xcode 4.1 4.2 for iOS, and only when using ARC. Older versions of Mac OS X, iOS, and GNUstep support only unsafe_unretained references as weak ones.","['difference', 'weak', 'weak', 'unsafe_unretained', 'unsafe_unretained', 'object', 'variable', 'point', 'deallocate', 'value', 'variable', 'go', 'change', 'weak', 'one', 'update', 'nil', 'unsafe_unretained', 'leave', 'unchanged', 'dangle', 'pointer', 'weak', 'reference', 'add', 'objective', 'mac', '10', 'lion', 'ios', 'xcode', '4', '4', 'ios', 'arc', 'old', 'version', 'mac', 'ios', 'gnustep', 'support', 'unsafe_unretaine', 'reference', 'weak', 'one']"
4790,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
4791,"In software development, the yo-yo problem is an anti-pattern that occurs when a programmer has to read and understand a program whose inheritance graph is so long and complicated that the programmer has to keep flipping between many different class definitions in order to follow the control flow of the program. It is most often seen in the context of object-oriented programming. The term comes from comparing the bouncing attention of the programmer to the up-down movement of a toy yo-yo. Taenzer, Ganti, and Podar described the problem by name, explaining: ""Often we get the feeling of riding a yoyo when we try to understand one of these message trees.""1","['software', 'development', 'problem', 'anti', 'pattern', 'occur', 'programmer', 'read', 'understand', 'program', 'inheritance', 'graph', 'long', 'complicated', 'programmer', 'flip', 'different', 'class', 'definition', 'order', 'follow', 'control', 'flow', 'program', 'see', 'context', 'object', 'orient', 'programming', 'term', 'come', 'compare', 'bounce', 'attention', 'programmer', 'movement', 'toy', 'taenzer', 'ganti', 'podar', 'describe', 'problem', 'explain', 'feeling', 'ride', 'yoyo', 'try', 'understand', 'message', 'tree']"
4792,"Most practices of object-oriented programming recommend keeping the inheritance graph as shallow as possible, in part to avoid this problem. The use of composition instead of inheritance is also strongly preferred, although this still requires that a programmer keep multiple class definitions in mind at once.","['practice', 'object', 'orient', 'programming', 'recommend', 'keep', 'inheritance', 'graph', 'shallow', 'possible', 'avoid', 'problem', 'use', 'composition', 'instead', 'inheritance', 'strongly', 'preferred', 'require', 'programmer', 'multiple', 'class', 'definition', 'mind']"
4793,Deep hierarchies are a code smell and a symptom of sub-classification for code reuse.2,"['deep', 'hierarchy', 'code', 'smell', 'symptom', 'sub', 'classification', 'code', 'reuse']"
4794,"More generally, the yo-yo problem can also refer to any situation where a person must keep flipping between different sources of information in order to understand a concept.","['generally', 'problem', 'refer', 'situation', 'person', 'flip', 'different', 'source', 'information', 'order', 'understand', 'concept']"
4795,There are several code refactor techniques to flatten these hierarchies without compromising the overall behavior.,"['code', 'refactor', 'technique', 'flatten', 'hierarchy', 'compromise', 'overall', 'behavior']"
4796,"Object-oriented design techniques such as documenting layers of the inheritance hierarchy can reduce the effect of this problem, as they collect in one place the information that the programmer is required to understand.","['object', 'orient', 'design', 'technique', 'documenting', 'layer', 'inheritance', 'hierarchy', 'reduce', 'effect', 'problem', 'collect', 'place', 'information', 'programmer', 'require', 'understand']"

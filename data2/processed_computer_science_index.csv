,paragraph,split_paragraph
0,"In programming languages, an abstract type is a type in a nominative type system that cannot be instantiated directly; a type that is not abstract – which can be instantiated – is called a concrete type. Every instance of an abstract type is an instance of some concrete subtype. Abstract types are also known as existential types.1","['programming', 'language', 'abstract', 'type', 'type', 'nominative', 'type', 'system', 'instantiate', 'directly', 'type', 'abstract', 'instantiate', 'call', 'concrete', 'type', 'instance', 'abstract', 'type', 'instance', 'concrete', 'subtype', 'abstract', 'type', 'know', 'existential', 'types']"
1,"An abstract type may provide no implementation, or an incomplete implementation. In some languages, abstract types with no implementation rather than an incomplete implementation are known as protocols, interfaces, signatures, or class types. In class-based object-oriented programming, abstract types are implemented as abstract classes also known as abstract base classes, and concrete types as concrete classes. In generic programming, the analogous notion is a concept, which similarly specifies syntax and semantics, but does not require a subtype relationship: two unrelated types may satisfy the same concept.","['abstract', 'type', 'provide', 'implementation', 'incomplete', 'implementation', 'language', 'abstract', 'type', 'implementation', 'incomplete', 'implementation', 'know', 'protocol', 'interface', 'signature', 'class', 'type', 'class', 'base', 'object', 'orient', 'programming', 'abstract', 'type', 'implement', 'abstract', 'class', 'know', 'abstract', 'base', 'class', 'concrete', 'type', 'concrete', 'class', 'generic', 'programming', 'analogous', 'notion', 'concept', 'similarly', 'specify', 'syntax', 'semantic', 'require', 'subtype', 'relationship', 'unrelated', 'type', 'satisfy', 'concept']"
2,"Often, abstract types will have one or more implementations provided separately, for example, in the form of concrete subtypes that can be instantiated. In object-oriented programming, an abstract class may include abstract methods or abstract properties2 that are shared by its subclasses. Other names for language features that are or may be used to implement abstract types include traits, mixins, flavors, roles, or type classes.citation needed","['abstract', 'type', 'implementation', 'provide', 'separately', 'example', 'form', 'concrete', 'subtype', 'instantiate', 'object', 'orient', 'programming', 'abstract', 'class', 'include', 'abstract', 'method', 'abstract', 'properties2', 'share', 'subclass', 'name', 'language', 'feature', 'implement', 'abstract', 'type', 'include', 'trait', 'mixin', 'flavor', 'role', 'type', 'classes.citation', 'need']"
3,"Abstract classes can be created, signified, or simulated in several ways:","['abstract', 'class', 'create', 'signify', 'simulate', 'way']"
4,Abstract types are an important feature in statically typed OOP languages. Many dynamically typed languages have no equivalent feature although the use of duck typing makes abstract types unnecessary; however traits are found in some modern dynamically-typed languages.citation needed,"['abstract', 'type', 'important', 'feature', 'statically', 'type', 'oop', 'language', 'dynamically', 'type', 'language', 'equivalent', 'feature', 'use', 'duck', 'typing', 'make', 'abstract', 'type', 'unnecessary', 'trait', 'find', 'modern', 'dynamically', 'type', 'languages.citation', 'need']"
5,"Some authors argue that classes should be leaf classes have no subtypes, or else be abstract.45","['author', 'argue', 'class', 'leaf', 'class', 'subtype', 'abstract']"
6,Abstract types are useful in that they can be used to define and enforce a protocol; a set of operations that all objects implementing the protocol must support.citation needed,"['abstract', 'type', 'useful', 'define', 'enforce', 'protocol', 'set', 'operation', 'object', 'implement', 'protocol', 'support.citation', 'need']"
7,Abstract types are also an essential part of the Template Method Pattern.,"['abstract', 'type', 'essential', 'template', 'method', 'pattern']"
8,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
9,"A method in object-oriented programming OOP is a procedure associated with a message and an object. An object consists of state data and behavior; these compose an interface, which specifies how the object may be utilized by any of its various consumers. A method is a behavior of an object parametrized by a consumer.","['method', 'object', 'orient', 'programming', 'oop', 'procedure', 'associate', 'message', 'object', 'object', 'consist', 'state', 'datum', 'behavior', 'compose', 'interface', 'specify', 'object', 'utilize', 'consumer', 'method', 'behavior', 'object', 'parametrize', 'consumer']"
10,"Data is represented as properties of the object, and behaviors are represented as methods. For example, a Window object could have methods such as open and close, while its state whether it is open or closed at any given point in time would be a property.","['datum', 'represent', 'property', 'object', 'behavior', 'represent', 'method', 'example', 'window', 'object', 'method', 'open', 'close', 'state', 'open', 'close', 'give', 'point', 'time', 'property']"
11,"In class-based programming, methods are defined within a class, and objects are instances of a given class. One of the most important capabilities that a method provides is method overriding - the same name e.g., area can be used for multiple different kinds of classes. This allows the sending objects to invoke behaviors and to delegate the implementation of those behaviors to the receiving object. A method in Java programming sets the behavior of a class object. For example, an object can send an area message to another object and the appropriate formula is invoked whether the receiving object is a rectangle, circle, triangle, etc.","['class', 'base', 'programming', 'method', 'define', 'class', 'object', 'instance', 'give', 'class', 'important', 'capability', 'method', 'provide', 'method', 'override', 'e.g.', 'area', 'multiple', 'different', 'kind', 'class', 'allow', 'send', 'object', 'invoke', 'behavior', 'delegate', 'implementation', 'behavior', 'receiving', 'object', 'method', 'java', 'programming', 'set', 'behavior', 'class', 'object', 'example', 'object', 'send', 'area', 'message', 'object', 'appropriate', 'formula', 'invoke', 'receiving', 'object', 'rectangle', 'circle', 'triangle', 'etc']"
12,Methods also provide the interface that other classes use to access and modify the properties of an object; this is known as encapsulation. Encapsulation and overriding are the two primary distinguishing features between methods and procedure calls.1,"['method', 'provide', 'interface', 'class', 'use', 'access', 'modify', 'property', 'object', 'know', 'encapsulation', 'encapsulation', 'override', 'primary', 'distinguish', 'feature', 'method', 'procedure', 'calls']"
13,"Method overriding and overloading are two of the most significant ways that a method differs from a conventional procedure or function call. Overriding refers to a subclass redefining the implementation of a method of its superclass. For example, findArea may be a method defined on a shape class,2 triangle, etc. would each define the appropriate formula to calculate their area. The idea is to look at objects as ""black boxes"" so that changes to the internals of the object can be made with minimal impact on the other objects that use it. This is known as encapsulation and is meant to make code easier to maintain and re-use.","['method', 'override', 'overloading', 'significant', 'way', 'method', 'differ', 'conventional', 'procedure', 'function', 'override', 'refer', 'subclass', 'redefine', 'implementation', 'method', 'superclass', 'example', 'findarea', 'method', 'define', 'shape', 'class', 'triangle', 'etc', 'define', 'appropriate', 'formula', 'calculate', 'area', 'idea', 'look', 'object', 'black', 'box', 'change', 'internal', 'object', 'minimal', 'impact', 'object', 'use', 'know', 'encapsulation', 'mean', 'code', 'easy', 'maintain', 'use']"
14,"Method overloading, on the other hand, refers to differentiating the code used to handle a message based on the parameters of the method. If one views the receiving object as the first parameter in any method then overriding is just a special case of overloading where the selection is based only on the first argument. The following simple Java example illustrates the difference:","['method', 'overloading', 'hand', 'refer', 'differentiate', 'code', 'handle', 'message', 'base', 'parameter', 'method', 'view', 'receiving', 'object', 'parameter', 'method', 'override', 'special', 'case', 'overload', 'selection', 'base', 'argument', 'follow', 'simple', 'java', 'example', 'illustrate', 'difference']"
15,"Accessor methods are used to read the data values of an object. Mutator methods are used to modify the data of an object. Manager methods are used to initialize and destroy objects of a class, e.g. constructors and destructors.","['accessor', 'method', 'read', 'datum', 'value', 'object', 'mutator', 'method', 'modify', 'datum', 'object', 'manager', 'method', 'initialize', 'destroy', 'object', 'class', 'e.g.', 'constructor', 'destructor']"
16,"These methods provide an abstraction layer that facilitates encapsulation and modularity. For example, if a bank-account class provides a getBalance accessor method to retrieve the current balance rather than directly accessing the balance data fields, then later revisions of the same code can implement a more complex mechanism for balance retrieval e.g., a database fetch, without the dependent code needing to be changed. The concepts of encapsulation and modularity are not unique to object-oriented programming. Indeed, in many ways the object-oriented approach is simply the logical extension of previous paradigms such as abstract data types and structured programming.3","['method', 'provide', 'abstraction', 'layer', 'facilitate', 'encapsulation', 'modularity', 'example', 'bank', 'account', 'class', 'provide', 'getbalance', 'accessor', 'method', 'retrieve', 'current', 'balance', 'directly', 'access', 'balance', 'datum', 'field', 'later', 'revision', 'code', 'implement', 'complex', 'mechanism', 'balance', 'retrieval', 'e.g.', 'database', 'fetch', 'dependent', 'code', 'need', 'change', 'concept', 'encapsulation', 'modularity', 'unique', 'object', 'orient', 'programming', 'way', 'object', 'orient', 'approach', 'simply', 'logical', 'extension', 'previous', 'paradigms', 'abstract', 'datum', 'type', 'structure', 'programming']"
17,"A constructor is a method that is called at the beginning of an object's lifetime to create and initialize the object, a process called construction or instantiation. Initialization may include an acquisition of resources. Constructors may have parameters but usually do not return values in most languages. See the following example in Java:","['constructor', 'method', 'call', 'beginning', 'object', 'lifetime', 'create', 'initialize', 'object', 'process', 'call', 'construction', 'instantiation', 'initialization', 'include', 'acquisition', 'resource', 'constructor', 'parameter', 'usually', 'return', 'value', 'language', 'follow', 'example', 'java']"
18,"A destructor is a method that is called automatically at the end of an object's lifetime, a process called destruction. Destruction in most languages does not allow destructor method arguments nor return values. Destruction can be implemented so as to perform cleanup chores and other tasks at object destruction.","['destructor', 'method', 'call', 'automatically', 'end', 'object', 'lifetime', 'process', 'call', 'destruction', 'destruction', 'language', 'allow', 'destructor', 'method', 'argument', 'return', 'value', 'destruction', 'implement', 'perform', 'cleanup', 'chore', 'task', 'object', 'destruction']"
19,"In garbage-collected languages, such as Java, C#, and Python, destructors are known as finalizers. They have a similar purpose and function to destructors, but because of the differences between languages that utilize garbage-collection and languages with manual memory management, the sequence in which they are called is different.","['garbage', 'collect', 'language', 'java', 'python', 'destructor', 'know', 'finalizer', 'similar', 'purpose', 'function', 'destructor', 'difference', 'language', 'utilize', 'garbage', 'collection', 'language', 'manual', 'memory', 'management', 'sequence', 'call', 'different']"
20,An abstract method is one with only a signature and no implementation body. It is often used to specify that a subclass must provide an implementation of the method. Abstract methods are used to specify interfaces in some programming languages.4,"['abstract', 'method', 'signature', 'implementation', 'body', 'specify', 'subclass', 'provide', 'implementation', 'method', 'abstract', 'method', 'specify', 'interface', 'programming', 'languages']"
21,The following Java code shows an abstract class that needs to be extended:,"['follow', 'java', 'code', 'show', 'abstract', 'class', 'need', 'extend']"
22,The following subclass extends the main class:,"['following', 'subclass', 'extend', 'main', 'class']"
23,"If a subclass provides an implementation for an abstract method, another subclass can make it abstract again. This is called reabstraction.","['subclass', 'provide', 'implementation', 'abstract', 'method', 'subclass', 'abstract', 'call', 'reabstraction']"
24,"In practice, this is rarely used.","['practice', 'rarely']"
25,"In C#, a virtual method can be overridden with an abstract method. This also applies to Java, where all non-private methods are virtual.","['virtual', 'method', 'overridden', 'abstract', 'method', 'apply', 'java', 'non', 'private', 'method', 'virtual']"
26,"Interfaces' default methods can also be reabstracted, requiring subclasses to implement them. This also applies to Java.","['interface', 'default', 'method', 'reabstracte', 'require', 'subclass', 'implement', 'apply', 'java']"
27,"Class methods are methods that are called on a class rather than an instance. They are typically used as part of an object meta-model. I.e, for each class, defined an instance of the class object in the meta-model is created. Meta-model protocols allow classes to be created and deleted. In this sense, they provide the same functionality as constructors and destructors described above. But in some languages such as the Common Lisp Object System CLOS the meta-model allows the developer to dynamically alter the object model at run time: e.g., to create new classes, redefine the class hierarchy, modify properties, etc.","['class', 'method', 'method', 'call', 'class', 'instance', 'typically', 'object', 'meta', 'model', 'i.e', 'class', 'define', 'instance', 'class', 'object', 'meta', 'model', 'create', 'meta', 'model', 'protocol', 'allow', 'class', 'create', 'delete', 'sense', 'provide', 'functionality', 'constructor', 'destructor', 'describe', 'language', 'common', 'lisp', 'object', 'system', 'clos', 'meta', 'model', 'allow', 'developer', 'dynamically', 'alter', 'object', 'model', 'run', 'time', 'e.g.', 'create', 'new', 'class', 'redefine', 'class', 'hierarchy', 'modify', 'property', 'etc']"
28,"Special methods are very language-specific and a language may support none, some, or all of the special methods defined here. A language's compiler may automatically generate default special methods or a programmer may be allowed to optionally define special methods. Most special methods cannot be directly called, but rather the compiler generates code to call them at appropriate times.","['special', 'method', 'language', 'specific', 'language', 'support', 'special', 'method', 'define', 'language', 'compiler', 'automatically', 'generate', 'default', 'special', 'method', 'programmer', 'allow', 'optionally', 'define', 'special', 'method', 'special', 'method', 'directly', 'call', 'compiler', 'generate', 'code', 'appropriate', 'time']"
29,"Static methods are meant to be relevant to all the instances of a class rather than to any specific instance. They are similar to static variables in that sense. An example would be a static method to sum the values of all the variables of every instance of a class. For example, if there were a Product class it might have a static method to compute the average price of all products.","['static', 'method', 'mean', 'relevant', 'instance', 'class', 'specific', 'instance', 'similar', 'static', 'variable', 'sense', 'example', 'static', 'method', 'sum', 'value', 'variable', 'instance', 'class', 'example', 'product', 'class', 'static', 'method', 'compute', 'average', 'price', 'product']"
30,"In Java, a commonly used static method is:","['java', 'commonly', 'static', 'method']"
31,This static method has no owning object and does not run on an instance. It receives all information from its arguments.2,"['static', 'method', 'own', 'object', 'run', 'instance', 'receive', 'information', 'arguments']"
32,"A static method can be invoked even if no instances of the class exist yet. Static methods are called ""static"" because they are resolved at compile time based on the class they are called on and not dynamically as in the case with instance methods, which are resolved polymorphically based on the runtime type of the object.","['static', 'method', 'invoke', 'instance', 'class', 'exist', 'static', 'method', 'call', 'static', 'resolve', 'compile', 'time', 'base', 'class', 'call', 'dynamically', 'case', 'instance', 'method', 'resolve', 'polymorphically', 'base', 'runtime', 'type', 'object']"
33,Copy-assignment operators define actions to be performed by the compiler when a class object is assigned to a class object of the same type.,"['copy', 'assignment', 'operator', 'define', 'action', 'perform', 'compiler', 'class', 'object', 'assign', 'class', 'object', 'type']"
34,Operator methods define or redefine operator symbols and define the operations to be performed with the symbol and the associated method parameters. C++ example:,"['operator', 'method', 'define', 'redefine', 'operator', 'symbol', 'define', 'operation', 'perform', 'symbol', 'associate', 'method', 'parameter', 'c++', 'example']"
35,"Some procedural languages were extended with object-oriented capabilities to leverage the large skill sets and legacy code for those languages but still provide the benefits of object-oriented development. Perhaps the most well-known example is C++, an object-oriented extension of the C programming language. Due to the design requirements to add the object-oriented paradigm on to an existing procedural language, message passing in C++ has some unique capabilities and terminologies. For example, in C++ a method is known as a member function. C++ also has the concept of virtual functions which are member functions that can be overridden in derived classes and allow for dynamic dispatch.","['procedural', 'language', 'extend', 'object', 'orient', 'capability', 'leverage', 'large', 'skill', 'set', 'legacy', 'code', 'language', 'provide', 'benefit', 'object', 'orient', 'development', 'know', 'example', 'c++', 'object', 'orient', 'extension', 'programming', 'language', 'design', 'requirement', 'add', 'object', 'orient', 'paradigm', 'exist', 'procedural', 'language', 'message', 'pass', 'c++', 'unique', 'capability', 'terminology', 'example', 'c++', 'method', 'know', 'member', 'function', 'c++', 'concept', 'virtual', 'function', 'member', 'function', 'overridden', 'derive', 'class', 'allow', 'dynamic', 'dispatch']"
36,"Virtual functions are the means by which a C++ class can achieve polymorphic behavior. Non-virtual member functions, or regular methods, are those that do not participate in polymorphism.","['virtual', 'function', 'mean', 'c++', 'class', 'achieve', 'polymorphic', 'behavior', 'non', 'virtual', 'member', 'function', 'regular', 'method', 'participate', 'polymorphism']"
37,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
38,"Access modifiers or access specifiers are keywords in object-oriented languages that set the accessibility of classes, methods, and other members. Access modifiers are a specific part of programming language syntax used to facilitate the encapsulation of components.1","['access', 'modifier', 'access', 'specifier', 'keyword', 'object', 'orient', 'language', 'set', 'accessibility', 'class', 'method', 'member', 'access', 'modifier', 'specific', 'programming', 'language', 'syntax', 'facilitate', 'encapsulation', 'components']"
39,"In C++, there are only three access modifiers. C# extends the number of them to six,2 while Java has four access modifiers, but three keywords for this purpose. In Java, having no keyword before defaults to the package-private modifier.","['c++', 'access', 'modifier', 'extend', 'number', 'six', 'java', 'access', 'modifier', 'keyword', 'purpose', 'java', 'have', 'keyword', 'default', 'package', 'private', 'modifier']"
40,"When the class is declared as public, it is accessible to other classes defined in the same package as well as those defined in other packages. This is the most commonly used specifier for classes. However, a class itself cannot be declared as private. If no access specifier is stated, the default access restrictions will be applied. The class will be accessible to other classes in the same package but will be inaccessible to classes outside the package. When we say that a class is inaccessible, it simply means that we cannot create an object of that class or declare a variable of that class type. The protected access specifier too cannot be applied to a class.","['class', 'declare', 'public', 'accessible', 'class', 'define', 'package', 'define', 'package', 'commonly', 'specifi', 'class', 'class', 'declare', 'private', 'access', 'specifier', 'state', 'default', 'access', 'restriction', 'apply', 'class', 'accessible', 'class', 'package', 'inaccessible', 'class', 'outside', 'package', 'class', 'inaccessible', 'simply', 'mean', 'create', 'object', 'class', 'declare', 'variable', 'class', 'type', 'protect', 'access', 'specifier', 'apply', 'class']"
41,"C++ uses the three modifiers called public, protected, and private.3 C# has the modifiers public, protected ,internal, private, protected internal, and private protected. Java has public, package, protected, and private; package is the default, used if no other access modifier keyword is specified. The meaning of these modifiers may differ from one language to another. A comparison of the keywords, ordered from the most restrictive to the most open, and their meaning in these three languages follows. Their visibility ranges from the same class to the package where the class is defined to a general access permission. Below, the maximal access is written into the table.","['c++', 'use', 'modifier', 'call', 'public', 'protect', 'private', 'modifier', 'public', 'protect', 'internal', 'private', 'protect', 'internal', 'private', 'protect', 'java', 'public', 'package', 'protect', 'private', 'package', 'default', 'access', 'modifier', 'keyword', 'specify', 'meaning', 'modifier', 'differ', 'language', 'comparison', 'keyword', 'order', 'restrictive', 'open', 'meaning', 'language', 'follow', 'visibility', 'range', 'class', 'package', 'class', 'define', 'general', 'access', 'permission', 'maximal', 'access', 'write', 'table']"
42,"In Swift, there are five different access levels relative to both the source file in which the entity is defined and the module containing that source file.4","['swift', 'different', 'access', 'level', 'relative', 'source', 'file', 'entity', 'define', 'module', 'contain', 'source', 'file']"
43,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
44,"The essence of abstraction is preserving information that is relevant in a given context, and forgetting information that is irrelevant in that context.","['essence', 'abstraction', 'preserve', 'information', 'relevant', 'give', 'context', 'forget', 'information', 'irrelevant', 'context']"
45,"In software engineering and computer science, abstraction is:","['software', 'engineering', 'computer', 'science', 'abstraction']"
46,"Abstraction, in general, is a fundamental concept in computer science and software development.4 The process of abstraction can also be referred to as modeling and is closely related to the concepts of theory and design.5 Models can also be considered types of abstractions per their generalization of aspects of reality.","['abstraction', 'general', 'fundamental', 'concept', 'computer', 'science', 'software', 'development', 'process', 'abstraction', 'refer', 'modeling', 'closely', 'relate', 'concept', 'theory', 'design', 'models', 'consider', 'type', 'abstraction', 'generalization', 'aspect', 'reality']"
47,"Abstraction in computer science is closely related to abstraction in mathematics due to their common focus on building abstractions as objects,2 but is also related to other notions of abstraction used in other fields such as art.3","['abstraction', 'computer', 'science', 'closely', 'relate', 'abstraction', 'mathematic', 'common', 'focus', 'build', 'abstraction', 'objects', 'relate', 'notion', 'abstraction', 'field', 'art']"
48,"Abstractions may also refer to real-world objects and systems, rules of computational systems or rules of programming languages that carry or utilize features of abstraction itself, such as:","['abstraction', 'refer', 'real', 'world', 'object', 'system', 'rule', 'computational', 'system', 'rule', 'programming', 'language', 'carry', 'utilize', 'feature', 'abstraction']"
49,Computing mostly operates independently of the concrete world. The hardware implements a model of computation that is interchangeable with others.10 The software is structured in architectures to enable humans to create the enormous systems by concentrating on a few issues at a time. These architectures are made of specific choices of abstractions. Greenspun's Tenth Rule is an aphorism on how such an architecture is both inevitable and complex.,"['computing', 'operate', 'independently', 'concrete', 'world', 'hardware', 'implement', 'model', 'computation', 'interchangeable', 'others', 'software', 'structure', 'architecture', 'enable', 'human', 'create', 'enormous', 'system', 'concentrate', 'issue', 'time', 'architecture', 'specific', 'choice', 'abstraction', 'greenspun', 'tenth', 'rule', 'aphorism', 'architecture', 'inevitable', 'complex']"
50,A central form of abstraction in computing is language abstraction: new artificial languages are developed to express specific aspects of a system. Modeling languages help in planning. Computer languages can be processed with a computer. An example of this abstraction process is the generational development of programming languages from the machine language to the assembly language and the high-level language. Each stage can be used as a stepping stone for the next stage. The language abstraction continues for example in scripting languages and domain-specific programming languages.,"['central', 'form', 'abstraction', 'computing', 'language', 'abstraction', 'new', 'artificial', 'language', 'develop', 'express', 'specific', 'aspect', 'system', 'modeling', 'language', 'help', 'planning', 'computer', 'language', 'process', 'computer', 'example', 'abstraction', 'process', 'generational', 'development', 'programming', 'language', 'machine', 'language', 'assembly', 'language', 'high', 'level', 'language', 'stage', 'stepping', 'stone', 'stage', 'language', 'abstraction', 'continue', 'example', 'scripting', 'language', 'domain', 'specific', 'programming', 'language']"
51,"Within a programming language, some features let the programmer create new abstractions. These include subroutines, modules, polymorphism, and software components. Some other abstractions such as software design patterns and architectural styles remain invisible to a translator and operate only in the design of a system.","['programming', 'language', 'feature', 'let', 'programmer', 'create', 'new', 'abstraction', 'include', 'subroutine', 'module', 'polymorphism', 'software', 'component', 'abstraction', 'software', 'design', 'pattern', 'architectural', 'style', 'remain', 'invisible', 'translator', 'operate', 'design', 'system']"
52,"Some abstractions try to limit the range of concepts a programmer needs to be aware of, by completely hiding the abstractions that they in turn are built on. The software engineer and writer Joel Spolsky has criticised these efforts by claiming that all abstractions are leaky – that they can never completely hide the details below;11 however, this does not negate the usefulness of abstraction.","['abstraction', 'try', 'limit', 'range', 'concept', 'programmer', 'need', 'aware', 'completely', 'hide', 'abstraction', 'turn', 'build', 'software', 'engineer', 'writer', 'joel', 'spolsky', 'criticise', 'effort', 'claim', 'abstraction', 'leaky', 'completely', 'hide', 'detail', 'below', 'negate', 'usefulness', 'abstraction']"
53,"Some abstractions are designed to inter-operate with other abstractions – for example, a programming language may contain a foreign function interface for making calls to the lower-level language.","['abstraction', 'design', 'inter', 'operate', 'abstraction', 'example', 'programming', 'language', 'contain', 'foreign', 'function', 'interface', 'make', 'call', 'low', 'level', 'language']"
54,"Different programming languages provide different types of abstraction, depending on the intended applications for the language. For example:","['different', 'programming', 'language', 'provide', 'different', 'type', 'abstraction', 'depend', 'intend', 'application', 'language', 'example']"
55,Analysts have developed various methods to formally specify software systems. Some known methods include:,"['analyst', 'develop', 'method', 'formally', 'specify', 'software', 'system', 'know', 'method', 'include']"
56,"Specification languages generally rely on abstractions of one kind or another, since specifications are typically defined earlier in a project, and at a more abstract level than an eventual implementation. The UML specification language, for example, allows the definition of abstract classes, which in a waterfall project, remain abstract during the architecture and specification phase of the project.","['specification', 'language', 'generally', 'rely', 'abstraction', 'kind', 'specification', 'typically', 'define', 'early', 'project', 'abstract', 'level', 'eventual', 'implementation', 'uml', 'specification', 'language', 'example', 'allow', 'definition', 'abstract', 'class', 'waterfall', 'project', 'remain', 'abstract', 'architecture', 'specification', 'phase', 'project']"
57,"Programming languages offer control abstraction as one of the main purposes of their use. Computer machines understand operations at the very low level such as moving some bits from one location of the memory to another location and producing the sum of two sequences of bits. Programming languages allow this to be done in the higher level. For example, consider this statement written in a Pascal-like fashion:","['programming', 'language', 'offer', 'control', 'abstraction', 'main', 'purpose', 'use', 'computer', 'machine', 'understand', 'operation', 'low', 'level', 'move', 'bit', 'location', 'memory', 'location', 'produce', 'sum', 'sequence', 'bit', 'programming', 'language', 'allow', 'high', 'level', 'example', 'consider', 'statement', 'write', 'pascal', 'like', 'fashion']"
58,"To a human, this seems a fairly simple and obvious calculation ""one plus two is three, times five is fifteen"". However, the low-level steps necessary to carry out this evaluation, and return the value ""15"", and then assign that value to the variable ""a"", are actually quite subtle and complex. The values need to be converted to binary representation often a much more complicated task than one would think and the calculations decomposed by the compiler or interpreter into assembly instructions again, which are much less intuitive to the programmer: operations such as shifting a binary register left, or adding the binary complement of the contents of one register to another, are simply not how humans think about the abstract arithmetical operations of addition or multiplication. Finally, assigning the resulting value of ""15"" to the variable labeled ""a"", so that ""a"" can be used later, involves additional 'behind-the-scenes' steps of looking up a variable's label and the resultant location in physical or virtual memory, storing the binary representation of ""15"" to that memory location, etc.","['human', 'fairly', 'simple', 'obvious', 'calculation', 'plus', 'time', 'low', 'level', 'step', 'necessary', 'carry', 'evaluation', 'return', 'value', 'assign', 'value', 'variable', 'actually', 'subtle', 'complex', 'value', 'need', 'convert', 'binary', 'representation', 'complicated', 'task', 'think', 'calculation', 'decompose', 'compiler', 'interpreter', 'assembly', 'instruction', 'intuitive', 'programmer', 'operation', 'shift', 'binary', 'register', 'leave', 'add', 'binary', 'complement', 'content', 'register', 'simply', 'human', 'think', 'abstract', 'arithmetical', 'operation', 'addition', 'multiplication', 'finally', 'assign', 'result', 'value', 'variable', 'label', 'later', 'involve', 'additional', 'scene', 'step', 'look', 'variable', 'label', 'resultant', 'location', 'physical', 'virtual', 'memory', 'store', 'binary', 'representation', 'memory', 'location', 'etc']"
59,"Without control abstraction, a programmer would need to specify all the register/binary-level steps each time they simply wanted to add or multiply a couple of numbers and assign the result to a variable. Such duplication of effort has two serious negative consequences:","['control', 'abstraction', 'programmer', 'need', 'specify', 'register', 'binary', 'level', 'step', 'time', 'simply', 'want', 'add', 'multiply', 'couple', 'number', 'assign', 'result', 'variable', 'duplication', 'effort', 'negative', 'consequence']"
60,"Structured programming involves the splitting of complex program tasks into smaller pieces with clear flow-control and interfaces between components, with a reduction of the complexity potential for side-effects.","['structured', 'programming', 'involve', 'splitting', 'complex', 'program', 'task', 'small', 'piece', 'clear', 'flow', 'control', 'interface', 'component', 'reduction', 'complexity', 'potential', 'effect']"
61,"In a simple program, this may aim to ensure that loops have single or obvious exit points and where possible to have single exit points from functions and procedures.","['simple', 'program', 'aim', 'ensure', 'loop', 'single', 'obvious', 'exit', 'point', 'possible', 'single', 'exit', 'point', 'function', 'procedure']"
62,"In a larger system, it may involve breaking down complex tasks into many different modules. Consider a system which handles payroll on ships and at shore offices:","['large', 'system', 'involve', 'break', 'complex', 'task', 'different', 'module', 'consider', 'system', 'handle', 'payroll', 'ship', 'shore', 'office']"
63,These layers produce the effect of isolating the implementation details of one component and its assorted internal methods from the others. Object-oriented programming embraces and extends this concept.,"['layer', 'produce', 'effect', 'isolate', 'implementation', 'detail', 'component', 'assorted', 'internal', 'method', 'object', 'orient', 'programming', 'embrace', 'extend', 'concept']"
64,"Data abstraction enforces a clear separation between the abstract properties of a data type and the concrete details of its implementation. The abstract properties are those that are visible to client code that makes use of the data type—the interface to the data type—while the concrete implementation is kept entirely private, and indeed can change, for example to incorporate efficiency improvements over time. The idea is that such changes are not supposed to have any impact on client code, since they involve no difference in the abstract behaviour.","['datum', 'abstraction', 'enforce', 'clear', 'separation', 'abstract', 'property', 'data', 'type', 'concrete', 'detail', 'implementation', 'abstract', 'property', 'visible', 'client', 'code', 'make', 'use', 'data', 'type', 'interface', 'data', 'type', 'concrete', 'implementation', 'keep', 'entirely', 'private', 'change', 'example', 'incorporate', 'efficiency', 'improvement', 'time', 'idea', 'change', 'suppose', 'impact', 'client', 'code', 'involve', 'difference', 'abstract', 'behaviour']"
65,"For example, one could define an abstract data type called lookup table which uniquely associates keys with values, and in which values may be retrieved by specifying their corresponding keys. Such a lookup table may be implemented in various ways: as a hash table, a binary search tree, or even a simple linear list of key:value pairs. As far as client code is concerned, the abstract properties of the type are the same in each case.","['example', 'define', 'abstract', 'data', 'type', 'call', 'lookup', 'table', 'uniquely', 'associate', 'key', 'value', 'value', 'retrieve', 'specify', 'corresponding', 'key', 'lookup', 'table', 'implement', 'way', 'hash', 'table', 'binary', 'search', 'tree', 'simple', 'linear', 'list', 'key', 'value', 'pair', 'far', 'client', 'code', 'concern', 'abstract', 'property', 'type', 'case']"
66,"Of course, this all relies on getting the details of the interface right in the first place, since any changes there can have major impacts on client code. As one way to look at this: the interface forms a contract on agreed behaviour between the data type and client code; anything not spelled out in the contract is subject to change without notice.","['course', 'rely', 'get', 'detail', 'interface', 'right', 'place', 'change', 'major', 'impact', 'client', 'code', 'way', 'look', 'interface', 'form', 'contract', 'agree', 'behaviour', 'data', 'type', 'client', 'code', 'spell', 'contract', 'subject', 'change', 'notice']"
67,"While much of data abstraction occurs through computer science and automation, there are times when this process is done manually and without programming intervention. One way this can be understood is through data abstraction within the process of conducting a systematic review of the literature. In this methodology, data is abstracted by one or several abstractors when conducting a meta-analysis, with errors reduced through dual data abstraction followed by independent checking, known as adjudication.14","['data', 'abstraction', 'occur', 'computer', 'science', 'automation', 'time', 'process', 'manually', 'programming', 'intervention', 'way', 'understand', 'data', 'abstraction', 'process', 'conduct', 'systematic', 'review', 'literature', 'methodology', 'datum', 'abstract', 'abstractor', 'conduct', 'meta', 'analysis', 'error', 'reduce', 'dual', 'datum', 'abstraction', 'follow', 'independent', 'checking', 'know', 'adjudication']"
68,"In object-oriented programming theory, abstraction involves the facility to define objects that represent abstract ""actors"" that can perform work, report on and change their state, and ""communicate"" with other objects in the system. The term encapsulation refers to the hiding of state details, but extending the concept of data type from earlier programming languages to associate behavior most strongly with the data, and standardizing the way that different data types interact, is the beginning of abstraction. When abstraction proceeds into the operations defined, enabling objects of different types to be substituted, it is called polymorphism. When it proceeds in the opposite direction, inside the types or classes, structuring them to simplify a complex set of relationships, it is called delegation or inheritance.","['object', 'orient', 'programming', 'theory', 'abstraction', 'involve', 'facility', 'define', 'object', 'represent', 'abstract', 'actor', 'perform', 'work', 'report', 'change', 'state', 'communicate', 'object', 'system', 'term', 'encapsulation', 'refer', 'hiding', 'state', 'detail', 'extend', 'concept', 'datum', 'type', 'early', 'programming', 'language', 'associate', 'behavior', 'strongly', 'datum', 'standardize', 'way', 'different', 'datum', 'type', 'interact', 'beginning', 'abstraction', 'abstraction', 'proceed', 'operation', 'define', 'enable', 'object', 'different', 'type', 'substitute', 'call', 'polymorphism', 'proceed', 'opposite', 'direction', 'inside', 'type', 'class', 'structure', 'simplify', 'complex', 'set', 'relationship', 'call', 'delegation', 'inheritance']"
69,"Various object-oriented programming languages offer similar facilities for abstraction, all to support a general strategy of polymorphism in object-oriented programming, which includes the substitution of one type for another in the same or similar role. Although not as generally supported, a configuration or image or package may predetermine a great many of these bindings at compile-time, link-time, or loadtime. This would leave only a minimum of such bindings to change at run-time.","['object', 'orient', 'programming', 'language', 'offer', 'similar', 'facility', 'abstraction', 'support', 'general', 'strategy', 'polymorphism', 'object', 'orient', 'programming', 'include', 'substitution', 'type', 'similar', 'role', 'generally', 'support', 'configuration', 'image', 'package', 'predetermine', 'great', 'binding', 'compile', 'time', 'link', 'time', 'loadtime', 'leave', 'minimum', 'binding', 'change', 'run', 'time']"
70,"Common Lisp Object System or Self, for example, feature less of a class-instance distinction and more use of delegation for polymorphism. Individual objects and functions are abstracted more flexibly to better fit with a shared functional heritage from Lisp.","['common', 'lisp', 'object', 'system', 'self', 'example', 'feature', 'class', 'instance', 'distinction', 'use', 'delegation', 'polymorphism', 'individual', 'object', 'function', 'abstract', 'flexibly', 'well', 'fit', 'share', 'functional', 'heritage', 'lisp']"
71,"C++ exemplifies another extreme: it relies heavily on templates and overloading and other static bindings at compile-time, which in turn has certain flexibility problems.","['c++', 'exemplify', 'extreme', 'rely', 'heavily', 'template', 'overloading', 'static', 'binding', 'compile', 'time', 'turn', 'certain', 'flexibility', 'problem']"
72,"Although these examples offer alternate strategies for achieving the same abstraction, they do not fundamentally alter the need to support abstract nouns in code – all programming relies on an ability to abstract verbs as functions, nouns as data structures, and either as processes.","['example', 'offer', 'alternate', 'strategy', 'achieve', 'abstraction', 'fundamentally', 'alter', 'need', 'support', 'abstract', 'noun', 'code', 'programming', 'rely', 'ability', 'abstract', 'verb', 'function', 'noun', 'data', 'structure', 'process']"
73,"Consider for example a sample Java fragment to represent some common farm ""animals"" to a level of abstraction suitable to model simple aspects of their hunger and feeding. It defines an Animal class to represent both the state of the animal and its functions:","['consider', 'example', 'sample', 'java', 'fragment', 'represent', 'common', 'farm', 'animal', 'level', 'abstraction', 'suitable', 'model', 'simple', 'aspect', 'hunger', 'feeding', 'define', 'animal', 'class', 'represent', 'state', 'animal', 'function']"
74,"With the above definition, one could create objects of type Animal and call their methods like this:","['definition', 'create', 'object', 'type', 'animal', 'method', 'like']"
75,"In the above example, the class Animal is an abstraction used in place of an actual animal, LivingThing is a further abstraction in this case a generalisation of Animal.","['example', 'class', 'animal', 'abstraction', 'place', 'actual', 'animal', 'livingthing', 'abstraction', 'case', 'generalisation', 'animal']"
76,"If one requires a more differentiated hierarchy of animals – to differentiate, say, those who provide milk from those who provide nothing except meat at the end of their lives – that is an intermediary level of abstraction, probably DairyAnimal cows, goats who would eat foods suitable to giving good milk, and MeatAnimal pigs, steers who would eat foods to give the best meat-quality.","['require', 'differentiated', 'hierarchy', 'animal', 'differentiate', 'provide', 'milk', 'provide', 'meat', 'end', 'life', 'intermediary', 'level', 'abstraction', 'probably', 'dairyanimal', 'cow', 'goat', 'eat', 'food', 'suitable', 'give', 'good', 'milk', 'meatanimal', 'pig', 'steer', 'eat', 'food', 'good', 'meat', 'quality']"
77,"Such an abstraction could remove the need for the application coder to specify the type of food, so they could concentrate instead on the feeding schedule. The two classes could be related using inheritance or stand alone, and the programmer could define varying degrees of polymorphism between the two types. These facilities tend to vary drastically between languages, but in general each can achieve anything that is possible with any of the others. A great many operation overloads, data type by data type, can have the same effect at compile-time as any degree of inheritance or other means to achieve polymorphism. The class notation is simply a coder's convenience.","['abstraction', 'remove', 'need', 'application', 'coder', 'specify', 'type', 'food', 'concentrate', 'instead', 'feeding', 'schedule', 'class', 'relate', 'inheritance', 'stand', 'programmer', 'define', 'vary', 'degree', 'polymorphism', 'type', 'facility', 'tend', 'vary', 'drastically', 'language', 'general', 'achieve', 'possible', 'great', 'operation', 'overload', 'datum', 'type', 'datum', 'type', 'effect', 'compile', 'time', 'degree', 'inheritance', 'mean', 'achieve', 'polymorphism', 'class', 'notation', 'simply', 'coder', 'convenience']"
78,Decisions regarding what to abstract and what to keep under the control of the coder become the major concern of object-oriented design and domain analysis—actually determining the relevant relationships in the real world is the concern of object-oriented analysis or legacy analysis.,"['decision', 'abstract', 'control', 'coder', 'major', 'concern', 'object', 'orient', 'design', 'domain', 'analysis', 'actually', 'determine', 'relevant', 'relationship', 'real', 'world', 'concern', 'object', 'orient', 'analysis', 'legacy', 'analysis']"
79,"In general, to determine appropriate abstraction, one must make many small decisions about scope domain analysis, determine what other systems one must cooperate with legacy analysis, then perform a detailed object-oriented analysis which is expressed within project time and budget constraints as an object-oriented design. In our simple example, the domain is the barnyard, the live pigs and cows and their eating habits are the legacy constraints, the detailed analysis is that coders must have the flexibility to feed the animals what is available and thus there is no reason to code the type of food into the class itself, and the design is a single simple Animal class of which pigs and cows are instances with the same functions. A decision to differentiate DairyAnimal would change the detailed analysis but the domain and legacy analysis would be unchanged—thus it is entirely under the control of the programmer, and it is called an abstraction in object-oriented programming as distinct from abstraction in domain or legacy analysis.","['general', 'determine', 'appropriate', 'abstraction', 'small', 'decision', 'scope', 'domain', 'analysis', 'determine', 'system', 'cooperate', 'legacy', 'analysis', 'perform', 'detailed', 'object', 'orient', 'analysis', 'express', 'project', 'time', 'budget', 'constraint', 'object', 'orient', 'design', 'simple', 'example', 'domain', 'barnyard', 'live', 'pig', 'cow', 'eating', 'habit', 'legacy', 'constraint', 'detailed', 'analysis', 'coder', 'flexibility', 'feed', 'animal', 'available', 'reason', 'code', 'type', 'food', 'class', 'design', 'single', 'simple', 'animal', 'class', 'pig', 'cow', 'instance', 'function', 'decision', 'differentiate', 'dairyanimal', 'change', 'detailed', 'analysis', 'domain', 'legacy', 'analysis', 'unchanged', 'entirely', 'control', 'programmer', 'call', 'abstraction', 'object', 'orient', 'programming', 'distinct', 'abstraction', 'domain', 'legacy', 'analysis']"
80,"When discussing formal semantics of programming languages, formal methods or abstract interpretation, abstraction refers to the act of considering a less detailed, but safe, definition of the observed program behaviors. For instance, one may observe only the final result of program executions instead of considering all the intermediate steps of executions. Abstraction is defined to a concrete more precise model of execution.","['discuss', 'formal', 'semantic', 'programming', 'language', 'formal', 'method', 'abstract', 'interpretation', 'abstraction', 'refer', 'act', 'consider', 'detailed', 'safe', 'definition', 'observed', 'program', 'behavior', 'instance', 'observe', 'final', 'result', 'program', 'execution', 'instead', 'consider', 'intermediate', 'step', 'execution', 'abstraction', 'define', 'concrete', 'precise', 'model', 'execution']"
81,"Abstraction may be exact or faithful with respect to a property if one can answer a question about the property equally well on the concrete or abstract model. For instance, if one wishes to know what the result of the evaluation of a mathematical expression involving only integers +, -, ×, is worth modulo n, then one needs only perform all operations modulo n a familiar form of this abstraction is casting out nines.","['abstraction', 'exact', 'faithful', 'respect', 'property', 'answer', 'question', 'property', 'equally', 'concrete', 'abstract', 'model', 'instance', 'wish', 'know', 'result', 'evaluation', 'mathematical', 'expression', 'involve', 'integer', 'worth', 'modulo', 'need', 'perform', 'operation', 'modulo', 'familiar', 'form', 'abstraction', 'cast', 'nine']"
82,"Abstractions, however, though not necessarily exact, should be sound. That is, it should be possible to get sound answers from them—even though the abstraction may simply yield a result of undecidability. For instance, students in a class may be abstracted by their minimal and maximal ages; if one asks whether a certain person belongs to that class, one may simply compare that person's age with the minimal and maximal ages; if his age lies outside the range, one may safely answer that the person does not belong to the class; if it does not, one may only answer ""I don't know"".","['abstraction', 'necessarily', 'exact', 'sound', 'possible', 'sound', 'answer', 'abstraction', 'simply', 'yield', 'result', 'undecidability', 'instance', 'student', 'class', 'abstract', 'minimal', 'maximal', 'age', 'ask', 'certain', 'person', 'belong', 'class', 'simply', 'compare', 'person', 'age', 'minimal', 'maximal', 'age', 'age', 'lie', 'outside', 'range', 'safely', 'answer', 'person', 'belong', 'class', 'answer', 'know']"
83,"The level of abstraction included in a programming language can influence its overall usability. The Cognitive dimensions framework includes the concept of abstraction gradient in a formalism. This framework allows the designer of a programming language to study the trade-offs between abstraction and other characteristics of the design, and how changes in abstraction influence the language usability.","['level', 'abstraction', 'include', 'programming', 'language', 'influence', 'overall', 'usability', 'cognitive', 'dimension', 'framework', 'include', 'concept', 'abstraction', 'gradient', 'formalism', 'framework', 'allow', 'designer', 'programming', 'language', 'study', 'trade', 'off', 'abstraction', 'characteristic', 'design', 'change', 'abstraction', 'influence', 'language', 'usability']"
84,"Abstractions can prove useful when dealing with computer programs, because non-trivial properties of computer programs are essentially undecidable see Rice's theorem. As a consequence, automatic methods for deriving information on the behavior of computer programs either have to drop termination on some occasions, they may fail, crash or never yield out a result, soundness they may provide false information, or precision they may answer ""I don't know"" to some questions.","['abstraction', 'prove', 'useful', 'deal', 'computer', 'program', 'non', 'trivial', 'property', 'computer', 'program', 'essentially', 'undecidable', 'rice', 'theorem', 'consequence', 'automatic', 'method', 'derive', 'information', 'behavior', 'computer', 'program', 'drop', 'termination', 'occasion', 'fail', 'crash', 'yield', 'result', 'soundness', 'provide', 'false', 'information', 'precision', 'answer', 'know', 'question']"
85,Abstraction is the core concept of abstract interpretation. Model checking generally takes place on abstract versions of the studied systems.,"['abstraction', 'core', 'concept', 'abstract', 'interpretation', 'model', 'checking', 'generally', 'take', 'place', 'abstract', 'version', 'study', 'system']"
86,"Computer science commonly presents levels or, less commonly, layers of abstraction, wherein each level represents a different model of the same information and processes, but with varying amounts of detail. Each level uses a system of expression involving a unique set of objects and compositions that apply only to a particular domain. 15 Each relatively abstract, ""higher"" level builds on a relatively concrete, ""lower"" level, which tends to provide an increasingly ""granular"" representation. For example, gates build on electronic circuits, binary on gates, machine language on binary, programming language on machine language, applications and operating systems on programming languages. Each level is embodied, but not determined, by the level beneath it, making it a language of description that is somewhat self-contained.","['computer', 'science', 'commonly', 'present', 'level', 'commonly', 'layer', 'abstraction', 'level', 'represent', 'different', 'model', 'information', 'process', 'vary', 'amount', 'detail', 'level', 'use', 'system', 'expression', 'involve', 'unique', 'set', 'object', 'composition', 'apply', 'particular', 'domain', 'relatively', 'abstract', 'high', 'level', 'build', 'relatively', 'concrete', 'low', 'level', 'tend', 'provide', 'increasingly', 'granular', 'representation', 'example', 'gate', 'build', 'electronic', 'circuit', 'binary', 'gate', 'machine', 'language', 'binary', 'programming', 'language', 'machine', 'language', 'application', 'operating', 'system', 'programming', 'language', 'level', 'embody', 'determine', 'level', 'beneath', 'make', 'language', 'description', 'somewhat', 'self', 'contain']"
87,"Since many users of database systems lack in-depth familiarity with computer data-structures, database developers often hide complexity through the following levels:","['user', 'database', 'system', 'lack', 'depth', 'familiarity', 'computer', 'datum', 'structure', 'database', 'developer', 'hide', 'complexity', 'follow', 'level']"
88,Physical level: The lowest level of abstraction describes how a system actually stores data. The physical level describes complex low-level data structures in detail.,"['physical', 'level', 'low', 'level', 'abstraction', 'describe', 'system', 'actually', 'store', 'datum', 'physical', 'level', 'describe', 'complex', 'low', 'level', 'datum', 'structure', 'detail']"
89,"Logical level: The next higher level of abstraction describes what data the database stores, and what relationships exist among those data. The logical level thus describes an entire database in terms of a small number of relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical level structures, the user of the logical level does not need to be aware of this complexity. This is referred to as physical data independence. Database administrators, who must decide what information to keep in a database, use the logical level of abstraction.","['logical', 'level', 'high', 'level', 'abstraction', 'describe', 'datum', 'database', 'store', 'relationship', 'exist', 'datum', 'logical', 'level', 'describe', 'entire', 'database', 'term', 'small', 'number', 'relatively', 'simple', 'structure', 'implementation', 'simple', 'structure', 'logical', 'level', 'involve', 'complex', 'physical', 'level', 'structure', 'user', 'logical', 'level', 'need', 'aware', 'complexity', 'refer', 'physical', 'datum', 'independence', 'database', 'administrator', 'decide', 'information', 'database', 'use', 'logical', 'level', 'abstraction']"
90,"View level: The highest level of abstraction describes only part of the entire database. Even though the logical level uses simpler structures, complexity remains because of the variety of information stored in a large database. Many users of a database system do not need all this information; instead, they need to access only a part of the database. The view level of abstraction exists to simplify their interaction with the system. The system may provide many views for the same database.","['view', 'level', 'high', 'level', 'abstraction', 'describe', 'entire', 'database', 'logical', 'level', 'use', 'simple', 'structure', 'complexity', 'remain', 'variety', 'information', 'store', 'large', 'database', 'user', 'database', 'system', 'need', 'information', 'instead', 'need', 'access', 'database', 'view', 'level', 'abstraction', 'exist', 'simplify', 'interaction', 'system', 'system', 'provide', 'view', 'database']"
91,The ability to provide a design of different levels of abstraction can,"['ability', 'provide', 'design', 'different', 'level', 'abstraction']"
92,Systems design and business process design can both use this. Some design processes specifically generate designs that contain various levels of abstraction.,"['systems', 'design', 'business', 'process', 'design', 'use', 'design', 'process', 'specifically', 'generate', 'design', 'contain', 'level', 'abstraction']"
93,"Layered architecture partitions the concerns of the application into stacked groups layers. It is a technique used in designing computer software, hardware, and communications in which system or network components are isolated in layers so that changes can be made in one layer without affecting the others.","['layered', 'architecture', 'partition', 'concern', 'application', 'stack', 'group', 'layer', 'technique', 'design', 'computer', 'software', 'hardware', 'communication', 'system', 'network', 'component', 'isolate', 'layer', 'change', 'layer', 'affect']"
94,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
95,"In computer science, type conversion,12 type casting,13 type coercion,3 and type juggling45 are different ways of changing an expression from one data type to another. An example would be the conversion of an integer value into a floating point value or its textual representation as a string, and vice versa. Type conversions can take advantage of certain features of type hierarchies or data representations. Two important aspects of a type conversion are whether it happens implicitly automatically or explicitly,16 and whether the underlying data representation is converted from one representation into another, or a given representation is merely reinterpreted as the representation of another data type.67 In general, both primitive and compound data types can be converted.","['computer', 'science', 'type', 'conversion', 'type', 'casting', 'type', 'coercion', 'type', 'juggling45', 'different', 'way', 'change', 'expression', 'datum', 'type', 'example', 'conversion', 'integer', 'value', 'float', 'point', 'value', 'textual', 'representation', 'string', 'vice', 'versa', 'type', 'conversion', 'advantage', 'certain', 'feature', 'type', 'hierarchy', 'datum', 'representation', 'important', 'aspect', 'type', 'conversion', 'happen', 'implicitly', 'automatically', 'explicitly', 'underlie', 'datum', 'representation', 'convert', 'representation', 'give', 'representation', 'merely', 'reinterpret', 'representation', 'datum', 'type', 'general', 'primitive', 'compound', 'datum', 'type', 'convert']"
96,"Each programming language has its own rules on how types can be converted. Languages with strong typing typically do little implicit conversion and discourage the reinterpretation of representations, while languages with weak typing perform many implicit conversions between data types. Weak typing language often allow forcing the compiler to arbitrarily interpret a data item as having different representations—this can be a non-obvious programming error, or a technical method to directly deal with underlying hardware.","['programming', 'language', 'rule', 'type', 'convert', 'language', 'strong', 'typing', 'typically', 'little', 'implicit', 'conversion', 'discourage', 'reinterpretation', 'representation', 'language', 'weak', 'typing', 'perform', 'implicit', 'conversion', 'datum', 'type', 'weak', 'typing', 'language', 'allow', 'force', 'compiler', 'arbitrarily', 'interpret', 'data', 'item', 'have', 'different', 'representation', 'non', 'obvious', 'programming', 'error', 'technical', 'method', 'directly', 'deal', 'underlie', 'hardware']"
97,"In most languages, the word coercion is used to denote an implicit conversion, either during compilation or during run time. For example, in an expression mixing integer and floating point numbers like 5 + 0.1, the compiler will automatically convert integer representation into floating point representation so fractions are not lost. Explicit type conversions are either indicated by writing additional code e.g. adding type identifiers or calling built-in routines or by coding conversion routines for the compiler to use when it otherwise would halt with a type mismatch.","['language', 'word', 'coercion', 'denote', 'implicit', 'conversion', 'compilation', 'run', 'time', 'example', 'expression', 'mix', 'integer', 'float', 'point', 'number', 'like', '0', 'compiler', 'automatically', 'convert', 'integer', 'representation', 'float', 'point', 'representation', 'fraction', 'lose', 'explicit', 'type', 'conversion', 'indicate', 'write', 'additional', 'code', 'e.g.', 'add', 'type', 'identifier', 'call', 'build', 'routine', 'code', 'conversion', 'routine', 'compiler', 'use', 'halt', 'type', 'mismatch']"
98,"In most ALGOL-like languages, such as Pascal, Modula-2, Ada and Delphi, conversion and casting are distinctly different concepts. In these languages, conversion refers to either implicitly or explicitly changing a value from one data type storage format to another, e.g. a 16-bit integer to a 32-bit integer. The storage needs may change as a result of the conversion, including a possible loss of precision or truncation. The word cast, on the other hand, refers to explicitly changing the interpretation of the bit pattern representing a value from one type to another. For example, 32 contiguous bits may be treated as an array of 32 booleans, a 4-byte string, an unsigned 32-bit integer or an IEEE single precision floating point value. Because the stored bits are never changed, the programmer must know low level details such as representation format, byte order, and alignment needs, to meaningfully cast.","['algol', 'like', 'language', 'pascal', 'modula-2', 'ada', 'delphi', 'conversion', 'casting', 'distinctly', 'different', 'concept', 'language', 'conversion', 'refer', 'implicitly', 'explicitly', 'change', 'value', 'data', 'type', 'storage', 'format', 'e.g.', 'bit', 'integer', 'bit', 'integer', 'storage', 'need', 'change', 'result', 'conversion', 'include', 'possible', 'loss', 'precision', 'truncation', 'word', 'cast', 'hand', 'refer', 'explicitly', 'change', 'interpretation', 'bit', 'pattern', 'represent', 'value', 'type', 'example', 'contiguous', 'bit', 'treat', 'array', 'boolean', 'byte', 'string', 'unsigned', 'bit', 'integer', 'ieee', 'single', 'precision', 'float', 'point', 'value', 'store', 'bit', 'change', 'programmer', 'know', 'low', 'level', 'detail', 'representation', 'format', 'byte', 'order', 'alignment', 'need', 'meaningfully', 'cast']"
99,"In the C family of languages and ALGOL 68, the word cast typically refers to an explicit type conversion as opposed to an implicit conversion, causing some ambiguity about whether this is a re-interpretation of a bit-pattern or a real data representation conversion. More important is the multitude of ways and rules that apply to what data type or class is located by a pointer and how a pointer may be adjusted by the compiler in cases like object class inheritance.","['family', 'language', 'algol', 'word', 'cast', 'typically', 'refer', 'explicit', 'type', 'conversion', 'oppose', 'implicit', 'conversion', 'cause', 'ambiguity', 'interpretation', 'bit', 'pattern', 'real', 'data', 'representation', 'conversion', 'important', 'multitude', 'way', 'rule', 'apply', 'data', 'type', 'class', 'locate', 'pointer', 'pointer', 'adjust', 'compiler', 'case', 'like', 'object', 'class', 'inheritance']"
100,"Implicit type conversion, also known as coercion or type juggling, is an automatic type conversion by the compiler. Some programming languages allow compilers to provide coercion; others require it.","['implicit', 'type', 'conversion', 'know', 'coercion', 'type', 'juggling', 'automatic', 'type', 'conversion', 'compiler', 'programming', 'language', 'allow', 'compiler', 'provide', 'coercion', 'require']"
101,"In a mixed-type expression, data of one or more subtypes can be converted to a supertype as needed at runtime so that the program will run correctly. For example, the following is legal C language code:","['mixed', 'type', 'expression', 'datum', 'subtype', 'convert', 'supertype', 'need', 'runtime', 'program', 'run', 'correctly', 'example', 'following', 'legal', 'language', 'code']"
102,"Although .mw-parser-output .monospacedfont-family:monospace,monospaced, l, and i belong to different data types, they will be automatically converted to equal data types each time a comparison or assignment is executed. This behavior should be used with caution, as unintended consequences can arise. Data can be lost when converting representations from floating-point to integer, as the fractional components of the floating-point values will be truncated rounded toward zero. Conversely, precision can be lost when converting representations from integer to floating-point, since a floating-point type may be unable to exactly represent all possible values of some integer type. For example, float might be an IEEE 754 single precision type, which cannot represent the integer 16777217 exactly, while a 32-bit integer type can. This can lead to unintuitive behavior, as demonstrated by the following code:","['.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospace', 'belong', 'different', 'datum', 'type', 'automatically', 'convert', 'equal', 'data', 'type', 'time', 'comparison', 'assignment', 'execute', 'behavior', 'caution', 'unintended', 'consequence', 'arise', 'datum', 'lose', 'convert', 'representation', 'float', 'point', 'integer', 'fractional', 'component', 'float', 'point', 'value', 'truncate', 'round', 'zero', 'conversely', 'precision', 'lose', 'convert', 'representation', 'integer', 'float', 'point', 'float', 'point', 'type', 'unable', 'exactly', 'represent', 'possible', 'value', 'integer', 'type', 'example', 'float', 'ieee', '754', 'single', 'precision', 'type', 'represent', 'integer', '16777217', 'exactly', 'bit', 'integer', 'type', 'lead', 'unintuitive', 'behavior', 'demonstrate', 'follow', 'code']"
103,"On compilers that implement floats as IEEE single precision, and ints as at least 32 bits, this code will give this peculiar print-out:","['compiler', 'implement', 'float', 'ieee', 'single', 'precision', 'int', 'bit', 'code', 'peculiar', 'print']"
104,"Note that 1 represents equality in the last line above. This odd behavior is caused by an implicit conversion of i_value to float when it is compared with f_value. The conversion causes loss of precision, which makes the values equal before the comparison.","['note', 'represent', 'equality', 'line', 'odd', 'behavior', 'cause', 'implicit', 'conversion', 'i_value', 'float', 'compare', 'f_value', 'conversion', 'cause', 'loss', 'precision', 'make', 'value', 'equal', 'comparison']"
105,"One special case of implicit type conversion is type promotion, where an object is automatically converted into another data type representing a superset of the original type. Promotions are commonly used with types smaller than the native type of the target platform's arithmetic logic unit ALU, before arithmetic and logical operations, to make such operations possible, or more efficient if the ALU can work with more than one type. C and C++ perform such promotion for objects of boolean, character, wide character, enumeration, and short integer types which are promoted to int, and for objects of type float, which are promoted to double. Unlike some other type conversions, promotions never lose precision or modify the value stored in the object.","['special', 'case', 'implicit', 'type', 'conversion', 'type', 'promotion', 'object', 'automatically', 'convert', 'data', 'type', 'represent', 'superset', 'original', 'type', 'promotion', 'commonly', 'type', 'small', 'native', 'type', 'target', 'platform', 'arithmetic', 'logic', 'unit', 'alu', 'arithmetic', 'logical', 'operation', 'operation', 'possible', 'efficient', 'alu', 'work', 'type', 'c++', 'perform', 'promotion', 'object', 'boolean', 'character', 'wide', 'character', 'enumeration', 'short', 'integer', 'type', 'promote', 'int', 'object', 'type', 'float', 'promote', 'double', 'unlike', 'type', 'conversion', 'promotion', 'lose', 'precision', 'modify', 'value', 'store', 'object']"
106,"Explicit type conversion, also called type casting, is a type conversion which is explicitly defined within a program instead of being done automatically according to the rules of the language for implicit type conversion. It is requested by the user in the program.","['explicit', 'type', 'conversion', 'call', 'type', 'casting', 'type', 'conversion', 'explicitly', 'define', 'program', 'instead', 'automatically', 'accord', 'rule', 'language', 'implicit', 'type', 'conversion', 'request', 'user', 'program']"
107,There are several kinds of explicit conversion.,"['kind', 'explicit', 'conversion']"
108,"In object-oriented programming languages, objects can also be downcast : a reference of a base class is cast to one of its derived classes.","['object', 'orient', 'programming', 'language', 'object', 'downcast', 'reference', 'base', 'class', 'cast', 'derive', 'class']"
109,"In C#, type conversion can be made in a safe or unsafe i.e., C-like manner, the former called checked type cast.8","['type', 'conversion', 'safe', 'unsafe', 'i.e.', 'like', 'manner', 'call', 'check', 'type', 'cast']"
110,In C++ a similar effect can be achieved using C++-style cast syntax.,"['c++', 'similar', 'effect', 'achieve', 'c++-style', 'cast', 'syntax']"
111,"In Eiffel the notion of type conversion is integrated into the rules of the type system. The Assignment Rule says that an assignment, such as:","['eiffel', 'notion', 'type', 'conversion', 'integrate', 'rule', 'type', 'system', 'assignment', 'rule', 'say', 'assignment']"
112,"is valid if and only if the type of its source expression, y in this case, is compatible with the type of its target entity, x in this case. In this rule, compatible with means that the type of the source expression either conforms to or converts to that of the target. Conformance of types is defined by the familiar rules for polymorphism in object-oriented programming. For example, in the assignment above, the type of y conforms to the type of x if the class upon which y is based is a descendant of that upon which x is based.","['valid', 'type', 'source', 'expression', 'case', 'compatible', 'type', 'target', 'entity', 'case', 'rule', 'compatible', 'mean', 'type', 'source', 'expression', 'conform', 'convert', 'target', 'conformance', 'type', 'define', 'familiar', 'rule', 'polymorphism', 'object', 'orient', 'programming', 'example', 'assignment', 'type', 'conform', 'type', 'class', 'base', 'descendant', 'base']"
113,"The actions of type conversion in Eiffel, specifically converts to and converts from are defined as:","['action', 'type', 'conversion', 'eiffel', 'specifically', 'convert', 'convert', 'define']"
114,A type based on a class CU converts to a type T based on a class CT and T converts from U if either,"['type', 'base', 'class', 'convert', 'type', 'base', 'class', 'convert']"
115,"Eiffel is a fully compliant language for Microsoft .NET Framework. Before development of .NET, Eiffel already had extensive class libraries. Using the .NET type libraries, particularly with commonly used types such as strings, poses a conversion problem. Existing Eiffel software uses the string classes such as STRING_8 from the Eiffel libraries, but Eiffel software written for .NET must use the .NET string class System.String in many cases, for example when calling .NET methods which expect items of the .NET type to be passed as arguments. So, the conversion of these types back and forth needs to be as seamless as possible.","['eiffel', 'fully', 'compliant', 'language', 'microsoft', '.net', 'framework', 'development', '.net', 'eiffel', 'extensive', 'class', 'library', '.net', 'type', 'library', 'particularly', 'commonly', 'type', 'string', 'pose', 'conversion', 'problem', 'exist', 'eiffel', 'software', 'use', 'string', 'class', 'string_8', 'eiffel', 'library', 'eiffel', 'software', 'write', '.net', 'use', '.net', 'string', 'class', 'system', 'string', 'case', 'example', 'call', '.net', 'method', 'expect', 'item', '.net', 'type', 'pass', 'argument', 'conversion', 'type', 'forth', 'need', 'seamless', 'possible']"
116,"In the code above, two strings are declared, one of each different type SYSTEM_STRING is the Eiffel compliant alias for System.String. Because System.String does not conform to STRING_8, then the assignment above is valid only if System.String converts to STRING_8.","['code', 'string', 'declare', 'different', 'type', 'system_stre', 'eiffel', 'compliant', 'alia', 'system', 'string', 'system', 'string', 'conform', 'string_8', 'assignment', 'valid', 'system', 'string', 'convert', 'string_8']"
117,The Eiffel class STRING_8 has a conversion procedure make_from_cil for objects of type System.String. Conversion procedures are also always designated as creation procedures similar to constructors. The following is an excerpt from the STRING_8 class:,"['eiffel', 'class', 'string_8', 'conversion', 'procedure', 'make_from_cil', 'object', 'type', 'system', 'string', 'conversion', 'procedure', 'designate', 'creation', 'procedure', 'similar', 'constructor', 'follow', 'excerpt', 'string_8', 'class']"
118,The presence of the conversion procedure makes the assignment:,"['presence', 'conversion', 'procedure', 'make', 'assignment']"
119,in which my_string is constructed as a new object of type STRING_8 with content equivalent to that of my_system_string.,"['my_string', 'construct', 'new', 'object', 'type', 'string_8', 'content', 'equivalent', 'my_system_string']"
120,To handle an assignment with original source and target reversed:,"['handle', 'assignment', 'original', 'source', 'target', 'reverse']"
121,the class STRING_8 also contains a conversion query to_cil which will produce a System.String from an instance of STRING_8.,"['class', 'string_8', 'contain', 'conversion', 'query', 'to_cil', 'produce', 'system', 'string', 'instance', 'string_8']"
122,"In Eiffel, the setup for type conversion is included in the class code, but then appears to happen as automatically as explicit type conversion in client code. The includes not just assignments but other types of attachments as well, such as argument parameter substitution.","['eiffel', 'setup', 'type', 'conversion', 'include', 'class', 'code', 'appear', 'happen', 'automatically', 'explicit', 'type', 'conversion', 'client', 'code', 'include', 'assignment', 'type', 'attachment', 'argument', 'parameter', 'substitution']"
123,"Rust provides no implicit type conversion coercion between primitive types. But, explicit type conversion casting can be performed using the as keyword.9","['rust', 'provide', 'implicit', 'type', 'conversion', 'coercion', 'primitive', 'type', 'explicit', 'type', 'conversion', 'casting', 'perform', 'keyword']"
124,"In hacking, typecasting is the misuse of type conversion to temporarily change a variable's data type from how it was originally defined.10 This provides opportunities for hackers since in type conversion after a variable is ""typecast"" to become a different data type, the compiler will treat that hacked variable as the new data type for that specific operation.11","['hack', 'typecasting', 'misuse', 'type', 'conversion', 'temporarily', 'change', 'variable', 'data', 'type', 'originally', 'defined', 'provide', 'opportunity', 'hacker', 'type', 'conversion', 'variable', 'typecast', 'different', 'datum', 'type', 'compiler', 'treat', 'hack', 'variable', 'new', 'data', 'type', 'specific', 'operation']"
125,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
126,"In object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state member variables and implementations of behavior member functions or methods.12 In many languages, the class name is used as the name for the class the template itself, the name for the default constructor of the class a subroutine that creates objects, and as the type of objects generated by instantiating the class; these distinct concepts are easily conflated.2 Although, to the point of conflation, one could argue that is a feature inherent in a language because of its polymorphic nature and why these languages are so powerful, dynamic and adaptable for use compared to languages without polymorphism present. Thus they can model dynamic systems i.e. the real world, machine learning, AI more easily.","['object', 'orient', 'programming', 'class', 'extensible', 'program', 'code', 'template', 'create', 'object', 'provide', 'initial', 'value', 'state', 'member', 'variable', 'implementation', 'behavior', 'member', 'function', 'methods', 'language', 'class', 'class', 'template', 'default', 'constructor', 'class', 'subroutine', 'create', 'object', 'type', 'object', 'generate', 'instantiate', 'class', 'distinct', 'concept', 'easily', 'conflated', 'point', 'conflation', 'argue', 'feature', 'inherent', 'language', 'polymorphic', 'nature', 'language', 'powerful', 'dynamic', 'adaptable', 'use', 'compare', 'language', 'polymorphism', 'present', 'model', 'dynamic', 'system', 'i.e.', 'real', 'world', 'machine', 'learning', 'easily']"
127,"When an object is created by a constructor of the class, the resulting object is called an instance of the class, and the member variables specific to the object are called instance variables, to contrast with the class variables shared across the class.","['object', 'create', 'constructor', 'class', 'result', 'object', 'call', 'instance', 'class', 'member', 'variable', 'specific', 'object', 'call', 'instance', 'variable', 'contrast', 'class', 'variable', 'share', 'class']"
128,"In certain languages, classes are, as a matter of fact, only a compile-time feature new classes cannot be declared at run-time, while in other languages classes are first-class citizens, and are generally themselves objects typically of type .mw-parser-output .monospacedfont-family:monospace,monospaceClass or similar. In these languages, a class that creates classes within itself is called a metaclass.","['certain', 'language', 'class', 'matter', 'fact', 'compile', 'time', 'feature', 'new', 'class', 'declare', 'run', 'time', 'language', 'class', 'class', 'citizen', 'generally', 'object', 'typically', 'type', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospaceclass', 'similar', 'language', 'class', 'create', 'class', 'call', 'metaclass']"
129,"In its most casual usage, people often refer to the ""class"" of an object, but narrowly speaking objects have type: the interface, namely the types of member variables, the signatures of member functions methods, and properties these satisfy. At the same time, a class has an implementation specifically the implementation of the methods, and can create objects of a given type, with a given implementation.3 In the terms of type theory, a class is an implementation‍—‌a concrete data structure and collection of subroutines‍—‌while a type is an interface. Different concrete classes can produce objects of the same abstract type depending on type system; for example, the type Stack might be implemented with two classes – SmallStack fast for small stacks, but scales poorly and ScalableStack scales well but high overhead for small stacks. Similarly, a given class may have several different constructors.","['casual', 'usage', 'people', 'refer', 'class', 'object', 'narrowly', 'speak', 'object', 'type', 'interface', 'type', 'member', 'variable', 'signature', 'member', 'function', 'method', 'property', 'satisfy', 'time', 'class', 'implementation', 'specifically', 'implementation', 'method', 'create', 'object', 'give', 'type', 'give', 'implementation', 'term', 'type', 'theory', 'class', 'implementation\u200d—\u200ca', 'concrete', 'data', 'structure', 'collection', 'subroutines\u200d—\u200cwhile', 'type', 'interface', 'different', 'concrete', 'class', 'produce', 'object', 'abstract', 'type', 'depend', 'type', 'system', 'example', 'type', 'stack', 'implement', 'class', 'smallstack', 'fast', 'small', 'stack', 'scale', 'poorly', 'scalablestack', 'scale', 'high', 'overhead', 'small', 'stack', 'similarly', 'give', 'class', 'different', 'constructor']"
130,"Class types generally represent nouns, such as a person, place or thing, or something nominalized, and a class represents an implementation of these. For example, a Banana type might represent the properties and functionality of bananas in general, while the ABCBanana and XYZBanana classes would represent ways of producing bananas say, banana suppliers or data structures and functions to represent and draw bananas in a video game. The ABCBanana class could then produce particular bananas: instances of the ABCBanana class would be objects of type Banana. Often only a single implementation of a type is given, in which case the class name is often identical with the type name.","['class', 'type', 'generally', 'represent', 'noun', 'person', 'place', 'thing', 'nominalize', 'class', 'represent', 'implementation', 'example', 'banana', 'type', 'represent', 'property', 'functionality', 'banana', 'general', 'abcbanana', 'xyzbanana', 'class', 'represent', 'way', 'produce', 'banana', 'banana', 'supplier', 'datum', 'structure', 'function', 'represent', 'draw', 'banana', 'video', 'game', 'abcbanana', 'class', 'produce', 'particular', 'banana', 'instance', 'abcbanana', 'class', 'object', 'type', 'banana', 'single', 'implementation', 'type', 'give', 'case', 'class', 'identical', 'type']"
131,"Classes are composed from structural and behavioral constituents.1 Programming languages that include classes as a programming construct offer support, for various class-related features, and the syntax required to use these features varies greatly from one programming language to another.","['class', 'compose', 'structural', 'behavioral', 'constituents', 'programming', 'language', 'include', 'class', 'programming', 'construct', 'offer', 'support', 'class', 'relate', 'feature', 'syntax', 'require', 'use', 'feature', 'vary', 'greatly', 'programming', 'language']"
132,"A class contains data field descriptions or properties, fields, data members, or attributes. These are usually field types and names that will be associated with state variables at program run time; these state variables either belong to the class or specific instances of the class. In most languages, the structure defined by the class determines the layout of the memory used by its instances. Other implementations are possible: for example, objects in Python use associative key-value containers.4","['class', 'contain', 'data', 'field', 'description', 'property', 'field', 'datum', 'member', 'attribute', 'usually', 'field', 'type', 'name', 'associate', 'state', 'variable', 'program', 'run', 'time', 'state', 'variable', 'belong', 'class', 'specific', 'instance', 'class', 'language', 'structure', 'define', 'class', 'determine', 'layout', 'memory', 'instance', 'implementation', 'possible', 'example', 'object', 'python', 'use', 'associative', 'key', 'value', 'containers']"
133,"Some programming languages such as Eiffel support specification of invariants as part of the definition of the class, and enforce them through the type system. Encapsulation of state is necessary for being able to enforce the invariants of the class.","['programming', 'language', 'eiffel', 'support', 'specification', 'invariant', 'definition', 'class', 'enforce', 'type', 'system', 'encapsulation', 'state', 'necessary', 'able', 'enforce', 'invariant', 'class']"
134,"The behavior of class or its instances is defined using methods. Methods are subroutines with the ability to operate on objects or classes. These operations may alter the state of an object or simply provide ways of accessing it.5 Many kinds of methods exist, but support for them varies across languages. Some types of methods are created and called by programmer code, while other special methods—such as constructors, destructors, and conversion operators—are created and called by compiler-generated code. A language may also allow the programmer to define and call these special methods.67","['behavior', 'class', 'instance', 'define', 'method', 'method', 'subroutine', 'ability', 'operate', 'object', 'class', 'operation', 'alter', 'state', 'object', 'simply', 'provide', 'way', 'access', 'it', 'kind', 'method', 'exist', 'support', 'vary', 'language', 'type', 'method', 'create', 'call', 'programmer', 'code', 'special', 'method', 'constructor', 'destructor', 'conversion', 'operator', 'create', 'call', 'compiler', 'generate', 'code', 'language', 'allow', 'programmer', 'define', 'special', 'methods']"
135,"Every class implements or realizes an interface by providing structure and behavior. Structure consists of data and state, and behavior consists of code that specifies how methods are implemented.8 There is a distinction between the definition of an interface and the implementation of that interface; however, this line is blurred in many programming languages because class declarations both define and implement an interface. Some languages, however, provide features that separate interface and implementation. For example, an abstract class can define an interface without providing implementation.","['class', 'implement', 'realize', 'interface', 'provide', 'structure', 'behavior', 'structure', 'consist', 'datum', 'state', 'behavior', 'consist', 'code', 'specify', 'method', 'implemented', 'distinction', 'definition', 'interface', 'implementation', 'interface', 'line', 'blur', 'programming', 'language', 'class', 'declaration', 'define', 'implement', 'interface', 'language', 'provide', 'feature', 'separate', 'interface', 'implementation', 'example', 'abstract', 'class', 'define', 'interface', 'provide', 'implementation']"
136,Languages that support class inheritance also allow classes to inherit interfaces from the classes that they are derived from.,"['language', 'support', 'class', 'inheritance', 'allow', 'class', 'inherit', 'interface', 'class', 'derive']"
137,"For example, if ""class A"" inherits from ""class B"" and if ""class B"" implements the interface ""interface B"" then ""class A"" also inherits the functionalityconstants and methods declaration provided by ""interface B"".","['example', 'class', 'inherit', 'class', 'class', 'implement', 'interface', 'interface', 'class', 'inherit', 'functionalityconstant', 'method', 'declaration', 'provide', 'interface']"
138,"In languages that support access specifiers, the interface of a class is considered to be the set of public members of the class, including both methods and attributes via implicit getter and setter methods; any private members or internal data structures are not intended to be depended on by external code and thus are not part of the interface.","['language', 'support', 'access', 'specifier', 'interface', 'class', 'consider', 'set', 'public', 'member', 'class', 'include', 'method', 'attribute', 'implicit', 'getter', 'setter', 'method', 'private', 'member', 'internal', 'datum', 'structure', 'intend', 'depend', 'external', 'code', 'interface']"
139,Object-oriented programming methodology dictates that the operations of any interface of a class are to be independent of each other. It results in a layered design where clients of an interface use the methods declared in the interface. An interface places no requirements for clients to invoke the operations of one interface in any particular order. This approach has the benefit that client code can assume that the operations of an interface are available for use whenever the client has access to the object.9citation needed,"['object', 'orient', 'programming', 'methodology', 'dictate', 'operation', 'interface', 'class', 'independent', 'result', 'layered', 'design', 'client', 'interface', 'use', 'method', 'declare', 'interface', 'interface', 'place', 'requirement', 'client', 'invoke', 'operation', 'interface', 'particular', 'order', 'approach', 'benefit', 'client', 'code', 'assume', 'operation', 'interface', 'available', 'use', 'client', 'access', 'objectcitation', 'need']"
140,"The buttons on the front of your television set are the interface between you and the electrical wiring on the other side of its plastic casing. You press the ""power"" button to toggle the television on and off. In this example, your particular television is the instance, each method is represented by a button, and all the buttons together compose the interface other television sets that are the same model as yours would have the same interface. In its most common form, an interface is a specification of a group of related methods without any associated implementation of the methods.","['button', 'television', 'set', 'interface', 'electrical', 'wiring', 'plastic', 'casing', 'press', 'power', 'button', 'toggle', 'television', 'example', 'particular', 'television', 'instance', 'method', 'represent', 'button', 'button', 'compose', 'interface', 'television', 'set', 'model', 'interface', 'common', 'form', 'interface', 'specification', 'group', 'related', 'method', 'associate', 'implementation', 'method']"
141,"A television set also has a myriad of attributes, such as size and whether it supports colour, which together comprise its structure. A class represents the full description of a television, including its attributes structure and buttons interface.","['television', 'set', 'myriad', 'attribute', 'size', 'support', 'colour', 'comprise', 'structure', 'class', 'represent', 'description', 'television', 'include', 'attribute', 'structure', 'button', 'interface']"
142,"Getting the total number of televisions manufactured could be a static method of the television class. This method is clearly associated with the class, yet is outside the domain of each individual instance of the class. A static method that finds a particular instance out of the set of all television objects is another example.","['get', 'total', 'number', 'television', 'manufacture', 'static', 'method', 'television', 'class', 'method', 'clearly', 'associate', 'class', 'outside', 'domain', 'individual', 'instance', 'class', 'static', 'method', 'find', 'particular', 'instance', 'set', 'television', 'object', 'example']"
143,The following is a common set of access specifiers:10,"['follow', 'common', 'set', 'access', 'specifiers']"
144,"Although many object-oriented languages support the above access specifiers, their semantics may differ.","['object', 'orient', 'language', 'support', 'access', 'specifier', 'semantic', 'differ']"
145,"Object-oriented design uses the access specifiers in conjunction with careful design of public method implementations to enforce class invariants—constraints on the state of the objects. A common usage of access specifiers is to separate the internal data of a class from its interface: the internal structure is made private, while public accessor methods can be used to inspect or alter such private data.","['object', 'orient', 'design', 'use', 'access', 'specifier', 'conjunction', 'careful', 'design', 'public', 'method', 'implementation', 'enforce', 'class', 'invariant', 'constraint', 'state', 'object', 'common', 'usage', 'access', 'specifier', 'separate', 'internal', 'datum', 'class', 'interface', 'internal', 'structure', 'private', 'public', 'accessor', 'method', 'inspect', 'alter', 'private', 'datum']"
146,"Access specifiers do not necessarily control visibility, in that even private members may be visible to client external code. In some languages, an inaccessible but visible member may be referred to at run-time for example, by a pointer returned from a member function, but an attempt to use it by referring to the name of the member from client code will be prevented by the type checker.11","['access', 'specifier', 'necessarily', 'control', 'visibility', 'private', 'member', 'visible', 'client', 'external', 'code', 'language', 'inaccessible', 'visible', 'member', 'refer', 'run', 'time', 'example', 'pointer', 'return', 'member', 'function', 'attempt', 'use', 'refer', 'member', 'client', 'code', 'prevent', 'type', 'checker']"
147,"The various object-oriented programming languages enforce member accessibility and visibility to various degrees, and depending on the language's type system and compilation policies, enforced at either compile-time or run-time. For example, the Java language does not allow client code that accesses the private data of a class to compile. 12 In the C++ language, private methods are visible, but not accessible in the interface; however, they may be made invisible by explicitly declaring fully abstract classes that represent the interfaces of the class.13","['object', 'orient', 'programming', 'language', 'enforce', 'member', 'accessibility', 'visibility', 'degree', 'depend', 'language', 'type', 'system', 'compilation', 'policy', 'enforce', 'compile', 'time', 'run', 'time', 'example', 'java', 'language', 'allow', 'client', 'code', 'access', 'private', 'datum', 'class', 'compile', 'c++', 'language', 'private', 'method', 'visible', 'accessible', 'interface', 'invisible', 'explicitly', 'declare', 'fully', 'abstract', 'class', 'represent', 'interface', 'class']"
148,Some languages feature other accessibility schemes:,"['language', 'feature', 'accessibility', 'scheme']"
149,"In addition to the design of standalone classes, programming languages may support more advanced class design based upon relationships between classes. The inter-class relationship design capabilities commonly provided are compositional and hierarchical.","['addition', 'design', 'standalone', 'class', 'programming', 'language', 'support', 'advanced', 'class', 'design', 'base', 'relationship', 'class', 'inter', 'class', 'relationship', 'design', 'capability', 'commonly', 'provide', 'compositional', 'hierarchical']"
150,"Classes can be composed of other classes, thereby establishing a compositional relationship between the enclosing class and its embedded classes. Compositional relationship between classes is also commonly known as a has-a relationship.16 For example, a class ""Car"" could be composed of and contain a class ""Engine"". Therefore, a Car has an Engine. One aspect of composition is containment, which is the enclosure of component instances by the instance that has them. If an enclosing object contains component instances by value, the components and their enclosing object have a similar lifetime. If the components are contained by reference, they may not have a similar lifetime.17 For example, in Objective-C 2.0:","['class', 'compose', 'class', 'establish', 'compositional', 'relationship', 'enclose', 'class', 'embed', 'class', 'compositional', 'relationship', 'class', 'commonly', 'know', 'relationship', 'example', 'class', 'car', 'compose', 'contain', 'class', 'engine', 'car', 'engine', 'aspect', 'composition', 'containment', 'enclosure', 'component', 'instance', 'instance', 'enclose', 'object', 'contain', 'component', 'instance', 'value', 'component', 'enclose', 'object', 'similar', 'lifetime', 'component', 'contain', 'reference', 'similar', 'lifetime', 'example', 'objective', '2']"
151,"This Car class has an instance of NSString a string object, Engine, and NSArray an array object.","['car', 'class', 'instance', 'nsstring', 'string', 'object', 'engine', 'nsarray', 'array', 'object']"
152,"Classes can be derived from one or more existing classes, thereby establishing a hierarchical relationship between the derived-from classes base classes, parent classes or .mw-parser-output .vanchor>:target~.vanchor-textbackground-color:#b1d2ffsuperclasses and the derived class child class or subclass . The relationship of the derived class to the derived-from classes is commonly known as an is-a relationship.18 For example, a class 'Button' could be derived from a class 'Control'. Therefore, a Button is a Control. Structural and behavioral members of the parent classes are inherited by the child class. Derived classes can define additional structural members data fields and behavioral members methods in addition to those that they inherit and are therefore specializations of their superclasses. Also, derived classes can override inherited methods if the language allows.","['class', 'derive', 'exist', 'class', 'establish', 'hierarchical', 'relationship', 'derive', 'class', 'base', 'class', 'parent', 'class', '.mw', 'parser', 'output', '.vanchor>:target~.vanchor', 'textbackground', 'color:#b1d2ffsuperclasse', 'derive', 'class', 'child', 'class', 'subclass', 'relationship', 'derive', 'class', 'derive', 'class', 'commonly', 'know', 'relationship', 'example', 'class', 'button', 'derive', 'class', 'control', 'button', 'control', 'structural', 'behavioral', 'member', 'parent', 'class', 'inherit', 'child', 'class', 'derive', 'class', 'define', 'additional', 'structural', 'member', 'datum', 'field', 'behavioral', 'member', 'method', 'addition', 'inherit', 'specialization', 'superclass', 'derive', 'class', 'override', 'inherit', 'method', 'language', 'allow']"
153,"Not all languages support multiple inheritance. For example, Java allows a class to implement multiple interfaces, but only inherit from one class.19 If multiple inheritance is allowed, the hierarchy is a directed acyclic graph or DAG for short, otherwise it is a tree. The hierarchy has classes as nodes and inheritance relationships as links. Classes in the same level are more likely to be associated than classes in different levels. The levels of this hierarchy are called layers or levels of abstraction.","['language', 'support', 'multiple', 'inheritance', 'example', 'java', 'allow', 'class', 'implement', 'multiple', 'interface', 'inherit', 'class', 'multiple', 'inheritance', 'allow', 'hierarchy', 'directed', 'acyclic', 'graph', 'dag', 'short', 'tree', 'hierarchy', 'class', 'node', 'inheritance', 'relationship', 'link', 'class', 'level', 'likely', 'associate', 'class', 'different', 'level', 'level', 'hierarchy', 'call', 'layer', 'level', 'abstraction']"
154,"Example Simplified Objective-C 2.0 code, from iPhone SDK:","['example', 'simplified', 'objective', '2', 'code', 'iphone', 'sdk']"
155,"In this example, a UITableView is a UIScrollView is a UIView is a UIResponder is an NSObject.","['example', 'uitableview', 'uiscrollview', 'uiview', 'uiresponder', 'nsobject']"
156,"Conceptually, a superclass is a superset of its subclasses. For example, a common class hierarchy would involve GraphicObject as a superclass of Rectangle and Ellipse, while Square would be a subclass of Rectangle. These are all subset relations in set theory as well, i.e., all squares are rectangles but not all rectangles are squares.","['conceptually', 'superclass', 'superset', 'subclass', 'example', 'common', 'class', 'hierarchy', 'involve', 'graphicobject', 'superclass', 'rectangle', 'ellipse', 'square', 'subclass', 'rectangle', 'subset', 'relation', 'set', 'theory', 'i.e.', 'square', 'rectangle', 'rectangle', 'square']"
157,"A common conceptual error is to mistake a part of relation with a subclass. For example, a car and truck are both kinds of vehicles and it would be appropriate to model them as subclasses of a vehicle class. However, it would be an error to model the component parts of the car as subclass relations. For example, a car is composed of an engine and body, but it would not be appropriate to model engine or body as a subclass of car.","['common', 'conceptual', 'error', 'mistake', 'relation', 'subclass', 'example', 'car', 'truck', 'kind', 'vehicle', 'appropriate', 'model', 'subclass', 'vehicle', 'class', 'error', 'model', 'component', 'part', 'car', 'subclass', 'relation', 'example', 'car', 'compose', 'engine', 'body', 'appropriate', 'model', 'engine', 'body', 'subclass', 'car']"
158,"In object-oriented modeling these kinds of relations are typically modeled as object properties. In this example, the Car class would have a property called parts. parts would be typed to hold a collection of objects, such as instances of Body, Engine, Tires, etc. Object modeling languages such as UML include capabilities to model various aspects of ""part of"" and other kinds of relations – data such as the cardinality of the objects, constraints on input and output values, etc. This information can be utilized by developer tools to generate additional code beside the basic data definitions for the objects, such as error checking on get and set methods.20","['object', 'orient', 'model', 'kind', 'relation', 'typically', 'model', 'object', 'property', 'example', 'car', 'class', 'property', 'call', 'part', 'part', 'type', 'hold', 'collection', 'object', 'instance', 'body', 'engine', 'tires', 'etc', 'object', 'modeling', 'language', 'uml', 'include', 'capability', 'model', 'aspect', 'kind', 'relation', 'datum', 'cardinality', 'object', 'constraint', 'input', 'output', 'value', 'etc', 'information', 'utilize', 'developer', 'tool', 'generate', 'additional', 'code', 'basic', 'datum', 'definition', 'object', 'error', 'checking', 'set', 'methods']"
159,"One important question when modeling and implementing a system of object classes is whether a class can have one or more superclasses. In the real world with actual sets it would be rare to find sets that didn't intersect with more than one other set. However, while some systems such as Flavors and CLOS provide a capability for more than one parent to do so at run time introduces complexity that many in the object-oriented community consider antithetical to the goals of using object classes in the first place. Understanding which class will be responsible for handling a message can get complex when dealing with more than one superclass. If used carelessly this feature can introduce some of the same system complexity and ambiguity classes were designed to avoid.21","['important', 'question', 'model', 'implement', 'system', 'object', 'class', 'class', 'superclass', 'real', 'world', 'actual', 'set', 'rare', 'find', 'set', 'intersect', 'set', 'system', 'flavors', 'clos', 'provide', 'capability', 'parent', 'run', 'time', 'introduce', 'complexity', 'object', 'orient', 'community', 'consider', 'antithetical', 'goal', 'object', 'class', 'place', 'understand', 'class', 'responsible', 'handle', 'message', 'complex', 'deal', 'superclass', 'carelessly', 'feature', 'introduce', 'system', 'complexity', 'ambiguity', 'class', 'design', 'avoid']"
160,"Most modern object-oriented languages such as Smalltalk and Java require single inheritance at run time. For these languages, multiple inheritance may be useful for modeling but not for an implementation.","['modern', 'object', 'orient', 'language', 'smalltalk', 'java', 'require', 'single', 'inheritance', 'run', 'time', 'language', 'multiple', 'inheritance', 'useful', 'modeling', 'implementation']"
161,"However, semantic web application objects do have multiple superclasses. The volatility of the Internet requires this level of flexibility and the technology standards such as the Web Ontology Language OWL are designed to support it.","['semantic', 'web', 'application', 'object', 'multiple', 'superclass', 'volatility', 'internet', 'require', 'level', 'flexibility', 'technology', 'standard', 'web', 'ontology', 'language', 'owl', 'design', 'support']"
162,"A similar issue is whether or not the class hierarchy can be modified at run time. Languages such as Flavors, CLOS, and Smalltalk all support this feature as part of their meta-object protocols. Since classes are themselves first-class objects, it is possible to have them dynamically alter their structure by sending them the appropriate messages. Other languages that focus more on strong typing such as Java and C++ do not allow the class hierarchy to be modified at run time. Semantic web objects have the capability for run time changes to classes. The rational is similar to the justification for allowing multiple superclasses, that the Internet is so dynamic and flexible that dynamic changes to the hierarchy are required to manage this volatility.22","['similar', 'issue', 'class', 'hierarchy', 'modify', 'run', 'time', 'language', 'flavors', 'clos', 'smalltalk', 'support', 'feature', 'meta', 'object', 'protocol', 'class', 'class', 'object', 'possible', 'dynamically', 'alter', 'structure', 'send', 'appropriate', 'message', 'language', 'focus', 'strong', 'typing', 'java', 'c++', 'allow', 'class', 'hierarchy', 'modify', 'run', 'time', 'semantic', 'web', 'object', 'capability', 'run', 'time', 'change', 'class', 'rational', 'similar', 'justification', 'allow', 'multiple', 'superclass', 'internet', 'dynamic', 'flexible', 'dynamic', 'change', 'hierarchy', 'require', 'manage', 'volatility']"
163,"Although class-based languages are commonly assumed to support inheritance, inheritance is not an intrinsic aspect of the concept of classes. Some languages, often referred to as ""object-based languages"", support classes yet do not support inheritance. Examples of object-based languages include earlier versions of Visual Basic.","['class', 'base', 'language', 'commonly', 'assume', 'support', 'inheritance', 'inheritance', 'intrinsic', 'aspect', 'concept', 'class', 'language', 'refer', 'object', 'base', 'language', 'support', 'class', 'support', 'inheritance', 'example', 'object', 'base', 'language', 'include', 'early', 'version', 'visual', 'basic']"
164,"In object-oriented analysis and in UML, an association between two classes represents a collaboration between the classes or their corresponding instances. Associations have direction; for example, a bi-directional association between two classes indicates that both of the classes are aware of their relationship.23 Associations may be labeled according to their name or purpose.24","['object', 'orient', 'analysis', 'uml', 'association', 'class', 'represent', 'collaboration', 'class', 'correspond', 'instance', 'association', 'direction', 'example', 'directional', 'association', 'class', 'indicate', 'class', 'aware', 'relationship', 'associations', 'label', 'accord', 'purpose']"
165,"An association role is given end of an association and describes the role of the corresponding class. For example, a ""subscriber"" role describes the way instances of the class ""Person"" participate in a ""subscribes-to"" association with the class ""Magazine"". Also, a ""Magazine"" has the ""subscribed magazine"" role in the same association. Association role multiplicity describes how many instances correspond to each instance of the other class of the association. Common multiplicities are ""0..1"", ""1..1"", ""1..*"" and ""0..*"", where the ""*"" specifies any number of instances.23","['association', 'role', 'give', 'end', 'association', 'describe', 'role', 'corresponding', 'class', 'example', 'subscriber', 'role', 'describe', 'way', 'instance', 'class', 'person', 'participate', 'subscribes', 'association', 'class', 'magazine', 'magazine', 'subscribe', 'magazine', 'role', 'association', 'association', 'role', 'multiplicity', 'describe', 'instance', 'correspond', 'instance', 'class', 'association', 'common', 'multiplicity', 'specify', 'number', 'instances']"
166,"There are many categories of classes, some of which overlap.","['category', 'class', 'overlap']"
167,"In a language that supports inheritance, an abstract class, or abstract base class ABC, is a class that cannot be instantiated because it is either labeled as abstract or it simply specifies abstract methods or virtual methods. An abstract class may provide implementations of some methods, and may also specify virtual methods via signatures that are to be implemented by direct or indirect descendants of the abstract class. Before a class derived from an abstract class can be instantiated, all abstract methods of its parent classes must be implemented by some class in the derivation chain.25","['language', 'support', 'inheritance', 'abstract', 'class', 'abstract', 'base', 'class', 'abc', 'class', 'instantiate', 'label', 'abstract', 'simply', 'specify', 'abstract', 'method', 'virtual', 'method', 'abstract', 'class', 'provide', 'implementation', 'method', 'specify', 'virtual', 'method', 'signature', 'implement', 'direct', 'indirect', 'descendant', 'abstract', 'class', 'class', 'derive', 'abstract', 'class', 'instantiate', 'abstract', 'method', 'parent', 'class', 'implement', 'class', 'derivation', 'chain']"
168,"Most object-oriented programming languages allow the programmer to specify which classes are considered abstract and will not allow these to be instantiated. For example, in Java, C# and PHP, the keyword abstract is used.2627 In C++, an abstract class is a class having at least one abstract method given by the appropriate syntax in that language a pure virtual function in C++ parlance.25","['object', 'orient', 'programming', 'language', 'allow', 'programmer', 'specify', 'class', 'consider', 'abstract', 'allow', 'instantiate', 'example', 'java', 'php', 'keyword', 'abstract', 'used', 'c++', 'abstract', 'class', 'class', 'have', 'abstract', 'method', 'give', 'appropriate', 'syntax', 'language', 'pure', 'virtual', 'function', 'c++', 'parlance']"
169,"A class consisting of only virtual methods is called a Pure Abstract Base Class or Pure ABC in C++ and is also known as an interface by users of the language.13 Other languages, notably Java and C#, support a variant of abstract classes called an interface via a keyword in the language. In these languages, multiple inheritance is not allowed, but a class can implement multiple interfaces. Such a class can only contain abstract publicly accessible methods.192829","['class', 'consist', 'virtual', 'method', 'call', 'pure', 'abstract', 'base', 'class', 'pure', 'abc', 'c++', 'know', 'interface', 'user', 'language', 'language', 'notably', 'java', 'support', 'variant', 'abstract', 'class', 'call', 'interface', 'keyword', 'language', 'language', 'multiple', 'inheritance', 'allow', 'class', 'implement', 'multiple', 'interface', 'class', 'contain', 'abstract', 'publicly', 'accessible', 'methods']"
170,"A concrete class is a class that can be instantiated, as opposed to abstract classes, which cannot.","['concrete', 'class', 'class', 'instantiate', 'oppose', 'abstract', 'class']"
171,"In some languages, classes can be declared in scopes other than the global scope. There are various types of such classes.","['language', 'class', 'declare', 'scope', 'global', 'scope', 'type', 'class']"
172,"An inner class is a class defined within another class. The relationship between an inner class and its containing class can also be treated as another type of class association. An inner class is typically neither associated with instances of the enclosing class nor instantiated along with its enclosing class. Depending on language, it may or may not be possible to refer to the class from outside the enclosing class. A related concept is inner types, also known as inner data type or nested type, which is a generalization of the concept of inner classes. C++ is an example of a language that supports both inner classes and inner types via typedef declarations.3031","['inner', 'class', 'class', 'define', 'class', 'relationship', 'inner', 'class', 'contain', 'class', 'treat', 'type', 'class', 'association', 'inner', 'class', 'typically', 'associate', 'instance', 'enclosing', 'class', 'instantiate', 'enclose', 'class', 'depend', 'language', 'possible', 'refer', 'class', 'outside', 'enclosing', 'class', 'related', 'concept', 'inner', 'type', 'know', 'inner', 'datum', 'type', 'nested', 'type', 'generalization', 'concept', 'inner', 'class', 'c++', 'example', 'language', 'support', 'inner', 'class', 'inner', 'type', 'typedef', 'declarations']"
173,"Another type is a local class, which is a class defined within a procedure or function. This limits references to the class name to within the scope where the class is declared. Depending on the semantic rules of the language, there may be additional restrictions on local classes compared to non-local ones. One common restriction is to disallow local class methods to access local variables of the enclosing function. For example, in C++, a local class may refer to static variables declared within its enclosing function, but may not access the function's automatic variables.32","['type', 'local', 'class', 'class', 'define', 'procedure', 'function', 'limit', 'reference', 'class', 'scope', 'class', 'declare', 'depend', 'semantic', 'rule', 'language', 'additional', 'restriction', 'local', 'class', 'compare', 'non', 'local', 'one', 'common', 'restriction', 'disallow', 'local', 'class', 'method', 'access', 'local', 'variable', 'enclosing', 'function', 'example', 'c++', 'local', 'class', 'refer', 'static', 'variable', 'declare', 'enclose', 'function', 'access', 'function', 'automatic', 'variables']"
174,Metaclasses are classes whose instances are classes.33 A metaclass describes a common structure of a collection of classes and can implement a design pattern or describe particular kinds of classes. Metaclasses are often used to describe frameworks.34,"['metaclasse', 'class', 'instance', 'classes', 'metaclass', 'describe', 'common', 'structure', 'collection', 'class', 'implement', 'design', 'pattern', 'describe', 'particular', 'kind', 'class', 'metaclasse', 'describe', 'frameworks']"
175,"In some languages, such as Python, Ruby or Smalltalk, a class is also an object; thus each class is an instance of a unique metaclass that is built into the language. 4 35 36 The Common Lisp Object System CLOS provides metaobject protocols MOPs to implement those classes and metaclasses. 37","['language', 'python', 'ruby', 'smalltalk', 'class', 'object', 'class', 'instance', 'unique', 'metaclass', 'build', 'language', 'common', 'lisp', 'object', 'system', 'clos', 'provide', 'metaobject', 'protocol', 'mop', 'implement', 'class', 'metaclasse']"
176,"Non-subclassable classes allow programmers to design classes and hierarchies of classes where at some level in the hierarchy, further derivation is prohibited a stand-alone class may be also designated as non-subclassable, preventing the formation of any hierarchy. Contrast this to abstract classes, which imply, encourage, and require derivation in order to be used at all. A non-subclassable class is implicitly concrete.","['non', 'subclassable', 'class', 'allow', 'programmer', 'design', 'class', 'hierarchy', 'class', 'level', 'hierarchy', 'derivation', 'prohibit', 'stand', 'class', 'designate', 'non', 'subclassable', 'prevent', 'formation', 'hierarchy', 'contrast', 'abstract', 'class', 'imply', 'encourage', 'require', 'derivation', 'order', 'non', 'subclassable', 'class', 'implicitly', 'concrete']"
177,"A non-subclassable class is created by declaring the class as sealed in C# or as final in Java or PHP.383940 For example, Java's String class is designated as final.41","['non', 'subclassable', 'class', 'create', 'declare', 'class', 'seal', 'final', 'java', 'php', 'example', 'java', 'string', 'class', 'designate', 'final']"
178,Non-subclassable classes may allow a compiler in compiled languages to perform optimizations that are not available for subclassable classes. 42,"['non', 'subclassable', 'class', 'allow', 'compiler', 'compile', 'language', 'perform', 'optimization', 'available', 'subclassable', 'class']"
179,"An open class is one that can be changed. Typically, an executable program cannot be changed by customers. Developers can often change some classes, but typically cannot change standard or built-in ones. In Ruby, all classes are open. In Python, classes can be created at runtime, and all can be modified afterwards.43 Objective-C categories permit the programmer to add methods to an existing class without the need to recompile that class or even have access to its source code.","['open', 'class', 'change', 'typically', 'executable', 'program', 'change', 'customer', 'developer', 'change', 'class', 'typically', 'change', 'standard', 'build', 'one', 'ruby', 'class', 'open', 'python', 'class', 'create', 'runtime', 'modify', 'afterwards', 'objective', 'category', 'permit', 'programmer', 'add', 'method', 'exist', 'class', 'need', 'recompile', 'class', 'access', 'source', 'code']"
180,"Some languages have special support for mixins, though in any language with multiple inheritance a mixin is simply a class that does not represent an is-a-type-of relationship. Mixins are typically used to add the same methods to multiple classes; for example, a class UnicodeConversionMixin might provide a method called unicode_to_ascii when included in classes FileReader and WebPageScraper that do not share a common parent.","['language', 'special', 'support', 'mixin', 'language', 'multiple', 'inheritance', 'mixin', 'simply', 'class', 'represent', 'type', 'relationship', 'mixin', 'typically', 'add', 'method', 'multiple', 'class', 'example', 'class', 'unicodeconversionmixin', 'provide', 'method', 'call', 'unicode_to_ascii', 'include', 'class', 'filereader', 'webpagescraper', 'share', 'common', 'parent']"
181,"In languages supporting the feature, a partial class is a class whose definition may be split into multiple pieces, within a single source-code file or across multiple files.44 The pieces are merged at compile-time, making compiler output the same as for a non-partial class.","['language', 'support', 'feature', 'partial', 'class', 'class', 'definition', 'split', 'multiple', 'piece', 'single', 'source', 'code', 'file', 'multiple', 'files', 'piece', 'merge', 'compile', 'time', 'make', 'compiler', 'output', 'non', 'partial', 'class']"
182,"The primary motivation for introduction of partial classes is to facilitate the implementation of code generators, such as visual designers.44 It is otherwise a challenge or compromise to develop code generators that can manage the generated code when it is interleaved within developer-written code. Using partial classes, a code generator can process a separate file or coarse-grained partial class within a file, and is thus alleviated from intricately interjecting generated code via extensive parsing, increasing compiler efficiency and eliminating the potential risk of corrupting developer code. In a simple implementation of partial classes, the compiler can perform a phase of precompilation where it ""unifies"" all the parts of a partial class. Then, compilation can proceed as usual.","['primary', 'motivation', 'introduction', 'partial', 'class', 'facilitate', 'implementation', 'code', 'generator', 'visual', 'designers', 'challenge', 'compromise', 'develop', 'code', 'generator', 'manage', 'generate', 'code', 'interleave', 'developer', 'write', 'code', 'partial', 'class', 'code', 'generator', 'process', 'separate', 'file', 'coarse', 'grain', 'partial', 'class', 'file', 'alleviate', 'intricately', 'interject', 'generate', 'code', 'extensive', 'parsing', 'increase', 'compiler', 'efficiency', 'eliminate', 'potential', 'risk', 'corrupt', 'developer', 'code', 'simple', 'implementation', 'partial', 'class', 'compiler', 'perform', 'phase', 'precompilation', 'unify', 'part', 'partial', 'class', 'compilation', 'proceed', 'usual']"
183,Other benefits and effects of the partial class feature include:,"['benefit', 'effect', 'partial', 'class', 'feature', 'include']"
184,"Partial classes have existed in Smalltalk under the name of Class Extensions for considerable time. With the arrival of the .NET framework 2, Microsoft introduced partial classes, supported in both C# 2.0 and Visual Basic 2005. WinRT also supports partial classes.","['partial', 'class', 'exist', 'smalltalk', 'class', 'extensions', 'considerable', 'time', 'arrival', '.net', 'framework', 'microsoft', 'introduce', 'partial', 'class', 'support', '2', 'visual', 'basic', '2005', 'winrt', 'support', 'partial', 'class']"
185,"This simple example, written in Visual Basic .NET, shows how parts of the same class are defined in two different files.","['simple', 'example', 'write', 'visual', 'basic', '.net', 'show', 'part', 'class', 'define', 'different', 'file']"
186,"When compiled, the result is the same as if the two files were written as one, like this:","['compile', 'result', 'file', 'write', 'like']"
187,"In Objective-C, partial classes, also known as categories, may even spread over multiple libraries and executables, like the following example. But a key difference is that Objective-C's categories can overwrite definitions in another interface declaration, and that categories aren't equal to original class definition the first requires the last.45 Instead, .NET partial class can't have conflicting definitions, and all partial definitions are equal to the others.44","['objective', 'partial', 'class', 'know', 'category', 'spread', 'multiple', 'library', 'executable', 'like', 'follow', 'example', 'key', 'difference', 'objective', 'category', 'overwrite', 'definition', 'interface', 'declaration', 'category', 'equal', 'original', 'class', 'definition', 'require', 'last', 'instead', '.net', 'partial', 'class', 'conflicting', 'definition', 'partial', 'definition', 'equal', 'others']"
188,"In user-supplied library, a separate binary from Foundation framework, header file NSData+base64.h:","['user', 'supply', 'library', 'separate', 'binary', 'foundation', 'framework', 'header', 'file', 'nsdata+base64.h']"
189,"And in an app, yet another separate binary file, source code file main.m:","['app', 'separate', 'binary', 'file', 'source', 'code', 'file', 'main.m']"
190,The dispatcher will find both methods called over the NSData instance and invoke both of them correctly.,"['dispatcher', 'find', 'method', 'call', 'nsdata', 'instance', 'invoke', 'correctly']"
191,"Uninstantiable classes allow programmers to group together per-class fields and methods that are accessible at runtime without an instance of the class. Indeed, instantiation is prohibited for this kind of class.","['uninstantiable', 'class', 'allow', 'programmer', 'group', 'class', 'field', 'method', 'accessible', 'runtime', 'instance', 'class', 'instantiation', 'prohibit', 'kind', 'class']"
192,"For example, in C#, a class marked ""static"" can not be instantiated, can only have static members fields, methods, other, may not have instance constructors, and is sealed. 46","['example', 'class', 'mark', 'static', 'instantiate', 'static', 'member', 'field', 'method', 'instance', 'constructor', 'seal']"
193,An unnamed class or anonymous class is a class that is not bound to a name or identifier upon definition.4748 This is analogous to named versus unnamed functions.,"['unnamed', 'class', 'anonymous', 'class', 'class', 'bind', 'identifi', 'definition', 'analogous', 'name', 'versus', 'unnamed', 'function']"
194,The benefits of organizing software into object classes fall into three categories:49,"['benefit', 'organize', 'software', 'object', 'class', 'fall', 'categories']"
195,"Object classes facilitate rapid development because they lessen the semantic gap between the code and the users. System analysts can talk to both developers and users using essentially the same vocabulary, talking about accounts, customers, bills, etc. Object classes often facilitate rapid development because most object-oriented environments come with powerful debugging and testing tools. Instances of classes can be inspected at run time to verify that the system is performing as expected. Also, rather than get dumps of core memory, most object-oriented environments have interpreted debugging capabilities so that the developer can analyze exactly where in the program the error occurred and can see which methods were called to which arguments and with what arguments.50","['object', 'class', 'facilitate', 'rapid', 'development', 'lessen', 'semantic', 'gap', 'code', 'user', 'system', 'analyst', 'talk', 'developer', 'user', 'essentially', 'vocabulary', 'talk', 'account', 'customer', 'bill', 'etc', 'object', 'class', 'facilitate', 'rapid', 'development', 'object', 'orient', 'environment', 'come', 'powerful', 'debug', 'testing', 'tool', 'instance', 'class', 'inspect', 'run', 'time', 'verify', 'system', 'perform', 'expect', 'dump', 'core', 'memory', 'object', 'orient', 'environment', 'interpret', 'debug', 'capability', 'developer', 'analyze', 'exactly', 'program', 'error', 'occur', 'method', 'call', 'argument', 'arguments']"
196,Object classes facilitate ease of maintenance via encapsulation. When developers need to change the behavior of an object they can localize the change to just that object and its component parts. This reduces the potential for unwanted side effects from maintenance enhancements.,"['object', 'class', 'facilitate', 'ease', 'maintenance', 'encapsulation', 'developer', 'need', 'change', 'behavior', 'object', 'localize', 'change', 'object', 'component', 'part', 'reduce', 'potential', 'unwanted', 'effect', 'maintenance', 'enhancement']"
197,Software re-use is also a major benefit of using Object classes. Classes facilitate re-use via inheritance and interfaces. When a new behavior is required it can often be achieved by creating a new class and having that class inherit the default behaviors and data of its superclass and then tailor some aspect of the behavior or data accordingly. Re-use via interfaces also known as methods occurs when another object wants to invoke rather than create a new kind of some object class. This method for re-use removes many of the common errors that can make their way into software when one program re-uses code from another.51,"['software', 'use', 'major', 'benefit', 'object', 'class', 'class', 'facilitate', 'use', 'inheritance', 'interface', 'new', 'behavior', 'require', 'achieve', 'create', 'new', 'class', 'have', 'class', 'inherit', 'default', 'behavior', 'datum', 'superclass', 'tailor', 'aspect', 'behavior', 'data', 'accordingly', 'use', 'interface', 'know', 'method', 'occur', 'object', 'want', 'invoke', 'create', 'new', 'kind', 'object', 'class', 'method', 'use', 'remove', 'common', 'error', 'way', 'software', 'program', 'use', 'code', 'another']"
198,"As a data type, a class is usually considered as a compile-time construct.52 A language or library may also support prototype or factory metaobjects that represent run-time information about classes, or even represent metadata that provides access to reflection facilities and ability to manipulate data structure formats at run-time. Many languages distinguish this kind of run-time type information about classes from a class on the basis that the information is not needed at run-time. Some dynamic languages do not make strict distinctions between run-time and compile-time constructs, and therefore may not distinguish between metaobjects and classes.","['data', 'type', 'class', 'usually', 'consider', 'compile', 'time', 'construct', 'language', 'library', 'support', 'prototype', 'factory', 'metaobject', 'represent', 'run', 'time', 'information', 'class', 'represent', 'metadata', 'provide', 'access', 'reflection', 'facility', 'ability', 'manipulate', 'data', 'structure', 'format', 'run', 'time', 'language', 'distinguish', 'kind', 'run', 'time', 'type', 'information', 'class', 'class', 'basis', 'information', 'need', 'run', 'time', 'dynamic', 'language', 'strict', 'distinction', 'run', 'time', 'compile', 'time', 'construct', 'distinguish', 'metaobject', 'class']"
199,"For example, if Human is a metaobject representing the class Person, then instances of class Person can be created by using the facilities of the Human metaobject.","['example', 'human', 'metaobject', 'represent', 'class', 'person', 'instance', 'class', 'person', 'create', 'facility', 'human', 'metaobject']"
200,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
201,"In object-oriented programming, inheritance is the mechanism of basing an object or class upon another object prototype-based inheritance or class class-based inheritance, retaining similar implementation. Also defined as deriving new classes sub classes from existing ones such as super class or base class and then forming them into a hierarchy of classes. In most class-based object-oriented languages, an object created through inheritance, a ""child object"", acquires all the properties and behaviors of the ""parent object"" , with the exception of: constructors, destructor, overloaded operators and friend functions of the base class. Inheritance allows programmers to create classes that are built upon existing classes,1 to specify a new implementation while maintaining the same behaviors realizing an interface, to reuse code and to independently extend original software via public classes and interfaces. The relationships of objects or classes through inheritance give rise to a directed acyclic graph.","['object', 'orient', 'programming', 'inheritance', 'mechanism', 'base', 'object', 'class', 'object', 'prototype', 'base', 'inheritance', 'class', 'class', 'base', 'inheritance', 'retain', 'similar', 'implementation', 'define', 'derive', 'new', 'class', 'sub', 'class', 'exist', 'one', 'super', 'class', 'base', 'class', 'form', 'hierarchy', 'class', 'class', 'base', 'object', 'orient', 'language', 'object', 'create', 'inheritance', 'child', 'object', 'acquire', 'property', 'behavior', 'parent', 'object', 'exception', 'constructor', 'destructor', 'overloaded', 'operator', 'friend', 'function', 'base', 'class', 'inheritance', 'allow', 'programmer', 'create', 'class', 'build', 'exist', 'classes', 'specify', 'new', 'implementation', 'maintain', 'behavior', 'realize', 'interface', 'reuse', 'code', 'independently', 'extend', 'original', 'software', 'public', 'class', 'interface', 'relationship', 'object', 'class', 'inheritance', 'rise', 'direct', 'acyclic', 'graph']"
202,"An inherited class is called a subclass of its parent class or super class. The term ""inheritance"" is loosely used for both class-based and prototype-based programming, but in narrow use the term is reserved for class-based programming one class inherits from another, with the corresponding technique in prototype-based programming being instead called delegation one object delegates to another. Class-modifying inheritance patterns can be pre-defined according to simple network interface parameters such that inter-language compatibility is preserved.23","['inherit', 'class', 'call', 'subclass', 'parent', 'class', 'super', 'class', 'term', 'inheritance', 'loosely', 'class', 'base', 'prototype', 'base', 'programming', 'narrow', 'use', 'term', 'reserve', 'class', 'base', 'programming', 'class', 'inherit', 'corresponding', 'technique', 'prototype', 'base', 'programming', 'instead', 'call', 'delegation', 'object', 'delegate', 'class', 'modifying', 'inheritance', 'pattern', 'pre', 'define', 'accord', 'simple', 'network', 'interface', 'parameter', 'inter', 'language', 'compatibility', 'preserved']"
203,"Inheritance should not be confused with subtyping.45 In some languages inheritance and subtyping agree,a whereas in others they differ; in general, subtyping establishes an is-a relationship, whereas inheritance only reuses implementation and establishes a syntactic relationship, not necessarily a semantic relationship inheritance does not ensure behavioral subtyping. To distinguish these concepts, subtyping is sometimes referred to as interface inheritance without acknowledging that the specialization of type variables also induces a subtyping relation, whereas inheritance as defined here is known as implementation inheritance or code inheritance.6 Still, inheritance is a commonly used mechanism for establishing subtype relationships.7","['inheritance', 'confuse', 'subtyping', 'language', 'inheritance', 'subtype', 'agree', 'differ', 'general', 'subtype', 'establishe', 'relationship', 'inheritance', 'reuse', 'implementation', 'establish', 'syntactic', 'relationship', 'necessarily', 'semantic', 'relationship', 'inheritance', 'ensure', 'behavioral', 'subtyping', 'distinguish', 'concept', 'subtype', 'refer', 'interface', 'inheritance', 'acknowledge', 'specialization', 'type', 'variable', 'induce', 'subtype', 'relation', 'inheritance', 'define', 'know', 'implementation', 'inheritance', 'code', 'inheritance', 'inheritance', 'commonly', 'mechanism', 'establish', 'subtype', 'relationships']"
204,"Inheritance is contrasted with object composition, where one object contains another object or objects of one class contain objects of another class; see composition over inheritance. Composition implements a has-a relationship, in contrast to the is-a relationship of subtyping.","['inheritance', 'contrast', 'object', 'composition', 'object', 'contain', 'object', 'object', 'class', 'contain', 'object', 'class', 'composition', 'inheritance', 'composition', 'implement', 'relationship', 'contrast', 'relationship', 'subtype']"
205,"In 1966, Tony Hoare presented some remarks on records, and in particular presented the idea of record subclasses, record types with common properties but discriminated by a variant tag and having fields private to the variant.8 Influenced by this, in 1967 Ole-Johan Dahl and Kristen Nygaard presented a design that allowed specifying objects that belonged to different classes but had common properties. The common properties were collected in a superclass, and each superclass could itself potentially have a superclass. The values of a subclass were thus compound objects, consisting of some number of prefix parts belonging to various superclasses, plus a main part belonging to the subclass. These parts were all concatenated together.9 The attributes of a compound object would be accessible by dot notation. This idea was first adopted in the Simula 67 programming language.10 The idea then spread to Smalltalk, C++, Java, Python, and many other languages.","['1966', 'tony', 'hoare', 'present', 'remark', 'record', 'particular', 'present', 'idea', 'record', 'subclass', 'record', 'type', 'common', 'property', 'discriminate', 'variant', 'tag', 'have', 'field', 'private', 'variant', 'influence', '1967', 'ole', 'johan', 'dahl', 'kristen', 'nygaard', 'present', 'design', 'allow', 'specify', 'object', 'belong', 'different', 'class', 'common', 'property', 'common', 'property', 'collect', 'superclass', 'superclass', 'potentially', 'superclass', 'value', 'subclass', 'compound', 'object', 'consist', 'number', 'prefix', 'part', 'belong', 'superclass', 'plus', 'main', 'belong', 'subclass', 'part', 'concatenate', 'together', 'attribute', 'compound', 'object', 'accessible', 'dot', 'notation', 'idea', 'adopt', 'simula', 'programming', 'language', 'idea', 'spread', 'smalltalk', 'c++', 'java', 'python', 'language']"
206,"There are various types of inheritance, based on paradigm and specific language.11","['type', 'inheritance', 'base', 'paradigm', 'specific', 'language']"
207,"""Multiple inheritance ... was widely supposed to be very difficult to implement efficiently. For example, in a summary of C++ in his book on Objective C, Brad Cox actually claimed that adding multiple inheritance to C++ was impossible. Thus, multiple inheritance seemed more of a challenge. Since I had considered multiple inheritance as early as 1982 and found a simple and efficient implementation technique in 1984, I couldn't resist the challenge. I suspect this to be the only case in which fashion affected the sequence of events.""12","['multiple', 'inheritance', 'widely', 'suppose', 'difficult', 'implement', 'efficiently', 'example', 'summary', 'c++', 'book', 'objective', 'brad', 'cox', 'actually', 'claim', 'add', 'multiple', 'inheritance', 'c++', 'impossible', 'multiple', 'inheritance', 'challenge', 'consider', 'multiple', 'inheritance', 'early', '1982', 'find', 'simple', 'efficient', 'implementation', 'technique', '1984', 'resist', 'challenge', 'suspect', 'case', 'fashion', 'affect', 'sequence', 'event', '12']"
208,"Subclasses, derived classes, heir classes, or child classes are modular derivative classes that inherits one or more language entities from one or more other classes called superclass, base classes, or parent classes. The semantics of class inheritance vary from language to language, but commonly the subclass automatically inherits the instance variables and member functions of its superclasses.","['subclass', 'derive', 'class', 'heir', 'class', 'child', 'class', 'modular', 'derivative', 'class', 'inherit', 'language', 'entity', 'class', 'call', 'superclass', 'base', 'class', 'parent', 'class', 'semantic', 'class', 'inheritance', 'vary', 'language', 'language', 'commonly', 'subclass', 'automatically', 'inherit', 'instance', 'variable', 'member', 'function', 'superclass']"
209,The general form of defining a derived class is:13,"['general', 'form', 'define', 'derive', 'class', 'is']"
210,"Some languages support also the inheritance of other constructs. For example, in Eiffel, contracts that define the specification of a class are also inherited by heirs. The superclass establishes a common interface and foundational functionality, which specialized subclasses can inherit, modify, and supplement. The software inherited by a subclass is considered reused in the subclass. A reference to an instance of a class may actually be referring to one of its subclasses. The actual class of the object being referenced is impossible to predict at compile-time. A uniform interface is used to invoke the member functions of objects of a number of different classes. Subclasses may replace superclass functions with entirely new functions that must share the same method signature.","['language', 'support', 'inheritance', 'construct', 'example', 'eiffel', 'contract', 'define', 'specification', 'class', 'inherit', 'heir', 'superclass', 'establish', 'common', 'interface', 'foundational', 'functionality', 'specialized', 'subclass', 'inherit', 'modify', 'supplement', 'software', 'inherit', 'subclass', 'consider', 'reuse', 'subclass', 'reference', 'instance', 'class', 'actually', 'refer', 'subclass', 'actual', 'class', 'object', 'reference', 'impossible', 'predict', 'compile', 'time', 'uniform', 'interface', 'invoke', 'member', 'function', 'object', 'number', 'different', 'class', 'subclass', 'replace', 'superclass', 'function', 'entirely', 'new', 'function', 'share', 'method', 'signature']"
211,"In some languages a class may be declared as non-subclassable by adding certain class modifiers to the class declaration. Examples include the final keyword in Java and C++11 onwards or the sealed keyword in C#. Such modifiers are added to the class declaration before the class keyword and the class identifier declaration. Such non-subclassable classes restrict reusability, particularly when developers only have access to precompiled binaries and not source code.","['language', 'class', 'declare', 'non', 'subclassable', 'add', 'certain', 'class', 'modifier', 'class', 'declaration', 'example', 'include', 'final', 'keyword', 'java', 'c++11', 'onwards', 'seal', 'keyword', 'modifier', 'add', 'class', 'declaration', 'class', 'keyword', 'class', 'identifi', 'declaration', 'non', 'subclassable', 'class', 'restrict', 'reusability', 'particularly', 'developer', 'access', 'precompile', 'binary', 'source', 'code']"
212,"A non-subclassable class has no subclasses, so it can be easily deduced at compile time that references or pointers to objects of that class are actually referencing instances of that class and not instances of subclasses they don't exist or instances of superclasses upcasting a reference type violates the type system. Because the exact type of the object being referenced is known before execution, early binding also called static dispatch can be used instead of late binding also called dynamic dispatch, which requires one or more virtual method table lookups depending on whether multiple inheritance or only single inheritance are supported in the programming language that is being used.","['non', 'subclassable', 'class', 'subclass', 'easily', 'deduce', 'compile', 'time', 'reference', 'pointer', 'object', 'class', 'actually', 'reference', 'instance', 'class', 'instance', 'subclass', 'exist', 'instance', 'superclass', 'upcaste', 'reference', 'type', 'violate', 'type', 'system', 'exact', 'type', 'object', 'reference', 'know', 'execution', 'early', 'bind', 'call', 'static', 'dispatch', 'instead', 'late', 'binding', 'call', 'dynamic', 'dispatch', 'require', 'virtual', 'method', 'table', 'lookup', 'depend', 'multiple', 'inheritance', 'single', 'inheritance', 'support', 'programming', 'language']"
213,"Just as classes may be non-subclassable, method declarations may contain method modifiers that prevent the method from being overridden i.e. replaced with a new function with the same name and type signature in a subclass. A private method is un-overridable simply because it is not accessible by classes other than the class it is a member function of this is not true for C++, though. A final method in Java, a sealed method in C# or a frozen feature in Eiffel cannot be overridden.","['class', 'non', 'subclassable', 'method', 'declaration', 'contain', 'method', 'modifier', 'prevent', 'method', 'overridden', 'i.e.', 'replace', 'new', 'function', 'type', 'signature', 'subclass', 'private', 'method', 'overridable', 'simply', 'accessible', 'class', 'class', 'member', 'function', 'true', 'c++', 'final', 'method', 'java', 'seal', 'method', 'frozen', 'feature', 'eiffel', 'overridden']"
214,"If the superclass method is a virtual method, then invocations of the superclass method will be dynamically dispatched. Some languages require that methods be specifically declared as virtual e.g. C++, and in others, all methods are virtual e.g. Java. An invocation of a non-virtual method will always be statically dispatched i.e. the address of the function call is determined at compile-time. Static dispatch is faster than dynamic dispatch and allows optimizations such as inline expansion.","['superclass', 'method', 'virtual', 'method', 'invocation', 'superclass', 'method', 'dynamically', 'dispatch', 'language', 'require', 'method', 'specifically', 'declare', 'virtual', 'e.g.', 'c++', 'method', 'virtual', 'e.g.', 'java', 'invocation', 'non', 'virtual', 'method', 'statically', 'dispatch', 'i.e.', 'address', 'function', 'determine', 'compile', 'time', 'static', 'dispatch', 'fast', 'dynamic', 'dispatch', 'allow', 'optimization', 'inline', 'expansion']"
215,"The following table shows which variables and functions get inherited dependent on the visibility given when deriving the class, using the terminology established by C++.14","['following', 'table', 'show', 'variable', 'function', 'inherit', 'dependent', 'visibility', 'give', 'derive', 'class', 'terminology', 'establish', 'c++']"
216,Inheritance is used to co-relate two or more classes to each other.,"['inheritance', 'relate', 'class']"
217,"Many object-oriented programming languages permit a class or object to replace the implementation of an aspect—typically a behavior—that it has inherited. This process is called overriding. Overriding introduces a complication: which version of the behavior does an instance of the inherited class use—the one that is part of its own class, or the one from the parent base class? The answer varies between programming languages, and some languages provide the ability to indicate that a particular behavior is not to be overridden and should behave as defined by the base class. For instance, in C#, the base method or property can only be overridden in a subclass if it is marked with the virtual, abstract, or override modifier, while in programming languages such as Java, different methods can be called to override other methods.15 An alternative to overriding is hiding the inherited code.","['object', 'orient', 'programming', 'language', 'permit', 'class', 'object', 'replace', 'implementation', 'aspect', 'typically', 'behavior', 'inherit', 'process', 'call', 'overriding', 'override', 'introduce', 'complication', 'version', 'behavior', 'instance', 'inherit', 'class', 'use', 'class', 'parent', 'base', 'class', 'answer', 'vary', 'programming', 'language', 'language', 'provide', 'ability', 'indicate', 'particular', 'behavior', 'overridden', 'behave', 'define', 'base', 'class', 'instance', 'base', 'method', 'property', 'overridden', 'subclass', 'mark', 'virtual', 'abstract', 'override', 'modifier', 'programming', 'language', 'java', 'different', 'method', 'call', 'override', 'methods', 'alternative', 'override', 'hide', 'inherit', 'code']"
218,"Implementation inheritance is the mechanism whereby a subclass re-uses code in a base class. By default the subclass retains all of the operations of the base class, but the subclass may override some or all operations, replacing the base-class implementation with its own.","['implementation', 'inheritance', 'mechanism', 'subclass', 'use', 'code', 'base', 'class', 'default', 'subclass', 'retain', 'operation', 'base', 'class', 'subclass', 'override', 'operation', 'replace', 'base', 'class', 'implementation']"
219,"In the following Python example, subclasses .mw-parser-output .monospacedfont-family:monospace,monospaceSquareSumComputer and CubeSumComputer override the transform method of the base class SumComputer. The base class comprises operations to compute the sum of the squares between two integers. The subclass re-uses all of the functionality of the base class with the exception of the operation that transforms a number into its square, replacing it with an operation that transforms a number into its square and cube respectively. The subclasses therefore compute the sum of the squares/cubes between two integers.","['follow', 'python', 'example', 'subclasse', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacesquaresumcomputer', 'cubesumcomputer', 'override', 'transform', 'method', 'base', 'class', 'sumcomputer', 'base', 'class', 'comprise', 'operation', 'compute', 'sum', 'square', 'integer', 'subclass', 'use', 'functionality', 'base', 'class', 'exception', 'operation', 'transform', 'number', 'square', 'replace', 'operation', 'transform', 'number', 'square', 'cube', 'respectively', 'subclass', 'compute', 'sum', 'square', 'cube', 'integer']"
220,Below is an example of Python.,"['example', 'python']"
221,"In most quarters, class inheritance for the sole purpose of code reuse has fallen out of favor.citation needed The primary concern is that implementation inheritance does not provide any assurance of polymorphic substitutability—an instance of the reusing class cannot necessarily be substituted for an instance of the inherited class. An alternative technique, explicit delegation, requires more programming effort, but avoids the substitutability issue.citation needed In C++ private inheritance can be used as a form of implementation inheritance without substitutability. Whereas public inheritance represents an ""is-a"" relationship and delegation represents a ""has-a"" relationship, private and protected inheritance can be thought of as an ""is implemented in terms of"" relationship.16","['quarter', 'class', 'inheritance', 'sole', 'purpose', 'code', 'reuse', 'fall', 'favor.citation', 'need', 'primary', 'concern', 'implementation', 'inheritance', 'provide', 'assurance', 'polymorphic', 'substitutability', 'instance', 'reuse', 'class', 'necessarily', 'substitute', 'instance', 'inherit', 'class', 'alternative', 'technique', 'explicit', 'delegation', 'require', 'programming', 'effort', 'avoid', 'substitutability', 'issue.citation', 'need', 'c++', 'private', 'inheritance', 'form', 'implementation', 'inheritance', 'substitutability', 'public', 'inheritance', 'represent', 'relationship', 'delegation', 'represent', 'relationship', 'private', 'protect', 'inheritance', 'think', 'implement', 'term', 'relationship']"
222,"Another frequent use of inheritance is to guarantee that classes maintain a certain common interface; that is, they implement the same methods. The parent class can be a combination of implemented operations and operations that are to be implemented in the child classes. Often, there is no interface change between the supertype and subtype- the child implements the behavior described instead of its parent class.17","['frequent', 'use', 'inheritance', 'guarantee', 'class', 'maintain', 'certain', 'common', 'interface', 'implement', 'method', 'parent', 'class', 'combination', 'implement', 'operation', 'operation', 'implement', 'child', 'class', 'interface', 'change', 'supertype', 'subtype-', 'child', 'implement', 'behavior', 'describe', 'instead', 'parent', 'class']"
223,"Inheritance is similar to but distinct from subtyping.4 Subtyping enables a given type to be substituted for another type or abstraction, and is said to establish an is-a relationship between the subtype and some existing abstraction, either implicitly or explicitly, depending on language support. The relationship can be expressed explicitly via inheritance in languages that support inheritance as a subtyping mechanism. For example, the following C++ code establishes an explicit inheritance relationship between classes B and A, where B is both a subclass and a subtype of A, and can be used as an A wherever a B is specified via a reference, a pointer or the object itself.","['inheritance', 'similar', 'distinct', 'subtyping', 'subtype', 'enable', 'give', 'type', 'substitute', 'type', 'abstraction', 'say', 'establish', 'relationship', 'subtype', 'exist', 'abstraction', 'implicitly', 'explicitly', 'depend', 'language', 'support', 'relationship', 'express', 'explicitly', 'inheritance', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'example', 'following', 'c++', 'code', 'establish', 'explicit', 'inheritance', 'relationship', 'class', 'subclass', 'subtype', 'specify', 'reference', 'pointer', 'object']"
224,"In programming languages that do not support inheritance as a subtyping mechanism, the relationship between a base class and a derived class is only a relationship between implementations a mechanism for code reuse, as compared to a relationship between types. Inheritance, even in programming languages that support inheritance as a subtyping mechanism, does not necessarily entail behavioral subtyping. It is entirely possible to derive a class whose object will behave incorrectly when used in a context where the parent class is expected; see the Liskov substitution principle. 18 Compare connotation/denotation. In some OOP languages, the notions of code reuse and subtyping coincide because the only way to declare a subtype is to define a new class that inherits the implementation of another.","['programming', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'relationship', 'base', 'class', 'derive', 'class', 'relationship', 'implementation', 'mechanism', 'code', 'reuse', 'compare', 'relationship', 'type', 'inheritance', 'programming', 'language', 'support', 'inheritance', 'subtyping', 'mechanism', 'necessarily', 'entail', 'behavioral', 'subtyping', 'entirely', 'possible', 'derive', 'class', 'object', 'behave', 'incorrectly', 'context', 'parent', 'class', 'expect', 'liskov', 'substitution', 'principle', 'compare', 'connotation', 'denotation', 'oop', 'language', 'notion', 'code', 'reuse', 'subtype', 'coincide', 'way', 'declare', 'subtype', 'define', 'new', 'class', 'inherit', 'implementation']"
225,Using inheritance extensively in designing a program imposes certain constraints.,"['inheritance', 'extensively', 'design', 'program', 'impose', 'certain', 'constraint']"
226,"For example, consider a class Person that contains a person's name, date of birth, address and phone number. We can define a subclass of Person called Student that contains the person's grade point average and classes taken, and another subclass of Person called Employee that contains the person's job-title, employer, and salary.","['example', 'consider', 'class', 'person', 'contain', 'person', 'date', 'birth', 'address', 'phone', 'number', 'define', 'subclass', 'person', 'call', 'student', 'contain', 'person', 'grade', 'point', 'average', 'class', 'take', 'subclass', 'person', 'call', 'employee', 'contain', 'person', 'job', 'title', 'employer', 'salary']"
227,"In defining this inheritance hierarchy we have already defined certain restrictions, not all of which are desirable:","['define', 'inheritance', 'hierarchy', 'define', 'certain', 'restriction', 'desirable']"
228,"The composite reuse principle is an alternative to inheritance. This technique supports polymorphism and code reuse by separating behaviors from the primary class hierarchy and including specific behavior classes as required in any business domain class. This approach avoids the static nature of a class hierarchy by allowing behavior modifications at run time and allows one class to implement behaviors buffet-style, instead of being restricted to the behaviors of its ancestor classes.","['composite', 'reuse', 'principle', 'alternative', 'inheritance', 'technique', 'support', 'polymorphism', 'code', 'reuse', 'separate', 'behavior', 'primary', 'class', 'hierarchy', 'include', 'specific', 'behavior', 'class', 'require', 'business', 'domain', 'class', 'approach', 'avoid', 'static', 'nature', 'class', 'hierarchy', 'allow', 'behavior', 'modification', 'run', 'time', 'allow', 'class', 'implement', 'behavior', 'buffet', 'style', 'instead', 'restrict', 'behavior', 'ancestor', 'class']"
229,"Implementation inheritance is controversial among programmers and theoreticians of object-oriented programming since at least the 1990s. Among them are the authors of Design Patterns, who advocate interface inheritance instead, and favor composition over inheritance. For example, the decorator pattern as mentioned above has been proposed to overcome the static nature of inheritance between classes. As a more fundamental solution to the same problem, role-oriented programming introduces a distinct relationship, played-by, combining properties of inheritance and composition into a new concept.citation needed","['implementation', 'inheritance', 'controversial', 'programmer', 'theoretician', 'object', 'orient', 'programming', '1990s', 'author', 'design', 'patterns', 'advocate', 'interface', 'inheritance', 'instead', 'favor', 'composition', 'inheritance', 'example', 'decorator', 'pattern', 'mention', 'propose', 'overcome', 'static', 'nature', 'inheritance', 'class', 'fundamental', 'solution', 'problem', 'role', 'orient', 'programming', 'introduce', 'distinct', 'relationship', 'play', 'combine', 'property', 'inheritance', 'composition', 'new', 'concept.citation', 'need']"
230,"According to Allen Holub, the main problem with implementation inheritance is that it introduces unnecessary coupling in the form of the ""fragile base class problem"":6 modifications to the base class implementation can cause inadvertent behavioral changes in subclasses. Using interfaces avoids this problem because no implementation is shared, only the API.19 Another way of stating this is that ""inheritance breaks encapsulation"".20 The problem surfaces clearly in open object-oriented systems such as frameworks, where client code is expected to inherit from system-supplied classes and then substituted for the system's classes in its algorithms.6","['accord', 'allen', 'holub', 'main', 'problem', 'implementation', 'inheritance', 'introduce', 'unnecessary', 'coupling', 'form', 'fragile', 'base', 'class', 'problem', 'modification', 'base', 'class', 'implementation', 'cause', 'inadvertent', 'behavioral', 'change', 'subclass', 'interface', 'avoid', 'problem', 'implementation', 'share', 'api', 'way', 'state', 'inheritance', 'break', 'encapsulation', 'problem', 'surface', 'clearly', 'open', 'object', 'orient', 'system', 'framework', 'client', 'code', 'expect', 'inherit', 'system', 'supply', 'class', 'substitute', 'system', 'class', 'algorithms']"
231,"Reportedly, Java inventor James Gosling has spoken against implementation inheritance, stating that he would not include it if he were to redesign Java.19 Language designs that decouple inheritance from subtyping interface inheritance appeared as early as 1990;21 a modern example of this is the Go programming language.","['reportedly', 'java', 'inventor', 'james', 'gosling', 'speak', 'implementation', 'inheritance', 'state', 'include', 'redesign', 'java', 'language', 'design', 'decouple', 'inheritance', 'subtype', 'interface', 'inheritance', 'appear', 'early', '1990', 'modern', 'example', 'programming', 'language']"
232,"Complex inheritance, or inheritance used within an insufficiently mature design, may lead to the yo-yo problem. When inheritance was used as a primary approach to structure programs in the late 1990s, developers tended to break code into more layers of inheritance as the system functionality grew. If a development team combined multiple layers of inheritance with the single responsibility principle, this resulted in many very thin layers of code, with many layers consisting of only 1 or 2 lines of actual code.citation needed Too many layers make debugging a significant challenge, as it becomes hard to determine which layer needs to be debugged.","['complex', 'inheritance', 'inheritance', 'insufficiently', 'mature', 'design', 'lead', 'problem', 'inheritance', 'primary', 'approach', 'structure', 'program', 'late', '1990', 'developer', 'tend', 'break', 'code', 'layer', 'inheritance', 'system', 'functionality', 'grow', 'development', 'team', 'combine', 'multiple', 'layer', 'inheritance', 'single', 'responsibility', 'principle', 'result', 'thin', 'layer', 'code', 'layer', 'consist', 'line', 'actual', 'code.citation', 'need', 'layer', 'debug', 'significant', 'challenge', 'hard', 'determine', 'layer', 'need', 'debug']"
233,"Another issue with inheritance is that subclasses must be defined in code, which means that program users cannot add new subclasses at runtime. Other design patterns such as Entity–component–system allow program users to define variations of an entity at runtime.","['issue', 'inheritance', 'subclass', 'define', 'code', 'mean', 'program', 'user', 'add', 'new', 'subclass', 'runtime', 'design', 'pattern', 'entity', 'component', 'system', 'allow', 'program', 'user', 'define', 'variation', 'entity', 'runtime']"
234,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
235,"In computer science, an object can be a variable, a data structure, a function, or a method. As regions of memory, they contain value and are referenced by identifiers.","['computer', 'science', 'object', 'variable', 'data', 'structure', 'function', 'method', 'region', 'memory', 'contain', 'value', 'reference', 'identifier']"
236,"In the object-oriented programming paradigm, object can be a combination of variables, functions, and data structures; in particular in class-based variations of the paradigm it refers to a particular instance of a class.","['object', 'orient', 'programming', 'paradigm', 'object', 'combination', 'variable', 'function', 'data', 'structure', 'particular', 'class', 'base', 'variation', 'paradigm', 'refer', 'particular', 'instance', 'class']"
237,"In the relational model of database management, an object can be a table or column, or an association between data and a database entity such as relating a person's age to a specific person.1","['relational', 'model', 'database', 'management', 'object', 'table', 'column', 'association', 'datum', 'database', 'entity', 'relate', 'person', 'age', 'specific', 'person']"
238,"An important distinction in programming languages is the difference between an object-oriented language and an object-based language. A language is usually considered object-based if it includes the basic capabilities for an object: identity, properties, and attributes. A language is considered object-oriented if it is object-based and also has the capability of polymorphism, inheritance, encapsulation, and, possibly, composition. Polymorphism refers to the ability to overload the name of a function with multiple behaviors based on which objects are passed to it. Conventional message passing discriminates only on the first object and considers that to be ""sending a message"" to that object. However, some object-oriented programming languages such as Flavors and the Common Lisp Object System CLOS enable discriminating on more than the first parameter of the function.2 Inheritance is the ability to subclass an object class, to create a new class that is a subclass of an existing one and inherits all the data constraints and behaviors of its parents but also adds new and/or changes one or more of them.34","['important', 'distinction', 'programming', 'language', 'difference', 'object', 'orient', 'language', 'object', 'base', 'language', 'language', 'usually', 'consider', 'object', 'base', 'include', 'basic', 'capability', 'object', 'identity', 'property', 'attribute', 'language', 'consider', 'object', 'orient', 'object', 'base', 'capability', 'polymorphism', 'inheritance', 'encapsulation', 'possibly', 'composition', 'polymorphism', 'refer', 'ability', 'overload', 'function', 'multiple', 'behavior', 'base', 'object', 'pass', 'conventional', 'message', 'pass', 'discriminate', 'object', 'consider', 'send', 'message', 'object', 'object', 'orient', 'programming', 'language', 'flavor', 'common', 'lisp', 'object', 'system', 'clos', 'enable', 'discriminate', 'parameter', 'function', 'inheritance', 'ability', 'subclass', 'object', 'class', 'create', 'new', 'class', 'subclass', 'exist', 'inherit', 'datum', 'constraint', 'behavior', 'parent', 'add', 'new', 'change', 'them']"
239,Object-oriented programming is an approach to designing modular reusable software systems. The object-oriented approach is an evolution of good design practices that go back to the very beginning of computer programming. Object-orientation is simply the logical extension of older techniques such as structured programming and abstract data types. An object is an abstract data type with the addition of polymorphism and inheritance.,"['object', 'orient', 'programming', 'approach', 'design', 'modular', 'reusable', 'software', 'system', 'object', 'orient', 'approach', 'evolution', 'good', 'design', 'practice', 'beginning', 'computer', 'programming', 'object', 'orientation', 'simply', 'logical', 'extension', 'old', 'technique', 'structured', 'programming', 'abstract', 'data', 'type', 'object', 'abstract', 'data', 'type', 'addition', 'polymorphism', 'inheritance']"
240,"Rather than structure programs as code and data, an object-oriented system integrates the two using the concept of an ""object"". An object has state data and behavior code. Objects can correspond to things found in the real world. So for example, a graphics program will have objects such as circle, square, menu. An online shopping system will have objects such as shopping cart, customer, product. The shopping system will support behaviors such as place order, make payment, and offer discount. The objects are designed as class hierarchies. So for example with the shopping system there might be high level classes such as electronics product, kitchen product, and book. There may be further refinements for example under electronic products: CD Player, DVD player, etc. These classes and subclasses correspond to sets and subsets in mathematical logic.56","['structure', 'program', 'code', 'datum', 'object', 'orient', 'system', 'integrate', 'concept', 'object', 'object', 'state', 'datum', 'behavior', 'code', 'object', 'correspond', 'thing', 'find', 'real', 'world', 'example', 'graphic', 'program', 'object', 'circle', 'square', 'menu', 'online', 'shopping', 'system', 'object', 'shopping', 'cart', 'customer', 'product', 'shopping', 'system', 'support', 'behavior', 'place', 'order', 'payment', 'offer', 'discount', 'object', 'design', 'class', 'hierarchy', 'example', 'shopping', 'system', 'high', 'level', 'class', 'electronic', 'product', 'kitchen', 'product', 'book', 'refinement', 'example', 'electronic', 'product', 'player', 'dvd', 'player', 'etc', 'class', 'subclass', 'correspond', 'set', 'subset', 'mathematical', 'logic']"
241,An important concept for objects is the design pattern. A design pattern provides a reusable template to address a common problem. The following object descriptions are examples of some of the most common design patterns for objects.7,"['important', 'concept', 'object', 'design', 'pattern', 'design', 'pattern', 'provide', 'reusable', 'template', 'address', 'common', 'problem', 'follow', 'object', 'description', 'example', 'common', 'design', 'pattern', 'objects']"
242,"The object-oriented approach is not just a programming model. It can be used equally well as an interface definition language for distributed systems. The objects in a distributed computing model tend to be larger grained, longer lasting, and more service-oriented than programming objects.","['object', 'orient', 'approach', 'programming', 'model', 'equally', 'interface', 'definition', 'language', 'distribute', 'system', 'object', 'distribute', 'computing', 'model', 'tend', 'large', 'grain', 'long', 'last', 'service', 'orient', 'programming', 'object']"
243,"A standard method to package distributed objects is via an Interface Definition Language IDL. An IDL shields the client of all of the details of the distributed server object. Details such as which computer the object resides on, what programming language it uses, what operating system, and other platform-specific issues. The IDL is also usually part of a distributed environment that provides services such as transactions and persistence to all objects in a uniform manner. Two of the most popular standards for distributed objects are the Object Management Group's CORBA standard and Microsoft's DCOM.8","['standard', 'method', 'package', 'distribute', 'object', 'interface', 'definition', 'language', 'idl', 'idl', 'shield', 'client', 'detail', 'distribute', 'server', 'object', 'detail', 'computer', 'object', 'reside', 'programming', 'language', 'use', 'operating', 'system', 'platform', 'specific', 'issue', 'idl', 'usually', 'distribute', 'environment', 'provide', 'service', 'transaction', 'persistence', 'object', 'uniform', 'manner', 'popular', 'standard', 'distribute', 'object', 'object', 'management', 'group', 'corba', 'standard', 'microsoft', 'dcom']"
244,"In addition to distributed objects, a number of other extensions to the basic concept of an object have been proposed to enable distributed computing:","['addition', 'distribute', 'object', 'number', 'extension', 'basic', 'concept', 'object', 'propose', 'enable', 'distribute', 'computing']"
245,"Some of these extensions, such as distributed objects and protocol objects, are domain-specific terms for special types of ""ordinary"" objects used in a certain context such as remote method invocation or protocol composition. Others, such as replicated objects and live distributed objects, are more non-standard, in that they abandon the usual case that an object resides in a single location at a time, and apply the concept to groups of entities replicas that might span across multiple locations, might have only weakly consistent state, and whose membership might dynamically change.","['extension', 'distribute', 'object', 'protocol', 'object', 'domain', 'specific', 'term', 'special', 'type', 'ordinary', 'object', 'certain', 'context', 'remote', 'method', 'invocation', 'protocol', 'composition', 'replicate', 'object', 'live', 'distribute', 'object', 'non', 'standard', 'abandon', 'usual', 'case', 'object', 'reside', 'single', 'location', 'time', 'apply', 'concept', 'group', 'entity', 'replica', 'span', 'multiple', 'location', 'weakly', 'consistent', 'state', 'membership', 'dynamically', 'change']"
246,"The Semantic Web is essentially a distributed-objects framework. Two key technologies in the Semantic Web are the Web Ontology Language OWL and the Resource Description Framework RDF. RDF provides the capability to define basic objects—names, properties, attributes, relations—that are accessible via the Internet. OWL adds a richer object model, based on set theory, that provides additional modeling capabilities such as multiple inheritance.","['semantic', 'web', 'essentially', 'distribute', 'object', 'framework', 'key', 'technology', 'semantic', 'web', 'web', 'ontology', 'language', 'owl', 'resource', 'description', 'framework', 'rdf', 'rdf', 'provide', 'capability', 'define', 'basic', 'object', 'name', 'property', 'attribute', 'relation', 'accessible', 'internet', 'owl', 'add', 'rich', 'object', 'model', 'base', 'set', 'theory', 'provide', 'additional', 'modeling', 'capability', 'multiple', 'inheritance']"
247,OWL objects are not like standard large-grained distributed objects accessed via an Interface Definition Language. Such an approach would not be appropriate for the Internet because the Internet is constantly evolving and standardization on one set of interfaces is difficult to achieve. OWL objects tend to be similar to the kinds of objects used to define application domain models in programming languages such as Java and C++.,"['owl', 'object', 'like', 'standard', 'large', 'grain', 'distribute', 'object', 'access', 'interface', 'definition', 'language', 'approach', 'appropriate', 'internet', 'internet', 'constantly', 'evolve', 'standardization', 'set', 'interface', 'difficult', 'achieve', 'owl', 'object', 'tend', 'similar', 'kind', 'object', 'define', 'application', 'domain', 'model', 'programming', 'language', 'java', 'c++']"
248,"However, there are important distinctions between OWL objects and traditional object-oriented programming objects. Traditional objects get compiled into static hierarchies usually with single inheritance, but OWL objects are dynamic. An OWL object can change its structure at run time and can become an instance of new or different classes.","['important', 'distinction', 'owl', 'object', 'traditional', 'object', 'orient', 'programming', 'object', 'traditional', 'object', 'compile', 'static', 'hierarchy', 'usually', 'single', 'inheritance', 'owl', 'object', 'dynamic', 'owl', 'object', 'change', 'structure', 'run', 'time', 'instance', 'new', 'different', 'class']"
249,"Another critical difference is the way the model treats information that is currently not in the system. Programming objects and most database systems use the ""closed-world assumption"". If a fact is not known to the system that fact is assumed to be false. Semantic Web objects use the open-world assumption, a statement is only considered false if there is actual relevant information that it is false, otherwise it is assumed to be unknown, neither true nor false.","['critical', 'difference', 'way', 'model', 'treat', 'information', 'currently', 'system', 'programming', 'object', 'database', 'system', 'use', 'closed', 'world', 'assumption', 'fact', 'know', 'system', 'fact', 'assume', 'false', 'semantic', 'web', 'object', 'use', 'open', 'world', 'assumption', 'statement', 'consider', 'false', 'actual', 'relevant', 'information', 'false', 'assume', 'unknown', 'true', 'false']"
250,OWL objects are actually most like objects in artificial intelligence frame languages such as KL-ONE and Loom.,"['owl', 'object', 'actually', 'like', 'object', 'artificial', 'intelligence', 'frame', 'language', 'loom']"
251,The following table contrasts traditional objects from Object-Oriented programming languages such as Java or C++ with Semantic Web Objects:1011,"['following', 'table', 'contrast', 'traditional', 'object', 'object', 'orient', 'programming', 'language', 'java', 'c++', 'semantic', 'web', 'objects']"
252,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
253,"In class-based, object-oriented programming, a class variable is a variable defined in a class of which a single copy exists, regardless of how many instances of the class exist.12345","['class', 'base', 'object', 'orient', 'programming', 'class', 'variable', 'variable', 'define', 'class', 'single', 'copy', 'exist', 'regardless', 'instance', 'class', 'exist']"
254,"A class variable is not an instance variable. It is a special type of class attribute or class property, field, or data member. The same dichotomy between instance and class members applies to methods ""member functions"" as well; a class may have both instance methods and class methods.","['class', 'variable', 'instance', 'variable', 'special', 'type', 'class', 'attribute', 'class', 'property', 'field', 'data', 'member', 'dichotomy', 'instance', 'class', 'member', 'apply', 'method', 'member', 'function', 'class', 'instance', 'method', 'class', 'method']"
255,"In some languages, class variables and class methods are either statically resolved, not via dynamic dispatch, or their memory statically allocated at compile time once for the entire class, as static variables, not dynamically allocated at run time at every instantiation of an object. In other cases, however, either or both of these are dynamic. For example, if classes can be dynamically defined at run time, class variables of these classes are allocated dynamically when the class is defined, and in some languages class methods are also dispatched dynamically.","['language', 'class', 'variable', 'class', 'method', 'statically', 'resolve', 'dynamic', 'dispatch', 'memory', 'statically', 'allocate', 'compile', 'time', 'entire', 'class', 'static', 'variable', 'dynamically', 'allocate', 'run', 'time', 'instantiation', 'object', 'case', 'dynamic', 'example', 'class', 'dynamically', 'define', 'run', 'time', 'class', 'variable', 'class', 'allocate', 'dynamically', 'class', 'define', 'language', 'class', 'method', 'dispatch', 'dynamically']"
256,"Thus in some languages, static member variable or static member function are used synonymously with or in place of ""class variable"" or ""class function"", but these are not synonymous across languages. These terms are commonly used in Java, C# 5 , and C++, where class variables and class methods are declared with the static keyword, and referred to as static member variables or static member functions.","['language', 'static', 'member', 'variable', 'static', 'member', 'function', 'synonymously', 'place', 'class', 'variable', 'class', 'function', 'synonymous', 'language', 'term', 'commonly', 'java', 'c++', 'class', 'variable', 'class', 'method', 'declare', 'static', 'keyword', 'refer', 'static', 'member', 'variable', 'static', 'member', 'function']"
257,"In this C++ example, the class variable Request::count is incremented on each call to the constructor, so that Request::count always holds the number of Requests that have been constructed, and each new Request object is given a number in sequential order. Since count is a class variable, there is only one object Request::count; in contrast, each Request object contains its own distinct number field.","['c++', 'example', 'class', 'variable', 'request::count', 'incremente', 'constructor', 'request::count', 'hold', 'number', 'requests', 'construct', 'new', 'request', 'object', 'give', 'number', 'sequential', 'order', 'count', 'class', 'variable', 'object', 'request::count', 'contrast', 'request', 'object', 'contain', 'distinct', 'number', 'field']"
258,Also note that the variable Request::count is initialized only once.,"['note', 'variable', 'request::count', 'initialize']"
259,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
260,"In computer programming, cohesion refers to the degree to which the elements inside a module belong together.1 In one sense, it is a measure of the strength of relationship between the methods and data of a class and some unifying purpose or concept served by that class. In another sense, it is a measure of the strength of relationship between the class's methods and data themselves.","['computer', 'programming', 'cohesion', 'refer', 'degree', 'element', 'inside', 'module', 'belong', 'together', 'sense', 'measure', 'strength', 'relationship', 'method', 'datum', 'class', 'unifying', 'purpose', 'concept', 'serve', 'class', 'sense', 'measure', 'strength', 'relationship', 'class', 'method', 'datum']"
261,"Cohesion is an ordinal type of measurement and is usually described as “high cohesion” or “low cohesion”. Modules with high cohesion tend to be preferable, because high cohesion is associated with several desirable traits of software including robustness, reliability, reusability, and understandability. In contrast, low cohesion is associated with undesirable traits such as being difficult to maintain, test, reuse, or even understand.","['cohesion', 'ordinal', 'type', 'measurement', 'usually', 'describe', 'high', 'cohesion', 'low', 'cohesion', 'module', 'high', 'cohesion', 'tend', 'preferable', 'high', 'cohesion', 'associate', 'desirable', 'trait', 'software', 'include', 'robustness', 'reliability', 'reusability', 'understandability', 'contrast', 'low', 'cohesion', 'associate', 'undesirable', 'trait', 'difficult', 'maintain', 'test', 'reuse', 'understand']"
262,"Cohesion is often contrasted with coupling, a different concept. High cohesion often correlates with loose coupling, and vice versa.2 The software metrics of coupling and cohesion were invented by Larry Constantine in the late 1960s as part of Structured Design, based on characteristics of “good” programming practices that reduced maintenance and modification costs. Structured Design, cohesion and coupling were published in the article Stevens, Myers & Constantine 19743 and the book Yourdon & Constantine 1979;1 the latter two subsequently became standard terms in software engineering.","['cohesion', 'contrast', 'coupling', 'different', 'concept', 'high', 'cohesion', 'correlate', 'loose', 'coupling', 'vice', 'versa', 'software', 'metric', 'coupling', 'cohesion', 'invent', 'larry', 'constantine', 'late', '1960', 'structured', 'design', 'base', 'characteristic', 'good', 'programming', 'practice', 'reduce', 'maintenance', 'modification', 'cost', 'structured', 'design', 'cohesion', 'coupling', 'publish', 'article', 'stevens', 'myers', 'constantine', '19743', 'book', 'yourdon', 'constantine', '1979', 'subsequently', 'standard', 'term', 'software', 'engineering']"
263,"In object-oriented programming, if the methods that serve a class tend to be similar in many aspects, then the class is said to have high cohesion.4 In a highly cohesive system, code readability and reusability is increased, while complexity is kept manageable.","['object', 'orient', 'programming', 'method', 'serve', 'class', 'tend', 'similar', 'aspect', 'class', 'say', 'high', 'cohesion', 'highly', 'cohesive', 'system', 'code', 'readability', 'reusability', 'increase', 'complexity', 'keep', 'manageable']"
264,"Advantages of high cohesion or ""strong cohesion"" are:","['advantage', 'high', 'cohesion', 'strong', 'cohesion']"
265,"While in principle a module can have perfect cohesion by only consisting of a single, atomic element – having a single function, for example – in practice complex tasks are not expressible by a single, simple element. Thus a single-element module has an element that either is too complicated, in order to accomplish a task, or is too narrow, and thus tightly coupled to other modules. Thus cohesion is balanced with both unit complexity and coupling.","['principle', 'module', 'perfect', 'cohesion', 'consist', 'single', 'atomic', 'element', 'have', 'single', 'function', 'example', 'practice', 'complex', 'task', 'expressible', 'single', 'simple', 'element', 'single', 'element', 'module', 'element', 'complicated', 'order', 'accomplish', 'task', 'narrow', 'tightly', 'couple', 'module', 'cohesion', 'balance', 'unit', 'complexity', 'coupling']"
266,"Cohesion is a qualitative measure, meaning that the source code to be measured is examined using a rubric to determine a classification. Cohesion types, from the worst to the best, are as follows:","['cohesion', 'qualitative', 'measure', 'mean', 'source', 'code', 'measure', 'examine', 'rubric', 'determine', 'classification', 'cohesion', 'type', 'bad', 'good', 'follow']"
267,"Although cohesion is a ranking type of scale, the ranks do not indicate a steady progression of improved cohesion. Studies by various people including Larry Constantine, Edward Yourdon, and Steve McConnell5 indicate that the first two types of cohesion are inferior; communicational and sequential cohesion are very good; and functional cohesion is superior.","['cohesion', 'ranking', 'type', 'scale', 'rank', 'indicate', 'steady', 'progression', 'improved', 'cohesion', 'study', 'people', 'include', 'larry', 'constantine', 'edward', 'yourdon', 'steve', 'mcconnell5', 'indicate', 'type', 'cohesion', 'inferior', 'communicational', 'sequential', 'cohesion', 'good', 'functional', 'cohesion', 'superior']"
268,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
269,"In computer science, object composition and object aggregation are closely related ways to combine objects or data types into more complex ones. In conversation the distinction between composition and aggregation is often ignored.1 Common kinds of compositions are objects used in object-oriented programming, tagged unions, sets, sequences, and various graph structures. Object compositions relate to, but are not the same as, data structures.","['computer', 'science', 'object', 'composition', 'object', 'aggregation', 'closely', 'relate', 'way', 'combine', 'object', 'datum', 'type', 'complex', 'one', 'conversation', 'distinction', 'composition', 'aggregation', 'ignored', 'common', 'kind', 'composition', 'object', 'object', 'orient', 'programming', 'tag', 'union', 'set', 'sequence', 'graph', 'structure', 'object', 'composition', 'relate', 'data', 'structure']"
270,"Object composition refers to the logical or conceptual structure of the information, not the implementation or physical data structure used to represent itcitation needed. For example, a sequence differs from a set because among other things the order of the composed items matters for the former but not the latter. Data structures such as arrays, linked lists, hash tables, and many others can be used to implement either of them. Perhaps confusingly, some of the same terms are used for both data structures and composites. For example, ""binary tree"" can refer to either: as a data structure it is a means of accessing a linear sequence of items, and the actual positions of items in the tree are irrelevant the tree can be internally rearranged however one likes, without changing its meaning. However, as an object composition, the positions are relevant, and changing them would change the meaning as for example in cladogramscitation needed.","['object', 'composition', 'refer', 'logical', 'conceptual', 'structure', 'information', 'implementation', 'physical', 'datum', 'structure', 'represent', 'itcitation', 'need', 'example', 'sequence', 'differ', 'set', 'thing', 'order', 'compose', 'item', 'matter', 'datum', 'structure', 'array', 'link', 'list', 'hash', 'table', 'implement', 'confusingly', 'term', 'datum', 'structure', 'composite', 'example', 'binary', 'tree', 'refer', 'data', 'structure', 'means', 'access', 'linear', 'sequence', 'item', 'actual', 'position', 'item', 'tree', 'irrelevant', 'tree', 'internally', 'rearrange', 'like', 'change', 'meaning', 'object', 'composition', 'position', 'relevant', 'change', 'change', 'meaning', 'example', 'cladogramscitation', 'need']"
271,"Object-oriented programming is based on objects to encapsulate data and behavior. It uses two main techniques for assembling and composing functionality into more complex ones, sub-typing and object composition.2 Object composition is about combining objects within compound objects, and at the same time, ensuring the encapsulation of each object by using their well-defined interface without visibility of their internals. In this regard, object composition differs from data structures, which do not enforce encapsulation.","['object', 'orient', 'programming', 'base', 'object', 'encapsulate', 'datum', 'behavior', 'use', 'main', 'technique', 'assemble', 'compose', 'functionality', 'complex', 'one', 'sub', 'type', 'object', 'composition', 'object', 'composition', 'combine', 'object', 'compound', 'object', 'time', 'ensure', 'encapsulation', 'object', 'define', 'interface', 'visibility', 'internal', 'regard', 'object', 'composition', 'differ', 'datum', 'structure', 'enforce', 'encapsulation']"
272,"Object composition may also be about a group of multiple related objects, such as a set or a sequence of objects. Delegation may enrich composition by forwarding requests or calls made to the enclosing composite object to one of its internal components.3","['object', 'composition', 'group', 'multiple', 'relate', 'object', 'set', 'sequence', 'object', 'delegation', 'enrich', 'composition', 'forward', 'request', 'call', 'enclose', 'composite', 'object', 'internal', 'components']"
273,"In class-based and typed programming languages, types can be divided into composite and non-composite types, and composition can be regarded as a relationship between types: an object of a composite type e.g. car ""has"" objects of other types e.g. wheel. When a composite object contains several sub-objects of the same type, they may be assigned to particular roles, often distinguished by names or numbers. For example, a Point object might contain 3 numbers, each representing distance along a different axis, such as 'x', 'y', and 'z'. The study of part-whole relationships in general, is mereology.","['class', 'base', 'type', 'programming', 'language', 'type', 'divide', 'composite', 'non', 'composite', 'type', 'composition', 'regard', 'relationship', 'type', 'object', 'composite', 'type', 'e.g.', 'car', 'object', 'type', 'e.g.', 'wheel', 'composite', 'object', 'contain', 'sub', 'object', 'type', 'assign', 'particular', 'role', 'distinguish', 'name', 'number', 'example', 'point', 'object', 'contain', 'number', 'represent', 'distance', 'different', 'axis', 'study', 'relationship', 'general', 'mereology']"
274,"Composition must be distinguished from subtyping, which is the process of adding detail to a general data type to create a more specific data type. For instance, cars may be a specific type of vehicle: car is a vehicle. Subtyping doesn't describe a relationship between different objects, but instead, says that objects of a type are simultaneously objects of another type. The study of such relationships is ontology.","['composition', 'distinguish', 'subtype', 'process', 'add', 'detail', 'general', 'datum', 'type', 'create', 'specific', 'data', 'type', 'instance', 'car', 'specific', 'type', 'vehicle', 'car', 'vehicle', 'subtype', 'describe', 'relationship', 'different', 'object', 'instead', 'say', 'object', 'type', 'simultaneously', 'object', 'type', 'study', 'relationship', 'ontology']"
275,"In prototype-based programming languages such as JavaScript, objects can dynamically inherit the behaviors from a prototype object at the moment of their instantiation. Composition must be distinguished from prototyping: the newly instantiated object inherits the composition of its prototype, but it may itself be composed on its own.","['prototype', 'base', 'programming', 'language', 'javascript', 'object', 'dynamically', 'inherit', 'behavior', 'prototype', 'object', 'moment', 'instantiation', 'composition', 'distinguish', 'prototype', 'newly', 'instantiate', 'object', 'inherit', 'composition', 'prototype', 'compose']"
276,"Composite objects may be represented in storage by co-locating the composed objects, by co-locating references, or in many other ways. The items within a composite object may be referred to as attributes, fields, members, properties, or other names, and the resulting composition as composite type, storage record, structure, tuple, or a user-defined type UDT. For details, see the aggregation section below.","['composite', 'object', 'represent', 'storage', 'locate', 'compose', 'object', 'locating', 'reference', 'way', 'item', 'composite', 'object', 'refer', 'attribute', 'field', 'member', 'property', 'name', 'result', 'composition', 'composite', 'type', 'storage', 'record', 'structure', 'tuple', 'user', 'define', 'type', 'udt', 'detail', 'aggregation', 'section']"
277,"In UML modeling, objects can be conceptually composed, independently of the implementation with a programming language. There are four ways of composing objects in UML: property, association, aggregation and composition:4","['uml', 'modeling', 'object', 'conceptually', 'compose', 'independently', 'implementation', 'programming', 'language', 'way', 'compose', 'object', 'uml', 'property', 'association', 'aggregation', 'composition']"
278,"The relationship between the aggregate and its components is a weak ""has-a"" relationship: The components may be part of several aggregates, may be accessed through other objects without going through the aggregate, and may outlive the aggregate object.4 The state of the component object still forms part of the aggregate object.citation needed","['relationship', 'aggregate', 'component', 'weak', 'relationship', 'component', 'aggregate', 'access', 'object', 'go', 'aggregate', 'outlive', 'aggregate', 'object', 'state', 'component', 'object', 'form', 'aggregate', 'object.citation', 'need']"
279,"The relationship between the composite and its parts is a strong “has-a” relationship: The composite object has sole ""responsibility for the existence and storage of the composed objects"", the composed object can be part of at most one composite, and ""If a composite object is deleted, all of its part instances that are objects are deleted with it"". Thus in UML, composition has a more narrow meaning than the usual object composition.","['relationship', 'composite', 'part', 'strong', 'relationship', 'composite', 'object', 'sole', 'responsibility', 'existence', 'storage', 'compose', 'object', 'composed', 'object', 'composite', 'composite', 'object', 'delete', 'instance', 'object', 'delete', 'uml', 'composition', 'narrow', 'meaning', 'usual', 'object', 'composition']"
280,"Aggregation differs from ordinary composition in that it does not imply ownership. In composition, when the owning object is destroyed, so are the contained objects. In aggregation, this is not necessarily true. For example, a university owns various departments e.g., chemistry, and each department has a number of professors. If the university closes, the departments will no longer exist, but the professors in those departments will continue to exist. Therefore, a university can be seen as a composition of departments, whereas departments have an aggregation of professors. In addition, a professor could work in more than one department, but a department could not be part of more than one university.","['aggregation', 'differ', 'ordinary', 'composition', 'imply', 'ownership', 'composition', 'own', 'object', 'destroy', 'contain', 'object', 'aggregation', 'necessarily', 'true', 'example', 'university', 'own', 'department', 'e.g.', 'chemistry', 'department', 'number', 'professor', 'university', 'close', 'department', 'long', 'exist', 'professor', 'department', 'continue', 'exist', 'university', 'see', 'composition', 'department', 'department', 'aggregation', 'professor', 'addition', 'professor', 'work', 'department', 'department', 'university']"
281,"Composition is usually implemented such that an object contains another object. For example, in C++:","['composition', 'usually', 'implement', 'object', 'contain', 'object', 'example', 'c++']"
282,"In aggregation, the object may only contain a reference or pointer to the object and not have lifetime responsibility for it.","['aggregation', 'object', 'contain', 'reference', 'pointer', 'object', 'lifetime', 'responsibility']"
283,Sometimes aggregation is referred to as composition when the distinction between ordinary composition and aggregation is unimportant.,"['aggregation', 'refer', 'composition', 'distinction', 'ordinary', 'composition', 'aggregation', 'unimportant']"
284,The above code would transform into the following UML Class diagram:,"['code', 'transform', 'follow', 'uml', 'class', 'diagram']"
285,"In Microsoft's Component Object Model, aggregation means that an object exports, as if it were their owner, one or several interfaces of another object it owns. Formally, this is more similar to composition or encapsulation than aggregation. However, instead of implementing the exported interfaces by calling the interfaces of the owned object, the interfaces of the owned object themselves are exported. The owned object is responsible for assuring that methods of those interfaces inherited from .mw-parser-output .monospacedfont-family:monospace,monospaceIUnknown actually invoke the corresponding methods of the owner. This is to guarantee that the reference count of the owner is correct and all interfaces of the owner are accessible through the exported interface, while no other private interfaces of the owned object are accessible.5","['microsoft', 'component', 'object', 'model', 'aggregation', 'mean', 'object', 'export', 'owner', 'interface', 'object', 'own', 'formally', 'similar', 'composition', 'encapsulation', 'aggregation', 'instead', 'implement', 'export', 'interface', 'call', 'interface', 'own', 'object', 'interface', 'own', 'object', 'export', 'own', 'object', 'responsible', 'assure', 'method', 'interface', 'inherit', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospaceiunknown', 'actually', 'invoke', 'corresponding', 'method', 'owner', 'guarantee', 'reference', 'count', 'owner', 'correct', 'interface', 'owner', 'accessible', 'export', 'interface', 'private', 'interface', 'own', 'object', 'accessible']"
286,"Composition that is used to store several instances of the composited data type is referred to as containment. Examples of such containers are arrays, associative arrays, binary trees, and linked lists.","['composition', 'store', 'instance', 'composite', 'data', 'type', 'refer', 'containment', 'example', 'container', 'array', 'associative', 'array', 'binary', 'tree', 'link', 'list']"
287,"In UML, containment is depicted with a multiplicity of 0..* or 1..*, indicating that the composite object is composed of an unknown number of instances of the composed class.","['uml', 'containment', 'depict', 'multiplicity', 'indicate', 'composite', 'object', 'compose', 'unknown', 'number', 'instance', 'composed', 'class']"
288,"Objects can be composed recursively, and their type is then called recursive type. Examples includes various kinds of trees, DAGs, and graphs. Each node in a tree may be a branch or leaf; in other words, each node is a tree at the same time when it belongs to another tree.","['object', 'compose', 'recursively', 'type', 'call', 'recursive', 'type', 'example', 'include', 'kind', 'tree', 'dag', 'graph', 'node', 'tree', 'branch', 'leaf', 'word', 'node', 'tree', 'time', 'belong', 'tree']"
289,"In UML, recursive composition is depicted with an association, aggregation or composition of a class with itself.","['uml', 'recursive', 'composition', 'depict', 'association', 'aggregation', 'composition', 'class']"
290,"The composite design pattern is an object oriented design based on composite types, that combines recursive composition and containment to implement complex part-whole hierarchies.","['composite', 'design', 'pattern', 'object', 'orient', 'design', 'base', 'composite', 'type', 'combine', 'recursive', 'composition', 'containment', 'implement', 'complex', 'hierarchy']"
291,This is an example of composition in C.,"['example', 'composition']"
292,"In this example, the primitive noncomposite types int, enum job_seeking, professional, non_professional, retired, student and the composite array type char are combined to form the composite structure Person. Each Person structure then ""has an"" age, name, and an employment type.","['example', 'primitive', 'noncomposite', 'type', 'int', 'enum', 'job_seeking', 'professional', 'non_professional', 'retired', 'student', 'composite', 'array', 'type', 'char', 'combine', 'form', 'composite', 'structure', 'person', 'person', 'structure', 'age', 'employment', 'type']"
293,"C calls a record a struct or structure; object-oriented languages such as Java, Smalltalk, and C++ often keep their records hidden inside objects class instances; languages in the ML family simply call them records. COBOL was the first widespread programming language to support records directly;6 ALGOL 68 got it from COBOL and Pascal got it, more or less indirectly, from ALGOL 68. Common Lisp provides structures and classes the latter via the Common Lisp Object System.citation needed","['call', 'record', 'struct', 'structure', 'object', 'orient', 'language', 'java', 'smalltalk', 'c++', 'record', 'hide', 'inside', 'object', 'class', 'instance', 'language', 'family', 'simply', 'record', 'cobol', 'widespread', 'programming', 'language', 'support', 'record', 'directly', 'algol', 'get', 'cobol', 'pascal', 'get', 'indirectly', 'algol', 'common', 'lisp', 'provide', 'structure', 'class', 'common', 'lisp', 'object', 'system.citation', 'need']"
294,Arrays were the only composite data type in Algol 60.,"['array', 'composite', 'datum', 'type', 'algol']"
295,"For example, a linked list might be declared as:","['example', 'link', 'list', 'declare']"
296,"For ALGOL 68 only the type name appears to the left of the equality, and most notably the construction is made – and can be read – from left to right without regard to priorities.","['algol', 'type', 'appear', 'left', 'equality', 'notably', 'construction', 'read', 'leave', 'right', 'regard', 'priority']"
297,"Fortran 77 has arrays, but lacked any formal record/structure definitions. Typically compound structures were built up using EQUIVALENCE or COMMON statements:","['fortran', 'array', 'lack', 'formal', 'record', 'structure', 'definition', 'typically', 'compound', 'structure', 'build', 'equivalence', 'common', 'statement']"
298,"Ada 95 brought OOP concepts through tagged types the equivalent of a C++ class, Ada 2012 added support for substitution verification through class-wide contracts.","['ada', 'bring', 'oop', 'concept', 'tag', 'type', 'equivalent', 'c++', 'class', 'ada', '2012', 'add', 'support', 'substitution', 'verification', 'class', 'wide', 'contract']"
299,"Arrays and strings were inherited from FORTRAN 77, and a new reserved word was introduced: type","['array', 'string', 'inherit', 'fortran', 'new', 'reserved', 'word', 'introduce', 'type']"
300,FORTRAN 90 updated and included FORTRAN IV's concept called NAMELIST.,"['fortran', 'update', 'include', 'fortran', 'concept', 'call', 'namelist']"
301,Common Lisp provides structures and the ANSI Common Lisp standard added CLOS classes.,"['common', 'lisp', 'provide', 'structure', 'ansi', 'common', 'lisp', 'standard', 'add', 'clos', 'class']"
302,"For more details about composition in C/C++, see Composite type.","['detail', 'composition', 'c++', 'composite', 'type']"
303,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
304,"In class-based, object-oriented programming, a constructor abbreviation: ctor is a special type of subroutine called to create an object. It prepares the new object for use, often accepting arguments that the constructor uses to set required member variables.","['class', 'base', 'object', 'orient', 'programming', 'constructor', 'abbreviation', 'ctor', 'special', 'type', 'subroutine', 'call', 'create', 'object', 'prepare', 'new', 'object', 'use', 'accept', 'argument', 'constructor', 'use', 'set', 'require', 'member', 'variable']"
305,"A constructor resembles an instance method, but it differs from a method in that it has no explicit return type, it is not implicitly inherited and it usually has different rules for scope modifiers. Constructors often have the same name as the declaring class. They have the task of initializing the object's data members and of establishing the invariant of the class, failing if the invariant is invalid. A properly written constructor leaves the resulting object in a valid state. Immutable objects must be initialized in a constructor.","['constructor', 'resemble', 'instance', 'method', 'differ', 'method', 'explicit', 'return', 'type', 'implicitly', 'inherit', 'usually', 'different', 'rule', 'scope', 'modifier', 'constructor', 'declaring', 'class', 'task', 'initialize', 'object', 'datum', 'member', 'establish', 'invariant', 'class', 'fail', 'invariant', 'invalid', 'properly', 'write', 'constructor', 'leave', 'result', 'object', 'valid', 'state', 'immutable', 'object', 'initialize', 'constructor']"
306,"Most languages allow overloading the constructor in that there can be more than one constructor for a class, with differing parameters. Some languages take consideration of some special types of constructors. Constructors, which concretely use a single class to create objects and return a new instance of the class, are abstracted by factories, which also create objects but can do so in various ways, using multiple classes or different allocation schemes such as an object pool.","['language', 'allow', 'overload', 'constructor', 'constructor', 'class', 'differ', 'parameter', 'language', 'consideration', 'special', 'type', 'constructor', 'constructor', 'concretely', 'use', 'single', 'class', 'create', 'object', 'return', 'new', 'instance', 'class', 'abstract', 'factory', 'create', 'object', 'way', 'multiple', 'class', 'different', 'allocation', 'scheme', 'object', 'pool']"
307,"Constructors that can take at least one argument are termed as parameterized constructors. When an object is declared in a parameterized constructor, the initial values have to be passed as arguments to the constructor function. The normal way of object declaration may not work. The constructors can be called explicitly or implicitly. The method of calling the constructor implicitly is also called the shorthand method.","['constructor', 'argument', 'term', 'parameterized', 'constructor', 'object', 'declare', 'parameterized', 'constructor', 'initial', 'value', 'pass', 'argument', 'constructor', 'function', 'normal', 'way', 'object', 'declaration', 'work', 'constructor', 'call', 'explicitly', 'implicitly', 'method', 'call', 'constructor', 'implicitly', 'call', 'shorthand', 'method']"
308,"If the programmer does not supply a constructor for an instantiable class, Java compiler inserts a default constructor into your code on your behalf. This constructor is known as default constructor. You would not find it in your source code the java file as it would be inserted into the code during compilation and exists in .class file. The behavior of the default constructor is language dependent. It may initialize data members to zero or other same values, or it may do nothing at all. In Java, a ""default constructor"" refer to a nullary constructor that is automatically generated by the compiler if no constructors have been defined for the class or in the absence of any programmer-defined constructors e.g. in Java, the default constructor implicitly calls the superclass's nullary constructor, then executes an empty body. All fields are left at their initial value of 0 integer types, 0.0 floating-point types, false boolean type, or null reference types.","['programmer', 'supply', 'constructor', 'instantiable', 'class', 'java', 'compiler', 'insert', 'default', 'constructor', 'code', 'behalf', 'constructor', 'know', 'default', 'constructor', 'find', 'source', 'code', 'java', 'file', 'insert', 'code', 'compilation', 'exist', '.class', 'file', 'behavior', 'default', 'constructor', 'language', 'dependent', 'initialize', 'data', 'member', 'zero', 'value', 'java', 'default', 'constructor', 'refer', 'nullary', 'constructor', 'automatically', 'generate', 'compiler', 'constructor', 'define', 'class', 'absence', 'programmer', 'define', 'constructor', 'e.g.', 'java', 'default', 'constructor', 'implicitly', 'call', 'superclass', 'nullary', 'constructor', 'execute', 'body', 'field', 'leave', 'initial', 'value', 'integer', 'type', '0', 'float', 'point', 'type', 'false', 'boolean', 'type', 'null', 'reference', 'type']"
309,"Like C++, Java also supports ""Copy Constructor"". But, unlike C++, Java doesn't create a default copy constructor if you don't write your own. Copy constructors define the actions performed by the compiler when copying class objects. A Copy constructor has one formal parameter that is the type of the class the parameter may be a reference to an object. It is used to create a copy of an existing object of the same class. Even though both classes are the same, it counts as a conversion constructor. While copy constructors are usually abbreviated copy ctor or cctor, they have nothing to do with class constructors used in .NET using the same abbreviation.","['like', 'c++', 'java', 'support', 'copy', 'constructor', 'unlike', 'c++', 'java', 'create', 'default', 'copy', 'constructor', 'write', 'copy', 'constructor', 'define', 'action', 'perform', 'compiler', 'copy', 'class', 'object', 'copy', 'constructor', 'formal', 'parameter', 'type', 'class', 'parameter', 'reference', 'object', 'create', 'copy', 'exist', 'object', 'class', 'class', 'count', 'conversion', 'constructor', 'copy', 'constructor', 'usually', 'abbreviate', 'copy', 'ctor', 'cctor', 'class', 'constructor', '.net', 'abbreviation']"
310,"Conversion constructors provide a means for a compiler to implicitly create an object belonging to one class based on an object of a different type. These constructors are usually invoked implicitly to convert arguments or operands to an appropriate type, but they may also be called explicitly.","['conversion', 'constructor', 'provide', 'mean', 'compiler', 'implicitly', 'create', 'object', 'belong', 'class', 'base', 'object', 'different', 'type', 'constructor', 'usually', 'invoke', 'implicitly', 'convert', 'argument', 'operand', 'appropriate', 'type', 'call', 'explicitly']"
311,"In C++, move constructors take an Rvalue reference to an object of the class, and are used to implement ownership transfer of the parameter object's resources.","['c++', 'constructor', 'rvalue', 'reference', 'object', 'class', 'implement', 'ownership', 'transfer', 'parameter', 'object', 'resource']"
312,"In Java, C#, and VB .NET, the constructor creates reference type objects in a special memory structure called the ""heap"". Value types such as int, double, etc. are created in a sequential structure called the ""stack"". VB .NET and C# also allow the use of the new operator to create value type objects, but these value type objects are created on the stack regardless of whether the operator is used or not.","['java', '.net', 'constructor', 'create', 'reference', 'type', 'object', 'special', 'memory', 'structure', 'call', 'heap', 'value', 'type', 'int', 'double', 'etc', 'create', 'sequential', 'structure', 'call', 'stack', '.net', 'allow', 'use', 'new', 'operator', 'create', 'value', 'type', 'object', 'value', 'type', 'object', 'create', 'stack', 'regardless', 'operator']"
313,"In C++, objects are created on the stack when the constructor is invoked without the new operator, and created on the heap when the constructor is invoked with the new operator. Stack objects are deleted implicitly when they go out of scope, while heap objects must be deleted implicitly by a destructor or explicitly by using the delete operator.","['c++', 'object', 'create', 'stack', 'constructor', 'invoke', 'new', 'operator', 'create', 'heap', 'constructor', 'invoke', 'new', 'operator', 'stack', 'object', 'delete', 'implicitly', 'scope', 'heap', 'object', 'delete', 'implicitly', 'destructor', 'explicitly', 'delete', 'operator']"
314,"In C++, the name of the constructor is the name of the class. It returns nothing. It can have parameters like any member function. Constructor functions are usually declared in the public section, but can also be declared in the protected and private sections, if the user wants to restrict access to them.","['c++', 'constructor', 'class', 'return', 'parameter', 'like', 'member', 'function', 'constructor', 'function', 'usually', 'declare', 'public', 'section', 'declare', 'protected', 'private', 'section', 'user', 'want', 'restrict', 'access']"
315,"The constructor has two parts. First is the initializer list which follows the parameter list and before the method body. It starts with a colon and entries are comma-separated. The initializer list is not required, but offers the opportunity to provide values for data members and avoid separate assignment statements. The initializer list is required if you have const or reference type data members, or members that do not have parameterless constructor logic. Assignments occur according to the order in which data members are declared even if the order in the initializer list is different.3 The second part is the body, which is a normal method body enclosed in curly brackets.","['constructor', 'part', 'initializer', 'list', 'follow', 'parameter', 'list', 'method', 'body', 'start', 'colon', 'entry', 'comma', 'separate', 'initializer', 'list', 'require', 'offer', 'opportunity', 'provide', 'value', 'data', 'member', 'avoid', 'separate', 'assignment', 'statement', 'initializer', 'list', 'require', 'const', 'reference', 'type', 'datum', 'member', 'member', 'parameterless', 'constructor', 'logic', 'assignment', 'occur', 'accord', 'order', 'data', 'member', 'declare', 'order', 'initializer', 'list', 'different', 'second', 'body', 'normal', 'method', 'body', 'enclose', 'curly', 'bracket']"
316,"C++ allows more than one constructor. The other constructors must have different parameters. Additionally constructors which contain parameters which are given default values, must adhere to the restriction that not all parameters are given a default value. This is a situation which only matters if there is a default constructor. The constructor of a base class or base classes can also be called by a derived class. Constructor functions are not inherited and their addresses cannot be referenced. When memory allocation is required, the new and delete operators are called implicitly.","['c++', 'allow', 'constructor', 'constructor', 'different', 'parameter', 'additionally', 'constructor', 'contain', 'parameter', 'give', 'default', 'value', 'adhere', 'restriction', 'parameter', 'give', 'default', 'value', 'situation', 'matter', 'default', 'constructor', 'constructor', 'base', 'class', 'base', 'class', 'call', 'derive', 'class', 'constructor', 'function', 'inherit', 'address', 'reference', 'memory', 'allocation', 'require', 'new', 'delete', 'operator', 'call', 'implicitly']"
317,"A copy constructor has a parameter of the same type passed as const reference, for example Vectorconst Vector& rhs. If it is not provided explicitly, the compiler uses the copy constructor for each member variable or simply copies values in case of primitive types. The default implementation is not efficient if the class has dynamically allocated members or handles to other resources, because it can lead to double calls to delete or double release of resources upon destruction.","['copy', 'constructor', 'parameter', 'type', 'pass', 'const', 'reference', 'example', 'vectorconst', 'vector', 'rh', 'provide', 'explicitly', 'compiler', 'use', 'copy', 'constructor', 'member', 'variable', 'simply', 'copy', 'value', 'case', 'primitive', 'type', 'default', 'implementation', 'efficient', 'class', 'dynamically', 'allocate', 'member', 'handle', 'resource', 'lead', 'double', 'call', 'delete', 'double', 'release', 'resource', 'destruction']"
318,"On returning objects from functions or passing objects by value, the objects copy constructor will be called implicitly, unless return value optimization applies.","['return', 'object', 'function', 'pass', 'object', 'value', 'object', 'copy', 'constructor', 'call', 'implicitly', 'return', 'value', 'optimization', 'apply']"
319,"C++ implicitly generates a default copy constructor which will call the copy constructors for all base classes and all member variables unless the programmer provides one, explicitly deletes the copy constructor to prevent cloning or one of the base classes or member variables copy constructor is deleted or not accessible private. Most cases calling for a customized copy constructor e.g. reference counting, deep copy of pointers also require customizing the destructor and the copy assignment operator. This is commonly referred to as the Rule of three.","['c++', 'implicitly', 'generate', 'default', 'copy', 'constructor', 'copy', 'constructor', 'base', 'class', 'member', 'variable', 'programmer', 'provide', 'explicitly', 'delete', 'copy', 'constructor', 'prevent', 'cloning', 'base', 'class', 'member', 'variable', 'copy', 'constructor', 'delete', 'accessible', 'private', 'case', 'call', 'customize', 'copy', 'constructor', 'e.g.', 'reference', 'counting', 'deep', 'copy', 'pointer', 'require', 'customize', 'destructor', 'copy', 'assignment', 'operator', 'commonly', 'refer', 'rule']"
320,"In C#, a static constructor is a static data initializer. Static constructors are also called class constructors. Since the actual method generated has the name .cctor they are often also called ""cctors"".45","['static', 'constructor', 'static', 'datum', 'initializer', 'static', 'constructor', 'call', 'class', 'constructor', 'actual', 'method', 'generate', '.cctor', 'call', 'cctors']"
321,"Static constructors allow complex static variable initialization.6 Static constructors are called implicitly when the class is first accessed. Any call to a class static or constructor call, triggers the static constructor execution. Static constructors are thread safe and implement a singleton pattern. When used in a generic programming class, static constructors are called at every new generic instantiation one per type. Static variables are instantiated as well.","['static', 'constructor', 'allow', 'complex', 'static', 'variable', 'initialization', 'static', 'constructor', 'call', 'implicitly', 'class', 'access', 'class', 'static', 'constructor', 'trigger', 'static', 'constructor', 'execution', 'static', 'constructor', 'thread', 'safe', 'implement', 'singleton', 'pattern', 'generic', 'programming', 'class', 'static', 'constructor', 'call', 'new', 'generic', 'instantiation', 'type', 'static', 'variable', 'instantiate']"
322,CFML uses a method named 'init' as a constructor method.,"['cfml', 'use', 'method', 'name', 'init', 'constructor', 'method']"
323,"Since ColdFusion 10,7 CFML has also supported specifying the name of the constructor method:","['coldfusion', '10', 'cfml', 'support', 'specify', 'constructor', 'method']"
324,"In Eiffel, the routines which initialize new objects are called creation procedures. Creation procedures have the following traits:","['eiffel', 'routine', 'initialize', 'new', 'object', 'call', 'creation', 'procedure', 'creation', 'procedure', 'follow', 'trait']"
325,"Although object creation involves some subtleties,8 the creation of an attribute with a typical declaration x: T as expressed in a creation instruction create x.make consists of the following sequence of steps:","['object', 'creation', 'involve', 'subtleties', 'creation', 'attribute', 'typical', 'declaration', 'express', 'creation', 'instruction', 'create', 'x.make', 'consist', 'follow', 'sequence', 'step']"
326,"In the first snippet below, class POINT is defined. The procedure make is coded after the keyword feature.","['snippet', 'class', 'point', 'define', 'procedure', 'code', 'keyword', 'feature']"
327,"The keyword create introduces a list of procedures which can be used to initialize instances. In this case the list includes default_create, a procedure with an empty implementation inherited from class ANY, and the make procedure coded within the class.","['keyword', 'create', 'introduce', 'list', 'procedure', 'initialize', 'instance', 'case', 'list', 'include', 'default_create', 'procedure', 'implementation', 'inherit', 'class', 'procedure', 'code', 'class']"
328,"In the second snippet, a class which is a client to POINT has a declarations my_point_1 and my_point_2 of type POINT.","['second', 'snippet', 'class', 'client', 'point', 'declaration', 'my_point_1', 'my_point_2', 'type', 'point']"
329,"In procedural code, my_point_1 is created as the origin 0.0, 0.0. Because no creation procedure is specified, the procedure default_create inherited from class ANY is used. This line could have been coded create my_point_1.default_create . Only procedures named as creation procedures can be used in an instruction with the create keyword. Next is a creation instruction for my_point_2, providing initial values for the my_point_2's coordinates. The third instruction makes an ordinary instance call to the make procedure to reinitialize the instance attached to my_point_2 with different values.","['procedural', 'code', 'my_point_1', 'create', 'origin', '0', '0', 'creation', 'procedure', 'specify', 'procedure', 'default_create', 'inherit', 'class', 'line', 'code', 'create', 'my_point_1.default_create', 'procedure', 'name', 'creation', 'procedure', 'instruction', 'create', 'keyword', 'creation', 'instruction', 'my_point_2', 'provide', 'initial', 'value', 'my_point_2', 'coordinate', 'instruction', 'make', 'ordinary', 'instance', 'procedure', 'reinitialize', 'instance', 'attach', 'my_point_2', 'different', 'value']"
330,"In F#, a constructor can include any let or do statements defined in a class. let statements define private fields and do statements execute code. Additional constructors can be defined using the new keyword.","['constructor', 'include', 'let', 'statement', 'define', 'class', 'let', 'statement', 'define', 'private', 'field', 'statement', 'execute', 'code', 'additional', 'constructor', 'define', 'new', 'keyword']"
331,"In Java, constructors differ from other methods in that:","['java', 'constructor', 'differ', 'method']"
332,Java constructors perform the following tasks in the following order:,"['java', 'constructor', 'perform', 'follow', 'task', 'follow', 'order']"
333,Java permit users to call one constructor in another constructor using this keyword. But this must be first statement. 9,"['java', 'permit', 'user', 'constructor', 'constructor', 'keyword', 'statement']"
334,Java provides access to the superclass's constructor through the super keyword.,"['java', 'provide', 'access', 'superclass', 'constructor', 'super', 'keyword']"
335,"A constructor taking zero number of arguments is called a ""no-arguments"" or ""no-arg"" constructor.10","['constructor', 'take', 'zero', 'number', 'argument', 'call', 'argument', 'arg', 'constructor']"
336,"As of ES6, JavaScript has direct constructors like many other programming languages. They are written as such","['es6', 'javascript', 'direct', 'constructor', 'like', 'programming', 'language', 'write']"
337,This can be instantiated as such,['instantiate']
338,"The equivalent of this before ES6, was creating a function that instantiates an object as such","['equivalent', 'es6', 'create', 'function', 'instantiate', 'object']"
339,This is instantiated the same way as above.,"['instantiate', 'way']"
340,"In Object Pascal, the constructor is similar to a factory method. The only syntactic difference to regular methods is the keyword constructor in front of the name instead of procedure or function. It can have any name, though the convention is to have Create as prefix, such as in CreateWithFormatting. Creating an instance of a class works like calling a static method of a class: TPerson.Create'Peter'.","['object', 'pascal', 'constructor', 'similar', 'factory', 'method', 'syntactic', 'difference', 'regular', 'method', 'keyword', 'constructor', 'instead', 'procedure', 'function', 'convention', 'create', 'prefix', 'createwithformatting', 'create', 'instance', 'class', 'work', 'like', 'call', 'static', 'method', 'class', 'tperson', ""create'peter""]"
341,"In OCaml, there is one constructor. Parameters are defined right after the class name. They can be used to initialize instance variables and are accessible throughout the class. An anonymous hidden method called initializer allows to evaluate an expression immediately after the object has been built. 11","['ocaml', 'constructor', 'parameter', 'define', 'right', 'class', 'initialize', 'instance', 'variable', 'accessible', 'class', 'anonymous', 'hide', 'method', 'call', 'initializer', 'allow', 'evaluate', 'expression', 'immediately', 'object', 'build']"
342,"In PHP version 5 and above, the constructor is a method named __construct notice that it's a double underscore, which the keyword new automatically calls after creating the object. It is usually used to automatically perform initializations such as property initializations. Constructors can also accept arguments, in which case, when the new statement is written, you also need to send the constructor arguments for the parameters.1","['php', 'version', 'constructor', 'method', 'name', 'construct', 'notice', 'double', 'underscore', 'keyword', 'new', 'automatically', 'call', 'create', 'object', 'usually', 'automatically', 'perform', 'initialization', 'property', 'initialization', 'constructor', 'accept', 'argument', 'case', 'new', 'statement', 'write', 'need', 'send', 'constructor', 'argument', 'parameters']"
343,"In PHP, a class is only allowed to declare a maximum of one constructor method. Static methods, factory classes or optional constructor arguments are some ways to facilitate multiple ways to create objects of a PHP class.","['php', 'class', 'allow', 'declare', 'maximum', 'constructor', 'method', 'static', 'method', 'factory', 'class', 'optional', 'constructor', 'argument', 'way', 'facilitate', 'multiple', 'way', 'create', 'object', 'php', 'class']"
344,"In Perl programming language version 5, by default, constructors are factory methods, that is, methods that create and return the object, concretely meaning create and return a blessed reference. A typical object is a reference to a hash, though rarely references to other types are used too. By convention the only constructor is named new, though it is allowed to name it otherwise, or to have multiple constructors. For example, a Person class may have a constructor named new as well as a constructor new_from_file which reads a file for Person attributes, and new_from_person which uses another Person object as a template.","['perl', 'programming', 'language', 'version', 'default', 'constructor', 'factory', 'method', 'method', 'create', 'return', 'object', 'concretely', 'mean', 'create', 'return', 'bless', 'reference', 'typical', 'object', 'reference', 'hash', 'rarely', 'reference', 'type', 'convention', 'constructor', 'name', 'new', 'allow', 'multiple', 'constructor', 'example', 'person', 'class', 'constructor', 'name', 'new', 'constructor', 'new_from_file', 'read', 'file', 'person', 'attribute', 'new_from_person', 'use', 'person', 'object', 'template']"
345,"With the Moose object system for Perl, most of this boilerplate can be left out, a default new is created, attributes can be specified, as well as whether they can be set, reset, or are required. In addition, any extra constructor functionality can be included in a BUILD method which the Moose generated constructor will call, after it has checked the arguments. A BUILDARGS method can be specified to handle constructor arguments not in hashref / key => value form.","['moose', 'object', 'system', 'perl', 'boilerplate', 'leave', 'default', 'new', 'create', 'attribute', 'specify', 'set', 'reset', 'require', 'addition', 'extra', 'constructor', 'functionality', 'include', 'build', 'method', 'moose', 'generate', 'constructor', 'check', 'argument', 'buildargs', 'method', 'specify', 'handle', 'constructor', 'argument', 'hashref', 'key', 'value', 'form']"
346,In both cases the Person class is instiated like this:,"['case', 'person', 'class', 'instiate', 'like']"
347,"In Python, constructors are defined by one or both of __new__ and __init__ methods. A new instance is created by calling the class as if it were a function, which calls the __new__ and __init__ methods. If a constructor method is not defined in the class, the next one found in the class's Method Resolution Order will be called.12","['python', 'constructor', 'define', 'new', 'init', 'method', 'new', 'instance', 'create', 'call', 'class', 'function', 'call', 'new', 'init', 'method', 'constructor', 'method', 'define', 'class', 'find', 'class', 'method', 'resolution', 'order', 'called']"
348,"In the typical case, only the __init__ method need be defined. The most common exception is for immutable objects.","['typical', 'case', 'init', 'method', 'need', 'define', 'common', 'exception', 'immutable', 'object']"
349,"Classes normally act as factories for new instances of themselves, that is, a class is a callable object like a function, with the call being the constructor, and calling the class returns an instance of that class. However the __new__ method is permitted to return something other than an instance of the class for specialised purposes. In that case, the __init__ is not invoked.13","['class', 'normally', 'act', 'factory', 'new', 'instance', 'class', 'callable', 'object', 'like', 'function', 'constructor', 'call', 'class', 'return', 'instance', 'class', 'new', 'method', 'permit', 'return', 'instance', 'class', 'specialised', 'purpose', 'case', 'init', 'invoked']"
350,"With Raku, even more boilerplate can be left out, given that a default new method is inherited, attributes can be specified, as well as whether they can be set, reset, or are required. In addition, any extra constructor functionality can be included in a BUILD method which will get called to allow for custom initialization. A TWEAK method can be specified to post-process any attributes already implicitly initialized.","['raku', 'boilerplate', 'leave', 'give', 'default', 'new', 'method', 'inherit', 'attribute', 'specify', 'set', 'reset', 'require', 'addition', 'extra', 'constructor', 'functionality', 'include', 'build', 'method', 'call', 'allow', 'custom', 'initialization', 'tweak', 'method', 'specify', 'post', 'process', 'attribute', 'implicitly', 'initialize']"
351,The Person class is instantiated like this:,"['person', 'class', 'instantiate', 'like']"
352,"Alternatively, the named parameters can be specified using the colon-pair syntax in Perl 6:","['alternatively', 'name', 'parameter', 'specify', 'colon', 'pair', 'syntax', 'perl']"
353,"And should you have set up variables with names identical to the named parameters, you can use a shortcut that will use the name of the variable for the named parameter:","['set', 'variable', 'name', 'identical', 'name', 'parameter', 'use', 'shortcut', 'use', 'variable', 'name', 'parameter']"
354,"In Ruby, constructors are created by defining a method called initialize. This method is executed to initialize each new instance.","['ruby', 'constructor', 'create', 'define', 'method', 'call', 'initialize', 'method', 'execute', 'initialize', 'new', 'instance']"
355,"In Visual Basic .NET, constructors use a method declaration with the name ""New"".","['visual', 'basic', '.net', 'constructor', 'use', 'method', 'declaration', 'new']"
356,"In software engineering, coupling is the degree of interdependence between software modules; a measure of how closely connected two routines or modules are;1 the strength of the relationships between modules.2","['software', 'engineering', 'coupling', 'degree', 'interdependence', 'software', 'module', 'measure', 'closely', 'connect', 'routine', 'module', 'are', 'strength', 'relationship', 'modules']"
357,"Coupling is usually contrasted with cohesion. Low coupling often correlates with high cohesion, and vice versa. Low coupling is often thought to be a sign of a well-structured computer system and a good design, and when combined with high cohesion, supports the general goals of high readability and maintainability.citation needed","['coupling', 'usually', 'contrast', 'cohesion', 'low', 'coupling', 'correlate', 'high', 'cohesion', 'vice', 'versa', 'low', 'coupling', 'think', 'sign', 'structure', 'computer', 'system', 'good', 'design', 'combine', 'high', 'cohesion', 'support', 'general', 'goal', 'high', 'readability', 'maintainability.citation', 'need']"
358,"The software quality metrics of coupling and cohesion were invented by Larry Constantine in the late 1960s as part of a structured design, based on characteristics of “good” programming practices that reduced maintenance and modification costs. Structured design, including cohesion and coupling, were published in the article Stevens, Myers & Constantine 19743 and the book Yourdon & Constantine 1979,4 and the latter subsequently became standard terms.","['software', 'quality', 'metric', 'coupling', 'cohesion', 'invent', 'larry', 'constantine', 'late', '1960', 'structured', 'design', 'base', 'characteristic', 'good', 'programming', 'practice', 'reduce', 'maintenance', 'modification', 'cost', 'structured', 'design', 'include', 'cohesion', 'coupling', 'publish', 'article', 'stevens', 'myers', 'constantine', '19743', 'book', 'yourdon', 'constantine', '1979', 'subsequently', 'standard', 'term']"
359,"Coupling can be ""low"" also ""loose"" and ""weak"" or ""high"" also ""tight"" and ""strong"". Some types of coupling, in order of highest to lowest coupling, are as follows:","['coupling', 'low', 'loose', 'weak', 'high', 'tight', 'strong', 'type', 'coupling', 'order', 'high', 'low', 'coupling', 'follow']"
360,"A module here refers to a subroutine of any kind, i.e. a set of one or more statements having a name and preferably its own set of variable names.","['module', 'refer', 'subroutine', 'kind', 'i.e.', 'set', 'statement', 'have', 'preferably', 'set', 'variable', 'name']"
361,In recent work various other coupling concepts have been investigated and used as indicators for different modularization principles used in practice.5,"['recent', 'work', 'coupling', 'concept', 'investigate', 'indicator', 'different', 'modularization', 'principle', 'practice']"
362,"The goal of this type of coupling is to provide a run-time evaluation of a software system. It has been argued that static coupling metrics lose precision when dealing with an intensive use of dynamic binding or inheritance.6 In the attempt to solve this issue, dynamic coupling measures have been taken into account.","['goal', 'type', 'coupling', 'provide', 'run', 'time', 'evaluation', 'software', 'system', 'argue', 'static', 'coupling', 'metric', 'lose', 'precision', 'deal', 'intensive', 'use', 'dynamic', 'binding', 'inheritance', 'attempt', 'solve', 'issue', 'dynamic', 'coupling', 'measure', 'take', 'account']"
363,"This kind of coupling considers the conceptual similarities between software entities using, for example, comments and identifiers and relying on techniques such as latent semantic indexing LSI.","['kind', 'coupling', 'consider', 'conceptual', 'similarity', 'software', 'entity', 'example', 'comment', 'identifier', 'rely', 'technique', 'latent', 'semantic', 'indexing', 'lsi']"
364,"Logical coupling or evolutionary coupling or change coupling exploits the release history of a software system to find change patterns among modules or classes: e.g., entities that are likely to be changed together or sequences of changes a change in a class A is always followed by a change in a class B.","['logical', 'coupling', 'evolutionary', 'coupling', 'change', 'couple', 'exploit', 'release', 'history', 'software', 'system', 'find', 'change', 'pattern', 'module', 'class', 'e.g.', 'entity', 'likely', 'change', 'sequence', 'change', 'change', 'class', 'follow', 'change', 'class']"
365,"Tightly coupled systems tend to exhibit the following developmental characteristics, which are often seen as disadvantages:","['tightly', 'couple', 'system', 'tend', 'exhibit', 'follow', 'developmental', 'characteristic', 'see', 'disadvantage']"
366,"Whether loosely or tightly coupled, a system's performance is often reduced by message and parameter creation, transmission, translation e.g. marshaling and message interpretation which might be a reference to a string, array or data structure, which require less overhead than creating a complicated message such as a SOAP message. Longer messages require more CPU and memory to produce. To optimize runtime performance, message length must be minimized and message meaning must be maximized.","['loosely', 'tightly', 'couple', 'system', 'performance', 'reduce', 'message', 'parameter', 'creation', 'transmission', 'translation', 'e.g.', 'marshaling', 'message', 'interpretation', 'reference', 'string', 'array', 'data', 'structure', 'require', 'overhead', 'create', 'complicated', 'message', 'soap', 'message', 'long', 'message', 'require', 'cpu', 'memory', 'produce', 'optimize', 'runtime', 'performance', 'message', 'length', 'minimize', 'message', 'meaning', 'maximize']"
367,"One approach to decreasing coupling is functional design, which seeks to limit the responsibilities of modules along functionality. Coupling increases between two classes A and B if:","['approach', 'decrease', 'coupling', 'functional', 'design', 'seek', 'limit', 'responsibility', 'module', 'functionality', 'couple', 'increase', 'class']"
368,Low coupling refers to a relationship in which one module interacts with another module through a simple and stable interface and does not need to be concerned with the other module's internal implementation see Information Hiding.,"['low', 'coupling', 'refer', 'relationship', 'module', 'interact', 'module', 'simple', 'stable', 'interface', 'need', 'concern', 'module', 'internal', 'implementation', 'information', 'hiding']"
369,Systems such as CORBA or COM allow objects to communicate with each other without having to know anything about the other object's implementation. Both of these systems even allow for objects to communicate with objects written in other languages.,"['system', 'corba', 'com', 'allow', 'object', 'communicate', 'have', 'know', 'object', 'implementation', 'system', 'allow', 'object', 'communicate', 'object', 'write', 'language']"
370,"Coupling and cohesion are terms which occur together very frequently. Coupling refers to the interdependencies between modules, while cohesion describes how related the functions within a single module are. Low cohesion implies that a given module performs tasks which are not very related to each other and hence can create problems as the module becomes large.","['coupling', 'cohesion', 'term', 'occur', 'frequently', 'coupling', 'refer', 'interdependency', 'module', 'cohesion', 'describe', 'relate', 'function', 'single', 'module', 'low', 'cohesion', 'imply', 'give', 'module', 'perform', 'task', 'related', 'create', 'problem', 'module', 'large']"
371,Coupling in Software Engineering7 describes a version of metrics associated with this concept.,"['couple', 'software', 'engineering7', 'describe', 'version', 'metric', 'associate', 'concept']"
372,For data and control flow coupling:,"['datum', 'control', 'flow', 'coupling']"
373,C o u p l i n g C = 1 − 1 d i + 2 × c i + d o + 2 × c o + g d + 2 × g c + w + r \displaystyle \mathrm Coupling C=1-\frac 1d_i+2\times c_i+d_o+2\times c_o+g_d+2\times g_c+w+r,"['coupling', 'g_c+w+r']"
374,CouplingC makes the value larger the more coupled the module is. This number ranges from approximately 0.67 low coupling to 1.0 highly coupled,"['couplingc', 'make', 'value', 'large', 'couple', 'module', 'number', 'range', 'approximately', '0', 'low', 'coupling', '1', 'highly', 'couple']"
375,"For example, if a module has only a single input and output data parameter","['example', 'module', 'single', 'input', 'output', 'datum', 'parameter']"
376,C = 1 − 1 1 + 0 + 1 + 0 + 0 + 0 + 1 + 0 = 1 − 1 3 = 0.67 \displaystyle C=1-\frac 11+0+1+0+0+0+1+0=1-\frac 13=0.67,"['0', '13=0']"
377,"If a module has 5 input and output data parameters, an equal number of control parameters, and accesses 10 items of global data, with a fan-in of 3 and a fan-out of 4,","['module', 'input', 'output', 'datum', 'parameter', 'equal', 'number', 'control', 'parameter', 'access', 'item', 'global', 'datum', 'fan', 'fan']"
378,C = 1 − 1 5 + 2 × 5 + 5 + 2 × 5 + 10 + 0 + 3 + 4 = 0.98 \displaystyle C=1-\frac 15+2\times 5+5+2\times 5+10+0+3+4=0.98,"['0', '4=0']"
379,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
380,"In computer programming languages, the term default constructor can refer to a constructor that is automatically generated by the compiler in the absence of any programmer-defined constructors e.g. in Java, and is usually a nullary constructor. In other languages e.g. in C++ it is a constructor that can be called without having to provide any arguments, irrespective of whether the constructor is auto-generated or user-defined. Note that a constructor with formal parameters can still be called without arguments if default arguments were provided in the constructor's definition.","['computer', 'programming', 'language', 'term', 'default', 'constructor', 'refer', 'constructor', 'automatically', 'generate', 'compiler', 'absence', 'programmer', 'define', 'constructor', 'e.g.', 'java', 'usually', 'nullary', 'constructor', 'language', 'e.g.', 'c++', 'constructor', 'call', 'have', 'provide', 'argument', 'irrespective', 'constructor', 'auto', 'generate', 'user', 'define', 'note', 'constructor', 'formal', 'parameter', 'call', 'argument', 'default', 'argument', 'provide', 'constructor', 'definition']"
381,"In C++, the standard describes the default constructor for a class as a constructor that can be called with no arguments this includes a constructor whose parameters all have default arguments.1 For example:","['c++', 'standard', 'describe', 'default', 'constructor', 'class', 'constructor', 'call', 'argument', 'include', 'constructor', 'parameter', 'default', 'arguments', 'example']"
382,"When allocating memory dynamically, the constructor may be called by adding parenthesis after the class name. In a sense, this is an explicit call to the constructor:","['allocate', 'memory', 'dynamically', 'constructor', 'call', 'add', 'parenthesis', 'class', 'sense', 'explicit', 'constructor']"
383,"If the constructor does have one or more parameters, but they all have default values, then it is still a default constructor. Remember that each class can have at most one default constructor, either one without parameters, or one whose all parameters have default values, such as in this case:","['constructor', 'parameter', 'default', 'value', 'default', 'constructor', 'remember', 'class', 'default', 'constructor', 'parameter', 'parameter', 'default', 'value', 'case']"
384,"In C++, default constructors are significant because they are automatically invoked in certain circumstances; and therefore, in these circumstances, it is an error for a class to not have a default constructor:","['c++', 'default', 'constructor', 'significant', 'automatically', 'invoke', 'certain', 'circumstance', 'circumstance', 'error', 'class', 'default', 'constructor']"
385,"If a class has no explicitly defined constructors, the compiler will implicitly declare and define a default constructor for it. This implicitly defined default constructor is equivalent to an explicitly defined one with an empty body. For example:2","['class', 'explicitly', 'define', 'constructor', 'compiler', 'implicitly', 'declare', 'define', 'default', 'constructor', 'implicitly', 'define', 'default', 'constructor', 'equivalent', 'explicitly', 'define', 'body', 'example']"
386,"If constructors are explicitly defined for a class, but they are all non-default, the compiler will not implicitly define a default constructor, leading to a situation where the class does not have a default constructor. This is the reason for a typical error, demonstrated by the following example.","['constructor', 'explicitly', 'define', 'class', 'non', 'default', 'compiler', 'implicitly', 'define', 'default', 'constructor', 'lead', 'situation', 'class', 'default', 'constructor', 'reason', 'typical', 'error', 'demonstrate', 'follow', 'example']"
387,"Since neither the programmer nor the compiler has defined a default constructor, the creation of the objected pointed to by p leads to an error.3","['programmer', 'compiler', 'define', 'default', 'constructor', 'creation', 'object', 'point', 'lead', 'error']"
388,On the other hand in C++11 a default constructor can be explicitly created:,"['hand', 'c++11', 'default', 'constructor', 'explicitly', 'create']"
389,"In both Java and C#, a ""default constructor"" refers to a nullary constructor that is automatically generated by the compiler if no constructors have been defined for the class. The default constructor implicitly calls the superclass's nullary constructor, then executes an empty body. All fields are left at their initial value of 0 integer types, 0.0 floating-point types, false boolean type, or null reference types. A programmer-defined constructor that takes no parameters is also called a default constructor in C#, but not in Java.45","['java', 'default', 'constructor', 'refer', 'nullary', 'constructor', 'automatically', 'generate', 'compiler', 'constructor', 'define', 'class', 'default', 'constructor', 'implicitly', 'call', 'superclass', 'nullary', 'constructor', 'execute', 'body', 'field', 'leave', 'initial', 'value', 'integer', 'type', '0', 'float', 'point', 'type', 'false', 'boolean', 'type', 'null', 'reference', 'type', 'programmer', 'define', 'constructor', 'take', 'parameter', 'call', 'default', 'constructor', 'java']"
390,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
391,"In object-oriented programming, a destructor sometimes abbreviated dtor1 is a method which is invoked mechanically just before the memory of the object is released.2 It can happen when its lifetime is bound to scope and the execution leaves the scope, when it is embedded in another object whose lifetime ends, or when it was allocated dynamically and is released explicitly. Its main purpose is to free the resources memory allocations, open files or sockets, database connections, resource locks, etc. which were acquired by the object during its life and/or deregister from other entities which may keep references to it. Use of destructors is needed for the process of Resource Acquisition Is Initialization RAII.","['object', 'orient', 'programming', 'destructor', 'abbreviate', 'dtor1', 'method', 'invoke', 'mechanically', 'memory', 'object', 'released', 'happen', 'lifetime', 'bind', 'scope', 'execution', 'leave', 'scope', 'embed', 'object', 'lifetime', 'end', 'allocate', 'dynamically', 'release', 'explicitly', 'main', 'purpose', 'free', 'resource', 'memory', 'allocation', 'open', 'file', 'socket', 'database', 'connection', 'resource', 'lock', 'etc', 'acquire', 'object', 'life', 'deregister', 'entity', 'reference', 'use', 'destructor', 'need', 'process', 'resource', 'acquisition', 'initialization', 'raii']"
392,"With most kinds of automatic garbage collection algorithms, the releasing of memory may happen a long time after the object becomes unreachable, making destructors called finalizers in this case unsuitable for most purposes. In such languages, the freeing of resources is done either through a lexical construct such as try..finally, Python's ""with"" or Java's ""try-with-resources"", which is the equivalent to RAII, or explicitly by calling a function equivalent to explicit deletion; in particular, many object-oriented languages use the Dispose pattern.","['kind', 'automatic', 'garbage', 'collection', 'algorithm', 'releasing', 'memory', 'happen', 'long', 'time', 'object', 'unreachable', 'make', 'destructor', 'call', 'finalizer', 'case', 'unsuitable', 'purpose', 'language', 'freeing', 'resource', 'lexical', 'construct', 'try', 'finally', 'python', 'java', 'try', 'resource', 'equivalent', 'raii', 'explicitly', 'call', 'function', 'equivalent', 'explicit', 'deletion', 'particular', 'object', 'orient', 'language', 'use', 'dispose', 'pattern']"
393,"The destructor has the same name as the class, but with a tilde ~ before it.2 For example, a class called foo will have the destructor ~foo. Additionally, destructors have neither parameters nor return types.2 As stated above, a destructor for an object is called whenever the object's lifetime ends.2 If the object was created as an automatic variable, its lifetime ends and the destructor is called automatically when the object goes out of scope. Because C++ does not have garbage collection, if the object was created with a new statement dynamically on the heap, then its destructor is called when the delete operator is applied to a pointer to the object. Usually that operation occurs within another destructor, typically the destructor of a smart pointer object.","['destructor', 'class', 'tilde', 'it', 'example', 'class', 'call', 'foo', 'destructor', '~foo', 'additionally', 'destructor', 'parameter', 'return', 'types', 'state', 'destructor', 'object', 'call', 'object', 'lifetime', 'ends', 'object', 'create', 'automatic', 'variable', 'lifetime', 'end', 'destructor', 'call', 'automatically', 'object', 'go', 'scope', 'c++', 'garbage', 'collection', 'object', 'create', 'new', 'statement', 'dynamically', 'heap', 'destructor', 'call', 'delete', 'operator', 'apply', 'pointer', 'object', 'usually', 'operation', 'occur', 'destructor', 'typically', 'destructor', 'smart', 'pointer', 'object']"
394,"In inheritance hierarchies, the declaration of a virtual destructor in the base class ensures that the destructors of derived classes are invoked properly when an object is deleted through a pointer-to-base-class. Objects that may be deleted in this way need to inherit a virtual destructor.","['inheritance', 'hierarchy', 'declaration', 'virtual', 'destructor', 'base', 'class', 'ensure', 'destructor', 'derive', 'class', 'invoke', 'properly', 'object', 'delete', 'pointer', 'base', 'class', 'object', 'delete', 'way', 'need', 'inherit', 'virtual', 'destructor']"
395,A destructor should never throw an exception.7,"['destructor', 'throw', 'exception']"
396,Non-class scalar types have what's called a .mw-parser-output .vanchor>:target~.vanchor-textbackground-color:#b1d2ffpseudo-destructor which can be accessed by using typedef or template arguments. This construct makes it possible to write code without having to know if a destructor exists for a given type.,"['non', 'class', 'scalar', 'type', 'call', '.mw', 'parser', 'output', '.vanchor>:target~.vanchor', 'textbackground', 'color:#b1d2ffpseudo', 'destructor', 'access', 'typedef', 'template', 'argument', 'construct', 'make', 'possible', 'write', 'code', 'have', 'know', 'destructor', 'exist', 'give', 'type']"
397,"In older versions of the standard, pseudo-destructors were specified to have no effect, however that was changed in a defect report to make them end the lifetime of the object they are called on.8","['old', 'version', 'standard', 'pseudo', 'destructor', 'specify', 'effect', 'change', 'defect', 'report', 'end', 'lifetime', 'object', 'call', 'on']"
398,"Objects which cannot be safely copied and/or assigned should be disabled from such semantics by declaring their corresponding functions as deleted within a public encapsulation level. A detailed description of this method can be found in Scott Meyers' popular book, Effective Modern C++ Item 11: ""Prefer deleted functions to private undefined ones.""9.","['object', 'safely', 'copy', 'assign', 'disable', 'semantic', 'declare', 'correspond', 'function', 'delete', 'public', 'encapsulation', 'level', 'detailed', 'description', 'method', 'find', 'scott', 'meyers', 'popular', 'book', 'effective', 'modern', 'c++', 'item', 'prefer', 'delete', 'function', 'private', 'undefined', 'one']"
399,The GNU Compiler Collection's C compiler comes with 2 extensions that allow implementing destructors:,"['gnu', 'compiler', 'collection', 'compiler', 'come', 'extension', 'allow', 'implement', 'destructor']"
400,Destructors in Xojo REALbasic can be in one of two forms. Each form uses a regular method declaration with a special name with no parameters and no return value. The older form uses the same name as the Class with a ~ tilde prefix. The newer form uses the name Destructor. The newer form is preferred because it makes refactoring the class easier.,"['destructor', 'xojo', 'realbasic', 'form', 'form', 'use', 'regular', 'method', 'declaration', 'special', 'parameter', 'return', 'value', 'old', 'form', 'use', 'class', 'tilde', 'prefix', 'new', 'form', 'use', 'destructor', 'new', 'form', 'preferred', 'make', 'refactore', 'class', 'easier']"
401,"In computer science, dynamic dispatch is the process of selecting which implementation of a polymorphic operation method or function to call at run time. It is commonly employed in, and considered a prime characteristic of, object-oriented programming OOP languages and systems.1","['computer', 'science', 'dynamic', 'dispatch', 'process', 'select', 'implementation', 'polymorphic', 'operation', 'method', 'function', 'run', 'time', 'commonly', 'employ', 'consider', 'prime', 'characteristic', 'object', 'orient', 'programming', 'oop', 'language', 'systems']"
402,"Object-oriented systems model a problem as a set of interacting objects that enact operations referred to by name. Polymorphism is the phenomenon wherein somewhat interchangeable objects each expose an operation of the same name but possibly differing in behavior. As an example, a .mw-parser-output .monospacedfont-family:monospace,monospaceFile object and a Database object both have a StoreRecord method that can be used to write a personnel record to storage. Their implementations differ. A program holds a reference to an object which may be either a File object or a Database object. Which it is may have been determined by a run-time setting, and at this stage, the program may not know or care which. When the program calls StoreRecord on the object, something needs to choose which behavior gets enacted. If one thinks of OOP as sending messages to objects, then in this example the program sends a StoreRecord message to an object of unknown type, leaving it to the run-time support system to dispatch the message to the right object. The object enacts whichever behavior it implements.2","['object', 'orient', 'system', 'model', 'problem', 'set', 'interact', 'object', 'enact', 'operation', 'refer', 'polymorphism', 'phenomenon', 'somewhat', 'interchangeable', 'object', 'expose', 'operation', 'possibly', 'differ', 'behavior', 'example', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacefile', 'object', 'database', 'object', 'storerecord', 'method', 'write', 'personnel', 'record', 'storage', 'implementation', 'differ', 'program', 'hold', 'reference', 'object', 'file', 'object', 'database', 'object', 'determine', 'run', 'time', 'setting', 'stage', 'program', 'know', 'care', 'program', 'call', 'storerecord', 'object', 'need', 'choose', 'behavior', 'gets', 'enact', 'think', 'oop', 'send', 'message', 'object', 'example', 'program', 'send', 'storerecord', 'message', 'object', 'unknown', 'type', 'leave', 'run', 'time', 'support', 'system', 'dispatch', 'message', 'right', 'object', 'object', 'enact', 'whichever', 'behavior', 'implements']"
403,"Dynamic dispatch contrasts with static dispatch, in which the implementation of a polymorphic operation is selected at compile time. The purpose of dynamic dispatch is to defer the selection of an appropriate implementation until the run time type of a parameter or multiple parameters is known.","['dynamic', 'dispatch', 'contrast', 'static', 'dispatch', 'implementation', 'polymorphic', 'operation', 'select', 'compile', 'time', 'purpose', 'dynamic', 'dispatch', 'defer', 'selection', 'appropriate', 'implementation', 'run', 'time', 'type', 'parameter', 'multiple', 'parameter', 'know']"
404,"Dynamic dispatch is different from late binding also known as dynamic binding. Name binding associates a name with an operation. A polymorphic operation has several implementations, all associated with the same name. Bindings can be made at compile time or with late binding at run time. With dynamic dispatch, one particular implementation of an operation is chosen at run time. While dynamic dispatch does not imply late binding, late binding does imply dynamic dispatch, since the implementation of a late-bound operation is not known until run time.citation needed","['dynamic', 'dispatch', 'different', 'late', 'binding', 'know', 'dynamic', 'bind', 'bind', 'associate', 'operation', 'polymorphic', 'operation', 'implementation', 'associate', 'binding', 'compile', 'time', 'late', 'binding', 'run', 'time', 'dynamic', 'dispatch', 'particular', 'implementation', 'operation', 'choose', 'run', 'time', 'dynamic', 'dispatch', 'imply', 'late', 'bind', 'late', 'binding', 'imply', 'dynamic', 'dispatch', 'implementation', 'late', 'bind', 'operation', 'know', 'run', 'time.citation', 'need']"
405,"The choice of which version of a method to call may be based either on a single object, or on a combination of objects. The former is called single dispatch and is directly supported by common object-oriented languages such as Smalltalk, C++, Java, C#, Objective-C, Swift, JavaScript, and Python. In these and similar languages, one may call a method for division with syntax that resembles","['choice', 'version', 'method', 'base', 'single', 'object', 'combination', 'object', 'call', 'single', 'dispatch', 'directly', 'support', 'common', 'object', 'orient', 'language', 'smalltalk', 'c++', 'java', 'objective', 'swift', 'javascript', 'python', 'similar', 'language', 'method', 'division', 'syntax', 'resemble']"
406,"where the parameters are optional. This is thought of as sending a message named divide with parameter divisor to dividend. An implementation will be chosen based only on dividend's type perhaps rational, floating point, matrix, disregarding the type or value of divisor.","['parameter', 'optional', 'think', 'send', 'message', 'name', 'divide', 'parameter', 'divisor', 'dividend', 'implementation', 'choose', 'base', 'dividend', 'type', 'rational', 'float', 'point', 'matrix', 'disregard', 'type', 'value', 'divisor']"
407,"By contrast, some languages dispatch methods or functions based on the combination of operands; in the division case, the types of the dividend and divisor together determine which divide operation will be performed. This is known as multiple dispatch. Examples of languages that support multiple dispatch are Common Lisp, Dylan, and Julia.","['contrast', 'language', 'dispatch', 'method', 'function', 'base', 'combination', 'operand', 'division', 'case', 'type', 'dividend', 'divisor', 'determine', 'divide', 'operation', 'perform', 'know', 'multiple', 'dispatch', 'example', 'language', 'support', 'multiple', 'dispatch', 'common', 'lisp', 'dylan', 'julia']"
408,A language may be implemented with different dynamic dispatch mechanisms. The choices of the dynamic dispatch mechanism offered by a language to a large extent alter the programming paradigms that are available or are most natural to use within a given language.,"['language', 'implement', 'different', 'dynamic', 'dispatch', 'mechanism', 'choice', 'dynamic', 'dispatch', 'mechanism', 'offer', 'language', 'large', 'extent', 'alter', 'programming', 'paradigms', 'available', 'natural', 'use', 'give', 'language']"
409,"Normally, in a typed language, the dispatch mechanism will be performed based on the type of the arguments most commonly based on the type of the receiver of a message. Languages with weak or no typing systems often carry a dispatch table as part of the object data for each object. This allows instance behaviour as each instance may map a given message to a separate method.","['normally', 'typed', 'language', 'dispatch', 'mechanism', 'perform', 'base', 'type', 'argument', 'commonly', 'base', 'type', 'receiver', 'message', 'language', 'weak', 'typing', 'system', 'carry', 'dispatch', 'table', 'object', 'datum', 'object', 'allow', 'instance', 'behaviour', 'instance', 'map', 'give', 'message', 'separate', 'method']"
410,Some languages offer a hybrid approach.,"['language', 'offer', 'hybrid', 'approach']"
411,Dynamic dispatch will always incur an overhead so some languages offer static dispatch for particular methods.,"['dynamic', 'dispatch', 'incur', 'overhead', 'language', 'offer', 'static', 'dispatch', 'particular', 'method']"
412,C++ uses early binding and offers both dynamic and static dispatch. The default form of dispatch is static. To get dynamic dispatch the programmer must declare a method as virtual.,"['c++', 'use', 'early', 'bind', 'offer', 'dynamic', 'static', 'dispatch', 'default', 'form', 'dispatch', 'static', 'dynamic', 'dispatch', 'programmer', 'declare', 'method', 'virtual']"
413,"C++ compilers typically implement dynamic dispatch with a data structure called a virtual function table vtable that defines the name-to-implementation mapping for a given class as a set of member function pointers. This is purely an implementation detail; the C++ specification does not mention vtables. Instances of that type will then store a pointer to this table as part of their instance data. This is complicated when multiple inheritance is used. Since C++ does not support late binding, the virtual table in a C++ object cannot be modified at run-time, which limits the potential set of dispatch targets to a finite set chosen at compile time.","['c++', 'compiler', 'typically', 'implement', 'dynamic', 'dispatch', 'data', 'structure', 'call', 'virtual', 'function', 'table', 'vtable', 'define', 'implementation', 'mapping', 'give', 'class', 'set', 'member', 'function', 'pointer', 'purely', 'implementation', 'detail', 'c++', 'specification', 'mention', 'vtable', 'instance', 'type', 'store', 'pointer', 'table', 'instance', 'datum', 'complicated', 'multiple', 'inheritance', 'c++', 'support', 'late', 'bind', 'virtual', 'table', 'c++', 'object', 'modify', 'run', 'time', 'limit', 'potential', 'set', 'dispatch', 'target', 'finite', 'set', 'choose', 'compile', 'time']"
414,Type overloading does not produce dynamic dispatch in C++ as the language considers the types of the message parameters part of the formal message name. This means that the message name the programmer sees is not the formal name used for binding.,"['type', 'overloading', 'produce', 'dynamic', 'dispatch', 'c++', 'language', 'consider', 'type', 'message', 'parameter', 'formal', 'message', 'mean', 'message', 'programmer', 'see', 'formal', 'bind']"
415,"In Go, Rust and Nim, a more versatile variation of early binding is used. Vtable pointers are carried with object references as 'fat pointers' 'interfaces' in Go, or 'trait objects' in Rust.citation needed","['rust', 'nim', 'versatile', 'variation', 'early', 'binding', 'vtable', 'pointer', 'carry', 'object', 'reference', 'fat', 'pointer', 'interface', 'trait', 'object', 'rust.citation', 'need']"
416,"This decouples the supported interfaces from the underlying data structures. Each compiled library needn't know the full range of interfaces supported in order to correctly use a type, just the specific vtable layout that they require. Code can pass around different interfaces to the same piece of data to different functions. This versatility comes at the expense of extra data with each object reference, which is problematic if many such references are stored persistently.","['decouple', 'support', 'interface', 'underlying', 'data', 'structure', 'compile', 'library', 'need', 'know', 'range', 'interface', 'support', 'order', 'correctly', 'use', 'type', 'specific', 'vtable', 'layout', 'require', 'code', 'pass', 'different', 'interface', 'piece', 'datum', 'different', 'function', 'versatility', 'come', 'expense', 'extra', 'datum', 'object', 'reference', 'problematic', 'reference', 'store', 'persistently']"
417,"The term fat pointer simply refers to a pointer with additional associated information. The additional information may be a vtable pointer for dynamic dispatch described above, but is more commonly the associated object's size to describe e.g. a slice.citation needed","['term', 'fat', 'pointer', 'simply', 'refer', 'pointer', 'additional', 'associated', 'information', 'additional', 'information', 'vtable', 'pointer', 'dynamic', 'dispatch', 'describe', 'commonly', 'associated', 'object', 'size', 'describe', 'e.g.', 'slice.citation', 'need']"
418,"Smalltalk uses a type-based message dispatcher. Each instance has a single type whose definition contains the methods. When an instance receives a message, the dispatcher looks up the corresponding method in the message-to-method map for the type and then invokes the method.","['smalltalk', 'use', 'type', 'base', 'message', 'dispatcher', 'instance', 'single', 'type', 'definition', 'contain', 'method', 'instance', 'receive', 'message', 'dispatcher', 'look', 'corresponding', 'method', 'message', 'method', 'map', 'type', 'invoke', 'method']"
419,"Because a type can have a chain of base types, this look-up can be expensive. A naive implementation of Smalltalk's mechanism would seem to have a significantly higher overhead than that of C++ and this overhead would be incurred for each and every message that an object receives.","['type', 'chain', 'base', 'type', 'look', 'expensive', 'naive', 'implementation', 'smalltalk', 'mechanism', 'significantly', 'high', 'overhead', 'c++', 'overhead', 'incur', 'message', 'object', 'receive']"
420,"Real Smalltalk implementations often use a technique known as inline caching3 that makes method dispatch very fast. Inline caching basically stores the previous destination method address and object class of the call site or multiple pairs for multi-way caching. The cached method is initialized with the most common target method or just the cache miss handler, based on the method selector. When the method call site is reached during execution, it just calls the address in the cache. In a dynamic code generator, this call is a direct call as the direct address is back patched by cache miss logic. Prologue code in the called method then compares the cached class with the actual object class, and if they don't match, execution branches to a cache miss handler to find the correct method in the class. A fast implementation may have multiple cache entries and it often only takes a couple of instructions to get execution to the correct method on an initial cache miss. The common case will be a cached class match, and execution will just continue in the method.","['real', 'smalltalk', 'implementation', 'use', 'technique', 'know', 'inline', 'caching3', 'make', 'method', 'dispatch', 'fast', 'inline', 'cache', 'basically', 'store', 'previous', 'destination', 'method', 'address', 'object', 'class', 'site', 'multiple', 'pair', 'multi', 'way', 'cache', 'cached', 'method', 'initialize', 'common', 'target', 'method', 'cache', 'miss', 'handler', 'base', 'method', 'selector', 'method', 'site', 'reach', 'execution', 'call', 'address', 'cache', 'dynamic', 'code', 'generator', 'direct', 'direct', 'address', 'patch', 'cache', 'miss', 'logic', 'prologue', 'code', 'call', 'method', 'compare', 'cached', 'class', 'actual', 'object', 'class', 'match', 'execution', 'branch', 'cache', 'miss', 'handler', 'find', 'correct', 'method', 'class', 'fast', 'implementation', 'multiple', 'cache', 'entry', 'take', 'couple', 'instruction', 'execution', 'correct', 'method', 'initial', 'cache', 'miss', 'common', 'case', 'cached', 'class', 'match', 'execution', 'continue', 'method']"
421,"Out-of-line caching can also be used in the method invocation logic, using the object class and method selector. In one design, the class and method selector are hashed, and used as an index into a method dispatch cache table.","['line', 'caching', 'method', 'invocation', 'logic', 'object', 'class', 'method', 'selector', 'design', 'class', 'method', 'selector', 'hash', 'index', 'method', 'dispatch', 'cache', 'table']"
422,"As Smalltalk is a reflective language, many implementations allow mutating individual objects into objects with dynamically generated method lookup tables. This allows altering object behavior on a per object basis. A whole category of languages known as prototype-based languages has grown from this, the most famous of which are Self and JavaScript. Careful design of the method dispatch caching allows even prototype-based languages to have high-performance method dispatch.","['smalltalk', 'reflective', 'language', 'implementation', 'allow', 'mutate', 'individual', 'object', 'object', 'dynamically', 'generate', 'method', 'lookup', 'table', 'allow', 'alter', 'object', 'behavior', 'object', 'basis', 'category', 'language', 'know', 'prototype', 'base', 'language', 'grow', 'famous', 'self', 'javascript', 'careful', 'design', 'method', 'dispatch', 'caching', 'allow', 'prototype', 'base', 'language', 'high', 'performance', 'method', 'dispatch']"
423,"Many other dynamically typed languages, including Python, Ruby, Objective-C and Groovy use similar approaches.","['dynamically', 'type', 'language', 'include', 'python', 'ruby', 'objective', 'groovy', 'use', 'similar', 'approach']"
424,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
425,"In software systems, encapsulation refers to the bundling of data with the mechanisms or methods that operate on the data, or the limiting of direct access to some data, such as an object's components.1 Encapsulation allows developers to present a consistent and usable interface which is independent of how a system is implemented internally. As one example, encapsulation can be used to hide the values or state of a structured data object inside a class, preventing direct access to them by clients in a way that could expose hidden implementation details or violate state invariance maintained by the methods.","['software', 'system', 'encapsulation', 'refer', 'bundling', 'datum', 'mechanism', 'method', 'operate', 'datum', 'limiting', 'direct', 'access', 'datum', 'object', 'components', 'encapsulation', 'allow', 'developer', 'present', 'consistent', 'usable', 'interface', 'independent', 'system', 'implement', 'internally', 'example', 'encapsulation', 'hide', 'value', 'state', 'structured', 'datum', 'object', 'inside', 'class', 'prevent', 'direct', 'access', 'client', 'way', 'expose', 'hidden', 'implementation', 'detail', 'violate', 'state', 'invariance', 'maintain', 'method']"
426,"All object-oriented programming OOP systems support encapsulation, but encapsulation is not unique to OOP. Implementations of abstract data types, modules, and libraries, among other systems, also offer encapsulation. The similarity has been explained by programming language theorists in terms of existential types.2","['object', 'orient', 'programming', 'oop', 'system', 'support', 'encapsulation', 'encapsulation', 'unique', 'oop', 'implementation', 'abstract', 'datum', 'type', 'module', 'library', 'system', 'offer', 'encapsulation', 'similarity', 'explain', 'programming', 'language', 'theorist', 'term', 'existential', 'types']"
427,"In object-oriented programming languages, and other related fields, encapsulation refers to one of two related but distinct notions, and sometimes to the combination thereof:34","['object', 'orient', 'programming', 'language', 'related', 'field', 'encapsulation', 'refer', 'related', 'distinct', 'notion', 'combination', 'thereof']"
428,"Some programming language researchers and academics use the first meaning alone or in combination with the second as a distinguishing feature of object-oriented programming, while some programming languages that provide lexical closures view encapsulation as a feature of the language orthogonal to object orientation.","['programming', 'language', 'researcher', 'academic', 'use', 'meaning', 'combination', 'second', 'distinguish', 'feature', 'object', 'orient', 'programming', 'programming', 'language', 'provide', 'lexical', 'closure', 'view', 'encapsulation', 'feature', 'language', 'orthogonal', 'object', 'orientation']"
429,"The second definition is motivated by the fact that in many object-oriented languages, and other related fields, the components are not hidden automatically and this can be overridden; thus, information hiding is defined as a separate notion by those who prefer the second definition.","['second', 'definition', 'motivate', 'fact', 'object', 'orient', 'language', 'related', 'field', 'component', 'hide', 'automatically', 'overridden', 'information', 'hiding', 'define', 'separate', 'notion', 'prefer', 'second', 'definition']"
430,"The features of encapsulation are supported using classes in most object-oriented languages, although other alternatives also exist.","['feature', 'encapsulation', 'support', 'class', 'object', 'orient', 'language', 'alternative', 'exist']"
431,"The authors of Design Patterns discuss the tension between inheritance and encapsulation at length and state that in their experience, designers overuse inheritance. They claim that inheritance often breaks encapsulation, given that inheritance exposes a subclass to the details of its parent's implementation.8 As described by the yo-yo problem, overuse of inheritance and therefore encapsulation, can become too complicated and hard to debug.","['author', 'design', 'patterns', 'discuss', 'tension', 'inheritance', 'encapsulation', 'length', 'state', 'experience', 'designer', 'overuse', 'inheritance', 'claim', 'inheritance', 'break', 'encapsulation', 'give', 'inheritance', 'expose', 'subclass', 'detail', 'parent', 'implementation', 'describe', 'problem', 'overuse', 'inheritance', 'encapsulation', 'complicated', 'hard', 'debug']"
432,"Under the definition that encapsulation ""can be used to hide data members and member functions"", the internal representation of an object is generally hidden from view outside of the object's definition. Typically, only the object's own methods can directly inspect or manipulate its fields. Hiding the internals of the object protects its integrity by preventing users from setting the internal data of the component into an invalid or inconsistent state. A supposed benefit of encapsulation is that it can reduce system complexity, and thus increase robustness, by allowing the developer to limit the interdependencies between software components.citation needed","['definition', 'encapsulation', 'hide', 'data', 'member', 'member', 'function', 'internal', 'representation', 'object', 'generally', 'hide', 'view', 'outside', 'object', 'definition', 'typically', 'object', 'method', 'directly', 'inspect', 'manipulate', 'field', 'hide', 'internal', 'object', 'protect', 'integrity', 'prevent', 'user', 'set', 'internal', 'datum', 'component', 'invalid', 'inconsistent', 'state', 'supposed', 'benefit', 'encapsulation', 'reduce', 'system', 'complexity', 'increase', 'robustness', 'allow', 'developer', 'limit', 'interdependency', 'software', 'components.citation', 'need']"
433,"Some languages like Smalltalk and Ruby only allow access via object methods, but most others e.g., C++, C#, Delphi or Java offer the programmer a degree of control over what is hidden, typically via keywords like public and private.6 ISO C++ standard refers to protected, private and public as ""access specifiers"" and that they do not ""hide any information"". Information hiding is accomplished by furnishing a compiled version of the source code that is interfaced via a header file.","['language', 'like', 'smalltalk', 'ruby', 'allow', 'access', 'object', 'method', 'e.g.', 'c++', 'delphi', 'java', 'offer', 'programmer', 'degree', 'control', 'hide', 'typically', 'keyword', 'like', 'public', 'private', 'iso', 'c++', 'standard', 'refer', 'protect', 'private', 'public', 'access', 'specifier', 'hide', 'information', 'information', 'hiding', 'accomplish', 'furnish', 'compile', 'version', 'source', 'code', 'interface', 'header', 'file']"
434,"Almost always, there is a way to override such protection – usually via reflection API Ruby, Java, C#, etc., sometimes by mechanism like name mangling Python, or special keyword usage like friend in C++. Systems that provide object-level capability-based security adhering to the object-capability model are an exception, and guarantee strong encapsulation.","['way', 'override', 'protection', 'usually', 'reflection', 'api', 'ruby', 'java', 'etc', 'mechanism', 'like', 'mangle', 'python', 'special', 'keyword', 'usage', 'like', 'friend', 'c++', 'systems', 'provide', 'object', 'level', 'capability', 'base', 'security', 'adhere', 'object', 'capability', 'model', 'exception', 'guarantee', 'strong', 'encapsulation']"
435,"Languages like C++, C#, Java, PHP, Swift, and Delphi offer ways to restrict access to data fields.","['language', 'like', 'c++', 'java', 'php', 'swift', 'delphi', 'offer', 'way', 'restrict', 'access', 'data', 'field']"
436,Below is an example in C# that shows how access to a data field can be restricted through the use of a private keyword:,"['example', 'show', 'access', 'datum', 'field', 'restrict', 'use', 'private', 'keyword']"
437,Below is an example in Java:,"['example', 'java']"
438,"Encapsulation is also possible in non-object-oriented languages. In C, for example, a structure can be declared in the public API via the header file for a set of functions that operate on an item of data containing data members that are not accessible to clients of the API with the extern keyword.910","['encapsulation', 'possible', 'non', 'object', 'orient', 'language', 'example', 'structure', 'declare', 'public', 'api', 'header', 'file', 'set', 'function', 'operate', 'item', 'datum', 'contain', 'datum', 'member', 'accessible', 'client', 'api', 'extern', 'keyword']"
439,"Clients call the API functions to allocate, operate on, and deallocate objects of an opaque data type. The contents of this type are known and accessible only to the implementation of the API functions; clients cannot directly access its contents. The source code for these functions defines the actual contents of the structure:","['client', 'api', 'function', 'allocate', 'operate', 'deallocate', 'object', 'opaque', 'datum', 'type', 'content', 'type', 'know', 'accessible', 'implementation', 'api', 'function', 'client', 'directly', 'access', 'content', 'source', 'code', 'function', 'define', 'actual', 'content', 'structure']"
440,"Below is an example of Python, which does not support variable access restrictions. However, the convention is that a variable whose name is prefixed by an underscore should be considered private.11","['example', 'python', 'support', 'variable', 'access', 'restriction', 'convention', 'variable', 'prefix', 'underscore', 'consider', 'private']"
441,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
442,"In computing and computer programming, exception handling is the process of responding to the occurrence of exceptions – anomalous or exceptional conditions requiring special processing – during the execution of a program. In general, an exception breaks the normal flow of execution and executes a pre-registered exception handler; the details of how this is done depend on whether it is a hardware or software exception and how the software exception is implemented. Exception handling, if provided, is facilitated by specialized programming language constructs, hardware mechanisms like interrupts, or operating system OS inter-process communication IPC facilities like signals. Some exceptions, especially hardware ones, may be handled so gracefully that execution can resume where it was interrupted.","['computing', 'computer', 'programming', 'exception', 'handling', 'process', 'respond', 'occurrence', 'exception', 'anomalous', 'exceptional', 'condition', 'require', 'special', 'processing', 'execution', 'program', 'general', 'exception', 'break', 'normal', 'flow', 'execution', 'execute', 'pre', 'registered', 'exception', 'handler', 'detail', 'depend', 'hardware', 'software', 'exception', 'software', 'exception', 'implement', 'exception', 'handling', 'provide', 'facilitate', 'specialized', 'programming', 'language', 'construct', 'hardware', 'mechanism', 'like', 'interrupt', 'operating', 'system', 'inter', 'process', 'communication', 'ipc', 'facility', 'like', 'signal', 'exception', 'especially', 'hardware', 'one', 'handle', 'gracefully', 'execution', 'resume', 'interrupt']"
443,"The definition of an exception is based on the observation that each procedure has a precondition, a set of circumstances for which it will terminate ""normally"".1 An exception handling mechanism allows the procedure to raise an exception2 if this precondition is violated,1 for example if the procedure has been called on an abnormal set of arguments. The exception handling mechanism then handles the exception.3 The precondition, and the definition of exception, is subjective. The set of ""normal"" circumstances is defined entirely by the programmer, e.g. the programmer may deem division by zero to be undefined, hence an exception, or devise some behavior such as returning zero or a special ""ZERO DIVIDE"" value circumventing the need for exceptions.4 Common exceptions include an invalid argument e.g. value is outside of the domain of a function, an unavailable resource like a missing file, a hard disk error, or out-of-memory errors, or that the routine has detected a normal condition that requires special handling, e.g., attention, end of file.","['definition', 'exception', 'base', 'observation', 'procedure', 'precondition', 'set', 'circumstance', 'terminate', 'normally', 'exception', 'handling', 'mechanism', 'allow', 'procedure', 'raise', 'exception2', 'precondition', 'violated', 'example', 'procedure', 'call', 'abnormal', 'set', 'argument', 'exception', 'handling', 'mechanism', 'handle', 'exception', 'precondition', 'definition', 'exception', 'subjective', 'set', 'normal', 'circumstance', 'define', 'entirely', 'programmer', 'e.g.', 'programmer', 'deem', 'division', 'zero', 'undefine', 'exception', 'devise', 'behavior', 'return', 'zero', 'special', 'zero', 'divide', 'value', 'circumvent', 'need', 'exceptions', 'common', 'exception', 'include', 'invalid', 'argument', 'e.g.', 'value', 'outside', 'domain', 'function', 'unavailable', 'resource', 'like', 'miss', 'file', 'hard', 'disk', 'error', 'memory', 'error', 'routine', 'detect', 'normal', 'condition', 'require', 'special', 'handling', 'e.g.', 'attention', 'end', 'file']"
444,"Exception handling solves the semipredicate problem, in that the mechanism distinguishes normal return values from erroneous ones. In languages without built-in exception handling such as C, routines would need to signal the error in some other way, such as the common return code and errno pattern.5 Taking a broad view, errors can be considered to be a proper subset of exceptions,6 and explicit error mechanisms such as errno can be considered verbose forms of exception handling.5 The term ""exception"" is preferred to ""error"" because it does not imply that anything is wrong - a condition viewed as an error by one procedure or programmer may not be viewed that way by another. Even the term ""exception"" may be misleading because its typical connotation of ""outlier"" indicates that something infrequent or unusual has occurred, when in fact raising the exception may be a normal and usual situation in the program.7 For example, suppose a lookup function for an associative array throws an exception if the key has no value associated. Depending on context, this ""key absent"" exception may occur much more often than a successful lookup.8","['exception', 'handle', 'solve', 'semipredicate', 'problem', 'mechanism', 'distinguish', 'normal', 'return', 'value', 'erroneous', 'one', 'language', 'build', 'exception', 'handle', 'routine', 'need', 'signal', 'error', 'way', 'common', 'return', 'code', 'errno', 'pattern', 'take', 'broad', 'view', 'error', 'consider', 'proper', 'subset', 'exceptions', 'explicit', 'error', 'mechanism', 'errno', 'consider', 'verbose', 'form', 'exception', 'handling', 'term', 'exception', 'prefer', 'error', 'imply', 'wrong', 'condition', 'view', 'error', 'procedure', 'programmer', 'view', 'way', 'term', 'exception', 'misleading', 'typical', 'connotation', 'outlier', 'indicate', 'infrequent', 'unusual', 'occur', 'fact', 'raise', 'exception', 'normal', 'usual', 'situation', 'program', 'example', 'suppose', 'lookup', 'function', 'associative', 'array', 'throw', 'exception', 'key', 'value', 'associate', 'depend', 'context', 'key', 'absent', 'exception', 'occur', 'successful', 'lookup']"
445,"A major influence on the scope and use of exceptions is social pressure, i.e. ""examples of use, typically found in core libraries, and code examples in technical books, magazine articles, and online discussion forums, and in an organization’s code standards"".9","['major', 'influence', 'scope', 'use', 'exception', 'social', 'pressure', 'i.e.', 'example', 'use', 'typically', 'find', 'core', 'library', 'code', 'example', 'technical', 'book', 'magazine', 'article', 'online', 'discussion', 'forum', 'organization', 'code', 'standards']"
446,"The first hardware exception handling was found in the UNIVAC I from 1951. Arithmetic overflow executed two instructions at address 0, which could transfer control or fix up the result.10","['hardware', 'exception', 'handling', 'find', 'univac', '1951', 'arithmetic', 'overflow', 'execute', 'instruction', 'address', 'transfer', 'control', 'fix', 'result']"
447,"Software exception handling developed in the 1960s and 1970s. LISP 1.5 1958-196111 allowed exceptions to be raised by the ERROR pseudo-function, similarly to errors raised by the interpreter or compiler. Exceptions were caught by the ERRORSET keyword, which returned NIL in case of an error, instead of terminating the program or entering the debugger.12 PL/I introduced its own form of exception handling circa 1964, allowing interrupts to be handled with ON units.13 MacLisp observed that ERRSET and ERR were used not only for error raising, but for non-local control flow, and thus added two new keywords, CATCH and THROW June 1972.14 The cleanup behavior now generally called ""finally"" was introduced in NIL New Implementation of LISP in the mid- to late-1970s as UNWIND-PROTECT.15 This was then adopted by Common Lisp. Contemporary with this was dynamic-wind in Scheme, which handled exceptions in closures. The first papers on structured exception handling were Goodenough 1975a and Goodenough 1975b.16 Exception handling was subsequently widely adopted by many programming languages from the 1980s onward.","['software', 'exception', 'handling', 'develop', '1960', '1970', 'lisp', '1', '1958', '196111', 'allow', 'exception', 'raise', 'error', 'pseudo', 'function', 'similarly', 'error', 'raise', 'interpreter', 'compiler', 'exception', 'catch', 'errorset', 'keyword', 'return', 'nil', 'case', 'error', 'instead', 'terminate', 'program', 'enter', 'debugger', 'introduce', 'form', 'exception', 'handle', 'circa', '1964', 'allow', 'interrupt', 'handle', 'units', 'maclisp', 'observe', 'errset', 'err', 'error', 'raising', 'non', 'local', 'control', 'flow', 'add', 'new', 'keyword', 'catch', 'throw', 'june', '1972', 'cleanup', 'behavior', 'generally', 'call', 'finally', 'introduce', 'nil', 'new', 'implementation', 'lisp', 'mid-', 'late-1970s', 'unwind', 'protect', 'adopt', 'common', 'lisp', 'contemporary', 'dynamic', 'wind', 'scheme', 'handle', 'exception', 'closure', 'paper', 'structured', 'exception', 'handling', 'goodenough', '1975a', 'goodenough', '1975b', 'exception', 'handling', 'subsequently', 'widely', 'adopt', 'programming', 'language', '1980', 'onward']"
448,"There is no clear consensus as to the exact meaning of an exception with respect to hardware.17 From the implementation point of view, it is handled identically to an interrupt: the processor halts execution of the current program, looks up the interrupt handler in the interrupt vector table for that exception or interrupt condition, saves state, and switches control.","['clear', 'consensus', 'exact', 'meaning', 'exception', 'respect', 'hardware', 'implementation', 'point', 'view', 'handle', 'identically', 'interrupt', 'processor', 'halt', 'execution', 'current', 'program', 'look', 'interrupt', 'handler', 'interrupt', 'vector', 'table', 'exception', 'interrupt', 'condition', 'save', 'state', 'switch', 'control']"
449,"Exception handling in the IEEE 754 floating-point standard refers in general to exceptional conditions and defines an exception as ""an event that occurs when an operation on some particular operands has no outcome suitable for every reasonable application. That operation might signal one or more exceptions by invoking the default or, if explicitly requested, a language-defined alternate handling.""","['exception', 'handling', 'ieee', '754', 'float', 'point', 'standard', 'refer', 'general', 'exceptional', 'condition', 'define', 'exception', 'event', 'occur', 'operation', 'particular', 'operand', 'outcome', 'suitable', 'reasonable', 'application', 'operation', 'signal', 'exception', 'invoke', 'default', 'explicitly', 'request', 'language', 'define', 'alternate', 'handling']"
450,"By default, an IEEE 754 exception is resumable and is handled by substituting a predefined value for different exceptions, e.g. infinity for a divide by zero exception, and providing status flags for later checking of whether the exception occurred see C99 programming language for a typical example of handling of IEEE 754 exceptions. An exception-handling style enabled by the use of status flags involves: first computing an expression using a fast, direct implementation; checking whether it failed by testing status flags; and then, if necessary, calling a slower, more numerically robust, implementation.18","['default', 'ieee', '754', 'exception', 'resumable', 'handle', 'substitute', 'predefined', 'value', 'different', 'exception', 'e.g.', 'infinity', 'divide', 'zero', 'exception', 'provide', 'status', 'flag', 'later', 'checking', 'exception', 'occur', 'c99', 'programming', 'language', 'typical', 'example', 'handling', 'ieee', '754', 'exception', 'exception', 'handling', 'style', 'enable', 'use', 'status', 'flag', 'involve', 'compute', 'expression', 'fast', 'direct', 'implementation', 'check', 'fail', 'test', 'status', 'flag', 'necessary', 'call', 'slow', 'numerically', 'robust', 'implementation']"
451,"The IEEE 754 standard uses the term ""trapping"" to refer to the calling of a user-supplied exception-handling routine on exceptional conditions, and is an optional feature of the standard. The standard recommends several usage scenarios for this, including the implementation of non-default pre-substitution of a value followed by resumption, to concisely handle removable singularities.181920","['ieee', '754', 'standard', 'use', 'term', 'trap', 'refer', 'calling', 'user', 'supply', 'exception', 'handling', 'routine', 'exceptional', 'condition', 'optional', 'feature', 'standard', 'standard', 'recommend', 'usage', 'scenario', 'include', 'implementation', 'non', 'default', 'pre', 'substitution', 'value', 'follow', 'resumption', 'concisely', 'handle', 'removable', 'singularities']"
452,"The default IEEE 754 exception handling behaviour of resumption following pre-substitution of a default value avoids the risks inherent in changing flow of program control on numerical exceptions. For example, the 1996 Cluster spacecraft launch ended in a catastrophic explosion due in part to the Ada exception handling policy of aborting computation on arithmetic error. William Kahan claims the default IEEE 754 exception handling behavior would have prevented this.19","['default', 'ieee', '754', 'exception', 'handle', 'behaviour', 'resumption', 'follow', 'pre', 'substitution', 'default', 'value', 'avoid', 'risk', 'inherent', 'change', 'flow', 'program', 'control', 'numerical', 'exception', 'example', '1996', 'cluster', 'spacecraft', 'launch', 'end', 'catastrophic', 'explosion', 'ada', 'exception', 'handling', 'policy', 'abort', 'computation', 'arithmetic', 'error', 'william', 'kahan', 'claim', 'default', 'ieee', '754', 'exception', 'handle', 'behavior', 'prevent', 'this']"
453,"Software exception handling and the support provided by software tools differs somewhat from what is understood by exception handling in hardware, but similar concepts are involved. In programming language mechanisms for exception handling, the term exception is typically used in a specific sense to denote a data structure storing information about an exceptional condition. One mechanism to transfer control, or raise an exception, is known as a throw. The exception is said to be thrown. Execution is transferred to a ""catch"".","['software', 'exception', 'handling', 'support', 'provide', 'software', 'tool', 'differ', 'somewhat', 'understand', 'exception', 'handling', 'hardware', 'similar', 'concept', 'involve', 'programming', 'language', 'mechanism', 'exception', 'handling', 'term', 'exception', 'typically', 'specific', 'sense', 'denote', 'data', 'structure', 'store', 'information', 'exceptional', 'condition', 'mechanism', 'transfer', 'control', 'raise', 'exception', 'know', 'throw', 'exception', 'say', 'throw', 'execution', 'transfer', 'catch']"
454,Programming languages differ substantially in their notion of what an exception is. Contemporary languages can roughly be divided into two groups:9,"['programming', 'language', 'differ', 'substantially', 'notion', 'exception', 'contemporary', 'language', 'roughly', 'divide', 'groups']"
455,"PL/I used dynamically scoped exceptions. PL/I exception handling included events that are not errors, e.g., attention, end-of-file, modification of listed variables.citation needed","['dynamically', 'scope', 'exception', 'exception', 'handling', 'include', 'event', 'error', 'e.g.', 'attention', 'end', 'file', 'modification', 'list', 'variables.citation', 'need']"
456,"Many computer languages have built-in syntactic support for exceptions and exception handling. This includes ActionScript, Ada, BlitzMax, C++, C#, Clojure, COBOL, D, ECMAScript, Eiffel, Java, ML, Object Pascal e.g. Delphi, Free Pascal, and the like, PowerBuilder, Objective-C, OCaml, PHP as of version 5, PL/I, PL/SQL, Prolog, Python, REALbasic, Ruby, Scala, Seed7, Smalltalk, Tcl, Visual Prolog and most .NET languages.","['computer', 'language', 'build', 'syntactic', 'support', 'exception', 'exception', 'handling', 'include', 'actionscript', 'ada', 'blitzmax', 'c++', 'clojure', 'cobol', 'ecmascript', 'eiffel', 'java', 'object', 'pascal', 'e.g.', 'delphi', 'free', 'pascal', 'like', 'powerbuilder', 'objective', 'ocaml', 'php', 'version', 'sql', 'prolog', 'python', 'realbasic', 'ruby', 'scala', 'seed7', 'smalltalk', 'tcl', 'visual', 'prolog', '.net', 'language']"
457,"Excluding minor syntactic differences, there are only a couple of exception handling styles in use. In the most popular style, an exception is initiated by a special statement throw or raise with an exception object e.g. with Java or Object Pascal or a value of a special extendable enumerated type e.g. with Ada or SML. The scope for exception handlers starts with a marker clause try or the language's block starter such as begin and ends in the start of the first handler clause catch, except, rescue. Several handler clauses can follow, and each can specify which exception types it handles and what name it uses for the exception object. As a minor variation, some languages use a single handler clause, which deals with the class of the exception internally.","['exclude', 'minor', 'syntactic', 'difference', 'couple', 'exception', 'handle', 'style', 'use', 'popular', 'style', 'exception', 'initiate', 'special', 'statement', 'throw', 'raise', 'exception', 'object', 'e.g.', 'java', 'object', 'pascal', 'value', 'special', 'extendable', 'enumerate', 'type', 'e.g.', 'ada', 'sml', 'scope', 'exception', 'handler', 'start', 'marker', 'clause', 'try', 'language', 'block', 'starter', 'begin', 'end', 'start', 'handler', 'clause', 'catch', 'rescue', 'handler', 'clause', 'follow', 'specify', 'exception', 'type', 'handle', 'use', 'exception', 'object', 'minor', 'variation', 'language', 'use', 'single', 'handler', 'clause', 'deal', 'class', 'exception', 'internally']"
458,"Also common is a related clause finally or ensure that is executed whether an exception occurred or not, typically to release resources acquired within the body of the exception-handling block. Notably, C++ does not provide this construct, recommending instead the Resource Acquisition Is Initialization RAII technique which frees resources using destructors.24 According to a 2008 paper by Westley Weimer and George Necula, the syntax of the try...finally blocks in Java is a contributing factor to software defects. When a method needs to handle the acquisition and release of 3–5 resources, programmers are apparently unwilling to nest enough blocks due to readability concerns, even when this would be a correct solution. It is possible to use a single try...finally block even when dealing with multiple resources, but that requires a correct use of sentinel values, which is another common source of bugs for this type of problem.25: 8:6–8:7","['common', 'related', 'clause', 'finally', 'ensure', 'execute', 'exception', 'occur', 'typically', 'release', 'resource', 'acquire', 'body', 'exception', 'handling', 'block', 'notably', 'c++', 'provide', 'construct', 'recommend', 'instead', 'resource', 'acquisition', 'initialization', 'raii', 'technique', 'free', 'resource', 'destructors', 'accord', '2008', 'paper', 'westley', 'weimer', 'george', 'necula', 'syntax', 'try', 'finally', 'block', 'java', 'contribute', 'factor', 'software', 'defect', 'method', 'need', 'handle', 'acquisition', 'release', '3–5', 'resource', 'programmer', 'apparently', 'unwilling', 'nest', 'block', 'readability', 'concern', 'correct', 'solution', 'possible', 'use', 'single', 'try', 'finally', 'block', 'deal', 'multiple', 'resource', 'require', 'correct', 'use', 'sentinel', 'value', 'common', 'source', 'bug', 'type', 'problem', '8–8']"
459,Python and Ruby also permit a clause else that is used in case no exception occurred before the end of the handler's scope was reached.,"['python', 'ruby', 'permit', 'clause', 'case', 'exception', 'occur', 'end', 'handler', 'scope', 'reach']"
460,"In its whole, exception handling code might look like this in Java-like pseudocode:","['exception', 'handling', 'code', 'look', 'like', 'java', 'like', 'pseudocode']"
461,"C does not have try-catch exception handling, but uses return codes for error checking. The setjmp and longjmp standard library functions can be used to implement try-catch handling via macros.26","['try', 'catch', 'exception', 'handling', 'use', 'return', 'code', 'error', 'checking', 'setjmp', 'longjmp', 'standard', 'library', 'function', 'implement', 'try', 'catch', 'handling', 'macros']"
462,Perl 5 uses die for throw and eval if $@ for try-catch. It has CPAN modules that offer try-catch semantics.27,"['perl', 'use', 'die', 'throw', 'eval', 'try', 'catch', 'cpan', 'module', 'offer', 'try', 'catch', 'semantics']"
463,"When an exception is thrown, the program searches back through the stack of function calls until an exception handler is found. Some languages call for unwinding the stack as this search progresses. That is, if function .mw-parser-output .monospacedfont-family:monospace,monospacef, containing a handler H for exception E, calls function g, which in turn calls function h, and an exception E occurs in h, then functions h and g may be terminated, and H in f will handle E. This is said to be termination semantics. Alternately, the exception handling mechanisms may not unwind the stack on entrynote 1 to an exception handler, giving the exception handler the option to restart the computation, resume or unwind. This allows the program to continue the computation at exactly the same place where the error occurred for example when a previously missing file has become available or to implement notifications, logging, queries and fluid variables on top of the exception handling mechanism as done in Smalltalk. Allowing the computation to resume where it left off is termed resumption semantics.","['exception', 'throw', 'program', 'search', 'stack', 'function', 'call', 'exception', 'handler', 'find', 'language', 'unwind', 'stack', 'search', 'progress', 'function', '.mw', 'parser', 'output', '.monospacedfont', 'family', 'monospace', 'monospacef', 'contain', 'handler', 'exception', 'call', 'function', 'turn', 'call', 'function', 'exception', 'occur', 'function', 'terminate', 'handle', 'say', 'termination', 'semantic', 'alternately', 'exception', 'handling', 'mechanism', 'unwind', 'stack', 'entrynote', 'exception', 'handler', 'give', 'exception', 'handler', 'option', 'restart', 'computation', 'resume', 'unwind', 'allow', 'program', 'continue', 'computation', 'exactly', 'place', 'error', 'occur', 'example', 'previously', 'miss', 'file', 'available', 'implement', 'notification', 'log', 'query', 'fluid', 'variable', 'exception', 'handling', 'mechanism', 'smalltalk', 'allow', 'computation', 'resume', 'leave', 'term', 'resumption', 'semantic']"
464,There are theoretical and design arguments in favor of either decision. C++ standardization discussions in 1989–1991 resulted in a definitive decision to use termination semantics in C++.28 Bjarne Stroustrup cites a presentation by Jim Mitchell as a key data point:,"['theoretical', 'design', 'argument', 'favor', 'decision', 'c++', 'standardization', 'discussion', '1989–1991', 'result', 'definitive', 'decision', 'use', 'termination', 'semantic', 'c++', 'bjarne', 'stroustrup', 'cite', 'presentation', 'jim', 'mitchell', 'key', 'datum', 'point']"
465,Jim had used exception handling in half a dozen languages over a period of 20 years and was an early proponent of resumption semantics as one of the main designers and implementers of Xerox's Cedar/Mesa system. His message was,"['jim', 'exception', 'handle', 'half', 'dozen', 'language', 'period', 'year', 'early', 'proponent', 'resumption', 'semantic', 'main', 'designer', 'implementer', 'xerox', 'cedar', 'mesa', 'system', 'message']"
466,"He backed this statement with experience from several operating systems. The key example was Cedar/Mesa: It was written by people who liked and used resumption, but after ten years of use, there was only one use of resumption left in the half million line system – and that was a context inquiry. Because resumption wasn't actually necessary for such a context inquiry, they removed it and found a significant speed increase in that part of the system. In each and every case where resumption had been used it had – over the ten years – become a problem and a more appropriate design had replaced it. Basically, every use of resumption had represented a failure to keep separate levels of abstraction disjoint.16","['back', 'statement', 'experience', 'operating', 'system', 'key', 'example', 'cedar', 'mesa', 'write', 'people', 'like', 'resumption', 'year', 'use', 'use', 'resumption', 'leave', 'half', 'million', 'line', 'system', 'context', 'inquiry', 'resumption', 'actually', 'necessary', 'context', 'inquiry', 'remove', 'find', 'significant', 'speed', 'increase', 'system', 'case', 'resumption', 'year', 'problem', 'appropriate', 'design', 'replace', 'basically', 'use', 'resumption', 'represent', 'failure', 'separate', 'level', 'abstraction', 'disjoint']"
467,"Exception-handling languages with resumption include Common Lisp with its Condition System, PL/I, Dylan, R,29 and Smalltalk. However, the majority of newer programming languages follow C++ and use termination semantics.","['exception', 'handling', 'language', 'resumption', 'include', 'common', 'lisp', 'condition', 'system', 'dylan', 'r', 'smalltalk', 'majority', 'new', 'programming', 'language', 'follow', 'c++', 'use', 'termination', 'semantic']"
468,"The implementation of exception handling in programming languages typically involves a fair amount of support from both a code generator and the runtime system accompanying a compiler. It was the addition of exception handling to C++ that ended the useful lifetime of the original C++ compiler, Cfront.30 Two schemes are most common. The first, .mw-parser-output .vanchor>:target~.vanchor-textbackground-color:#b1d2ffdynamic registration, generates code that continually updates structures about the program state in terms of exception handling.31 Typically, this adds a new element to the stack frame layout that knows what handlers are available for the function or method associated with that frame; if an exception is thrown, a pointer in the layout directs the runtime to the appropriate handler code. This approach is compact in terms of space, but adds execution overhead on frame entry and exit. It was commonly used in many Ada implementations, for example, where complex generation and runtime support was already needed for many other language features. Microsoft's 32-bit Structured Exception Handling SEH uses this approach with a separate exception stack.32 Dynamic registration, being fairly straightforward to define, is amenable to proof of correctness.33","['implementation', 'exception', 'handling', 'programming', 'language', 'typically', 'involve', 'fair', 'support', 'code', 'generator', 'runtime', 'system', 'accompany', 'compiler', 'addition', 'exception', 'handle', 'c++', 'end', 'useful', 'lifetime', 'original', 'c++', 'compiler', 'cfront', 'scheme', 'common', '.mw', 'parser', 'output', '.vanchor>:target~.vanchor', 'textbackground', 'color:#b1d2ffdynamic', 'registration', 'generate', 'code', 'continually', 'update', 'structure', 'program', 'state', 'term', 'exception', 'handling', 'typically', 'add', 'new', 'element', 'stack', 'frame', 'layout', 'know', 'handler', 'available', 'function', 'method', 'associate', 'frame', 'exception', 'throw', 'pointer', 'layout', 'direct', 'runtime', 'appropriate', 'handler', 'code', 'approach', 'compact', 'term', 'space', 'add', 'execution', 'overhead', 'frame', 'entry', 'exit', 'commonly', 'ada', 'implementation', 'example', 'complex', 'generation', 'runtime', 'support', 'need', 'language', 'feature', 'microsoft', 'bit', 'structured', 'exception', 'handle', 'seh', 'use', 'approach', 'separate', 'exception', 'stack', 'dynamic', 'registration', 'fairly', 'straightforward', 'define', 'amenable', 'proof', 'correctness']"
469,"The second scheme, and the one implemented in many production-quality C++ compilers and 64-bit Microsoft SEH, is a table-driven approach. This creates static tables at compile time and link time that relate ranges of the program counter to the program state with respect to exception handling.34 Then, if an exception is thrown, the runtime system looks up the current instruction location in the tables and determines what handlers are in play and what needs to be done. This approach minimizes executive overhead for the case where an exception is not thrown. This happens at the cost of some space, but this space can be allocated into read-only, special-purpose data sections that are not loaded or relocated until an exception is actually thrown.35 The location in memory of the code for handling an exception need not be located within or even near the region of memory where the rest of the function's code is stored. So if an exception is thrown then a performance hit – roughly comparable to a function call36 – may occur if the necessary exception handling code needs to be loaded/cached. However, this scheme has minimal performance cost if no exception is thrown. Since exceptions in C++ are supposed to be exceptional i.e. uncommon/rare events, the phrase ""zero-cost exceptions""note 2 is sometimes used to describe exception handling in C++. Like runtime type identification RTTI, exceptions might not adhere to C++'s zero-overhead principle as implementing exception handling at run-time requires a non-zero amount of memory for the lookup table.37 For this reason, exception handling and RTTI can be disabled in many C++ compilers, which may be useful for systems with very limited memory37 such as embedded systems. This second approach is also superior in terms of achieving thread safetycitation needed.","['second', 'scheme', 'implement', 'production', 'quality', 'c++', 'compiler', 'bit', 'microsoft', 'seh', 'table', 'drive', 'approach', 'create', 'static', 'table', 'compile', 'time', 'link', 'time', 'relate', 'range', 'program', 'counter', 'program', 'state', 'respect', 'exception', 'handling', 'exception', 'throw', 'runtime', 'system', 'look', 'current', 'instruction', 'location', 'table', 'determine', 'handler', 'play', 'need', 'approach', 'minimize', 'executive', 'overhead', 'case', 'exception', 'throw', 'happen', 'cost', 'space', 'space', 'allocate', 'read', 'special', 'purpose', 'datum', 'section', 'load', 'relocate', 'exception', 'actually', 'thrown', 'location', 'memory', 'code', 'handle', 'exception', 'need', 'locate', 'near', 'region', 'memory', 'rest', 'function', 'code', 'store', 'exception', 'throw', 'performance', 'hit', 'roughly', 'comparable', 'function', 'call36', 'occur', 'necessary', 'exception', 'handle', 'code', 'need', 'load', 'cache', 'scheme', 'minimal', 'performance', 'cost', 'exception', 'throw', 'exception', 'c++', 'suppose', 'exceptional', 'i.e.', 'uncommon', 'rare', 'event', 'phrase', 'zero', 'cost', 'exceptions', 'describe', 'exception', 'handling', 'c++', 'like', 'runtime', 'type', 'identification', 'rtti', 'exception', 'adhere', 'c++', 'zero', 'overhead', 'principle', 'implement', 'exception', 'handling', 'run', 'time', 'require', 'non', 'zero', 'memory', 'lookup', 'table', 'reason', 'exception', 'handling', 'rtti', 'disable', 'c++', 'compiler', 'useful', 'system', 'limited', 'memory37', 'embed', 'system', 'second', 'approach', 'superior', 'term', 'achieve', 'thread', 'safetycitation', 'need']"
470,"Other definitional and implementation schemes have been proposed as well. For languages that support metaprogramming, approaches that involve no overhead at all beyond the already present support for reflection have been advanced.38","['definitional', 'implementation', 'scheme', 'propose', 'language', 'support', 'metaprogramme', 'approach', 'involve', 'overhead', 'present', 'support', 'reflection', 'advanced']"
471,"A different view of exceptions is based on the principles of design by contract and is supported in particular by the Eiffel language. The idea is to provide a more rigorous basis for exception handling by defining precisely what is ""normal"" and ""abnormal"" behavior. Specifically, the approach is based on two concepts:","['different', 'view', 'exception', 'base', 'principle', 'design', 'contract', 'support', 'particular', 'eiffel', 'language', 'idea', 'provide', 'rigorous', 'basis', 'exception', 'handle', 'define', 'precisely', 'normal', 'abnormal', 'behavior', 'specifically', 'approach', 'base', 'concept']"
472,"The ""Safe Exception Handling principle"" as introduced by Bertrand Meyer in Object-Oriented Software Construction then holds that there are only two meaningful ways a routine can react when an exception occurs:","['safe', 'exception', 'handling', 'principle', 'introduce', 'bertrand', 'meyer', 'object', 'orient', 'software', 'construction', 'hold', 'meaningful', 'way', 'routine', 'react', 'exception', 'occur']"
473,"In particular, simply ignoring an exception is not permitted; a block must either be retried and successfully complete, or propagate the exception to its caller.","['particular', 'simply', 'ignore', 'exception', 'permit', 'block', 'retry', 'successfully', 'complete', 'propagate', 'exception', 'caller']"
474,"Here is an example expressed in Eiffel syntax. It assumes that a routine send_fast is normally the better way to send a message, but it may fail, triggering an exception; if so, the algorithm next uses send_slow, which will fail less often. If send_slow fails, the routine send as a whole should fail, causing the caller to get an exception.","['example', 'express', 'eiffel', 'syntax', 'assume', 'routine', 'send_fast', 'normally', 'well', 'way', 'send', 'message', 'fail', 'trigger', 'exception', 'algorithm', 'use', 'send_slow', 'fail', 'send_slow', 'fail', 'routine', 'send', 'fail', 'cause', 'caller', 'exception']"
475,"The boolean local variables are initialized to False at the start. If send_fast fails, the body do clause will be executed again, causing execution of send_slow. If this execution of send_slow fails, the rescue clause will execute to the end with no retry no else clause in the final if, causing the routine execution as a whole to fail.","['boolean', 'local', 'variable', 'initialize', 'false', 'start', 'send_fast', 'fail', 'body', 'clause', 'execute', 'cause', 'execution', 'send_slow', 'execution', 'send_slow', 'fail', 'rescue', 'clause', 'execute', 'end', 'retry', 'clause', 'final', 'cause', 'routine', 'execution', 'fail']"
476,"This approach has the merit of defining clearly what ""normal"" and ""abnormal"" cases are: an abnormal case, causing an exception, is one in which the routine is unable to fulfill its contract. It defines a clear distribution of roles: the do clause normal body is in charge of achieving, or attempting to achieve, the routine's contract; the rescue clause is in charge of reestablishing the context and restarting the process, if this has a chance of succeeding, but not of performing any actual computation.","['approach', 'merit', 'define', 'clearly', 'normal', 'abnormal', 'case', 'abnormal', 'case', 'cause', 'exception', 'routine', 'unable', 'fulfill', 'contract', 'define', 'clear', 'distribution', 'role', 'clause', 'normal', 'body', 'charge', 'achieving', 'attempt', 'achieve', 'routine', 'contract', 'rescue', 'clause', 'charge', 'reestablish', 'context', 'restart', 'process', 'chance', 'succeed', 'perform', 'actual', 'computation']"
477,"Although exceptions in Eiffel have a fairly clear philosophy, Kiniry 2006 criticizes their implementation because ""Exceptions that are part of the language definition are represented by INTEGER values, developer-defined exceptions by STRING values. ... Additionally, because they are basic values and not objects, they have no inherent semantics beyond that which is expressed in a helper routine which necessarily cannot be foolproof because of the representation overloading in effect e.g., one cannot differentiate two integers of the same value.""9","['exception', 'eiffel', 'fairly', 'clear', 'philosophy', 'kiniry', '2006', 'criticize', 'implementation', 'exception', 'language', 'definition', 'represent', 'integer', 'value', 'developer', 'define', 'exception', 'string', 'value', 'additionally', 'basic', 'value', 'object', 'inherent', 'semantic', 'express', 'helper', 'routine', 'necessarily', 'foolproof', 'representation', 'overloading', 'effect', 'e.g.', 'differentiate', 'integer', 'value']"
478,"Contemporary applications face many design challenges when considering exception handling strategies. Particularly in modern enterprise level applications, exceptions must often cross process boundaries and machine boundaries. Part of designing a solid exception handling strategy is recognizing when a process has failed to the point where it cannot be economically handled by the software portion of the process.39","['contemporary', 'application', 'face', 'design', 'challenge', 'consider', 'exception', 'handling', 'strategy', 'particularly', 'modern', 'enterprise', 'level', 'application', 'exception', 'cross', 'process', 'boundary', 'machine', 'boundary', 'design', 'solid', 'exception', 'handling', 'strategy', 'recognize', 'process', 'fail', 'point', 'economically', 'handle', 'software', 'portion', 'process']"
479,"If an exception is thrown and not caught operationally, an exception is thrown when there is no applicable handler specified, the uncaught exception is handled by the runtime; the routine that does this is called the uncaught exception handler.4041 The most common default behavior is to terminate the program and print an error message to the console, usually including debug information such as a string representation of the exception and the stack trace.404243 This is often avoided by having a top-level application-level handler for example in an event loop that catches exceptions before they reach the runtime.4044","['exception', 'throw', 'catch', 'operationally', 'exception', 'throw', 'applicable', 'handler', 'specify', 'uncaught', 'exception', 'handle', 'runtime', 'routine', 'call', 'uncaught', 'exception', 'handler', 'common', 'default', 'behavior', 'terminate', 'program', 'print', 'error', 'message', 'console', 'usually', 'include', 'debug', 'information', 'string', 'representation', 'exception', 'stack', 'trace', 'avoid', 'have', 'level', 'application', 'level', 'handler', 'example', 'event', 'loop', 'catch', 'exception', 'reach', 'runtime']"
480,"Note that even though an uncaught exception may result in the program terminating abnormally the program may not be correct if an exception is not caught, notably by not rolling back partially completed transactions, or not releasing resources, the process terminates normally assuming the runtime works correctly, as the runtime which is controlling execution of the program can ensure orderly shutdown of the process.","['note', 'uncaught', 'exception', 'result', 'program', 'terminate', 'abnormally', 'program', 'correct', 'exception', 'catch', 'notably', 'roll', 'partially', 'complete', 'transaction', 'release', 'resource', 'process', 'terminates', 'normally', 'assume', 'runtime', 'work', 'correctly', 'runtime', 'control', 'execution', 'program', 'ensure', 'orderly', 'shutdown', 'process']"
481,"In a multithreaded program, an uncaught exception in a thread may instead result in termination of just that thread, not the entire process uncaught exceptions in the thread-level handler are caught by the top-level handler. This is particularly important for servers, where for example a servlet running in its own thread can be terminated without the server overall being affected.","['multithreaded', 'program', 'uncaught', 'exception', 'thread', 'instead', 'result', 'termination', 'thread', 'entire', 'process', 'uncaught', 'exception', 'thread', 'level', 'handler', 'catch', 'level', 'handler', 'particularly', 'important', 'server', 'example', 'servlet', 'run', 'thread', 'terminate', 'server', 'overall', 'affect']"
482,"This default uncaught exception handler may be overridden, either globally or per-thread, for example to provide alternative logging or end-user reporting of uncaught exceptions, or to restart threads that terminate due to an uncaught exception. For example, in Java this is done for a single thread via Thread.setUncaughtExceptionHandler and globally via Thread.setDefaultUncaughtExceptionHandler; in Python this is done by modifying sys.excepthook.","['default', 'uncaught', 'exception', 'handler', 'overridden', 'globally', 'thread', 'example', 'provide', 'alternative', 'logging', 'end', 'user', 'reporting', 'uncaught', 'exception', 'restart', 'thread', 'terminate', 'uncaught', 'exception', 'example', 'java', 'single', 'thread', 'thread.setuncaughtexceptionhandler', 'globally', 'thread.setdefaultuncaughtexceptionhandler', 'python', 'modify', 'sys.excepthook']"
483,"Java introduced the notion of checked exceptions,4546 which are special classes of exceptions. The checked exceptions that a method may raise must be part of the method's signature. For instance, if a method might throw an IOException, it must declare this fact explicitly in its method signature. Failure to do so raises a compile-time error. According to Hanspeter Mössenböck, checked exceptions are less convenient but more robust.47 Checked exceptions can, at compile time, reduce the incidence of unhandled exceptions surfacing at runtime in a given application.","['java', 'introduce', 'notion', 'check', 'exceptions', 'special', 'class', 'exception', 'check', 'exception', 'method', 'raise', 'method', 'signature', 'instance', 'method', 'throw', 'ioexception', 'declare', 'fact', 'explicitly', 'method', 'signature', 'failure', 'raise', 'compile', 'time', 'error', 'accord', 'hanspeter', 'mössenböck', 'check', 'exception', 'convenient', 'robust', 'check', 'exception', 'compile', 'time', 'reduce', 'incidence', 'unhandled', 'exception', 'surface', 'runtime', 'give', 'application']"
484,"Kiniry writes that ""As any Java programmer knows, the volume of try catch code in a typical Java application is sometimes larger than the comparable code necessary for explicit formal parameter and return value checking in other languages that do not have checked exceptions. In fact, the general consensus among in-the-trenches Java programmers is that dealing with checked exceptions is nearly as unpleasant a task as writing documentation. Thus, many programmers report that they “resent” checked exceptions."".9 Martin Fowler has written ""...on the whole I think that exceptions are good, but Java checked exceptions are more trouble than they are worth.""48 As of 2006 no major programming language has followed Java in adding checked exceptions.48 For example, C# does not require or allow declaration of any exception specifications, with the following posted by Eric Gunnerson:49948","['kiniry', 'write', 'java', 'programmer', 'know', 'volume', 'try', 'catch', 'code', 'typical', 'java', 'application', 'large', 'comparable', 'code', 'necessary', 'explicit', 'formal', 'parameter', 'return', 'value', 'checking', 'language', 'check', 'exception', 'fact', 'general', 'consensus', 'trench', 'java', 'programmer', 'deal', 'check', 'exception', 'nearly', 'unpleasant', 'task', 'write', 'documentation', 'programmer', 'report', 'resent', 'check', 'exception', 'martin', 'fowler', 'write', 'think', 'exception', 'good', 'java', 'check', 'exception', 'trouble', 'worth', '48', '2006', 'major', 'programming', 'language', 'follow', 'java', 'add', 'check', 'exceptions', 'example', 'require', 'allow', 'declaration', 'exception', 'specification', 'following', 'post', 'eric', 'gunnerson']"
485,"""Examination of small programs leads to the conclusion that requiring exception specifications could both enhance developer productivity and enhance code quality, but experience with large software projects suggests a different result – decreased productivity and little or no increase in code quality.""","['examination', 'small', 'program', 'lead', 'conclusion', 'require', 'exception', 'specification', 'enhance', 'developer', 'productivity', 'enhance', 'code', 'quality', 'experience', 'large', 'software', 'project', 'suggest', 'different', 'result', 'decrease', 'productivity', 'little', 'increase', 'code', 'quality']"
486,Anders Hejlsberg describes two concerns with checked exceptions:50,"['anders', 'hejlsberg', 'describe', 'concern', 'check', 'exceptions']"
487,"To work around these, Hejlsberg says programmers resort to circumventing the feature by using a throws Exception declaration. Another circumvention is to use a try ... catch Exception e handler.50 This is referred to as catch-all exception handling or Pokémon exception handling after the show's catchphrase ""Gotta Catch ‘Em All!"".51 The Java Tutorials discourage catch-all exception handling as it may catch exceptions ""for which the handler was not intended"".52 Still another discouraged circumvention is to make all exceptions subclass RuntimeException.53 An encouraged solution is to use a catch-all handler or throws clause but with a specific superclass of all potentially thrown exceptions rather than the general superclass Exception. Another encouraged solution is to define and declare exception types that are suitable for the level of abstraction of the called method54 and map lower level exceptions to these types by using exception chaining.","['work', 'hejlsberg', 'say', 'programmer', 'resort', 'circumvent', 'feature', 'throw', 'exception', 'declaration', 'circumvention', 'use', 'try', 'catch', 'exception', 'handler', 'refer', 'catch', 'exception', 'handling', 'pokémon', 'exception', 'handle', 'catchphrase', 'got', 'catch', 'all!', 'java', 'tutorials', 'discourage', 'catch', 'exception', 'handling', 'catch', 'exception', 'handler', 'intended', 'discouraged', 'circumvention', 'exception', 'subclass', 'runtimeexception', 'encouraged', 'solution', 'use', 'catch', 'handler', 'throw', 'clause', 'specific', 'superclass', 'potentially', 'throw', 'exception', 'general', 'superclass', 'exception', 'encouraged', 'solution', 'define', 'declare', 'exception', 'type', 'suitable', 'level', 'abstraction', 'call', 'method54', 'map', 'low', 'level', 'exception', 'type', 'exception', 'chaining']"
488,"The roots of checked exceptions go back to the CLU programming language's notion of exception specification.55 A function could raise only exceptions listed in its type, but any leaking exceptions from called functions would automatically be turned into the sole runtime exception, failure, instead of resulting in compile-time error.7 Later, Modula-3 had a similar feature.56 These features don't include the compile time checking that is central in the concept of checked exceptions.55","['root', 'check', 'exception', 'clu', 'programming', 'language', 'notion', 'exception', 'specification', 'function', 'raise', 'exception', 'list', 'type', 'leak', 'exception', 'call', 'function', 'automatically', 'turn', 'sole', 'runtime', 'exception', 'failure', 'instead', 'result', 'compile', 'time', 'error', 'later', 'modula-3', 'similar', 'feature', 'feature', 'include', 'compile', 'time', 'checking', 'central', 'concept', 'check', 'exceptions']"
489,"Early versions of the C++ programming language included an optional mechanism similar to checked exceptions, called exception specifications. By default any function could throw any exception, but this could be limited by a throw clause added to the function signature, that specified which exceptions the function may throw. Exception specifications were not enforced at compile-time. Violations resulted in the global function std::unexpected being called.57 An empty exception specification could be given, which indicated that the function will throw no exception. This was not made the default when exception handling was added to the language because it would have required too much modification of existing code, would have impeded interaction with code written in other languages, and would have tempted programmers into writing too many handlers at the local level.57 Explicit use of empty exception specifications could, however, allow C++ compilers to perform significant code and stack layout optimizations that are precluded when exception handling may take place in a function.35 Some analysts viewed the proper use of exception specifications in C++ as difficult to achieve.58 This use of exception specifications was included in C++98 and C++03, deprecated in the 2012 C++ language standard C++11,59 and was removed from the language in C++17. A function that will not throw any exceptions can now be denoted by the noexcept keyword.","['early', 'version', 'c++', 'programming', 'language', 'include', 'optional', 'mechanism', 'similar', 'check', 'exception', 'call', 'exception', 'specification', 'default', 'function', 'throw', 'exception', 'limit', 'throw', 'clause', 'add', 'function', 'signature', 'specify', 'exception', 'function', 'throw', 'exception', 'specification', 'enforce', 'compile', 'time', 'violation', 'result', 'global', 'function', 'std::unexpecte', 'called', 'exception', 'specification', 'give', 'indicate', 'function', 'throw', 'exception', 'default', 'exception', 'handling', 'add', 'language', 'require', 'modification', 'exist', 'code', 'impede', 'interaction', 'code', 'write', 'language', 'tempt', 'programmer', 'write', 'handler', 'local', 'level', 'explicit', 'use', 'exception', 'specification', 'allow', 'c++', 'compiler', 'perform', 'significant', 'code', 'stack', 'layout', 'optimization', 'preclude', 'exception', 'handling', 'place', 'function', 'analyst', 'view', 'proper', 'use', 'exception', 'specification', 'c++', 'difficult', 'achieve', 'use', 'exception', 'specification', 'include', 'c++98', 'c++03', 'deprecate', '2012', 'c++', 'language', 'standard', 'c++11', 'remove', 'language', 'c++17', 'function', 'throw', 'exception', 'denote', 'noexcept', 'keyword']"
490,"An uncaught exceptions analyzer exists for the OCaml programming language.60 The tool reports the set of raised exceptions as an extended type signature. But, unlike checked exceptions, the tool does not require any syntactic annotations and is external i.e. it is possible to compile and run a program without having checked the exceptions.","['uncaught', 'exception', 'analyzer', 'exist', 'ocaml', 'programming', 'language', 'tool', 'report', 'set', 'raise', 'exception', 'extended', 'type', 'signature', 'unlike', 'check', 'exception', 'tool', 'require', 'syntactic', 'annotation', 'external', 'i.e.', 'possible', 'compile', 'run', 'program', 'having', 'check', 'exception']"
491,"The point of exception handling routines is to ensure that the code can handle error conditions. In order to establish that exception handling routines are sufficiently robust, it is necessary to present the code with a wide spectrum of invalid or unexpected inputs, such as can be created via software fault injection and mutation testing that is also sometimes referred to as fuzz testing. One of the most difficult types of software for which to write exception handling routines is protocol software, since a robust protocol implementation must be prepared to receive input that does not comply with the relevant specifications.","['point', 'exception', 'handling', 'routine', 'ensure', 'code', 'handle', 'error', 'condition', 'order', 'establish', 'exception', 'handling', 'routine', 'sufficiently', 'robust', 'necessary', 'present', 'code', 'wide', 'spectrum', 'invalid', 'unexpected', 'input', 'create', 'software', 'fault', 'injection', 'mutation', 'testing', 'refer', 'fuzz', 'testing', 'difficult', 'type', 'software', 'write', 'exception', 'handling', 'routine', 'protocol', 'software', 'robust', 'protocol', 'implementation', 'prepared', 'receive', 'input', 'comply', 'relevant', 'specification']"
492,"In order to ensure that meaningful regression analysis can be conducted throughout a software development lifecycle process, any exception handling testing should be highly automated, and the test cases must be generated in a scientific, repeatable fashion. Several commercially available systems exist that perform such testing.","['order', 'ensure', 'meaningful', 'regression', 'analysis', 'conduct', 'software', 'development', 'lifecycle', 'process', 'exception', 'handling', 'testing', 'highly', 'automate', 'test', 'case', 'generate', 'scientific', 'repeatable', 'fashion', 'commercially', 'available', 'system', 'exist', 'perform', 'testing']"
493,"In runtime engine environments such as Java or .NET, there exist tools that attach to the runtime engine and every time that an exception of interest occurs, they record debugging information that existed in memory at the time the exception was thrown call stack and heap values. These tools are called automated exception handling or error interception tools and provide 'root-cause' information for exceptions.","['runtime', 'engine', 'environment', 'java', '.net', 'exist', 'tool', 'attach', 'runtime', 'engine', 'time', 'exception', 'interest', 'occur', 'record', 'debug', 'information', 'exist', 'memory', 'time', 'exception', 'throw', 'stack', 'heap', 'value', 'tool', 'call', 'automated', 'exception', 'handling', 'error', 'interception', 'tool', 'provide', 'root', 'cause', 'information', 'exception']"
494,"Asynchronous exceptions are events raised by a separate thread or external process, such as pressing Ctrl-C to interrupt a program, receiving a signal, or sending a disruptive message such as ""stop"" or ""suspend"" from another thread of execution.6162 Whereas synchronous exceptions happen at a specific throw statement, asynchronous exceptions can be raised at any time. It follows that asynchronous exception handling can't be optimized out by the compiler, as it cannot prove the absence of asynchronous exceptions. They are also difficult to program with correctly, as asynchronous exceptions must be blocked during cleanup operations to avoid resource leaks.","['asynchronous', 'exception', 'event', 'raise', 'separate', 'thread', 'external', 'process', 'press', 'ctrl', 'interrupt', 'program', 'receive', 'signal', 'send', 'disruptive', 'message', 'stop', 'suspend', 'thread', 'execution', 'synchronous', 'exception', 'happen', 'specific', 'throw', 'statement', 'asynchronous', 'exception', 'raise', 'time', 'follow', 'asynchronous', 'exception', 'handling', 'optimize', 'compiler', 'prove', 'absence', 'asynchronous', 'exception', 'difficult', 'program', 'correctly', 'asynchronous', 'exception', 'block', 'cleanup', 'operation', 'avoid', 'resource', 'leak']"
495,"Programming languages typically avoid or restrict asynchronous exception handling, for example C++ forbids raising exceptions from signal handlers, and Java has deprecated the use of its ThreadDeath exception that was used to allow one thread to stop another one.63 Another feature is a semi-asynchronous mechanism that raises an asynchronous exception only during certain operations of the program. For example Java's Thread.interrupt only affects the thread when the thread calls an operation that throws InterruptedException.64 The similar POSIX pthread_cancel API has race conditions which make it impossible to use safely.65","['programming', 'language', 'typically', 'avoid', 'restrict', 'asynchronous', 'exception', 'handling', 'example', 'c++', 'forbid', 'raise', 'exception', 'signal', 'handler', 'java', 'deprecate', 'use', 'threaddeath', 'exception', 'allow', 'thread', 'stop', 'one', 'feature', 'semi', 'asynchronous', 'mechanism', 'raise', 'asynchronous', 'exception', 'certain', 'operation', 'program', 'example', 'java', 'thread.interrupt', 'affect', 'thread', 'thread', 'call', 'operation', 'throw', 'interruptedexception', 'similar', 'posix', 'pthread_cancel', 'api', 'race', 'condition', 'impossible', 'use', 'safely']"
496,"Common Lisp, Dylan and Smalltalk have a condition system66 see Common Lisp Condition System that encompasses the aforementioned exception handling systems. In those languages or environments the advent of a condition a ""generalisation of an error"" according to Kent Pitman implies a function call, and only late in the exception handler the decision to unwind the stack may be taken.","['common', 'lisp', 'dylan', 'smalltalk', 'condition', 'system66', 'common', 'lisp', 'condition', 'system', 'encompass', 'aforementioned', 'exception', 'handling', 'system', 'language', 'environment', 'advent', 'condition', 'generalisation', 'error', 'accord', 'kent', 'pitman', 'imply', 'function', 'late', 'exception', 'handler', 'decision', 'unwind', 'stack', 'take']"
497,"Conditions are a generalization of exceptions. When a condition arises, an appropriate condition handler is searched for and selected, in stack order, to handle the condition. Conditions that do not represent errors may safely go unhandled entirely; their only purpose may be to propagate hints or warnings toward the user.67","['condition', 'generalization', 'exception', 'condition', 'arise', 'appropriate', 'condition', 'handler', 'search', 'select', 'stack', 'order', 'handle', 'condition', 'condition', 'represent', 'error', 'safely', 'unhandled', 'entirely', 'purpose', 'propagate', 'hint', 'warning', 'user']"
498,"This is related to the so-called resumption model of exception handling, in which some exceptions are said to be continuable: it is permitted to return to the expression that signaled an exception, after having taken corrective action in the handler. The condition system is generalized thus: within the handler of a non-serious condition a.k.a. continuable exception, it is possible to jump to predefined restart points a.k.a. restarts that lie between the signaling expression and the condition handler. Restarts are functions closed over some lexical environment, allowing the programmer to repair this environment before exiting the condition handler completely or unwinding the stack even partially.","['relate', 'call', 'resumption', 'model', 'exception', 'handling', 'exception', 'say', 'continuable', 'permit', 'return', 'expression', 'signal', 'exception', 'having', 'take', 'corrective', 'action', 'handler', 'condition', 'system', 'generalize', 'handler', 'non', 'condition', 'a.k.a', 'continuable', 'exception', 'possible', 'jump', 'predefine', 'restart', 'point', 'a.k.a', 'restart', 'lie', 'signal', 'expression', 'condition', 'handler', 'restart', 'function', 'close', 'lexical', 'environment', 'allow', 'programmer', 'repair', 'environment', 'exit', 'condition', 'handler', 'completely', 'unwind', 'stack', 'partially']"
499,"An example is the ENDPAGE condition in PL/I; the ON unit might write page trailer lines and header lines for the next page, then fall through to resume execution of the interrupted code.","['example', 'endpage', 'condition', 'unit', 'write', 'page', 'trailer', 'line', 'header', 'line', 'page', 'fall', 'resume', 'execution', 'interrupted', 'code']"
500,"Condition handling moreover provides a separation of mechanism from policy. Restarts provide various possible mechanisms for recovering from error, but do not select which mechanism is appropriate in a given situation. That is the province of the condition handler, which since it is located in higher-level code has access to a broader view.","['condition', 'handling', 'provide', 'separation', 'mechanism', 'policy', 'restart', 'provide', 'possible', 'mechanism', 'recover', 'error', 'select', 'mechanism', 'appropriate', 'give', 'situation', 'province', 'condition', 'handler', 'locate', 'high', 'level', 'code', 'access', 'broad', 'view']"
501,"An example: Suppose there is a library function whose purpose is to parse a single syslog file entry. What should this function do if the entry is malformed? There is no one right answer, because the same library could be deployed in programs for many different purposes. In an interactive log-file browser, the right thing to do might be to return the entry unparsed, so the user can see it—but in an automated log-summarizing program, the right thing to do might be to supply null values for the unreadable fields, but abort with an error, if too many entries have been malformed.","['example', 'suppose', 'library', 'function', 'purpose', 'parse', 'single', 'syslog', 'file', 'entry', 'function', 'entry', 'malforme', 'right', 'answer', 'library', 'deploy', 'program', 'different', 'purpose', 'interactive', 'log', 'file', 'browser', 'right', 'thing', 'return', 'entry', 'unparse', 'user', 'automate', 'log', 'summarize', 'program', 'right', 'thing', 'supply', 'null', 'value', 'unreadable', 'field', 'abort', 'error', 'entry', 'malforme']"
502,"That is to say, the question can only be answered in terms of the broader goals of the program, which are not known to the general-purpose library function. Nonetheless, exiting with an error message is only rarely the right answer. So instead of simply exiting with an error, the function may establish restarts offering various ways to continue—for instance, to skip the log entry, to supply default or null values for the unreadable fields, to ask the user for the missing values, or to unwind the stack and abort processing with an error message. The restarts offered constitute the mechanisms available for recovering from error; the selection of restart by the condition handler supplies the policy.","['question', 'answer', 'term', 'broad', 'goal', 'program', 'know', 'general', 'purpose', 'library', 'function', 'nonetheless', 'exit', 'error', 'message', 'rarely', 'right', 'answer', 'instead', 'simply', 'exit', 'error', 'function', 'establish', 'restart', 'offer', 'way', 'continue', 'instance', 'skip', 'log', 'entry', 'supply', 'default', 'null', 'value', 'unreadable', 'field', 'ask', 'user', 'miss', 'value', 'unwind', 'stack', 'abort', 'processing', 'error', 'message', 'restart', 'offer', 'constitute', 'mechanism', 'available', 'recover', 'error', 'selection', 'restart', 'condition', 'handler', 'supply', 'policy']"
503,"Exception handling is often not handled correctly in software, especially when there are multiple sources of exceptions; data flow analysis of 5 million lines of Java code found over 1300 exception handling defects.25 Citing multiple prior studies by others 1999–2004 and their own results, Weimer and Necula wrote that a significant problem with exceptions is that they ""create hidden control-flow paths that are difficult for programmers to reason about"".25: 8:27 ""While try-catch-finally is conceptually simple, it has the most complicated execution description in the language specification Gosling et al. 1996 and requires four levels of nested “if”s in its official English description. In short, it contains a large number of corner cases that programmers often overlook.""25: 8:13–8:14","['exception', 'handling', 'handle', 'correctly', 'software', 'especially', 'multiple', 'source', 'exception', 'datum', 'flow', 'analysis', 'million', 'line', 'java', 'code', 'find', '1300', 'exception', 'handle', 'defects', 'cite', 'multiple', 'prior', 'study', '1999–2004', 'result', 'weimer', 'necula', 'write', 'significant', 'problem', 'exception', 'create', 'hidden', 'control', 'flow', 'path', 'difficult', 'programmer', 'reason', 'about', '8', 'try', 'catch', 'finally', 'conceptually', 'simple', 'complicated', 'execution', 'description', 'language', 'specification', 'gosling', '1996', 'require', 'level', 'nest', 'if”s', 'official', 'english', 'description', 'short', 'contain', 'large', 'number', 'corner', 'case', 'programmer', 'overlook', '25', '8–8']"
504,"Exceptions, as unstructured flow, increase the risk of resource leaks such as escaping a section locked by a mutex, or one temporarily holding a file open or inconsistent state. There are various techniques for resource management in the presence of exceptions, most commonly combining the dispose pattern with some form of unwind protection like a finally clause, which automatically releases the resource when control exits a section of code.","['exception', 'unstructured', 'flow', 'increase', 'risk', 'resource', 'leak', 'escape', 'section', 'lock', 'mutex', 'temporarily', 'hold', 'file', 'open', 'inconsistent', 'state', 'technique', 'resource', 'management', 'presence', 'exception', 'commonly', 'combine', 'dispose', 'pattern', 'form', 'unwind', 'protection', 'like', 'finally', 'clause', 'automatically', 'release', 'resource', 'control', 'exit', 'section', 'code']"
505,"Tony Hoare in 1980 described the Ada programming language as having ""...a plethora of features and notational conventions, many of them unnecessary and some of them, like exception handling, even dangerous. ... Do not allow this language in its present state to be used in applications where reliability is critical .... The next rocket to go astray as a result of a programming language error may not be an exploratory space rocket on a harmless trip to Venus: It may be a nuclear warhead exploding over one of our own cities.""68","['tony', 'hoare', '1980', 'describe', 'ada', 'programming', 'language', 'have', 'plethora', 'feature', 'notational', 'convention', 'unnecessary', 'like', 'exception', 'handling', 'dangerous', 'allow', 'language', 'present', 'state', 'application', 'reliability', 'critical', 'rocket', 'astray', 'result', 'programming', 'language', 'error', 'exploratory', 'space', 'rocket', 'harmless', 'trip', 'venus', 'nuclear', 'warhead', 'explode', 'city', '68']"
506,"The Go developers believe that the try-catch-finally idiom obfuscates control flow,69 and introduced the exception-like panic/recover mechanism.70 recover differs from catch in that it can only be called from within a defer code block in a function, so the handler can only do clean-up and change the function's return values, and cannot return control to an arbitrary point within the function.71 The defer block itself functions similarly to a finally clause.","['developer', 'believe', 'try', 'catch', 'finally', 'idiom', 'obfuscate', 'control', 'flow', 'introduce', 'exception', 'like', 'panic', 'recover', 'mechanism', 'recover', 'differ', 'catch', 'call', 'defer', 'code', 'block', 'function', 'handler', 'clean', 'change', 'function', 'return', 'value', 'return', 'control', 'arbitrary', 'point', 'function', 'defer', 'block', 'function', 'similarly', 'finally', 'clause']"
507,"Front-end web frameworks, such as React and Vue, have introduced error handling mechanisms where errors propagate up the UI component hierarchy, in a way that is analogous to how errors propagate up the call stack in executing code.7273 Here the error boundary mechanism serves as an analogue to the typical try-catch mechanism. Thus a component can ensure that errors from its child components are caught and handled, and not propagated up to parent components.","['end', 'web', 'framework', 'react', 'vue', 'introduce', 'error', 'handling', 'mechanism', 'error', 'propagate', 'component', 'hierarchy', 'way', 'analogous', 'error', 'propagate', 'stack', 'execute', 'code', 'error', 'boundary', 'mechanism', 'serve', 'analogue', 'typical', 'try', 'catch', 'mechanism', 'component', 'ensure', 'error', 'child', 'component', 'catch', 'handle', 'propagate', 'parent', 'component']"
508,"For example, in Vue, a component would catch errors by implementing errorCaptured","['example', 'vue', 'component', 'catch', 'error', 'implement', 'errorcapture']"
509,When used like this in markup:,"['like', 'markup']"
510,The error produced by the child component is caught and handled by the parent component.74,"['error', 'produce', 'child', 'component', 'catch', 'handle', 'parent', 'component']"
511,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
512,"In object-oriented and functional programming, an immutable object unchangeable1 object is an object whose state cannot be modified after it is created.2 This is in contrast to a mutable object changeable object, which can be modified after it is created. 3 In some cases, an object is considered immutable even if some internally used attributes change, but the object's state appears unchanging from an external point of view. For example, an object that uses memoization to cache the results of expensive computations could still be considered an immutable object.","['object', 'orient', 'functional', 'programming', 'immutable', 'object', 'unchangeable1', 'object', 'object', 'state', 'modify', 'created', 'contrast', 'mutable', 'object', 'changeable', 'object', 'modify', 'create', 'case', 'object', 'consider', 'immutable', 'internally', 'attribute', 'change', 'object', 'state', 'appear', 'unchanging', 'external', 'point', 'view', 'example', 'object', 'use', 'memoization', 'cache', 'result', 'expensive', 'computation', 'consider', 'immutable', 'object']"
513,Strings and other concrete objects are typically expressed as immutable objects to improve readability and runtime efficiency in object-oriented programming. Immutable objects are also useful because they are inherently thread-safe.2 Other benefits are that they are simpler to understand and reason about and offer higher security than mutable objects.2,"['string', 'concrete', 'object', 'typically', 'express', 'immutable', 'object', 'improve', 'readability', 'runtime', 'efficiency', 'object', 'orient', 'programming', 'immutable', 'object', 'useful', 'inherently', 'thread', 'safe', 'benefit', 'simple', 'understand', 'reason', 'offer', 'high', 'security', 'mutable', 'objects']"
514,"In imperative programming, values held in program variables whose content never changes are known as constants to differentiate them from variables that could be altered during execution. Examples include conversion factors from meters to feet, or the value of pi to several decimal places.","['imperative', 'programming', 'value', 'hold', 'program', 'variable', 'content', 'change', 'know', 'constant', 'differentiate', 'variable', 'alter', 'execution', 'example', 'include', 'conversion', 'factor', 'meter', 'foot', 'value', 'decimal', 'place']"
515,"Read-only fields may be calculated when the program runs unlike constants, which are known beforehand, but never change after they are initialized.","['read', 'field', 'calculate', 'program', 'run', 'unlike', 'constant', 'know', 'change', 'initialize']"
516,"Sometimes, one talks of certain fields of an object being immutable. This means that there is no way to change those parts of the object state, even though other parts of the object may be changeable weakly immutable. If all fields are immutable, then the object is immutable. If the whole object cannot be extended by another class, the object is called strongly immutable.4 This might, for example, help to explicitly enforce certain invariants about certain data in the object staying the same through the lifetime of the object. In some languages, this is done with a keyword e.g. const in C++, final in Java that designates the field as immutable. Some languages reverse it: in OCaml, fields of an object or record are by default immutable, and must be explicitly marked with mutable to be so.","['talk', 'certain', 'field', 'object', 'immutable', 'mean', 'way', 'change', 'part', 'object', 'state', 'part', 'object', 'changeable', 'weakly', 'immutable', 'field', 'immutable', 'object', 'immutable', 'object', 'extend', 'class', 'object', 'call', 'strongly', 'immutable', 'example', 'help', 'explicitly', 'enforce', 'certain', 'invariant', 'certain', 'datum', 'object', 'stay', 'lifetime', 'object', 'language', 'keyword', 'e.g.', 'const', 'c++', 'final', 'java', 'designate', 'field', 'immutable', 'language', 'reverse', 'ocaml', 'field', 'object', 'record', 'default', 'immutable', 'explicitly', 'mark', 'mutable']"
517,"In most object-oriented languages, objects can be referred to using references. Some examples of such languages are Java, C++, C#, VB.NET, and many scripting languages, such as Perl, Python, and Ruby. In this case, it matters whether the state of an object can vary when objects are shared via references.","['object', 'orient', 'language', 'object', 'refer', 'reference', 'example', 'language', 'java', 'c++', 'vb.net', 'scripting', 'language', 'perl', 'python', 'ruby', 'case', 'matter', 'state', 'object', 'vary', 'object', 'share', 'reference']"
518,"If an object is known to be immutable, it is preferred to create a reference of it instead of copying the entire object. This is done to conserve memory by preventing data duplication and avoid calls to constructors and destructors; it also results in a potential boost in execution speed.","['object', 'know', 'immutable', 'preferred', 'create', 'reference', 'instead', 'copy', 'entire', 'object', 'conserve', 'memory', 'prevent', 'data', 'duplication', 'avoid', 'call', 'constructor', 'destructor', 'result', 'potential', 'boost', 'execution', 'speed']"
519,"The reference copying technique is much more difficult to use for mutable objects, because if any user of a mutable object reference changes it, all other users of that reference see the change. If this is not the intended effect, it can be difficult to notify the other users to have them respond correctly. In these situations, defensive copying of the entire object rather than the reference is usually an easy but costly solution. The observer pattern is an alternative technique for handling changes to mutable objects.","['reference', 'copying', 'technique', 'difficult', 'use', 'mutable', 'object', 'user', 'mutable', 'object', 'reference', 'change', 'user', 'reference', 'change', 'intend', 'effect', 'difficult', 'notify', 'user', 'respond', 'correctly', 'situation', 'defensive', 'copying', 'entire', 'object', 'reference', 'usually', 'easy', 'costly', 'solution', 'observer', 'pattern', 'alternative', 'technique', 'handle', 'change', 'mutable', 'object']"
520,"A technique that blends the advantages of mutable and immutable objects, and is supported directly in almost all modern hardware, is copy-on-write COW. Using this technique, when a user asks the system to copy an object, it instead merely creates a new reference that still points to the same object. As soon as a user attempts to modify the object through a particular reference, the system makes a real copy, applies the modification to that, and sets the reference to refer to the new copy. The other users are unaffected, because they still refer to the original object. Therefore, under COW, all users appear to have a mutable version of their objects, although in the case that users do not modify their objects, the space-saving and speed advantages of immutable objects are preserved. Copy-on-write is popular in virtual memory systems because it allows them to save memory space while still correctly handling anything an application program might do.","['technique', 'blend', 'advantage', 'mutable', 'immutable', 'object', 'support', 'directly', 'modern', 'hardware', 'copy', 'write', 'cow', 'technique', 'user', 'ask', 'system', 'copy', 'object', 'instead', 'merely', 'create', 'new', 'reference', 'point', 'object', 'soon', 'user', 'attempt', 'modify', 'object', 'particular', 'reference', 'system', 'make', 'real', 'copy', 'apply', 'modification', 'set', 'reference', 'refer', 'new', 'copy', 'user', 'unaffected', 'refer', 'original', 'object', 'cow', 'user', 'appear', 'mutable', 'version', 'object', 'case', 'user', 'modify', 'object', 'space', 'save', 'speed', 'advantage', 'immutable', 'object', 'preserve', 'copy', 'write', 'popular', 'virtual', 'memory', 'system', 'allow', 'save', 'memory', 'space', 'correctly', 'handle', 'application', 'program']"
521,"The practice of always using references in place of copies of equal objects is known as interning. If interning is used, two objects are considered equal if and only if their references, typically represented as pointers or integers, are equal. Some languages do this automatically: for example, Python automatically interns short strings. If the algorithm that implements interning is guaranteed to do so in every case that it is possible, then comparing objects for equality is reduced to comparing their pointers – a substantial gain in speed in most applications. Even if the algorithm is not guaranteed to be comprehensive, there still exists the possibility of a fast path case improvement when the objects are equal and use the same reference. Interning is generally only useful for immutable objects.","['practice', 'reference', 'place', 'copy', 'equal', 'object', 'know', 'intern', 'intern', 'object', 'consider', 'equal', 'reference', 'typically', 'represent', 'pointer', 'integer', 'equal', 'language', 'automatically', 'example', 'python', 'automatically', 'intern', 'short', 'string', 'algorithm', 'implement', 'intern', 'guarantee', 'case', 'possible', 'compare', 'object', 'equality', 'reduce', 'compare', 'pointer', 'substantial', 'gain', 'speed', 'application', 'algorithm', 'guarantee', 'comprehensive', 'exist', 'possibility', 'fast', 'path', 'case', 'improvement', 'object', 'equal', 'use', 'reference', 'intern', 'generally', 'useful', 'immutable', 'object']"
522,Immutable objects can be useful in multi-threaded applications. Multiple threads can act on data represented by immutable objects without concern of the data being changed by other threads. Immutable objects are therefore considered more thread-safe than mutable objects.,"['immutable', 'object', 'useful', 'multi', 'threaded', 'application', 'multiple', 'thread', 'act', 'datum', 'represent', 'immutable', 'object', 'concern', 'datum', 'change', 'thread', 'immutable', 'object', 'consider', 'thread', 'safe', 'mutable', 'object']"
523,"Immutability does not imply that the object as stored in the computer's memory is unwriteable. Rather, immutability is a compile-time construct that indicates what a programmer can do through the normal interface of the object, not necessarily what they can absolutely do for instance, by circumventing the type system or violating const correctness in C or C++.","['immutability', 'imply', 'object', 'store', 'computer', 'memory', 'unwriteable', 'immutability', 'compile', 'time', 'construct', 'indicate', 'programmer', 'normal', 'interface', 'object', 'necessarily', 'absolutely', 'instance', 'circumvent', 'type', 'system', 'violate', 'const', 'correctness', 'c++']"
524,"In Python, Java and the .NET Framework, strings are immutable objects. Both Java and the .NET Framework have mutable versions of string. In Java these are StringBuffer and StringBuilder mutable versions of Java String and in .NET this is StringBuilder mutable version of .Net String. Python 3 has a mutable string bytes variant, named bytearray.5","['python', 'java', '.net', 'framework', 'string', 'immutable', 'object', 'java', '.net', 'framework', 'mutable', 'version', 'string', 'java', 'stringbuffer', 'stringbuilder', 'mutable', 'version', 'java', 'string', '.net', 'stringbuilder', 'mutable', 'version', '.net', 'string', 'python', 'mutable', 'string', 'byte', 'variant', 'name', 'bytearray']"
525,"Additionally, all of the primitive wrapper classes in Java are immutable.","['additionally', 'primitive', 'wrapper', 'class', 'java', 'immutable']"
526,Similar patterns are the Immutable Interface and Immutable Wrapper.,"['similar', 'pattern', 'immutable', 'interface', 'immutable', 'wrapper']"
527,"In pure functional programming languages it is not possible to create mutable objects without extending the language e.g. via a mutable references library or a foreign function interface, so all objects are immutable.","['pure', 'functional', 'programming', 'language', 'possible', 'create', 'mutable', 'object', 'extend', 'language', 'e.g.', 'mutable', 'reference', 'library', 'foreign', 'function', 'interface', 'object', 'immutable']"
528,"In Ada, any object is declared either variable i.e. mutable; typically the implicit default, or constant i.e. immutable via the constant keyword.","['ada', 'object', 'declare', 'variable', 'i.e.', 'mutable', 'typically', 'implicit', 'default', 'constant', 'i.e.', 'immutable', 'constant', 'keyword']"
529,"Subprogram parameters are immutable in the in mode, and mutable in the in out and out modes.","['subprogram', 'parameter', 'immutable', 'mode', 'mutable', 'mode']"
530,"In C# you can enforce immutability of the fields of a class with the readonly statement. By enforcing all the fields as immutable, you obtain an immutable type.","['enforce', 'immutability', 'field', 'class', 'readonly', 'statement', 'enforce', 'field', 'immutable', 'obtain', 'immutable', 'type']"
531,"In C++, a const-correct implementation of Cart would allow the user to create instances of the class and then use them as either const immutable or mutable, as desired, by providing two different versions of the items method. Notice that in C++ it is not necessary — and in fact impossible — to provide a specialized constructor for const instances.","['c++', 'const', 'correct', 'implementation', 'cart', 'allow', 'user', 'create', 'instance', 'class', 'use', 'const', 'immutable', 'mutable', 'desire', 'provide', 'different', 'version', 'item', 'method', 'notice', 'c++', 'necessary', 'fact', 'impossible', 'provide', 'specialized', 'constructor', 'const', 'instance']"
532,"Note that, when there is a data member that is a pointer or reference to another object, then it is possible to mutate the object pointed to or referenced only within a non-const method.","['note', 'data', 'member', 'pointer', 'reference', 'object', 'possible', 'mutate', 'object', 'point', 'reference', 'non', 'const', 'method']"
533,"C++ also provides abstract as opposed to bitwise immutability via the mutable keyword, which lets a member variable be changed from within a const method.","['c++', 'provide', 'abstract', 'oppose', 'bitwise', 'immutability', 'mutable', 'keyword', 'let', 'member', 'variable', 'change', 'const', 'method']"
534,"In D, there exist two type qualifiers, const and immutable, for variables that cannot be changed.6 Unlike C++'s const, Java's final, and C#'s readonly, they are transitive and recursively apply to anything reachable through references of such a variable. The difference between const and immutable is what they apply to: const is a property of the variable: there might legally exist mutable references to referred value, i.e. the value can actually change. In contrast, immutable is a property of the referred value: the value and anything transitively reachable from it cannot change without breaking the type system, leading to undefined behavior. Any reference of that value must be marked const or immutable. Basically for any unqualified type T, constT is the disjoint union of T mutable and immutableT.","['exist', 'type', 'qualifier', 'const', 'immutable', 'variable', 'changed', 'unlike', 'c++', 'const', 'java', 'final', 'readonly', 'transitive', 'recursively', 'apply', 'reachable', 'reference', 'variable', 'difference', 'const', 'immutable', 'apply', 'const', 'property', 'variable', 'legally', 'exist', 'mutable', 'reference', 'refer', 'value', 'i.e.', 'value', 'actually', 'change', 'contrast', 'immutable', 'property', 'refer', 'value', 'value', 'transitively', 'reachable', 'change', 'break', 'type', 'system', 'lead', 'undefined', 'behavior', 'reference', 'value', 'mark', 'const', 'immutable', 'basically', 'unqualified', 'type', 'constt', 'disjoint', 'union', 'mutable', 'immutablet.']"
535,"For a mutable C object, its mField can be written to. For a constC object, mField cannot be modified, it inherits const; iField is still immutable as it is the stronger guarantee. For an immutableC, all fields are immutable.","['mutable', 'object', 'mfield', 'write', 'constc', 'object', 'mfield', 'modify', 'inherit', 'const', 'ifield', 'immutable', 'strong', 'guarantee', 'immutablec', 'field', 'immutable']"
536,"Inside the braces, c might refer to the same object as m, so mutations to m could indirectly change c as well. Also, c might refer to the same object as i, but since the value then is immutable, there are no changes. However, m and i cannot legally refer to the same object.","['inside', 'brace', 'refer', 'object', 'mutation', 'indirectly', 'change', 'refer', 'object', 'value', 'immutable', 'change', 'legally', 'refer', 'object']"
537,"In the language of guarantees, mutable has no guarantees the function might change the object, const is an outward-only guarantee that the function will not change anything, and immutable is a bidirectional guarantee the function will not change the value and the caller must not change it.","['language', 'guarantee', 'mutable', 'guarantee', 'function', 'change', 'object', 'const', 'outward', 'guarantee', 'function', 'change', 'immutable', 'bidirectional', 'guarantee', 'function', 'change', 'value', 'caller', 'change']"
538,Values that are const or immutable must be initialized by direct assignment at the point of declaration or by a constructor.,"['value', 'const', 'immutable', 'initialize', 'direct', 'assignment', 'point', 'declaration', 'constructor']"
539,"Because const parameters forget if the value was mutable or not, a similar construct, inout, acts, in a sense, as a variable for mutability information. A function of type constS functionconstT returns constS typed values for mutable, const and immutable arguments. In contrast, a function of type inoutS functioninoutT returns S for mutable T arguments, constS for constT values, and immutableS for immutableT values.","['const', 'parameter', 'forget', 'value', 'mutable', 'similar', 'construct', 'inout', 'act', 'sense', 'variable', 'mutability', 'information', 'function', 'type', 'consts', 'functionconstt', 'return', 'consts', 'type', 'value', 'mutable', 'const', 'immutable', 'argument', 'contrast', 'function', 'type', 'inouts', 'functioninoutt', 'return', 'mutable', 'argument', 'consts', 'constt', 'value', 'immutables', 'immutablet', 'value']"
540,"Casting immutable values to mutable inflicts undefined behavior upon change, even if the original value comes from a mutable origin. Casting mutable values to immutable can be legal when there remain no mutable references afterward. ""An expression may be converted from mutable ... to immutable if the expression is unique and all expressions it transitively refers to are either unique or immutable.""6 If the compiler cannot prove uniqueness, the casting can be done explicitly and it is up to the programmer to ensure that no mutable references exist.","['cast', 'immutable', 'value', 'mutable', 'inflict', 'undefined', 'behavior', 'change', 'original', 'value', 'come', 'mutable', 'origin', 'cast', 'mutable', 'value', 'immutable', 'legal', 'remain', 'mutable', 'reference', 'afterward', 'expression', 'convert', 'mutable', 'immutable', 'expression', 'unique', 'expression', 'transitively', 'refer', 'unique', 'immutable', 'compiler', 'prove', 'uniqueness', 'casting', 'explicitly', 'programmer', 'ensure', 'mutable', 'reference', 'exist']"
541,"The type string is an alias for immutablechar, i.e. a typed slice of memory of immutable characters.7 Making substrings is cheap, as it just copies and modifies a pointer and a length filed, and safe, as the underlying data cannot be changed. Objects of type constchar can refer to strings, but also to mutable buffers.","['type', 'string', 'alias', 'immutablechar', 'i.e.', 'type', 'slice', 'memory', 'immutable', 'characters', 'make', 'substring', 'cheap', 'copy', 'modify', 'pointer', 'length', 'file', 'safe', 'underlie', 'datum', 'change', 'object', 'type', 'constchar', 'refer', 'string', 'mutable', 'buffer']"
542,"Making a shallow copy of a const or immutable value removes the outer layer of immutability: Copying an immutable string immutablechar returns a string immutablechar. The immutable pointer and length are being copied and the copies are mutable. The referred data has not been copied and keeps its qualifier, in the example immutable. It can be stripped by making a depper copy, e.g. using the dup function.","['make', 'shallow', 'copy', 'const', 'immutable', 'value', 'remove', 'outer', 'layer', 'immutability', 'copy', 'immutable', 'string', 'immutablechar', 'return', 'string', 'immutablechar', 'immutable', 'pointer', 'length', 'copy', 'copy', 'mutable', 'refer', 'data', 'copy', 'keep', 'qualifi', 'example', 'immutable', 'strip', 'make', 'depper', 'copy', 'e.g.', 'dup', 'function']"
543,A classic example of an immutable object is an instance of the Java String class,"['classic', 'example', 'immutable', 'object', 'instance', 'java', 'string', 'class']"
544,"The method toLowerCase does not change the data ""ABC"" that s contains. Instead, a new String object is instantiated and given the data ""abc"" during its construction. A reference to this String object is returned by the toLowerCase method. To make the String s contain the data ""abc"", a different approach is needed:","['method', 'tolowercase', 'change', 'datum', 'abc', 'contain', 'instead', 'new', 'string', 'object', 'instantiate', 'give', 'datum', 'abc', 'construction', 'reference', 'string', 'object', 'return', 'tolowercase', 'method', 'string', 'contain', 'datum', 'abc', 'different', 'approach', 'need']"
545,"Now the String s references a new String object that contains ""abc"". There is nothing in the syntax of the declaration of the class String that enforces it as immutable; rather, none of the String class's methods ever affect the data that a String object contains, thus making it immutable.","['string', 'reference', 'new', 'string', 'object', 'contain', 'abc', 'syntax', 'declaration', 'class', 'string', 'enforce', 'immutable', 'string', 'class', 'method', 'affect', 'datum', 'string', 'object', 'contain', 'make', 'immutable']"
546,"The keyword final detailed article is used in implementing immutable primitive types and object references,8 but it cannot, by itself, make the objects themselves immutable. See below examples:","['keyword', 'final', 'detailed', 'article', 'implement', 'immutable', 'primitive', 'type', 'object', 'references', 'object', 'immutable', 'example']"
547,"Primitive type variables int, long, short, etc. can be reassigned after being defined. This can be prevented by using final.","['primitive', 'type', 'variable', 'int', 'long', 'short', 'etc', 'reassign', 'define', 'prevent', 'final']"
548,Reference types cannot be made immutable just by using the final keyword. final only prevents reassignment.,"['reference', 'type', 'immutable', 'final', 'keyword', 'final', 'prevent', 'reassignment']"
549,"Primitive wrappers Integer, Long, Short, Double, Float, Character, Byte, Boolean are also all immutable. Immutable classes can be implemented by following a few simple guidelines.9","['primitive', 'wrapper', 'integer', 'long', 'short', 'double', 'float', 'character', 'byte', 'boolean', 'immutable', 'immutable', 'class', 'implement', 'follow', 'simple', 'guidelines']"
550,"In JavaScript, all primitive types Undefined, Null, Boolean, Number, BigInt, String, Symbol are immutable, but custom objects are generally mutable.","['javascript', 'primitive', 'type', 'undefined', 'null', 'boolean', 'number', 'bigint', 'string', 'symbol', 'immutable', 'custom', 'object', 'generally', 'mutable']"
551,"To simulate immutability in an object, one may define properties as read-only writable: false.","['simulate', 'immutability', 'object', 'define', 'property', 'read', 'writable', 'false']"
552,"However, the approach above still lets new properties be added. Alternatively, one may use Object.freeze to make existing objects immutable.","['approach', 'let', 'new', 'property', 'add', 'alternatively', 'use', 'object.freeze', 'exist', 'object', 'immutable']"
553,"With the implementation of ECMA262, JavaScript has the ability to create immutable references that cannot be reassigned. However, using a const declaration doesn't mean that value of the read-only reference is immutable, just that the name cannot be assigned to a new value.","['implementation', 'ecma262', 'javascript', 'ability', 'create', 'immutable', 'reference', 'reassign', 'const', 'declaration', 'mean', 'value', 'read', 'reference', 'immutable', 'assign', 'new', 'value']"
554,"The use of immutable state has become a rising trend in JavaScript since the introduction of React, which favours Flux-like state management patterns such as Redux.10","['use', 'immutable', 'state', 'rise', 'trend', 'javascript', 'introduction', 'react', 'favour', 'flux', 'like', 'state', 'management', 'pattern', 'redux']"
555,"In Perl, one can create an immutable class with the Moo library by simply declaring all the attributes read only:","['perl', 'create', 'immutable', 'class', 'moo', 'library', 'simply', 'declare', 'attribute', 'read']"
556,"Creating an immutable class used to require two steps: first, creating accessors either automatically or manually that prevent modification of object attributes, and secondly, preventing direct modification of the instance data of instances of that class this was usually stored in a hash reference, and could be locked with Hash::Util's lock_hash function:","['create', 'immutable', 'class', 'require', 'step', 'create', 'accessor', 'automatically', 'manually', 'prevent', 'modification', 'object', 'attribute', 'secondly', 'prevent', 'direct', 'modification', 'instance', 'datum', 'instance', 'class', 'usually', 'store', 'hash', 'reference', 'lock', 'hash::util', 'lock_hash', 'function']"
557,"Or, with a manually written accessor:","['manually', 'write', 'accessor']"
558,"In Python, some built-in types numbers, booleans, strings, tuples, frozensets are immutable, but custom classes are generally mutable. To simulate immutability in a class, one could override attribute setting and deletion to raise exceptions:","['python', 'build', 'type', 'number', 'boolean', 'string', 'tuple', 'frozenset', 'immutable', 'custom', 'class', 'generally', 'mutable', 'simulate', 'immutability', 'class', 'override', 'attribute', 'setting', 'deletion', 'raise', 'exception']"
559,"The standard library helpers collections.namedtuple and typing.NamedTuple, available from Python 3.6 onward, create simple immutable classes. The following example is roughly equivalent to the above, plus some tuple-like features:","['standard', 'library', 'helper', 'collections.namedtuple', 'type', 'namedtuple', 'available', 'python', '3', 'onward', 'create', 'simple', 'immutable', 'class', 'follow', 'example', 'roughly', 'equivalent', 'plus', 'tuple', 'like', 'feature']"
560,"Introduced in Python 3.7, dataclasses allow developers to emulate immutability with frozen instances. If a frozen dataclass is built, dataclasses will override __setattr__ and __delattr__ to raise FrozenInstanceError if invoked.","['introduce', 'python', '3', 'dataclasse', 'allow', 'developer', 'emulate', 'immutability', 'frozen', 'instance', 'frozen', 'dataclass', 'build', 'dataclasse', 'override', 'setattr', 'delattr', 'raise', 'frozeninstanceerror', 'invoke']"
561,"Racket substantially diverges from other Scheme implementations by making its core pair type ""cons cells"" immutable. Instead, it provides a parallel mutable pair type, via mcons, mcar, set-mcar! etc. In addition, many immutable types are supported, for example, immutable strings and vectors, and these are used extensively. New structs are immutable by default, unless a field is specifically declared mutable, or the whole struct:","['racket', 'substantially', 'diverge', 'scheme', 'implementation', 'make', 'core', 'pair', 'type', 'con', 'cell', 'immutable', 'instead', 'provide', 'parallel', 'mutable', 'pair', 'type', 'mcon', 'mcar', 'set', 'mcar', 'etc', 'addition', 'immutable', 'type', 'support', 'example', 'immutable', 'string', 'vector', 'extensively', 'new', 'struct', 'immutable', 'default', 'field', 'specifically', 'declare', 'mutable', 'struct']"
562,"The language also supports immutable hash tables, implemented functionally, and immutable dictionaries.","['language', 'support', 'immutable', 'hash', 'table', 'implement', 'functionally', 'immutable', 'dictionary']"
563,"Rust's ownership system allows developers to declare immutable variables, and pass immutable references. By default, all variables and references are immutable. Mutable variables and references are explicitly created with the mut keyword.","['rust', 'ownership', 'system', 'allow', 'developer', 'declare', 'immutable', 'variable', 'pass', 'immutable', 'reference', 'default', 'variable', 'reference', 'immutable', 'mutable', 'variable', 'reference', 'explicitly', 'create', 'mut', 'keyword']"
564,Constant items in Rust are always immutable.,"['constant', 'item', 'rust', 'immutable']"
565,"In Scala, any entity narrowly, a binding can be defined as mutable or immutable: in the declaration, one can use val value for immutable entities and var variable for mutable ones. Note that even though an immutable binding can not be reassigned, it may still refer to a mutable object and it is still possible to call mutating methods on that object: the binding is immutable, but the underlying object may be mutable.","['scala', 'entity', 'narrowly', 'binding', 'define', 'mutable', 'immutable', 'declaration', 'use', 'val', 'value', 'immutable', 'entity', 'var', 'variable', 'mutable', 'one', 'note', 'immutable', 'binding', 'reassign', 'refer', 'mutable', 'object', 'possible', 'mutating', 'method', 'object', 'binding', 'immutable', 'underlying', 'object', 'mutable']"
566,"For example, the following code snippet:","['example', 'follow', 'code', 'snippet']"
567,defines an immutable entity maxValue the integer type is inferred at compile-time and a mutable entity named currentValue.,"['define', 'immutable', 'entity', 'maxvalue', 'integer', 'type', 'infer', 'compile', 'time', 'mutable', 'entity', 'name', 'currentvalue']"
568,"By default, collection classes such as List and Map are immutable, so update-methods return a new instance rather than mutating an existing one. While this may sound inefficient, the implementation of these classes and their guarantees of immutability mean that the new instance can re-use existing nodes, which, especially in the case of creating copies, is very efficient.11better source needed","['default', 'collection', 'class', 'list', 'map', 'immutable', 'update', 'method', 'return', 'new', 'instance', 'mutate', 'exist', 'sound', 'inefficient', 'implementation', 'class', 'guarantee', 'immutability', 'mean', 'new', 'instance', 'use', 'exist', 'node', 'especially', 'case', 'create', 'copy', 'efficientbetter', 'source', 'need']"
569,This article contains some material from the Perl Design Patterns Book,"['article', 'contain', 'material', 'perl', 'design', 'patterns', 'book']"
570,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
571,"In computer science, information hiding is the principle of segregation of the design decisions in a computer program that are most likely to change, thus protecting other parts of the program from extensive modification if the design decision is changed. The protection involves providing a stable interface which protects the remainder of the program from the implementation whose details are likely to change. Written in another way, information hiding is the ability to prevent certain aspects of a class or software component from being accessible to its clients, using either programming language features like private variables or an explicit exporting policy.","['computer', 'science', 'information', 'hiding', 'principle', 'segregation', 'design', 'decision', 'computer', 'program', 'likely', 'change', 'protect', 'part', 'program', 'extensive', 'modification', 'design', 'decision', 'change', 'protection', 'involve', 'provide', 'stable', 'interface', 'protect', 'remainder', 'program', 'implementation', 'detail', 'likely', 'change', 'write', 'way', 'information', 'hiding', 'ability', 'prevent', 'certain', 'aspect', 'class', 'software', 'component', 'accessible', 'client', 'programming', 'language', 'feature', 'like', 'private', 'variable', 'explicit', 'export', 'policy']"
572,"The term encapsulation is often used interchangeably with information hiding. Not all agree on the distinctions between the two, though; one may think of information hiding as being the principle and encapsulation being the technique. A software module hides information by encapsulating the information into a module or other construct which presents an interface.1","['term', 'encapsulation', 'interchangeably', 'information', 'hiding', 'agree', 'distinction', 'think', 'information', 'hide', 'principle', 'encapsulation', 'technique', 'software', 'module', 'hide', 'information', 'encapsulate', 'information', 'module', 'construct', 'present', 'interface']"
573,"A common use of information hiding is to hide the physical storage layout for data so that if it is changed, the change is restricted to a small subset of the total program. For example, if a three-dimensional point x, y, z is represented in a program with three floating-point scalar variables and later, the representation is changed to a single array variable of size three, a module designed with information hiding in mind would protect the remainder of the program from such a change.","['common', 'use', 'information', 'hiding', 'hide', 'physical', 'storage', 'layout', 'datum', 'change', 'change', 'restrict', 'small', 'subset', 'total', 'program', 'example', 'dimensional', 'point', 'represent', 'program', 'float', 'point', 'scalar', 'variable', 'later', 'representation', 'change', 'single', 'array', 'variable', 'size', 'module', 'design', 'information', 'hiding', 'mind', 'protect', 'remainder', 'program', 'change']"
574,"In object-oriented programming, information hiding by way of nesting of types reduces software development risk by shifting the code's dependency on an uncertain implementation design decision onto a well-defined interface. Clients of the interface perform operations purely through the interface, so, if the implementation changes, the clients do not have to change.","['object', 'orient', 'programming', 'information', 'hiding', 'way', 'nesting', 'type', 'reduce', 'software', 'development', 'risk', 'shift', 'code', 'dependency', 'uncertain', 'implementation', 'design', 'decision', 'define', 'interface', 'client', 'interface', 'perform', 'operation', 'purely', 'interface', 'implementation', 'change', 'client', 'change']"
575,"In his book on object-oriented design, Grady Booch defined encapsulation as ""the process of compartmentalizing the elements of an abstraction that constitute its structure and behavior; encapsulation serves to separate the contractual interface of an abstraction and its implementation.""2","['book', 'object', 'orient', 'design', 'grady', 'booch', 'define', 'encapsulation', 'process', 'compartmentalize', 'element', 'abstraction', 'constitute', 'structure', 'behavior', 'encapsulation', 'serve', 'separate', 'contractual', 'interface', 'abstraction', 'implementation']"
576,"The purpose is to achieve the potential for change: the internal mechanisms of the component can be improved without impact on other components, or the component can be replaced with a different one that supports the same public interface. Encapsulation also protects the integrity of the component, by preventing users from setting the internal data of the component into an invalid or inconsistent state. Another benefit of encapsulation is that it reduces system complexity and thus increases robustness, by limiting the interdependencies between software components.2","['purpose', 'achieve', 'potential', 'change', 'internal', 'mechanism', 'component', 'improve', 'impact', 'component', 'component', 'replace', 'different', 'support', 'public', 'interface', 'encapsulation', 'protect', 'integrity', 'component', 'prevent', 'user', 'set', 'internal', 'datum', 'component', 'invalid', 'inconsistent', 'state', 'benefit', 'encapsulation', 'reduce', 'system', 'complexity', 'increase', 'robustness', 'limit', 'interdependency', 'software', 'components']"
577,"In this sense, the idea of encapsulation is more general than how it is applied in object-oriented programming. For example, a relational database is encapsulated in the sense that its only public interface is a query language such as SQL, which hides all the internal machinery and data structures of the database management system. As such, encapsulation is a core principle of good software architecture, at every level of granularity.","['sense', 'idea', 'encapsulation', 'general', 'apply', 'object', 'orient', 'programming', 'example', 'relational', 'database', 'encapsulate', 'sense', 'public', 'interface', 'query', 'language', 'sql', 'hide', 'internal', 'machinery', 'datum', 'structure', 'database', 'management', 'system', 'encapsulation', 'core', 'principle', 'good', 'software', 'architecture', 'level', 'granularity']"
578,"Encapsulating software behind an interface allows the construction of objects that mimic the behavior and interactions of objects in the real world. For example, a simple digital alarm clock is a real-world object that a layperson can use and understand. They can understand what the alarm clock does, and how to use it through the provided interface buttons and screen, without having to understand every part inside of the clock. Similarly, if the clock were replaced by a different model, the layperson could continue to use it in the same way, provided that the interface works the same.","['encapsulate', 'software', 'interface', 'allow', 'construction', 'object', 'mimic', 'behavior', 'interaction', 'object', 'real', 'world', 'example', 'simple', 'digital', 'alarm', 'clock', 'real', 'world', 'object', 'layperson', 'use', 'understand', 'understand', 'alarm', 'clock', 'use', 'provide', 'interface', 'button', 'screen', 'have', 'understand', 'inside', 'clock', 'similarly', 'clock', 'replace', 'different', 'model', 'layperson', 'continue', 'use', 'way', 'provide', 'interface', 'work']"
579,"In the more concrete setting of an object-oriented programming language, the notion is used to mean either an information hiding mechanism, a bundling mechanism, or the combination of the two. See Encapsulation object-oriented programming for details.","['concrete', 'setting', 'object', 'orient', 'programming', 'language', 'notion', 'mean', 'information', 'hiding', 'mechanism', 'bundling', 'mechanism', 'combination', 'encapsulation', 'object', 'orient', 'programming', 'detail']"
580,"The concept of information hiding was first described by David Parnas in 1972.34 Before then, modularity was discussed by Richard Gauthier and Stephen Pont in their 1970 book Designing Systems Programs although modular programming itself had been used at many commercial sites for many years previously – especially in I/O sub-systems and software libraries – without acquiring the 'information hiding' tag – but for similar reasons, as well as the more obvious code reuse reason.clarification needed","['concept', 'information', 'hiding', 'describe', 'david', 'parnas', '1972', 'modularity', 'discuss', 'richard', 'gauthier', 'stephen', 'pont', '1970', 'book', 'designing', 'systems', 'programs', 'modular', 'programming', 'commercial', 'site', 'year', 'previously', 'especially', 'sub', 'system', 'software', 'library', 'acquire', 'information', 'hiding', 'tag', 'similar', 'reason', 'obvious', 'code', 'reuse', 'reason.clarification', 'need']"
581,"Information hiding serves as an effective criterion for dividing any piece of equipment, software, or hardware, into modules of functionality. For instance, a car is a complex piece of equipment. In order to make the design, manufacturing, and maintenance of a car reasonable, the complex piece of equipment is divided into modules with particular interfaces hiding design decisions. By designing a car in this fashion, a car manufacturer can also offer various options while still having a vehicle that is economical to manufacture.","['information', 'hiding', 'serve', 'effective', 'criterion', 'divide', 'piece', 'equipment', 'software', 'hardware', 'module', 'functionality', 'instance', 'car', 'complex', 'piece', 'equipment', 'order', 'design', 'manufacturing', 'maintenance', 'car', 'reasonable', 'complex', 'piece', 'equipment', 'divide', 'module', 'particular', 'interface', 'hide', 'design', 'decision', 'design', 'car', 'fashion', 'car', 'manufacturer', 'offer', 'option', 'have', 'vehicle', 'economical', 'manufacture']"
582,"For instance, a car manufacturer may have a luxury version of the car as well as a standard version. The luxury version comes with a more powerful engine than the standard version. The engineers designing the two different car engines, one for the luxury version and one for the standard version, provide the same interface for both engines. Both engines fit into the engine bay of the car which is the same between both versions. Both engines fit the same transmission, the same engine mounts, and the same controls. The differences in the engines are that the more powerful luxury version has a larger displacement with a fuel injection system that is programmed to provide the fuel-air mixture that the larger displacement engine requires.","['instance', 'car', 'manufacturer', 'luxury', 'version', 'car', 'standard', 'version', 'luxury', 'version', 'come', 'powerful', 'engine', 'standard', 'version', 'engineer', 'design', 'different', 'car', 'engine', 'luxury', 'version', 'standard', 'version', 'provide', 'interface', 'engine', 'engine', 'fit', 'engine', 'bay', 'car', 'version', 'engine', 'fit', 'transmission', 'engine', 'mount', 'control', 'difference', 'engine', 'powerful', 'luxury', 'version', 'large', 'displacement', 'fuel', 'injection', 'system', 'program', 'provide', 'fuel', 'air', 'mixture', 'large', 'displacement', 'engine', 'require']"
583,"In addition to the more powerful engine, the luxury version may also offer other options such as a better radio with CD player, more comfortable seats, a better suspension system with wider tires, and different paint colors. With all of these changes, most of the car is the same between the standard version and the luxury version. The radio with CD player is a module that replaces the standard radio, also a module, in the luxury model. The more comfortable seats are installed into the same seat mounts as the standard types of seats. Whether the seats are leather or plastic, or offer lumbar support or not, does not matter.","['addition', 'powerful', 'engine', 'luxury', 'version', 'offer', 'option', 'well', 'radio', 'player', 'comfortable', 'seat', 'well', 'suspension', 'system', 'wide', 'tire', 'different', 'paint', 'color', 'change', 'car', 'standard', 'version', 'luxury', 'version', 'radio', 'player', 'module', 'replace', 'standard', 'radio', 'module', 'luxury', 'model', 'comfortable', 'seat', 'instal', 'seat', 'mount', 'standard', 'type', 'seat', 'seat', 'leather', 'plastic', 'offer', 'lumbar', 'support', 'matter']"
584,The engineers design the car by dividing the task up into pieces of work that are assigned to teams. Each team then designs their component to a particular standard or interface which allows the team flexibility in the design of the component while at the same time ensuring that all of the components will fit together.,"['engineer', 'design', 'car', 'divide', 'task', 'piece', 'work', 'assign', 'team', 'team', 'design', 'component', 'particular', 'standard', 'interface', 'allow', 'team', 'flexibility', 'design', 'component', 'time', 'ensure', 'component', 'fit']"
585,"Motor vehicle manufacturers frequently use the same core structure for several different models, in part as a cost-control measure. Such a ""platform"" also provides an example of information hiding, since the floorplan can be built without knowing whether it is to be used in a sedan or a hatchback.","['motor', 'vehicle', 'manufacturer', 'frequently', 'use', 'core', 'structure', 'different', 'model', 'cost', 'control', 'measure', 'platform', 'provide', 'example', 'information', 'hiding', 'floorplan', 'build', 'know', 'sedan', 'hatchback']"
586,"As can be seen by this example, information hiding provides flexibility. This flexibility allows a programmer to modify the functionality of a computer program during normal evolution as the computer program is changed to better fit the needs of users. When a computer program is well designed, decomposing the source code solution into modules using the principle of information hiding, evolutionary changes are much easier because the changes typically are local rather than global changes.","['see', 'example', 'information', 'hiding', 'provide', 'flexibility', 'flexibility', 'allow', 'programmer', 'modify', 'functionality', 'computer', 'program', 'normal', 'evolution', 'computer', 'program', 'change', 'well', 'fit', 'need', 'user', 'computer', 'program', 'design', 'decompose', 'source', 'code', 'solution', 'module', 'principle', 'information', 'hiding', 'evolutionary', 'change', 'easy', 'change', 'typically', 'local', 'global', 'change']"
587,"Cars provide another example of this in how they interface with drivers. They present a standard interface pedals, wheel, shifter, signals, gauges, etc. on which people are trained and licensed. Thus, people only have to learn to drive a car; they don't need to learn a completely different way of driving every time they drive a new model. Granted, there are manual and automatic transmissions and other such differences, but on the whole, cars maintain a unified interface.","['car', 'provide', 'example', 'interface', 'driver', 'present', 'standard', 'interface', 'pedal', 'wheel', 'shifter', 'signal', 'gauge', 'etc', 'people', 'train', 'license', 'people', 'learn', 'drive', 'car', 'need', 'learn', 'completely', 'different', 'way', 'drive', 'time', 'drive', 'new', 'model', 'grant', 'manual', 'automatic', 'transmission', 'difference', 'car', 'maintain', 'unified', 'interface']"
588,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
589,"In a computer system, any time a new context is created based on some model, it is said that the model has been instantiated. In practice, this instance usually has a data structure in common with other instances, but the values stored in the instances are separate. Changing the values in one instance will then not interfere with the values of some other instance. A compute instance can be software or hardware which can run code, for example a CPU, GPU or a virtual machine.citation needed","['computer', 'system', 'time', 'new', 'context', 'create', 'base', 'model', 'say', 'model', 'instantiate', 'practice', 'instance', 'usually', 'data', 'structure', 'common', 'instance', 'value', 'store', 'instance', 'separate', 'change', 'value', 'instance', 'interfere', 'value', 'instance', 'compute', 'instance', 'software', 'hardware', 'run', 'code', 'example', 'cpu', 'gpu', 'virtual', 'machine.citation', 'need']"
590,"In computer graphics, a polygonal model can be instantiated in order to be drawn several times in different locations in a scene. This is a technique that can be used to improve the performance of rendering, since the work needed to display each instance overlaps.","['computer', 'graphic', 'polygonal', 'model', 'instantiate', 'order', 'draw', 'time', 'different', 'location', 'scene', 'technique', 'improve', 'performance', 'rendering', 'work', 'need', 'display', 'instance', 'overlap']"
591,"In object-oriented programming OOP, an instance is a concrete occurrence of any object, existing usually during the runtime of a computer program. Formally, ""instance"" is synonymous with ""object"" as they are each a particular value realization, and these may be called an instance object; ""instance"" emphasizes the distinct identity of the object. The creation of an instance is called instantiation.","['object', 'orient', 'programming', 'oop', 'instance', 'concrete', 'occurrence', 'object', 'exist', 'usually', 'runtime', 'computer', 'program', 'formally', 'instance', 'synonymous', 'object', 'particular', 'value', 'realization', 'call', 'instance', 'object', 'instance', 'emphasize', 'distinct', 'identity', 'object', 'creation', 'instance', 'call', 'instantiation']"
592,"An object may be varied in a number of ways. Each realized variation of that object is an instance of its class. That is, it is a member of a given class that has specified values rather than variables. In a non-programming context, you could think of ""dog"" as a type and your particular dog as an instance of that class.1","['object', 'varied', 'number', 'way', 'realize', 'variation', 'object', 'instance', 'class', 'member', 'give', 'class', 'specify', 'value', 'variable', 'non', 'programming', 'context', 'think', 'dog', 'type', 'particular', 'dog', 'instance', 'class']"
593,"In class-based programming, objects are created from classes by subroutines called constructors, and destroyed by destructors. An object is an instance of a class, and may be called a class instance or class object; instantiation is then also known as construction. Not all classes can be instantiated – abstract classes cannot be instantiated, while classes that can be instantiated are called concrete classes. In prototype-based programming, instantiation is instead done by copying cloning a prototype instance.","['class', 'base', 'programming', 'object', 'create', 'class', 'subroutine', 'call', 'constructor', 'destroy', 'destructor', 'object', 'instance', 'class', 'call', 'class', 'instance', 'class', 'object', 'instantiation', 'know', 'construction', 'class', 'instantiate', 'abstract', 'class', 'instantiate', 'class', 'instantiate', 'call', 'concrete', 'class', 'prototype', 'base', 'programming', 'instantiation', 'instead', 'copy', 'clone', 'prototype', 'instance']"
594,"In the context of POSIX-oriented operating systems, the term ""program instance"" typically refers to any executing process instantiated from that program via system calls, e.g. fork and exec; that is, each executing process in the OS is an instance of some program which it has been instantiated from.2","['context', 'posix', 'orient', 'operating', 'system', 'term', 'program', 'instance', 'typically', 'refer', 'executing', 'process', 'instantiate', 'program', 'system', 'call', 'e.g.', 'fork', 'exec', 'executing', 'process', 'instance', 'program', 'instantiate', 'from']"
595,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
596,"In class-based, object-oriented programming, an instance variable is a variable defined in a class i.e. a member variable, for which each instantiated object of the class has a separate copy, or instance. An instance variable has similarities with a class variable,1 but is non-static. An instance variable is a variable which is declared in a class but outside of constructors, methods, or blocks. Instance variables are created when an object is instantiated, and are accessible to all the constructors, methods, or blocks in the class. Access modifiers can be given to the instance variable.","['class', 'base', 'object', 'orient', 'programming', 'instance', 'variable', 'variable', 'define', 'class', 'i.e.', 'member', 'variable', 'instantiate', 'object', 'class', 'separate', 'copy', 'instance', 'instance', 'variable', 'similarity', 'class', 'variable', 'non', 'static', 'instance', 'variable', 'variable', 'declare', 'class', 'outside', 'constructor', 'method', 'block', 'instance', 'variable', 'create', 'object', 'instantiate', 'accessible', 'constructor', 'method', 'block', 'class', 'access', 'modifier', 'give', 'instance', 'variable']"
597,"An instance variable is not a class variable although there are similarities. It is a type of class attribute or class property, field, or data member. The same dichotomy between instance and class members applies to methods ""member functions"" as well; a class may have both instance methods and class methods.","['instance', 'variable', 'class', 'variable', 'similarity', 'type', 'class', 'attribute', 'class', 'property', 'field', 'data', 'member', 'dichotomy', 'instance', 'class', 'member', 'apply', 'method', 'member', 'function', 'class', 'instance', 'method', 'class', 'method']"
598,Each instance variable lives in memory for the lifetime of the object it is owned by.2,"['instance', 'variable', 'live', 'memory', 'lifetime', 'object', 'own', 'by']"
599,"Variables are properties an object knows about itself. All instances of an object have their own copies of instance variables, even if the value is the same from one object to another. One object instance can change values of its instance variables without affecting all other instances. Instance variables can be used by all methods of a class unless the method is declared as static.3","['variable', 'property', 'object', 'know', 'instance', 'object', 'copy', 'instance', 'variable', 'value', 'object', 'object', 'instance', 'change', 'value', 'instance', 'variable', 'affect', 'instance', 'instance', 'variable', 'method', 'class', 'method', 'declare', 'static']"
600,"In this C++ example, the instance variable Request::number is a copy of the class variable Request::count1 where each instance constructed is assigned a sequential value of count1 before it is incremented. Since number is an instance variable, each Request object contains its own distinct value; in contrast, there is only one object Request::count1 available to all instances with the same value.","['c++', 'example', 'instance', 'variable', 'request::number', 'copy', 'class', 'variable', 'request::count1', 'instance', 'construct', 'assign', 'sequential', 'value', 'count1', 'incremente', 'number', 'instance', 'variable', 'request', 'object', 'contain', 'distinct', 'value', 'contrast', 'object', 'request::count1', 'available', 'instance', 'value']"
601,This computer-programming-related article is a stub. You can help Wikipedia by expanding it.,"['computer', 'programming', 'relate', 'article', 'stub', 'help', 'wikipedia', 'expand']"
602,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
603,"In computing, an interface is a shared boundary across which two or more separate components of a computer system exchange information. The exchange can be between software, computer hardware, peripheral devices, humans, and combinations of these.1 Some computer hardware devices, such as a touchscreen, can both send and receive data through the interface, while others such as a mouse or microphone may only provide an interface to send data to a given system.2","['computing', 'interface', 'share', 'boundary', 'separate', 'component', 'computer', 'system', 'exchange', 'information', 'exchange', 'software', 'computer', 'hardware', 'peripheral', 'device', 'human', 'combination', 'these', 'computer', 'hardware', 'device', 'touchscreen', 'send', 'receive', 'datum', 'interface', 'mouse', 'microphone', 'provide', 'interface', 'send', 'datum', 'give', 'system']"
604,"Hardware interfaces exist in many components, such as the various buses, storage devices, other I/O devices, etc. A hardware interface is described by the mechanical, electrical, and logical signals at the interface and the protocol for sequencing them sometimes called signaling.3 A standard interface, such as SCSI, decouples the design and introduction of computing hardware, such as I/O devices, from the design and introduction of other components of a computing system, thereby allowing users and manufacturers great flexibility in the implementation of computing systems.3 Hardware interfaces can be parallel with several electrical connections carrying parts of the data simultaneously or serial where data are sent one bit at a time.4","['hardware', 'interface', 'exist', 'component', 'bus', 'storage', 'device', 'device', 'etc', 'hardware', 'interface', 'describe', 'mechanical', 'electrical', 'logical', 'signal', 'interface', 'protocol', 'sequence', 'call', 'signaling', 'standard', 'interface', 'scsi', 'decouple', 'design', 'introduction', 'computing', 'hardware', 'device', 'design', 'introduction', 'component', 'computing', 'system', 'allow', 'user', 'manufacturer', 'great', 'flexibility', 'implementation', 'compute', 'systems', 'hardware', 'interface', 'parallel', 'electrical', 'connection', 'carry', 'part', 'datum', 'simultaneously', 'serial', 'datum', 'send', 'bit', 'time']"
605,"A software interface may refer to a wide range of different types of interface at different ""levels"". For example, an operating system may interface with pieces of hardware. Applications or programs running on the operating system may need to interact via data streams, filters, and pipelines.5 In object oriented programs, objects within an application may need to interact via methods.6","['software', 'interface', 'refer', 'wide', 'range', 'different', 'type', 'interface', 'different', 'level', 'example', 'operate', 'system', 'interface', 'piece', 'hardware', 'application', 'program', 'run', 'operating', 'system', 'need', 'interact', 'datum', 'stream', 'filter', 'pipelines', 'object', 'orient', 'program', 'object', 'application', 'need', 'interact', 'methods']"
606,"A key principle of design is to prohibit access to all resources by default, allowing access only through well-defined entry points, i.e., interfaces.7 Software interfaces provide access to computer resources such as memory, CPU, storage, etc. of the underlying computer system; direct access i.e., not through well-designed interfaces to such resources by software can have major ramifications—sometimes disastrous ones—for functionality and stability.citation needed","['key', 'principle', 'design', 'prohibit', 'access', 'resource', 'default', 'allow', 'access', 'define', 'entry', 'point', 'i.e.', 'interfaces', 'software', 'interface', 'provide', 'access', 'computer', 'resource', 'memory', 'cpu', 'storage', 'etc', 'underlying', 'computer', 'system', 'direct', 'access', 'i.e.', 'design', 'interface', 'resource', 'software', 'major', 'ramification', 'disastrous', 'one', 'functionality', 'stability.citation', 'need']"
607,"Interfaces between software components can provide constants, data types, types of procedures, exception specifications, and method signatures. Sometimes, public variables are also defined as part of an interface.8","['interface', 'software', 'component', 'provide', 'constant', 'datum', 'type', 'type', 'procedure', 'exception', 'specification', 'method', 'signature', 'public', 'variable', 'define', 'interface']"
608,"The interface of a software module A is deliberately defined separately from the implementation of that module. The latter contains the actual code of the procedures and methods described in the interface, as well as other ""private"" variables, procedures, etc. Another software module B, for example the client to A, that interacts with A is forced to do so only through the published interface. One practical advantage of this arrangement is that replacing the implementation of A with another implementation of the same interface should not cause B to fail—how A internally meets the requirements of the interface is not relevant to B, which is only concerned with the specifications of the interface. See also Liskov substitution principle.citation needed","['interface', 'software', 'module', 'deliberately', 'define', 'separately', 'implementation', 'module', 'contain', 'actual', 'code', 'procedure', 'method', 'describe', 'interface', 'private', 'variable', 'procedure', 'etc', 'software', 'module', 'example', 'client', 'interact', 'force', 'publish', 'interface', 'practical', 'advantage', 'arrangement', 'replace', 'implementation', 'implementation', 'interface', 'cause', 'fail', 'internally', 'meet', 'requirement', 'interface', 'relevant', 'concerned', 'specification', 'interface', 'liskov', 'substitution', 'principle.citation', 'need']"
609,"In some object-oriented languages, especially those without full multiple inheritance, the term interface is used to define an abstract type that contains no data but defines behaviours as method signatures. A class having code and data for all the methods corresponding to that interface and declaring so is said to implement that interface.9 Furthermore, even in single-inheritance-languages, one can implement multiple interfaces, and hence can be of different types at the same time.10","['object', 'orient', 'language', 'especially', 'multiple', 'inheritance', 'term', 'interface', 'define', 'abstract', 'type', 'contain', 'datum', 'define', 'behaviour', 'method', 'signature', 'class', 'have', 'code', 'datum', 'method', 'correspond', 'interface', 'declare', 'say', 'implement', 'interface', 'furthermore', 'single', 'inheritance', 'language', 'implement', 'multiple', 'interface', 'different', 'type', 'time']"
610,"An interface is thus a type definition; anywhere an object can be exchanged for example, in a function or method call the type of the object to be exchanged can be defined in terms of one of its implemented interfaces or base-classes rather than specifying the specific class. This approach means that any class that implements that interface can be used.citation needed For example, a dummy implementation may be used to allow development to progress before the final implementation is available. In another case, a fake or mock implementation may be substituted during testing. Such stub implementations are replaced by real code later in the development process.","['interface', 'type', 'definition', 'object', 'exchange', 'example', 'function', 'method', 'type', 'object', 'exchange', 'define', 'term', 'implement', 'interface', 'base', 'class', 'specify', 'specific', 'class', 'approach', 'mean', 'class', 'implement', 'interface', 'used.citation', 'need', 'example', 'dummy', 'implementation', 'allow', 'development', 'progress', 'final', 'implementation', 'available', 'case', 'fake', 'mock', 'implementation', 'substitute', 'testing', 'stub', 'implementation', 'replace', 'real', 'code', 'later', 'development', 'process']"
611,"Usually a method defined in an interface contains no code and thus cannot itself be called; it must be implemented by non-abstract code to be run when it is invoked.citation needed An interface called ""Stack"" might define two methods: push and pop. It can be implemented in different ways, for example, FastStack and GenericStack—the first being fast, working with a data structure of fixed size, and the second using a data structure that can be resized, but at the cost of somewhat lower speed.","['usually', 'method', 'define', 'interface', 'contain', 'code', 'call', 'implement', 'non', 'abstract', 'code', 'run', 'invoked.citation', 'need', 'interface', 'call', 'stack', 'define', 'method', 'push', 'pop', 'implement', 'different', 'way', 'example', 'faststack', 'genericstack', 'fast', 'work', 'data', 'structure', 'fix', 'size', 'second', 'data', 'structure', 'resize', 'cost', 'somewhat', 'low', 'speed']"
612,"Though interfaces can contain many methods they may contain only one or even none at all. For example, the Java language defines the interface Readable that has the single read method; various implementations are used for different purposes, including BufferedReader, FileReader, InputStreamReader, PipedReader, and StringReader. Marker interfaces like Serializable contain no methods at all and serve to provide run-time information to generic processing using Reflection.11","['interface', 'contain', 'method', 'contain', 'example', 'java', 'language', 'define', 'interface', 'readable', 'single', 'read', 'method', 'implementation', 'different', 'purpose', 'include', 'bufferedreader', 'filereader', 'inputstreamreader', 'pipedreader', 'stringreader', 'marker', 'interface', 'like', 'serializable', 'contain', 'method', 'serve', 'provide', 'run', 'time', 'information', 'generic', 'processing', 'reflection']"
613,"The use of interfaces allows for a programming style called programming to the interface. The idea behind this approach is to base programming logic on the interfaces of the objects used, rather than on internal implementation details. Programming to the interface reduces dependency on implementation specifics and makes code more reusable.12","['use', 'interface', 'allow', 'programming', 'style', 'call', 'programming', 'interface', 'idea', 'approach', 'base', 'programming', 'logic', 'interface', 'object', 'internal', 'implementation', 'detail', 'program', 'interface', 'reduce', 'dependency', 'implementation', 'specific', 'make', 'code', 'reusable']"
614,"Pushing this idea to the extreme, inversion of control leaves the context to inject the code with the specific implementations of the interface that will be used to perform the work.","['push', 'idea', 'extreme', 'inversion', 'control', 'leave', 'context', 'inject', 'code', 'specific', 'implementation', 'interface', 'perform', 'work']"
615,"A user interface is a point of interaction between a computer and humans; it includes any number of modalities of interaction such as graphics, sound, position, movement, etc. where data is transferred between the user and the computer system.","['user', 'interface', 'point', 'interaction', 'computer', 'human', 'include', 'number', 'modality', 'interaction', 'graphic', 'sound', 'position', 'movement', 'etc', 'datum', 'transfer', 'user', 'computer', 'system']"
616,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
617,"Multiple inheritance is a feature of some object-oriented computer programming languages in which an object or class can inherit features from more than one parent object or parent class. It is distinct from single inheritance, where an object or class may only inherit from one particular object or class.","['multiple', 'inheritance', 'feature', 'object', 'orient', 'computer', 'programming', 'language', 'object', 'class', 'inherit', 'feature', 'parent', 'object', 'parent', 'class', 'distinct', 'single', 'inheritance', 'object', 'class', 'inherit', 'particular', 'object', 'class']"
618,"Multiple inheritance has been a controversial issue for many years,12 with opponents pointing to its increased complexity and ambiguity in situations such as the ""diamond problem"", where it may be ambiguous as to which parent class a particular feature is inherited from if more than one parent class implements said feature. This can be addressed in various ways, including using virtual inheritance.3 Alternate methods of object composition not based on inheritance such as mixins and traits have also been proposed to address the ambiguity.","['multiple', 'inheritance', 'controversial', 'issue', 'years', 'opponent', 'point', 'increase', 'complexity', 'ambiguity', 'situation', 'diamond', 'problem', 'ambiguous', 'parent', 'class', 'particular', 'feature', 'inherit', 'parent', 'class', 'implement', 'say', 'feature', 'address', 'way', 'include', 'virtual', 'inheritance', 'alternate', 'method', 'object', 'composition', 'base', 'inheritance', 'mixin', 'trait', 'propose', 'address', 'ambiguity']"
619,"In object-oriented programming OOP, inheritance describes a relationship between two classes in which one class the child class subclasses the parent class. The child inherits methods and attributes of the parent, allowing for shared functionality. For example, one might create a variable class Mammal with features such as eating, reproducing, etc.; then define a child class Cat that inherits those features without having to explicitly program them, while adding new features like chasing mice.","['object', 'orient', 'programming', 'oop', 'inheritance', 'describe', 'relationship', 'class', 'class', 'child', 'class', 'subclasse', 'parent', 'class', 'child', 'inherit', 'method', 'attribute', 'parent', 'allow', 'share', 'functionality', 'example', 'create', 'variable', 'class', 'mammal', 'feature', 'eat', 'reproducing', 'etc', 'define', 'child', 'class', 'cat', 'inherit', 'feature', 'have', 'explicitly', 'program', 'add', 'new', 'feature', 'like', 'chase', 'mouse']"
620,"Multiple inheritance allows programmers to use more than one totally orthogonal hierarchy simultaneously, such as allowing Cat to inherit from Cartoon character and Pet and Mammal and access features from within all of those classes.","['multiple', 'inheritance', 'allow', 'programmer', 'use', 'totally', 'orthogonal', 'hierarchy', 'simultaneously', 'allow', 'cat', 'inherit', 'cartoon', 'character', 'pet', 'mammal', 'access', 'feature', 'class']"
621,"Languages that support multiple inheritance include: C++, Common Lisp via Common Lisp Object System CLOS, EuLisp via The EuLisp Object System TELOS, Curl, Dylan, Eiffel, Logtalk, Object REXX, Scala via use of mixin classes, OCaml, Perl, POP-11, Python, R, Raku, and Tcl built-in from 8.6 or via Incremental Tcl Incr Tcl in earlier versions45.","['language', 'support', 'multiple', 'inheritance', 'include', 'c++', 'common', 'lisp', 'common', 'lisp', 'object', 'system', 'clos', 'eulisp', 'eulisp', 'object', 'system', 'telos', 'curl', 'dylan', 'eiffel', 'logtalk', 'object', 'rexx', 'scala', 'use', 'mixin', 'class', 'ocaml', 'perl', 'pop-11', 'python', 'raku', 'tcl', 'build', '8', 'incremental', 'tcl', 'incr', 'tcl', 'early', 'versions45']"
622,"IBM System Object Model SOM runtime supports multiple inheritance, and any programming language targeting SOM can implement new SOM classes inherited from multiple bases.","['ibm', 'system', 'object', 'model', 'som', 'runtime', 'support', 'multiple', 'inheritance', 'programming', 'language', 'target', 'som', 'implement', 'new', 'som', 'class', 'inherit', 'multiple', 'basis']"
623,"Some object-oriented languages, such as Swift, Java, Fortran since its 2003 revision, C#, and Ruby implement single inheritance, although protocols, or interfaces, provide some of the functionality of true multiple inheritance.","['object', 'orient', 'language', 'swift', 'java', 'fortran', '2003', 'revision', 'ruby', 'implement', 'single', 'inheritance', 'protocol', 'interface', 'provide', 'functionality', 'true', 'multiple', 'inheritance']"
624,PHP uses traits classes to inherit specific method implementations. Ruby uses modules to inherit multiple methods.,"['php', 'use', 'trait', 'class', 'inherit', 'specific', 'method', 'implementation', 'ruby', 'use', 'module', 'inherit', 'multiple', 'method']"
625,"The ""diamond problem"" sometimes referred to as the ""Deadly Diamond of Death""6 is an ambiguity that arises when two classes B and C inherit from A, and class D inherits from both B and C. If there is a method in A that B and C have overridden, and D does not override it, then which version of the method does D inherit: that of B, or that of C?","['diamond', 'problem', 'refer', 'deadly', 'diamond', 'death', 'ambiguity', 'arise', 'class', 'inherit', 'class', 'inherit', 'method', 'overridden', 'override', 'version', 'method', 'inherit']"
626,"For example, in the context of GUI software development, a class Button may inherit from both classes Rectangle for appearance and Clickable for functionality/input handling, and classes Rectangle and Clickable both inherit from the Object class. Now if the equals method is called for a Button object and there is no such method in the Button class but there is an overridden equals method in Rectangle or Clickable or both, which method should be eventually called?","['example', 'context', 'gui', 'software', 'development', 'class', 'button', 'inherit', 'class', 'rectangle', 'appearance', 'clickable', 'functionality', 'input', 'handling', 'class', 'rectangle', 'clickable', 'inherit', 'object', 'class', 'equal', 'method', 'call', 'button', 'object', 'method', 'button', 'class', 'overridden', 'equal', 'method', 'rectangle', 'clickable', 'method', 'eventually', 'call']"
627,"It is called the ""diamond problem"" because of the shape of the class inheritance diagram in this situation. In this case, class A is at the top, both B and C separately beneath it, and D joins the two together at the bottom to form a diamond shape.","['call', 'diamond', 'problem', 'shape', 'class', 'inheritance', 'diagram', 'situation', 'case', 'class', 'separately', 'beneath', 'join', 'form', 'diamond', 'shape']"
628,Languages have different ways of dealing with these problems of repeated inheritance.,"['language', 'different', 'way', 'deal', 'problem', 'repeat', 'inheritance']"
629,"Languages that allow only single inheritance, where a class can only derive from one base class, do not have the diamond problem. The reason for this is that such languages have at most one implementation of any method at any level in the inheritance chain regardless of the repetition or placement of methods. Typically these languages allow classes to implement multiple protocols, called interfaces in Java. These protocols define methods but do not provide concrete implementations. This strategy has been used by ActionScript, C#, D, Java, Nemerle, Object Pascal, Objective-C, Smalltalk, Swift and PHP.13 All these languages allow classes to implement multiple protocols.","['language', 'allow', 'single', 'inheritance', 'class', 'derive', 'base', 'class', 'diamond', 'problem', 'reason', 'language', 'implementation', 'method', 'level', 'inheritance', 'chain', 'regardless', 'repetition', 'placement', 'method', 'typically', 'language', 'allow', 'class', 'implement', 'multiple', 'protocol', 'call', 'interface', 'java', 'protocol', 'define', 'method', 'provide', 'concrete', 'implementation', 'strategy', 'actionscript', 'java', 'nemerle', 'object', 'pascal', 'objective', 'smalltalk', 'swift', 'php', 'language', 'allow', 'class', 'implement', 'multiple', 'protocol']"
630,"Moreover, Ada, C#, Java, Object Pascal, Objective-C, Swift and PHP allow multiple-inheritance of interfaces called protocols in Objective-C and Swift. Interfaces are like abstract base classes that specify method signatures without implementing any behaviour. ""Pure"" interfaces such as the ones in Java up to version 7 do not permit any implementation or instance data in the interface. Nevertheless, even when several interfaces declare the same method signature, as soon as that method is implemented defined anywhere in the inheritance chain, it overrides any implementation of that method in the chain above it in its superclasses. Hence, at any given level in the inheritance chain, there can be at most one implementation of any method. Thus, single-inheritance method implementation does not exhibit the Diamond Problem even with multiple-inheritance of interfaces. With the introduction of default implementation for interfaces in Java 8 and C# 8, it is still possible to generate a Diamond Problem, although this will only appear as a compile-time error.","['ada', 'java', 'object', 'pascal', 'objective', 'swift', 'php', 'allow', 'multiple', 'inheritance', 'interface', 'call', 'protocol', 'objective', 'swift', 'interface', 'like', 'abstract', 'base', 'class', 'specify', 'method', 'signature', 'implement', 'behaviour', 'pure', 'interface', 'one', 'java', 'version', 'permit', 'implementation', 'instance', 'datum', 'interface', 'interface', 'declare', 'method', 'signature', 'soon', 'method', 'implement', 'define', 'inheritance', 'chain', 'override', 'implementation', 'method', 'chain', 'superclass', 'give', 'level', 'inheritance', 'chain', 'implementation', 'method', 'single', 'inheritance', 'method', 'implementation', 'exhibit', 'diamond', 'problem', 'multiple', 'inheritance', 'interface', 'introduction', 'default', 'implementation', 'interface', 'java', 'possible', 'generate', 'diamond', 'problem', 'appear', 'compile', 'time', 'error']"
631,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
632,"In computer science, a mutator method is a method used to control changes to a variable. They are also widely known as setter methods. Often a setter is accompanied by a getter together also known as accessors, which returns the value of the private member variable.","['computer', 'science', 'mutator', 'method', 'method', 'control', 'change', 'variable', 'widely', 'know', 'setter', 'method', 'setter', 'accompany', 'getter', 'know', 'accessor', 'return', 'value', 'private', 'member', 'variable']"
633,"The mutator method is most often used in object-oriented programming, in keeping with the principle of encapsulation. According to this principle, member variables of a class are made private to hide and protect them from other code, and can only be modified by a public member function the mutator method, which takes the desired new value as a parameter, optionally validates it, and modifies the private member variable. Mutator methods can be compared to assignment operator overloading but they typically appear at different levels of the object hierarchy.","['mutator', 'method', 'object', 'orient', 'programming', 'keep', 'principle', 'encapsulation', 'accord', 'principle', 'member', 'variable', 'class', 'private', 'hide', 'protect', 'code', 'modify', 'public', 'member', 'function', 'mutator', 'method', 'take', 'desire', 'new', 'value', 'parameter', 'optionally', 'validate', 'modify', 'private', 'member', 'variable', 'mutator', 'method', 'compare', 'assignment', 'operator', 'overloading', 'typically', 'appear', 'different', 'level', 'object', 'hierarchy']"
634,"Mutator methods may also be used in non-object-oriented environments. In this case, a reference to the variable to be modified is passed to the mutator, along with the new value. In this scenario, the compiler cannot restrict code from bypassing the mutator method and changing the variable directly. The responsibility falls to the developers to ensure the variable is only modified through the mutator method and not modified directly.","['mutator', 'method', 'non', 'object', 'orient', 'environment', 'case', 'reference', 'variable', 'modify', 'pass', 'mutator', 'new', 'value', 'scenario', 'compiler', 'restrict', 'code', 'bypass', 'mutator', 'method', 'change', 'variable', 'directly', 'responsibility', 'fall', 'developer', 'ensure', 'variable', 'modify', 'mutator', 'method', 'modify', 'directly']"
635,"In programming languages that support them, properties offer a convenient alternative without giving up the utility of encapsulation.","['programming', 'language', 'support', 'property', 'offer', 'convenient', 'alternative', 'give', 'utility', 'encapsulation']"
636,"In the examples below, a fully implemented mutator method can also validate the input data or take further action such as triggering an event.","['example', 'fully', 'implement', 'mutator', 'method', 'validate', 'input', 'datum', 'action', 'trigger', 'event']"
637,"The alternative to defining mutator and accessor methods, or property blocks, is to give the instance variable some visibility other than private and access it directly from outside the objects. Much finer control of access rights can be defined using mutators and accessors. For example, a parameter may be made read-only simply by defining an accessor but not a mutator. The visibility of the two methods may be different; it is often useful for the accessor to be public while the mutator remains protected, package-private or internal.","['alternative', 'define', 'mutator', 'accessor', 'method', 'property', 'block', 'instance', 'variable', 'visibility', 'private', 'access', 'directly', 'outside', 'object', 'finer', 'control', 'access', 'right', 'define', 'mutator', 'accessor', 'example', 'parameter', 'read', 'simply', 'define', 'accessor', 'mutator', 'visibility', 'method', 'different', 'useful', 'accessor', 'public', 'mutator', 'remains', 'protect', 'package', 'private', 'internal']"
638,"The block where the mutator is defined provides an opportunity for validation or preprocessing of incoming data. If all external access is guaranteed to come through the mutator, then these steps cannot be bypassed. For example, if a date is represented by separate private year, month and day variables, then incoming dates can be split by the setDate mutator while for consistency the same private instance variables are accessed by setYear and setMonth. In all cases month values outside of 1 - 12 can be rejected by the same code.","['block', 'mutator', 'define', 'provide', 'opportunity', 'validation', 'preprocessing', 'incoming', 'datum', 'external', 'access', 'guarantee', 'come', 'mutator', 'step', 'bypass', 'example', 'date', 'represent', 'separate', 'private', 'year', 'month', 'day', 'variable', 'incoming', 'date', 'split', 'setdate', 'mutator', 'consistency', 'private', 'instance', 'variable', 'access', 'setyear', 'setmonth', 'case', 'month', 'value', 'outside', 'reject', 'code']"
639,Accessors conversely allow for synthesis of useful data representations from internal variables while keeping their structure encapsulated and hidden from outside modules. A monetary getAmount accessor may build a string from a numeric variable with the number of decimal places defined by a hidden currency parameter.,"['accessor', 'conversely', 'allow', 'synthesis', 'useful', 'datum', 'representation', 'internal', 'variable', 'keep', 'structure', 'encapsulate', 'hide', 'outside', 'module', 'monetary', 'getamount', 'accessor', 'build', 'string', 'numeric', 'variable', 'number', 'decimal', 'place', 'define', 'hide', 'currency', 'parameter']"
640,"Modern programming languages often offer the ability to generate the boilerplate for mutators and accessors in a single line—as for example C#'s public string Name get; set; and Ruby's attr_accessor :name. In these cases, no code blocks are created for validation, preprocessing or synthesis. These simplified accessors still retain the advantage of encapsulation over simple public instance variables, but it is common that, as system designs progress, the software is maintained and requirements change, the demands on the data become more sophisticated. Many automatic mutators and accessors eventually get replaced by separate blocks of code. The benefit of automatically creating them in the early days of the implementation is that the public interface of the class remains identical whether or not greater sophistication is added, requiring no extensive refactoring if it is.1","['modern', 'programming', 'language', 'offer', 'ability', 'generate', 'boilerplate', 'mutator', 'accessor', 'single', 'line', 'example', 'public', 'string', 'set', 'ruby', 'attr_accessor', 'case', 'code', 'block', 'create', 'validation', 'preprocesse', 'synthesis', 'simplified', 'accessor', 'retain', 'advantage', 'encapsulation', 'simple', 'public', 'instance', 'variable', 'common', 'system', 'design', 'progress', 'software', 'maintain', 'requirement', 'change', 'demand', 'datum', 'sophisticated', 'automatic', 'mutator', 'accessor', 'eventually', 'replace', 'separate', 'block', 'code', 'benefit', 'automatically', 'create', 'early', 'day', 'implementation', 'public', 'interface', 'class', 'remain', 'identical', 'great', 'sophistication', 'add', 'require', 'extensive', 'refactoring', 'is']"
641,"Manipulation of parameters that have mutators and accessors from inside the class where they are defined often requires some additional thought. In the early days of an implementation, when there is little or no additional code in these blocks, it makes no difference if the private instance variable is accessed directly or not. As validation, cross-validation, data integrity checks, preprocessing or other sophistication is added, subtle bugs may appear where some internal access makes use of the newer code while in other places it is bypassed.","['manipulation', 'parameter', 'mutator', 'accessor', 'inside', 'class', 'define', 'require', 'additional', 'thought', 'early', 'day', 'implementation', 'little', 'additional', 'code', 'block', 'make', 'difference', 'private', 'instance', 'variable', 'access', 'directly', 'validation', 'cross', 'validation', 'datum', 'integrity', 'check', 'preprocesse', 'sophistication', 'add', 'subtle', 'bug', 'appear', 'internal', 'access', 'make', 'use', 'new', 'code', 'place', 'bypass']"
642,"Accessor functions can be less efficient than directly fetching or storing data fields due to the extra steps involved,2 however such functions are often inlined which eliminates the overhead of a function call.","['accessor', 'function', 'efficient', 'directly', 'fetch', 'store', 'datum', 'field', 'extra', 'step', 'involved', 'function', 'inline', 'eliminate', 'overhead', 'function']"
643,"This example illustrates the C# idea of properties, which are a special type of class member. Unlike Java, no explicit methods are defined; a public 'property' contains the logic to handle the actions. Note use of the built-in undeclared variable value.","['example', 'illustrate', 'idea', 'property', 'special', 'type', 'class', 'member', 'unlike', 'java', 'explicit', 'method', 'define', 'public', 'property', 'contain', 'logic', 'handle', 'action', 'note', 'use', 'build', 'undeclared', 'variable', 'value']"
644,"In later C# versions .NET Framework 3.5 and above, this example may be abbreviated as follows, without declaring the private variable name.","['later', 'version', '.net', 'framework', '3', 'example', 'abbreviate', 'follow', 'declare', 'private', 'variable']"
645,"Using the abbreviated syntax means that the underlying variable is no longer available from inside the class. As a result, the set portion of the property must be present for assignment. Access can be restricted with a set-specific access modifier.","['abbreviated', 'syntax', 'mean', 'underlie', 'variable', 'long', 'available', 'inside', 'class', 'result', 'set', 'portion', 'property', 'present', 'assignment', 'access', 'restrict', 'set', 'specific', 'access', 'modifier']"
646,"In Common Lisp Object System, slot specifications within class definitions may specify any of the :reader, :writer and :accessor options even multiple times to define reader methods, setter methods and accessor methods a reader method and the respective setf method.3 Slots are always directly accessible through their names with the use of with-slots and slot-value, and the slot accessor options define specialized methods that use slot-value.4","['common', 'lisp', 'object', 'system', 'slot', 'specification', 'class', 'definition', 'specify', 'reader', 'writer', 'accessor', 'option', 'multiple', 'time', 'define', 'reader', 'method', 'setter', 'method', 'accessor', 'method', 'reader', 'method', 'respective', 'setf', 'method', 'slots', 'directly', 'accessible', 'name', 'use', 'slot', 'slot', 'value', 'slot', 'accessor', 'option', 'define', 'specialized', 'method', 'use', 'slot', 'value']"
647,"CLOS itself has no notion of properties, although the MetaObject Protocol extension specifies means to access a slot's reader and writer function names, including the ones generated with the :accessor option.5","['clos', 'notion', 'property', 'metaobject', 'protocol', 'extension', 'specifie', 'mean', 'access', 'slot', 'reader', 'writer', 'function', 'name', 'include', 'one', 'generate', 'accessor', 'option']"
648,The following example shows a definition of a student class using these slot options and direct slot access:,"['follow', 'example', 'show', 'definition', 'student', 'class', 'slot', 'option', 'direct', 'slot', 'access']"
649,D supports a getter and setter function syntax. In version 2 of the language getter and setter class/struct methods should have the @property attribute.67,"['support', 'getter', 'setter', 'function', 'syntax', 'version', 'language', 'getter', 'setter', 'class', 'struct', 'method', '@property', 'attribute']"
650,A Student instance can be used like this:,"['student', 'instance', 'like']"
651,This is a simple class in Delphi language which illustrates the concept of public property for accessing a private field.,"['simple', 'class', 'delphi', 'language', 'illustrate', 'concept', 'public', 'property', 'access', 'private', 'field']"
652,"In this example of a simple class representing a student with only the name stored, one can see the variable name is private, i.e. only visible from the Student class, and the ""setter"" and ""getter"" are public, namely the ""getName"" and ""setNamename"" methods.","['example', 'simple', 'class', 'represent', 'student', 'store', 'variable', 'private', 'i.e.', 'visible', 'student', 'class', 'setter', 'getter', 'public', 'getname', 'setnamename', 'method']"
653,In this example constructor-function Student is used to create objects representing a student with only the name stored.,"['example', 'constructor', 'function', 'student', 'create', 'object', 'represent', 'student', 'store']"
654,Or using a deprecated way to define accessors in Web browsers:8,"['deprecate', 'way', 'define', 'accessor', 'web', 'browsers']"
655,Or using prototypes for inheritance and ES6 accessor syntax:,"['prototype', 'inheritance', 'es6', 'accessor', 'syntax']"
656,"Using traditional Objective-C 1.0 syntax, with manual reference counting as the one working on GNUstep on Ubuntu 12.04:","['traditional', 'objective', '1', 'syntax', 'manual', 'reference', 'counting', 'work', 'gnustep', 'ubuntu', '12']"
657,"Using newer Objective-C 2.0 syntax as used in Mac OS X 10.6, iOS 4 and Xcode 3.2, generating the same code as described above:","['new', 'objective', '2', 'syntax', 'mac', '10', 'ios', 'xcode', '3', 'generate', 'code', 'describe']"
658,"And starting with OS X 10.8 and iOS 6, while using Xcode 4.4 and up, syntax can be even simplified:","['start', '10', 'ios', 'xcode', '4', 'syntax', 'simplify']"
659,"Or, using the Moose Object System:","['moose', 'object', 'system']"
660,"PHP defines the ""magic methods"" __getand__set for properties of objects.9","['php', 'define', 'magic', 'method', 'getand__set', 'property', 'objects']"
661,"In this example of a simple class representing a student with only the name stored, one can see the variable name is private, i.e. only visible from the Student class, and the ""setter"" and ""getter"" is public, namely the getName and setName'name' methods.","['example', 'simple', 'class', 'represent', 'student', 'store', 'variable', 'private', 'i.e.', 'visible', 'student', 'class', 'setter', 'getter', 'public', 'getname', ""setname'name"", 'method']"
662,"This example uses a Python class with one variable, a getter, and a setter.","['example', 'use', 'python', 'class', 'variable', 'getter', 'setter']"
663,"In Racket, the object system is a way to organize code that comes in addition to modules and units. As in the rest of the language, the object system has first-class values and lexical scope is used to control access to objects and methods.","['racket', 'object', 'system', 'way', 'organize', 'code', 'come', 'addition', 'module', 'unit', 'rest', 'language', 'object', 'system', 'class', 'value', 'lexical', 'scope', 'control', 'access', 'object', 'method']"
664,"Struct definitions are an alternative way to define new types of values, with mutators being present when explicitly required:","['struct', 'definition', 'alternative', 'way', 'define', 'new', 'type', 'value', 'mutator', 'present', 'explicitly', 'require']"
665,"In Ruby, individual accessor and mutator methods may be defined, or the metaprogramming constructs attr_reader or attr_accessor may be used both to declare a private variable in a class and to provide either read-only or read-write public access to it respectively.","['ruby', 'individual', 'accessor', 'mutator', 'method', 'define', 'metaprogramming', 'construct', 'attr_reader', 'attr_accessor', 'declare', 'private', 'variable', 'class', 'provide', 'read', 'read', 'write', 'public', 'access', 'respectively']"
666,Defining individual accessor and mutator methods creates space for pre-processing or validation of the data,"['define', 'individual', 'accessor', 'mutator', 'method', 'create', 'space', 'pre', 'processing', 'validation', 'datum']"
667,Read-only simple public access to implied @name variable,"['read', 'simple', 'public', 'access', 'imply', '@name', 'variable']"
668,Read-write simple public access to implied @name variable,"['read', 'write', 'simple', 'public', 'access', 'imply', '@name', 'variable']"
669,"This example illustrates the VB.NET idea of properties, which are used in classes. Similar to C#, there is an explicit use of the Get and Set methods.","['example', 'illustrate', 'vb.net', 'idea', 'property', 'class', 'similar', 'explicit', 'use', 'set', 'method']"
670,"In VB.NET 2010, Auto Implemented properties can be utilized to create a property without having to use the Get and Set syntax. Note that a hidden variable is created by the compiler, called _name, to correspond with the Property name. Using another variable within the class named _name would result in an error. Privileged access to the underlying variable is available from within the class.","['vb.net', '2010', 'auto', 'implement', 'property', 'utilize', 'create', 'property', 'have', 'use', 'set', 'syntax', 'note', 'hide', 'variable', 'create', 'compiler', 'call', 'correspond', 'property', 'variable', 'class', 'name', 'result', 'error', 'privileged', 'access', 'underlie', 'variable', 'available', 'class']"
671,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
672,"In computer science, boxing a.k.a. wrapping is the transformation of placing a primitive type within an object so that the value can be used as a reference. Unboxing is the reverse transformation of extracting the primitive value from its wrapper object. Autoboxing is the term for automatically applying boxing and/or unboxing transformations as needed.","['computer', 'science', 'box', 'a.k.a', 'wrapping', 'transformation', 'place', 'primitive', 'type', 'object', 'value', 'reference', 'unbox', 'reverse', 'transformation', 'extract', 'primitive', 'value', 'wrapper', 'object', 'autoboxe', 'term', 'automatically', 'apply', 'boxing', 'unbox', 'transformation', 'need']"
673,"Boxing's most prominent use is in Java where there is a distinction between reference and value types for reasons such as runtime efficiency and syntax and semantic issues. In Java, a LinkedList can only store values of type Object. One might desire to have a LinkedList of int, but this is not directly possible. Instead Java defines primitive wrapper classes corresponding to each primitive type: Integer and int, Character and char, Float and float, etc. One can then define a LinkedList using the boxed type Integer and insert int values into the list by boxing them as Integer objects. Using generic parameterized types introduced in J2SE 5.0, this type is represented as LinkedList<Integer>.","['boxing', 'prominent', 'use', 'java', 'distinction', 'reference', 'value', 'type', 'reason', 'runtime', 'efficiency', 'syntax', 'semantic', 'issue', 'java', 'linkedlist', 'store', 'value', 'type', 'object', 'desire', 'linkedlist', 'int', 'directly', 'possible', 'instead', 'java', 'define', 'primitive', 'wrapper', 'class', 'correspond', 'primitive', 'type', 'integer', 'int', 'character', 'char', 'float', 'float', 'etc', 'define', 'linkedlist', 'boxed', 'type', 'integer', 'insert', 'int', 'value', 'list', 'box', 'integer', 'object', 'generic', 'parameterize', 'type', 'introduce', 'j2se', '5', 'type', 'represent', 'linkedlist', 'integer']"
674,"On the other hand, C# has no primitive wrapper classes, but allows boxing of any value type, returning a generic Object reference. In Objective-C, any primitive value can be prefixed by a @ to make an NSNumber out of it e.g. @123 or @123. This allows for adding them in any of the standard collections, such as an NSArray.","['hand', 'primitive', 'wrapper', 'class', 'allow', 'boxing', 'value', 'type', 'return', 'generic', 'object', 'reference', 'objective', 'primitive', 'value', 'prefix', 'nsnumber', 'e.g.', '@123', '@123', 'allow', 'add', 'standard', 'collection', 'nsarray']"
675,"Haskell has little or no notion of reference type, but still uses the term ""boxed"" for the runtime system's uniform pointer-to-tagged union representation.1","['haskell', 'little', 'notion', 'reference', 'type', 'use', 'term', 'box', 'runtime', 'system', 'uniform', 'pointer', 'tag', 'union', 'representation']"
676,"The boxed object is always a copy of the value object, and is usually immutable. Unboxing the object also returns a copy of the stored value. Repeated boxing and unboxing of objects can have a severe performance impact, because boxing dynamically allocates new objects and unboxing if the boxed value is no longer used then makes them eligible for garbage collection. However, modern garbage collectors such as the default Java HotSpot garbage collector can more efficiently collect short-lived objects, so if the boxed objects are short-lived, the performance impact may not be severe.","['boxed', 'object', 'copy', 'value', 'object', 'usually', 'immutable', 'unbox', 'object', 'return', 'copy', 'store', 'value', 'repeat', 'boxing', 'unbox', 'object', 'severe', 'performance', 'impact', 'box', 'dynamically', 'allocate', 'new', 'object', 'unbox', 'boxed', 'value', 'long', 'make', 'eligible', 'garbage', 'collection', 'modern', 'garbage', 'collector', 'default', 'java', 'hotspot', 'garbage', 'collector', 'efficiently', 'collect', 'short', 'live', 'object', 'boxed', 'object', 'short', 'live', 'performance', 'impact', 'severe']"
677,"In some languages, there is a direct equivalence between an unboxed primitive type and a reference to an immutable, boxed object type. In fact, it is possible to substitute all the primitive types in a program with boxed object types. Whereas assignment from one primitive to another will copy its value, assignment from one reference to a boxed object to another will copy the reference value to refer to the same object as the first reference. However, this will not cause any problems, because the objects are immutable, so there is semantically no real difference between two references to the same object or to different objects unless you look at physical equality. For all operations other than assignment, such as arithmetic, comparison, and logical operators, one can unbox the boxed type, perform the operation, and re-box the result as needed. Thus, it is possible to not store primitive types at all.","['language', 'direct', 'equivalence', 'unboxed', 'primitive', 'type', 'reference', 'immutable', 'boxed', 'object', 'type', 'fact', 'possible', 'substitute', 'primitive', 'type', 'program', 'box', 'object', 'type', 'assignment', 'primitive', 'copy', 'value', 'assignment', 'reference', 'box', 'object', 'copy', 'reference', 'value', 'refer', 'object', 'reference', 'cause', 'problem', 'object', 'immutable', 'semantically', 'real', 'difference', 'reference', 'object', 'different', 'object', 'look', 'physical', 'equality', 'operation', 'assignment', 'arithmetic', 'comparison', 'logical', 'operator', 'unbox', 'boxed', 'type', 'perform', 'operation', 'box', 'result', 'need', 'possible', 'store', 'primitive', 'type']"
678,Autoboxing is the term for getting a reference type out of a value type just through type conversion either implicit or explicit. The compiler automatically supplies the extra source code that creates the object.,"['autoboxe', 'term', 'get', 'reference', 'type', 'value', 'type', 'type', 'conversion', 'implicit', 'explicit', 'compiler', 'automatically', 'supply', 'extra', 'source', 'code', 'create', 'object']"
679,"For example, in versions of Java prior to J2SE 5.0, the following code did not compile:","['example', 'version', 'java', 'prior', 'j2se', '5', 'follow', 'code', 'compile']"
680,"Compilers prior to 5.0 would not accept the last line. Integer are reference objects, on the surface no different from List, Object, and so forth. To convert from an int to an Integer, one had to ""manually"" instantiate the Integer object. As of J2SE 5.0, the compiler will accept the last line, and automatically transform it so that an Integer object is created to store the value 9.2 This means that, from J2SE 5.0 on, something like Integer c = a + b, where a and b are Integer themselves, will compile now - a and b are unboxed, the integer values summed up, and the result is autoboxed into a new Integer, which is finally stored inside variable c. The equality operators cannot be used this way, because the equality operators are already defined for reference types, for equality of the references; to test for equality of the value in a boxed type, one must still manually unbox them and compare the primitives, or use the Objects.equals method.","['compiler', 'prior', '5', 'accept', 'line', 'integer', 'reference', 'object', 'surface', 'different', 'list', 'object', 'forth', 'convert', 'int', 'integer', 'manually', 'instantiate', 'integer', 'object', 'j2se', '5', 'compiler', 'accept', 'line', 'automatically', 'transform', 'integer', 'object', 'create', 'store', 'value', '9', 'mean', 'j2se', '5', 'like', 'integer', 'integer', 'compile', 'unboxed', 'integer', 'value', 'sum', 'result', 'autoboxe', 'new', 'integer', 'finally', 'store', 'inside', 'variable', 'equality', 'operator', 'way', 'equality', 'operator', 'define', 'reference', 'type', 'equality', 'reference', 'test', 'equality', 'value', 'boxed', 'type', 'manually', 'unbox', 'compare', 'primitive', 'use', 'objects.equal', 'method']"
681,"Another example: J2SE 5.0 allows the programmer to treat a collection such as a LinkedList as if it contained int values instead of Integer objects. This does not contradict what was said above: the collection still only contains references to dynamic objects, and it cannot list primitive types. It cannot be a LinkedList<int>, but it must be a LinkedList<Integer> instead. However, the compiler automatically transforms the code so that the list will ""silently"" receive objects, while the source code only mentions primitive values. For example, the programmer can now write list.add3 and think as if the int 3 were added to the list; but, the compiler will have actually transformed the line into list.addnew Integer3.","['example', 'j2se', '5', 'allow', 'programmer', 'treat', 'collection', 'linkedlist', 'contain', 'int', 'value', 'instead', 'integer', 'object', 'contradict', 'say', 'collection', 'contain', 'reference', 'dynamic', 'object', 'list', 'primitive', 'type', 'linkedlist', 'int', 'linkedlist', 'integer', 'instead', 'compiler', 'automatically', 'transform', 'code', 'list', 'silently', 'receive', 'object', 'source', 'code', 'mention', 'primitive', 'value', 'example', 'programmer', 'write', 'list.add3', 'think', 'int', 'add', 'list', 'compiler', 'actually', 'transform', 'line', 'list.addnew', 'integer3']"
682,"With automatic unboxing the compiler automatically supplies the extra source code that retrieves the value out of that object, either by invoking some method on that object, or by other means.","['automatic', 'unbox', 'compiler', 'automatically', 'supply', 'extra', 'source', 'code', 'retrieve', 'value', 'object', 'invoke', 'method', 'object', 'mean']"
683,"For example, in versions of Java prior to J2SE 5.0, the following code did not compile:","['example', 'version', 'java', 'prior', 'j2se', '5', 'follow', 'code', 'compile']"
684,"C# doesn't support automatic unboxing in the same meaning as Java, because it doesn't have a separate set of primitive types and object types. All types that have both primitive and object version in Java, are automatically implemented by the C# compiler as either primitive value types or object reference types.","['support', 'automatic', 'unboxing', 'meaning', 'java', 'separate', 'set', 'primitive', 'type', 'object', 'type', 'type', 'primitive', 'object', 'version', 'java', 'automatically', 'implement', 'compiler', 'primitive', 'value', 'type', 'object', 'reference', 'type']"
685,"In both languages, automatic boxing does not downcast automatically, i.e. the following code won't compile:","['language', 'automatic', 'boxing', 'downcast', 'automatically', 'i.e.', 'follow', 'code', 'compile']"
686,"Modern Object Pascal has yet another way to perform operations on simple types, close to boxing, called type helpers in FreePascal or record helpers in Delphi and FreePascal in Delphi mode. The dialects mentioned are Object Pascal compile-to-native languages, and so miss some of the features that C# and Java can implement. Notably run-time type inference on strongly typed variables. But the feature is related to boxing. It allows the programmer to use constructs like","['modern', 'object', 'pascal', 'way', 'perform', 'operation', 'simple', 'type', 'close', 'boxing', 'call', 'type', 'helper', 'freepascal', 'record', 'helper', 'delphi', 'freepascal', 'delphi', 'mode', 'dialect', 'mention', 'object', 'pascal', 'compile', 'native', 'language', 'miss', 'feature', 'java', 'implement', 'notably', 'run', 'time', 'type', 'inference', 'strongly', 'type', 'variable', 'feature', 'relate', 'box', 'allow', 'programmer', 'use', 'construct', 'like']"
687,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
688,"In computer science, primitive data types are a set of basic data types from which all other data types are constructed.1 Specifically it often refers to the limited set of data representations in use by a particular processor, which all compiled programs must use. Most processors support a similar set of primitive data types, although the specific representations vary.2 More generally, ""primitive data types"" may refer to the standard data types built into a programming language.34 Data types which are not primitive are referred to as derived or composite.3","['computer', 'science', 'primitive', 'datum', 'type', 'set', 'basic', 'datum', 'type', 'datum', 'type', 'constructed', 'specifically', 'refer', 'limited', 'set', 'datum', 'representation', 'use', 'particular', 'processor', 'compile', 'program', 'use', 'processor', 'support', 'similar', 'set', 'primitive', 'datum', 'type', 'specific', 'representation', 'vary', 'generally', 'primitive', 'datum', 'type', 'refer', 'standard', 'datum', 'type', 'build', 'programming', 'language', 'datum', 'type', 'primitive', 'refer', 'derive', 'composite']"
689,"Primitive types are almost always value types, but composite types may also be value types.5","['primitive', 'type', 'value', 'type', 'composite', 'type', 'value', 'types']"
690,The Java virtual machine's set of primitive data types is:6,"['java', 'virtual', 'machine', 'set', 'primitive', 'datum', 'type', 'is']"
691,"These primitive types are in general precisely those supported by computer hardware, except possibly for varying integer sizes or hardware that is missing floating point. Operations on such primitives are usually quite efficient. Primitive data types which are native to the processor have a one-to-one correspondence with objects in the computer's memory, and operations on these types are often the fastest possible in most cases.9 Integer addition, for example, can be performed as a single machine instruction, and some offer specific instructions to process sequences of characters with a single instruction.10 But the choice of primitive data type may affect performance, for example it is faster using SIMD operations and data types to operate on an array of floats.9: 113","['primitive', 'type', 'general', 'precisely', 'support', 'computer', 'hardware', 'possibly', 'vary', 'integer', 'size', 'hardware', 'miss', 'float', 'point', 'operation', 'primitive', 'usually', 'efficient', 'primitive', 'datum', 'type', 'native', 'processor', 'correspondence', 'object', 'computer', 'memory', 'operation', 'type', 'fast', 'possible', 'cases', 'integer', 'addition', 'example', 'perform', 'single', 'machine', 'instruction', 'offer', 'specific', 'instruction', 'process', 'sequence', 'character', 'single', 'instruction', 'choice', 'primitive', 'datum', 'type', 'affect', 'performance', 'example', 'fast', 'simd', 'operation', 'datum', 'type', 'operate', 'array', 'floats', '113']"
692,"The set of basic C data types is similar to Java's. Minimally, there are four types, char, int, float, and double, but the qualifiers short, long, signed, and unsigned mean that C contains numerous target-dependent integer and floating-point primitive types.11","['set', 'basic', 'datum', 'type', 'similar', 'java', 'minimally', 'type', 'char', 'int', 'float', 'double', 'qualifier', 'short', 'long', 'sign', 'unsigned', 'mean', 'contain', 'numerous', 'target', 'dependent', 'integer', 'float', 'point', 'primitive', 'types']"
693,An integer data type represents some range of mathematical integers. Integers may be either signed allowing negative values or unsigned non-negative integers only. Common ranges are:,"['integer', 'datum', 'type', 'represent', 'range', 'mathematical', 'integer', 'integer', 'sign', 'allow', 'negative', 'value', 'unsigned', 'non', 'negative', 'integer', 'common', 'range']"
694,"A floating-point number represents a limited-precision rational number that may have a fractional part. These numbers are stored internally in a format equivalent to scientific notation, typically in binary but sometimes in decimal. Because floating-point numbers have limited precision, only a subset of real or rational numbers are exactly representable; other numbers can be represented only approximately. Many languages have both a single precision often called ""float"" and a double precision type often called ""double"".","['float', 'point', 'number', 'represent', 'limited', 'precision', 'rational', 'number', 'fractional', 'number', 'store', 'internally', 'format', 'equivalent', 'scientific', 'notation', 'typically', 'binary', 'decimal', 'float', 'point', 'number', 'limit', 'precision', 'subset', 'real', 'rational', 'number', 'exactly', 'representable', 'number', 'represent', 'approximately', 'language', 'single', 'precision', 'call', 'float', 'double', 'precision', 'type', 'call', 'double']"
695,"A boolean type, typically denoted ""bool"" or ""boolean"", is typically a logical type that can have either the value ""true"" or the value ""false"". Although only one bit is necessary to accommodate the value set ""true"" and ""false"", programming languages typically implement boolean types as one or more bytes.","['boolean', 'type', 'typically', 'denote', 'bool', 'boolean', 'typically', 'logical', 'type', 'value', 'true', 'value', 'false', 'bit', 'necessary', 'accommodate', 'value', 'set', 'true', 'false', 'programming', 'language', 'typically', 'implement', 'boolean', 'type', 'byte']"
696,"Many languages e.g. Java, Pascal and Ada implement booleans adhering to the concept of boolean as a distinct logical type. Some languages, though, may implicitly convert booleans to numeric types at times to give extended semantics to booleans and boolean expressions or to achieve backwards compatibility with earlier versions of the language. For example, early versions of the C programming language that followed ANSI C and its former standards did not have a dedicated boolean type. Instead, numeric values of zero are interpreted as ""false"", and any other value is interpreted as ""true"".13 The newer C99 added a distinct boolean type that can be included with stdbool.h,14 and C++ supports bool as a built-in type and ""true"" and ""false"" as reserved words.15","['language', 'e.g.', 'java', 'pascal', 'ada', 'implement', 'boolean', 'adhere', 'concept', 'boolean', 'distinct', 'logical', 'type', 'language', 'implicitly', 'convert', 'booleans', 'numeric', 'type', 'time', 'extend', 'semantic', 'booleans', 'boolean', 'expression', 'achieve', 'backwards', 'compatibility', 'early', 'version', 'language', 'example', 'early', 'version', 'programming', 'language', 'follow', 'ansi', 'standard', 'dedicated', 'boolean', 'type', 'instead', 'numeric', 'value', 'zero', 'interpret', 'false', 'value', 'interpret', 'true', 'new', 'c99', 'add', 'distinct', 'boolean', 'type', 'include', 'stdbool.h', 'c++', 'support', 'bool', 'build', 'type', 'true', 'false', 'reserve', 'words']"
697,The XML Schema Definition language provides a set of 19 primitive data types:16,"['xml', 'schema', 'definition', 'language', 'provide', 'set', 'primitive', 'datum', 'types']"
698,"In JavaScript, there are 7 primitive data types: string, number, bigint, boolean, undefined, symbol, and null. These are not objects and have no methods.18","['javascript', 'primitive', 'datum', 'type', 'string', 'number', 'bigint', 'boolean', 'undefined', 'symbol', 'null', 'object', 'methods']"
699,"In Visual Basic .NET, the primitive data types consist of 4 integral types, 2 floating-point types, a 16-byte decimal type, a boolean type, a date/time type, a Unicode character type, and a Unicode string type.19","['visual', 'basic', '.net', 'primitive', 'datum', 'type', 'consist', 'integral', 'type', 'float', 'point', 'type', 'byte', 'decimal', 'type', 'boolean', 'type', 'date', 'time', 'type', 'unicode', 'character', 'type', 'unicode', 'string', 'type']"
700,"In general, data types that can be built into sophisticated programming languages include:","['general', 'datum', 'type', 'build', 'sophisticated', 'programming', 'language', 'include']"
701,"A character type is a type that can represent all Unicode characters, hence must be at least 21 bits wide. Some languages such as Julia include a true 32-bit Unicode character type as primitive.20 Other languages such as JavaScript, Python, Ruby, and many dialects of BASIC do not have a primitive character type but instead add strings as a primitive data type, typically using the UTF-8 encoding. Strings with a length of one are normally used to represent single characters.","['character', 'type', 'type', 'represent', 'unicode', 'character', 'bit', 'wide', 'language', 'julia', 'include', 'true', 'bit', 'unicode', 'character', 'type', 'primitive', 'language', 'javascript', 'python', 'ruby', 'dialect', 'basic', 'primitive', 'character', 'type', 'instead', 'add', 'string', 'primitive', 'datum', 'type', 'typically', 'utf-8', 'encoding', 'string', 'length', 'normally', 'represent', 'single', 'character']"
702,"Some languages have ""character"" or ""string"" types that are too small to represent all Unicode characters or strings. These are more properly categorized as integer types. For example C includes a char type, but it is defined to be the smallest addressable unit of memory, which several standards, such as POSIX require to be 8 bits. The recent version of these standards refer to char as a numeric type. char is also used for a 16-bit integer type in Java, but again this is not a Unicode character type.21 Some computer hardware has a few instructions which deal with ""strings"", referring to a sequence of bytes. For example, x86-64 can move, set, search, or compare a sequence of items, where an item could be 1, 2, 4, or 8 bytes long.22","['language', 'character', 'string', 'type', 'small', 'represent', 'unicode', 'character', 'string', 'properly', 'categorize', 'integer', 'type', 'example', 'include', 'char', 'type', 'define', 'small', 'addressable', 'unit', 'memory', 'standard', 'posix', 'require', 'bit', 'recent', 'version', 'standard', 'refer', 'char', 'numeric', 'type', 'char', 'bit', 'integer', 'type', 'java', 'unicode', 'character', 'type', 'computer', 'hardware', 'instruction', 'deal', 'string', 'refer', 'sequence', 'byte', 'example', 'x86', 'set', 'search', 'compare', 'sequence', 'item', 'item', 'byte', 'long']"
703,"A range numeric data type has its maximum and minimum value embedded in the type. It is included in some languages such as Ada and Pascal. Attempting to store a number outside the range may lead to compiler/runtime errors, or to incorrect calculations due to truncation depending on the language being used. In practice the compiler chooses the most appropriate primitive integer or floating-point type automatically.","['range', 'numeric', 'datum', 'type', 'maximum', 'minimum', 'value', 'embed', 'type', 'include', 'language', 'ada', 'pascal', 'attempt', 'store', 'number', 'outside', 'range', 'lead', 'compiler', 'runtime', 'error', 'incorrect', 'calculation', 'truncation', 'depend', 'language', 'practice', 'compiler', 'choose', 'appropriate', 'primitive', 'integer', 'floating', 'point', 'type', 'automatically']"
704,Pages for logged out editors learn more,"['page', 'log', 'editor', 'learn']"
705,"In computer programming, the scope of a name binding an association of a name to an entity, such as a variable is the part of a program where the name binding is valid; that is, where the name can be used to refer to the entity. In other parts of the program, the name may refer to a different entity it may have a different binding, or to nothing at all it may be unbound. Scope helps prevent name collisions by allowing the same name to refer to different objects – as long as the names have separate scopes. The scope of a name binding is also known as the visibility of an entity, particularly in older or more technical literature—this is from the perspective of the referenced entity, not the referencing name.","['computer', 'programming', 'scope', 'bind', 'association', 'entity', 'variable', 'program', 'bind', 'valid', 'refer', 'entity', 'part', 'program', 'refer', 'different', 'entity', 'different', 'binding', 'unbound', 'scope', 'help', 'prevent', 'collision', 'allow', 'refer', 'different', 'object', 'long', 'name', 'separate', 'scope', 'scope', 'bind', 'know', 'visibility', 'entity', 'particularly', 'old', 'technical', 'literature', 'perspective', 'referenced', 'entity', 'reference']"
706,"The term ""scope"" is also used to refer to the set of all name bindings that are valid within a part of a program or at a given point in a program, which is more correctly referred to as context or environment.a","['term', 'scope', 'refer', 'set', 'binding', 'valid', 'program', 'give', 'point', 'program', 'correctly', 'refer', 'context', 'environment.a']"
707,"Strictly speakingb and in practice for most programming languages, ""part of a program"" refers to a portion of source code area of text, and is known as lexical scope. In some languages, however, ""part of a program"" refers to a portion of run time time period during execution, and is known as dynamic scope. Both of these terms are somewhat misleading—they misuse technical terms, as discussed in the definition—but the distinction itself is accurate and precise, and these are the standard respective terms. Lexical scope is the main focus of this article, with dynamic scope understood by contrast with lexical scope.","['strictly', 'speakingb', 'practice', 'programming', 'language', 'program', 'refer', 'portion', 'source', 'code', 'area', 'text', 'know', 'lexical', 'scope', 'language', 'program', 'refer', 'portion', 'run', 'time', 'time', 'period', 'execution', 'know', 'dynamic', 'scope', 'term', 'somewhat', 'misleading', 'misuse', 'technical', 'term', 'discuss', 'definition', 'distinction', 'accurate', 'precise', 'standard', 'respective', 'term', 'lexical', 'scope', 'main', 'focus', 'article', 'dynamic', 'scope', 'understand', 'contrast', 'lexical', 'scope']"
708,"In most cases, name resolution based on lexical scope is relatively straightforward to use and to implement, as in use one can read backwards in the source code to determine to which entity a name refers, and in implementation one can maintain a list of names and contexts when compiling or interpreting a program. Difficulties arise in name masking, forward declarations, and hoisting, while considerably subtler ones arise with non-local variables, particularly in closures.","['case', 'resolution', 'base', 'lexical', 'scope', 'relatively', 'straightforward', 'use', 'implement', 'use', 'read', 'backwards', 'source', 'code', 'determine', 'entity', 'refer', 'implementation', 'maintain', 'list', 'name', 'context', 'compile', 'interpret', 'program', 'difficulty', 'arise', 'masking', 'forward', 'declaration', 'hoisting', 'considerably', 'subtler', 'one', 'arise', 'non', 'local', 'variable', 'particularly', 'closure']"
709,"The strict definition of the lexical ""scope"" of a name identifier is unambiguous: lexical scope is ""the portion of source code in which a binding of a name with an entity applies"". This is virtually unchanged from its 1960 definition in the specification of ALGOL 60. Representative language specifications follow:","['strict', 'definition', 'lexical', 'scope', 'identifier', 'unambiguous', 'lexical', 'scope', 'portion', 'source', 'code', 'binding', 'entity', 'apply', 'virtually', 'unchanged', '1960', 'definition', 'specification', 'algol', 'representative', 'language', 'specification', 'follow']"
710,"Most commonly ""scope"" refers to when a given name can refer to a given variable—when a declaration has effect—but can also apply to other entities, such as functions, types, classes, labels, constants, and enumerations.","['commonly', 'scope', 'refer', 'give', 'refer', 'give', 'variable', 'declaration', 'effect', 'apply', 'entity', 'function', 'type', 'class', 'label', 'constant', 'enumeration']"
711,"A fundamental distinction in scope is what ""part of a program"" means. In languages with lexical scope also called static scope, name resolution depends on the location in the source code and the lexical context also called static context, which is defined by where the named variable or function is defined. In contrast, in languages with dynamic scope the name resolution depends upon the program state when the name is encountered which is determined by the execution context also called runtime context, calling context or dynamic context. In practice, with lexical scope a name is resolved by searching the local lexical context, then if that fails, by searching the outer lexical context, and so on; whereas with dynamic scope, a name is resolved by searching the local execution context, then if that fails, by searching the outer execution context, and so on, progressing up the call stack.4","['fundamental', 'distinction', 'scope', 'program', 'mean', 'language', 'lexical', 'scope', 'call', 'static', 'scope', 'resolution', 'depend', 'location', 'source', 'code', 'lexical', 'context', 'call', 'static', 'context', 'define', 'name', 'variable', 'function', 'define', 'contrast', 'language', 'dynamic', 'scope', 'resolution', 'depend', 'program', 'state', 'encounter', 'determine', 'execution', 'context', 'call', 'runtime', 'context', 'call', 'context', 'dynamic', 'context', 'practice', 'lexical', 'scope', 'resolve', 'search', 'local', 'lexical', 'context', 'fail', 'search', 'outer', 'lexical', 'context', 'dynamic', 'scope', 'resolve', 'search', 'local', 'execution', 'context', 'fail', 'search', 'outer', 'execution', 'context', 'progress', 'stack']"
712,"Most modern languages use lexical scope for variables and functions, though dynamic scope is used in some languages, notably some dialects of Lisp, some ""scripting"" languages, and some template languages. c Perl 5 offers both lexical and dynamic scope. Even in lexically scoped languages, scope for closures can be confusing to the uninitiated,citation needed as these depend on the lexical context where the closure is defined, not where it is called.","['modern', 'language', 'use', 'lexical', 'scope', 'variable', 'function', 'dynamic', 'scope', 'language', 'notably', 'dialect', 'lisp', 'scripting', 'language', 'template', 'language', 'perl', 'offer', 'lexical', 'dynamic', 'scope', 'lexically', 'scope', 'language', 'scope', 'closure', 'confusing', 'uninitiated', 'citation', 'need', 'depend', 'lexical', 'context', 'closure', 'define', 'call']"
713,"Lexical resolution can be determined at compile time, and is also known as early binding, while dynamic resolution can in general only be determined at run time, and thus is known as late binding.","['lexical', 'resolution', 'determine', 'compile', 'time', 'know', 'early', 'bind', 'dynamic', 'resolution', 'general', 'determine', 'run', 'time', 'know', 'late', 'bind']"
714,"In object-oriented programming, dynamic dispatch selects an object method at runtime, though whether the actual name binding is done at compile time or run time depends on the language. De facto dynamic scope is common in macro languages, which do not directly do name resolution, but instead expand in place.","['object', 'orient', 'programming', 'dynamic', 'dispatch', 'select', 'object', 'method', 'runtime', 'actual', 'binding', 'compile', 'time', 'run', 'time', 'depend', 'language', 'facto', 'dynamic', 'scope', 'common', 'macro', 'language', 'directly', 'resolution', 'instead', 'expand', 'place']"
715,"Some programming frameworks like AngularJS use the term ""scope"" to mean something entirely different than how it is used in this article. In those frameworks the scope is just an object of the programming language that they use JavaScript in case of AngularJS that is used in certain ways by the framework to emulate dynamic scope in a language that uses lexical scope for its variables. Those AngularJS scopes can themselves be in context or not in context using the usual meaning of the term in any given part of the program, following the usual rules of variable scope of the language like any other object, and using their own inheritance and transclusion rules. In the context of AngularJS, sometimes the term ""$scope"" with a dollar sign is used to avoid confusion, but using the dollar sign in variable names is often discouraged by the style guides.5","['programming', 'framework', 'like', 'angularjs', 'use', 'term', 'scope', 'mean', 'entirely', 'different', 'article', 'framework', 'scope', 'object', 'programming', 'language', 'use', 'javascript', 'case', 'angularjs', 'certain', 'way', 'framework', 'emulate', 'dynamic', 'scope', 'language', 'use', 'lexical', 'scope', 'variable', 'angularjs', 'scope', 'context', 'context', 'usual', 'meaning', 'term', 'give', 'program', 'follow', 'usual', 'rule', 'variable', 'scope', 'language', 'like', 'object', 'inheritance', 'transclusion', 'rule', 'context', 'angularjs', 'term', 'scope', 'dollar', 'sign', 'avoid', 'confusion', 'dollar', 'sign', 'variable', 'name', 'discourage', 'style', 'guides']"
716,"Scope is an important component of name resolution,d which is in turn fundamental to language semantics. Name resolution including scope varies between programming languages, and within a programming language, varies by type of entity; the rules for scope are called scope rules or scoping rules. Together with namespaces, scope rules are crucial in modular programming, so a change in one part of the program does not break an unrelated part.","['scope', 'important', 'component', 'resolution', 'turn', 'fundamental', 'language', 'semantic', 'resolution', 'include', 'scope', 'varie', 'programming', 'language', 'programming', 'language', 'vary', 'type', 'entity', 'rule', 'scope', 'call', 'scope', 'rule', 'scope', 'rule', 'namespace', 'scope', 'rule', 'crucial', 'modular', 'programming', 'change', 'program', 'break', 'unrelated']"
717,"When discussing scope, there are three basic concepts: scope, extent, and context. ""Scope"" and ""context"" in particular are frequently confused: scope is a property of a name binding, while context is a property of a part of a program, that is either a portion of source code lexical context or static context or a portion of run time execution context, runtime context, calling context or dynamic context. Execution context consists of lexical context at the current execution point plus additional runtime state such as the call stack.e Strictly speaking, during execution a program enters and exits various name bindings' scopes, and at a point in execution name bindings are ""in context"" or ""not in context"", hence name bindings ""come into context"" or ""go out of context"" as the program execution enters or exits the scope.f However, in practice usage is much looser.","['discuss', 'scope', 'basic', 'concept', 'scope', 'extent', 'context', 'scope', 'context', 'particular', 'frequently', 'confuse', 'scope', 'property', 'bind', 'context', 'property', 'program', 'portion', 'source', 'code', 'lexical', 'context', 'static', 'context', 'portion', 'run', 'time', 'execution', 'context', 'runtime', 'context', 'call', 'context', 'dynamic', 'context', 'execution', 'context', 'consist', 'lexical', 'context', 'current', 'execution', 'point', 'plus', 'additional', 'runtime', 'state', 'stack.e', 'strictly', 'speak', 'execution', 'program', 'enter', 'exit', 'binding', 'scope', 'point', 'execution', 'binding', 'context', 'context', 'binding', 'come', 'context', 'context', 'program', 'execution', 'enter', 'exit', 'scope.f', 'practice', 'usage', 'loose']"
718,"Scope is a source-code level concept, and a property of name bindings, particularly variable or function name bindings—names in the source code are references to entities in the program—and is part of the behavior of a compiler or interpreter of a language. As such, issues of scope are similar to pointers, which are a type of reference used in programs more generally. Using the value of a variable when the name is in context but the variable is uninitialized is analogous to dereferencing accessing the value of a wild pointer, as it is undefined. However, as variables are not destroyed until they go out of context, the analog of a dangling pointer does not exist.","['scope', 'source', 'code', 'level', 'concept', 'property', 'binding', 'particularly', 'variable', 'function', 'binding', 'name', 'source', 'code', 'reference', 'entity', 'program', 'behavior', 'compiler', 'interpreter', 'language', 'issue', 'scope', 'similar', 'pointer', 'type', 'reference', 'program', 'generally', 'value', 'variable', 'context', 'variable', 'uninitialized', 'analogous', 'dereference', 'access', 'value', 'wild', 'pointer', 'undefined', 'variable', 'destroy', 'context', 'analog', 'dangle', 'pointer', 'exist']"
719,"For entities such as variables, scope is a subset of lifetime also known as extent—a name can only refer to a variable that exists possibly with undefined value, but variables that exist are not necessarily visible: a variable may exist but be inaccessible the value is stored but not referred to within a given context, or accessible but not via the given name, in which case it is not in context the program is ""out of the scope of the name"". In other cases ""lifetime"" is irrelevant—a label named position in the source code has lifetime identical with the program for statically compiled languages, but may be in context or not at a given point in the program, and likewise for static variables—a static global variable is in context for the entire program, while a static local variable is only in context within a function or other local context, but both have lifetime of the entire run of the program.","['entity', 'variable', 'scope', 'subset', 'lifetime', 'know', 'extent', 'refer', 'variable', 'exist', 'possibly', 'undefined', 'value', 'variable', 'exist', 'necessarily', 'visible', 'variable', 'exist', 'inaccessible', 'value', 'store', 'refer', 'give', 'context', 'accessible', 'give', 'case', 'context', 'program', 'scope', 'case', 'lifetime', 'irrelevant', 'label', 'name', 'position', 'source', 'code', 'lifetime', 'identical', 'program', 'statically', 'compile', 'language', 'context', 'give', 'point', 'program', 'likewise', 'static', 'variable', 'static', 'global', 'variable', 'context', 'entire', 'program', 'static', 'local', 'variable', 'context', 'function', 'local', 'context', 'lifetime', 'entire', 'run', 'program']"
720,"Determining which entity a name refers to is known as name resolution or name binding particularly in object-oriented programming, and varies between languages. Given a name, the language properly, the compiler or interpreter checks all entities that are in context for matches; in case of ambiguity two entities with the same name, such as a global and local variable with the same name, the name resolution rules are used to distinguish them. Most frequently, name resolution relies on an ""inner-to-outer context"" rule, such as the Python LEGB Local, Enclosing, Global, Built-in rule: names implicitly resolves to the narrowest relevant context. In some cases name resolution can be explicitly specified, such as by the global and nonlocal keywords in Python; in other cases the default rules cannot be overridden.","['determine', 'entity', 'refer', 'know', 'resolution', 'bind', 'particularly', 'object', 'orient', 'programming', 'vary', 'language', 'give', 'language', 'properly', 'compiler', 'interpreter', 'check', 'entity', 'context', 'match', 'case', 'ambiguity', 'entity', 'global', 'local', 'variable', 'resolution', 'rule', 'distinguish', 'frequently', 'resolution', 'rely', 'inner', 'outer', 'context', 'rule', 'python', 'legb', 'local', 'enclosing', 'global', 'build', 'rule', 'name', 'implicitly', 'resolve', 'narrow', 'relevant', 'context', 'case', 'resolution', 'explicitly', 'specify', 'global', 'nonlocal', 'keyword', 'python', 'case', 'default', 'rule', 'overridden']"
721,"When two identical names are in context at the same time, referring to different entities, one says that name masking is occurring, where the higher-priority name usually innermost is ""masking"" the lower-priority name. At the level of variables, this is known as variable shadowing. Due to the potential for logic errors from masking, some languages disallow or discourage masking, raising an error or warning at compile time or run time.","['identical', 'name', 'context', 'time', 'refer', 'different', 'entity', 'say', 'masking', 'occur', 'high', 'priority', 'usually', 'innermost', 'mask', 'low', 'priority', 'level', 'variable', 'know', 'variable', 'shadowing', 'potential', 'logic', 'error', 'mask', 'language', 'disallow', 'discourage', 'masking', 'raise', 'error', 'warning', 'compile', 'time', 'run', 'time']"
722,"Various programming languages have various different scope rules for different kinds of declarations and names. Such scope rules have a large effect on language semantics and, consequently, on the behavior and correctness of programs. In languages like C++, accessing an unbound variable does not have well-defined semantics and may result in undefined behavior, similar to referring to a dangling pointer; and declarations or names used outside their scope will generate syntax errors.","['programming', 'language', 'different', 'scope', 'rule', 'different', 'kind', 'declaration', 'name', 'scope', 'rule', 'large', 'effect', 'language', 'semantic', 'consequently', 'behavior', 'correctness', 'program', 'language', 'like', 'c++', 'access', 'unbound', 'variable', 'define', 'semantic', 'result', 'undefined', 'behavior', 'similar', 'refer', 'dangle', 'pointer', 'declaration', 'name', 'outside', 'scope', 'generate', 'syntax', 'error']"
723,"Scopes are frequently tied to other language constructs and determined implicitly, but many languages also offer constructs specifically for controlling scope.","['scope', 'frequently', 'tie', 'language', 'construct', 'determine', 'implicitly', 'language', 'offer', 'construct', 'specifically', 'control', 'scope']"
724,"Scope can vary from as little as a single expression to as much as the entire program, with many possible gradations in between. The simplest scope rule is global scope—all entities are visible throughout the entire program. The most basic modular scope rule is two-level scope, with a global scope anywhere in the program, and local scope within a function. More sophisticated modular programming allows a separate module scope, where names are visible within the module private to the module but not visible outside it. Within a function, some languages, such as C, allow block scope to restrict scope to a subset of a function; others, notably functional languages, allow expression scope, to restrict scope to a single expression. Other scopes include file scope notably in C which behaves similarly to module scope, and block scope outside of functions notably in Perl.","['scope', 'vary', 'little', 'single', 'expression', 'entire', 'program', 'possible', 'gradation', 'simple', 'scope', 'rule', 'global', 'scope', 'entity', 'visible', 'entire', 'program', 'basic', 'modular', 'scope', 'rule', 'level', 'scope', 'global', 'scope', 'program', 'local', 'scope', 'function', 'sophisticated', 'modular', 'programming', 'allow', 'separate', 'module', 'scope', 'name', 'visible', 'module', 'private', 'module', 'visible', 'outside', 'function', 'language', 'allow', 'block', 'scope', 'restrict', 'scope', 'subset', 'function', 'notably', 'functional', 'language', 'allow', 'expression', 'scope', 'restrict', 'scope', 'single', 'expression', 'scope', 'include', 'file', 'scope', 'notably', 'behave', 'similarly', 'module', 'scope', 'block', 'scope', 'outside', 'function', 'notably', 'perl']"
725,"A subtle issue is exactly when a scope begins and ends. In some languages, such as C, a name's scope begins at the name declaration, and thus different names declared within a given block can have different scopes. This requires declaring functions before use, though not necessarily defining them, and requires forward declaration in some cases, notably for mutual recursion. In other languages, such as Python, a name's scope begins at the start of the relevant block where the name is declared such as the start of a function, regardless of where it is defined, so all names within a given block have the same scope. In JavaScript, the scope of a name declared with let or const begins at the name declaration, and the scope of a name declared with var begins at the start of the function where the name is declared, which is known as variable hoisting. Behavior of names in context that have undefined value differs: in Python use of undefined names yields a runtime error, while in JavaScript undefined names declared with var are usable throughout the function because they are implicitly bound to the value undefined.","['subtle', 'issue', 'exactly', 'scope', 'begin', 'end', 'language', 'scope', 'begin', 'declaration', 'different', 'name', 'declare', 'give', 'block', 'different', 'scope', 'require', 'declare', 'function', 'use', 'necessarily', 'define', 'require', 'forward', 'declaration', 'case', 'notably', 'mutual', 'recursion', 'language', 'python', 'scope', 'begin', 'start', 'relevant', 'block', 'declare', 'start', 'function', 'regardless', 'define', 'name', 'give', 'block', 'scope', 'javascript', 'scope', 'declare', 'let', 'const', 'begin', 'declaration', 'scope', 'declare', 'var', 'begin', 'start', 'function', 'declare', 'know', 'variable', 'hoisting', 'behavior', 'name', 'context', 'undefined', 'value', 'differ', 'python', 'use', 'undefined', 'name', 'yield', 'runtime', 'error', 'javascript', 'undefine', 'name', 'declare', 'var', 'usable', 'function', 'implicitly', 'bind', 'value', 'undefined']"
726,"The scope of a name binding is an expression, which is known as expression scope. Expression scope is available in many languages, especially functional languages which offer a feature called let-expressions allowing a declaration's scope to be a single expression. This is convenient if, for example, an intermediate value is needed for a computation. For example, in Standard ML, if f returns 12, then let val x = f in x * x end is an expression that evaluates to 144, using a temporary variable named x to avoid calling f twice. Some languages with block scope approximate this functionality by offering syntax for a block to be embedded into an expression; for example, the aforementioned Standard ML expression could be written in Perl as do my $x = f; $x * $x , or in GNU C as int x = f; x * x; .","['scope', 'bind', 'expression', 'know', 'expression', 'scope', 'expression', 'scope', 'available', 'language', 'especially', 'functional', 'language', 'offer', 'feature', 'call', 'let', 'expression', 'allow', 'declaration', 'scope', 'single', 'expression', 'convenient', 'example', 'intermediate', 'value', 'need', 'computation', 'example', 'standard', 'return', 'let', 'val', 'end', 'expression', 'evaluate', '144', 'temporary', 'variable', 'name', 'avoid', 'call', 'twice', 'language', 'block', 'scope', 'approximate', 'functionality', 'offer', 'syntax', 'block', 'embed', 'expression', 'example', 'aforementione', 'standard', 'expression', 'write', 'perl', 'gnu', 'int']"
727,"In Python, auxiliary variables in generator expressions and list comprehensions in Python 3 have expression scope.","['python', 'auxiliary', 'variable', 'generator', 'expression', 'list', 'comprehension', 'python', 'expression', 'scope']"
728,"In C, variable names in a function prototype have expression scope, known in this context as function protocol scope. As the variable names in the prototype are not referred to they may be different in the actual definition—they are just dummies—these are often omitted, though they may be used for generating documentation, for instance.","['variable', 'name', 'function', 'prototype', 'expression', 'scope', 'know', 'context', 'function', 'protocol', 'scope', 'variable', 'name', 'prototype', 'refer', 'different', 'actual', 'definition', 'dummy', 'omit', 'generate', 'documentation', 'instance']"
729,"The scope of a name binding is a block, which is known as block scope. Block scope is available in many, but not all, block-structured programming languages. This began with ALGOL 60, where ""every declaration ... is valid only for that block."",6 and today is particularly associated with languages in the Pascal and C families and traditions. Most often this block is contained within a function, thus restricting the scope to a part of a function, but in some cases, such as Perl, the block may not be within a function.","['scope', 'bind', 'block', 'know', 'block', 'scope', 'block', 'scope', 'available', 'block', 'structure', 'programming', 'language', 'begin', 'algol', 'declaration', 'valid', 'block', 'today', 'particularly', 'associate', 'language', 'pascal', 'family', 'tradition', 'block', 'contain', 'function', 'restrict', 'scope', 'function', 'case', 'perl', 'block', 'function']"
730,"A representative example of the use of block scope is the C code shown here, where two variables are scoped to the loop: the loop variable n, which is initialized once and incremented on each iteration of the loop, and the auxiliary variable n_squared, which is initialized at each iteration. The purpose is to avoid adding variables to the function scope that are only relevant to a particular block—for example, this prevents errors where the generic loop variable i has accidentally already been set to another value. In this example the expression n * n would generally not be assigned to an auxiliary variable, and the body of the loop would simply be written ret += n * n but in more complicated examples auxiliary variables are useful.","['representative', 'example', 'use', 'block', 'scope', 'code', 'show', 'variable', 'scope', 'loop', 'loop', 'variable', 'initialize', 'incremente', 'iteration', 'loop', 'auxiliary', 'variable', 'n_square', 'initialize', 'iteration', 'purpose', 'avoid', 'add', 'variable', 'function', 'scope', 'relevant', 'particular', 'block', 'example', 'prevent', 'error', 'generic', 'loop', 'variable', 'accidentally', 'set', 'value', 'example', 'expression', 'generally', 'assign', 'auxiliary', 'variable', 'body', 'loop', 'simply', 'write', 'ret', 'complicated', 'example', 'auxiliary', 'variable', 'useful']"
731,"Blocks are primarily used for control flow, such as with if, while, and for loops, and in these cases block scope means the scope of variable depends on the structure of a function's flow of execution. However, languages with block scope typically also allow the use of ""naked"" blocks, whose sole purpose is to allow fine-grained control of variable scope. For example, an auxiliary variable may be defined in a block, then used say, added to a variable with function scope and discarded when the block ends, or a while loop might be enclosed in a block that initializes variables used inside the loop that should only be initialized once.","['block', 'primarily', 'control', 'flow', 'loop', 'case', 'block', 'scope', 'mean', 'scope', 'variable', 'depend', 'structure', 'function', 'flow', 'execution', 'language', 'block', 'scope', 'typically', 'allow', 'use', 'naked', 'block', 'sole', 'purpose', 'allow', 'fine', 'grain', 'control', 'variable', 'scope', 'example', 'auxiliary', 'variable', 'define', 'block', 'add', 'variable', 'function', 'scope', 'discard', 'block', 'end', 'loop', 'enclose', 'block', 'initialize', 'variable', 'inside', 'loop', 'initialize']"
732,"A subtlety of several programming languages, such as Algol 68 and C demonstrated in this example and standardized since C99, is that block-scope variables can be declared not only within the body of the block, but also within the control statement, if any. This is analogous to function parameters, which are declared in the function declaration before the block of the function body starts, and in scope for the whole function body. This is primarily used in for loops, which have an initialization statement separate from the loop condition, unlike while loops, and is a common idiom.","['subtlety', 'programming', 'language', 'algol', 'demonstrate', 'example', 'standardized', 'c99', 'block', 'scope', 'variable', 'declare', 'body', 'block', 'control', 'statement', 'analogous', 'function', 'parameter', 'declare', 'function', 'declaration', 'block', 'function', 'body', 'start', 'scope', 'function', 'body', 'primarily', 'loop', 'initialization', 'statement', 'separate', 'loop', 'condition', 'unlike', 'loop', 'common', 'idiom']"
733,"Block scope can be used for shadowing. In this example, inside the block the auxiliary variable could also have been called n, shadowing the parameter name, but this is considered poor style due to the potential for errors. Furthermore, some descendants of C, such as Java and C#, despite having support for block scope in that a local variable can be made to go out of context before the end of a function, do not allow one local variable to hide another. In such languages, the attempted declaration of the second n would result in a syntax error, and one of the n variables would have to be renamed.","['block', 'scope', 'shadow', 'example', 'inside', 'block', 'auxiliary', 'variable', 'call', 'shadow', 'parameter', 'consider', 'poor', 'style', 'potential', 'error', 'furthermore', 'descendant', 'java', 'despite', 'have', 'support', 'block', 'scope', 'local', 'variable', 'context', 'end', 'function', 'allow', 'local', 'variable', 'hide', 'language', 'attempt', 'declaration', 'second', 'result', 'syntax', 'error', 'variable', 'rename']"
734,"If a block is used to set the value of a variable, block scope requires that the variable be declared outside of the block. This complicates the use of conditional statements with single assignment. For example, in Python, which does not use block scope, one may initialize a variable as such:","['block', 'set', 'value', 'variable', 'block', 'scope', 'require', 'variable', 'declare', 'outside', 'block', 'complicate', 'use', 'conditional', 'statement', 'single', 'assignment', 'example', 'python', 'use', 'block', 'scope', 'initialize', 'variable']"
735,where a is accessible after the if statement.,"['accessible', 'statement']"
736,"In Perl, which has block scope, this instead requires declaring the variable prior to the block:","['perl', 'block', 'scope', 'instead', 'require', 'declare', 'variable', 'prior', 'block']"
737,"Often this is instead rewritten using multiple assignment, initializing the variable to a default value. In Python where it is not necessary this would be:","['instead', 'rewrite', 'multiple', 'assignment', 'initialize', 'variable', 'default', 'value', 'python', 'necessary']"
738,while in Perl this would be:,['perl']
739,"In case of a single variable assignment, an alternative is to use the ternary operator to avoid a block, but this is not in general possible for multiple variable assignments, and is difficult to read for complex logic.","['case', 'single', 'variable', 'assignment', 'alternative', 'use', 'ternary', 'operator', 'avoid', 'block', 'general', 'possible', 'multiple', 'variable', 'assignment', 'difficult', 'read', 'complex', 'logic']"
740,"This is a more significant issue in C, notably for string assignment, as string initialization can automatically allocate memory, while string assignment to an already initialized variable requires allocating memory, a string copy, and checking that these are successful.","['significant', 'issue', 'notably', 'string', 'assignment', 'string', 'initialization', 'automatically', 'allocate', 'memory', 'stre', 'assignment', 'initialize', 'variable', 'require', 'allocate', 'memory', 'string', 'copy', 'check', 'successful']"
741,"Some languages allow the concept of block scope to be applied, to varying extents, outside of a function. For example, in the Perl snippet at right, $counter is a variable name with block scope due to the use of the my keyword, while increment_counter is a function name with global scope. Each call to increment_counter will increase the value of $counter by one, and return the new value. Code outside of this block can call increment_counter, but cannot otherwise obtain or alter the value of $counter. This idiom allows one to define closures in Perl.","['language', 'allow', 'concept', 'block', 'scope', 'apply', 'vary', 'extent', 'outside', 'function', 'example', 'perl', 'snippet', 'right', 'counter', 'variable', 'block', 'scope', 'use', 'keyword', 'increment_counter', 'function', 'global', 'scope', 'increment_counter', 'increase', 'value', 'counter', 'return', 'new', 'value', 'code', 'outside', 'block', 'increment_counter', 'obtain', 'alter', 'value', 'counter', 'idiom', 'allow', 'define', 'closure', 'perl']"
742,"When the scope of variables declared within a function does not extend beyond that function, this is known as function scope.7 Function scope is available in most programming languages which offer a way to create a local variable in a function or subroutine: a variable whose scope ends that goes out of context when the function returns. In most cases the lifetime of the variable is the duration of the function call—it is an automatic variable, created when the function starts or the variable is declared, destroyed when the function returns—while the scope of the variable is within the function, though the meaning of ""within"" depends on whether scope is lexical or dynamic. However, some languages, such as C, also provide for static local variables, where the lifetime of the variable is the entire lifetime of the program, but the variable is only in context when inside the function. In the case of static local variables, the variable is created when the program initializes, and destroyed only when the program terminates, as with a static global variable, but is only in context within a function, like an automatic local variable.","['scope', 'variable', 'declare', 'function', 'extend', 'function', 'know', 'function', 'scope', 'function', 'scope', 'available', 'programming', 'language', 'offer', 'way', 'create', 'local', 'variable', 'function', 'subroutine', 'variable', 'scope', 'end', 'go', 'context', 'function', 'return', 'case', 'lifetime', 'variable', 'duration', 'function', 'automatic', 'variable', 'create', 'function', 'start', 'variable', 'declare', 'destroy', 'function', 'return', 'scope', 'variable', 'function', 'meaning', 'depend', 'scope', 'lexical', 'dynamic', 'language', 'provide', 'static', 'local', 'variable', 'lifetime', 'variable', 'entire', 'lifetime', 'program', 'variable', 'context', 'inside', 'function', 'case', 'static', 'local', 'variable', 'variable', 'create', 'program', 'initialize', 'destroy', 'program', 'terminate', 'static', 'global', 'variable', 'context', 'function', 'like', 'automatic', 'local', 'variable']"
743,"Importantly, in lexical scope a variable with function scope has scope only within the lexical context of the function: it goes out of context when another function is called within the function, and comes back into context when the function returns—called functions have no access to the local variables of calling functions, and local variables are only in context within the body of the function in which they are declared. By contrast, in dynamic scope, the scope extends to the execution context of the function: local variables stay in context when another function is called, only going out of context when the defining function ends, and thus local variables are in context of the function in which they are defined and all called functions. In languages with lexical scope and nested functions, local variables are in context for nested functions, since these are within the same lexical context, but not for other functions that are not lexically nested. A local variable of an enclosing function is known as a non-local variable for the nested function. Function scope is also applicable to anonymous functions.","['importantly', 'lexical', 'scope', 'variable', 'function', 'scope', 'scope', 'lexical', 'context', 'function', 'go', 'context', 'function', 'call', 'function', 'come', 'context', 'function', 'return', 'call', 'function', 'access', 'local', 'variable', 'call', 'function', 'local', 'variable', 'context', 'body', 'function', 'declare', 'contrast', 'dynamic', 'scope', 'scope', 'extend', 'execution', 'context', 'function', 'local', 'variable', 'stay', 'context', 'function', 'call', 'go', 'context', 'define', 'function', 'end', 'local', 'variable', 'context', 'function', 'define', 'call', 'function', 'language', 'lexical', 'scope', 'nested', 'function', 'local', 'variable', 'context', 'nested', 'function', 'lexical', 'context', 'function', 'lexically', 'nest', 'local', 'variable', 'enclosing', 'function', 'know', 'non', 'local', 'variable', 'nested', 'function', 'function', 'scope', 'applicable', 'anonymous', 'function']"
744,"For example, in the snippet of Python code on the right, two functions are defined: square and sum_of_squares. square computes the square of a number; sum_of_squares computes the sum of all squares up to a number. For example, square4 is 42 = 16, and sum_of_squares4 is 02 + 12 + 22 + 32 + 42 = 30.","['example', 'snippet', 'python', 'code', 'right', 'function', 'define', 'square', 'sum_of_squares', 'square', 'compute', 'square', 'number', 'sum_of_squares', 'compute', 'sum', 'square', 'number', 'example', 'square4', 'sum_of_squares4']"
745,"Each of these functions has a variable named n that represents the argument to the function. These two n variables are completely separate and unrelated, despite having the same name, because they are lexically scoped local variables with function scope: each one's scope is its own, lexically separate function and thus, they don't overlap. Therefore, sum_of_squares can call square without its own n being altered. Similarly, sum_of_squares has variables named total and i; these variables, because of their limited scope, will not interfere with any variables named total or i that might belong to any other function. In other words, there is no risk of a name collision between these names and any unrelated names, even if they are identical.","['function', 'variable', 'name', 'represent', 'argument', 'function', 'variable', 'completely', 'separate', 'unrelated', 'despite', 'have', 'lexically', 'scope', 'local', 'variable', 'function', 'scope', 'scope', 'lexically', 'separate', 'function', 'overlap', 'sum_of_squares', 'square', 'alter', 'similarly', 'sum_of_squares', 'variable', 'name', 'total', 'variable', 'limited', 'scope', 'interfere', 'variable', 'name', 'total', 'belong', 'function', 'word', 'risk', 'collision', 'name', 'unrelated', 'name', 'identical']"
746,"No name masking is occurring: only one variable named n is in context at any given time, as the scopes do not overlap. By contrast, were a similar fragment to be written in a language with dynamic scope, the n in the calling function would remain in context in the called function—the scopes would overlap—and would be masked ""shadowed"" by the new n in the called function.","['masking', 'occur', 'variable', 'name', 'context', 'give', 'time', 'scope', 'overlap', 'contrast', 'similar', 'fragment', 'write', 'language', 'dynamic', 'scope', 'call', 'function', 'remain', 'context', 'call', 'function', 'scope', 'overlap', 'mask', 'shadow', 'new', 'call', 'function']"
747,"Function scope is significantly more complicated if functions are first-class objects and can be created locally to a function and then returned. In this case any variables in the nested function that are not local to it unbound variables in the function definition, that resolve to variables in an enclosing context create a closure, as not only the function itself, but also its context of variables must be returned, and then potentially called in a different context. This requires significantly more support from the compiler, and can complicate program analysis.","['function', 'scope', 'significantly', 'complicated', 'function', 'class', 'object', 'create', 'locally', 'function', 'return', 'case', 'variable', 'nested', 'function', 'local', 'unbound', 'variable', 'function', 'definition', 'resolve', 'variable', 'enclose', 'context', 'create', 'closure', 'function', 'context', 'variable', 'return', 'potentially', 'call', 'different', 'context', 'require', 'significantly', 'support', 'compiler', 'complicate', 'program', 'analysis']"
748,"The scope of a name binding is a file, which is known as file scope. File scope is largely particular to C and C++, where scope of variables and functions declared at the top level of a file not within any function is for the entire file—or rather for C, from the declaration until the end of the source file, or more precisely translation unit internal linking. This can be seen as a form of module scope, where modules are identified with files, and in more modern languages is replaced by an explicit module scope. Due to the presence of include statements, which add variables and functions to the internal context and may themselves call further include statements, it can be difficult to determine what is in context in the body of a file.","['scope', 'bind', 'file', 'know', 'file', 'scope', 'file', 'scope', 'largely', 'particular', 'c++', 'scope', 'variable', 'function', 'declare', 'level', 'file', 'function', 'entire', 'file', 'declaration', 'end', 'source', 'file', 'precisely', 'translation', 'unit', 'internal', 'linking', 'see', 'form', 'module', 'scope', 'module', 'identify', 'file', 'modern', 'language', 'replace', 'explicit', 'module', 'scope', 'presence', 'include', 'statement', 'add', 'variable', 'function', 'internal', 'context', 'include', 'statement', 'difficult', 'determine', 'context', 'body', 'file']"
749,"In the C code snippet above, the function name sum_of_squares has file scope.","['code', 'snippet', 'function', 'sum_of_squares', 'file', 'scope']"
750,"The scope of a name binding is a module, which is known as module scope. Module scope is available in modular programming languages where modules which may span various files are the basic unit of a complex program, as they allow information hiding and exposing a limited interface. Module scope was pioneered in the Modula family of languages, and Python which was influenced by Modula is a representative contemporary example.","['scope', 'bind', 'module', 'know', 'module', 'scope', 'module', 'scope', 'available', 'modular', 'programming', 'language', 'module', 'span', 'file', 'basic', 'unit', 'complex', 'program', 'allow', 'information', 'hiding', 'expose', 'limited', 'interface', 'module', 'scope', 'pioneer', 'modula', 'family', 'language', 'python', 'influence', 'modula', 'representative', 'contemporary', 'example']"
751,"In some object-oriented programming languages that lack direct support for modules, such as C++, a similar structure is instead provided by the class hierarchy, where classes are the basic unit of the program, and a class can have private methods. This is properly understood in the context of dynamic dispatch rather than name resolution and scope, though they often play analogous roles. In some cases both these facilities are available, such as in Python, which has both modules and classes, and code organization as a module-level function or a conventionally private method is a choice of the programmer.","['object', 'orient', 'programming', 'language', 'lack', 'direct', 'support', 'module', 'c++', 'similar', 'structure', 'instead', 'provide', 'class', 'hierarchy', 'class', 'basic', 'unit', 'program', 'class', 'private', 'method', 'properly', 'understand', 'context', 'dynamic', 'dispatch', 'resolution', 'scope', 'play', 'analogous', 'role', 'case', 'facility', 'available', 'python', 'module', 'class', 'code', 'organization', 'module', 'level', 'function', 'conventionally', 'private', 'method', 'choice', 'programmer']"
752,"The scope of a name binding is an entire program, which is known as global scope. Variable names with global scope—called global variables—are frequently considered bad practice, at least in some languages, due to the possibility of name collisions and unintentional masking, together with poor modularity, and function scope or block scope are considered preferable. However, global scope is typically used depending on the language for various other sorts of names, such as names of functions, names of classes and names of other data types. In these cases mechanisms such as namespaces are used to avoid collisions.","['scope', 'bind', 'entire', 'program', 'know', 'global', 'scope', 'variable', 'name', 'global', 'scope', 'call', 'global', 'variable', 'frequently', 'consider', 'bad', 'practice', 'language', 'possibility', 'collision', 'unintentional', 'masking', 'poor', 'modularity', 'function', 'scope', 'block', 'scope', 'consider', 'preferable', 'global', 'scope', 'typically', 'depend', 'language', 'sort', 'name', 'name', 'function', 'name', 'class', 'name', 'datum', 'type', 'case', 'mechanism', 'namespace', 'avoid', 'collision']"
753,"The use of local variables — of variable names with limited scope, that only exist within a specific function — helps avoid the risk of a name collision between two identically named variables. However, there are two very different approaches to answering this question: What does it mean to be ""within"" a function?","['use', 'local', 'variable', 'variable', 'name', 'limited', 'scope', 'exist', 'specific', 'function', 'help', 'avoid', 'risk', 'collision', 'identically', 'name', 'variable', 'different', 'approach', 'answer', 'question', 'mean', 'function']"
754,"In lexical scope or lexical scoping; also called static scope or static scoping, if a variable name's scope is a certain function, then its scope is the program text of the function definition: within that text, the variable name exists, and is bound to the variable's value, but outside that text, the variable name does not exist. By contrast, in dynamic scope or dynamic scoping, if a variable name's scope is a certain function, then its scope is the time-period during which the function is executing: while the function is running, the variable name exists, and is bound to its value, but after the function returns, the variable name does not exist. This means that if function f invokes a separately defined function g, then under lexical scope, function g does not have access to f's local variables assuming the text of g is not inside the text of f, while under dynamic scope, function g does have access to f's local variables since g is invoked during the invocation of f.","['lexical', 'scope', 'lexical', 'scoping', 'call', 'static', 'scope', 'static', 'scoping', 'variable', 'scope', 'certain', 'function', 'scope', 'program', 'text', 'function', 'definition', 'text', 'variable', 'exist', 'bind', 'variable', 'value', 'outside', 'text', 'variable', 'exist', 'contrast', 'dynamic', 'scope', 'dynamic', 'scoping', 'variable', 'scope', 'certain', 'function', 'scope', 'time', 'period', 'function', 'execute', 'function', 'run', 'variable', 'exist', 'bind', 'value', 'function', 'return', 'variable', 'exist', 'mean', 'function', 'invoke', 'separately', 'define', 'function', 'lexical', 'scope', 'function', 'access', 'local', 'variable', 'assume', 'text', 'inside', 'text', 'dynamic', 'scope', 'function', 'access', 'local', 'variable', 'invoke', 'invocation']"
755,"Consider, for example, the program on the right. The first line, x=1, creates a global variable x and initializes it to 1. The second line, function g echo $x ; x=2 ; , defines a function g that prints out ""echoes"" the current value of x, and then sets x to 2 overwriting the previous value. The third line, function f local x=3 ; g ; defines a function f that creates a local variable x hiding the identically named global variable and initializes it to 3, and then calls g. The fourth line, f, calls f. The fifth line, echo $x, prints out the current value of x.","['consider', 'example', 'program', 'right', 'line', 'x=1', 'create', 'global', 'variable', 'initialize', 'second', 'line', 'function', 'echo', 'x=2', 'define', 'function', 'print', 'echo', 'current', 'value', 'set', 'overwrite', 'previous', 'value', 'line', 'function', 'local', 'x=3', 'define', 'function', 'create', 'local', 'variable', 'hide', 'identically', 'name', 'global', 'variable', 'initialize', 'call', 'fourth', 'line', 'call', 'fifth', 'line', 'echo', 'print', 'current', 'value']"
756,"So, what exactly does this program print? It depends on the scope rules. If the language of this program is one that uses lexical scope, then g prints and modifies the global variable x because g is defined outside f, so the program prints 1 and then 2. By contrast, if this language uses dynamic scope, then g prints and modifies f's local variable x because g is called from within f, so the program prints 3 and then 1. As it happens, the language of the program is Bash, which uses dynamic scope; so the program prints 3 and then 1. If the same code was run with ksh93 which uses lexical scope, the results would be different.","['exactly', 'program', 'print', 'depend', 'scope', 'rule', 'language', 'program', 'use', 'lexical', 'scope', 'print', 'modify', 'global', 'variable', 'define', 'outside', 'program', 'print', 'contrast', 'language', 'use', 'dynamic', 'scope', 'print', 'modify', 'local', 'variable', 'call', 'program', 'print', 'happen', 'language', 'program', 'bash', 'use', 'dynamic', 'scope', 'program', 'print', 'code', 'run', 'ksh93', 'use', 'lexical', 'scope', 'result', 'different']"
757,"With lexical scope, a name always refers to its lexical context. This is a property of the program text and is made independent of the runtime call stack by the language implementation. Because this matching only requires analysis of the static program text, this type of scope is also called static scope. Lexical scope is standard in all ALGOL-based languages such as Pascal, Modula-2 and Ada as well as in modern functional languages such as ML and Haskell. It is also used in the C language and its syntactic and semantic relatives, although with different kinds of limitations. Static scope allows the programmer to reason about object references such as parameters, variables, constants, types, functions, etc. as simple name substitutions. This makes it much easier to make modular code and reason about it, since the local naming structure can be understood in isolation. In contrast, dynamic scope forces the programmer to anticipate all possible execution contexts in which the module's code may be invoked.","['lexical', 'scope', 'refer', 'lexical', 'context', 'property', 'program', 'text', 'independent', 'runtime', 'stack', 'language', 'implementation', 'matching', 'require', 'analysis', 'static', 'program', 'text', 'type', 'scope', 'call', 'static', 'scope', 'lexical', 'scope', 'standard', 'algol', 'base', 'language', 'pascal', 'modula-2', 'ada', 'modern', 'functional', 'language', 'haskell', 'language', 'syntactic', 'semantic', 'relative', 'different', 'kind', 'limitation', 'static', 'scope', 'allow', 'programmer', 'reason', 'object', 'reference', 'parameter', 'variable', 'constant', 'type', 'function', 'etc', 'simple', 'substitution', 'make', 'easy', 'modular', 'code', 'reason', 'local', 'naming', 'structure', 'understand', 'isolation', 'contrast', 'dynamic', 'scope', 'force', 'programmer', 'anticipate', 'possible', 'execution', 'context', 'module', 'code', 'invoke']"
758,"For example, Pascal is lexically scoped. Consider the Pascal program fragment at right. The variable I is visible at all points, because it is never hidden by another variable of the same name. The char variable K is visible only in the main program because it is hidden by the real variable K visible in procedure B and C only. Variable L is also visible only in procedure B and C but it does not hide any other variable. Variable M is only visible in procedure C and therefore not accessible either from procedure B or the main program. Also, procedure C is visible only in procedure B and can therefore not be called from the main program.","['example', 'pascal', 'lexically', 'scope', 'consider', 'pascal', 'program', 'fragment', 'right', 'variable', 'visible', 'point', 'hide', 'variable', 'char', 'variable', 'visible', 'main', 'program', 'hide', 'real', 'variable', 'visible', 'procedure', 'variable', 'visible', 'procedure', 'hide', 'variable', 'variable', 'visible', 'procedure', 'accessible', 'procedure', 'main', 'program', 'procedure', 'visible', 'procedure', 'call', 'main', 'program']"
759,"There could have been another procedure C declared in the program outside of procedure B. The place in the program where ""C"" is mentioned then determines which of the two procedures named C it represents, thus precisely analogous with the scope of variables.","['procedure', 'declare', 'program', 'outside', 'procedure', 'place', 'program', 'mention', 'determine', 'procedure', 'name', 'represent', 'precisely', 'analogous', 'scope', 'variable']"
760,"Correct implementation of lexical scope in languages with first-class nested functions is not trivial, as it requires each function value to carry with it a record of the values of the variables that it depends on the pair of the function and this context is called a closure. Depending on implementation and computer architecture, variable lookup may become slightly inefficientcitation needed when very deeply lexically nested functions are used, although there are well-known techniques to mitigate this.89 Also, for nested functions that only refer to their own arguments and immediately local variables, all relative locations can be known at compile time. No overhead at all is therefore incurred when using that type of nested function. The same applies to particular parts of a program where nested functions are not used, and, naturally, to programs written in a language where nested functions are not available such as in the C language.","['correct', 'implementation', 'lexical', 'scope', 'language', 'class', 'nest', 'function', 'trivial', 'require', 'function', 'value', 'carry', 'record', 'value', 'variable', 'depend', 'pair', 'function', 'context', 'call', 'closure', 'depend', 'implementation', 'computer', 'architecture', 'variable', 'lookup', 'slightly', 'inefficientcitation', 'need', 'deeply', 'lexically', 'nest', 'function', 'know', 'technique', 'mitigate', 'this', 'nested', 'function', 'refer', 'argument', 'immediately', 'local', 'variable', 'relative', 'location', 'know', 'compile', 'time', 'overhead', 'incur', 'type', 'nested', 'function', 'apply', 'particular', 'part', 'program', 'nested', 'function', 'naturally', 'program', 'write', 'language', 'nested', 'function', 'available', 'language']"
761,Lexical scope was first used in the early 1960s for the imperative language ALGOL 60 and has been picked up in most other imperative languages since then.4,"['lexical', 'scope', 'early', '1960', 'imperative', 'language', 'algol', 'pick', 'imperative', 'language', 'then']"
762,"Languages like Pascal and C have always had lexical scope, since they are both influenced by the ideas that went into ALGOL 60 and ALGOL 68 although C did not include lexically nested functions.","['language', 'like', 'pascal', 'lexical', 'scope', 'influence', 'idea', 'go', 'algol', 'algol', 'include', 'lexically', 'nested', 'function']"
763,Perl is a language with dynamic scope that added static scope afterwards.,"['perl', 'language', 'dynamic', 'scope', 'add', 'static', 'scope']"
764,"The original Lisp interpreter 1960 used dynamic scope. Deep binding, which approximates static lexical scope, was introduced around 1962 in LISP 1.5 via the Funarg device developed by Steve Russell, working under John McCarthy.","['original', 'lisp', 'interpreter', '1960', 'dynamic', 'scope', 'deep', 'binding', 'approximate', 'static', 'lexical', 'scope', 'introduce', '1962', 'lisp', '1', 'funarg', 'device', 'develop', 'steve', 'russell', 'work', 'john', 'mccarthy']"
765,"All early Lisps used dynamic scope, when based on interpreters. In 1982, Guy L. Steele Jr. and the Common LISP Group publish An overview of Common LISP,10 a short review of the history and the divergent implementations of Lisp up to that moment and a review of the features that a Common Lisp implementation should have. On page 102, we read:","['early', 'lisps', 'dynamic', 'scope', 'base', 'interpreter', '1982', 'guy', 'steele', 'jr.', 'common', 'lisp', 'group', 'publish', 'overview', 'common', 'lisp', 'short', 'review', 'history', 'divergent', 'implementation', 'lisp', 'moment', 'review', 'feature', 'common', 'lisp', 'implementation', 'page', '102', 'read']"
766,"Most LISP implementations are internally inconsistent in that by default the interpreter and compiler may assign different semantics to correct programs; this stems primarily from the fact that the interpreter assumes all variables to be dynamically scoped, while the compiler assumes all variables to be local unless forced to assume otherwise. This has been done for the sake of convenience and efficiency, but can lead to very subtle bugs. The definition of Common LISP avoids such anomalies by explicitly requiring the interpreter and compiler to impose identical semantics on correct programs.","['lisp', 'implementation', 'internally', 'inconsistent', 'default', 'interpreter', 'compiler', 'assign', 'different', 'semantic', 'correct', 'program', 'stem', 'primarily', 'fact', 'interpreter', 'assume', 'variable', 'dynamically', 'scope', 'compiler', 'assume', 'variable', 'local', 'force', 'assume', 'sake', 'convenience', 'efficiency', 'lead', 'subtle', 'bug', 'definition', 'common', 'lisp', 'avoid', 'anomaly', 'explicitly', 'require', 'interpreter', 'compiler', 'impose', 'identical', 'semantic', 'correct', 'program']"
767,"Implementations of Common LISP were thus required to have lexical scope. Again, from An overview of Common LISP:","['implementation', 'common', 'lisp', 'require', 'lexical', 'scope', 'overview', 'common', 'lisp']"
768,"In addition, Common LISP offers the following facilities most of which are borrowed from MacLisp, InterLisp or Lisp Machines Lisp: ... Fully lexically scoped variables. The so-called ""FUNARG problem""1112 is completely solved, in both the downward and upward cases.","['addition', 'common', 'lisp', 'offer', 'follow', 'facility', 'borrow', 'maclisp', 'interlisp', 'lisp', 'machines', 'lisp', 'fully', 'lexically', 'scope', 'variable', 'call', 'funarg', 'problem', 'completely', 'solve', 'downward', 'upward', 'case']"
769,"By the same year in which An overview of Common LISP was published 1982, initial designs also by Guy L. Steele Jr. of a compiled, lexically scoped Lisp, called Scheme had been published and compiler implementations were being attempted. At that time, lexical scope in Lisp was commonly feared to be inefficient to implement. In A History of T,13 Olin Shivers writes:","['year', 'overview', 'common', 'lisp', 'publish', '1982', 'initial', 'design', 'guy', 'steele', 'jr.', 'compile', 'lexically', 'scope', 'lisp', 'call', 'scheme', 'publish', 'compiler', 'implementation', 'attempt', 'time', 'lexical', 'scope', 'lisp', 'commonly', 'fear', 'inefficient', 'implement', 'history', 't', 'olin', 'shivers', 'write']"
770,All serious Lisps in production use at that time were dynamically scoped. No one who hadn't carefully read the Rabbit14 thesis written by Guy Lewis Steele Jr. in 1978 believed lexical scope would fly; even the few people who had read it were taking a bit of a leap of faith that this was going to work in serious production use.,"['lisps', 'production', 'use', 'time', 'dynamically', 'scope', 'carefully', 'read', 'rabbit14', 'thesis', 'write', 'guy', 'lewis', 'steele', 'jr.', '1978', 'believe', 'lexical', 'scope', 'fly', 'people', 'read', 'take', 'bit', 'leap', 'faith', 'go', 'work', 'production', 'use']"
771,"The term ""lexical scope"" dates at least to 1967,15 while the term ""lexical scoping"" dates at least to 1970, where it was used in Project MAC to describe the scope rules of the Lisp dialect MDL then known as ""Muddle"".16","['term', 'lexical', 'scope', 'date', '1967', 'term', 'lexical', 'scoping', 'date', '1970', 'project', 'mac', 'describe', 'scope', 'rule', 'lisp', 'dialect', 'mdl', 'know', 'muddle']"
772,"With dynamic scope, a name refers to execution context. In technical terms, this means that each name has a global stack of bindings. Introducing a local variable with name x pushes a binding onto the global x stack which may have been empty, which is popped off when the control flow leaves the scope. Evaluating x in any context always yields the top binding. Note that this cannot be done at compile-time because the binding stack only exists at run-time, which is why this type of scope is called dynamic scope.","['dynamic', 'scope', 'refer', 'execution', 'context', 'technical', 'term', 'mean', 'global', 'stack', 'binding', 'introduce', 'local', 'variable', 'push', 'binding', 'global', 'stack', 'pop', 'control', 'flow', 'leave', 'scope', 'evaluating', 'context', 'yield', 'bind', 'note', 'compile', 'time', 'bind', 'stack', 'exist', 'run', 'time', 'type', 'scope', 'call', 'dynamic', 'scope']"
773,Dynamic scope is uncommon in modern languages.4,"['dynamic', 'scope', 'uncommon', 'modern', 'languages']"
774,"Generally, certain blocks are defined to create bindings whose lifetime is the execution time of the block; this adds some features of static scope to the dynamic scope process. However, since a section of code can be called from many different locations and situations, it can be difficult to determine at the outset what bindings will apply when a variable is used or if one exists at all. This can be beneficial; application of the principle of least knowledge suggests that code avoid depending on the reasons for or circumstances of a variable's value, but simply use the value according to the variable's definition. This narrow interpretation of shared data can provide a very flexible system for adapting the behavior of a function to the current state or policy of the system. However, this benefit relies on careful documentation of all variables used this way as well as on careful avoidance of assumptions about a variable's behavior, and does not provide any mechanism to detect interference between different parts of a program. Some languages, like Perl and Common Lisp, allow the programmer to choose static or dynamic scope when defining or redefining a variable. Examples of languages that use dynamic scope include Logo, Emacs Lisp, LaTeX and the shell languages bash, dash, and PowerShell.","['generally', 'certain', 'block', 'define', 'create', 'binding', 'lifetime', 'execution', 'time', 'block', 'add', 'feature', 'static', 'scope', 'dynamic', 'scope', 'process', 'section', 'code', 'call', 'different', 'location', 'situation', 'difficult', 'determine', 'outset', 'binding', 'apply', 'variable', 'exist', 'beneficial', 'application', 'principle', 'knowledge', 'suggest', 'code', 'avoid', 'depend', 'reason', 'circumstance', 'variable', 'value', 'simply', 'use', 'value', 'accord', 'variable', 'definition', 'narrow', 'interpretation', 'share', 'datum', 'provide', 'flexible', 'system', 'adapt', 'behavior', 'function', 'current', 'state', 'policy', 'system', 'benefit', 'rely', 'careful', 'documentation', 'variable', 'way', 'careful', 'avoidance', 'assumption', 'variable', 'behavior', 'provide', 'mechanism', 'detect', 'interference', 'different', 'part', 'program', 'language', 'like', 'perl', 'common', 'lisp', 'allow', 'programmer', 'choose', 'static', 'dynamic', 'scope', 'define', 'redefine', 'variable', 'example', 'language', 'use', 'dynamic', 'scope', 'include', 'logo', 'emacs', 'lisp', 'latex', 'shell', 'language', 'bash', 'dash', 'powershell']"
775,"Dynamic scope is fairly easy to implement. To find an name's value, the program could traverse the runtime stack, checking each activation record each function's stack frame for a value for the name. In practice, this is made more efficient via the use of an association list, which is a stack of name/value pairs. Pairs are pushed onto this stack whenever declarations are made, and popped whenever variables go out of context.17 Shallow binding is an alternative strategy that is considerably faster, making use of a central reference table, which associates each name with its own stack of meanings. This avoids a linear search during run-time to find a particular name, but care should be taken to properly maintain this table.17 Note that both of these strategies assume a last-in-first-out LIFO ordering to bindings for any one variable; in practice all bindings are so ordered.","['dynamic', 'scope', 'fairly', 'easy', 'implement', 'find', 'value', 'program', 'traverse', 'runtime', 'stack', 'check', 'activation', 'record', 'function', 'stack', 'frame', 'value', 'practice', 'efficient', 'use', 'association', 'list', 'stack', 'value', 'pair', 'pair', 'push', 'stack', 'declaration', 'pop', 'variable', 'context', 'shallow', 'binding', 'alternative', 'strategy', 'considerably', 'fast', 'make', 'use', 'central', 'reference', 'table', 'associate', 'stack', 'meaning', 'avoid', 'linear', 'search', 'run', 'time', 'find', 'particular', 'care', 'take', 'properly', 'maintain', 'table', 'note', 'strategy', 'assume', 'lifo', 'order', 'binding', 'variable', 'practice', 'binding', 'order']"
776,"An even simpler implementation is the representation of dynamic variables with simple global variables. The local binding is performed by saving the original value in an anonymous location on the stack that is invisible to the program. When that binding scope terminates, the original value is restored from this location. In fact, dynamic scope originated in this manner. Early implementations of Lisp used this obvious strategy for implementing local variables, and the practice survives in some dialects which are still in use, such as GNU Emacs Lisp. Lexical scope was introduced into Lisp later. This is equivalent to the above shallow binding scheme, except that the central reference table is simply the global variable binding context, in which the current meaning of the variable is its global value. Maintaining global variables isn't complex. For instance, a symbol object can have a dedicated slot for its global value.","['simple', 'implementation', 'representation', 'dynamic', 'variable', 'simple', 'global', 'variable', 'local', 'binding', 'perform', 'save', 'original', 'value', 'anonymous', 'location', 'stack', 'invisible', 'program', 'bind', 'scope', 'terminate', 'original', 'value', 'restore', 'location', 'fact', 'dynamic', 'scope', 'originate', 'manner', 'early', 'implementation', 'lisp', 'obvious', 'strategy', 'implement', 'local', 'variable', 'practice', 'survive', 'dialect', 'use', 'gnu', 'emacs', 'lisp', 'lexical', 'scope', 'introduce', 'lisp', 'later', 'equivalent', 'shallow', 'bind', 'scheme', 'central', 'reference', 'table', 'simply', 'global', 'variable', 'bind', 'context', 'current', 'meaning', 'variable', 'global', 'value', 'maintain', 'global', 'variable', 'complex', 'instance', 'symbol', 'object', 'dedicated', 'slot', 'global', 'value']"
777,"Dynamic scope provides an excellent abstraction for thread-local storage, but if it is used that way it cannot be based on saving and restoring a global variable. A possible implementation strategy is for each variable to have a thread-local key. When the variable is accessed, the thread-local key is used to access the thread-local memory location by code generated by the compiler, which knows which variables are dynamic and which are lexical. If the thread-local key does not exist for the calling thread, then the global location is used. When a variable is locally bound, the prior value is stored in a hidden location on the stack. The thread-local storage is created under the variable's key, and the new value is stored there. Further nested overrides of the variable within that thread simply save and restore this thread-local location. When the initial, outermost override's context terminates, the thread-local key is deleted, exposing the global version of the variable once again to that thread.","['dynamic', 'scope', 'provide', 'excellent', 'abstraction', 'thread', 'local', 'storage', 'way', 'base', 'save', 'restore', 'global', 'variable', 'possible', 'implementation', 'strategy', 'variable', 'thread', 'local', 'key', 'variable', 'access', 'thread', 'local', 'key', 'access', 'thread', 'local', 'memory', 'location', 'code', 'generate', 'compiler', 'know', 'variable', 'dynamic', 'lexical', 'thread', 'local', 'key', 'exist', 'call', 'thread', 'global', 'location', 'variable', 'locally', 'bind', 'prior', 'value', 'store', 'hidden', 'location', 'stack', 'thread', 'local', 'storage', 'create', 'variable', 'key', 'new', 'value', 'store', 'nest', 'override', 'variable', 'thread', 'simply', 'save', 'restore', 'thread', 'local', 'location', 'initial', 'outermost', 'override', 'context', 'terminate', 'thread', 'local', 'key', 'delete', 'expose', 'global', 'version', 'variable', 'thread']"
778,"With referential transparency the dynamic scope is restricted to the argument stack of the current function only, and coincides with the lexical scope.","['referential', 'transparency', 'dynamic', 'scope', 'restrict', 'argument', 'stack', 'current', 'function', 'coincide', 'lexical', 'scope']"
779,"In modern languages, macro expansion in a preprocessor is a key example of de facto dynamic scope. The macro language itself only transforms the source code, without resolving names, but since the expansion is done in place, when the names in the expanded text are then resolved notably free variables, they are resolved based on where they are expanded loosely ""called"", as if dynamic scope were occurring.","['modern', 'language', 'macro', 'expansion', 'preprocessor', 'key', 'example', 'facto', 'dynamic', 'scope', 'macro', 'language', 'transform', 'source', 'code', 'resolve', 'name', 'expansion', 'place', 'name', 'expand', 'text', 'resolve', 'notably', 'free', 'variable', 'resolve', 'base', 'expand', 'loosely', 'call', 'dynamic', 'scope', 'occur']"
780,"The C preprocessor, used for macro expansion, has de facto dynamic scope, as it does not do name resolution by itself and it is independent of where the macro is defined. For example, the macro:","['preprocessor', 'macro', 'expansion', 'facto', 'dynamic', 'scope', 'resolution', 'independent', 'macro', 'define', 'example', 'macro']"
781,"will expand to add a to the passed variable, with this name only later resolved by the compiler based on where the macro ADD_A is ""called"" properly, expanded. Properly, the C preprocessor only does lexical analysis, expanding the macro during the tokenization stage, but not parsing into a syntax tree or doing name resolution.","['expand', 'add', 'pass', 'variable', 'later', 'resolve', 'compiler', 'base', 'macro', 'add_a', 'call', 'properly', 'expand', 'properly', 'preprocessor', 'lexical', 'analysis', 'expand', 'macro', 'tokenization', 'stage', 'parse', 'syntax', 'tree', 'resolution']"
782,"For example, in the following code, the name a in the macro is resolved after expansion to the local variable at the expansion site:","['example', 'follow', 'code', 'macro', 'resolve', 'expansion', 'local', 'variable', 'expansion', 'site']"
783,"As we have seen, one of the key reasons for scope is that it helps prevent name collisions, by allowing identical names to refer to distinct things, with the restriction that the names must have separate scopes. Sometimes this restriction is inconvenient; when many different things need to be accessible throughout a program, they generally all need names with global scope, so different techniques are required to avoid name collisions.","['see', 'key', 'reason', 'scope', 'help', 'prevent', 'collision', 'allow', 'identical', 'name', 'refer', 'distinct', 'thing', 'restriction', 'name', 'separate', 'scope', 'restriction', 'inconvenient', 'different', 'thing', 'need', 'accessible', 'program', 'generally', 'need', 'name', 'global', 'scope', 'different', 'technique', 'require', 'avoid', 'collision']"
784,"To address this, many languages offer mechanisms for organizing global names. The details of these mechanisms, and the terms used, depend on the language; but the general idea is that a group of names can itself be given a name — a prefix — and, when necessary, an entity can be referred to by a qualified name consisting of the name plus the prefix. Normally such names will have, in a sense, two sets of scopes: a scope usually the global scope in which the qualified name is visible, and one or more narrower scopes in which the unqualified name without the prefix is visible as well. And normally these groups can themselves be organized into groups; that is, they can be nested.","['address', 'language', 'offer', 'mechanism', 'organize', 'global', 'name', 'detail', 'mechanism', 'term', 'depend', 'language', 'general', 'idea', 'group', 'name', 'give', 'prefix', 'necessary', 'entity', 'refer', 'qualified', 'consist', 'plus', 'prefix', 'normally', 'name', 'sense', 'set', 'scope', 'scope', 'usually', 'global', 'scope', 'qualified', 'visible', 'narrow', 'scope', 'unqualified', 'prefix', 'visible', 'normally', 'group', 'organize', 'group', 'nest']"
785,"Although many languages support this concept, the details vary greatly. Some languages have mechanisms, such as namespaces in C++ and C#, that serve almost exclusively to enable global names to be organized into groups. Other languages have mechanisms, such as packages in Ada and structures in Standard ML, that combine this with the additional purpose of allowing some names to be visible only to other members of their group. And object-oriented languages often allow classes or singleton objects to fulfill this purpose whether or not they also have a mechanism for which this is the primary purpose. Furthermore, languages often meld these approaches; for example, Perl's packages are largely similar to C++'s namespaces, but optionally double as classes for object-oriented programming; and Java organizes its variables and functions into classes, but then organizes those classes into Ada-like packages.","['language', 'support', 'concept', 'detail', 'vary', 'greatly', 'language', 'mechanism', 'namespace', 'c++', 'serve', 'exclusively', 'enable', 'global', 'name', 'organize', 'group', 'language', 'mechanism', 'package', 'ada', 'structure', 'standard', 'combine', 'additional', 'purpose', 'allow', 'name', 'visible', 'member', 'group', 'object', 'orient', 'language', 'allow', 'class', 'singleton', 'object', 'fulfill', 'purpose', 'mechanism', 'primary', 'purpose', 'furthermore', 'language', 'meld', 'approach', 'example', 'perl', 'package', 'largely', 'similar', 'c++', 'namespace', 'optionally', 'double', 'class', 'object', 'orient', 'programming', 'java', 'organize', 'variable', 'function', 'class', 'organize', 'class', 'ada', 'like', 'package']"
786,Scope rules for representative languages follow.,"['scope', 'rule', 'representative', 'language', 'follow']"
787,"In C, scope is traditionally known as linkage or visibility, particularly for variables. C is a lexically scoped language with global scope known as external linkage, a form of module scope or file scope known as internal linkage, and local scope within a function; within a function scopes can further be nested via block scope. However, standard C does not support nested functions.","['scope', 'traditionally', 'know', 'linkage', 'visibility', 'particularly', 'variable', 'lexically', 'scope', 'language', 'global', 'scope', 'know', 'external', 'linkage', 'form', 'module', 'scope', 'file', 'scope', 'know', 'internal', 'linkage', 'local', 'scope', 'function', 'function', 'scope', 'nest', 'block', 'scope', 'standard', 'support', 'nested', 'function']"
788,"The lifetime and visibility of a variable are determined by its storage class. There are three types of lifetimes in C: static program execution, automatic block execution, allocated on the stack, and manual allocated on the heap. Only static and automatic are supported for variables and handled by the compiler, while manually allocated memory must be tracked manually across different variables. There are three levels of visibility in C: external linkage global, internal linkage roughly file, and block scope which includes functions; block scopes can be nested, and different levels of internal linkage is possible by use of includes. Internal linkage in C is visibility at the translation unit level, namely a source file after being processed by the C preprocessor, notably including all relevant includes.","['lifetime', 'visibility', 'variable', 'determine', 'storage', 'class', 'type', 'lifetime', 'static', 'program', 'execution', 'automatic', 'block', 'execution', 'allocate', 'stack', 'manual', 'allocate', 'heap', 'static', 'automatic', 'support', 'variable', 'handle', 'compiler', 'manually', 'allocate', 'memory', 'track', 'manually', 'different', 'variable', 'level', 'visibility', 'external', 'linkage', 'global', 'internal', 'linkage', 'roughly', 'file', 'block', 'scope', 'include', 'function', 'block', 'scope', 'nest', 'different', 'level', 'internal', 'linkage', 'possible', 'use', 'include', 'internal', 'linkage', 'visibility', 'translation', 'unit', 'level', 'source', 'file', 'process', 'preprocessor', 'notably', 'include', 'relevant', 'include']"
789,"C programs are compiled as separate object files, which are then linked into an executable or library via a linker. Thus name resolution is split across the compiler, which resolves names within a translation unit more loosely, ""compilation unit"", but this is properly a different concept, and the linker, which resolves names across translation units; see linkage for further discussion.","['program', 'compile', 'separate', 'object', 'file', 'link', 'executable', 'library', 'linker', 'resolution', 'split', 'compiler', 'resolve', 'name', 'translation', 'unit', 'loosely', 'compilation', 'unit', 'properly', 'different', 'concept', 'linker', 'resolve', 'name', 'translation', 'unit', 'linkage', 'discussion']"
790,"In C, variables with block scope enter context when they are declared not at the top of the block, go out of context if any non-nested function is called within the block, come back into context when the function returns, and go out of context at the end of the block. In the case of automatic local variables, they are also allocated on declaration and deallocated at the end of the block, while for static local variables, they are allocated at program initialization and deallocated at program termination.","['variable', 'block', 'scope', 'enter', 'context', 'declare', 'block', 'context', 'non', 'nested', 'function', 'call', 'block', 'come', 'context', 'function', 'return', 'context', 'end', 'block', 'case', 'automatic', 'local', 'variable', 'allocate', 'declaration', 'deallocate', 'end', 'block', 'static', 'local', 'variable', 'allocate', 'program', 'initialization', 'deallocate', 'program', 'termination']"
791,"The following program demonstrates a variable with block scope coming into context partway through the block, then exiting context and in fact being deallocated when the block ends:","['following', 'program', 'demonstrate', 'variable', 'block', 'scope', 'come', 'context', 'partway', 'block', 'exit', 'context', 'fact', 'deallocate', 'block', 'end']"
792,"There are other levels of scope in C.18 Variable names used in a function prototype have function prototype visibility, and exit context at the end of the function prototype. Since the name is not used, this is not useful for compilation, but may be useful for documentation. Label names for GOTO statement have function scope, while case label names for switch statements have block scope the block of the switch.","['level', 'scope', 'c', 'variable', 'name', 'function', 'prototype', 'function', 'prototype', 'visibility', 'exit', 'context', 'end', 'function', 'prototype', 'useful', 'compilation', 'useful', 'documentation', 'label', 'name', 'goto', 'statement', 'function', 'scope', 'case', 'label', 'name', 'switch', 'statement', 'block', 'scope', 'block', 'switch']"
793,"All the variables that we intend to use in a program must have been declared with its type specifier in an earlier point in the code, like we did in the previous code at the beginning of the body of the function main when we declared that a, b, and result were of type int. A variable can be either of global or local scope. A global variable is a variable declared in the main body of the source code, outside all functions, while a local variable is one declared within the body of a function or a block.","['variable', 'intend', 'use', 'program', 'declare', 'type', 'specifi', 'early', 'point', 'code', 'like', 'previous', 'code', 'beginning', 'body', 'function', 'main', 'declare', 'result', 'type', 'int', 'variable', 'global', 'local', 'scope', 'global', 'variable', 'variable', 'declare', 'main', 'body', 'source', 'code', 'outside', 'function', 'local', 'variable', 'declare', 'body', 'function', 'block']"
794,Modern versions allow nested lexical scope.,"['modern', 'version', 'allow', 'nested', 'lexical', 'scope']"
795,"Swift has a similar rule for scopes with C++, but contains different access modifiers.","['swift', 'similar', 'rule', 'scope', 'c++', 'contain', 'different', 'access', 'modifier']"
796,Go is lexically scoped using blocks.3,"['lexically', 'scope', 'blocks']"
797,A Java class can contain three types of variables:19,"['java', 'class', 'contain', 'type', 'variables']"
798,"In general, a set of brackets defines a particular scope, but variables at top level within a class can differ in their behavior depending on the modifier keywords used in their definition. The following table shows the access to members permitted by each modifier.20","['general', 'set', 'bracket', 'define', 'particular', 'scope', 'variable', 'level', 'class', 'differ', 'behavior', 'depend', 'modifier', 'keyword', 'definition', 'follow', 'table', 'show', 'access', 'member', 'permit', 'modifier']"
799,"JavaScript has simple scope rules,21 but variable initialization and name resolution rules can cause problems, and the widespread use of closures for callbacks means the lexical context of a function when defined which is used for name resolution can be very different from the lexical context when it is called which is irrelevant for name resolution. JavaScript objects have name resolution for properties, but this is a separate topic.","['javascript', 'simple', 'scope', 'rules', 'variable', 'initialization', 'resolution', 'rule', 'cause', 'problem', 'widespread', 'use', 'closure', 'callback', 'mean', 'lexical', 'context', 'function', 'define', 'resolution', 'different', 'lexical', 'context', 'call', 'irrelevant', 'resolution', 'javascript', 'object', 'resolution', 'property', 'separate', 'topic']"
800,"JavaScript has lexical scope 22 nested at the function level, with the global context being the outermost context. This scope is used for both variables and for functions meaning function declarations, as opposed to variables of function type.23 Block scope with the let and const keywords is standard since ECMAScript 6. Block scope can be produced by wrapping the entire block in a function and then executing it; this is known as the immediately-invoked function expression IIFE pattern.","['javascript', 'lexical', 'scope', 'nest', 'function', 'level', 'global', 'context', 'outermost', 'context', 'scope', 'variable', 'function', 'mean', 'function', 'declaration', 'oppose', 'variable', 'function', 'type', 'block', 'scope', 'let', 'const', 'keyword', 'standard', 'ecmascript', 'block', 'scope', 'produce', 'wrap', 'entire', 'block', 'function', 'execute', 'know', 'immediately', 'invoke', 'function', 'expression', 'iife', 'pattern']"
801,"While JavaScript scope is simple—lexical, function-level—the associated initialization and name resolution rules are a cause of confusion. Firstly, assignment to a name not in scope defaults to creating a new global variable, not a local one. Secondly, to create a new local variable one must use the var keyword; the variable is then created at the top of the function, with value undefined and the variable is assigned its value when the assignment expression is reached:","['javascript', 'scope', 'simple', 'lexical', 'function', 'level', 'associated', 'initialization', 'resolution', 'rule', 'cause', 'confusion', 'firstly', 'assignment', 'scope', 'default', 'create', 'new', 'global', 'variable', 'local', 'secondly', 'create', 'new', 'local', 'variable', 'use', 'var', 'keyword', 'variable', 'create', 'function', 'value', 'undefined', 'variable', 'assign', 'value', 'assignment', 'expression', 'reach']"
802,"This is known as variable hoisting25—the declaration, but not the initialization, is hoisted to the top of the function. Thirdly, accessing variables before initialization yields undefined, rather than a syntax error. Fourthly, for function declarations, the declaration and the initialization are both hoisted to the top of the function, unlike for variable initialization. For example, the following code produces a dialog with output undefined, as the local variable declaration is hoisted, shadowing the global variable, but the initialization is not, so the variable is undefined when used:","['know', 'variable', 'hoisting25', 'declaration', 'initialization', 'hoist', 'function', 'thirdly', 'access', 'variable', 'initialization', 'yield', 'undefined', 'syntax', 'error', 'fourthly', 'function', 'declaration', 'declaration', 'initialization', 'hoist', 'function', 'unlike', 'variable', 'initialization', 'example', 'follow', 'code', 'produce', 'dialog', 'output', 'undefine', 'local', 'variable', 'declaration', 'hoist', 'shadow', 'global', 'variable', 'initialization', 'variable', 'undefine']"
803,"Further, as functions are first-class objects in JavaScript and are frequently assigned as callbacks or returned from functions, when a function is executed, the name resolution depends on where it was originally defined the lexical context of the definition, not the lexical context or execution context where it is called. The nested scopes of a particular function from most global to most local in JavaScript, particularly of a closure, used as a callback, are sometimes referred to as the scope chain, by analogy with the prototype chain of an object.","['function', 'class', 'object', 'javascript', 'frequently', 'assign', 'callback', 'return', 'function', 'function', 'execute', 'resolution', 'depend', 'originally', 'define', 'lexical', 'context', 'definition', 'lexical', 'context', 'execution', 'context', 'call', 'nested', 'scope', 'particular', 'function', 'global', 'local', 'javascript', 'particularly', 'closure', 'callback', 'refer', 'scope', 'chain', 'analogy', 'prototype', 'chain', 'object']"
804,"Closures can be produced in JavaScript by using nested functions, as functions are first-class objects.26 Returning a nested function from an enclosing function includes the local variables of the enclosing function as the non-local lexical context of the returned function, yielding a closure. For example:","['closure', 'produce', 'javascript', 'nested', 'function', 'function', 'class', 'objects', 'return', 'nested', 'function', 'enclosing', 'function', 'include', 'local', 'variable', 'enclose', 'function', 'non', 'local', 'lexical', 'context', 'return', 'function', 'yield', 'closure', 'example']"
805,"Closures are frequently used in JavaScript, due to being used for callbacks. Indeed, any hooking of a function in the local context as a callback or returning it from a function creates a closure if there are any unbound variables in the function body with the context of the closure based on the nested scopes of the current lexical context, or ""scope chain""; this may be accidental. When creating a callback based on parameters, the parameters must be stored in a closure, otherwise it will accidentally create a closure that refers to the variables in the enclosing context, which may change.27","['closure', 'frequently', 'javascript', 'callback', 'hooking', 'function', 'local', 'context', 'callback', 'return', 'function', 'create', 'closure', 'unbound', 'variable', 'function', 'body', 'context', 'closure', 'base', 'nested', 'scope', 'current', 'lexical', 'context', 'scope', 'chain', 'accidental', 'create', 'callback', 'base', 'parameter', 'parameter', 'store', 'closure', 'accidentally', 'create', 'closure', 'refer', 'variable', 'enclose', 'context', 'change']"
806,Name resolution of properties of JavaScript objects is based on inheritance in the prototype tree—a path to the root in the tree is called a prototype chain—and is separate from name resolution of variables and functions.,"['resolution', 'property', 'javascript', 'object', 'base', 'inheritance', 'prototype', 'tree', 'path', 'root', 'tree', 'call', 'prototype', 'chain', 'separate', 'resolution', 'variable', 'function']"
807,Lisp dialects have various rules for scope.,"['lisp', 'dialect', 'rule', 'scope']"
808,"The original Lisp used dynamic scope; it was Scheme, inspired by ALGOL, that introduced static lexical scope to the Lisp family.","['original', 'lisp', 'dynamic', 'scope', 'scheme', 'inspire', 'algol', 'introduce', 'static', 'lexical', 'scope', 'lisp', 'family']"
809,"Maclisp used dynamic scope by default in the interpreter and lexical scope by default in compiled code, though compiled code could access dynamic bindings by use of SPECIAL declarations for particular variables.28 However, Maclisp treated lexical binding more as an optimization than one would expect in modern languages, and it did not come with the closure feature one might expect of lexical scope in modern Lisps. A separate operation, *FUNCTION, was available to somewhat clumsily work around some of that issue.29","['maclisp', 'dynamic', 'scope', 'default', 'interpreter', 'lexical', 'scope', 'default', 'compile', 'code', 'compile', 'code', 'access', 'dynamic', 'binding', 'use', 'special', 'declaration', 'particular', 'variables', 'maclisp', 'treat', 'lexical', 'bind', 'optimization', 'expect', 'modern', 'language', 'come', 'closure', 'feature', 'expect', 'lexical', 'scope', 'modern', 'lisps', 'separate', 'operation', 'function', 'available', 'somewhat', 'clumsily', 'work', 'issue']"
810,"Common Lisp adopted lexical scope from Scheme,30 as did Clojure.","['common', 'lisp', 'adopt', 'lexical', 'scope', 'scheme', 'clojure']"
811,"ISLISP has lexical scope for ordinary variables. It also has dynamic variables, but they are in all cases explicitly marked; they must be defined by a defdynamic special form, bound by a dynamic-let special form, and accessed by an explicit dynamic special form.31","['islisp', 'lexical', 'scope', 'ordinary', 'variable', 'dynamic', 'variable', 'case', 'explicitly', 'mark', 'define', 'defdynamic', 'special', 'form', 'bind', 'dynamic', 'let', 'special', 'form', 'access', 'explicit', 'dynamic', 'special', 'form']"
812,"Some other dialects of Lisp, like Emacs Lisp, still use dynamic scope by default. Emacs Lisp now has lexical scope available on a per-buffer basis.32","['dialect', 'lisp', 'like', 'emacs', 'lisp', 'use', 'dynamic', 'scope', 'default', 'emacs', 'lisp', 'lexical', 'scope', 'available', 'buffer', 'basis']"
813,"For variables, Python has function scope, module scope, and global scope. Names enter context at the start of a scope function, module, or global scope, and exit context when a non-nested function is called or the scope ends. If a name is used prior to variable initialization, this raises a runtime exception. If a variable is simply accessed not assigned to, name resolution follows the LEGB Local, Enclosing, Global, Built-in rule which resolves names to the narrowest relevant context. However, if a variable is assigned to, it defaults to declaring a variable whose scope starts at the start of the level function, module, or global, not at the assignment. Both these rules can be overridden with a global or nonlocal in Python 3 declaration prior to use, which allows accessing global variables even if there is a masking nonlocal variable, and assigning to global or nonlocal variables.","['variable', 'python', 'function', 'scope', 'module', 'scope', 'global', 'scope', 'name', 'enter', 'context', 'start', 'scope', 'function', 'module', 'global', 'scope', 'exit', 'context', 'non', 'nested', 'function', 'call', 'scope', 'end', 'prior', 'variable', 'initialization', 'raise', 'runtime', 'exception', 'variable', 'simply', 'access', 'assign', 'resolution', 'follow', 'legb', 'local', 'enclosing', 'global', 'build', 'rule', 'resolve', 'name', 'narrow', 'relevant', 'context', 'variable', 'assign', 'default', 'declare', 'variable', 'scope', 'start', 'start', 'level', 'function', 'module', 'global', 'assignment', 'rule', 'overridden', 'global', 'nonlocal', 'python', 'declaration', 'prior', 'use', 'allow', 'access', 'global', 'variable', 'masking', 'nonlocal', 'variable', 'assign', 'global', 'nonlocal', 'variable']"
814,"As a simple example, a function resolves a variable to the global scope:","['simple', 'example', 'function', 'resolve', 'variable', 'global', 'scope']"
815,"Note that x is defined before f is called, so no error is raised, even though it is defined after its reference in the definition of f. Lexically this is a forward reference, which is allowed in Python.","['note', 'define', 'call', 'error', 'raise', 'define', 'reference', 'definition', 'lexically', 'forward', 'reference', 'allow', 'python']"
816,"Here assignment creates a new local variable, which does not change the value of the global variable:","['assignment', 'create', 'new', 'local', 'variable', 'change', 'value', 'global', 'variable']"
817,"Assignment to a variable within a function causes it to be declared local to the function, hence its scope is the entire function, and thus using it prior to this assignment raises an error. This differs from C, where the scope of the local variable start at its declaration. This code raises an error:","['assignment', 'variable', 'function', 'cause', 'declare', 'local', 'function', 'scope', 'entire', 'function', 'prior', 'assignment', 'raise', 'error', 'differ', 'scope', 'local', 'variable', 'start', 'declaration', 'code', 'raise', 'error']"
818,"The default name resolution rules can be overridden with the global or nonlocal in Python 3 keywords. In the below code, the global x declaration in g means that x resolves to the global variable. It thus can be accessed as it has already been defined, and assignment assigns to the global variable, rather than declaring a new local variable. Note that no global declaration is needed in f—since it does not assign to the variable, it defaults to resolving to the global variable.","['default', 'resolution', 'rule', 'overridden', 'global', 'nonlocal', 'python', 'keyword', 'code', 'global', 'declaration', 'mean', 'resolve', 'global', 'variable', 'access', 'define', 'assignment', 'assign', 'global', 'variable', 'declare', 'new', 'local', 'variable', 'note', 'global', 'declaration', 'need', 'assign', 'variable', 'default', 'resolve', 'global', 'variable']"
819,"global can also be used for nested functions. In addition to allowing assignment to a global variable, as in an unnested function, this can also be used to access the global variable in the presence of a nonlocal variable:","['global', 'nested', 'function', 'addition', 'allow', 'assignment', 'global', 'variable', 'unnested', 'function', 'access', 'global', 'variable', 'presence', 'nonlocal', 'variable']"
820,"For nested functions, there is also the nonlocal declaration, for assigning to a nonlocal variable, similar to using global in an unnested function:","['nested', 'function', 'nonlocal', 'declaration', 'assign', 'nonlocal', 'variable', 'similar', 'global', 'unnested', 'function']"
821,"R is a lexically scoped language, unlike other implementations of S where the values of free variables are determined by a set of global variables, while in R they are determined by the context in which the function was created.33 The scope contexts may be accessed using a variety of features such as parent.frame which can simulate the experience of dynamic scope should the programmer desire.","['lexically', 'scope', 'language', 'unlike', 'implementation', 'value', 'free', 'variable', 'determine', 'set', 'global', 'variable', 'determine', 'context', 'function', 'created', 'scope', 'contexts', 'access', 'variety', 'feature', 'parent.frame', 'simulate', 'experience', 'dynamic', 'scope', 'programmer', 'desire']"
822,Functions have access to scope they were created in:,"['function', 'access', 'scope', 'create']"
823,Variables created or modified within a function stay there:,"['variable', 'create', 'modify', 'function', 'stay']"
824,Variables created or modified within a function stay there unless assignment to enclosing scope is explicitly requested:,"['variable', 'create', 'modify', 'function', 'stay', 'assignment', 'enclose', 'scope', 'explicitly', 'request']"
825,"Although R has lexical scope by default, function scopes can be changed:","['lexical', 'scope', 'default', 'function', 'scope', 'change']"
